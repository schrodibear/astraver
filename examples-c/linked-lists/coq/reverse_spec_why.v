(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export Caduceus.

(*Why type*) Definition Z18: Set.
Admitted.

(*Why type*) Definition Z19: Set.
Admitted.

(*Why type*) Definition Z2: Set.
Admitted.

(*Why type*) Definition Z3: Set.
Admitted.

(*Why type*) Definition Z4: Set.
Admitted.

(*Why type*) Definition Z20: Set.
Admitted.

(*Why type*) Definition Z23: Set.
Admitted.

(*Why type*) Definition plist: Set.
exact (plist Z23).
Defined.

(*Why type*) Definition Length: Set.
Admitted.

(*Why logic*) Definition lpath :
  ((memory) ((pointer) Z23) Z23) -> alloc_table -> ((pointer) Z23) -> plist
  -> ((pointer) Z23) -> Prop.
exact (fun m a => lpath _ a (acc m)).
Defined.

(*Why logic*) Definition cons : ((pointer) Z23) -> plist -> plist.
exact (@cons (pointer Z23)).
Defined.

(*Why axiom*) Lemma Path_cons_inv :
  (forall (tl_Z23:((memory) ((pointer) Z23) Z23)),
   (forall (alloc:alloc_table),
    (* File "list.h", line 50, characters 6-124 *)
    (forall (p1:((pointer) Z23)),
     (forall (l:plist),
      (forall (p2:((pointer) Z23)),
       ((valid alloc p1) /\ (lpath tl_Z23 alloc (acc tl_Z23 p1) l p2) <->
        (lpath tl_Z23 alloc p1 (cons p1 l) p2))))))).
Admitted.

(*Why logic*) Definition nil : plist.
exact nil.
Defined.

(*Why axiom*) Lemma Path_null_ax :
  (forall (tl_Z23:((memory) ((pointer) Z23) Z23)),
   (forall (alloc:alloc_table),
    (* File "list.h", line 44, characters 26-58 *)
    (forall (p:((pointer) Z23)), (lpath tl_Z23 alloc p nil p)))).
Admitted.

(*Why axiom*) Lemma Path_null_inv_ax :
  (forall (tl_Z23:((memory) ((pointer) Z23) Z23)),
   (forall (alloc:alloc_table),
    (* File "list.h", line 47, characters 6-63 *)
    (forall (p:((pointer) Z23)),
     (forall (l:plist), ((lpath tl_Z23 alloc p l p) -> l = nil))))).
Admitted.

(*Why logic*) Definition app : plist -> plist -> plist.
exact (@app (pointer Z23)).
Defined.

(*Why axiom*) Lemma app_nil_1_ax :
  (* File "list.h", line 25, characters 26-60 *)
  (forall (l:plist), l = (app l nil)).
Admitted.

(*Why axiom*) Lemma app_nil_2_ax :
  (* File "list.h", line 27, characters 26-60 *)
  (forall (l:plist), l = (app nil l)).
Admitted.

(*Why logic*) Definition cyclic :
  ((memory) ((pointer) Z23) Z3) -> alloc_table -> ((pointer) Z3) -> Prop.
Admitted.

(*Why logic*) Definition disjoint : plist -> plist -> Prop.
exact (@disjoint (pointer Z23)).
Defined.

(*Why axiom*) Lemma disjoint_nil1 :
  (* File "list.h", line 29, characters 27-61 *)
  (forall (l:plist), (disjoint l nil)).
Admitted.

(*Why axiom*) Lemma disjoint_nil2 :
  (* File "list.h", line 31, characters 27-61 *)
  (forall (l:plist), (disjoint nil l)).
Admitted.

(*Why logic*) Definition finite :
  ((memory) ((pointer) Z23) Z2) -> alloc_table -> ((pointer) Z2) -> Prop.
Admitted.

(*Why predicate*) Definition llist  (tl_Z23:((memory) ((pointer) Z23) Z23))
  (alloc:alloc_table) (p:((pointer) Z23)) (l:plist)
  := (* File "list.h", line 61, characters 40-56 *)
     (lpath tl_Z23 alloc p l null).

(*Why predicate*) Definition is_list  (tl_Z23:((memory) ((pointer) Z23) Z23))
  (alloc:alloc_table) (l:((pointer) Z23))
  := (* File "list.h", line 63, characters 33-63 *)
     (exists pl:plist, (llist tl_Z23 alloc l pl)).

(*Why axiom*) Lemma is_list_llist_ax :
  (forall (tl_Z23:((memory) ((pointer) Z23) Z23)),
   (forall (alloc:alloc_table),
    (* File "list.h", line 66, characters 6-64 *)
    (forall (p:((pointer) Z23)),
     ((is_list tl_Z23 alloc p) <-> (exists l:plist, (llist tl_Z23 alloc p l)))))).
Admitted.

(*Why logic*) Definition length :
  ((memory) ((pointer) Z23) Z4) -> alloc_table -> ((pointer) Z4) -> Length.
Admitted.

(*Why logic*) Definition list_length : plist -> Z.
Admitted.

(*Why axiom*) Lemma llist_function_ax :
  (forall (tl_Z23:((memory) ((pointer) Z23) Z23)),
   (forall (alloc:alloc_table),
    (* File "list.h", line 69, characters 6-99 *)
    (forall (l1:plist),
     (forall (l2:plist),
      (forall (p:((pointer) Z23)),
       ((llist tl_Z23 alloc p l1) -> ((llist tl_Z23 alloc p l2) -> l1 = l2))))))).
Admitted.

(*Why axiom*) Lemma llist_valid :
  (forall (tl_Z23:((memory) ((pointer) Z23) Z23)),
   (forall (alloc:alloc_table),
    (* File "list.h", line 73, characters 6-85 *)
    (forall (p1:((pointer) Z23)),
     (forall (l:plist),
      ((llist tl_Z23 alloc p1 l) -> (~(p1 = null) -> (valid alloc p1))))))).
Admitted.

(*Why logic*) Definition rev : plist -> plist.
Admitted.

(*Why axiom*) Lemma rev_nil_ax :
  (* File "list.h", line 23, characters 24-43 *) (rev nil) = nil.
Admitted.

