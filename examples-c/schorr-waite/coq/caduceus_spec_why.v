(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export caduceus_why. 
Require Export caduceus_tactics.
Require Export BinTree.

(*Why logic*) Definition clr_list :
  alloc_table -> ((memory) Z) -> ((memory) pointer) -> ((memory) pointer)
  -> pointer -> plist -> Prop.
exact clr_list.
Defined.

(*Why logic*) Definition cons : pointer -> plist -> plist.
exact (@cons pointer).
Defined.

(*Why logic*) Definition in_list : pointer -> plist -> Prop.
exact in_list.
Defined.

(*Why predicate*) Definition internal_separation_struct_node  (struct_node:pointer)
  := True.

(*Why logic*) Definition pair_in_list : pointer -> pointer -> plist -> Prop.
exact pair_in_list.
Defined.

(*Why logic*) Definition reachable :
  alloc_table -> ((memory) pointer) -> ((memory) pointer) -> pointer
  -> pointer -> Prop.
exact reachable.
Defined.

(*Why logic*) Definition reachable_elements :
  alloc_table -> ((memory) pointer) -> ((memory) pointer) -> pointer
  -> pointer -> plist -> Prop.
exact reachable_elements.
Defined.

(*Why axiom*) Lemma reachable_refl :
  (forall (alloc:alloc_table),
   (forall (l:((memory) pointer)),
    (forall (r:((memory) pointer)),
     (forall (p:pointer), (reachable alloc l r p p))))).
exists (@nil pointer).
constructor.
Qed.


(*Why axiom*) Lemma separation_struct_node_struct_node :
  (forall (struct_node:pointer), (forall (struct_node1:pointer), True)).
Admitted.

(*Why logic*) Definition unmarked_reachable :
  alloc_table -> ((memory) Z) -> ((memory) pointer) -> ((memory) pointer)
  -> pointer -> pointer -> Prop.
exact unmarked_reachable.
Defined.

(*Why predicate*) Definition valid_struct_node_c  (c:Z) := True.

(*Why axiom*) Lemma valid_struct_node_c_pointer :
  (forall (alloc:alloc_table),
   (forall (c:((memory) Z)),
    (forall (struct_node:pointer),
     ((valid alloc struct_node) -> (valid_struct_node_c (acc c struct_node)))))).
Admitted.

(*Why predicate*) Definition valid_struct_node_l  (l:pointer) := True.

(*Why axiom*) Lemma valid_struct_node_l_pointer :
  (forall (alloc:alloc_table),
   (forall (l:((memory) pointer)),
    (forall (struct_node:pointer),
     ((valid alloc struct_node) -> (valid_struct_node_l (acc l struct_node)))))).
Admitted.

(*Why predicate*) Definition valid_struct_node_m  (m:Z) := True.

(*Why axiom*) Lemma valid_struct_node_m_pointer :
  (forall (alloc:alloc_table),
   (forall (m:((memory) Z)),
    (forall (struct_node:pointer),
     ((valid alloc struct_node) -> (valid_struct_node_m (acc m struct_node)))))).
Admitted.

(*Why axiom*) Lemma valid_struct_node_pointer :
  (forall (alloc:alloc_table),
   (forall (struct_node:pointer),
    ((valid alloc struct_node) ->
     (internal_separation_struct_node struct_node)))).
Admitted.

(*Why predicate*) Definition valid_struct_node_r  (r:pointer) := True.

(*Why axiom*) Lemma valid_struct_node_r_pointer :
  (forall (alloc:alloc_table),
   (forall (r:((memory) pointer)),
    (forall (struct_node:pointer),
     ((valid alloc struct_node) -> (valid_struct_node_r (acc r struct_node)))))).
Admitted.

(*Why logic*) Definition weight :
  alloc_table -> ((memory) Z) -> ((memory) Z) -> ((memory) pointer)
  -> ((memory) pointer) -> pointer -> pointer -> weight_type.
exact weight.
Defined.
