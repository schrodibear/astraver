(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export caduceus_spec_why.
Require Export G4.

Require Export ZArith.
Definition z (n:Z) : nat := Zabs_nat n.

Definition reachable_ base c2 c1 c0 :=
  reachable (quad (z base) (z c2) (z c1) (z c0)).

Lemma reachable_3222 : reachable_ 3 2 2 2.
Proof.
  compute.
  apply rt_refl; auto.
Qed.

Lemma z_succ : forall x, 0 <= x -> z (x+1) = S (z x).
Admitted.

Lemma z_pred : forall x, 0<x -> z x = S (z (x-1)).
Admitted.

Lemma reachable_0 : forall b c2 c1 c0,
  0 <= b -> 0 <= c2 -> 0 <= c1 -> 0 < c0 -> 
  reachable_ b c2 c1 c0 -> reachable_ (b+1) c2 c1 (c0-1).
Proof.
  unfold reachable_.
  intros. rewrite (z_pred c0) in H3; auto.
  rewrite (z_succ b); auto.
  red. red. 
  apply rt_trans with (quad (z b) (z c2) (z c1) (S (z (c0 - 1)))); auto.
  apply rt_step. apply exp0.
Qed.

Lemma reachable_1 : forall b c2 c1,
  0 <= b -> 0 <= c2 -> 0 < c1 -> 
  reachable_ b c2 c1 0 -> reachable_ (b+1) c2 (c1-1) b.
Proof.
  unfold reachable_.
  intros. rewrite (z_pred c1) in H2; auto.
  rewrite (z_succ b); auto.
  red. red. 
  apply rt_trans with (quad (z b) (z c2) (S (z (c1 - 1))) 0); auto.
  apply rt_step. apply exp1.
Qed.

Lemma reachable_2 : forall b c2,
  0 <= b -> 0 < c2 -> 
  reachable_ b c2 0 0 -> reachable_ (b+1) (c2-1) b b.
Proof.
  unfold reachable_.
  intros. rewrite (z_pred c2) in H1; auto.
  rewrite (z_succ b); auto.
  red. red. 
  apply rt_trans with (quad (z b) (S (z (c2 - 1))) 0 0); auto.
  apply rt_step. apply exp2.
Qed.

Axiom reachable_end : forall b,
  reachable_ b 0 0 0 -> b = 3 * (pow 2 (3 * (pow 2 (pow 3 3)) + (pow 3 3))) - 1.

(* Why obligation from file "why/g4.why", characters 323-1095 *)
Lemma main_impl_po_1 : 
  forall (c2: Z),
  forall (Post20: c2 = 2),
  forall (c1: Z),
  forall (Post19: c1 = 2),
  forall (c0: Z),
  forall (Post18: c0 = 2),
  forall (base1: Z),
  forall (Post1: base1 = 3),
  (well_founded lex3).
Proof.
intros; apply lex3_well_founded.
Save.

(* Why obligation from file "why/g4.why", characters 641-663 *)
Lemma main_impl_po_2 : 
  forall (c2: Z),
  forall (Post20: c2 = 2),
  forall (c1: Z),
  forall (Post19: c1 = 2),
  forall (c0: Z),
  forall (Post18: c0 = 2),
  forall (base1: Z),
  forall (Post1: base1 = 3),
  forall (Variant1: int3),
  forall (base2: Z),
  forall (c0_1: Z),
  forall (c1_1: Z),
  forall (c2_1: Z),
  forall (Pre3: Variant1 = (prod3 c2_1 c1_1 c0_1)),
  forall (Pre2: (((0 <= c0_1 /\ 0 <= c1_1) /\ 0 <= c2_1) /\ 0 <= base2) /\
                (reachable_ base2 c2_1 c1_1 c0_1)),
  forall (Test8: 1 <> 0),
  forall (Test7: 0 < c0_1),
  forall (c0_2: Z),
  forall (Post13: c0_2 = (c0_1 - 1)),
  (forall (base:Z),
   (base = (base2 + 1) -> ((((0 <= c0_2 /\ 0 <= c1_1) /\ 0 <= c2_1) /\ 0 <=
    base) /\ (reachable_ base c2_1 c1_1 c0_2)) /\
    (lex3 (prod3 c2_1 c1_1 c0_2) (prod3 c2_1 c1_1 c0_1)))).
Proof.
intuition.
subst; apply reachable_0; auto with *.
unfold lex3, lex, prod3, Lex3.prod3.
do 2 apply right_lex.
unfold Zwf; omega.
Save.

(* Why obligation from file "why/g4.why", characters 739-784 *)
Lemma main_impl_po_3 : 
  forall (c2: Z),
  forall (Post20: c2 = 2),
  forall (c1: Z),
  forall (Post19: c1 = 2),
  forall (c0: Z),
  forall (Post18: c0 = 2),
  forall (base1: Z),
  forall (Post1: base1 = 3),
  forall (Variant1: int3),
  forall (base2: Z),
  forall (c0_1: Z),
  forall (c1_1: Z),
  forall (c2_1: Z),
  forall (Pre3: Variant1 = (prod3 c2_1 c1_1 c0_1)),
  forall (Pre2: (((0 <= c0_1 /\ 0 <= c1_1) /\ 0 <= c2_1) /\ 0 <= base2) /\
                (reachable_ base2 c2_1 c1_1 c0_1)),
  forall (Test8: 1 <> 0),
  forall (Test6: 0 >= c0_1),
  forall (Test5: 0 < c1_1),
  forall (c1_2: Z),
  forall (Post10: c1_2 = (c1_1 - 1)),
  forall (c0_2: Z),
  forall (Post11: c0_2 = base2),
  (forall (base:Z),
   (base = (base2 + 1) -> ((((0 <= c0_2 /\ 0 <= c1_2) /\ 0 <= c2_1) /\ 0 <=
    base) /\ (reachable_ base c2_1 c1_2 c0_2)) /\
    (lex3 (prod3 c2_1 c1_2 c0_2) (prod3 c2_1 c1_1 c0_1)))).
Proof.
intuition.
assert (c0_1=0). omega.
subst; apply reachable_1; auto with *.
unfold lex3, lex, prod3, Lex3.prod3.
apply right_lex; apply left_lex.
unfold Zwf; omega.
Save.

(* Why obligation from file "why/g4.why", characters 956-981 *)
Lemma main_impl_po_4 : 
  forall (c2: Z),
  forall (Post20: c2 = 2),
  forall (c1: Z),
  forall (Post19: c1 = 2),
  forall (c0: Z),
  forall (Post18: c0 = 2),
  forall (base1: Z),
  forall (Post1: base1 = 3),
  forall (Variant1: int3),
  forall (base2: Z),
  forall (c0_1: Z),
  forall (c1_1: Z),
  forall (c2_1: Z),
  forall (Pre3: Variant1 = (prod3 c2_1 c1_1 c0_1)),
  forall (Pre2: (((0 <= c0_1 /\ 0 <= c1_1) /\ 0 <= c2_1) /\ 0 <= base2) /\
                (reachable_ base2 c2_1 c1_1 c0_1)),
  forall (Test8: 1 <> 0),
  forall (Test6: 0 >= c0_1),
  forall (Test4: 0 >= c1_1),
  forall (Test3: 0 < c2_1),
  forall (c2_2: Z),
  forall (Post4: c2_2 = (c2_1 - 1)),
  forall (c1_2: Z),
  forall (Post7: c1_2 = base2),
  forall (result6: Z),
  forall (Post8: result6 = c1_2),
  (forall (base:Z),
   (base = (base2 + 1) -> ((((0 <= result6 /\ 0 <= c1_2) /\ 0 <= c2_2) /\
    0 <= base) /\ (reachable_ base c2_2 c1_2 result6)) /\
    (lex3 (prod3 c2_2 c1_2 result6) (prod3 c2_1 c1_1 c0_1)))).
Proof.
intuition.
assert (c0_1 = 0). omega.
assert (c1_1 = 0). omega.
subst; apply reachable_2; auto with *.
unfold lex3, lex, prod3, Lex3.prod3.
apply left_lex.
unfold Zwf; omega.
Save.

(* Why obligation from file "why/g4.why", characters 1027-1033 *)
Lemma main_impl_po_5 : 
  forall (c2: Z),
  forall (Post20: c2 = 2),
  forall (c1: Z),
  forall (Post19: c1 = 2),
  forall (c0: Z),
  forall (Post18: c0 = 2),
  forall (base1: Z),
  forall (Post1: base1 = 3),
  forall (Variant1: int3),
  forall (base2: Z),
  forall (c0_1: Z),
  forall (c1_1: Z),
  forall (c2_1: Z),
  forall (Pre3: Variant1 = (prod3 c2_1 c1_1 c0_1)),
  forall (Pre2: (((0 <= c0_1 /\ 0 <= c1_1) /\ 0 <= c2_1) /\ 0 <= base2) /\
                (reachable_ base2 c2_1 c1_1 c0_1)),
  forall (Test8: 1 <> 0),
  forall (Test6: 0 >= c0_1),
  forall (Test4: 0 >= c1_1),
  forall (Test2: 0 >= c2_1),
  (forall (result:unit),
   (result = tt ->
    (forall (result:Z),
     (result = base2 -> result =
      (3 * (pow 2 (3 * (pow 2 (pow 3 3)) + (pow 3 3))) - 1))))).
Proof.
intuition.
assert (c0_1 = 0). omega.
assert (c1_1 = 0). omega.
assert (c2_1 = 0). omega.
subst.
apply reachable_end; auto.
Save.

(* Why obligation from file "why/g4.why", characters 323-1095 *)
Lemma main_impl_po_6 : 
  forall (c2: Z),
  forall (Post20: c2 = 2),
  forall (c1: Z),
  forall (Post19: c1 = 2),
  forall (c0: Z),
  forall (Post18: c0 = 2),
  forall (base1: Z),
  forall (Post1: base1 = 3),
  forall (Variant1: int3),
  forall (base2: Z),
  forall (c0_1: Z),
  forall (c1_1: Z),
  forall (c2_1: Z),
  forall (Pre3: Variant1 = (prod3 c2_1 c1_1 c0_1)),
  forall (Pre2: (((0 <= c0_1 /\ 0 <= c1_1) /\ 0 <= c2_1) /\ 0 <= base2) /\
                (reachable_ base2 c2_1 c1_1 c0_1)),
  forall (Test8: 1 <> 0),
  forall (base3: Z),
  forall (c0_2: Z),
  forall (c1_2: Z),
  forall (c2_2: Z),
  forall (Post21: ((((0 <= c0_2 /\ 0 <= c1_2) /\ 0 <= c2_2) /\ 0 <= base3) /\
                  (reachable_ base3 c2_2 c1_2 c0_2)) /\
                  (lex3 (prod3 c2_2 c1_2 c0_2) (prod3 c2_1 c1_1 c0_1))),
  (lex3 (prod3 c2_2 c1_2 c0_2) Variant1).
Proof.
intuition; subst; auto.
Save.

(* Why obligation from file "why/g4.why", characters 323-1095 *)
Lemma main_impl_po_7 : 
  forall (c2: Z),
  forall (Post20: c2 = 2),
  forall (c1: Z),
  forall (Post19: c1 = 2),
  forall (c0: Z),
  forall (Post18: c0 = 2),
  forall (base1: Z),
  forall (Post1: base1 = 3),
  forall (Variant1: int3),
  forall (base2: Z),
  forall (c0_1: Z),
  forall (c1_1: Z),
  forall (c2_1: Z),
  forall (Pre3: Variant1 = (prod3 c2_1 c1_1 c0_1)),
  forall (Pre2: (((0 <= c0_1 /\ 0 <= c1_1) /\ 0 <= c2_1) /\ 0 <= base2) /\
                (reachable_ base2 c2_1 c1_1 c0_1)),
  forall (Test1: 1 = 0),
  (forall (result:Z),
   (result = base2 -> result =
    (3 * (pow 2 (3 * (pow 2 (pow 3 3)) + (pow 3 3))) - 1))).
Proof.
intuition.
Save.

(* Why obligation from file "why/g4.why", characters 390-534 *)
Lemma main_impl_po_8 : 
  forall (c2: Z),
  forall (Post20: c2 = 2),
  forall (c1: Z),
  forall (Post19: c1 = 2),
  forall (c0: Z),
  forall (Post18: c0 = 2),
  forall (base1: Z),
  forall (Post1: base1 = 3),
  (((0 <= c0 /\ 0 <= c1) /\ 0 <= c2) /\ 0 <= base1) /\
  (reachable_ base1 c2 c1 c0).
Proof.
intuition.
subst; apply reachable_3222.
Save.

