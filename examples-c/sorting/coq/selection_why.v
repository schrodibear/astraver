(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export caduceus_spec_why.

(* Why obligation from file "why/selection.why", characters 1280-1309 *)
Lemma selection_impl_po_1 : 
  forall (t: pointer),
  forall (n: Z),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre14: n >= 1 /\ (valid_range alloc t 0 (n - 1))),
  forall (i: Z),
  forall (Post12: i = (any_int tt)),
  forall (j: Z),
  forall (Post11: j = (any_int tt)),
  forall (min: Z),
  forall (Post10: min = (any_int tt)),
  forall (i1: Z),
  forall (Post1: i1 = 0),
  forall (Variant1: Z),
  forall (i2: Z),
  forall (intP0: ((memory) Z)),
  forall (Pre13: Variant1 = (n - i2)),
  forall (Pre12: (((0 <= i2 /\ i2 <= (n - 1)) /\
                 (sorted alloc intP0 t 0 (i2 - 1))) /\
                 (mset intP0 t 0 (n - 1)) = (mset intP t 0 (n - 1))) /\
                 (forall (k:Z),
                  (forall (l:Z),
                   (0 <= k /\ k < i2 ->
                    (i2 <= l /\ l < n -> (acc intP0 (shift t k)) <=
                     (acc intP0 (shift t l))))))),
  forall (Test4: i2 < (n - 1)),
  forall (min2: Z),
  forall (Post2: min2 = i2),
  forall (j2: Z),
  forall (Post3: j2 = (i2 + 1)),
  forall (Variant3: Z),
  forall (j3: Z),
  forall (min3: Z),
  forall (Pre8: Variant3 = (n - j3)),
  forall (Pre7: (((i2 + 1) <= j3 /\ j3 <= n) /\ i2 <= min3 /\ min3 < n) /\
                (forall (k:Z),
                 (i2 <= k /\ k < j3 -> (acc intP0 (shift t min3)) <=
                  (acc intP0 (shift t k))))),
  forall (Test3: j3 < n),
  forall (aux_1: pointer),
  forall (Post23: aux_1 = (shift t j3)),
  (valid alloc aux_1).
Proof.
intuition.
subst; auto.
Qed.

(* Why obligation from file "why/selection.why", characters 1280-1309 *)
Lemma selection_impl_po_2 : 
  forall (t: pointer),
  forall (n: Z),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre14: n >= 1 /\ (valid_range alloc t 0 (n - 1))),
  forall (i: Z),
  forall (Post12: i = (any_int tt)),
  forall (j: Z),
  forall (Post11: j = (any_int tt)),
  forall (min: Z),
  forall (Post10: min = (any_int tt)),
  forall (i1: Z),
  forall (Post1: i1 = 0),
  forall (Variant1: Z),
  forall (i2: Z),
  forall (intP0: ((memory) Z)),
  forall (Pre13: Variant1 = (n - i2)),
  forall (Pre12: (((0 <= i2 /\ i2 <= (n - 1)) /\
                 (sorted alloc intP0 t 0 (i2 - 1))) /\
                 (mset intP0 t 0 (n - 1)) = (mset intP t 0 (n - 1))) /\
                 (forall (k:Z),
                  (forall (l:Z),
                   (0 <= k /\ k < i2 ->
                    (i2 <= l /\ l < n -> (acc intP0 (shift t k)) <=
                     (acc intP0 (shift t l))))))),
  forall (Test4: i2 < (n - 1)),
  forall (min2: Z),
  forall (Post2: min2 = i2),
  forall (j2: Z),
  forall (Post3: j2 = (i2 + 1)),
  forall (Variant3: Z),
  forall (j3: Z),
  forall (min3: Z),
  forall (Pre8: Variant3 = (n - j3)),
  forall (Pre7: (((i2 + 1) <= j3 /\ j3 <= n) /\ i2 <= min3 /\ min3 < n) /\
                (forall (k:Z),
                 (i2 <= k /\ k < j3 -> (acc intP0 (shift t min3)) <=
                  (acc intP0 (shift t k))))),
  forall (Test3: j3 < n),
  forall (aux_1: pointer),
  forall (Post23: aux_1 = (shift t j3)),
  forall (Pre3: (valid alloc aux_1)),
  forall (result4: Z),
  forall (Post25: result4 = (acc intP0 aux_1)),
  (forall (result:pointer),
   (result = (shift t min3) ->
    (forall (result0:Z),
     (result0 = (acc intP0 result) ->
      ((result4 < result0 ->
        (forall (min:Z),
         (min = j3 ->
          (forall (j:Z),
           (j = (j3 + 1) -> ((((i2 + 1) <= j /\ j <= n) /\ i2 <= min /\ min <
            n) /\
            (forall (k:Z),
             (i2 <= k /\ k < j -> (acc intP0 (shift t min)) <=
              (acc intP0 (shift t k))))) /\
            (Zwf 0 (n - j) (n - j3)))))))) /\
      ((result4 >= result0 ->
        (forall (j:Z),
         (j = (j3 + 1) -> ((((i2 + 1) <= j /\ j <= n) /\ i2 <= min3 /\ min3 <
          n) /\
          (forall (k:Z),
           (i2 <= k /\ k < j -> (acc intP0 (shift t min3)) <=
            (acc intP0 (shift t k))))) /\
          (Zwf 0 (n - j) (n - j3)))))))) /\
    (valid alloc result))).
Proof.
intuition.
assert (k < j3 \/ k=j3).
omega.
intuition.
generalize (H7 k).
subst; auto with *.
subst; omega.

(* subgoal 2 *)
assert (k < j3 \/ k=j3).
omega.
intuition.
subst; auto with *.

subst; auto.
Qed.

(* Why obligation from file "why/selection.why", characters 967-1220 *)
Lemma selection_impl_po_3 : 
  forall (t: pointer),
  forall (n: Z),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre14: n >= 1 /\ (valid_range alloc t 0 (n - 1))),
  forall (i: Z),
  forall (Post12: i = (any_int tt)),
  forall (j: Z),
  forall (Post11: j = (any_int tt)),
  forall (min: Z),
  forall (Post10: min = (any_int tt)),
  forall (i1: Z),
  forall (Post1: i1 = 0),
  forall (Variant1: Z),
  forall (i2: Z),
  forall (intP0: ((memory) Z)),
  forall (Pre13: Variant1 = (n - i2)),
  forall (Pre12: (((0 <= i2 /\ i2 <= (n - 1)) /\
                 (sorted alloc intP0 t 0 (i2 - 1))) /\
                 (mset intP0 t 0 (n - 1)) = (mset intP t 0 (n - 1))) /\
                 (forall (k:Z),
                  (forall (l:Z),
                   (0 <= k /\ k < i2 ->
                    (i2 <= l /\ l < n -> (acc intP0 (shift t k)) <=
                     (acc intP0 (shift t l))))))),
  forall (Test4: i2 < (n - 1)),
  forall (min2: Z),
  forall (Post2: min2 = i2),
  forall (j2: Z),
  forall (Post3: j2 = (i2 + 1)),
  (((i2 + 1) <= j2 /\ j2 <= n) /\ i2 <= min2 /\ min2 < n) /\
  (forall (k:Z),
   (i2 <= k /\ k < j2 -> (acc intP0 (shift t min2)) <=
    (acc intP0 (shift t k)))).
Proof.
intuition.
assert (k=i2).
omega.
subst; omega.
Qed.


(* Why obligation from file "why/selection.why", characters 1489-1525 *)
Lemma selection_impl_po_4 : 
  forall (t: pointer),
  forall (n: Z),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre14: n >= 1 /\ (valid_range alloc t 0 (n - 1))),
  forall (i: Z),
  forall (Post12: i = (any_int tt)),
  forall (j: Z),
  forall (Post11: j = (any_int tt)),
  forall (min: Z),
  forall (Post10: min = (any_int tt)),
  forall (i1: Z),
  forall (Post1: i1 = 0),
  forall (Variant1: Z),
  forall (i2: Z),
  forall (intP0: ((memory) Z)),
  forall (Pre13: Variant1 = (n - i2)),
  forall (Pre12: (((0 <= i2 /\ i2 <= (n - 1)) /\
                 (sorted alloc intP0 t 0 (i2 - 1))) /\
                 (mset intP0 t 0 (n - 1)) = (mset intP t 0 (n - 1))) /\
                 (forall (k:Z),
                  (forall (l:Z),
                   (0 <= k /\ k < i2 ->
                    (i2 <= l /\ l < n -> (acc intP0 (shift t k)) <=
                     (acc intP0 (shift t l))))))),
  forall (Test4: i2 < (n - 1)),
  forall (min2: Z),
  forall (Post2: min2 = i2),
  forall (j2: Z),
  forall (Post3: j2 = (i2 + 1)),
  forall (j3: Z),
  forall (min3: Z),
  forall (Post6: ((((i2 + 1) <= j3 /\ j3 <= n) /\ i2 <= min3 /\ min3 < n) /\
                 (forall (k:Z),
                  (i2 <= k /\ k < j3 -> (acc intP0 (shift t min3)) <=
                   (acc intP0 (shift t k))))) /\
                 j3 >= n),
  forall (caduceus_1: Z),
  forall (Post7: caduceus_1 = min3),
  (valid_index alloc t caduceus_1) /\ (valid_index alloc t i2).
Proof.
intuition.
Save.

(* Why obligation from file "why/selection.why", characters 1464-1525 *)
Lemma selection_impl_po_5 : 
  forall (t: pointer),
  forall (n: Z),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre14: n >= 1 /\ (valid_range alloc t 0 (n - 1))),
  forall (i: Z),
  forall (Post12: i = (any_int tt)),
  forall (j: Z),
  forall (Post11: j = (any_int tt)),
  forall (min: Z),
  forall (Post10: min = (any_int tt)),
  forall (i1: Z),
  forall (Post1: i1 = 0),
  forall (Variant1: Z),
  forall (i2: Z),
  forall (intP0: ((memory) Z)),
  forall (Pre13: Variant1 = (n - i2)),
  forall (Pre12: (((0 <= i2 /\ i2 <= (n - 1)) /\
                 (sorted alloc intP0 t 0 (i2 - 1))) /\
                 (mset intP0 t 0 (n - 1)) = (mset intP t 0 (n - 1))) /\
                 (forall (k:Z),
                  (forall (l:Z),
                   (0 <= k /\ k < i2 ->
                    (i2 <= l /\ l < n -> (acc intP0 (shift t k)) <=
                     (acc intP0 (shift t l))))))),
  forall (Test4: i2 < (n - 1)),
  forall (min2: Z),
  forall (Post2: min2 = i2),
  forall (j2: Z),
  forall (Post3: j2 = (i2 + 1)),
  forall (j3: Z),
  forall (min3: Z),
  forall (Post6: ((((i2 + 1) <= j3 /\ j3 <= n) /\ i2 <= min3 /\ min3 < n) /\
                 (forall (k:Z),
                  (i2 <= k /\ k < j3 -> (acc intP0 (shift t min3)) <=
                   (acc intP0 (shift t k))))) /\
                 j3 >= n),
  forall (caduceus_1: Z),
  forall (Post7: caduceus_1 = min3),
  forall (Pre11: (valid_index alloc t caduceus_1) /\ (valid_index alloc t i2)),
  forall (intP1: ((memory) Z)),
  forall (Post33: ((acc intP1 (shift t caduceus_1)) =
                  (acc intP0 (shift t i2)) /\ (acc intP1 (shift t i2)) =
                  (acc intP0 (shift t caduceus_1))) /\
                  (assigns alloc intP0 intP1
                   (union_loc (pointer_loc (shift t i2))
                    (pointer_loc (shift t caduceus_1))))),
  (forall (i:Z),
   (i = (i2 + 1) -> ((((0 <= i /\ i <= (n - 1)) /\
    (sorted alloc intP1 t 0 (i - 1))) /\
    (mset intP1 t 0 (n - 1)) = (mset intP t 0 (n - 1))) /\
    (forall (k:Z),
     (forall (l:Z),
      (0 <= k /\ k < i ->
       (i <= l /\ l < n -> (acc intP1 (shift t k)) <= (acc intP1 (shift t l))))))) /\
    (Zwf 0 (n - i) (n - i2)))).
Proof.
intuition.

unfold sorted in *|-*; intuition.
assert (k < i2-1 \/ k = i2-1).
omega.
intuition idtac.
rewrite H15; auto with *.
rewrite H15; auto with *.
subst.
rewrite H15; auto with *.
ring (i2 -1 +1).
rewrite H17; caduceus; auto with *.

Focus 2.
assert (k < i2 \/ k=i2).
omega.
intuition idtac.

rewrite H15; auto with *.

assert (l=min3\/l<>min3).
omega.
intuition idtac.
subst; rewrite H16; auto with *.
rewrite H15; auto with *.


subst; rewrite H17; auto with *.

assert (l=min3\/l<>min3).
omega.
intuition idtac.
subst; rewrite H16; auto with *.
rewrite H15; auto with *.

Admitted.
(* Save. *)

(* Why obligation from file "why/selection.why", characters 351-820 *)
Lemma selection_impl_po_6 : 
  forall (t: pointer),
  forall (n: Z),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre14: n >= 1 /\ (valid_range alloc t 0 (n - 1))),
  forall (i: Z),
  forall (Post12: i = (any_int tt)),
  forall (j: Z),
  forall (Post11: j = (any_int tt)),
  forall (min: Z),
  forall (Post10: min = (any_int tt)),
  forall (i1: Z),
  forall (Post1: i1 = 0),
  (((0 <= i1 /\ i1 <= (n - 1)) /\ (sorted alloc intP t 0 (i1 - 1))) /\
  (mset intP t 0 (n - 1)) = (mset intP t 0 (n - 1))) /\
  (forall (k:Z),
   (forall (l:Z),
    (0 <= k /\ k < i1 ->
     (i1 <= l /\ l < n -> (acc intP (shift t k)) <= (acc intP (shift t l)))))).
Proof.
intuition.
red; intuition.
Save.


(* Why obligation from file "why/selection.why", characters 265-1578 *)
Lemma selection_impl_po_7 : 
  forall (t: pointer),
  forall (n: Z),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre14: n >= 1 /\ (valid_range alloc t 0 (n - 1))),
  forall (i: Z),
  forall (Post12: i = (any_int tt)),
  forall (j: Z),
  forall (Post11: j = (any_int tt)),
  forall (min: Z),
  forall (Post10: min = (any_int tt)),
  forall (i1: Z),
  forall (Post1: i1 = 0),
  forall (i2: Z),
  forall (intP0: ((memory) Z)),
  forall (Post9: ((((0 <= i2 /\ i2 <= (n - 1)) /\
                 (sorted alloc intP0 t 0 (i2 - 1))) /\
                 (mset intP0 t 0 (n - 1)) = (mset intP t 0 (n - 1))) /\
                 (forall (k:Z),
                  (forall (l:Z),
                   (0 <= k /\ k < i2 ->
                    (i2 <= l /\ l < n -> (acc intP0 (shift t k)) <=
                     (acc intP0 (shift t l))))))) /\
                 i2 >= (n - 1)),
  (sorted alloc intP0 t 0 (n - 1)) /\
  (mset intP0 t 0 (n - 1)) = (mset intP t 0 (n - 1)).
Proof.
intuition.
unfold sorted in *|-*; intuition.
assert (k < n-2 \/ k=n-2).
omega.
intuition.
Save.



(* Why obligation from file "why/selection.why", characters 1918-1946 *)
Lemma swap_impl_po_1 : 
  forall (t: pointer),
  forall (i: Z),
  forall (j: Z),
  forall (alloc: alloc_table),
  forall (Pre10: (valid_index alloc t i) /\ (valid_index alloc t j)),
  forall (aux_1: pointer),
  forall (Post2: aux_1 = (shift t i)),
  (valid alloc aux_1).
Proof.
intuition.
subst; auto.
Save.

(* Why obligation from file "why/selection.why", characters 1918-1946 *)
Lemma swap_impl_po_2 : 
  forall (t: pointer),
  forall (i: Z),
  forall (j: Z),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre10: (valid_index alloc t i) /\ (valid_index alloc t j)),
  forall (aux_1: pointer),
  forall (Post2: aux_1 = (shift t i)),
  forall (Pre1: (valid alloc aux_1)),
  forall (result: Z),
  forall (Post4: result = (acc intP aux_1)),
  (forall (result0:pointer),
   (result0 = (shift t i) ->
    (forall (result1:pointer),
     (result1 = (shift t j) ->
      (forall (result2:Z),
       (result2 = (acc intP result1) ->
        (forall (intP0:((memory) Z)),
         (intP0 = (upd intP result0 result2) ->
          (forall (result0:pointer),
           (result0 = (shift t j) ->
            (forall (intP1:((memory) Z)),
             (intP1 = (upd intP0 result0 result) ->
              ((acc intP1 (shift t i)) = (acc intP (shift t j)) /\
              (acc intP1 (shift t j)) = (acc intP (shift t i))) /\
              (assigns alloc intP intP1
               (union_loc (pointer_loc (shift t j)) (pointer_loc (shift t i)))))) /\
            (valid alloc result0))))) /\
        (valid alloc result0))) /\
      (valid alloc result1))))).
Proof.
intuition.
assert (i=j \/ i <> j).
omega.
intuition idtac.
subst; caduceus.
subst; caduceus.

assert (i=j \/ i <> j).
omega.
intuition idtac.
subst; caduceus.
subst; caduceus.

unfold assigns.
intros.
assert (p <> result3).
apply unchanged_pointer_elim.
eapply unchanged_union_elim1.
subst result3.
apply H8.
subst intP1; caduceus.
assert (p <> result0).
apply unchanged_pointer_elim.
eapply unchanged_union_elim2.
subst result0.
apply H8.
subst intP0; caduceus.
subst; auto.
subst; auto.
subst; auto.
Save.

