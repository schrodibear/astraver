
INPUT
=====

FEATURES
========

 - pure code output (with annotations as comments) --to-ocaml / -o

 - arguments which are types

 - option to suppress termination obligations (i.e. partial correctness)
   (=> no validation)

 - mutually recursive functions 
   (many variants over the same type, one relation)

 - exceptions: false instead of true as implicit postcondition (+ warning)

 - keyword absurd (similar to "assert false" in ocaml)

COQ
===

DOCUMENTATION
=============

 - foreword, bibliography

 - lexical conventions

 - semantics (evaluation strategy)

BUGS
====

IMPLEMENTATION
==============

 - references mentioned in specs are added to read references; e.g.
       t:array 10 of int -> {} unit { access(t,1) = 2 }
    => t:array 10 of int -> {} unit reads t { access(t,1) = 2 }

 - wp(t[e1] := e2) does not propagate wp inside e2
   => transform into "let v2 = e2 in let v1 = e1 in t[v1] := v2"

 - automatic proof of obligations such as
  
     x=t, A and P(t) |- P(x)

     
