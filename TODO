
FEATURES
========

 - arguments which are types

 - option to suppress termination obligations (i.e. partial correctness)
   (=> no validation)

 - mutually recursive functions 
   (many variants over the same type, one relation)

 - C: assert statement

COQ
===

PVS
===

DOCUMENTATION
=============

 - whydoc (to LaTeX / HTML)
 - a simple why2html similar to caml2html?

MISC
====

 - why viewer

BUGS
====

 - higher order needs intensive testing; known bugs:

   ======================================================================
   let f (g:int->int) = (g 0)
   let g (x:int) = x
   let h = (f g)
   ======================================================================
   parameter x : int ref
   let g (t:void) =
     let a = ref 0 in
     a := let v1 = (sub_int !x) in let v2 = (v1 2) in v2
   ======================================================================

IMPLEMENTATION
==============

 - auto-discharging of obligations when WP in context: quantification over
   booleans is not handled correctly

 - do not overwrite .bak if no change

 - references mentioned in specs are added to read references; e.g.
       t:array 10 of int -> {} unit { access(t,1) = 2 }
    => t:array 10 of int -> {} unit reads t { access(t,1) = 2 }

 - floats: post-condition annotating an assignement (x := E { x = E })
   uses generic equality (t_eq); should be t_eq_float on floats
