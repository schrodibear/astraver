
CADUCEUS
========

 - structures passed to functions (by value): validity should be added
   automatically

 - C features
   - &x for local variable x
   - switch
   - union
   - memory allocation
   - sizeof / sizeof_expr

 - implementation:
   - evaluation order: add an interference test to exclude expressions where
     evaluation order changes the result
   - heap variables: rename to avoid clashes
     possible clash between a local variable and a heap var, e.g. in struct.c

 - logic: & in logic term syntax

 - struct forward reference: breaks Cenv.eq_type (e.g. line 27)

WHY FEATURES
============

 - arguments which are types

 - option to suppress termination obligations (i.e. partial correctness)
   (=> no validation)

 - mutually recursive functions 
   (many variants over the same type, one relation)

COQ
===

PVS
===

Mizar
=====

 - option --mizar-preamble-from <file> to extract environ from <file>

Simplify
========

haRVey
======

 - types as for Simplify?

DOCUMENTATION
=============

 - whydoc (to LaTeX / HTML)

WHY VIEWER
==========

 - nice pretty-print for internal types

BUGS
====

 - higher order needs intensive testing; known bugs:

   ======================================================================
   let f (g:int->int) = (g 0)
   let g (x:int) = x
   let h = (f g)
   ======================================================================
   parameter x : int ref
   let g (t:void) =
     let a = ref 0 in
     a := let v1 = (sub_int !x) in let v2 = (v1 2) in v2
   ======================================================================

WHY
===

 - do not overwrite .bak if no change

 - references mentioned in specs are added to read references; e.g.
       t:array 10 of int -> {} unit { access(t,1) = 2 }
    => t:array 10 of int -> {} unit reads t { access(t,1) = 2 }

 - floats: post-condition annotating an assignement (x := E { x = E })
   uses generic equality (t_eq); should be t_eq_float on floats

 - auto discharge of  v = phi, P(phi) |- P(v)  (converse of rewrite_var)
