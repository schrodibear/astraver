rm -f footprint.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only footprint.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat footprint.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads (s + [0..]).char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      ((((0 <= k) && (k <= i)) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

logic p{L}(int_P[..] x) reads x.int_M;

unit f(int_P[..] x)
  requires (C_5 : (((C_7 : (\offset_min(x) <= 0)) &&
                     (C_8 : (\offset_max(x) >= 1))) &&
                    (C_9 : p{Here}(x))));
behavior default:
  assumes true;
  assigns (x + 1).int_M;
  ensures (C_10 : true);
{  
   {  (C_3 : ((C_2 : (C_1 : (x + 1)).int_M) = 0));
      
      {  
         (assert (C_4 : p{Here}(x)));
         ()
      };
      
      (return ())
   }
}

unit g(int_P[..] x)
  requires (C_13 : (((C_15 : (\offset_min(x) <= 0)) &&
                      (C_16 : (\offset_max(x) >= 1))) &&
                     (C_17 : p{Here}(x))));
behavior default_1:
  assumes true;
  assigns (x + 1).int_M;
  ensures (C_18 : true);
{  
   {  (C_11 : f(x));
      
      {  
         (assert (C_12 : p{Here}(x)));
         ()
      };
      
      (return ())
   }
}
