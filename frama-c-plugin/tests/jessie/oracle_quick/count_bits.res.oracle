rm -f count_bits.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only count_bits.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat count_bits.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

logic int32 bit(int32 x, int32 i) reads \nothing;

logic int32 nbits(int32 x) reads \nothing;

axiom nbits_nonneg :
(\forall int32 x;
  (nbits(x) >= 0))

axiom nbits_zero :
(nbits((0 :> int32)) == 0)

logic int32 lowest_bit(int32 x) reads \nothing;

axiom lowest_bit_def :
(\forall int32 x;
  ((x != 0) ==>
    (\exists int32 i;
      ((((i >= 0) && (lowest_bit(x) == bit(x, i))) && (bit(x, i) != 0)) &&
        (\forall int32 j;
          (((0 <= j) && (j < i)) ==> (bit(x, j) == 0)))))))

axiom lowest_bit_zero :
(\forall int32 x;
  ((lowest_bit(x) == 0) <==> (x == 0)))

axiom remove_one_bit :
(\forall int32 x;
  (\forall int32 i;
    ((bit(x, i) != 0) ==>
      (nbits(((x - bit(x, i)) :> int32)) == (nbits(x) - 1)))))

int32 count_bits(int32 x)
behavior default:
  assumes true;
  ensures (C_15 : (\result == nbits(x)));
{  
   (var int32 d);
   
   (var int32 c);
   
   {  (C_1 : (c = 0));
      
      {  
         invariant (C_2 : ((c + nbits(x)) == nbits(\at(x,Pre))));
         variant (C_3 : nbits(x));
         while (true)
         {  
            {  (C_8 : (d = (C_7 : ((C_6 : (x &
                                            (C_5 : ((C_4 : (- x)) :> int32)))) :> int32))));
               (if (d != 0) then () else 
               (goto while_0_break));
               (C_11 : (c = (C_10 : ((C_9 : (c + 1)) :> int32))));
               (C_14 : (x = (C_13 : ((C_12 : (x - d)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      (return c)
   }
}
