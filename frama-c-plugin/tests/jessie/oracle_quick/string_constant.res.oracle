rm -f string_constant.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only string_constant.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat string_constant.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid___string_done :
((\offset_min(__string_done) <= 0) && (\offset_max(__string_done) >= 4))

char_P[0..4] __string_done;

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

unit main()
{  
   (var char_P[..] p);
   
   (var int32 i);
   
   {  (C_1 : __globinit_whole_program());
      (C_2 : (p = __string_done));
      (C_3 : (i = 0));
      
      {  
         invariant (C_4 : true);
         while (true)
         {  
            {  
               {  
                  (assert (C_5 : (hint : (strlen(p) >= i))));
                  
                  (assert (C_6 : (hint : (strlen(p) >= i))));
                  (if ((C_9 : ((C_8 : (C_7 : (p + i)).char_M) :> int32)) !=
                        0) then () else 
                  {  ();
                     
                     (goto while_0_break)
                  })
               };
               (C_12 : (i = (C_11 : ((C_10 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      (return ())
   }
}

unit __globinit_whole_program()
{  
   {  (C_14 : (__string_done = (C_13 : (new char_P[5]))))
   }
}
