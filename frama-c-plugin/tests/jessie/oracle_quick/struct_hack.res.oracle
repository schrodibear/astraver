rm -f struct_hack.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only struct_hack.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat struct_hack.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

tag S = {
  int32 i; 
  int_P[0..-1] a;
}

type S = [S]

tag S0 = {
  int32 i0; 
  int_P[0..-1] a0;
}

type S0 = [S0]

tag S1 = {
  int32 i1; 
  int_P[0] a1;
}

type S1 = [S1]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

unit f(S[0] v_s)
  requires (C_22 : ((C_23 : (v_s.i >= 0)) &&
                     ((C_25 : (\offset_min(v_s.a) <= 0)) &&
                       (C_26 : (\offset_max(v_s.a) >= (v_s.i - 1))))));
{  
   (var S[0] s);
   
   (var int32 j);
   
   {  (C_2 : (s = (C_1 : (new S[1]))));
      (C_5 : ((C_4 : s.i) = (C_3 : v_s.i)));
      (C_6 : (j = 0));
      
      {  
         invariant (C_7 : (((C_9 : (0 <= j)) && (C_10 : (j <= v_s.i))) &&
                            (C_11 : (\forall int32 k;
                                      (((0 <= k) && (k < j)) ==>
                                        ((v_s.a + k).int_M == 0))))));
         variant (C_12 : (v_s.i - j));
         while (true)
         {  
            {  (if (j < (C_13 : s.i)) then () else 
               (goto while_0_break));
               (C_16 : ((C_15 : ((C_14 : s.a) + j).int_M) = 0));
               (C_19 : (j = (C_18 : ((C_17 : (j + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      {  
         (assert (C_20 : (\forall int32 k;
                           (((0 <= k) && (k < v_s.i)) ==>
                             ((v_s.a + k).int_M == 0)))));
         ()
      };
      
      {  (C_21 : (free(s)));
         
         (return ())
      }
   }
}

unit f0(S0[0] v_s_1)
  requires (C_48 : ((C_49 : (v_s_1.i0 >= 0)) &&
                     ((C_51 : (\offset_min(v_s_1.a0) <= 0)) &&
                       (C_52 : (\offset_max(v_s_1.a0) >= (v_s_1.i0 - 1))))));
{  
   (var S0[0] s);
   
   (var int32 j);
   
   {  (C_28 : (s = (C_27 : (new S0[1]))));
      (C_31 : ((C_30 : s.i0) = (C_29 : v_s_1.i0)));
      (C_32 : (j = 0));
      
      {  
         invariant (C_33 : (((C_35 : (0 <= j)) && (C_36 : (j <= v_s_1.i0))) &&
                             (C_37 : (\forall int32 k;
                                       (((0 <= k) && (k < j)) ==>
                                         ((v_s_1.a0 + k).int_M == 0))))));
         variant (C_38 : (v_s_1.i0 - j));
         while (true)
         {  
            {  (if (j < (C_39 : s.i0)) then () else 
               (goto while_1_break));
               (C_42 : ((C_41 : ((C_40 : s.a0) + j).int_M) = 0));
               (C_45 : (j = (C_44 : ((C_43 : (j + 1)) :> int32))))
            }
         };
         (while_1_break : ())
      };
      
      {  
         (assert (C_46 : (\forall int32 k;
                           (((0 <= k) && (k < v_s_1.i0)) ==>
                             ((v_s_1.a0 + k).int_M == 0)))));
         ()
      };
      
      {  (C_47 : (free(s)));
         
         (return ())
      }
   }
}

unit f1(S1[0] v_s_2)
  requires (C_79 : ((C_80 : (v_s_2.i1 >= 0)) &&
                     ((C_82 : (\offset_min(v_s_2.a1) <= 0)) &&
                       (C_83 : (\offset_max(v_s_2.a1) >= (v_s_2.i1 - 1))))));
{  
   (var S1[0] s);
   
   (var int32 j);
   
   {  (C_54 : (s = (C_53 : (new S1[1]))));
      
      {  (C_57 : ((C_56 : s.i1) = (C_55 : v_s_2.i1)));
         (C_62 : ((C_61 : ((C_60 : s.a1) + 0).int_M) = (C_59 : ((C_58 : v_s_2.a1) +
                                                                 0).int_M)))
      };
      (C_63 : (j = 0));
      
      {  
         invariant (C_64 : (((C_66 : (0 <= j)) && (C_67 : (j <= v_s_2.i1))) &&
                             (C_68 : (\forall int32 k;
                                       (((0 <= k) && (k < j)) ==>
                                         ((v_s_2.a1 + k).int_M == 0))))));
         variant (C_69 : (v_s_2.i1 - j));
         while (true)
         {  
            {  (if (j < (C_70 : s.i1)) then () else 
               (goto while_2_break));
               (C_73 : ((C_72 : ((C_71 : s.a1) + j).int_M) = 0));
               (C_76 : (j = (C_75 : ((C_74 : (j + 1)) :> int32))))
            }
         };
         (while_2_break : ())
      };
      
      {  
         (assert (C_77 : (\forall int32 k;
                           (((0 <= k) && (k < v_s_2.i1)) ==>
                             ((v_s_2.a1 + k).int_M == 0)))));
         ()
      };
      
      {  (C_78 : (free(s)));
         
         (return ())
      }
   }
}
