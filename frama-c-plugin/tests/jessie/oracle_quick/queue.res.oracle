rm -f queue.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only queue.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat queue.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_q :
((\offset_min(q) <= 0) && (\offset_max(q) >= 0))

invariant valid_t :
((\offset_min(t) <= 0) && (\offset_max(t) >= 4))

tag queue = {
  char_P[..] contents; 
  int32 length; 
  int32 first; 
  int32 last; 
  uint32 empty; 
  uint32 full;
}

type queue = [queue]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

char_P[0..4] t;

queue[0] q;

invariant q_invariant :
((((\offset_min(q.contents) <= 0) &&
    (\offset_max(q.contents) >= (q.length - 1))) &&
   ((0 <= q.first) && (q.first < q.length))) &&
  ((0 <= q.last) && (q.last < q.length)))

unit push(int8 c)
  requires (C_23 : (q.full == 0));
behavior default:
  assumes true;
  assigns q.empty,
  q.full,
  q.last,
  (q.contents + q.last).char_M;
  ensures (C_24 : ((C_25 : (q.empty == 0)) &&
                    (C_26 : ((q.contents + \old(q.last)).char_M == c))));
{  
   (var int32 tmp);
   
   {  (C_2 : (tmp = (C_1 : q.last)));
      (C_7 : ((C_6 : q.last) = (C_5 : ((C_4 : ((C_3 : q.last) + 1)) :> int32))));
      (C_11 : ((C_10 : (C_9 : ((C_8 : q.contents) + tmp)).char_M) = c));
      (if ((C_15 : q.last) == (C_14 : q.length)) then (C_13 : ((C_12 : q.last) = 0)) else ());
      (C_17 : ((C_16 : q.empty) = 0));
      (C_22 : ((C_21 : q.full) = (C_20 : ((if ((C_19 : q.first) ==
                                                (C_18 : q.last)) then 1 else 0) :> uint32))));
      
      (return ())
   }
}

int8 pop()
  requires (C_49 : (q.empty == 0));
behavior default_1:
  assumes true;
  assigns q.empty,
  q.full,
  q.first;
  ensures (C_50 : ((C_51 : (q.full == 0)) &&
                    (C_52 : (\result == (q.contents + \old(q.first)).char_M))));
{  
   (var int8 r);
   
   (var int32 tmp);
   
   {  (C_28 : (tmp = (C_27 : q.first)));
      (C_33 : ((C_32 : q.first) = (C_31 : ((C_30 : ((C_29 : q.first) + 1)) :> int32))));
      (C_37 : (r = (C_36 : (C_35 : ((C_34 : q.contents) + tmp)).char_M)));
      (if ((C_41 : q.first) == (C_40 : q.length)) then (C_39 : ((C_38 : q.first) = 0)) else ());
      (C_43 : ((C_42 : q.full) = 0));
      (C_48 : ((C_47 : q.empty) = (C_46 : ((if ((C_45 : q.first) ==
                                                 (C_44 : q.last)) then 1 else 0) :> uint32))));
      
      (return r)
   }
}

int32 test(queue[..] q1)
  requires (C_58 : (((C_60 : (\offset_min(q1) <= 0)) &&
                      (C_61 : (\offset_max(q1) >= 0))) &&
                     (C_62 : (q.empty == 0))));
behavior default_2:
  assumes true;
  ensures (C_63 : (\result == \old(q1.empty)));
{  
   (var int8 c);
   
   (var int32 __retres);
   
   {  (C_54 : (c = (C_53 : pop())));
      (C_57 : (__retres = (C_56 : ((C_55 : q1.empty) :> int32))));
      
      (return __retres)
   }
}
