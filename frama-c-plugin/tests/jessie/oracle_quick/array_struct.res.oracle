rm -f array_struct.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only array_struct.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat array_struct.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_ga3 :
((\offset_min(ga3) <= 0) && (\offset_max(ga3) >= 2))

invariant valid_ga2 :
((\offset_min(ga2) <= 0) && (\offset_max(ga2) >= 1))

invariant valid_ga1 :
((\offset_min(ga1) <= 0) && (\offset_max(ga1) >= 0))

tag S = {
  int32 ii; 
  int32 jj;
}

type S = [S]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

S[0] ga1;

S[0..1] ga2;

S[0..2] ga3;

unit fg(int32 i)
behavior default:
  assumes true;
  ensures (C_7 : ((C_8 : ((ga1 + 0).ii == i)) &&
                   ((C_10 : ((ga2 + 1).ii == i)) &&
                     (C_11 : ((ga3 + 2).ii == i)))));
{  
   {  (C_2 : ((C_1 : (ga1 + 0).ii) = i));
      (C_4 : ((C_3 : (ga2 + 1).ii) = i));
      (C_6 : ((C_5 : (ga3 + 2).ii) = i));
      
      (return ())
   }
}

unit testg()
{  
   {  (C_12 : fg(5));
      
      {  
         (assert (C_13 : ((ga1 + 0).ii == 5)));
         ()
      };
      
      {  
         (assert (C_14 : ((ga2 + 1).ii == 5)));
         ()
      };
      
      {  
         (assert (C_15 : ((ga3 + 2).ii == 5)));
         ()
      };
      
      (return ())
   }
}

unit lg(int32 i)
{  
   (var S[0] la1);
   
   (var S[0..1] la2);
   
   (var S[0..2] la3);
   
   {  (C_17 : (la1 = (C_16 : (new S[1]))));
      (C_19 : (la2 = (C_18 : (new S[2]))));
      (C_21 : (la3 = (C_20 : (new S[3]))));
      (C_23 : ((C_22 : (la3 + 0).ii) = 0));
      (C_25 : ((C_24 : (la3 + 0).jj) = 0));
      (C_27 : ((C_26 : (la3 + 1).ii) = 0));
      (C_29 : ((C_28 : (la3 + 1).jj) = 0));
      (C_31 : ((C_30 : (la3 + 2).ii) = 0));
      (C_33 : ((C_32 : (la3 + 2).jj) = 0));
      (C_35 : ((C_34 : (la1 + 0).jj) = i));
      (C_37 : ((C_36 : (la2 + 1).jj) = i));
      (C_39 : ((C_38 : (la3 + 2).jj) = i));
      
      {  
         (assert (C_40 : ((la1 + 0).jj == i)));
         ()
      };
      
      {  
         (assert (C_41 : ((la2 + 1).jj == i)));
         ()
      };
      
      {  
         (assert (C_42 : ((la3 + 2).jj == i)));
         ()
      };
      
      {  (C_43 : (free(la1)));
         (C_44 : (free(la2)));
         (C_45 : (free(la3)));
         
         (return ())
      }
   }
}
