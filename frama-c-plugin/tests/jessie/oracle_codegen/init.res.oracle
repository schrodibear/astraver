rm -f init.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only init.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs init.cloc init.jc
Normalized expression:
(((\offset_min(s)) <= 0) && ((\offset_max(s)) >= 0))

Normalized expression:
(((\offset_min(t)) <= 0) && ((\offset_max(t)) >= 2))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
((t + 1).int_M == 2)

Normalized expression:
(((s.b + 0).int_M == 1) && ((s.b + 2).int_M == 4))

Normalized expression:
{
(let int32 y in
   {
   (let int32 __retres in
      {
      {
        (C_1:
           {
           (y = x);
             (C_11: { (__retres = (C_10: (TODO cast))); (return __retres) })
           })
        }
      })
   })
}

Normalized expression:
(C_12: (\result == 7))

Normalized expression:
true

Normalized expression:
{
(let int_P[0..1] t_0 in
   {
   (let int32 x_0 in
      {
      (let int32 __retres in
         {
         {
           (C_14:
              {
              (t_0 = (C_13: (TODO alloc)));
                (C_16:
                   {
                   ((C_15: (t_0 + 0).int_M) = 4);
                     (C_18:
                        {
                        ((C_17: (t_0 + 1).int_M) = 5);
                          (C_19:
                             {
                             (x_0 = 45);
                               (C_21:
                                  {
                                  (__retres = (C_20: (t_0 + 0).int_M));
                                    {
                                    (C_22: { (TODO free); (return __retres) })
                                    }
                                  })
                             })
                        })
                   })
              })
           }
         })
      })
   })
}

Normalized expression:
(C_23: (\result == 4))

Normalized expression:
true

Normalized expression:
{
(let int_P[0..2] u in
   {
   (let int32 __retres in
      {
      {
        (C_25:
           {
           (u = (C_24: (TODO alloc)));
             (C_27:
                {
                ((C_26: (u + 0).int_M) = 3);
                  (C_29:
                     {
                     ((C_28: (u + 1).int_M) = 4);
                       (C_31:
                          {
                          ((C_30: (u + 2).int_M) = 5);
                            (C_39:
                               {
                               (__retres = (C_38: (TODO cast)));
                                 {
                                 (C_40: { (TODO free); (return __retres) })
                                 }
                               })
                          })
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
(C_41: (\result == 12))

Normalized expression:
true

Generating Why function f
Generating Why function g
Generating Why function h
cat why/init.why
type S

type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

logic x:  -> int32

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic t:  -> int_P pointer

logic s:  -> S pointer

predicate s_const(s:S pointer,
 S_b:(S,
 int_P pointer) memory,
 int_P_int_M:(int_P,
 int32) memory,
 s:S pointer,
 t:int_P pointer,
 x:int32) =
 (eq_int(integer_of_int32(select(int_P_int_M, shift(select(S_b, s), (0)))),
  (1))
 and eq_int(integer_of_int32(select(int_P_int_M, shift(select(S_b, s), (2)))),
     (4)))

axiom full_separated_s_const_b :
 (forall tmp:S pointer.
  (forall tmpval:int_P pointer.
   (forall x:int32.
    (forall t:int_P pointer.
     (forall s:S pointer.
      (forall int_P_int_M:(int_P,
       int32) memory.
       (forall S_b:(S,
        int_P pointer) memory.
        (forall s:S pointer.
         ((full_separated(tmp, t) and full_separated(tmp, s)) ->
          (s_const(s, S_b, int_P_int_M, s, t, x)
          <-> s_const(s, store(S_b, tmp, tmpval), int_P_int_M, s, t, x)))))))))))

axiom full_separated_s_const_int_M :
 (forall tmp:int_P pointer.
  (forall tmpval:int32.
   (forall x:int32.
    (forall t:int_P pointer.
     (forall s:S pointer.
      (forall int_P_int_M:(int_P,
       int32) memory.
       (forall S_b:(S,
        int_P pointer) memory.
        (forall s:S pointer.
         ((full_separated(tmp, t) and full_separated(tmp, s)) ->
          (s_const(s, S_b, int_P_int_M, s, t, x)
          <-> s_const(s, S_b, store(int_P_int_M, tmp, tmpval), s, t, x)))))))))))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s_0:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s_0) ->
      (strlen(char_P_char_M_at_L, s_0) = strlen(char_P_char_M_at_L, s_0)))))))

predicate t_const(t:int_P pointer,
 int_P_int_M:(int_P,
 int32) memory,
 s:S pointer,
 t:int_P pointer,
 x:int32) =
 eq_int(integer_of_int32(select(int_P_int_M, shift(t, (1)))), (2))

axiom full_separated_t_const_int_M :
 (forall tmp:int_P pointer.
  (forall tmpval:int32.
   (forall x:int32.
    (forall t:int_P pointer.
     (forall s:S pointer.
      (forall int_P_int_M:(int_P,
       int32) memory.
       (forall t:int_P pointer.
        ((full_separated(tmp, t) and full_separated(tmp, s)) ->
         (t_const(t, int_P_int_M, s, t, x)
         <-> t_const(t, store(int_P_int_M, tmp, tmpval), s, t, x))))))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_7, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_7)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_7)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_8:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_8, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_8, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_8, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_1)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_1, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_2,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_2))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_3, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_6)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_6, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_5, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_5)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_4, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_4)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_s(s:S pointer,
 S_alloc_table:S alloc_table,
 s:S pointer,
 t:int_P pointer,
 x:int32) =
 (le_int(offset_min(S_alloc_table, s), (0))
 and ge_int(offset_max(S_alloc_table, s), (0)))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S_b:(S,
 int_P pointer) memory) =
 ((offset_min(S_alloc_table, p) = a)
 and ((offset_max(S_alloc_table, p) = b)
     and valid_struct_int_P(select(S_b, p), (0), (2), int_P_alloc_table)))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_t(t:int_P pointer,
 int_P_alloc_table:int_P alloc_table,
 s:S pointer,
 t:int_P pointer,
 x:int32) =
 (le_int(offset_min(int_P_alloc_table, t), (0))
 and ge_int(offset_max(int_P_alloc_table, t), (2)))

predicate valid_variant_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter S_a : (S, int32) memory ref

parameter S_alloc_table : S alloc_table ref

parameter S_b : (S, int_P pointer) memory ref

parameter S_tag_table : S tag_table ref

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter alloc_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    int_P_alloc_table:int_P alloc_table ref ->
     S_b:(S,
      int_P pointer) memory ref ->
      { ge_int(n, (0))} S pointer reads S_alloc_table,S_b,int_P_alloc_table
      writes S_alloc_table,S_tag_table
      { (valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table,
         int_P_alloc_table, S_b)
        and (instanceof(S_tag_table, result, S_tag)
            and (alloc_extends(S_alloc_table@, S_alloc_table)
                and alloc_extern(S_alloc_table@, result)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_S :
 tt:unit ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    int_P_alloc_table:int_P alloc_table ref ->
     S_b:(S,
      int_P pointer) memory ref ->
      { } S pointer reads S_alloc_table,S_b,int_P_alloc_table
      writes S_alloc_table,S_tag_table
      { (valid_struct_S(result, (0), (0), S_alloc_table, int_P_alloc_table,
         S_b)
        and (instanceof(S_tag_table, result, S_tag)
            and (alloc_extends(S_alloc_table@, S_alloc_table)
                and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int_P_int_M : (int_P, int32) memory ref

parameter f :
 tt:unit ->
  { (JC_1:
    (valid_s(s, S_alloc_table, s, t, x)
    and (valid_t(t, int_P_alloc_table, s, t, x)
        and (t_const(t, int_P_int_M, s, t, x)
            and s_const(s, S_b, int_P_int_M, s, t, x)))))}
  int32 reads S_alloc_table,S_b,int_P_alloc_table,int_P_int_M
  { ((JC_3:
     (valid_s(s, S_alloc_table, s, t, x)
     and (valid_t(t, int_P_alloc_table, s, t, x)
         and (t_const(t, int_P_int_M, s, t, x)
             and s_const(s, S_b, int_P_int_M, s, t, x)))))
    and ((true = true) ->
         (JC_4:
         ((C_12: eq_int(integer_of_int32(result), (7)))
         and (valid_s(s, S_alloc_table, s, t, x)
             and (valid_t(t, int_P_alloc_table, s, t, x)
                 and (t_const(t, int_P_int_M, s, t, x)
                     and s_const(s, S_b, int_P_int_M, s, t, x)))))))) }

parameter g :
 tt:unit ->
  { (JC_5:
    (valid_s(s, S_alloc_table, s, t, x)
    and (valid_t(t, int_P_alloc_table, s, t, x)
        and (t_const(t, int_P_int_M, s, t, x)
            and s_const(s, S_b, int_P_int_M, s, t, x)))))}
  int32 reads S_alloc_table,S_b,int_P_alloc_table,int_P_int_M
  writes int_P_alloc_table,int_P_int_M,int_P_tag_table
  { ((JC_7:
     (valid_s(s, S_alloc_table, s, t, x)
     and (valid_t(t, int_P_alloc_table, s, t, x)
         and (t_const(t, int_P_int_M, s, t, x)
             and s_const(s, S_b, int_P_int_M, s, t, x)))))
    and ((true = true) ->
         (JC_8:
         ((C_23: eq_int(integer_of_int32(result), (4)))
         and (valid_s(s, S_alloc_table, s, t, x)
             and (valid_t(t, int_P_alloc_table, s, t, x)
                 and (t_const(t, int_P_int_M, s, t, x)
                     and s_const(s, S_b, int_P_int_M, s, t, x)))))))) }

parameter h :
 tt:unit ->
  { (JC_9:
    (valid_s(s, S_alloc_table, s, t, x)
    and (valid_t(t, int_P_alloc_table, s, t, x)
        and (t_const(t, int_P_int_M, s, t, x)
            and s_const(s, S_b, int_P_int_M, s, t, x)))))}
  int32 reads S_alloc_table,S_b,int_P_alloc_table,int_P_int_M
  writes int_P_alloc_table,int_P_int_M,int_P_tag_table
  { ((JC_11:
     (valid_s(s, S_alloc_table, s, t, x)
     and (valid_t(t, int_P_alloc_table, s, t, x)
         and (t_const(t, int_P_int_M, s, t, x)
             and s_const(s, S_b, int_P_int_M, s, t, x)))))
    and ((true = true) ->
         (JC_12:
         ((C_41: eq_int(integer_of_int32(result), (12)))
         and (valid_s(s, S_alloc_table, s, t, x)
             and (valid_t(t, int_P_alloc_table, s, t, x)
                 and (t_const(t, int_P_int_M, s, t, x)
                     and s_const(s, S_b, int_P_int_M, s, t, x)))))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f_ensures_default =
 fun (tt : unit) ->
  { (JC_1:
    (valid_s(s, S_alloc_table, s, t, x)
    and (valid_t(t, int_P_alloc_table, s, t, x)
        and (t_const(t, int_P_int_M, s, t, x)
            and s_const(s, S_b, int_P_int_M, s, t, x))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_3 = (y := x) in void);
      (C_11:
      begin
        (let jessie_4 = (__retres := (safe_int32_of_integer_ (C_9:
                                                             ((add_int 
                                                               (integer_of_int32 
                                                                (safe_int32_of_integer_ 
                                                                 (C_7:
                                                                 ((add_int 
                                                                   (integer_of_int32 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    ((shift t) (1))))) 
                                                                  (integer_of_int32 
                                                                   ((safe_acc_ !int_P_int_M) 
                                                                    ((shift 
                                                                    ((safe_acc_ !S_b) s)) (0))))))))) 
                                                              (integer_of_int32 
                                                               ((safe_acc_ !int_P_int_M) 
                                                                ((shift 
                                                                  ((safe_acc_ !S_b) s)) (2)))))))) in
        void);
       (jessie_returned_value := !__retres);
       (raise Return)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_4:
     ((C_12: eq_int(integer_of_int32(result), (7)))
     and (valid_s(s, S_alloc_table, s, t, x)
         and (valid_t(t, int_P_alloc_table, s, t, x)
             and (t_const(t, int_P_int_M, s, t, x)
                 and s_const(s, S_b, int_P_int_M, s, t, x))))))) }

let f_safety =
 fun (tt : unit) ->
  { (JC_1:
    (valid_s(s, S_alloc_table, s, t, x)
    and (valid_t(t, int_P_alloc_table, s, t, x)
        and (t_const(t, int_P_int_M, s, t, x)
            and s_const(s, S_b, int_P_int_M, s, t, x))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_1 = (y := x) in void);
      (C_11:
      begin
        (let jessie_2 = (__retres := (C_10:
                                     (int32_of_integer_ (C_9:
                                                        ((add_int (integer_of_int32 
                                                                   (C_8:
                                                                   (int32_of_integer_ 
                                                                    (C_7:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    ((shift t) (1))))) 
                                                                    (integer_of_int32 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    ((shift 
                                                                    ((safe_acc_ !S_b) s)) (0)))))))))) 
                                                         (integer_of_int32 
                                                          ((safe_acc_ !int_P_int_M) 
                                                           ((shift ((safe_acc_ !S_b) s)) (2))))))))) in
        void);
       (jessie_returned_value := !__retres);
       (raise Return)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_3:
    (valid_s(s, S_alloc_table, s, t, x)
    and (valid_t(t, int_P_alloc_table, s, t, x)
        and (t_const(t, int_P_int_M, s, t, x)
            and s_const(s, S_b, int_P_int_M, s, t, x))))) }

let g_ensures_default_1 =
 fun (tt : unit) ->
  { (JC_5:
    (valid_s(s, S_alloc_table, s, t, x)
    and (valid_t(t, int_P_alloc_table, s, t, x)
        and (t_const(t, int_P_int_M, s, t, x)
            and s_const(s, S_b, int_P_int_M, s, t, x))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t_0 = ref (any_pointer void) in
     (let x_0 = ref (any_int32 void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_14:
     begin
       (let jessie_16 = (let jessie_15 = (C_13:
                                         (((alloc_int_P (2)) int_P_alloc_table) int_P_alloc_table)) in
                        (t_0 := (C_13:
                                (((alloc_int_P (2)) int_P_alloc_table) int_P_alloc_table)))) in
       void);
      (C_16:
      begin
        (let jessie_19 = (let jessie_17 = ((shift !t_0) (0)) in
                         (let jessie_18 = (safe_int32_of_integer_ (4)) in
                         (((safe_upd_ int_P_int_M) ((shift !t_0) (0))) jessie_18))) in
        void);
       (C_18:
       begin
         (let jessie_22 = (let jessie_20 = ((shift !t_0) (1)) in
                          (let jessie_21 = (safe_int32_of_integer_ (5)) in
                          (((safe_upd_ int_P_int_M) ((shift !t_0) (1))) jessie_21))) in
         void);
        (C_19:
        begin
          (let jessie_23 = (x_0 := (safe_int32_of_integer_ (45))) in void);
         (C_21:
         begin
           (let jessie_24 = (__retres_0 := ((safe_acc_ !int_P_int_M) 
                                            ((shift !t_0) (0)))) in
           void);
          (C_22:
          begin
            ((free_parameter int_P_alloc_table) !t_0);
           (jessie_returned_value := !__retres_0);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_8:
     ((C_23: eq_int(integer_of_int32(result), (4)))
     and (valid_s(s, S_alloc_table, s, t, x)
         and (valid_t(t, int_P_alloc_table, s, t, x)
             and (t_const(t, int_P_int_M, s, t, x)
                 and s_const(s, S_b, int_P_int_M, s, t, x))))))) }

let g_safety =
 fun (tt : unit) ->
  { (JC_5:
    (valid_s(s, S_alloc_table, s, t, x)
    and (valid_t(t, int_P_alloc_table, s, t, x)
        and (t_const(t, int_P_int_M, s, t, x)
            and s_const(s, S_b, int_P_int_M, s, t, x))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t_0 = ref (any_pointer void) in
     (let x_0 = ref (any_int32 void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_14:
     begin
       (let jessie_6 = (let jessie_5 = (C_13:
                                       (((alloc_int_P (2)) int_P_alloc_table) int_P_alloc_table)) in
                       (assert
                       { ge_int(offset_max(int_P_alloc_table, jessie_5), (1)) };
                       (t_0 := (C_13:
                               (((alloc_int_P (2)) int_P_alloc_table) int_P_alloc_table))))) in
       void);
      (C_16:
      begin
        (let jessie_9 = (let jessie_7 = ((shift !t_0) (0)) in
                        (let jessie_8 = (safe_int32_of_integer_ (4)) in
                        (((safe_upd_ int_P_int_M) ((shift !t_0) (0))) jessie_8))) in
        void);
       (C_18:
       begin
         (let jessie_12 = (let jessie_10 = ((shift !t_0) (1)) in
                          (let jessie_11 = (safe_int32_of_integer_ (5)) in
                          (((safe_upd_ int_P_int_M) ((shift !t_0) (1))) jessie_11))) in
         void);
        (C_19:
        begin
          (let jessie_13 = (x_0 := (safe_int32_of_integer_ (45))) in void);
         (C_21:
         begin
           (let jessie_14 = (__retres_0 := ((safe_acc_ !int_P_int_M) 
                                            ((shift !t_0) (0)))) in
           void);
          (C_22:
          begin
            ((free_parameter int_P_alloc_table) !t_0);
           (jessie_returned_value := !__retres_0);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_7:
    (valid_s(s, S_alloc_table, s, t, x)
    and (valid_t(t, int_P_alloc_table, s, t, x)
        and (t_const(t, int_P_int_M, s, t, x)
            and s_const(s, S_b, int_P_int_M, s, t, x))))) }

let h_ensures_default_2 =
 fun (tt : unit) ->
  { (JC_9:
    (valid_s(s, S_alloc_table, s, t, x)
    and (valid_t(t, int_P_alloc_table, s, t, x)
        and (t_const(t, int_P_int_M, s, t, x)
            and s_const(s, S_b, int_P_int_M, s, t, x))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let u = ref (any_pointer void) in
     (let __retres_1 = ref (any_int32 void) in
     (C_25:
     begin
       (let jessie_38 = (let jessie_37 = (C_24:
                                         (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table)) in
                        (u := (C_24:
                              (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table)))) in
       void);
      (C_27:
      begin
        (let jessie_41 = (let jessie_39 = ((shift !u) (0)) in
                         (let jessie_40 = (safe_int32_of_integer_ (3)) in
                         (((safe_upd_ int_P_int_M) ((shift !u) (0))) jessie_40))) in
        void);
       (C_29:
       begin
         (let jessie_44 = (let jessie_42 = ((shift !u) (1)) in
                          (let jessie_43 = (safe_int32_of_integer_ (4)) in
                          (((safe_upd_ int_P_int_M) ((shift !u) (1))) jessie_43))) in
         void);
        (C_31:
        begin
          (let jessie_47 = (let jessie_45 = ((shift !u) (2)) in
                           (let jessie_46 = (safe_int32_of_integer_ (5)) in
                           (((safe_upd_ int_P_int_M) ((shift !u) (2))) jessie_46))) in
          void);
         (C_39:
         begin
           (let jessie_48 = (__retres_1 := (safe_int32_of_integer_ (C_37:
                                                                   ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_35:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    ((shift !u) (0))))) 
                                                                    (integer_of_int32 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    ((shift !u) (1))))))))) 
                                                                    (integer_of_int32 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    ((shift !u) (2)))))))) in
           void);
          (C_40:
          begin
            ((free_parameter int_P_alloc_table) !u);
           (jessie_returned_value := !__retres_1);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_12:
     ((C_41: eq_int(integer_of_int32(result), (12)))
     and (valid_s(s, S_alloc_table, s, t, x)
         and (valid_t(t, int_P_alloc_table, s, t, x)
             and (t_const(t, int_P_int_M, s, t, x)
                 and s_const(s, S_b, int_P_int_M, s, t, x))))))) }

let h_safety =
 fun (tt : unit) ->
  { (JC_9:
    (valid_s(s, S_alloc_table, s, t, x)
    and (valid_t(t, int_P_alloc_table, s, t, x)
        and (t_const(t, int_P_int_M, s, t, x)
            and s_const(s, S_b, int_P_int_M, s, t, x))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let u = ref (any_pointer void) in
     (let __retres_1 = ref (any_int32 void) in
     (C_25:
     begin
       (let jessie_26 = (let jessie_25 = (C_24:
                                         (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table)) in
                        (assert
                        { ge_int(offset_max(int_P_alloc_table, jessie_25),
                          (2)) };
                        (u := (C_24:
                              (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table))))) in
       void);
      (C_27:
      begin
        (let jessie_29 = (let jessie_27 = ((shift !u) (0)) in
                         (let jessie_28 = (safe_int32_of_integer_ (3)) in
                         (((safe_upd_ int_P_int_M) ((shift !u) (0))) jessie_28))) in
        void);
       (C_29:
       begin
         (let jessie_32 = (let jessie_30 = ((shift !u) (1)) in
                          (let jessie_31 = (safe_int32_of_integer_ (4)) in
                          (((safe_upd_ int_P_int_M) ((shift !u) (1))) jessie_31))) in
         void);
        (C_31:
        begin
          (let jessie_35 = (let jessie_33 = ((shift !u) (2)) in
                           (let jessie_34 = (safe_int32_of_integer_ (5)) in
                           (((safe_upd_ int_P_int_M) ((shift !u) (2))) jessie_34))) in
          void);
         (C_39:
         begin
           (let jessie_36 = (__retres_1 := (C_38:
                                           (int32_of_integer_ (C_37:
                                                              ((add_int 
                                                                (integer_of_int32 
                                                                 (C_36:
                                                                 (int32_of_integer_ 
                                                                  (C_35:
                                                                  ((add_int 
                                                                    (integer_of_int32 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    ((shift !u) (0))))) 
                                                                   (integer_of_int32 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    ((shift !u) (1)))))))))) 
                                                               (integer_of_int32 
                                                                ((safe_acc_ !int_P_int_M) 
                                                                 ((shift !u) (2))))))))) in
           void);
          (C_40:
          begin
            ((free_parameter int_P_alloc_table) !u);
           (jessie_returned_value := !__retres_1);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_11:
    (valid_s(s, S_alloc_table, s, t, x)
    and (valid_t(t, int_P_alloc_table, s, t, x)
        and (t_const(t, int_P_int_M, s, t, x)
            and s_const(s, S_b, int_P_int_M, s, t, x))))) }


