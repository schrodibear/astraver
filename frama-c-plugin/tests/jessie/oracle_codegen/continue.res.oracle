rm -f continue.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only continue.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs continue.cloc continue.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let int32 n in
   {
   {
     (C_1:
        {
        (n = 10);
          (try {
             (try loop
                    invariant (C_2: (0 <= n));
                    variant (C_3: n);
                    (try {
                       {
                         (try {
                            (TODO if);
                              (TODO if);
                              (C_7: { (n = (C_6: (TODO cast))) })
                            } with
                            | Goto___Cont jessie_1 -> {
                            (__Cont: { () })
                            }
                            | default -> ())
                         };
                         (throw Loop_continue ())
                       } with
                       | Loop_continue jessie_4 -> ()
                       | default -> ()) done with
                | Loop_exit jessie_3 -> ()
                | default -> ())
             } with
             | Goto_while_0_break jessie_2 -> {
             (while_0_break: { () })
             }
             | default -> ());
          (return n)
        })
     }
   })
}

Normalized expression:
(C_8: (\result == 0))

Normalized expression:
true

Normalized expression:
{
(let int32 i in
   {
   {
     (C_9:
        {
        (i = 17);
          (C_10:
             {
             (i = 0);
               (try {
                  (try loop
                         invariant (C_11: (i <= 10));
                         variant (C_12: (10 - i));
                         (try {
                            {
                              (try {
                                 (TODO if); (TODO if)
                                 } with
                                 | Goto___Cont jessie_5 -> {
                                 (__Cont:
                                    {
                                    (); (C_16: { (i = (C_15: (TODO cast))) })
                                    })
                                 }
                                 | default -> ())
                              };
                              (throw Loop_continue ())
                            } with
                            | Loop_continue jessie_8 -> ()
                            | default -> ()) done with
                     | Loop_exit jessie_7 -> ()
                     | default -> ())
                  } with
                  | Goto_while_1_break jessie_6 -> {
                  (while_1_break: { () })
                  }
                  | default -> ());
               (return i)
             })
        })
     }
   })
}

Normalized expression:
(C_17: (\result == 10))

Normalized expression:
true

Normalized expression:
{
(let int32 i in
   {
   {
     (C_18:
        {
        (i = 0);
          (try {
             (try loop
                    invariant (C_19: ((C_20: (i <= 7)) && (C_21: (i != 6))));
                    variant (C_22: (7 - i));
                    (try {
                       {
                         (try {
                            (TODO if); (TODO if)
                            } with
                            | Goto___Cont jessie_9 -> {
                            (__Cont:
                               {
                               (); (C_26: { (i = (C_25: (TODO cast))) })
                               })
                            }
                            | default -> ())
                         };
                         (throw Loop_continue ())
                       } with
                       | Loop_continue jessie_12 -> ()
                       | default -> ()) done with
                | Loop_exit jessie_11 -> ()
                | default -> ())
             } with
             | Goto_while_2_break jessie_10 -> {
             (while_2_break: { () })
             }
             | default -> ());
          (return i)
        })
     }
   })
}

Normalized expression:
(C_27: (\result == 7))

Normalized expression:
true

Generating Why function f1
Generating Why function f2
Generating Why function f3
cat why/continue.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type uint16

type uint32

type uint64

type uint8

exception Goto___Cont_exc of unit

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Goto_while_2_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter f1 :
 tt:unit ->
  { (JC_1: true)} int32
  { ((true = true) -> (C_8: eq_int(integer_of_int32(result), (0)))) }

parameter f2 :
 tt:unit ->
  { (JC_6: true)} int32
  { ((true = true) -> (C_17: eq_int(integer_of_int32(result), (10)))) }

parameter f3 :
 tt:unit ->
  { (JC_11: true)} int32
  { ((true = true) -> (C_27: eq_int(integer_of_int32(result), (7)))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f1_ensures_default =
 fun (tt : unit) ->
  { (JC_2: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let n_0 = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_19 = (n_0 := (safe_int32_of_integer_ (10))) in void);
      try
       while true do
       { invariant (C_2: le_int((0), integer_of_int32(n_0)))  }
        try
         (let jessie_24 = begin
                            try
                             (let jessie_23 = begin
                                                (if ((gt_int_ (integer_of_int32 !n_0)) (0))
                                                then void
                                                else
                                                 (let jessie_20 = (raise
                                                                   (Goto_while_0_break_exc
                                                                   void)) in
                                                 void));
                                               (if ((eq_int_ (integer_of_int32 !n_0)) (5))
                                               then
                                                (let jessie_22 = (C_4:
                                                                 begin
                                                                   (let jessie_21 = 
                                                                   (n_0 := 
                                                                    (safe_int32_of_integer_ (0))) in
                                                                   void);
                                                                  (raise
                                                                   (Goto___Cont_exc
                                                                   void))
                                                                 end) in
                                                void)
                                               else void);
                                               (C_7:
                                               begin
                                                 (n_0 := (safe_int32_of_integer_ 
                                                          (C_5:
                                                          ((sub_int (integer_of_int32 !n_0)) (1)))));
                                                !n_0
                                               end)
                                              end in
                             void)
                             with
                             Goto___Cont_exc jessie_1 ->
                             (__Cont: void) end;
                           (raise (Loop_continue_exc void))
                          end in
         void)
         with
         Loop_continue_exc jessie_4 ->
         void end
       done
       with
       Goto_while_0_break_exc jessie_2 ->
       (while_0_break: void) end;
      (jessie_returned_value := !n_0);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) -> (C_8: eq_int(integer_of_int32(result), (0)))) }

let f1_safety =
 fun (tt : unit) ->
  { (JC_2: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let n_0 = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_13 = (n_0 := (safe_int32_of_integer_ (10))) in void);
      try
       while true do
       { invariant (C_2: le_int((0), integer_of_int32(n_0)))
         variant (C_3 : integer_of_int32((C_3 : n_0))) }
        try
         (let jessie_18 = begin
                            try
                             (let jessie_17 = begin
                                                (if ((gt_int_ (integer_of_int32 !n_0)) (0))
                                                then void
                                                else
                                                 (let jessie_14 = (raise
                                                                   (Goto_while_0_break_exc
                                                                   void)) in
                                                 void));
                                               (if ((eq_int_ (integer_of_int32 !n_0)) (5))
                                               then
                                                (let jessie_16 = (C_4:
                                                                 begin
                                                                   (let jessie_15 = 
                                                                   (n_0 := 
                                                                    (safe_int32_of_integer_ (0))) in
                                                                   void);
                                                                  (raise
                                                                   (Goto___Cont_exc
                                                                   void))
                                                                 end) in
                                                void)
                                               else void);
                                               (C_7:
                                               begin
                                                 (n_0 := (C_6:
                                                         (int32_of_integer_ 
                                                          (C_5:
                                                          ((sub_int (integer_of_int32 !n_0)) (1))))));
                                                !n_0
                                               end)
                                              end in
                             void)
                             with
                             Goto___Cont_exc jessie_1 ->
                             (__Cont: void) end;
                           (raise (Loop_continue_exc void))
                          end in
         void)
         with
         Loop_continue_exc jessie_4 ->
         void end
       done
       with
       Goto_while_0_break_exc jessie_2 ->
       (while_0_break: void) end;
      (jessie_returned_value := !n_0);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let f2_ensures_default_1 =
 fun (tt : unit) ->
  { (JC_7: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let i_6 = ref (any_int32 void) in
     (C_9:
     begin
       (let jessie_32 = (i_6 := (safe_int32_of_integer_ (17))) in void);
      (C_10:
      begin
        (let jessie_33 = (i_6 := (safe_int32_of_integer_ (0))) in void);
       try
        while true do
        { invariant (C_11: le_int(integer_of_int32(i_6), (10)))  }
         try
          (let jessie_38 = begin
                             try
                              begin
                                (if ((lt_int_ (integer_of_int32 !i_6)) (10))
                                then void
                                else
                                 (let jessie_34 = (raise
                                                   (Goto_while_1_break_exc
                                                   void)) in
                                 void));
                               (if ((eq_int_ (integer_of_int32 !i_6)) (5))
                               then
                                (let jessie_36 = (C_13:
                                                 begin
                                                   (let jessie_35 = (i_6 := 
                                                                    (safe_int32_of_integer_ (6))) in
                                                   void);
                                                  (raise
                                                   (Goto___Cont_exc
                                                   void))
                                                 end) in
                                void)
                               else void)
                              end
                              with
                              Goto___Cont_exc jessie_5 ->
                              (let jessie_37 = (__Cont:
                                               begin
                                                 void;
                                                (C_16:
                                                begin
                                                  (i_6 := (safe_int32_of_integer_ 
                                                           (C_14:
                                                           ((add_int 
                                                             (integer_of_int32 !i_6)) (1)))));
                                                 !i_6
                                                end)
                                               end) in
                              void) end;
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_8 ->
          void end
        done
        with
        Goto_while_1_break_exc jessie_6 ->
        (while_1_break: void) end;
       (jessie_returned_value := !i_6);
       (raise Return)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) -> (C_17: eq_int(integer_of_int32(result), (10)))) }

let f2_safety =
 fun (tt : unit) ->
  { (JC_7: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let i_6 = ref (any_int32 void) in
     (C_9:
     begin
       (let jessie_25 = (i_6 := (safe_int32_of_integer_ (17))) in void);
      (C_10:
      begin
        (let jessie_26 = (i_6 := (safe_int32_of_integer_ (0))) in void);
       try
        while true do
        { invariant (C_11: le_int(integer_of_int32(i_6), (10)))
          variant (C_12 : sub_int((10), integer_of_int32(i_6))) }
         try
          (let jessie_31 = begin
                             try
                              begin
                                (if ((lt_int_ (integer_of_int32 !i_6)) (10))
                                then void
                                else
                                 (let jessie_27 = (raise
                                                   (Goto_while_1_break_exc
                                                   void)) in
                                 void));
                               (if ((eq_int_ (integer_of_int32 !i_6)) (5))
                               then
                                (let jessie_29 = (C_13:
                                                 begin
                                                   (let jessie_28 = (i_6 := 
                                                                    (safe_int32_of_integer_ (6))) in
                                                   void);
                                                  (raise
                                                   (Goto___Cont_exc
                                                   void))
                                                 end) in
                                void)
                               else void)
                              end
                              with
                              Goto___Cont_exc jessie_5 ->
                              (let jessie_30 = (__Cont:
                                               begin
                                                 void;
                                                (C_16:
                                                begin
                                                  (i_6 := (C_15:
                                                          (int32_of_integer_ 
                                                           (C_14:
                                                           ((add_int 
                                                             (integer_of_int32 !i_6)) (1))))));
                                                 !i_6
                                                end)
                                               end) in
                              void) end;
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_8 ->
          void end
        done
        with
        Goto_while_1_break_exc jessie_6 ->
        (while_1_break: void) end;
       (jessie_returned_value := !i_6);
       (raise Return)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let f3_ensures_default_2 =
 fun (tt : unit) ->
  { (JC_12: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let i_7 = ref (any_int32 void) in
     (C_18:
     begin
       (let jessie_45 = (i_7 := (safe_int32_of_integer_ (0))) in void);
      try
       while true do
       { invariant
           (C_19:
           ((C_20: le_int(integer_of_int32(i_7), (7)))
           and (C_21: neq_int(integer_of_int32(i_7), (6)))))
          }
        try
         (let jessie_50 = begin
                            try
                             begin
                               (if ((lt_int_ (integer_of_int32 !i_7)) (6))
                               then void
                               else
                                (let jessie_46 = (raise
                                                  (Goto_while_2_break_exc
                                                  void)) in
                                void));
                              (if ((eq_int_ (integer_of_int32 !i_7)) (5))
                              then
                               (let jessie_48 = (C_23:
                                                begin
                                                  (let jessie_47 = (i_7 := 
                                                                    (safe_int32_of_integer_ (6))) in
                                                  void);
                                                 (raise
                                                  (Goto___Cont_exc
                                                  void))
                                                end) in
                               void)
                              else void)
                             end
                             with
                             Goto___Cont_exc jessie_9 ->
                             (let jessie_49 = (__Cont:
                                              begin
                                                void;
                                               (C_26:
                                               begin
                                                 (i_7 := (safe_int32_of_integer_ 
                                                          (C_24:
                                                          ((add_int (integer_of_int32 !i_7)) (1)))));
                                                !i_7
                                               end)
                                              end) in
                             void) end;
                           (raise (Loop_continue_exc void))
                          end in
         void)
         with
         Loop_continue_exc jessie_12 ->
         void end
       done
       with
       Goto_while_2_break_exc jessie_10 ->
       (while_2_break: void) end;
      (jessie_returned_value := !i_7);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) -> (C_27: eq_int(integer_of_int32(result), (7)))) }

let f3_safety =
 fun (tt : unit) ->
  { (JC_12: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let i_7 = ref (any_int32 void) in
     (C_18:
     begin
       (let jessie_39 = (i_7 := (safe_int32_of_integer_ (0))) in void);
      try
       while true do
       { invariant
           (C_19:
           ((C_20: le_int(integer_of_int32(i_7), (7)))
           and (C_21: neq_int(integer_of_int32(i_7), (6)))))
         variant (C_22 : sub_int((7), integer_of_int32(i_7))) }
        try
         (let jessie_44 = begin
                            try
                             begin
                               (if ((lt_int_ (integer_of_int32 !i_7)) (6))
                               then void
                               else
                                (let jessie_40 = (raise
                                                  (Goto_while_2_break_exc
                                                  void)) in
                                void));
                              (if ((eq_int_ (integer_of_int32 !i_7)) (5))
                              then
                               (let jessie_42 = (C_23:
                                                begin
                                                  (let jessie_41 = (i_7 := 
                                                                    (safe_int32_of_integer_ (6))) in
                                                  void);
                                                 (raise
                                                  (Goto___Cont_exc
                                                  void))
                                                end) in
                               void)
                              else void)
                             end
                             with
                             Goto___Cont_exc jessie_9 ->
                             (let jessie_43 = (__Cont:
                                              begin
                                                void;
                                               (C_26:
                                               begin
                                                 (i_7 := (C_25:
                                                         (int32_of_integer_ 
                                                          (C_24:
                                                          ((add_int (integer_of_int32 !i_7)) (1))))));
                                                !i_7
                                               end)
                                              end) in
                             void) end;
                           (raise (Loop_continue_exc void))
                          end in
         void)
         with
         Loop_continue_exc jessie_12 ->
         void end
       done
       with
       Goto_while_2_break_exc jessie_10 ->
       (while_2_break: void) end;
      (jessie_returned_value := !i_7);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }


