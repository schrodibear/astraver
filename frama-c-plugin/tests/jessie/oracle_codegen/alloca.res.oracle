rm -f alloca.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only alloca.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs alloca.cloc alloca.jc
Normalized expression:
(((\offset_min(u)) <= 0) && ((\offset_max(u)) >= 3))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let int_P[0..2] t in
   {
   (let int32 __retres in
      {
      {
        (C_2:
           {
           (t = (C_1: (TODO alloc)));
             (C_4:
                {
                ((C_3: (t + 0).int_M) = 1);
                  (C_6:
                     {
                     ((C_5: (t + 1).int_M) = 2);
                       (C_8:
                          {
                          ((C_7: (t + 2).int_M) = 3);
                            (C_10:
                               {
                               (__retres = (C_9: (t + 2).int_M));
                                 {
                                 (C_11: { (TODO free); (return __retres) })
                                 }
                               })
                          })
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
(C_12: (\result == 3))

Normalized expression:
true

Normalized expression:
{
(let int_P[0..2] t in
   {
   (let int32 __retres in
      {
      {
        (C_14:
           {
           (t = (C_13: (TODO alloc)));
             (C_16:
                {
                ((C_15: (t + 0).int_M) = 1);
                  (C_18:
                     {
                     ((C_17: (t + 1).int_M) = 2);
                       (C_20:
                          {
                          ((C_19: (t + 2).int_M) = 3);
                            (C_22:
                               {
                               (__retres = (C_21: (t + 2).int_M));
                                 {
                                 (C_23: { (TODO free); (return __retres) })
                                 }
                               })
                          })
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
(C_24: (\result == 3))

Normalized expression:
true

Normalized expression:
{
(let int_P[0..3] t in
   {
   (let int32 __retres in
      {
      {
        (C_26:
           {
           (t = (C_25: (TODO alloc)));
             (C_28:
                {
                ((C_27: (t + 0).int_M) = 1);
                  (C_30:
                     {
                     ((C_29: (t + 1).int_M) = 2);
                       (C_32:
                          {
                          ((C_31: (t + 2).int_M) = 3);
                            (C_34:
                               {
                               ((C_33: (t + 3).int_M) = 4);
                                 (C_36:
                                    {
                                    (__retres = (C_35: (u + 2).int_M));
                                      {
                                      (C_37:
                                         {
                                         (TODO free); (return __retres)
                                         })
                                      }
                                    })
                               })
                          })
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
(C_38: ((u + 2).int_M == 12))

Normalized expression:
(C_39: (\result == 12))

Normalized expression:
true

Normalized expression:
{
(let int_P[0..3] t in
   {
   (let int_P[0..4] u_0 in
      {
      (let int32 __retres in
         {
         {
           (C_41:
              {
              (t = (C_40: (TODO alloc)));
                (C_43:
                   {
                   (u_0 = (C_42: (TODO alloc)));
                     (C_45:
                        {
                        ((C_44: (t + 0).int_M) = 1);
                          (C_47:
                             {
                             ((C_46: (t + 1).int_M) = 2);
                               (C_49:
                                  {
                                  ((C_48: (t + 2).int_M) = 3);
                                    (C_51:
                                       {
                                       ((C_50: (t + 3).int_M) = 4);
                                         {
                                         (C_53:
                                            {
                                            ((C_52: (u_0 + 0).int_M) = 0);
                                              ();
                                              ()
                                            })
                                         };
                                         {
                                         (C_55:
                                            {
                                            ((C_54: (u_0 + 1).int_M) = 0);
                                              ();
                                              ()
                                            })
                                         };
                                         (C_58:
                                            {
                                            ((C_57: (u_0 + 2).int_M) =
                                               (C_56: (t + 2).int_M));
                                              {
                                              (C_60:
                                                 {
                                                 ((C_59: (u_0 + 3).int_M) = 0);
                                                   ();
                                                   ()
                                                 })
                                              };
                                              {
                                              (C_62:
                                                 {
                                                 ((C_61: (u_0 + 4).int_M) = 0);
                                                   ();
                                                   ()
                                                 })
                                              };
                                              (C_64:
                                                 {
                                                 (__retres =
                                                    (C_63: (u_0 + 2).int_M));
                                                   {
                                                   (C_65:
                                                      {
                                                      (TODO free);
                                                        (C_66:
                                                           {
                                                           (TODO free);
                                                             (return __retres)
                                                           })
                                                      })
                                                   }
                                                 })
                                            })
                                       })
                                  })
                             })
                        })
                   })
              })
           }
         })
      })
   })
}

Normalized expression:
(C_67: (\result == 3))

Normalized expression:
true

Normalized expression:
{
(let int_P[0..4] t in
   {
   (let int_P[0..5] v in
      {
      (let int32 __retres in
         {
         {
           (C_69:
              {
              (t = (C_68: (TODO alloc)));
                (C_71:
                   {
                   (v = (C_70: (TODO alloc)));
                     (C_73:
                        {
                        ((C_72: (t + 4).int_M) = 3);
                          (C_75:
                             {
                             ((C_74: (v + 4).int_M) = 1);
                               (C_77:
                                  {
                                  (__retres = (C_76: (t + 4).int_M));
                                    {
                                    (C_78:
                                       {
                                       (TODO free);
                                         (C_79:
                                            {
                                            (TODO free); (return __retres)
                                            })
                                       })
                                    }
                                  })
                             })
                        })
                   })
              })
           }
         })
      })
   })
}

Normalized expression:
(C_80: (\result == 3))

Normalized expression:
true

Generating Why function f
Generating Why function g
Generating Why function h
Generating Why function two_local_arrays
Generating Why function two_local_arrays_not_alias
cat why/alloca.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic u:  -> int_P pointer

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_u(u:int_P pointer,
 int_P_alloc_table:int_P alloc_table,
 u:int_P pointer) =
 (le_int(offset_min(int_P_alloc_table, u), (0))
 and ge_int(offset_max(int_P_alloc_table, u), (3)))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int_P_int_M : (int_P, int32) memory ref

parameter f :
 tt:unit ->
  { (JC_1: valid_u(u, int_P_alloc_table, u))} int32
  reads int_P_alloc_table,int_P_int_M
  writes int_P_alloc_table,int_P_int_M,int_P_tag_table
  { ((JC_3: valid_u(u, int_P_alloc_table, u))
    and ((true = true) ->
         (JC_4:
         ((C_12: eq_int(integer_of_int32(result), (3)))
         and valid_u(u, int_P_alloc_table, u))))) }

parameter g :
 tt:unit ->
  { (JC_5: valid_u(u, int_P_alloc_table, u))} int32
  reads int_P_alloc_table,int_P_int_M
  writes int_P_alloc_table,int_P_int_M,int_P_tag_table
  { ((JC_7: valid_u(u, int_P_alloc_table, u))
    and ((true = true) ->
         (JC_8:
         ((C_24: eq_int(integer_of_int32(result), (3)))
         and valid_u(u, int_P_alloc_table, u))))) }

parameter h :
 tt:unit ->
  { (JC_9:
    ((C_38:
     eq_int(integer_of_int32(select(int_P_int_M, shift(u, (2)))), (12)))
    and valid_u(u, int_P_alloc_table, u)))}
  int32 reads int_P_alloc_table,int_P_int_M
  writes int_P_alloc_table,int_P_int_M,int_P_tag_table
  { ((JC_11: valid_u(u, int_P_alloc_table, u))
    and ((true = true) ->
         (JC_12:
         ((C_39: eq_int(integer_of_int32(result), (12)))
         and valid_u(u, int_P_alloc_table, u))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter two_local_arrays :
 tt:unit ->
  { (JC_13: valid_u(u, int_P_alloc_table, u))} int32
  reads int_P_alloc_table,int_P_int_M
  writes int_P_alloc_table,int_P_int_M,int_P_tag_table
  { ((JC_15: valid_u(u, int_P_alloc_table, u))
    and ((true = true) ->
         (JC_16:
         ((C_67: eq_int(integer_of_int32(result), (3)))
         and valid_u(u, int_P_alloc_table, u))))) }

parameter two_local_arrays_not_alias :
 tt:unit ->
  { (JC_17: valid_u(u, int_P_alloc_table, u))} int32
  reads int_P_alloc_table,int_P_int_M
  writes int_P_alloc_table,int_P_int_M,int_P_tag_table
  { ((JC_19: valid_u(u, int_P_alloc_table, u))
    and ((true = true) ->
         (JC_20:
         ((C_80: eq_int(integer_of_int32(result), (3)))
         and valid_u(u, int_P_alloc_table, u))))) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f_ensures_default =
 fun (tt : unit) ->
  { (JC_1: valid_u(u, int_P_alloc_table, u)) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_14 = (let jessie_13 = (C_1:
                                         (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table)) in
                        (t := (C_1:
                              (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table)))) in
       void);
      (C_4:
      begin
        (let jessie_17 = (let jessie_15 = ((shift !t) (0)) in
                         (let jessie_16 = (safe_int32_of_integer_ (1)) in
                         (((safe_upd_ int_P_int_M) ((shift !t) (0))) jessie_16))) in
        void);
       (C_6:
       begin
         (let jessie_20 = (let jessie_18 = ((shift !t) (1)) in
                          (let jessie_19 = (safe_int32_of_integer_ (2)) in
                          (((safe_upd_ int_P_int_M) ((shift !t) (1))) jessie_19))) in
         void);
        (C_8:
        begin
          (let jessie_23 = (let jessie_21 = ((shift !t) (2)) in
                           (let jessie_22 = (safe_int32_of_integer_ (3)) in
                           (((safe_upd_ int_P_int_M) ((shift !t) (2))) jessie_22))) in
          void);
         (C_10:
         begin
           (let jessie_24 = (__retres := ((safe_acc_ !int_P_int_M) ((shift !t) (2)))) in
           void);
          (C_11:
          begin
            ((free_parameter int_P_alloc_table) !t);
           (jessie_returned_value := !__retres);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_4:
     ((C_12: eq_int(integer_of_int32(result), (3)))
     and valid_u(u, int_P_alloc_table, u)))) }

let f_safety =
 fun (tt : unit) ->
  { (JC_1: valid_u(u, int_P_alloc_table, u)) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_2 = (let jessie_1 = (C_1:
                                       (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table)) in
                       (assert
                       { ge_int(offset_max(int_P_alloc_table, jessie_1), (2)) };
                       (t := (C_1:
                             (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table))))) in
       void);
      (C_4:
      begin
        (let jessie_5 = (let jessie_3 = ((shift !t) (0)) in
                        (let jessie_4 = (safe_int32_of_integer_ (1)) in
                        (((safe_upd_ int_P_int_M) ((shift !t) (0))) jessie_4))) in
        void);
       (C_6:
       begin
         (let jessie_8 = (let jessie_6 = ((shift !t) (1)) in
                         (let jessie_7 = (safe_int32_of_integer_ (2)) in
                         (((safe_upd_ int_P_int_M) ((shift !t) (1))) jessie_7))) in
         void);
        (C_8:
        begin
          (let jessie_11 = (let jessie_9 = ((shift !t) (2)) in
                           (let jessie_10 = (safe_int32_of_integer_ (3)) in
                           (((safe_upd_ int_P_int_M) ((shift !t) (2))) jessie_10))) in
          void);
         (C_10:
         begin
           (let jessie_12 = (__retres := ((safe_acc_ !int_P_int_M) ((shift !t) (2)))) in
           void);
          (C_11:
          begin
            ((free_parameter int_P_alloc_table) !t);
           (jessie_returned_value := !__retres);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_3: valid_u(u, int_P_alloc_table, u)) }

let g_ensures_default_1 =
 fun (tt : unit) ->
  { (JC_5: valid_u(u, int_P_alloc_table, u)) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t_0 = ref (any_pointer void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_14:
     begin
       (let jessie_38 = (let jessie_37 = (C_13:
                                         (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table)) in
                        (t_0 := (C_13:
                                (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table)))) in
       void);
      (C_16:
      begin
        (let jessie_41 = (let jessie_39 = ((shift !t_0) (0)) in
                         (let jessie_40 = (safe_int32_of_integer_ (1)) in
                         (((safe_upd_ int_P_int_M) ((shift !t_0) (0))) jessie_40))) in
        void);
       (C_18:
       begin
         (let jessie_44 = (let jessie_42 = ((shift !t_0) (1)) in
                          (let jessie_43 = (safe_int32_of_integer_ (2)) in
                          (((safe_upd_ int_P_int_M) ((shift !t_0) (1))) jessie_43))) in
         void);
        (C_20:
        begin
          (let jessie_47 = (let jessie_45 = ((shift !t_0) (2)) in
                           (let jessie_46 = (safe_int32_of_integer_ (3)) in
                           (((safe_upd_ int_P_int_M) ((shift !t_0) (2))) jessie_46))) in
          void);
         (C_22:
         begin
           (let jessie_48 = (__retres_0 := ((safe_acc_ !int_P_int_M) 
                                            ((shift !t_0) (2)))) in
           void);
          (C_23:
          begin
            ((free_parameter int_P_alloc_table) !t_0);
           (jessie_returned_value := !__retres_0);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_8:
     ((C_24: eq_int(integer_of_int32(result), (3)))
     and valid_u(u, int_P_alloc_table, u)))) }

let g_safety =
 fun (tt : unit) ->
  { (JC_5: valid_u(u, int_P_alloc_table, u)) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t_0 = ref (any_pointer void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_14:
     begin
       (let jessie_26 = (let jessie_25 = (C_13:
                                         (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table)) in
                        (assert
                        { ge_int(offset_max(int_P_alloc_table, jessie_25),
                          (2)) };
                        (t_0 := (C_13:
                                (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table))))) in
       void);
      (C_16:
      begin
        (let jessie_29 = (let jessie_27 = ((shift !t_0) (0)) in
                         (let jessie_28 = (safe_int32_of_integer_ (1)) in
                         (((safe_upd_ int_P_int_M) ((shift !t_0) (0))) jessie_28))) in
        void);
       (C_18:
       begin
         (let jessie_32 = (let jessie_30 = ((shift !t_0) (1)) in
                          (let jessie_31 = (safe_int32_of_integer_ (2)) in
                          (((safe_upd_ int_P_int_M) ((shift !t_0) (1))) jessie_31))) in
         void);
        (C_20:
        begin
          (let jessie_35 = (let jessie_33 = ((shift !t_0) (2)) in
                           (let jessie_34 = (safe_int32_of_integer_ (3)) in
                           (((safe_upd_ int_P_int_M) ((shift !t_0) (2))) jessie_34))) in
          void);
         (C_22:
         begin
           (let jessie_36 = (__retres_0 := ((safe_acc_ !int_P_int_M) 
                                            ((shift !t_0) (2)))) in
           void);
          (C_23:
          begin
            ((free_parameter int_P_alloc_table) !t_0);
           (jessie_returned_value := !__retres_0);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_7: valid_u(u, int_P_alloc_table, u)) }

let h_ensures_default_2 =
 fun (tt : unit) ->
  { (JC_9:
    ((C_38:
     eq_int(integer_of_int32(select(int_P_int_M, shift(u, (2)))), (12)))
    and valid_u(u, int_P_alloc_table, u))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t_1 = ref (any_pointer void) in
     (let __retres_1 = ref (any_int32 void) in
     (C_26:
     begin
       (let jessie_65 = (let jessie_64 = (C_25:
                                         (((alloc_int_P (4)) int_P_alloc_table) int_P_alloc_table)) in
                        (t_1 := (C_25:
                                (((alloc_int_P (4)) int_P_alloc_table) int_P_alloc_table)))) in
       void);
      (C_28:
      begin
        (let jessie_68 = (let jessie_66 = ((shift !t_1) (0)) in
                         (let jessie_67 = (safe_int32_of_integer_ (1)) in
                         (((safe_upd_ int_P_int_M) ((shift !t_1) (0))) jessie_67))) in
        void);
       (C_30:
       begin
         (let jessie_71 = (let jessie_69 = ((shift !t_1) (1)) in
                          (let jessie_70 = (safe_int32_of_integer_ (2)) in
                          (((safe_upd_ int_P_int_M) ((shift !t_1) (1))) jessie_70))) in
         void);
        (C_32:
        begin
          (let jessie_74 = (let jessie_72 = ((shift !t_1) (2)) in
                           (let jessie_73 = (safe_int32_of_integer_ (3)) in
                           (((safe_upd_ int_P_int_M) ((shift !t_1) (2))) jessie_73))) in
          void);
         (C_34:
         begin
           (let jessie_77 = (let jessie_75 = ((shift !t_1) (3)) in
                            (let jessie_76 = (safe_int32_of_integer_ (4)) in
                            (((safe_upd_ int_P_int_M) ((shift !t_1) (3))) jessie_76))) in
           void);
          (C_36:
          begin
            (let jessie_78 = (__retres_1 := ((safe_acc_ !int_P_int_M) 
                                             ((shift u) (2)))) in
            void);
           (C_37:
           begin
             ((free_parameter int_P_alloc_table) !t_1);
            (jessie_returned_value := !__retres_1);
            (raise Return)
           end)
          end)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_12:
     ((C_39: eq_int(integer_of_int32(result), (12)))
     and valid_u(u, int_P_alloc_table, u)))) }

let h_safety =
 fun (tt : unit) ->
  { (JC_9:
    ((C_38:
     eq_int(integer_of_int32(select(int_P_int_M, shift(u, (2)))), (12)))
    and valid_u(u, int_P_alloc_table, u))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t_1 = ref (any_pointer void) in
     (let __retres_1 = ref (any_int32 void) in
     (C_26:
     begin
       (let jessie_50 = (let jessie_49 = (C_25:
                                         (((alloc_int_P (4)) int_P_alloc_table) int_P_alloc_table)) in
                        (assert
                        { ge_int(offset_max(int_P_alloc_table, jessie_49),
                          (3)) };
                        (t_1 := (C_25:
                                (((alloc_int_P (4)) int_P_alloc_table) int_P_alloc_table))))) in
       void);
      (C_28:
      begin
        (let jessie_53 = (let jessie_51 = ((shift !t_1) (0)) in
                         (let jessie_52 = (safe_int32_of_integer_ (1)) in
                         (((safe_upd_ int_P_int_M) ((shift !t_1) (0))) jessie_52))) in
        void);
       (C_30:
       begin
         (let jessie_56 = (let jessie_54 = ((shift !t_1) (1)) in
                          (let jessie_55 = (safe_int32_of_integer_ (2)) in
                          (((safe_upd_ int_P_int_M) ((shift !t_1) (1))) jessie_55))) in
         void);
        (C_32:
        begin
          (let jessie_59 = (let jessie_57 = ((shift !t_1) (2)) in
                           (let jessie_58 = (safe_int32_of_integer_ (3)) in
                           (((safe_upd_ int_P_int_M) ((shift !t_1) (2))) jessie_58))) in
          void);
         (C_34:
         begin
           (let jessie_62 = (let jessie_60 = ((shift !t_1) (3)) in
                            (let jessie_61 = (safe_int32_of_integer_ (4)) in
                            (((safe_upd_ int_P_int_M) ((shift !t_1) (3))) jessie_61))) in
           void);
          (C_36:
          begin
            (let jessie_63 = (__retres_1 := ((safe_acc_ !int_P_int_M) 
                                             ((shift u) (2)))) in
            void);
           (C_37:
           begin
             ((free_parameter int_P_alloc_table) !t_1);
            (jessie_returned_value := !__retres_1);
            (raise Return)
           end)
          end)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_11: valid_u(u, int_P_alloc_table, u)) }

let two_local_arrays_ensures_default_3 =
 fun (tt : unit) ->
  { (JC_13: valid_u(u, int_P_alloc_table, u)) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t_2 = ref (any_pointer void) in
     (let u_0 = ref (any_pointer void) in
     (let __retres_2 = ref (any_int32 void) in
     (C_41:
     begin
       (let jessie_112 = (let jessie_111 = (C_40:
                                           (((alloc_int_P (4)) int_P_alloc_table) int_P_alloc_table)) in
                         (t_2 := (C_40:
                                 (((alloc_int_P (4)) int_P_alloc_table) int_P_alloc_table)))) in
       void);
      (C_43:
      begin
        (let jessie_114 = (let jessie_113 = (C_42:
                                            (((alloc_int_P (5)) int_P_alloc_table) int_P_alloc_table)) in
                          (u_0 := (C_42:
                                  (((alloc_int_P (5)) int_P_alloc_table) int_P_alloc_table)))) in
        void);
       (C_45:
       begin
         (let jessie_117 = (let jessie_115 = ((shift !t_2) (0)) in
                           (let jessie_116 = (safe_int32_of_integer_ (1)) in
                           (((safe_upd_ int_P_int_M) ((shift !t_2) (0))) jessie_116))) in
         void);
        (C_47:
        begin
          (let jessie_120 = (let jessie_118 = ((shift !t_2) (1)) in
                            (let jessie_119 = (safe_int32_of_integer_ (2)) in
                            (((safe_upd_ int_P_int_M) ((shift !t_2) (1))) jessie_119))) in
          void);
         (C_49:
         begin
           (let jessie_123 = (let jessie_121 = ((shift !t_2) (2)) in
                             (let jessie_122 = (safe_int32_of_integer_ (3)) in
                             (((safe_upd_ int_P_int_M) ((shift !t_2) (2))) jessie_122))) in
           void);
          (C_51:
          begin
            (let jessie_126 = (let jessie_124 = ((shift !t_2) (3)) in
                              (let jessie_125 = (safe_int32_of_integer_ (4)) in
                              (((safe_upd_ int_P_int_M) ((shift !t_2) (3))) jessie_125))) in
            void);
           (C_53:
           begin
             (let jessie_129 = (let jessie_127 = ((shift !u_0) (0)) in
                               (let jessie_128 = (safe_int32_of_integer_ (0)) in
                               (((safe_upd_ int_P_int_M) ((shift !u_0) (0))) jessie_128))) in
             void);
            void;
            void
           end);
           (C_55:
           begin
             (let jessie_132 = (let jessie_130 = ((shift !u_0) (1)) in
                               (let jessie_131 = (safe_int32_of_integer_ (0)) in
                               (((safe_upd_ int_P_int_M) ((shift !u_0) (1))) jessie_131))) in
             void);
            void;
            void
           end);
           (C_58:
           begin
             (let jessie_135 = (let jessie_133 = ((shift !u_0) (2)) in
                               (let jessie_134 = ((safe_acc_ !int_P_int_M) 
                                                  ((shift !t_2) (2))) in
                               (((safe_upd_ int_P_int_M) ((shift !u_0) (2))) jessie_134))) in
             void);
            (C_60:
            begin
              (let jessie_138 = (let jessie_136 = ((shift !u_0) (3)) in
                                (let jessie_137 = (safe_int32_of_integer_ (0)) in
                                (((safe_upd_ int_P_int_M) ((shift !u_0) (3))) jessie_137))) in
              void);
             void;
             void
            end);
            (C_62:
            begin
              (let jessie_141 = (let jessie_139 = ((shift !u_0) (4)) in
                                (let jessie_140 = (safe_int32_of_integer_ (0)) in
                                (((safe_upd_ int_P_int_M) ((shift !u_0) (4))) jessie_140))) in
              void);
             void;
             void
            end);
            (C_64:
            begin
              (let jessie_142 = (__retres_2 := ((safe_acc_ !int_P_int_M) 
                                                ((shift !u_0) (2)))) in
              void);
             (C_65:
             begin
               ((free_parameter int_P_alloc_table) !t_2);
              (C_66:
              begin
                ((free_parameter int_P_alloc_table) !u_0);
               (jessie_returned_value := !__retres_2);
               (raise Return)
              end)
             end)
            end)
           end)
          end)
         end)
        end)
       end)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_16:
     ((C_67: eq_int(integer_of_int32(result), (3)))
     and valid_u(u, int_P_alloc_table, u)))) }

let two_local_arrays_not_alias_ensures_default_4 =
 fun (tt : unit) ->
  { (JC_17: valid_u(u, int_P_alloc_table, u)) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t_3 = ref (any_pointer void) in
     (let v = ref (any_pointer void) in
     (let __retres_3 = ref (any_int32 void) in
     (C_69:
     begin
       (let jessie_155 = (let jessie_154 = (C_68:
                                           (((alloc_int_P (5)) int_P_alloc_table) int_P_alloc_table)) in
                         (t_3 := (C_68:
                                 (((alloc_int_P (5)) int_P_alloc_table) int_P_alloc_table)))) in
       void);
      (C_71:
      begin
        (let jessie_157 = (let jessie_156 = (C_70:
                                            (((alloc_int_P (6)) int_P_alloc_table) int_P_alloc_table)) in
                          (v := (C_70:
                                (((alloc_int_P (6)) int_P_alloc_table) int_P_alloc_table)))) in
        void);
       (C_73:
       begin
         (let jessie_160 = (let jessie_158 = ((shift !t_3) (4)) in
                           (let jessie_159 = (safe_int32_of_integer_ (3)) in
                           (((safe_upd_ int_P_int_M) ((shift !t_3) (4))) jessie_159))) in
         void);
        (C_75:
        begin
          (let jessie_163 = (let jessie_161 = ((shift !v) (4)) in
                            (let jessie_162 = (safe_int32_of_integer_ (1)) in
                            (((safe_upd_ int_P_int_M) ((shift !v) (4))) jessie_162))) in
          void);
         (C_77:
         begin
           (let jessie_164 = (__retres_3 := ((safe_acc_ !int_P_int_M) 
                                             ((shift !t_3) (4)))) in
           void);
          (C_78:
          begin
            ((free_parameter int_P_alloc_table) !t_3);
           (C_79:
           begin
             ((free_parameter int_P_alloc_table) !v);
            (jessie_returned_value := !__retres_3);
            (raise Return)
           end)
          end)
         end)
        end)
       end)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_20:
     ((C_80: eq_int(integer_of_int32(result), (3)))
     and valid_u(u, int_P_alloc_table, u)))) }

let two_local_arrays_not_alias_safety =
 fun (tt : unit) ->
  { (JC_17: valid_u(u, int_P_alloc_table, u)) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t_3 = ref (any_pointer void) in
     (let v = ref (any_pointer void) in
     (let __retres_3 = ref (any_int32 void) in
     (C_69:
     begin
       (let jessie_144 = (let jessie_143 = (C_68:
                                           (((alloc_int_P (5)) int_P_alloc_table) int_P_alloc_table)) in
                         (assert
                         { ge_int(offset_max(int_P_alloc_table, jessie_143),
                           (4)) };
                         (t_3 := (C_68:
                                 (((alloc_int_P (5)) int_P_alloc_table) int_P_alloc_table))))) in
       void);
      (C_71:
      begin
        (let jessie_146 = (let jessie_145 = (C_70:
                                            (((alloc_int_P (6)) int_P_alloc_table) int_P_alloc_table)) in
                          (assert
                          { ge_int(offset_max(int_P_alloc_table, jessie_145),
                            (5)) };
                          (v := (C_70:
                                (((alloc_int_P (6)) int_P_alloc_table) int_P_alloc_table))))) in
        void);
       (C_73:
       begin
         (let jessie_149 = (let jessie_147 = ((shift !t_3) (4)) in
                           (let jessie_148 = (safe_int32_of_integer_ (3)) in
                           (((safe_upd_ int_P_int_M) ((shift !t_3) (4))) jessie_148))) in
         void);
        (C_75:
        begin
          (let jessie_152 = (let jessie_150 = ((shift !v) (4)) in
                            (let jessie_151 = (safe_int32_of_integer_ (1)) in
                            (((safe_upd_ int_P_int_M) ((shift !v) (4))) jessie_151))) in
          void);
         (C_77:
         begin
           (let jessie_153 = (__retres_3 := ((safe_acc_ !int_P_int_M) 
                                             ((shift !t_3) (4)))) in
           void);
          (C_78:
          begin
            ((free_parameter int_P_alloc_table) !t_3);
           (C_79:
           begin
             ((free_parameter int_P_alloc_table) !v);
            (jessie_returned_value := !__retres_3);
            (raise Return)
           end)
          end)
         end)
        end)
       end)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_19: valid_u(u, int_P_alloc_table, u)) }

let two_local_arrays_safety =
 fun (tt : unit) ->
  { (JC_13: valid_u(u, int_P_alloc_table, u)) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t_2 = ref (any_pointer void) in
     (let u_0 = ref (any_pointer void) in
     (let __retres_2 = ref (any_int32 void) in
     (C_41:
     begin
       (let jessie_80 = (let jessie_79 = (C_40:
                                         (((alloc_int_P (4)) int_P_alloc_table) int_P_alloc_table)) in
                        (assert
                        { ge_int(offset_max(int_P_alloc_table, jessie_79),
                          (3)) };
                        (t_2 := (C_40:
                                (((alloc_int_P (4)) int_P_alloc_table) int_P_alloc_table))))) in
       void);
      (C_43:
      begin
        (let jessie_82 = (let jessie_81 = (C_42:
                                          (((alloc_int_P (5)) int_P_alloc_table) int_P_alloc_table)) in
                         (assert
                         { ge_int(offset_max(int_P_alloc_table, jessie_81),
                           (4)) };
                         (u_0 := (C_42:
                                 (((alloc_int_P (5)) int_P_alloc_table) int_P_alloc_table))))) in
        void);
       (C_45:
       begin
         (let jessie_85 = (let jessie_83 = ((shift !t_2) (0)) in
                          (let jessie_84 = (safe_int32_of_integer_ (1)) in
                          (((safe_upd_ int_P_int_M) ((shift !t_2) (0))) jessie_84))) in
         void);
        (C_47:
        begin
          (let jessie_88 = (let jessie_86 = ((shift !t_2) (1)) in
                           (let jessie_87 = (safe_int32_of_integer_ (2)) in
                           (((safe_upd_ int_P_int_M) ((shift !t_2) (1))) jessie_87))) in
          void);
         (C_49:
         begin
           (let jessie_91 = (let jessie_89 = ((shift !t_2) (2)) in
                            (let jessie_90 = (safe_int32_of_integer_ (3)) in
                            (((safe_upd_ int_P_int_M) ((shift !t_2) (2))) jessie_90))) in
           void);
          (C_51:
          begin
            (let jessie_94 = (let jessie_92 = ((shift !t_2) (3)) in
                             (let jessie_93 = (safe_int32_of_integer_ (4)) in
                             (((safe_upd_ int_P_int_M) ((shift !t_2) (3))) jessie_93))) in
            void);
           (C_53:
           begin
             (let jessie_97 = (let jessie_95 = ((shift !u_0) (0)) in
                              (let jessie_96 = (safe_int32_of_integer_ (0)) in
                              (((safe_upd_ int_P_int_M) ((shift !u_0) (0))) jessie_96))) in
             void);
            void;
            void
           end);
           (C_55:
           begin
             (let jessie_100 = (let jessie_98 = ((shift !u_0) (1)) in
                               (let jessie_99 = (safe_int32_of_integer_ (0)) in
                               (((safe_upd_ int_P_int_M) ((shift !u_0) (1))) jessie_99))) in
             void);
            void;
            void
           end);
           (C_58:
           begin
             (let jessie_103 = (let jessie_101 = ((shift !u_0) (2)) in
                               (let jessie_102 = ((safe_acc_ !int_P_int_M) 
                                                  ((shift !t_2) (2))) in
                               (((safe_upd_ int_P_int_M) ((shift !u_0) (2))) jessie_102))) in
             void);
            (C_60:
            begin
              (let jessie_106 = (let jessie_104 = ((shift !u_0) (3)) in
                                (let jessie_105 = (safe_int32_of_integer_ (0)) in
                                (((safe_upd_ int_P_int_M) ((shift !u_0) (3))) jessie_105))) in
              void);
             void;
             void
            end);
            (C_62:
            begin
              (let jessie_109 = (let jessie_107 = ((shift !u_0) (4)) in
                                (let jessie_108 = (safe_int32_of_integer_ (0)) in
                                (((safe_upd_ int_P_int_M) ((shift !u_0) (4))) jessie_108))) in
              void);
             void;
             void
            end);
            (C_64:
            begin
              (let jessie_110 = (__retres_2 := ((safe_acc_ !int_P_int_M) 
                                                ((shift !u_0) (2)))) in
              void);
             (C_65:
             begin
               ((free_parameter int_P_alloc_table) !t_2);
              (C_66:
              begin
                ((free_parameter int_P_alloc_table) !u_0);
               (jessie_returned_value := !__retres_2);
               (raise Return)
              end)
             end)
            end)
           end)
          end)
         end)
        end)
       end)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_15: valid_u(u, int_P_alloc_table, u)) }


