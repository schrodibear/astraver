rm -f addrof_param.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only addrof_param.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs addrof_param.cloc addrof_param.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{ { (C_2: { ((C_1: p.int_M) = i); (return) }) }
}

Normalized expression:
(C_3: ((C_4: ((\offset_min(p)) <= 0)) && (C_5: ((\offset_max(p)) >= 0))))

Normalized expression:
(C_6: (p.int_M == (TODO old)))

Normalized expression:
true

Normalized expression:
{
(let int_P[0] i in
   {
   {
     (C_8:
        {
        (i = (C_7: (TODO alloc)));
          (C_10:
             {
             ((C_9: i.int_M) = v_i);
               (C_12:
                  {
                  gi{}(i, (C_11: i.int_M));
                    {
                    (C_13: { (TODO free); (return (C_14: i.int_M)) })
                    }
                  })
             })
        })
     }
   })
}

Normalized expression:
(C_15: (\result == 0))

Normalized expression:
(v_i == 0)

Normalized expression:
{
{
  (C_19:
     {
     ((C_18: (C_17: p.int_xM).int_M) = (C_16: i.int_M));
       (C_21: { ((C_20: p.int_xM) = i); (return) })
     })
  }
}

Normalized expression:
(C_22:
   ((((C_25: ((\offset_min(p)) <= 0)) && (C_26: ((\offset_max(p)) >= 0))) &&
       ((C_28: ((\offset_min(p.int_xM)) <= 0)) &&
          (C_29: ((\offset_max(p.int_xM)) >= 0)))) &&
      ((C_31: ((\offset_min(i)) <= 0)) && (C_32: ((\offset_max(i)) >= 0)))))

Normalized expression:
(C_33:
   ((C_34: (p.int_xM.int_M == (TODO old))) &&
      (C_35: ((p.int_xM - (TODO old)) == 0))))

Normalized expression:
true

Normalized expression:
{
(let int_xP[0] p in
   {
   {
     (C_37:
        {
        (p = (C_36: (TODO alloc)));
          (C_39:
             {
             ((C_38: p.int_xM) = v_p);
               (C_41:
                  {
                  gp{}(p, (C_40: p.int_xM));
                    {
                    (assert (C_42: (i == 0))); ()
                    };
                    (C_45:
                       {
                       ((C_44: (C_43: p.int_xM).int_M) = 0);
                         {
                         (C_46: { (TODO free); (return i) })
                         }
                       })
                  })
             })
        })
     }
   })
}

Normalized expression:
(C_47: (\result == 0))

Normalized expression:
((i == 0) && (((\offset_min(v_p)) <= 0) && ((\offset_max(v_p)) >= 0)))

Generating Why function gi
Generating Why function fi
Generating Why function gp
Generating Why function fp
cat why/addrof_param.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type int_xP

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

logic int_xP_tag:  -> int_xP tag_id

axiom int_xP_int : (int_of_tag(int_xP_tag) = (1))

axiom int_xP_parenttag_bottom : parenttag(int_xP_tag, bottom_tag)

axiom int_xP_tags :
 (forall x:int_xP pointer.
  (forall int_xP_tag_table:int_xP tag_table.
   instanceof(int_xP_tag_table, x, int_xP_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_7:int32.
    ((le_int((0), integer_of_int32(i_7))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_7)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_7)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_8:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_8))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_8)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_8), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and lt_int(integer_of_int32(i_2),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i_2)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and (le_int(integer_of_int32(i_3),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_3)))),
             (0)))) ->
     lt_int(integer_of_int32(i_3),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_6:int32.
    ((le_int((0), integer_of_int32(i_6))
     and le_int(integer_of_int32(i_6),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_6)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_6)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_5:int32.
    ((le_int((0), integer_of_int32(i_5))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_5)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_5)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and (le_int(integer_of_int32(i_4),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_4)))),
             (0)))) ->
     eq_int(integer_of_int32(i_4),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_struct_int_xP(p:int_xP pointer,
 a:int,
 b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) = a)
 and (offset_max(int_xP_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_int_xP(p:int_xP pointer,
 a:int,
 b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) = a)
 and (offset_max(int_xP_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter int_xP_alloc_table : int_xP alloc_table ref

parameter int_xP_tag_table : int_xP tag_table ref

parameter alloc_int_xP :
 n:int ->
  int_xP_alloc_table:int_xP alloc_table ref ->
   int_xP_alloc_table:int_xP alloc_table ref ->
    { ge_int(n, (0))} int_xP pointer reads int_xP_alloc_table
    writes int_xP_alloc_table,int_xP_tag_table
    { (valid_struct_int_xP(result, (0), sub_int(n, (1)), int_xP_alloc_table)
      and (instanceof(int_xP_tag_table, result, int_xP_tag)
          and (alloc_extends(int_xP_alloc_table@, int_xP_alloc_table)
              and alloc_extern(int_xP_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_int_xP :
 tt:unit ->
  int_xP_alloc_table:int_xP alloc_table ref ->
   int_xP_alloc_table:int_xP alloc_table ref ->
    { } int_xP pointer reads int_xP_alloc_table
    writes int_xP_alloc_table,int_xP_tag_table
    { (valid_struct_int_xP(result, (0), (0), int_xP_alloc_table)
      and (instanceof(int_xP_tag_table, result, int_xP_tag)
          and (alloc_extends(int_xP_alloc_table@, int_xP_alloc_table)
              and alloc_extern(int_xP_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int_P_int_M : (int_P, int32) memory ref

parameter fi :
 v_i:int32 ->
  { (JC_4: true)} int32 reads int_P_alloc_table,int_P_int_M,int_P_tag_table
  writes int_P_alloc_table,int_P_int_M,int_P_tag_table
  { (eq_int(integer_of_int32(v_i), (0)) ->
     (C_15: eq_int(integer_of_int32(result), (0)))) }

parameter int_xP_int_xM : (int_xP, int_P pointer) memory ref

parameter fp :
 i_1:int32 ->
  v_p:int_P pointer ->
   { (JC_13: true)} int32
   reads int_P_alloc_table,int_P_int_M,int_P_tag_table,int_xP_alloc_table,int_xP_int_xM,int_xP_tag_table
   writes int_P_int_M,int_xP_alloc_table,int_xP_int_xM,int_xP_tag_table
   { ((eq_int(integer_of_int32(i_1), (0))
      and (le_int(offset_min(int_P_alloc_table, v_p), (0))
          and ge_int(offset_max(int_P_alloc_table, v_p), (0)))) ->
      (C_47: eq_int(integer_of_int32(result), (0)))) }

parameter gi :
 p:int_P pointer ->
  i:int32 ->
   { (C_3:
     ((C_4: le_int(offset_min(int_P_alloc_table, p), (0)))
     and (C_5: ge_int(offset_max(int_P_alloc_table, p), (0)))))}
   unit reads int_P_alloc_table,int_P_int_M,int_P_tag_table
   writes int_P_int_M
   { ((true = true) ->
      (C_6:
      eq_int(integer_of_int32(select(int_P_int_M, p)), integer_of_int32(i)))) }

parameter gp :
 p_0:int_xP pointer ->
  i_0:int_P pointer ->
   { (C_22:
     ((C_25: le_int(offset_min(int_xP_alloc_table, p_0), (0)))
     and ((C_26: ge_int(offset_max(int_xP_alloc_table, p_0), (0)))
         and ((C_28:
              le_int(offset_min(int_P_alloc_table,
                     select(int_xP_int_xM, p_0)),
              (0)))
             and ((C_29:
                  ge_int(offset_max(int_P_alloc_table,
                         select(int_xP_int_xM, p_0)),
                  (0)))
                 and ((C_31: le_int(offset_min(int_P_alloc_table, i_0), (0)))
                     and (C_32:
                         ge_int(offset_max(int_P_alloc_table, i_0), (0)))))))))}
   unit
   reads int_P_alloc_table,int_P_int_M,int_P_tag_table,int_xP_alloc_table,int_xP_int_xM,int_xP_tag_table
   writes int_P_int_M,int_xP_int_xM
   { ((true = true) ->
      (C_33:
      ((C_34:
       eq_int(integer_of_int32(select(int_P_int_M,
                               select(int_xP_int_xM, p_0))),
       integer_of_int32(select(int_P_int_M@, i_0))))
      and (C_35: eq_int(sub_pointer(select(int_xP_int_xM, p_0), i_0), (0)))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let fi_ensures_zero =
 fun (v_i : int32) ->
  { (JC_5: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let i_9 = ref (any_pointer void) in
     (C_8:
     begin
       (let jessie_14 = (let jessie_13 = (C_7:
                                         (((alloc_one_int_P void) int_P_alloc_table) int_P_alloc_table)) in
                        (i_9 := (C_7:
                                (((alloc_one_int_P void) int_P_alloc_table) int_P_alloc_table)))) in
       void);
      (C_10:
      begin
        (let jessie_17 = (let jessie_15 = !i_9 in
                         (let jessie_16 = v_i in
                         (((safe_upd_ int_P_int_M) !i_9) jessie_16))) in
        void);
       (C_12:
       begin
         (JC_8: ((gi !i_9) ((safe_acc_ !int_P_int_M) !i_9)));
        (C_13:
        begin
          ((free_parameter int_P_alloc_table) !i_9);
         (jessie_returned_value := ((safe_acc_ !int_P_int_M) !i_9));
         (raise Return)
        end)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (eq_int(integer_of_int32(v_i), (0)) ->
     (C_15: eq_int(integer_of_int32(result), (0)))) }

let fi_safety =
 fun (v_i : int32) ->
  { (JC_5: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let i_9 = ref (any_pointer void) in
     (C_8:
     begin
       (let jessie_8 = (let jessie_7 = (C_7:
                                       (((alloc_one_int_P void) int_P_alloc_table) int_P_alloc_table)) in
                       (assert
                       { ge_int(offset_max(int_P_alloc_table, jessie_7), (0)) };
                       (i_9 := (C_7:
                               (((alloc_one_int_P void) int_P_alloc_table) int_P_alloc_table))))) in
       void);
      (C_10:
      begin
        (let jessie_11 = (let jessie_9 = !i_9 in
                         (let jessie_10 = v_i in
                         (((safe_upd_ int_P_int_M) !i_9) jessie_10))) in
        void);
       (C_12:
       begin
         (JC_7: ((gi !i_9) ((safe_acc_ !int_P_int_M) !i_9)));
        (C_13:
        begin
          ((free_parameter int_P_alloc_table) !i_9);
         (jessie_returned_value := ((safe_acc_ !int_P_int_M) !i_9));
         (raise Return)
        end)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let fp_ensures_zero_1 =
 fun (i_1 : int32) (v_p : int_P pointer) ->
  { (JC_14: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let p_1 = ref (any_pointer void) in
     (C_37:
     begin
       (let jessie_45 = (let jessie_44 = (C_36:
                                         (((alloc_one_int_xP void) int_xP_alloc_table) int_xP_alloc_table)) in
                        (p_1 := (C_36:
                                (((alloc_one_int_xP void) int_xP_alloc_table) int_xP_alloc_table)))) in
       void);
      (C_39:
      begin
        (let jessie_49 = (let jessie_46 = !p_1 in
                         (let jessie_47 = v_p in
                         (((safe_upd_ int_xP_int_xM) !p_1) jessie_47))) in
        void);
       (C_41:
       begin
         (JC_18: ((gp !p_1) ((safe_acc_ !int_xP_int_xM) !p_1)));
        (assert { (C_42: eq_int(integer_of_int32(i_1), (0))) }; void);
        void;
        (C_45:
        begin
          (let jessie_54 = (let jessie_52 = ((safe_acc_ !int_xP_int_xM) !p_1) in
                           (let jessie_53 = (safe_int32_of_integer_ (0)) in
                           (((safe_upd_ int_P_int_M) ((safe_acc_ !int_xP_int_xM) !p_1)) jessie_53))) in
          void);
         (C_46:
         begin
           ((free_parameter int_xP_alloc_table) !p_1);
          (jessie_returned_value := i_1);
          (raise Return)
         end)
        end)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((eq_int(integer_of_int32(i_1), (0))
     and (le_int(offset_min(int_P_alloc_table, v_p), (0))
         and ge_int(offset_max(int_P_alloc_table, v_p), (0)))) ->
     (C_47: eq_int(integer_of_int32(result), (0)))) }

let fp_safety =
 fun (i_1 : int32) (v_p : int_P pointer) ->
  { (JC_14: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let p_1 = ref (any_pointer void) in
     (C_37:
     begin
       (let jessie_34 = (let jessie_33 = (C_36:
                                         (((alloc_one_int_xP void) int_xP_alloc_table) int_xP_alloc_table)) in
                        (assert
                        { ge_int(offset_max(int_xP_alloc_table, jessie_33),
                          (0)) };
                        (p_1 := (C_36:
                                (((alloc_one_int_xP void) int_xP_alloc_table) int_xP_alloc_table))))) in
       void);
      (C_39:
      begin
        (let jessie_38 = (let jessie_35 = !p_1 in
                         (let jessie_36 = v_p in
                         (((safe_upd_ int_xP_int_xM) !p_1) jessie_36))) in
        void);
       (C_41:
       begin
         (JC_16: ((gp !p_1) ((safe_acc_ !int_xP_int_xM) !p_1)));
        (assert { (C_42: eq_int(integer_of_int32(i_1), (0))) }; void);
        void;
        (C_45:
        begin
          (let jessie_43 = (let jessie_41 = ((safe_acc_ !int_xP_int_xM) !p_1) in
                           (let jessie_42 = (safe_int32_of_integer_ (0)) in
                           (JC_17:
                           ((((upd_ !int_P_alloc_table) int_P_int_M) 
                             ((safe_acc_ !int_xP_int_xM) !p_1)) jessie_42)))) in
          void);
         (C_46:
         begin
           ((free_parameter int_xP_alloc_table) !p_1);
          (jessie_returned_value := i_1);
          (raise Return)
         end)
        end)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let gi_ensures_default =
 fun (p : int_P pointer) (i : int32) ->
  { (C_3:
    ((C_4: le_int(offset_min(int_P_alloc_table, p), (0)))
    and (C_5: ge_int(offset_max(int_P_alloc_table, p), (0))))) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_6 = (let jessie_4 = p in
                       (let jessie_5 = i in
                       (((safe_upd_ int_P_int_M) p) jessie_5))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (C_6:
     eq_int(integer_of_int32(select(int_P_int_M, p)), integer_of_int32(i)))) }

let gi_safety =
 fun (p : int_P pointer) (i : int32) ->
  { (C_3:
    ((C_4: le_int(offset_min(int_P_alloc_table, p), (0)))
    and (C_5: ge_int(offset_max(int_P_alloc_table, p), (0))))) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_3 = (let jessie_1 = p in
                       (let jessie_2 = i in
                       (JC_3:
                       ((((upd_ !int_P_alloc_table) int_P_int_M) p) jessie_2)))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let gp_ensures_default_1 =
 fun (p_0 : int_xP pointer) (i_0 : int_P pointer) ->
  { (C_22:
    ((C_25: le_int(offset_min(int_xP_alloc_table, p_0), (0)))
    and ((C_26: ge_int(offset_max(int_xP_alloc_table, p_0), (0)))
        and ((C_28:
             le_int(offset_min(int_P_alloc_table, select(int_xP_int_xM, p_0)),
             (0)))
            and ((C_29:
                 ge_int(offset_max(int_P_alloc_table,
                        select(int_xP_int_xM, p_0)),
                 (0)))
                and ((C_31: le_int(offset_min(int_P_alloc_table, i_0), (0)))
                    and (C_32:
                        ge_int(offset_max(int_P_alloc_table, i_0), (0))))))))) }
  (init:
  try
   begin
     (C_19:
     begin
       (let jessie_28 = (let jessie_26 = ((safe_acc_ !int_xP_int_xM) p_0) in
                        (let jessie_27 = ((safe_acc_ !int_P_int_M) i_0) in
                        (((safe_upd_ int_P_int_M) ((safe_acc_ !int_xP_int_xM) p_0)) jessie_27))) in
       void);
      (C_21:
      begin
        (let jessie_32 = (let jessie_29 = p_0 in
                         (let jessie_30 = i_0 in
                         (((safe_upd_ int_xP_int_xM) p_0) jessie_30))) in
        void);
       (raise Return)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (C_33:
     ((C_34:
      eq_int(integer_of_int32(select(int_P_int_M, select(int_xP_int_xM, p_0))),
      integer_of_int32(select(int_P_int_M@, i_0))))
     and (C_35: eq_int(sub_pointer(select(int_xP_int_xM, p_0), i_0), (0)))))) }

let gp_safety =
 fun (p_0 : int_xP pointer) (i_0 : int_P pointer) ->
  { (C_22:
    ((C_25: le_int(offset_min(int_xP_alloc_table, p_0), (0)))
    and ((C_26: ge_int(offset_max(int_xP_alloc_table, p_0), (0)))
        and ((C_28:
             le_int(offset_min(int_P_alloc_table, select(int_xP_int_xM, p_0)),
             (0)))
            and ((C_29:
                 ge_int(offset_max(int_P_alloc_table,
                        select(int_xP_int_xM, p_0)),
                 (0)))
                and ((C_31: le_int(offset_min(int_P_alloc_table, i_0), (0)))
                    and (C_32:
                        ge_int(offset_max(int_P_alloc_table, i_0), (0))))))))) }
  (init:
  try
   begin
     (C_19:
     begin
       (let jessie_21 = (let jessie_19 = (C_17:
                                         (((acc_ !int_xP_alloc_table) !int_xP_int_xM) p_0)) in
                        (let jessie_20 = (C_16:
                                         (((acc_ !int_P_alloc_table) !int_P_int_M) i_0)) in
                        (JC_11:
                        ((((upd_ !int_P_alloc_table) int_P_int_M) (C_17:
                                                                  (((acc_ !int_xP_alloc_table) !int_xP_int_xM) p_0))) jessie_20)))) in
       void);
      (C_21:
      begin
        (let jessie_25 = (let jessie_22 = p_0 in
                         (let jessie_23 = i_0 in
                         (JC_12:
                         ((((upd_ !int_xP_alloc_table) int_xP_int_xM) p_0) jessie_23)))) in
        void);
       (raise Return)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


