rm -f string_basic.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only string_basic.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs string_basic.cloc string_basic.jc
Normalized expression:
(((\offset_min(gtoto)) <= 0) && ((\offset_max(gtoto)) >= 4))

Normalized expression:
(((\offset_min(__string_toto)) <= 0) && ((\offset_max(__string_toto)) >= 4))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let int32 __retres in
   {
   (try {
      (TODO if); (C_5: { (__retres = 0) })
      } with
      | Goto_return_label jessie_1 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_6: ((C_7: ((\offset_min(p)) <= i)) && (C_8: ((\offset_max(p)) >= i))))

Normalized expression:
(C_9: (\result == 1))

Normalized expression:
((p + i).char_M == 0)

Normalized expression:
(C_10: (\result == 0))

Normalized expression:
((p + i).char_M != 0)

Normalized expression:
{
(let int32 r1 in
   {
   {
     (C_12:
        {
        (r1 = (C_11: endsat{}(gtoto, 4)));
          {
          (assert (C_13: (r1 == 1))); ()
          };
          (return)
        })
     }
   })
}

Normalized expression:
{
(let char_P[0..4] ltoto in
   {
   (let int32 r1 in
      {
      {
        (C_15:
           {
           (ltoto = (C_14: (TODO alloc)));
             (C_17:
                {
                ((C_16: (ltoto + 0).char_M) = 116);
                  (C_19:
                     {
                     ((C_18: (ltoto + 1).char_M) = 111);
                       (C_21:
                          {
                          ((C_20: (ltoto + 2).char_M) = 116);
                            (C_23:
                               {
                               ((C_22: (ltoto + 3).char_M) = 111);
                                 {
                                 (C_25:
                                    {
                                    ((C_24: (ltoto + 4).char_M) = 0); (); ()
                                    })
                                 };
                                 (C_27:
                                    {
                                    (r1 = (C_26: endsat{}(ltoto, 4)));
                                      {
                                      (assert (C_28: (r1 == 1))); ()
                                      };
                                      {
                                      (C_29: { (TODO free); (return) })
                                      }
                                    })
                               })
                          })
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
{
(let int32 r1 in
   {
   {
     (C_31:
        {
        (r1 = (C_30: endsat{}(gptoto, 4)));
          {
          (assert (C_32: (r1 == 1))); ()
          };
          (return)
        })
     }
   })
}

Normalized expression:
{
(let char_P[..] lptoto in
   {
   (let int32 r1 in
      {
      {
        (C_33:
           {
           (lptoto = __string_toto);
             (C_35:
                {
                (r1 = (C_34: endsat{}(lptoto, 4)));
                  {
                  (assert (C_36: (r1 == 1))); ()
                  };
                  (return)
                })
           })
        }
      })
   })
}

Generating Why function endsat
Generating Why function test1
Generating Why function test2
Generating Why function test1ptr
Generating Why function test2ptr
cat why/string_basic.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type uint16

type uint32

type uint64

type uint8

type void_P

exception Goto_return_label_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic __string_toto:  -> char_P pointer

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic gptoto:  -> char_P pointer

logic gtoto:  -> char_P pointer

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_5:int32.
    ((le_int((0), integer_of_int32(i_5))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_5)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_5)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_6:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_6))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_6)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_6), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and lt_int(integer_of_int32(i_0),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i_0)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_1)))),
             (0)))) ->
     lt_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and le_int(integer_of_int32(i_4),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_4)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_4)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_3)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_3)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and (le_int(integer_of_int32(i_2),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_2)))),
             (0)))) ->
     eq_int(integer_of_int32(i_2),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid___string_toto(__string_toto:char_P pointer,
 char_P_alloc_table:char_P alloc_table,
 gptoto:char_P pointer,
 gtoto:char_P pointer,
 __string_toto:char_P pointer) =
 (le_int(offset_min(char_P_alloc_table, __string_toto), (0))
 and ge_int(offset_max(char_P_alloc_table, __string_toto), (4)))

predicate valid_gtoto(gtoto:char_P pointer,
 char_P_alloc_table:char_P alloc_table,
 gptoto:char_P pointer,
 gtoto:char_P pointer,
 __string_toto:char_P pointer) =
 (le_int(offset_min(char_P_alloc_table, gtoto), (0))
 and ge_int(offset_max(char_P_alloc_table, gtoto), (4)))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter endsat :
 p:char_P pointer ->
  i:int32 ->
   { (JC_1:
     ((C_6:
      ((C_7: le_int(offset_min(char_P_alloc_table, p), integer_of_int32(i)))
      and (C_8:
          ge_int(offset_max(char_P_alloc_table, p), integer_of_int32(i)))))
     and (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto,
          __string_toto)
         and valid___string_toto(__string_toto, char_P_alloc_table, gptoto,
             gtoto, __string_toto))))}
   int32 reads char_P_alloc_table,char_P_char_M,char_P_tag_table
   { ((JC_3:
      (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
      and valid___string_toto(__string_toto, char_P_alloc_table, gptoto,
          gtoto, __string_toto)))
     and ((neq_int(integer_of_int8(select(char_P_char_M,
                                   shift(p, integer_of_int32(i)))),
           (0)) ->
           (JC_5:
           ((C_10: eq_int(integer_of_int32(result), (0)))
           and (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto,
                __string_toto)
               and valid___string_toto(__string_toto, char_P_alloc_table,
                   gptoto, gtoto, __string_toto)))))
         and (eq_int(integer_of_int8(select(char_P_char_M,
                                     shift(p, integer_of_int32(i)))),
              (0)) ->
              (JC_4:
              ((C_9: eq_int(integer_of_int32(result), (1)))
              and (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto,
                   __string_toto)
                  and valid___string_toto(__string_toto, char_P_alloc_table,
                      gptoto, gtoto, __string_toto))))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter test1 :
 tt:unit ->
  { (JC_6:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto)))}
  unit reads char_P_alloc_table,char_P_char_M,char_P_tag_table
  { (JC_8:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto))) }

parameter test1ptr :
 tt:unit ->
  { (JC_12:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto)))}
  unit reads char_P_alloc_table,char_P_char_M,char_P_tag_table
  { (JC_14:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto))) }

parameter test2 :
 tt:unit ->
  { (JC_9:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto)))}
  unit reads char_P_alloc_table,char_P_char_M,char_P_tag_table
  writes char_P_alloc_table,char_P_char_M,char_P_tag_table
  { (JC_11:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto))) }

parameter test2ptr :
 tt:unit ->
  { (JC_15:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto)))}
  unit reads char_P_alloc_table,char_P_char_M,char_P_tag_table
  { (JC_17:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto))) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let endsat_ensures_ko =
 fun (p : char_P pointer) (i : int32) ->
  { (JC_1:
    ((C_6:
     ((C_7: le_int(offset_min(char_P_alloc_table, p), integer_of_int32(i)))
     and (C_8:
         ge_int(offset_max(char_P_alloc_table, p), integer_of_int32(i)))))
    and (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
        and valid___string_toto(__string_toto, char_P_alloc_table, gptoto,
            gtoto, __string_toto)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_7 = begin
                        (if ((eq_int_ (integer_of_int32 (safe_int32_of_integer_ 
                                                         (integer_of_int8 
                                                          ((safe_acc_ !char_P_char_M) 
                                                           (C_2:
                                                           ((shift p) 
                                                            (integer_of_int32 i)))))))) (0))
                        then
                         (let jessie_6 = begin
                                           void;
                                          (C_1:
                                          begin
                                            (let jessie_5 = (__retres := 
                                                             (safe_int32_of_integer_ (1))) in
                                            void);
                                           (raise
                                            (Goto_return_label_exc
                                            void))
                                          end)
                                         end in
                         void)
                        else void);
                       (C_5:
                       begin
                         (__retres := (safe_int32_of_integer_ (0)));
                        !__retres
                       end)
                      end in
      void)
      with
      Goto_return_label_exc jessie_1 ->
      (return_label:
      begin   (jessie_returned_value := !__retres); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (neq_int(integer_of_int8(select(char_P_char_M,
                             shift(p, integer_of_int32(i)))),
     (0)) ->
     (JC_5:
     ((C_10: eq_int(integer_of_int32(result), (0)))
     and (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto,
          __string_toto)
         and valid___string_toto(__string_toto, char_P_alloc_table, gptoto,
             gtoto, __string_toto))))) }

let endsat_ensures_ok =
 fun (p : char_P pointer) (i : int32) ->
  { (JC_1:
    ((C_6:
     ((C_7: le_int(offset_min(char_P_alloc_table, p), integer_of_int32(i)))
     and (C_8:
         ge_int(offset_max(char_P_alloc_table, p), integer_of_int32(i)))))
    and (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
        and valid___string_toto(__string_toto, char_P_alloc_table, gptoto,
            gtoto, __string_toto)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_7 = begin
                        (if ((eq_int_ (integer_of_int32 (safe_int32_of_integer_ 
                                                         (integer_of_int8 
                                                          ((safe_acc_ !char_P_char_M) 
                                                           (C_2:
                                                           ((shift p) 
                                                            (integer_of_int32 i)))))))) (0))
                        then
                         (let jessie_6 = begin
                                           void;
                                          (C_1:
                                          begin
                                            (let jessie_5 = (__retres := 
                                                             (safe_int32_of_integer_ (1))) in
                                            void);
                                           (raise
                                            (Goto_return_label_exc
                                            void))
                                          end)
                                         end in
                         void)
                        else void);
                       (C_5:
                       begin
                         (__retres := (safe_int32_of_integer_ (0)));
                        !__retres
                       end)
                      end in
      void)
      with
      Goto_return_label_exc jessie_1 ->
      (return_label:
      begin   (jessie_returned_value := !__retres); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (eq_int(integer_of_int8(select(char_P_char_M,
                            shift(p, integer_of_int32(i)))),
     (0)) ->
     (JC_4:
     ((C_9: eq_int(integer_of_int32(result), (1)))
     and (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto,
          __string_toto)
         and valid___string_toto(__string_toto, char_P_alloc_table, gptoto,
             gtoto, __string_toto))))) }

let endsat_safety =
 fun (p : char_P pointer) (i : int32) ->
  { (JC_1:
    ((C_6:
     ((C_7: le_int(offset_min(char_P_alloc_table, p), integer_of_int32(i)))
     and (C_8:
         ge_int(offset_max(char_P_alloc_table, p), integer_of_int32(i)))))
    and (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
        and valid___string_toto(__string_toto, char_P_alloc_table, gptoto,
            gtoto, __string_toto)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_4 = begin
                        (if ((eq_int_ (integer_of_int32 (C_4:
                                                        (int32_of_integer_ 
                                                         (integer_of_int8 
                                                          (C_3:
                                                          ((((offset_acc_ !char_P_alloc_table) !char_P_char_M) p) 
                                                           (integer_of_int32 i)))))))) (0))
                        then
                         (let jessie_3 = begin
                                           void;
                                          (C_1:
                                          begin
                                            (let jessie_2 = (__retres := 
                                                             (safe_int32_of_integer_ (1))) in
                                            void);
                                           (raise
                                            (Goto_return_label_exc
                                            void))
                                          end)
                                         end in
                         void)
                        else void);
                       (C_5:
                       begin
                         (__retres := (safe_int32_of_integer_ (0)));
                        !__retres
                       end)
                      end in
      void)
      with
      Goto_return_label_exc jessie_1 ->
      (return_label:
      begin   (jessie_returned_value := !__retres); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_3:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto))) }

let test1_safety =
 fun (tt : unit) ->
  { (JC_6:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto))) }
  (init:
  try
   begin
     (let r1 = ref (any_int32 void) in
     (C_12:
     begin
       (let jessie_10 = (r1 := (C_11:
                               ((endsat gtoto) (safe_int32_of_integer_ (4))))) in
       void);
      (assert { (C_13: eq_int(integer_of_int32(r1), (1))) }; void);
      void;
      (raise Return)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_8:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto))) }

let test1ptr_safety =
 fun (tt : unit) ->
  { (JC_12:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto))) }
  (init:
  try
   begin
     (let r1_1 = ref (any_int32 void) in
     (C_31:
     begin
       (let jessie_56 = (r1_1 := (C_30:
                                 ((endsat gptoto) (safe_int32_of_integer_ (4))))) in
       void);
      (assert { (C_32: eq_int(integer_of_int32(r1_1), (1))) }; void);
      void;
      (raise Return)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_14:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto))) }

let test2_safety =
 fun (tt : unit) ->
  { (JC_9:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto))) }
  (init:
  try
   begin
     (let ltoto = ref (any_pointer void) in
     (let r1_0 = ref (any_int32 void) in
     (C_15:
     begin
       (let jessie_15 = (let jessie_14 = (C_14:
                                         (((alloc_char_P (5)) char_P_alloc_table) char_P_alloc_table)) in
                        (assert
                        { ge_int(offset_max(char_P_alloc_table, jessie_14),
                          (4)) };
                        (ltoto := (C_14:
                                  (((alloc_char_P (5)) char_P_alloc_table) char_P_alloc_table))))) in
       void);
      (C_17:
      begin
        (let jessie_18 = (let jessie_16 = ((shift !ltoto) (0)) in
                         (let jessie_17 = (safe_int8_of_integer_ (116)) in
                         (((safe_upd_ char_P_char_M) ((shift !ltoto) (0))) jessie_17))) in
        void);
       (C_19:
       begin
         (let jessie_21 = (let jessie_19 = ((shift !ltoto) (1)) in
                          (let jessie_20 = (safe_int8_of_integer_ (111)) in
                          (((safe_upd_ char_P_char_M) ((shift !ltoto) (1))) jessie_20))) in
         void);
        (C_21:
        begin
          (let jessie_24 = (let jessie_22 = ((shift !ltoto) (2)) in
                           (let jessie_23 = (safe_int8_of_integer_ (116)) in
                           (((safe_upd_ char_P_char_M) ((shift !ltoto) (2))) jessie_23))) in
          void);
         (C_23:
         begin
           (let jessie_27 = (let jessie_25 = ((shift !ltoto) (3)) in
                            (let jessie_26 = (safe_int8_of_integer_ (111)) in
                            (((safe_upd_ char_P_char_M) ((shift !ltoto) (3))) jessie_26))) in
           void);
          (C_25:
          begin
            (let jessie_30 = (let jessie_28 = ((shift !ltoto) (4)) in
                             (let jessie_29 = (safe_int8_of_integer_ (0)) in
                             (((safe_upd_ char_P_char_M) ((shift !ltoto) (4))) jessie_29))) in
            void);
           void;
           void
          end);
          (C_27:
          begin
            (let jessie_33 = (r1_0 := (C_26:
                                      ((endsat !ltoto) (safe_int32_of_integer_ (4))))) in
            void);
           (assert { (C_28: eq_int(integer_of_int32(r1_0), (1))) }; void);
           void;
           (C_29:
           begin
             ((free_parameter char_P_alloc_table) !ltoto); (raise Return)
           end)
          end)
         end)
        end)
       end)
      end)
     end)));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_11:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto))) }

let test2ptr_safety =
 fun (tt : unit) ->
  { (JC_15:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto))) }
  (init:
  try
   begin
     (let lptoto = ref (any_pointer void) in
     (let r1_2 = ref (any_int32 void) in
     (C_33:
     begin
       (let jessie_61 = (lptoto := __string_toto) in void);
      (C_35:
      begin
        (let jessie_64 = (r1_2 := (C_34:
                                  ((endsat !lptoto) (safe_int32_of_integer_ (4))))) in
        void);
       (assert { (C_36: eq_int(integer_of_int32(r1_2), (1))) }; void);
       void;
       (raise Return)
      end)
     end)));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_17:
    (valid_gtoto(gtoto, char_P_alloc_table, gptoto, gtoto, __string_toto)
    and valid___string_toto(__string_toto, char_P_alloc_table, gptoto, gtoto,
        __string_toto))) }


