rm -f forum_cifre.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only forum_cifre.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs forum_cifre.cloc forum_cifre.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
((((\offset_min(paquet.message)) <= 0) &&
    ((\offset_max(paquet.message)) >= (paquet.longueur - 1))) &&
   ((0 <= strlen{Here}(paquet.message)) &&
      (strlen{Here}(paquet.message) <= (\offset_max(paquet.message)))))

Normalized expression:
{
(let char_P[..] curseur in
   {
   (let char_P[..] tmp in
      {
      (let int8 tmp_1 in
         {
         (let char_P[..] tmp_2 in
            {
            (let char_P[..] tmp_3 in
               {
               (let int32 __jc_off_destination in
                  {
                  (let int32 __jc_off_source in
                     {
                     (let int32 __jc_off_curseur in
                        {
                        (let int32 __jc_off_tmp in
                           {
                           (let int32 __jc_off_tmp_2 in
                              {
                              (let int32 __jc_off_tmp_3 in
                                 {
                                 {
                                   (C_1:
                                      {
                                      (__jc_off_destination = 0);
                                        (C_2:
                                           {
                                           (__jc_off_source = 0);
                                             (C_3:
                                                {
                                                (__jc_off_curseur =
                                                   __jc_off_destination);
                                                  (TODO if);
                                                  (return (C_44:
                                                             (destination +
                                                                __jc_off_destination)))
                                                })
                                           })
                                      })
                                   }
                                 })
                              })
                           })
                        })
                     })
                  })
               })
            })
         })
      })
   })
}

Normalized expression:
(C_45: (taille > 1000000))

Normalized expression:
{
(let int32 __retres in
   {
   (try {
      (TODO if);
        (C_49:
           {
           strncpy{}(destination, (C_48: paquet.message), taille);
             (C_50: { (__retres = 1) })
           })
      } with
      | Goto_return_label jessie_9 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_51:
   (((C_53: ((\offset_min(paquet)) <= 0)) &&
       (C_54: ((\offset_max(paquet)) >= 0))) &&
      ((C_56: ((\offset_min(destination)) <= 0)) &&
         (C_57: ((\offset_max(destination)) >= (taille - 1))))))

Normalized expression:
(C_58: (\result == 0))

Normalized expression:
(taille > paquet.longueur)

Normalized expression:
(C_59: (\result == 1))

Normalized expression:
(destination + (0 .. (taille - 1))).char_M

Normalized expression:
(taille >= paquet.longueur)

Generating Why function strncpy
Generating Why function recevoir_un_paquet
cat why/forum_cifre.why
type __anonstruct_paquet_t_1

type _bool

type char_P

type int16

type int32

type int64

type int8

type uint16

type uint32

type uint64

type uint8

exception Goto__L_0_exc of unit

exception Goto__L_exc of unit

exception Goto_return_label_exc of unit

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic __anonstruct_paquet_t_1_tag:  -> __anonstruct_paquet_t_1 tag_id

axiom __anonstruct_paquet_t_1_int :
 (int_of_tag(__anonstruct_paquet_t_1_tag) = (1))

axiom __anonstruct_paquet_t_1_parenttag_bottom :
 parenttag(__anonstruct_paquet_t_1_tag, bottom_tag)

axiom __anonstruct_paquet_t_1_tags :
 (forall x:__anonstruct_paquet_t_1 pointer.
  (forall __anonstruct_paquet_t_1_tag_table:__anonstruct_paquet_t_1 tag_table.
   instanceof(__anonstruct_paquet_t_1_tag_table, x,
   __anonstruct_paquet_t_1_tag)))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

predicate paquet_bien_forme(char_P_alloc_table:char_P alloc_table,
 __anonstruct_paquet_t_1_message:(__anonstruct_paquet_t_1,
 char_P pointer) memory,
 __anonstruct_paquet_t_1_longueur:(__anonstruct_paquet_t_1,
 uint32) memory,
 char_P_char_M:(char_P,
 int8) memory,
 paquet:__anonstruct_paquet_t_1 pointer) =
 (le_int(offset_min(char_P_alloc_table,
         select(__anonstruct_paquet_t_1_message, paquet)),
  (0))
 and (ge_int(offset_max(char_P_alloc_table,
             select(__anonstruct_paquet_t_1_message, paquet)),
      sub_int(integer_of_uint32(select(__anonstruct_paquet_t_1_longueur,
                                paquet)),
      (1)))
     and (le_int((0),
          integer_of_int32(strlen(char_P_char_M,
                           select(__anonstruct_paquet_t_1_message, paquet))))
         and le_int(integer_of_int32(strlen(char_P_char_M,
                                     select(__anonstruct_paquet_t_1_message,
                                     paquet))),
             offset_max(char_P_alloc_table,
             select(__anonstruct_paquet_t_1_message, paquet))))))

axiom full_separated_paquet_bien_forme_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall paquet:__anonstruct_paquet_t_1 pointer.
    (forall char_P_char_M:(char_P,
     int8) memory.
     (forall __anonstruct_paquet_t_1_longueur:(__anonstruct_paquet_t_1,
      uint32) memory.
      (forall __anonstruct_paquet_t_1_message:(__anonstruct_paquet_t_1,
       char_P pointer) memory.
       (forall char_P_alloc_table:char_P alloc_table.
        (full_separated(tmp, paquet) ->
         (paquet_bien_forme(char_P_alloc_table,
          __anonstruct_paquet_t_1_message, __anonstruct_paquet_t_1_longueur,
          char_P_char_M, paquet)
         <-> paquet_bien_forme(char_P_alloc_table,
             __anonstruct_paquet_t_1_message,
             __anonstruct_paquet_t_1_longueur,
             store(char_P_char_M, tmp, tmpval), paquet))))))))))

axiom full_separated_paquet_bien_forme_longueur :
 (forall tmp:__anonstruct_paquet_t_1 pointer.
  (forall tmpval:uint32.
   (forall paquet:__anonstruct_paquet_t_1 pointer.
    (forall char_P_char_M:(char_P,
     int8) memory.
     (forall __anonstruct_paquet_t_1_longueur:(__anonstruct_paquet_t_1,
      uint32) memory.
      (forall __anonstruct_paquet_t_1_message:(__anonstruct_paquet_t_1,
       char_P pointer) memory.
       (forall char_P_alloc_table:char_P alloc_table.
        (full_separated(tmp, paquet) ->
         (paquet_bien_forme(char_P_alloc_table,
          __anonstruct_paquet_t_1_message, __anonstruct_paquet_t_1_longueur,
          char_P_char_M, paquet)
         <-> paquet_bien_forme(char_P_alloc_table,
             __anonstruct_paquet_t_1_message,
             store(__anonstruct_paquet_t_1_longueur, tmp, tmpval),
             char_P_char_M, paquet))))))))))

axiom full_separated_paquet_bien_forme_message :
 (forall tmp:__anonstruct_paquet_t_1 pointer.
  (forall tmpval:char_P pointer.
   (forall paquet:__anonstruct_paquet_t_1 pointer.
    (forall char_P_char_M:(char_P,
     int8) memory.
     (forall __anonstruct_paquet_t_1_longueur:(__anonstruct_paquet_t_1,
      uint32) memory.
      (forall __anonstruct_paquet_t_1_message:(__anonstruct_paquet_t_1,
       char_P pointer) memory.
       (forall char_P_alloc_table:char_P alloc_table.
        (full_separated(tmp, paquet) ->
         (paquet_bien_forme(char_P_alloc_table,
          __anonstruct_paquet_t_1_message, __anonstruct_paquet_t_1_longueur,
          char_P_char_M, paquet)
         <-> paquet_bien_forme(char_P_alloc_table,
             store(__anonstruct_paquet_t_1_message, tmp, tmpval),
             __anonstruct_paquet_t_1_longueur, char_P_char_M, paquet))))))))))

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct___anonstruct_paquet_t_1(p:__anonstruct_paquet_t_1 pointer,
 a:int,
 b:int,
 __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table) =
 ((offset_min(__anonstruct_paquet_t_1_alloc_table, p) = a)
 and (offset_max(__anonstruct_paquet_t_1_alloc_table, p) = b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant___anonstruct_paquet_t_1(p:__anonstruct_paquet_t_1 pointer,
 a:int,
 b:int,
 __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table) =
 ((offset_min(__anonstruct_paquet_t_1_alloc_table, p) = a)
 and (offset_max(__anonstruct_paquet_t_1_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

parameter __anonstruct_paquet_t_1_alloc_table :
 __anonstruct_paquet_t_1 alloc_table ref

parameter __anonstruct_paquet_t_1_longueur :
 (__anonstruct_paquet_t_1,
 uint32) memory ref

parameter __anonstruct_paquet_t_1_message :
 (__anonstruct_paquet_t_1,
 char_P pointer) memory ref

parameter __anonstruct_paquet_t_1_tag_table :
 __anonstruct_paquet_t_1 tag_table ref

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter alloc___anonstruct_paquet_t_1 :
 n:int ->
  __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table ref ->
   __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table ref ->
    { ge_int(n, (0))} __anonstruct_paquet_t_1 pointer
    reads __anonstruct_paquet_t_1_alloc_table
    writes __anonstruct_paquet_t_1_alloc_table,__anonstruct_paquet_t_1_tag_table
    { (valid_struct___anonstruct_paquet_t_1(result, (0), sub_int(n, (1)),
       __anonstruct_paquet_t_1_alloc_table)
      and (instanceof(__anonstruct_paquet_t_1_tag_table, result,
           __anonstruct_paquet_t_1_tag)
          and (alloc_extends(__anonstruct_paquet_t_1_alloc_table@,
               __anonstruct_paquet_t_1_alloc_table)
              and alloc_extern(__anonstruct_paquet_t_1_alloc_table@, result)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one___anonstruct_paquet_t_1 :
 tt:unit ->
  __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table ref ->
   __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table ref ->
    { } __anonstruct_paquet_t_1 pointer
    reads __anonstruct_paquet_t_1_alloc_table
    writes __anonstruct_paquet_t_1_alloc_table,__anonstruct_paquet_t_1_tag_table
    { (valid_struct___anonstruct_paquet_t_1(result, (0), (0),
       __anonstruct_paquet_t_1_alloc_table)
      and (instanceof(__anonstruct_paquet_t_1_tag_table, result,
           __anonstruct_paquet_t_1_tag)
          and (alloc_extends(__anonstruct_paquet_t_1_alloc_table@,
               __anonstruct_paquet_t_1_alloc_table)
              and alloc_extern(__anonstruct_paquet_t_1_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter recevoir_un_paquet :
 destination_0:char_P pointer ->
  taille_0:uint32 ->
   paquet_0:__anonstruct_paquet_t_1 pointer ->
    { (C_51:
      ((C_53:
       le_int(offset_min(__anonstruct_paquet_t_1_alloc_table, paquet_0), (0)))
      and ((C_54:
           ge_int(offset_max(__anonstruct_paquet_t_1_alloc_table, paquet_0),
           (0)))
          and ((C_56:
               le_int(offset_min(char_P_alloc_table, destination_0), (0)))
              and (C_57:
                  ge_int(offset_max(char_P_alloc_table, destination_0),
                  sub_int(integer_of_uint32(taille_0), (1))))))))}
    int32
    reads __anonstruct_paquet_t_1_alloc_table,__anonstruct_paquet_t_1_longueur,__anonstruct_paquet_t_1_message,__anonstruct_paquet_t_1_tag_table,char_P_alloc_table,char_P_char_M,char_P_tag_table
    writes char_P_char_M
    { ((ge_int(integer_of_uint32(taille_0),
        integer_of_uint32(select(__anonstruct_paquet_t_1_longueur, paquet_0))) ->
        (JC_14:
        ((C_59: eq_int(integer_of_int32(result), (1)))
        and (JC_13:
            not_assigns(char_P_alloc_table@, char_P_char_M@, char_P_char_M,
            pset_range(pset_singleton(destination_0), (0),
            sub_int(integer_of_uint32(taille_0), (1))))))))
      and (lt_int(integer_of_uint32(taille_0),
           integer_of_uint32(select(__anonstruct_paquet_t_1_longueur,
                             paquet_0))) ->
           (JC_12:
           ((C_58: eq_int(integer_of_int32(result), (0)))
           and (JC_11:
               not_assigns(char_P_alloc_table@, char_P_char_M@,
               char_P_char_M, pset_empty)))))) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter strncpy :
 destination:char_P pointer ->
  source:char_P pointer ->
   taille:uint32 ->
    { (C_45: lt_int(integer_of_uint32(taille), (1000000)))} char_P pointer
    reads char_P_alloc_table,char_P_char_M,char_P_tag_table
    writes char_P_char_M { true }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let recevoir_un_paquet_ensures_echec =
 fun (destination_0 : char_P pointer) (taille_0 : uint32) (paquet_0 : __anonstruct_paquet_t_1 pointer) ->
  { (C_51:
    ((C_53:
     le_int(offset_min(__anonstruct_paquet_t_1_alloc_table, paquet_0), (0)))
    and ((C_54:
         ge_int(offset_max(__anonstruct_paquet_t_1_alloc_table, paquet_0),
         (0)))
        and ((C_56:
             le_int(offset_min(char_P_alloc_table, destination_0), (0)))
            and (C_57:
                ge_int(offset_max(char_P_alloc_table, destination_0),
                sub_int(integer_of_uint32(taille_0), (1)))))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_79 = begin
                         (if ((lt_int_ (integer_of_uint32 taille_0)) 
                              (integer_of_uint32 ((safe_acc_ !__anonstruct_paquet_t_1_longueur) paquet_0)))
                         then
                          (let jessie_75 = (C_46:
                                           begin
                                             (let jessie_74 = (__retres := 
                                                               (safe_int32_of_integer_ (0))) in
                                             void);
                                            (raise
                                             (Goto_return_label_exc
                                             void))
                                           end) in
                          void)
                         else void);
                        (C_49:
                        begin
                          (let jessie_78 = (JC_16:
                                           (((strncpy destination_0) 
                                             ((safe_acc_ !__anonstruct_paquet_t_1_message) paquet_0)) taille_0)) in
                          void);
                         (C_50:
                         begin
                           (__retres := (safe_int32_of_integer_ (1)));
                          !__retres
                         end)
                        end)
                       end in
      void)
      with
      Goto_return_label_exc jessie_9 ->
      (return_label:
      begin   (jessie_returned_value := !__retres); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (lt_int(integer_of_uint32(taille_0),
     integer_of_uint32(select(__anonstruct_paquet_t_1_longueur, paquet_0))) ->
     (JC_12:
     ((C_58: eq_int(integer_of_int32(result), (0)))
     and (JC_11:
         not_assigns(char_P_alloc_table@, char_P_char_M@, char_P_char_M,
         pset_empty))))) }

let recevoir_un_paquet_ensures_succes =
 fun (destination_0 : char_P pointer) (taille_0 : uint32) (paquet_0 : __anonstruct_paquet_t_1 pointer) ->
  { (C_51:
    ((C_53:
     le_int(offset_min(__anonstruct_paquet_t_1_alloc_table, paquet_0), (0)))
    and ((C_54:
         ge_int(offset_max(__anonstruct_paquet_t_1_alloc_table, paquet_0),
         (0)))
        and ((C_56:
             le_int(offset_min(char_P_alloc_table, destination_0), (0)))
            and (C_57:
                ge_int(offset_max(char_P_alloc_table, destination_0),
                sub_int(integer_of_uint32(taille_0), (1)))))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_79 = begin
                         (if ((lt_int_ (integer_of_uint32 taille_0)) 
                              (integer_of_uint32 ((safe_acc_ !__anonstruct_paquet_t_1_longueur) paquet_0)))
                         then
                          (let jessie_75 = (C_46:
                                           begin
                                             (let jessie_74 = (__retres := 
                                                               (safe_int32_of_integer_ (0))) in
                                             void);
                                            (raise
                                             (Goto_return_label_exc
                                             void))
                                           end) in
                          void)
                         else void);
                        (C_49:
                        begin
                          (let jessie_78 = (JC_16:
                                           (((strncpy destination_0) 
                                             ((safe_acc_ !__anonstruct_paquet_t_1_message) paquet_0)) taille_0)) in
                          void);
                         (C_50:
                         begin
                           (__retres := (safe_int32_of_integer_ (1)));
                          !__retres
                         end)
                        end)
                       end in
      void)
      with
      Goto_return_label_exc jessie_9 ->
      (return_label:
      begin   (jessie_returned_value := !__retres); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (ge_int(integer_of_uint32(taille_0),
     integer_of_uint32(select(__anonstruct_paquet_t_1_longueur, paquet_0))) ->
     (JC_14:
     ((C_59: eq_int(integer_of_int32(result), (1)))
     and (JC_13:
         not_assigns(char_P_alloc_table@, char_P_char_M@, char_P_char_M,
         pset_range(pset_singleton(destination_0), (0),
         sub_int(integer_of_uint32(taille_0), (1)))))))) }

let recevoir_un_paquet_safety =
 fun (destination_0 : char_P pointer) (taille_0 : uint32) (paquet_0 : __anonstruct_paquet_t_1 pointer) ->
  { (C_51:
    ((C_53:
     le_int(offset_min(__anonstruct_paquet_t_1_alloc_table, paquet_0), (0)))
    and ((C_54:
         ge_int(offset_max(__anonstruct_paquet_t_1_alloc_table, paquet_0),
         (0)))
        and ((C_56:
             le_int(offset_min(char_P_alloc_table, destination_0), (0)))
            and (C_57:
                ge_int(offset_max(char_P_alloc_table, destination_0),
                sub_int(integer_of_uint32(taille_0), (1)))))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_73 = begin
                         (if ((lt_int_ (integer_of_uint32 taille_0)) 
                              (integer_of_uint32 (C_47:
                                                 (((acc_ !__anonstruct_paquet_t_1_alloc_table) !__anonstruct_paquet_t_1_longueur) paquet_0))))
                         then
                          (let jessie_69 = (C_46:
                                           begin
                                             (let jessie_68 = (__retres := 
                                                               (safe_int32_of_integer_ (0))) in
                                             void);
                                            (raise
                                             (Goto_return_label_exc
                                             void))
                                           end) in
                          void)
                         else void);
                        (C_49:
                        begin
                          (let jessie_72 = (JC_15:
                                           (((strncpy destination_0) 
                                             (C_48:
                                             (((acc_ !__anonstruct_paquet_t_1_alloc_table) !__anonstruct_paquet_t_1_message) paquet_0))) taille_0)) in
                          void);
                         (C_50:
                         begin
                           (__retres := (safe_int32_of_integer_ (1)));
                          !__retres
                         end)
                        end)
                       end in
      void)
      with
      Goto_return_label_exc jessie_9 ->
      (return_label:
      begin   (jessie_returned_value := !__retres); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let strncpy_safety =
 fun (destination : char_P pointer) (source : char_P pointer) (taille : uint32) ->
  { (C_45: lt_int(integer_of_uint32(taille), (1000000))) }
  (let mutable_taille = ref taille in
  (init:
  (let jessie_returned_value = ref (any_pointer void) in
  try
   begin
     (let curseur = (any_pointer void) in
     (let tmp = (any_pointer void) in
     (let tmp_1 = ref (any_int8 void) in
     (let tmp_2 = (any_pointer void) in
     (let tmp_3 = (any_pointer void) in
     (let __jc_off_destination = ref (any_int32 void) in
     (let __jc_off_source = ref (any_int32 void) in
     (let __jc_off_curseur = ref (any_int32 void) in
     (let __jc_off_tmp = ref (any_int32 void) in
     (let __jc_off_tmp_2 = ref (any_int32 void) in
     (let __jc_off_tmp_3 = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_10 = (__jc_off_destination := (safe_int32_of_integer_ (0))) in
       void);
      (C_2:
      begin
        (let jessie_11 = (__jc_off_source := (safe_int32_of_integer_ (0))) in
        void);
       (C_3:
       begin
         (let jessie_12 = (__jc_off_curseur := !__jc_off_destination) in
         void);
        (if ((gt_int_ (integer_of_uint32 !mutable_taille)) (0))
        then
         try
          (let jessie_37 = begin
                             try
                              while true do
                              { invariant (C_4: (true = true))  }
                               try
                                (let jessie_26 = begin
                                                   try
                                                    (let jessie_25 = 
                                                    (C_5:
                                                    begin
                                                      (let jessie_13 = 
                                                      (__jc_off_tmp := !__jc_off_curseur) in
                                                      void);
                                                     (C_8:
                                                     begin
                                                       (let jessie_14 = 
                                                       (__jc_off_curseur := 
                                                        (C_7:
                                                        (int32_of_integer_ 
                                                         (C_6:
                                                         ((add_int (integer_of_int32 !__jc_off_curseur)) (1)))))) in
                                                       void);
                                                      (C_9:
                                                      begin
                                                        (let jessie_15 = 
                                                        (__jc_off_tmp_2 := !__jc_off_source) in
                                                        void);
                                                       (C_12:
                                                       begin
                                                         (let jessie_16 = 
                                                         (__jc_off_source := 
                                                          (C_11:
                                                          (int32_of_integer_ 
                                                           (C_10:
                                                           ((add_int 
                                                             (integer_of_int32 !__jc_off_source)) (1)))))) in
                                                         void);
                                                        (C_15:
                                                        begin
                                                          (let jessie_17 = 
                                                          (tmp_1 := (C_14:
                                                                    ((((offset_acc_ !char_P_alloc_table) !char_P_char_M) source) 
                                                                    (integer_of_int32 !__jc_off_tmp_2)))) in
                                                          void);
                                                         (C_18:
                                                         begin
                                                           (let jessie_20 = 
                                                           (let jessie_18 = 
                                                           (C_16:
                                                           ((shift destination) 
                                                            (integer_of_int32 !__jc_off_tmp))) in
                                                           (let jessie_19 = !tmp_1 in
                                                           (JC_4:
                                                           (((((offset_upd_ !char_P_alloc_table) char_P_char_M) destination) 
                                                             (integer_of_int32 !__jc_off_tmp)) jessie_19)))) in
                                                           void);
                                                          (if ((neq_int_ 
                                                                (integer_of_int8 !tmp_1)) (0))
                                                          then
                                                           (C_21:
                                                           begin
                                                             (let jessie_21 = 
                                                             (mutable_taille := 
                                                              (C_20:
                                                              (uint32_of_integer_ 
                                                               (C_19:
                                                               ((sub_int 
                                                                 (integer_of_uint32 !mutable_taille)) (1)))))) in
                                                             void);
                                                            (if ((gt_int_ 
                                                                  (integer_of_uint32 !mutable_taille)) (0))
                                                            then void
                                                            else
                                                             (let jessie_22 = 
                                                             (raise
                                                              (Goto_while_0_break_exc
                                                              void)) in
                                                             void))
                                                           end)
                                                          else
                                                           (let jessie_23 = 
                                                           (raise
                                                            (Goto_while_0_break_exc
                                                            void)) in
                                                           void));
                                                          (let jessie_24 = 
                                                          (raise
                                                           (Goto__L_exc
                                                           void)) in
                                                          void);
                                                          (raise
                                                           (Goto_while_0_break_exc
                                                           void))
                                                         end)
                                                        end)
                                                       end)
                                                      end)
                                                     end)
                                                    end) in
                                                    void)
                                                    with
                                                    Goto__L_exc jessie_1 ->
                                                    (_L: void) end;
                                                  (raise
                                                   (Loop_continue_exc
                                                   void))
                                                 end in
                                void)
                                with
                                Loop_continue_exc jessie_6 ->
                                void end
                              done
                              with
                              Goto_while_0_break_exc jessie_2 ->
                              (while_0_break: void) end;
                            (C_26:
                            begin
                              (let jessie_27 = (__jc_off_source := (C_25:
                                                                   (int32_of_integer_ 
                                                                    (C_24:
                                                                    ((add_int 
                                                                    (integer_of_int32 !__jc_off_source)) 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (neg_int (1))))))))) in
                              void);
                             (if ((eq_int_ (integer_of_int32 (C_43:
                                                             (int32_of_integer_ 
                                                              (integer_of_int8 
                                                               (C_42:
                                                               ((((offset_acc_ !char_P_alloc_table) !char_P_char_M) source) 
                                                                (integer_of_int32 !__jc_off_source)))))))) (0))
                             then
                              begin
                                void;
                               (C_29:
                               begin
                                 (let jessie_28 = (mutable_taille := 
                                                   (C_28:
                                                   (uint32_of_integer_ 
                                                    (C_27:
                                                    ((sub_int (integer_of_uint32 !mutable_taille)) (1)))))) in
                                 void);
                                (if ((gt_int_ (integer_of_uint32 !mutable_taille)) (0))
                                then
                                 try
                                  while true do
                                  { invariant (C_30: (true = true))  }
                                   try
                                    (let jessie_36 = begin
                                                       (C_31:
                                                       begin
                                                         (let jessie_29 = 
                                                         (__jc_off_tmp_3 := !__jc_off_destination) in
                                                         void);
                                                        (C_34:
                                                        begin
                                                          (let jessie_30 = 
                                                          (__jc_off_destination := 
                                                           (C_33:
                                                           (int32_of_integer_ 
                                                            (C_32:
                                                            ((add_int 
                                                              (integer_of_int32 !__jc_off_destination)) (1)))))) in
                                                          void);
                                                         (C_37:
                                                         begin
                                                           (let jessie_33 = 
                                                           (let jessie_31 = 
                                                           (C_35:
                                                           ((shift destination) 
                                                            (integer_of_int32 !__jc_off_tmp_3))) in
                                                           (let jessie_32 = 
                                                           (safe_int8_of_integer_ (0)) in
                                                           (JC_6:
                                                           (((((offset_upd_ !char_P_alloc_table) char_P_char_M) destination) 
                                                             (integer_of_int32 !__jc_off_tmp_3)) jessie_32)))) in
                                                           void);
                                                          void;
                                                          void
                                                         end);
                                                         (C_40:
                                                         begin
                                                           (let jessie_34 = 
                                                           (mutable_taille := 
                                                            (C_39:
                                                            (uint32_of_integer_ 
                                                             (C_38:
                                                             ((sub_int 
                                                               (integer_of_uint32 !mutable_taille)) (1)))))) in
                                                           void);
                                                          (if ((gt_int_ 
                                                                (integer_of_uint32 !mutable_taille)) (0))
                                                          then void
                                                          else
                                                           (let jessie_35 = 
                                                           (raise
                                                            (Goto_while_1_break_exc
                                                            void)) in
                                                           void))
                                                         end)
                                                        end)
                                                       end);
                                                      (raise
                                                       (Loop_continue_exc
                                                       void))
                                                     end in
                                    void)
                                    with
                                    Loop_continue_exc jessie_8 ->
                                    void end
                                  done
                                  with
                                  Goto_while_1_break_exc jessie_3 ->
                                  (while_1_break: void) end
                                else void)
                               end)
                              end
                             else void);
                             (raise (Goto__L_0_exc void))
                            end)
                           end in
          void)
          with
          Goto__L_0_exc jessie_4 ->
          (_L_0: void) end
        else void);
        (jessie_returned_value := (C_44:
                                  ((shift destination) (integer_of_int32 !__jc_off_destination))));
        (raise Return)
       end)
      end)
     end))))))))))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end)))
  { true }


