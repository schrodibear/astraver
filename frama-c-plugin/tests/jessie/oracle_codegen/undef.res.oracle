rm -f undef.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only undef.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs undef.cloc undef.jc
Normalized expression:
(((\offset_min(a)) <= 0) && ((\offset_max(a)) >= 1))

Normalized expression:
(((\offset_min(__string_abc)) <= 0) && ((\offset_max(__string_abc)) >= 3))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let int32 __retres in
   {
   { (C_3: { (__retres = (C_2: (TODO cast))); (return __retres) }) }
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   { (C_6: { (__retres = (C_5: (TODO cast))); (return __retres) }) }
   })
}

Normalized expression:
(C_7: (y != 0))

Normalized expression:
{
(let int32 __retres in
   {
   { (C_10: { (__retres = (C_9: (TODO cast))); (return __retres) }) }
   })
}

Normalized expression:
(C_11: (y < 0))

Normalized expression:
{
(let int32 __retres in
   {
   (try {
      (TODO if)
      } with
      | Goto_return_label jessie_1 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_16: true)

Normalized expression:
{
(let int32 __retres in
   {
   (try {
      (TODO if)
      } with
      | Goto_return_label jessie_2 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_21: true)

Normalized expression:
{
(let uint32 __retres in
   {
   { (C_24: { (__retres = (C_23: (TODO cast))); (return __retres) }) }
   })
}

Normalized expression:
{
(let uint32 __retres in
   {
   { (C_27: { (__retres = (C_26: (TODO cast))); (return __retres) }) }
   })
}

Normalized expression:
(C_28: (y != 0))

Normalized expression:
{
(let uint32 __retres in
   {
   (try {
      (TODO if)
      } with
      | Goto_return_label jessie_3 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_33: true)

Normalized expression:
{
(let int32 __retres in
   {
   { (C_36: { (__retres = (C_35: (TODO cast))); (return __retres) }) }
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   { (C_39: { (__retres = (C_38: (TODO cast))); (return __retres) }) }
   })
}

Normalized expression:
(C_40: (y != 0))

Normalized expression:
{
(let int32 __retres in
   {
   (try {
      (TODO if)
      } with
      | Goto_return_label jessie_4 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_45: true)

Normalized expression:
{
(let int32 __retres in
   {
   {
     {
       (assert (C_46: (32 > 32)));
         (assert (C_47: (x >= 0)));
         (assert (C_48: (x <= 0)));
         (C_51: { (__retres = (C_50: (TODO cast))) })
       };
       (return __retres)
     }
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   {
     {
       (assert (C_52: ((unary - 1) >= 0)));
         (assert (C_53: (x >= 0)));
         (assert (C_54: (x <= (2147483647 arith_shift_right (unary - 1)))));
         (C_57: { (__retres = (C_56: (TODO cast))) })
       };
       (return __retres)
     }
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   { (C_58: { (__retres = (unary - 64)); (return __retres) }) }
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   {
     {
       (assert (C_59: (y >= 0)));
         (assert (C_60: (y > 32)));
         (assert (C_61: (x >= 0)));
         (assert (C_62: (x <= (2147483647 arith_shift_right y))));
         (C_65: { (__retres = (C_64: (TODO cast))) })
       };
       (return __retres)
     }
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   (try (try (try (try {
                     (TODO if);
                       (throw Goto__L_1 ());
                       (C_82:
                          {
                          (__retres = 0); (throw Goto_return_label ())
                          })
                     } with
                     | Goto__L_1 jessie_5 -> {
                     (_L_1:
                        {
                        ();
                          (throw Goto__L_0 ());
                          (C_83:
                             {
                             (__retres = 0); (throw Goto_return_label ())
                             })
                        })
                     }
                     | default -> ()) with
                | Goto__L_0 jessie_6 -> {
                (_L_0:
                   {
                   ();
                     (throw Goto__L ());
                     (C_84: { (__retres = 0); (throw Goto_return_label ()) })
                   })
                }
                | default -> ()) with
           | Goto__L jessie_7 -> {
           (_L: { (); (C_85: { (__retres = 0) }) })
           }
           | default -> ()) with
      | Goto_return_label jessie_8 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_86: true)

Normalized expression:
{
(let uint32 __retres in
   {
   {
     {
       (assert (C_87: (32 > 32)));
         (C_90: { (__retres = (C_89: (TODO cast))) })
       };
       (return __retres)
     }
   })
}

Normalized expression:
{
(let uint32 __retres in
   {
   {
     {
       (assert (C_91: (y > 32)));
         (C_94: { (__retres = (C_93: (TODO cast))) })
       };
       (return __retres)
     }
   })
}

Normalized expression:
{
(let uint32 __retres in
   {
   (try {
      (TODO if)
      } with
      | Goto_return_label jessie_9 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_100: true)

Normalized expression:
{
(let int32 __retres in
   {
   {
     {
       (assert (C_101: ((unary - 1) >= 0)));
         (C_104: { (__retres = (C_103: (TODO cast))) })
       };
       (return __retres)
     }
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   {
     {
       (assert (C_105: (32 > 32)));
         (C_108: { (__retres = (C_107: (TODO cast))) })
       };
       (return __retres)
     }
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   {
     {
       (assert (C_109: (y >= 0)));
         (assert (C_110: (y > 32)));
         (C_113: { (__retres = (C_112: (TODO cast))) })
       };
       (return __retres)
     }
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   (try (try {
           (TODO if);
             (throw Goto__L ());
             (C_122: { (__retres = 0); (throw Goto_return_label ()) })
           } with
           | Goto__L jessie_10 -> {
           (_L: { (); (C_123: { (__retres = 0) }) })
           }
           | default -> ()) with
      | Goto_return_label jessie_11 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_124: true)

Normalized expression:
{
(let uint32 __retres in
   {
   {
     {
       (assert (C_125: (32 > 32)));
         (C_128: { (__retres = (C_127: (TODO cast))) })
       };
       (return __retres)
     }
   })
}

Normalized expression:
{
(let uint32 __retres in
   {
   {
     {
       (assert (C_129: (y > 32)));
         (C_132: { (__retres = (C_131: (TODO cast))) })
       };
       (return __retres)
     }
   })
}

Normalized expression:
{
(let uint32 __retres in
   {
   (try {
      (TODO if)
      } with
      | Goto_return_label jessie_12 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_138: true)

Normalized expression:
{
(let int32 __retres in
   {
   {
     (C_139:
        {
        (x = null);
          (C_141: { (__retres = (C_140: x.int_M)); (return __retres) })
        })
     }
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   { (C_143: { (__retres = (C_142: x.int_M)); (return __retres) }) }
   })
}

Normalized expression:
(C_144:
   ((C_145: ((\offset_min(x)) <= 0)) && (C_146: ((\offset_max(x)) >= 0))))

Normalized expression:
{
(let int32 __retres in
   {
   (try {
      (TODO if)
      } with
      | Goto_return_label jessie_13 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_150: ((((\offset_min(x)) <= 0) && ((\offset_max(x)) >= 0)) || (x == null)))

Normalized expression:
{
(let int_P[0] x in
   {
   (let int_P[..] __retres in
      {
      {
        (C_152:
           {
           (x = (C_151: (TODO alloc)));
             (C_153:
                {
                (__retres = x);
                  {
                  (C_154: { (TODO free); (return __retres) })
                  }
                })
           })
        }
      })
   })
}

Normalized expression:
(C_155:
   ((C_156: ((\offset_min(\result)) <= 0)) &&
      (C_157: ((\offset_max(\result)) >= 0))))

Normalized expression:
true

Normalized expression:
{
(let int_P[..] x in
   {
   (let int32 __retres in
      {
      {
        (C_159:
           {
           (x = (C_158: bad_local_pointer{}()));
             (C_161: { (__retres = (C_160: x.int_M)); (return __retres) })
           })
        }
      })
   })
}

Normalized expression:
{
(let int_P[0..19] a_0 in
   {
   (let int_P[0..9] b in
      {
      (let int_P[..] x in
         {
         (let int_P[..] y in
            {
            (let int32 __retres in
               {
               (let int32 __jc_off_x in
                  {
                  (let int32 __jc_off_y in
                     {
                     {
                       (C_163:
                          {
                          (a_0 = (C_162: (TODO alloc)));
                            (C_165:
                               {
                               (b = (C_164: (TODO alloc)));
                                 (C_166:
                                    {
                                    (__jc_off_x = 2);
                                      (C_167:
                                         {
                                         (__jc_off_y = 0);
                                           (C_172:
                                              {
                                              (__retres =
                                                 (C_171: (TODO cast)));
                                                {
                                                (C_173:
                                                   {
                                                   (TODO free);
                                                     (C_174:
                                                        {
                                                        (TODO free);
                                                          (return __retres)
                                                        })
                                                   })
                                                }
                                              })
                                         })
                                    })
                               })
                          })
                       }
                     })
                  })
               })
            })
         })
      })
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   (let int32 __jc_off_y_1 in
      {
      {
        (C_177:
           {
           (__jc_off_y_1 = (C_176: (TODO cast)));
             (C_180: { (__retres = (C_179: (TODO cast))); (return __retres) })
           })
        }
      })
   })
}

Normalized expression:
(C_181:
   (((C_183: ((\offset_min(x)) <= 0)) && (C_184: ((\offset_max(x)) >= 0))) &&
      ((C_186: ((\offset_min(y)) <= 0)) && (C_187: ((\offset_max(y)) >= 0)))))

Normalized expression:
{
(let int_P[0..2] a_0 in
   {
   (let int_P[..] x in
      {
      (let int_P[..] y in
         {
         (let int32 __retres in
            {
            (let int32 __jc_off_x_1 in
               {
               (let int32 __jc_off_y_2 in
                  {
                  {
                    (C_189:
                       {
                       (a_0 = (C_188: (TODO alloc)));
                         (C_190:
                            {
                            (__jc_off_x_1 = 2);
                              (C_191:
                                 {
                                 (__jc_off_y_2 = 0);
                                   (C_194:
                                      {
                                      (__retres = (C_193: (TODO cast)));
                                        {
                                        (C_195:
                                           {
                                           (TODO free); (return __retres)
                                           })
                                        }
                                      })
                                 })
                            })
                       })
                    }
                  })
               })
            })
         })
      })
   })
}

Normalized expression:
(C_196: true)

Normalized expression:
{
(let int_P[..] i in
   {
   (let int32 __retres in
      {
      {
        (C_199:
           {
           (i = (C_198: ((C_197: (a + x)) + 2)));
             (C_201: { (__retres = (C_200: i.int_M)); (return __retres) })
           })
        }
      })
   })
}

Normalized expression:
{
(let int_P[..] i in
   {
   (let int32 __retres in
      {
      {
        (C_203:
           {
           (i = (C_202: (a + x)));
             (C_205: { (__retres = (C_204: i.int_M)); (return __retres) })
           })
        }
      })
   })
}

Normalized expression:
(C_206: ((C_207: (0 <= x)) && (C_208: (x > 2))))

Normalized expression:
{
(let int_P[..] i in
   {
   (let int32 __retres in
      {
      (try {
         (TODO if)
         } with
         | Goto_return_label jessie_14 -> {
         (return_label: { (return __retres) })
         }
         | default -> ())
      })
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   {
     (C_217:
        {
        (__retres = (C_216: (a + (C_215: (TODO cast))).int_M));
          (return __retres)
        })
     }
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   { (C_219: { (__retres = (C_218: (a + i).int_M)); (return __retres) }) }
   })
}

Normalized expression:
(C_220: (i > 2))

Normalized expression:
{
(let int32 __retres in
   {
   (try {
      (TODO if)
      } with
      | Goto_return_label jessie_15 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_225: true)

Normalized expression:
{ (let int32 x in { { (return x) } })
}

Normalized expression:
{ (let int32 x in { { (TODO if); (return x) } })
}

Normalized expression:
(C_227: (i != 0))

Normalized expression:
{ (let int32 x in { { (TODO if); (return x) } })
}

Normalized expression:
(C_230: true)

Normalized expression:
{
(let int32 __retres in
   {
   (try {
      (TODO if)
      } with
      | Goto_return_label jessie_16 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   { (C_241: { (__retres = (C_240: (TODO cast))); (return __retres) }) }
   })
}

Normalized expression:
(C_242: (x <= (2147483647 - 10)))

Normalized expression:
{
(let int32 __retres in
   {
   (try {
      (TODO if)
      } with
      | Goto_return_label jessie_17 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_249: true)

Normalized expression:
{
(let int32 __retres in { { (C_250: { (__retres = 0); (return __retres) }) } })
}

Normalized expression:
{
(let int32 __retres in
   {
   (try {
      (TODO if); (C_252: { (__retres = 0) })
      } with
      | Goto_return_label jessie_18 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_253: (x > 0))

Normalized expression:
{
(let int32 __retres in
   {
   (try {
      (TODO if)
      } with
      | Goto_return_label jessie_19 -> {
      (return_label: { (return __retres) })
      }
      | default -> ())
   })
}

Normalized expression:
(C_256: true)

Normalized expression:
{
(let int32 tmp in
   {
   (let int32 tmp_0 in
      {
      (let int32 __retres in
         {
         {
           (C_257:
              {
              (tmp = 0);
                (C_259:
                   {
                   ((C_258: x.int_M) = tmp);
                     (C_260:
                        {
                        (tmp_0 = 0);
                          (C_262:
                             {
                             ((C_261: x.int_M) = tmp_0);
                               (C_265:
                                  {
                                  (__retres = (C_264: (TODO cast)));
                                    (return __retres)
                                  })
                             })
                        })
                   })
              })
           }
         })
      })
   })
}

Normalized expression:
{
{
  (C_268:
     {
     (i = (C_267: (TODO cast)));
       (C_271: { (i = (C_270: (TODO cast))); (return i) })
     })
  }
}

Normalized expression:
{
(let int32 tmp in
   {
   {
     (C_272:
        {
        (tmp = i);
          (C_275:
             {
             (i = (C_274: (TODO cast)));
               (C_277: { ((C_276: (a + tmp).int_M) = i); (return i) })
             })
        })
     }
   })
}

Normalized expression:
{
(let int32 tmp in
   {
   (let int32 tmp_0 in
      {
      (let int32 __retres in
         {
         (let int32 __jc_off_y_3 in
            {
            {
              (C_280:
                 {
                 (__jc_off_y_3 = (C_279: (TODO cast)));
                   (C_281:
                      {
                      (tmp = 0);
                        (C_283:
                           {
                           ((C_282: x.int_M) = tmp);
                             (C_284:
                                {
                                (tmp_0 = 0);
                                  (C_287:
                                     {
                                     ((C_286:
                                         (C_285: (x + __jc_off_y_3)).int_M) =
                                        tmp_0);
                                       (C_290:
                                          {
                                          (__retres = (C_289: (TODO cast)));
                                            (return __retres)
                                          })
                                     })
                                })
                           })
                      })
                 })
              }
            })
         })
      })
   })
}

Normalized expression:
(C_291: ((x - y) != 0))

Normalized expression:
{
(let int32 tmp in
   {
   (let int32 tmp_0 in
      {
      (let int32 __retres in
         {
         (let int32 __jc_off_y_4 in
            {
            (try {
               (C_294: { (__jc_off_y_4 = (C_293: (TODO cast))); (TODO if) })
               } with
               | Goto_return_label jessie_20 -> {
               (return_label: { (return __retres) })
               }
               | default -> ())
            })
         })
      })
   })
}

Normalized expression:
(C_308: true)

Normalized expression:
(C_309: true)

Normalized expression:
true

Normalized expression:
(C_310: true)

Normalized expression:
true

Normalized expression:
(C_311: true)

Normalized expression:
true

Normalized expression:
{
(let int32 tmp in
   {
   (let int32 tmp_0 in
      {
      (let int32 tmp_1 in
         {
         {
           (C_313:
              {
              (tmp = (C_312: baz{}()));
                (C_315:
                   {
                   (tmp_0 = (C_314: bar{}()));
                     (C_317:
                        {
                        (tmp_1 = (C_316: foo{}(tmp_0, tmp))); (return tmp_1)
                        })
                   })
              })
           }
         })
      })
   })
}

Normalized expression:
{
(let int_P[..] x in
   {
   (let int32 __retres in
      {
      (let int32 __jc_off_x_2 in
         {
         {
           (C_318:
              {
              (__jc_off_x_2 = 0);
                (C_321:
                   {
                   (__retres = (C_320: (C_319: (ip + __jc_off_x_2)).int_M));
                     (return __retres)
                   })
              })
           }
         })
      })
   })
}

Normalized expression:
{
(let int_P[..] x in
   {
   (let int32 __retres in
      {
      (let int32 __jc_off_x_3 in
         {
         {
           (C_322:
              {
              (__jc_off_x_3 = 0);
                (C_325:
                   {
                   ((C_324: (C_323: (ip + __jc_off_x_3)).int_M) = 1);
                     (C_326: { (__retres = 1); (return __retres) })
                   })
              })
           }
         })
      })
   })
}

Normalized expression:
{
(let char_P[..] str in
   {
   {
     (C_327:
        {
        (str = __string_abc);
          (C_330: { ((C_329: (C_328: (str + 2)).char_M) = 122); (return) })
        })
     }
   })
}

Generating Why function div0_wrong
Generating Why function div0_unsafe
Generating Why function div0_unsafe_pos
Generating Why function div0_safe
Generating Why function div0_safe_pos
Generating Why function udiv0_wrong
Generating Why function udiv0_unsafe
Generating Why function udiv0_safe
Generating Why function mod0_wrong
Generating Why function mod0_unsafe
Generating Why function mod0_safe
Generating Why function shift_left_signed_wrong_1
Generating Why function shift_left_signed_wrong_2
Generating Why function shift_left_signed_wrong_3
Generating Why function shift_left_signed_unsafe
Generating Why function shift_left_signed_safe
Generating Why function shift_left_unsigned_wrong
Generating Why function shift_left_unsigned_unsafe
Generating Why function shift_left_unsigned_safe
Generating Why function shift_right_signed_wrong_1
Generating Why function shift_right_signed_wrong_2
Generating Why function shift_right_signed_unsafe
Generating Why function shift_right_signed_safe
Generating Why function shift_right_unsigned_wrong
Generating Why function shift_right_unsigned_unsafe
Generating Why function shift_right_unsigned_safe
Generating Why function null_ptr_wrong
Generating Why function null_ptr_unsafe
Generating Why function null_ptr_safe
Generating Why function bad_local_pointer
Generating Why function stack_access_wrong
Generating Why function ptr_sub_wrong
Generating Why function ptr_sub_unsafe
Generating Why function ptr_sub_safe
Generating Why function oob_pointer_wrong
Generating Why function oob_pointer_unsafe
Generating Why function oob_pointer_safe
Generating Why function array_bounds_wrong
Generating Why function array_bounds_unsafe
Generating Why function array_bounds_safe
Generating Why function initialization_wrong
Generating Why function initialization_unsafe
Generating Why function initialization_safe
Generating Why function signed_overflow_wrong
Generating Why function signed_overflow_unsafe
Generating Why function signed_overflow_safe
Generating Why function missing_return_wrong
Generating Why function missing_return_unsafe
Generating Why function missing_return_safe
Generating Why function multiple_update_wrong_1
Generating Why function multiple_update_wrong_2
Generating Why function multiple_update_wrong_3
Generating Why function multiple_update_unsafe
Generating Why function multiple_update_safe
Generating Why function order_of_arg_eval
Generating Why function volatile_cast_wrong
Generating Why function const_cast_wrong
Generating Why function mod_string
cat why/undef.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type uint16

type uint32

type uint64

type uint8

type void_P

exception Goto__L_0_exc of unit

exception Goto__L_1_exc of unit

exception Goto__L_exc of unit

exception Goto_return_label_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic __string_abc:  -> char_P pointer

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic a:  -> int_P pointer

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_11:int32.
    ((le_int((0), integer_of_int32(i_11))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_11)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_11)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_12:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_12))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_12)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_12), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i_6:int32.
    ((le_int((0), integer_of_int32(i_6))
     and lt_int(integer_of_int32(i_6),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i_6)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_7:int32.
    ((le_int((0), integer_of_int32(i_7))
     and (le_int(integer_of_int32(i_7),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_7)))),
             (0)))) ->
     lt_int(integer_of_int32(i_7),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_10:int32.
    ((le_int((0), integer_of_int32(i_10))
     and le_int(integer_of_int32(i_10),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_10)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_10)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_9:int32.
    ((le_int((0), integer_of_int32(i_9))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_9)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_9)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_8:int32.
    ((le_int((0), integer_of_int32(i_8))
     and (le_int(integer_of_int32(i_8),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_8)))),
             (0)))) ->
     eq_int(integer_of_int32(i_8),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid___string_abc(__string_abc:char_P pointer,
 char_P_alloc_table:char_P alloc_table,
 a:int_P pointer,
 __string_abc:char_P pointer) =
 (le_int(offset_min(char_P_alloc_table, __string_abc), (0))
 and ge_int(offset_max(char_P_alloc_table, __string_abc), (3)))

predicate valid_a(a:int_P pointer,
 int_P_alloc_table:int_P alloc_table,
 a:int_P pointer,
 __string_abc:char_P pointer) =
 (le_int(offset_min(int_P_alloc_table, a), (0))
 and ge_int(offset_max(int_P_alloc_table, a), (1)))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter int_P_int_M : (int_P, int32) memory ref

parameter array_bounds_safe :
 i_1:uint32 ->
  { (JC_119:
    ((C_225: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc))))}
  int32 reads char_P_alloc_table,int_P_alloc_table,int_P_int_M
  { (JC_121:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter array_bounds_unsafe :
 i_0:uint32 ->
  { (JC_116:
    ((C_220: lt_int(integer_of_uint32(i_0), (2)))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc))))}
  int32 reads char_P_alloc_table,int_P_alloc_table,int_P_int_M
  { (JC_118:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter array_bounds_wrong :
 i:uint32 ->
  { (JC_113:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table,int_P_int_M
  { (JC_115:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter bad_local_pointer :
 tt:unit ->
  { (JC_88:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int_P pointer reads char_P_alloc_table,int_P_alloc_table
  writes int_P_alloc_table,int_P_tag_table
  { ((JC_90:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))
    and ((true = true) ->
         (JC_91:
         ((C_155:
          ((C_156: le_int(offset_min(int_P_alloc_table, result), (0)))
          and (C_157: ge_int(offset_max(int_P_alloc_table, result), (0)))))
         and (valid_a(a, int_P_alloc_table, a, __string_abc)
             and valid___string_abc(__string_abc, char_P_alloc_table, a,
                 __string_abc)))))) }

parameter bar :
 tt:unit ->
  { (JC_175:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  { ((JC_177:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))
    and ((true = true) ->
         (JC_178:
         ((C_310: (true = true))
         and (valid_a(a, int_P_alloc_table, a, __string_abc)
             and valid___string_abc(__string_abc, char_P_alloc_table, a,
                 __string_abc)))))) }

parameter baz :
 tt:unit ->
  { (JC_179:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  { ((JC_181:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))
    and ((true = true) ->
         (JC_182:
         ((C_311: (true = true))
         and (valid_a(a, int_P_alloc_table, a, __string_abc)
             and valid___string_abc(__string_abc, char_P_alloc_table, a,
                 __string_abc)))))) }

parameter char_P_char_M : (char_P, int8) memory ref

parameter const_cast_wrong :
 ip_0:int_P pointer ->
  { (JC_189:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table,int_P_tag_table
  writes int_P_int_M
  { (JC_191:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter div0_safe :
 x_2:int32 ->
  y_2:int32 ->
   { (JC_10:
     ((C_16: (true = true))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_12:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter div0_safe_pos :
 x_3:int32 ->
  y_3:int32 ->
   { (JC_13:
     ((C_21: (true = true))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_15:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter div0_unsafe :
 x_0:int32 ->
  y_0:int32 ->
   { (JC_4:
     ((C_7: neq_int(integer_of_int32(y_0), (0)))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_6:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter div0_unsafe_pos :
 x_1:int32 ->
  y_1:int32 ->
   { (JC_7:
     ((C_11: gt_int(integer_of_int32(y_1), (0)))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_9:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter div0_wrong :
 x:int32 ->
  y:int32 ->
   { (JC_1:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_3:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter foo :
 unnamed:int32 ->
  unnamed_1:int32 ->
   { (JC_171:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { ((JC_173:
      (valid_a(a, int_P_alloc_table, a, __string_abc)
      and valid___string_abc(__string_abc, char_P_alloc_table, a,
          __string_abc)))
     and ((true = true) ->
          (JC_174:
          ((C_309: (true = true))
          and (valid_a(a, int_P_alloc_table, a, __string_abc)
              and valid___string_abc(__string_abc, char_P_alloc_table, a,
                  __string_abc)))))) }

parameter initialization_safe :
 i_3:int32 ->
  { (JC_128:
    ((C_230: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc))))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  { (JC_130:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter initialization_unsafe :
 i_2:int32 ->
  { (JC_125:
    ((C_227: neq_int(integer_of_int32(i_2), (0)))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc))))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  { (JC_127:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter initialization_wrong :
 tt:unit ->
  { (JC_122:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  { (JC_124:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter missing_return_safe :
 x_37:int32 ->
  { (JC_146:
    ((C_256: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc))))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  { (JC_148:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter missing_return_unsafe :
 x_36:int32 ->
  { (JC_143:
    ((C_253: lt_int(integer_of_int32(x_36), (0)))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc))))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  { (JC_145:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter missing_return_wrong :
 x_35:int32 ->
  { (JC_140:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  { (JC_142:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter mod0_safe :
 x_9:int32 ->
  y_9:int32 ->
   { (JC_31:
     ((C_45: (true = true))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_33:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter mod0_unsafe :
 x_8:int32 ->
  y_8:int32 ->
   { (JC_28:
     ((C_40: neq_int(integer_of_int32(y_8), (0)))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_30:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter mod0_wrong :
 x_7:int32 ->
  y_7:int32 ->
   { (JC_25:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_27:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter mod_string :
 tt:unit ->
  { (JC_193:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  unit reads char_P_alloc_table,int_P_alloc_table writes char_P_char_M
  { (JC_195:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter multiple_update_safe :
 x_40:int_P pointer ->
  y_28:int_P pointer ->
   { (JC_166:
     ((C_308: (true = true))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   int32 reads char_P_alloc_table,int_P_alloc_table,int_P_tag_table
   writes int_P_int_M
   { (JC_168:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter multiple_update_unsafe :
 x_39:int_P pointer ->
  y_27:int_P pointer ->
   { (JC_161:
     ((C_291: neq_int(sub_pointer(x_39, y_27), (0)))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   int32 reads char_P_alloc_table,int_P_alloc_table,int_P_tag_table
   writes int_P_int_M
   { (JC_163:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter multiple_update_wrong_1 :
 x_38:int_P pointer ->
  y_26:int_P pointer ->
   { (JC_149:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   int32 reads char_P_alloc_table,int_P_alloc_table,int_P_tag_table
   writes int_P_int_M
   { (JC_151:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter multiple_update_wrong_2 :
 i_4:int32 ->
  { (JC_154:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  { (JC_156:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter multiple_update_wrong_3 :
 i_5:int32 ->
  { (JC_157:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table writes int_P_int_M
  { (JC_159:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter null_ptr_safe :
 x_27:int_P pointer ->
  { (JC_85:
    ((C_150:
     ((le_int(offset_min(int_P_alloc_table, x_27), (0))
      and ge_int(offset_max(int_P_alloc_table, x_27), (0)))
     or (x_27 = null)))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc))))}
  int32
  reads char_P_alloc_table,int_P_alloc_table,int_P_int_M,int_P_tag_table
  { (JC_87:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter null_ptr_unsafe :
 x_26:int_P pointer ->
  { (JC_82:
    ((C_144:
     ((C_145: le_int(offset_min(int_P_alloc_table, x_26), (0)))
     and (C_146: ge_int(offset_max(int_P_alloc_table, x_26), (0)))))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc))))}
  int32
  reads char_P_alloc_table,int_P_alloc_table,int_P_int_M,int_P_tag_table
  { (JC_84:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter null_ptr_wrong :
 x_25:int_P pointer ->
  { (JC_79:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32
  reads char_P_alloc_table,int_P_alloc_table,int_P_int_M,int_P_tag_table
  { (JC_81:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter oob_pointer_safe :
 x_31:uint32 ->
  { (JC_110:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table,int_P_int_M
  { (JC_112:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter oob_pointer_unsafe :
 x_30:uint32 ->
  { (JC_107:
    ((C_206:
     ((C_207: le_int((0), integer_of_uint32(x_30)))
     and (C_208: lt_int(integer_of_uint32(x_30), (2)))))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc))))}
  int32 reads char_P_alloc_table,int_P_alloc_table,int_P_int_M
  { (JC_109:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter oob_pointer_wrong :
 x_29:uint32 ->
  { (JC_104:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table,int_P_int_M
  { (JC_106:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter order_of_arg_eval :
 tt:unit ->
  { (JC_183:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  { (JC_185:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter ptr_sub_safe :
 tt:unit ->
  { (JC_101:
    ((C_196: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc))))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  writes int_P_alloc_table,int_P_tag_table
  { (JC_103:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter ptr_sub_unsafe :
 x_28:int_P pointer ->
  y_25:int_P pointer ->
   { (JC_98:
     ((C_181:
      ((C_183: le_int(offset_min(int_P_alloc_table, x_28), (0)))
      and ((C_184: ge_int(offset_max(int_P_alloc_table, x_28), (0)))
          and ((C_186: le_int(offset_min(int_P_alloc_table, y_25), (0)))
              and (C_187: ge_int(offset_max(int_P_alloc_table, y_25), (0)))))))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   int32 reads char_P_alloc_table,int_P_alloc_table,int_P_tag_table
   { (JC_100:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter ptr_sub_wrong :
 tt:unit ->
  { (JC_95:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  writes int_P_alloc_table,int_P_tag_table
  { (JC_97:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter shift_left_signed_safe :
 x_14:int32 ->
  y_14:int32 ->
   { (JC_46:
     ((C_86: (true = true))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_48:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_left_signed_unsafe :
 x_13:int32 ->
  y_13:int32 ->
   { (JC_43:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_45:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_left_signed_wrong_1 :
 x_10:int32 ->
  y_10:int32 ->
   { (JC_34:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_36:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_left_signed_wrong_2 :
 x_11:int32 ->
  y_11:int32 ->
   { (JC_37:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_39:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_left_signed_wrong_3 :
 x_12:int32 ->
  y_12:int32 ->
   { (JC_40:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_42:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_left_unsigned_safe :
 x_17:uint32 ->
  y_17:uint32 ->
   { (JC_55:
     ((C_100: (true = true))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   uint32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_57:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_left_unsigned_unsafe :
 x_16:uint32 ->
  y_16:uint32 ->
   { (JC_52:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   uint32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_54:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_left_unsigned_wrong :
 x_15:uint32 ->
  y_15:uint32 ->
   { (JC_49:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   uint32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_51:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_right_signed_safe :
 x_21:int32 ->
  y_21:int32 ->
   { (JC_67:
     ((C_124: (true = true))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_69:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_right_signed_unsafe :
 x_20:int32 ->
  y_20:int32 ->
   { (JC_64:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_66:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_right_signed_wrong_1 :
 x_18:int32 ->
  y_18:int32 ->
   { (JC_58:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_60:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_right_signed_wrong_2 :
 x_19:int32 ->
  y_19:int32 ->
   { (JC_61:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   int32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_63:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_right_unsigned_safe :
 x_24:uint32 ->
  y_24:uint32 ->
   { (JC_76:
     ((C_138: (true = true))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   uint32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_78:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_right_unsigned_unsafe :
 x_23:uint32 ->
  y_23:uint32 ->
   { (JC_73:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   uint32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_75:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter shift_right_unsigned_wrong :
 x_22:uint32 ->
  y_22:uint32 ->
   { (JC_70:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   uint32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_72:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter signed_overflow_safe :
 x_34:int32 ->
  { (JC_137:
    ((C_249: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc))))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  { (JC_139:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter signed_overflow_unsafe :
 x_33:int32 ->
  { (JC_134:
    ((C_242: le_int(integer_of_int32(x_33), sub_int((2147483647), (10))))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc))))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  { (JC_136:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter signed_overflow_wrong :
 x_32:int32 ->
  { (JC_131:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table
  { (JC_133:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter stack_access_wrong :
 tt:unit ->
  { (JC_92:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32 reads char_P_alloc_table,int_P_alloc_table,int_P_int_M
  writes int_P_alloc_table,int_P_tag_table
  { (JC_94:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

parameter udiv0_safe :
 x_6:uint32 ->
  y_6:uint32 ->
   { (JC_22:
     ((C_33: (true = true))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   uint32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_24:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter udiv0_unsafe :
 x_5:uint32 ->
  y_5:uint32 ->
   { (JC_19:
     ((C_28: neq_int(integer_of_uint32(y_5), (0)))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))}
   uint32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_21:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter udiv0_wrong :
 x_4:uint32 ->
  y_4:uint32 ->
   { (JC_16:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc)))}
   uint32 reads char_P_alloc_table,int_P_alloc_table
   { (JC_18:
     (valid_a(a, int_P_alloc_table, a, __string_abc)
     and valid___string_abc(__string_abc, char_P_alloc_table, a,
         __string_abc))) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

parameter volatile_cast_wrong :
 ip:int_P pointer ->
  { (JC_186:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc)))}
  int32
  reads char_P_alloc_table,int_P_alloc_table,int_P_int_M,int_P_tag_table
  { (JC_188:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let array_bounds_safe_safety =
 fun (i_1 : uint32) ->
  { (JC_119:
    ((C_225: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_38 = ref (any_int32 void) in
     try
      (if ((lt_int_ (integer_of_uint32 i_1)) (2))
      then
       (let jessie_254 = (C_224:
                         begin
                           (let jessie_253 = (__retres_38 := (C_223:
                                                             (((((bound_acc_ !int_P_int_M) a) 
                                                                (integer_of_uint32 i_1)) (0)) (1)))) in
                           void);
                          (raise (Goto_return_label_exc void))
                         end) in
       void)
      else
       (let jessie_256 = (C_222:
                         begin
                           (let jessie_255 = (__retres_38 := ((safe_acc_ !int_P_int_M) 
                                                              ((shift a) (0)))) in
                           void);
                          (raise (Goto_return_label_exc void))
                         end) in
       void))
      with
      Goto_return_label_exc jessie_15 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_38); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_121:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let array_bounds_unsafe_safety =
 fun (i_0 : uint32) ->
  { (JC_116:
    ((C_220: lt_int(integer_of_uint32(i_0), (2)))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_37 = ref (any_int32 void) in
     (C_219:
     begin
       (let jessie_251 = (__retres_37 := (C_218:
                                         (((((bound_acc_ !int_P_int_M) a) 
                                            (integer_of_uint32 i_0)) (0)) (1)))) in
       void);
      (jessie_returned_value := !__retres_37);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_118:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let array_bounds_wrong_safety =
 fun (i : uint32) ->
  { (JC_113:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_36 = ref (any_int32 void) in
     (C_217:
     begin
       (let jessie_249 = (__retres_36 := (C_216:
                                         (((((bound_acc_ !int_P_int_M) a) 
                                            (integer_of_uint32 (C_215:
                                                               (uint32_of_integer_ 
                                                                (C_214:
                                                                ((add_int (2)) 
                                                                 (integer_of_uint32 i))))))) (0)) (1)))) in
       void);
      (jessie_returned_value := !__retres_36);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_115:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let bad_local_pointer_ensures_default =
 fun (tt : unit) ->
  { (JC_88:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_pointer void) in
  try
   begin
     (let x_41 = ref (any_pointer void) in
     (let __retres_28 = ref (any_pointer void) in
     (C_152:
     begin
       (let jessie_187 = (let jessie_186 = (C_151:
                                           (((alloc_one_int_P void) int_P_alloc_table) int_P_alloc_table)) in
                         (x_41 := (C_151:
                                  (((alloc_one_int_P void) int_P_alloc_table) int_P_alloc_table)))) in
       void);
      (C_153:
      begin
        (let jessie_189 = (__retres_28 := !x_41) in void);
       (C_154:
       begin
         ((free_parameter int_P_alloc_table) !x_41);
        (jessie_returned_value := !__retres_28);
        (raise Return)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_91:
     ((C_155:
      ((C_156: le_int(offset_min(int_P_alloc_table, result), (0)))
      and (C_157: ge_int(offset_max(int_P_alloc_table, result), (0)))))
     and (valid_a(a, int_P_alloc_table, a, __string_abc)
         and valid___string_abc(__string_abc, char_P_alloc_table, a,
             __string_abc))))) }

let bad_local_pointer_safety =
 fun (tt : unit) ->
  { (JC_88:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_pointer void) in
  try
   begin
     (let x_41 = ref (any_pointer void) in
     (let __retres_28 = ref (any_pointer void) in
     (C_152:
     begin
       (let jessie_182 = (let jessie_181 = (C_151:
                                           (((alloc_one_int_P void) int_P_alloc_table) int_P_alloc_table)) in
                         (assert
                         { ge_int(offset_max(int_P_alloc_table, jessie_181),
                           (0)) };
                         (x_41 := (C_151:
                                  (((alloc_one_int_P void) int_P_alloc_table) int_P_alloc_table))))) in
       void);
      (C_153:
      begin
        (let jessie_184 = (__retres_28 := !x_41) in void);
       (C_154:
       begin
         ((free_parameter int_P_alloc_table) !x_41);
        (jessie_returned_value := !__retres_28);
        (raise Return)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_90:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let const_cast_wrong_safety =
 fun (ip_0 : int_P pointer) ->
  { (JC_189:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let x_49 = (any_pointer void) in
     (let __retres_49 = ref (any_int32 void) in
     (let __jc_off_x_3 = ref (any_int32 void) in
     (C_322:
     begin
       (let jessie_387 = (__jc_off_x_3 := (safe_int32_of_integer_ (0))) in
       void);
      (C_325:
      begin
        (let jessie_390 = (let jessie_388 = (C_323:
                                            ((shift ip_0) (integer_of_int32 !__jc_off_x_3))) in
                          (let jessie_389 = (safe_int32_of_integer_ (1)) in
                          (JC_192:
                          (((((offset_upd_ !int_P_alloc_table) int_P_int_M) ip_0) 
                            (integer_of_int32 !__jc_off_x_3)) jessie_389)))) in
        void);
       (C_326:
       begin
         (let jessie_391 = (__retres_49 := (safe_int32_of_integer_ (1))) in
         void);
        (jessie_returned_value := !__retres_49);
        (raise Return)
       end)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_191:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let div0_safe_pos_safety =
 fun (x_3 : int32) (y_3 : int32) ->
  { (JC_13:
    ((C_21: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_3 = ref (any_int32 void) in
     try
      (if ((le_int_ (integer_of_int32 y_3)) (0))
      then
       (let jessie_36 = (C_20:
                        begin
                          (let jessie_35 = (__retres_3 := (safe_int32_of_integer_ (0))) in
                          void);
                         (raise (Goto_return_label_exc void))
                        end) in
       void)
      else
       (let jessie_38 = (C_19:
                        begin
                          (let jessie_37 = (__retres_3 := (C_18:
                                                          (int32_of_integer_ 
                                                           (C_17:
                                                           ((div_int_ 
                                                             (integer_of_int32 x_3)) 
                                                            (integer_of_int32 y_3)))))) in
                          void);
                         (raise (Goto_return_label_exc void))
                        end) in
       void))
      with
      Goto_return_label_exc jessie_2 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_3); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_15:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let div0_safe_safety =
 fun (x_2 : int32) (y_2 : int32) ->
  { (JC_10:
    ((C_16: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_2 = ref (any_int32 void) in
     try
      (if ((eq_int_ (integer_of_int32 y_2)) (0))
      then
       (let jessie_28 = (C_15:
                        begin
                          (let jessie_27 = (__retres_2 := (safe_int32_of_integer_ (0))) in
                          void);
                         (raise (Goto_return_label_exc void))
                        end) in
       void)
      else
       (let jessie_30 = (C_14:
                        begin
                          (let jessie_29 = (__retres_2 := (C_13:
                                                          (int32_of_integer_ 
                                                           (C_12:
                                                           ((div_int_ 
                                                             (integer_of_int32 x_2)) 
                                                            (integer_of_int32 y_2)))))) in
                          void);
                         (raise (Goto_return_label_exc void))
                        end) in
       void))
      with
      Goto_return_label_exc jessie_1 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_2); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_12:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let div0_unsafe_pos_safety =
 fun (x_1 : int32) (y_1 : int32) ->
  { (JC_7:
    ((C_11: gt_int(integer_of_int32(y_1), (0)))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_1 = ref (any_int32 void) in
     (C_10:
     begin
       (let jessie_25 = (__retres_1 := (C_9:
                                       (int32_of_integer_ (C_8:
                                                          ((div_int_ 
                                                            (integer_of_int32 x_1)) 
                                                           (integer_of_int32 y_1)))))) in
       void);
      (jessie_returned_value := !__retres_1);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_9:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let div0_unsafe_safety =
 fun (x_0 : int32) (y_0 : int32) ->
  { (JC_4:
    ((C_7: neq_int(integer_of_int32(y_0), (0)))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_0 = ref (any_int32 void) in
     (C_6:
     begin
       (let jessie_23 = (__retres_0 := (C_5:
                                       (int32_of_integer_ (C_4:
                                                          ((div_int_ 
                                                            (integer_of_int32 x_0)) 
                                                           (integer_of_int32 y_0)))))) in
       void);
      (jessie_returned_value := !__retres_0);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_6:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let div0_wrong_safety =
 fun (x : int32) (y : int32) ->
  { (JC_1:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (C_3:
     begin
       (let jessie_21 = (__retres := (C_2:
                                     (int32_of_integer_ (C_1:
                                                        ((div_int_ (integer_of_int32 x)) (0)))))) in
       void);
      (jessie_returned_value := !__retres);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_3:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let initialization_safe_safety =
 fun (i_3 : int32) ->
  { (JC_128:
    ((C_230: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let x_47 = ref (any_int32 void) in
     begin
       (let jessie_263 = (if ((neq_int_ (integer_of_int32 i_3)) (0))
                         then
                          (C_229:
                          begin
                            (x_47 := (safe_int32_of_integer_ (1))); !x_47
                          end)
                         else
                          (C_228:
                          begin
                            (x_47 := (safe_int32_of_integer_ (2))); !x_47
                          end)) in
       void);
      (jessie_returned_value := !x_47);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_130:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let initialization_unsafe_safety =
 fun (i_2 : int32) ->
  { (JC_125:
    ((C_227: neq_int(integer_of_int32(i_2), (0)))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let x_46 = ref (any_int32 void) in
     begin
       (if ((neq_int_ (integer_of_int32 i_2)) (0))
       then
        (C_226:
        (let jessie_261 = (x_46 := (safe_int32_of_integer_ (1))) in void))
       else void);
      (jessie_returned_value := !x_46);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_127:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let initialization_wrong_safety =
 fun (tt : unit) ->
  { (JC_122:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let x_45 = (any_int32 void) in
     begin   (jessie_returned_value := x_45); (raise Return) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_124:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let missing_return_safe_safety =
 fun (x_37 : int32) ->
  { (JC_146:
    ((C_256: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_44 = ref (any_int32 void) in
     try
      (if ((lt_int_ (integer_of_int32 x_37)) (0))
      then
       (let jessie_292 = (C_255:
                         begin
                           (let jessie_291 = (__retres_44 := (safe_int32_of_integer_ (0))) in
                           void);
                          (raise (Goto_return_label_exc void))
                         end) in
       void)
      else
       (let jessie_294 = (C_254:
                         begin
                           (let jessie_293 = (__retres_44 := (safe_int32_of_integer_ (1))) in
                           void);
                          (raise (Goto_return_label_exc void))
                         end) in
       void))
      with
      Goto_return_label_exc jessie_19 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_44); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_148:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let missing_return_unsafe_safety =
 fun (x_36 : int32) ->
  { (JC_143:
    ((C_253: lt_int(integer_of_int32(x_36), (0)))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_43 = ref (any_int32 void) in
     try
      (let jessie_287 = begin
                          (if ((lt_int_ (integer_of_int32 x_36)) (0))
                          then
                           (let jessie_286 = (C_251:
                                             begin
                                               (let jessie_285 = (__retres_43 := 
                                                                  (safe_int32_of_integer_ (0))) in
                                               void);
                                              (raise
                                               (Goto_return_label_exc
                                               void))
                                             end) in
                           void)
                          else void);
                         (C_252:
                         begin
                           (__retres_43 := (safe_int32_of_integer_ (0)));
                          !__retres_43
                         end)
                        end in
      void)
      with
      Goto_return_label_exc jessie_18 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_43); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_145:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let missing_return_wrong_safety =
 fun (x_35 : int32) ->
  { (JC_140:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_42 = ref (any_int32 void) in
     (C_250:
     begin
       (let jessie_283 = (__retres_42 := (safe_int32_of_integer_ (0))) in
       void);
      (jessie_returned_value := !__retres_42);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_142:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let mod0_safe_safety =
 fun (x_9 : int32) (y_9 : int32) ->
  { (JC_31:
    ((C_45: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_9 = ref (any_int32 void) in
     try
      (if ((eq_int_ (integer_of_int32 y_9)) (0))
      then
       (let jessie_60 = (C_44:
                        begin
                          (let jessie_59 = (__retres_9 := (safe_int32_of_integer_ (0))) in
                          void);
                         (raise (Goto_return_label_exc void))
                        end) in
       void)
      else
       (let jessie_62 = (C_43:
                        begin
                          (let jessie_61 = (__retres_9 := (C_42:
                                                          (int32_of_integer_ 
                                                           (C_41:
                                                           ((mod_int_ 
                                                             (integer_of_int32 x_9)) 
                                                            (integer_of_int32 y_9)))))) in
                          void);
                         (raise (Goto_return_label_exc void))
                        end) in
       void))
      with
      Goto_return_label_exc jessie_4 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_9); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_33:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let mod0_unsafe_safety =
 fun (x_8 : int32) (y_8 : int32) ->
  { (JC_28:
    ((C_40: neq_int(integer_of_int32(y_8), (0)))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_8 = ref (any_int32 void) in
     (C_39:
     begin
       (let jessie_57 = (__retres_8 := (C_38:
                                       (int32_of_integer_ (C_37:
                                                          ((mod_int_ 
                                                            (integer_of_int32 x_8)) 
                                                           (integer_of_int32 y_8)))))) in
       void);
      (jessie_returned_value := !__retres_8);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_30:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let mod0_wrong_safety =
 fun (x_7 : int32) (y_7 : int32) ->
  { (JC_25:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_7 = ref (any_int32 void) in
     (C_36:
     begin
       (let jessie_55 = (__retres_7 := (C_35:
                                       (int32_of_integer_ (C_34:
                                                          ((mod_int_ 
                                                            (integer_of_int32 x_7)) (0)))))) in
       void);
      (jessie_returned_value := !__retres_7);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_27:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let mod_string_safety =
 fun (tt : unit) ->
  { (JC_193:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  try
   begin
     (let str = ref (any_pointer void) in
     (C_327:
     begin
       (let jessie_398 = (str := __string_abc) in void);
      (C_330:
      begin
        (let jessie_401 = (let jessie_399 = (C_328: ((shift !str) (2))) in
                          (let jessie_400 = (safe_int8_of_integer_ (122)) in
                          (JC_196:
                          (((((offset_upd_ !char_P_alloc_table) char_P_char_M) !str) (2)) jessie_400)))) in
        void);
       (raise Return)
      end)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_195:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let multiple_update_safe_safety =
 fun (x_40 : int_P pointer) (y_28 : int_P pointer) ->
  { (JC_166:
    ((C_308: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let tmp_3 = ref (any_int32 void) in
     (let tmp_0_1 = ref (any_int32 void) in
     (let __retres_47 = ref (any_int32 void) in
     (let __jc_off_y_4 = ref (any_int32 void) in
     try
      (C_294:
      begin
        (let jessie_351 = (__jc_off_y_4 := (C_293:
                                           (int32_of_integer_ (C_292:
                                                              ((sub_pointer y_28) x_40))))) in
        void);
       (if ((eq_int_ (integer_of_int32 (C_307:
                                       (int32_of_integer_ (neg_int (integer_of_int32 !__jc_off_y_4)))))) (0))
       then
        (let jessie_353 = (C_305:
                          begin
                            (let jessie_352 = (__retres_47 := (safe_int32_of_integer_ (0))) in
                            void);
                           (raise (Goto_return_label_exc void))
                          end) in
        void)
       else
        (let jessie_363 = (C_295:
                          begin
                            (let jessie_354 = (tmp_3 := (safe_int32_of_integer_ (0))) in
                            void);
                           (C_297:
                           begin
                             (let jessie_357 = (let jessie_355 = x_40 in
                                               (let jessie_356 = !tmp_3 in
                                               (JC_169:
                                               ((((upd_ !int_P_alloc_table) int_P_int_M) x_40) jessie_356)))) in
                             void);
                            (C_298:
                            begin
                              (let jessie_358 = (tmp_0_1 := (safe_int32_of_integer_ (0))) in
                              void);
                             (C_301:
                             begin
                               (let jessie_361 = (let jessie_359 = (C_299:
                                                                   ((shift x_40) 
                                                                    (integer_of_int32 !__jc_off_y_4))) in
                                                 (let jessie_360 = !tmp_0_1 in
                                                 (JC_170:
                                                 (((((offset_upd_ !int_P_alloc_table) int_P_int_M) x_40) 
                                                   (integer_of_int32 !__jc_off_y_4)) jessie_360)))) in
                               void);
                              (C_304:
                              begin
                                (let jessie_362 = (__retres_47 := (C_303:
                                                                  (int32_of_integer_ 
                                                                   (C_302:
                                                                   ((add_int 
                                                                    (integer_of_int32 !tmp_3)) 
                                                                    (integer_of_int32 !tmp_0_1)))))) in
                                void);
                               (raise (Goto_return_label_exc void))
                              end)
                             end)
                            end)
                           end)
                          end) in
        void))
      end)
      with
      Goto_return_label_exc jessie_20 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_47); (raise Return) end) end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_168:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let multiple_update_unsafe_safety =
 fun (x_39 : int_P pointer) (y_27 : int_P pointer) ->
  { (JC_161:
    ((C_291: neq_int(sub_pointer(x_39, y_27), (0)))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let tmp_2 = ref (any_int32 void) in
     (let tmp_0_0 = ref (any_int32 void) in
     (let __retres_46 = ref (any_int32 void) in
     (let __jc_off_y_3 = ref (any_int32 void) in
     (C_280:
     begin
       (let jessie_331 = (__jc_off_y_3 := (C_279:
                                          (int32_of_integer_ (C_278:
                                                             ((sub_pointer y_27) x_39))))) in
       void);
      (C_281:
      begin
        (let jessie_332 = (tmp_2 := (safe_int32_of_integer_ (0))) in void);
       (C_283:
       begin
         (let jessie_335 = (let jessie_333 = x_39 in
                           (let jessie_334 = !tmp_2 in
                           (JC_164:
                           ((((upd_ !int_P_alloc_table) int_P_int_M) x_39) jessie_334)))) in
         void);
        (C_284:
        begin
          (let jessie_336 = (tmp_0_0 := (safe_int32_of_integer_ (0))) in
          void);
         (C_287:
         begin
           (let jessie_339 = (let jessie_337 = (C_285:
                                               ((shift x_39) (integer_of_int32 !__jc_off_y_3))) in
                             (let jessie_338 = !tmp_0_0 in
                             (JC_165:
                             (((((offset_upd_ !int_P_alloc_table) int_P_int_M) x_39) 
                               (integer_of_int32 !__jc_off_y_3)) jessie_338)))) in
           void);
          (C_290:
          begin
            (let jessie_340 = (__retres_46 := (C_289:
                                              (int32_of_integer_ (C_288:
                                                                 ((add_int 
                                                                   (integer_of_int32 !tmp_2)) 
                                                                  (integer_of_int32 !tmp_0_0)))))) in
            void);
           (jessie_returned_value := !__retres_46);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end)))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_163:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let multiple_update_wrong_1_safety =
 fun (x_38 : int_P pointer) (y_26 : int_P pointer) ->
  { (JC_149:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let tmp = ref (any_int32 void) in
     (let tmp_0 = ref (any_int32 void) in
     (let __retres_45 = ref (any_int32 void) in
     (C_257:
     begin
       (let jessie_299 = (tmp := (safe_int32_of_integer_ (0))) in void);
      (C_259:
      begin
        (let jessie_302 = (let jessie_300 = x_38 in
                          (let jessie_301 = !tmp in
                          (JC_152:
                          ((((upd_ !int_P_alloc_table) int_P_int_M) x_38) jessie_301)))) in
        void);
       (C_260:
       begin
         (let jessie_303 = (tmp_0 := (safe_int32_of_integer_ (0))) in void);
        (C_262:
        begin
          (let jessie_306 = (let jessie_304 = x_38 in
                            (let jessie_305 = !tmp_0 in
                            (JC_153:
                            ((((upd_ !int_P_alloc_table) int_P_int_M) x_38) jessie_305)))) in
          void);
         (C_265:
         begin
           (let jessie_307 = (__retres_45 := (C_264:
                                             (int32_of_integer_ (C_263:
                                                                ((add_int 
                                                                  (integer_of_int32 !tmp)) 
                                                                 (integer_of_int32 !tmp_0)))))) in
           void);
          (jessie_returned_value := !__retres_45);
          (raise Return)
         end)
        end)
       end)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_151:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let multiple_update_wrong_2_safety =
 fun (i_4 : int32) ->
  { (JC_154:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (let mutable_i_4 = ref i_4 in
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (C_268:
     begin
       (let jessie_317 = (mutable_i_4 := (C_267:
                                         (int32_of_integer_ (C_266:
                                                            ((add_int 
                                                              (integer_of_int32 !mutable_i_4)) (1)))))) in
       void);
      (C_271:
      begin
        (let jessie_318 = (mutable_i_4 := (C_270:
                                          (int32_of_integer_ (C_269:
                                                             ((add_int 
                                                               (integer_of_int32 !mutable_i_4)) (1)))))) in
        void);
       (jessie_returned_value := !mutable_i_4);
       (raise Return)
      end)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end)))
  { (JC_156:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let multiple_update_wrong_3_safety =
 fun (i_5 : int32) ->
  { (JC_157:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (let mutable_i_5 = ref i_5 in
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let tmp_1 = ref (any_int32 void) in
     (C_272:
     begin
       (let jessie_321 = (tmp_1 := !mutable_i_5) in void);
      (C_275:
      begin
        (let jessie_322 = (mutable_i_5 := (C_274:
                                          (int32_of_integer_ (C_273:
                                                             ((add_int 
                                                               (integer_of_int32 !mutable_i_5)) (1)))))) in
        void);
       (C_277:
       begin
         (let jessie_325 = (let jessie_323 = ((shift a) (integer_of_int32 !tmp_1)) in
                           (let jessie_324 = !mutable_i_5 in
                           (JC_160:
                           ((((((bound_upd_ int_P_int_M) a) (integer_of_int32 !tmp_1)) (0)) (1)) jessie_324)))) in
         void);
        (jessie_returned_value := !mutable_i_5);
        (raise Return)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end)))
  { (JC_159:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let null_ptr_safe_safety =
 fun (x_27 : int_P pointer) ->
  { (JC_85:
    ((C_150:
     ((le_int(offset_min(int_P_alloc_table, x_27), (0))
      and ge_int(offset_max(int_P_alloc_table, x_27), (0)))
     or (x_27 = null)))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_27 = ref (any_int32 void) in
     try
      (if ((eq_pointer x_27) null)
      then
       (let jessie_174 = (C_149:
                         begin
                           (let jessie_173 = (__retres_27 := (safe_int32_of_integer_ (0))) in
                           void);
                          (raise (Goto_return_label_exc void))
                         end) in
       void)
      else
       (let jessie_176 = (C_148:
                         begin
                           (let jessie_175 = (__retres_27 := (C_147:
                                                             (((acc_ !int_P_alloc_table) !int_P_int_M) x_27))) in
                           void);
                          (raise (Goto_return_label_exc void))
                         end) in
       void))
      with
      Goto_return_label_exc jessie_13 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_27); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_87:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let null_ptr_unsafe_safety =
 fun (x_26 : int_P pointer) ->
  { (JC_82:
    ((C_144:
     ((C_145: le_int(offset_min(int_P_alloc_table, x_26), (0)))
     and (C_146: ge_int(offset_max(int_P_alloc_table, x_26), (0)))))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_26 = ref (any_int32 void) in
     (C_143:
     begin
       (let jessie_171 = (__retres_26 := (C_142:
                                         (((acc_ !int_P_alloc_table) !int_P_int_M) x_26))) in
       void);
      (jessie_returned_value := !__retres_26);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_84:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let null_ptr_wrong_safety =
 fun (x_25 : int_P pointer) ->
  { (JC_79:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (let mutable_x_25 = ref x_25 in
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_25 = ref (any_int32 void) in
     (C_139:
     begin
       (let jessie_166 = (mutable_x_25 := null) in void);
      (C_141:
      begin
        (let jessie_167 = (__retres_25 := (C_140:
                                          (((acc_ !int_P_alloc_table) !int_P_int_M) !mutable_x_25))) in
        void);
       (jessie_returned_value := !__retres_25);
       (raise Return)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end)))
  { (JC_81:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let oob_pointer_safe_safety =
 fun (x_31 : uint32) ->
  { (JC_110:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let i_15 = ref (any_pointer void) in
     (let __retres_35 = ref (any_int32 void) in
     try
      (if ((lt_int_ (integer_of_uint32 x_31)) (2))
      then
       (let jessie_240 = (C_211:
                         begin
                           (let jessie_238 = (i_15 := (C_210:
                                                      ((shift a) (integer_of_uint32 x_31)))) in
                           void);
                          (C_213:
                          begin
                            (let jessie_239 = (__retres_35 := (C_212:
                                                              (((acc_ !int_P_alloc_table) !int_P_int_M) !i_15))) in
                            void);
                           (raise (Goto_return_label_exc void))
                          end)
                         end) in
       void)
      else
       (let jessie_242 = (C_209:
                         begin
                           (let jessie_241 = (__retres_35 := (safe_int32_of_integer_ (0))) in
                           void);
                          (raise (Goto_return_label_exc void))
                         end) in
       void))
      with
      Goto_return_label_exc jessie_14 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_35); (raise Return) end) end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_112:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let oob_pointer_unsafe_safety =
 fun (x_30 : uint32) ->
  { (JC_107:
    ((C_206:
     ((C_207: le_int((0), integer_of_uint32(x_30)))
     and (C_208: lt_int(integer_of_uint32(x_30), (2)))))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let i_14 = ref (any_pointer void) in
     (let __retres_34 = ref (any_int32 void) in
     (C_203:
     begin
       (let jessie_232 = (i_14 := (C_202:
                                  ((shift a) (integer_of_uint32 x_30)))) in
       void);
      (C_205:
      begin
        (let jessie_233 = (__retres_34 := (C_204:
                                          (((acc_ !int_P_alloc_table) !int_P_int_M) !i_14))) in
        void);
       (jessie_returned_value := !__retres_34);
       (raise Return)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_109:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let oob_pointer_wrong_safety =
 fun (x_29 : uint32) ->
  { (JC_104:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let i_13 = ref (any_pointer void) in
     (let __retres_33 = ref (any_int32 void) in
     (C_199:
     begin
       (let jessie_226 = (i_13 := (C_198:
                                  ((shift (C_197:
                                          ((shift a) (integer_of_uint32 x_29)))) (2)))) in
       void);
      (C_201:
      begin
        (let jessie_227 = (__retres_33 := (C_200:
                                          (((acc_ !int_P_alloc_table) !int_P_int_M) !i_13))) in
        void);
       (jessie_returned_value := !__retres_33);
       (raise Return)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_106:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let order_of_arg_eval_safety =
 fun (tt : unit) ->
  { (JC_183:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let tmp_4 = ref (any_int32 void) in
     (let tmp_0_2 = ref (any_int32 void) in
     (let tmp_1_0 = ref (any_int32 void) in
     (C_313:
     begin
       (let jessie_377 = (tmp_4 := (C_312: (baz void))) in void);
      (C_315:
      begin
        (let jessie_378 = (tmp_0_2 := (C_314: (bar void))) in void);
       (C_317:
       begin
         (let jessie_379 = (tmp_1_0 := (C_316: ((foo !tmp_0_2) !tmp_4))) in
         void);
        (jessie_returned_value := !tmp_1_0);
        (raise Return)
       end)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_185:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let ptr_sub_safe_safety =
 fun (tt : unit) ->
  { (JC_101:
    ((C_196: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let a_0_0 = ref (any_pointer void) in
     (let x_44 = (any_pointer void) in
     (let y_30 = (any_pointer void) in
     (let __retres_32 = ref (any_int32 void) in
     (let __jc_off_x_1 = ref (any_int32 void) in
     (let __jc_off_y_2 = ref (any_int32 void) in
     (C_189:
     begin
       (let jessie_216 = (let jessie_215 = (C_188:
                                           (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table)) in
                         (assert
                         { ge_int(offset_max(int_P_alloc_table, jessie_215),
                           (2)) };
                         (a_0_0 := (C_188:
                                   (((alloc_int_P (3)) int_P_alloc_table) int_P_alloc_table))))) in
       void);
      (C_190:
      begin
        (let jessie_217 = (__jc_off_x_1 := (safe_int32_of_integer_ (2))) in
        void);
       (C_191:
       begin
         (let jessie_218 = (__jc_off_y_2 := (safe_int32_of_integer_ (0))) in
         void);
        (C_194:
        begin
          (let jessie_219 = (__retres_32 := (C_193:
                                            (int32_of_integer_ (C_192:
                                                               ((sub_int 
                                                                 (integer_of_int32 !__jc_off_x_1)) 
                                                                (integer_of_int32 !__jc_off_y_2)))))) in
          void);
         (C_195:
         begin
           ((free_parameter int_P_alloc_table) !a_0_0);
          (jessie_returned_value := !__retres_32);
          (raise Return)
         end)
        end)
       end)
      end)
     end)))))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_103:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let ptr_sub_unsafe_safety =
 fun (x_28 : int_P pointer) (y_25 : int_P pointer) ->
  { (JC_98:
    ((C_181:
     ((C_183: le_int(offset_min(int_P_alloc_table, x_28), (0)))
     and ((C_184: ge_int(offset_max(int_P_alloc_table, x_28), (0)))
         and ((C_186: le_int(offset_min(int_P_alloc_table, y_25), (0)))
             and (C_187: ge_int(offset_max(int_P_alloc_table, y_25), (0)))))))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_31 = ref (any_int32 void) in
     (let __jc_off_y_1 = ref (any_int32 void) in
     (C_177:
     begin
       (let jessie_211 = (__jc_off_y_1 := (C_176:
                                          (int32_of_integer_ (C_175:
                                                             ((sub_pointer y_25) x_28))))) in
       void);
      (C_180:
      begin
        (let jessie_212 = (__retres_31 := (C_179:
                                          (int32_of_integer_ (neg_int 
                                                              (integer_of_int32 !__jc_off_y_1))))) in
        void);
       (jessie_returned_value := !__retres_31);
       (raise Return)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_100:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let ptr_sub_wrong_safety =
 fun (tt : unit) ->
  { (JC_95:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let a_0 = ref (any_pointer void) in
     (let b = ref (any_pointer void) in
     (let x_43 = (any_pointer void) in
     (let y_29 = (any_pointer void) in
     (let __retres_30 = ref (any_int32 void) in
     (let __jc_off_x = ref (any_int32 void) in
     (let __jc_off_y = ref (any_int32 void) in
     (C_163:
     begin
       (let jessie_198 = (let jessie_197 = (C_162:
                                           (((alloc_int_P (20)) int_P_alloc_table) int_P_alloc_table)) in
                         (assert
                         { ge_int(offset_max(int_P_alloc_table, jessie_197),
                           (19)) };
                         (a_0 := (C_162:
                                 (((alloc_int_P (20)) int_P_alloc_table) int_P_alloc_table))))) in
       void);
      (C_165:
      begin
        (let jessie_200 = (let jessie_199 = (C_164:
                                            (((alloc_int_P (10)) int_P_alloc_table) int_P_alloc_table)) in
                          (assert
                          { ge_int(offset_max(int_P_alloc_table, jessie_199),
                            (9)) };
                          (b := (C_164:
                                (((alloc_int_P (10)) int_P_alloc_table) int_P_alloc_table))))) in
        void);
       (C_166:
       begin
         (let jessie_201 = (__jc_off_x := (safe_int32_of_integer_ (2))) in
         void);
        (C_167:
        begin
          (let jessie_202 = (__jc_off_y := (safe_int32_of_integer_ (0))) in
          void);
         (C_172:
         begin
           (let jessie_203 = (__retres_30 := (C_171:
                                             (int32_of_integer_ (C_170:
                                                                ((sub_pointer 
                                                                  (C_169:
                                                                  ((shift !a_0) 
                                                                   (integer_of_int32 !__jc_off_x)))) 
                                                                 (C_168:
                                                                 ((shift !b) 
                                                                  (integer_of_int32 !__jc_off_y)))))))) in
           void);
          (C_173:
          begin
            ((free_parameter int_P_alloc_table) !a_0);
           (C_174:
           begin
             ((free_parameter int_P_alloc_table) !b);
            (jessie_returned_value := !__retres_30);
            (raise Return)
           end)
          end)
         end)
        end)
       end)
      end)
     end))))))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_97:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_left_signed_safe_safety =
 fun (x_14 : int32) (y_14 : int32) ->
  { (JC_46:
    ((C_86: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_14 = ref (any_int32 void) in
     try
      try
       try
        try
         (let jessie_87 = begin
                            (if ((lt_int_ (integer_of_int32 x_14)) (0))
                            then
                             (let jessie_76 = (C_81:
                                              begin
                                                (let jessie_75 = (__retres_14 := 
                                                                  (safe_int32_of_integer_ (0))) in
                                                void);
                                               (raise
                                                (Goto_return_label_exc
                                                void))
                                              end) in
                             void)
                            else
                             (if ((lt_int_ (integer_of_int32 y_14)) (0))
                             then
                              (let jessie_78 = (C_80:
                                               begin
                                                 (let jessie_77 = (__retres_14 := 
                                                                   (safe_int32_of_integer_ (0))) in
                                                 void);
                                                (raise
                                                 (Goto_return_label_exc
                                                 void))
                                               end) in
                              void)
                             else
                              (if ((ge_int_ (integer_of_uint32 (C_79:
                                                               (uint32_of_integer_ 
                                                                (integer_of_int32 y_14))))) (32))
                              then
                               (let jessie_80 = (C_78:
                                                begin
                                                  (let jessie_79 = (__retres_14 := 
                                                                    (safe_int32_of_integer_ (0))) in
                                                  void);
                                                 (raise
                                                  (Goto_return_label_exc
                                                  void))
                                                end) in
                               void)
                              else
                               begin
                                 (assert
                                 { (C_66:
                                   ge_int(integer_of_int32(y_14), (0))) };
                                 void);
                                (assert
                                { (C_67:
                                  lt_int(integer_of_int32(y_14), (32))) };
                                void);
                                (if ((gt_int_ (integer_of_int32 x_14)) 
                                     (integer_of_int32 (C_77:
                                                       (int32_of_integer_ 
                                                        (C_76:
                                                        ((asr (2147483647)) 
                                                         (integer_of_int32 y_14)))))))
                                then
                                 (let jessie_82 = (C_75:
                                                  begin
                                                    (let jessie_81 = 
                                                    (__retres_14 := (safe_int32_of_integer_ (0))) in
                                                    void);
                                                   (raise
                                                    (Goto_return_label_exc
                                                    void))
                                                  end) in
                                 void)
                                else
                                 (let jessie_84 = begin
                                                    (let jessie_83 = 
                                                    begin
                                                      (assert
                                                      { (C_68:
                                                        ge_int(integer_of_int32(y_14),
                                                        (0))) };
                                                      void);
                                                     (assert
                                                     { (C_69:
                                                       lt_int(integer_of_int32(y_14),
                                                       (32))) };
                                                     void);
                                                     (assert
                                                     { (C_70:
                                                       ge_int(integer_of_int32(x_14),
                                                       (0))) };
                                                     void);
                                                     (assert
                                                     { (C_71:
                                                       le_int(integer_of_int32(x_14),
                                                       asr((2147483647),
                                                       integer_of_int32(y_14)))) };
                                                     void);
                                                     (C_74:
                                                     begin
                                                       (__retres_14 := 
                                                        (C_73:
                                                        (int32_of_integer_ 
                                                         (C_72:
                                                         ((lsl (integer_of_int32 x_14)) 
                                                          (integer_of_int32 y_14))))));
                                                      !__retres_14
                                                     end)
                                                    end in
                                                    void);
                                                   (raise
                                                    (Goto_return_label_exc
                                                    void))
                                                  end in
                                 void))
                               end)));
                           (let jessie_85 = (raise (Goto__L_1_exc void)) in
                           void);
                           (C_82:
                           begin
                             (let jessie_86 = (__retres_14 := (safe_int32_of_integer_ (0))) in
                             void);
                            (raise (Goto_return_label_exc void))
                           end)
                          end in
         void)
         with
         Goto__L_1_exc jessie_5 ->
         (let jessie_90 = (_L_1:
                          begin
                            void;
                           (let jessie_88 = (raise (Goto__L_0_exc void)) in
                           void);
                           (C_83:
                           begin
                             (let jessie_89 = (__retres_14 := (safe_int32_of_integer_ (0))) in
                             void);
                            (raise (Goto_return_label_exc void))
                           end)
                          end) in
         void) end
        with
        Goto__L_0_exc jessie_6 ->
        (let jessie_93 = (_L_0:
                         begin
                           void;
                          (let jessie_91 = (raise (Goto__L_exc void)) in
                          void);
                          (C_84:
                          begin
                            (let jessie_92 = (__retres_14 := (safe_int32_of_integer_ (0))) in
                            void);
                           (raise (Goto_return_label_exc void))
                          end)
                         end) in
        void) end
       with
       Goto__L_exc jessie_7 ->
       (let jessie_94 = (_L:
                        begin
                          void;
                         (C_85:
                         begin
                           (__retres_14 := (safe_int32_of_integer_ (0)));
                          !__retres_14
                         end)
                        end) in
       void) end
      with
      Goto_return_label_exc jessie_8 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_14); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_48:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_left_signed_unsafe_safety =
 fun (x_13 : int32) (y_13 : int32) ->
  { (JC_43:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_13 = ref (any_int32 void) in
     begin
       (let jessie_73 = begin
                          (assert
                          { (C_59: ge_int(integer_of_int32(y_13), (0))) };
                          void);
                         (assert
                         { (C_60: lt_int(integer_of_int32(y_13), (32))) };
                         void);
                         (assert
                         { (C_61: ge_int(integer_of_int32(x_13), (0))) };
                         void);
                         (assert
                         { (C_62:
                           le_int(integer_of_int32(x_13),
                           asr((2147483647), integer_of_int32(y_13)))) };
                         void);
                         (C_65:
                         begin
                           (__retres_13 := (C_64:
                                           (int32_of_integer_ (C_63:
                                                              ((lsl (integer_of_int32 x_13)) 
                                                               (integer_of_int32 y_13))))));
                          !__retres_13
                         end)
                        end in
       void);
      (jessie_returned_value := !__retres_13);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_45:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_left_signed_wrong_1_safety =
 fun (x_10 : int32) (y_10 : int32) ->
  { (JC_34:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_10 = ref (any_int32 void) in
     begin
       (let jessie_67 = begin
                          (assert { (C_46: lt_int((32), (32))) }; void);
                         (assert
                         { (C_47: ge_int(integer_of_int32(x_10), (0))) };
                         void);
                         (assert
                         { (C_48: le_int(integer_of_int32(x_10), (0))) };
                         void);
                         (C_51:
                         begin
                           (__retres_10 := (C_50:
                                           (int32_of_integer_ (C_49:
                                                              ((mul_int 
                                                                (integer_of_int32 x_10)) (4294967296))))));
                          !__retres_10
                         end)
                        end in
       void);
      (jessie_returned_value := !__retres_10);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_36:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_left_signed_wrong_2_safety =
 fun (x_11 : int32) (y_11 : int32) ->
  { (JC_37:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_11 = ref (any_int32 void) in
     begin
       (let jessie_69 = begin
                          (assert
                          { (C_52: ge_int(neg_int((1)), (0))) };
                          void);
                         (assert
                         { (C_53: ge_int(integer_of_int32(x_11), (0))) };
                         void);
                         (assert
                         { (C_54:
                           le_int(integer_of_int32(x_11),
                           asr((2147483647), neg_int((1))))) };
                         void);
                         (C_57:
                         begin
                           (__retres_11 := (C_56:
                                           (int32_of_integer_ (C_55:
                                                              ((lsl (integer_of_int32 x_11)) 
                                                               (neg_int (1)))))));
                          !__retres_11
                         end)
                        end in
       void);
      (jessie_returned_value := !__retres_11);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_39:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_left_signed_wrong_3_safety =
 fun (x_12 : int32) (y_12 : int32) ->
  { (JC_40:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_12 = ref (any_int32 void) in
     (C_58:
     begin
       (let jessie_71 = (__retres_12 := (safe_int32_of_integer_ (neg_int (64)))) in
       void);
      (jessie_returned_value := !__retres_12);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_42:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_left_unsigned_safe_safety =
 fun (x_17 : uint32) (y_17 : uint32) ->
  { (JC_55:
    ((C_100: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_uint32 void) in
  try
   begin
     (let __retres_17 = ref (any_uint32 void) in
     try
      (if ((ge_int_ (integer_of_uint32 y_17)) (32))
      then
       (let jessie_120 = (C_99:
                         begin
                           (let jessie_119 = (__retres_17 := (safe_uint32_of_integer_ (0))) in
                           void);
                          (raise (Goto_return_label_exc void))
                         end) in
       void)
      else
       (let jessie_122 = begin
                           (let jessie_121 = begin
                                               (assert
                                               { (C_95:
                                                 lt_int(integer_of_uint32(y_17),
                                                 (32))) };
                                               void);
                                              (C_98:
                                              begin
                                                (__retres_17 := (C_97:
                                                                (uint32_of_integer_ 
                                                                 (C_96:
                                                                 ((lsl 
                                                                   (integer_of_uint32 x_17)) 
                                                                  (integer_of_uint32 y_17))))));
                                               !__retres_17
                                              end)
                                             end in
                           void);
                          (raise (Goto_return_label_exc void))
                         end in
       void))
      with
      Goto_return_label_exc jessie_9 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_17); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_57:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_left_unsigned_unsafe_safety =
 fun (x_16 : uint32) (y_16 : uint32) ->
  { (JC_52:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_uint32 void) in
  try
   begin
     (let __retres_16 = ref (any_uint32 void) in
     begin
       (let jessie_117 = begin
                           (assert
                           { (C_91: lt_int(integer_of_uint32(y_16), (32))) };
                           void);
                          (C_94:
                          begin
                            (__retres_16 := (C_93:
                                            (uint32_of_integer_ (C_92:
                                                                ((lsl 
                                                                  (integer_of_uint32 x_16)) 
                                                                 (integer_of_uint32 y_16))))));
                           !__retres_16
                          end)
                         end in
       void);
      (jessie_returned_value := !__retres_16);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_54:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_left_unsigned_wrong_safety =
 fun (x_15 : uint32) (y_15 : uint32) ->
  { (JC_49:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_uint32 void) in
  try
   begin
     (let __retres_15 = ref (any_uint32 void) in
     begin
       (let jessie_115 = begin
                           (assert { (C_87: lt_int((32), (32))) }; void);
                          (C_90:
                          begin
                            (__retres_15 := (C_89:
                                            (uint32_of_integer_ (C_88:
                                                                ((mul_int 
                                                                  (integer_of_uint32 x_15)) (4294967296))))));
                           !__retres_15
                          end)
                         end in
       void);
      (jessie_returned_value := !__retres_15);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_51:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_right_signed_safe_safety =
 fun (x_21 : int32) (y_21 : int32) ->
  { (JC_67:
    ((C_124: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_21 = ref (any_int32 void) in
     try
      try
       (let jessie_141 = begin
                           (if ((lt_int_ (integer_of_int32 y_21)) (0))
                           then
                            (let jessie_134 = (C_121:
                                              begin
                                                (let jessie_133 = (__retres_21 := 
                                                                   (safe_int32_of_integer_ (0))) in
                                                void);
                                               (raise
                                                (Goto_return_label_exc
                                                void))
                                              end) in
                            void)
                           else
                            (if ((ge_int_ (integer_of_uint32 (C_120:
                                                             (uint32_of_integer_ 
                                                              (integer_of_int32 y_21))))) (32))
                            then
                             (let jessie_136 = (C_119:
                                               begin
                                                 (let jessie_135 = (__retres_21 := 
                                                                    (safe_int32_of_integer_ (0))) in
                                                 void);
                                                (raise
                                                 (Goto_return_label_exc
                                                 void))
                                               end) in
                             void)
                            else
                             (let jessie_138 = begin
                                                 (let jessie_137 = begin
                                                                     
                                                                    (assert
                                                                    { 
                                                                    (C_114:
                                                                    ge_int(
                                                                    integer_of_int32(y_21),
                                                                    (0))) };
                                                                    void);
                                                                    (assert
                                                                    { 
                                                                    (C_115:
                                                                    lt_int(
                                                                    integer_of_int32(y_21),
                                                                    (32))) };
                                                                    void);
                                                                    (C_118:
                                                                    begin
                                                                      
                                                                    (__retres_21 := 
                                                                    (C_117:
                                                                    (int32_of_integer_ 
                                                                    (C_116:
                                                                    ((asr 
                                                                    (integer_of_int32 x_21)) 
                                                                    (integer_of_int32 y_21))))));
                                                                    !__retres_21
                                                                    end)
                                                                   end in
                                                 void);
                                                (raise
                                                 (Goto_return_label_exc
                                                 void))
                                               end in
                             void)));
                          (let jessie_139 = (raise (Goto__L_exc void)) in
                          void);
                          (C_122:
                          begin
                            (let jessie_140 = (__retres_21 := (safe_int32_of_integer_ (0))) in
                            void);
                           (raise (Goto_return_label_exc void))
                          end)
                         end in
       void)
       with
       Goto__L_exc jessie_10 ->
       (let jessie_142 = (_L:
                         begin
                           void;
                          (C_123:
                          begin
                            (__retres_21 := (safe_int32_of_integer_ (0)));
                           !__retres_21
                          end)
                         end) in
       void) end
      with
      Goto_return_label_exc jessie_11 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_21); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_69:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_right_signed_unsafe_safety =
 fun (x_20 : int32) (y_20 : int32) ->
  { (JC_64:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_20 = ref (any_int32 void) in
     begin
       (let jessie_131 = begin
                           (assert
                           { (C_109: ge_int(integer_of_int32(y_20), (0))) };
                           void);
                          (assert
                          { (C_110: lt_int(integer_of_int32(y_20), (32))) };
                          void);
                          (C_113:
                          begin
                            (__retres_20 := (C_112:
                                            (int32_of_integer_ (C_111:
                                                               ((asr 
                                                                 (integer_of_int32 x_20)) 
                                                                (integer_of_int32 y_20))))));
                           !__retres_20
                          end)
                         end in
       void);
      (jessie_returned_value := !__retres_20);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_66:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_right_signed_wrong_1_safety =
 fun (x_18 : int32) (y_18 : int32) ->
  { (JC_58:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_18 = ref (any_int32 void) in
     begin
       (let jessie_127 = begin
                           (assert
                           { (C_101: ge_int(neg_int((1)), (0))) };
                           void);
                          (C_104:
                          begin
                            (__retres_18 := (C_103:
                                            (int32_of_integer_ (C_102:
                                                               ((asr 
                                                                 (integer_of_int32 x_18)) 
                                                                (neg_int (1)))))));
                           !__retres_18
                          end)
                         end in
       void);
      (jessie_returned_value := !__retres_18);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_60:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_right_signed_wrong_2_safety =
 fun (x_19 : int32) (y_19 : int32) ->
  { (JC_61:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_19 = ref (any_int32 void) in
     begin
       (let jessie_129 = begin
                           (assert { (C_105: lt_int((32), (32))) }; void);
                          (C_108:
                          begin
                            (__retres_19 := (C_107:
                                            (int32_of_integer_ (C_106:
                                                               ((div_int_ 
                                                                 (integer_of_int32 x_19)) (4294967296))))));
                           !__retres_19
                          end)
                         end in
       void);
      (jessie_returned_value := !__retres_19);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_63:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_right_unsigned_safe_safety =
 fun (x_24 : uint32) (y_24 : uint32) ->
  { (JC_76:
    ((C_138: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_uint32 void) in
  try
   begin
     (let __retres_24 = ref (any_uint32 void) in
     try
      (if ((ge_int_ (integer_of_uint32 y_24)) (32))
      then
       (let jessie_158 = (C_137:
                         begin
                           (let jessie_157 = (__retres_24 := (safe_uint32_of_integer_ (0))) in
                           void);
                          (raise (Goto_return_label_exc void))
                         end) in
       void)
      else
       (let jessie_160 = begin
                           (let jessie_159 = begin
                                               (assert
                                               { (C_133:
                                                 lt_int(integer_of_uint32(y_24),
                                                 (32))) };
                                               void);
                                              (C_136:
                                              begin
                                                (__retres_24 := (C_135:
                                                                (uint32_of_integer_ 
                                                                 (C_134:
                                                                 ((lsr 
                                                                   (integer_of_uint32 x_24)) 
                                                                  (integer_of_uint32 y_24))))));
                                               !__retres_24
                                              end)
                                             end in
                           void);
                          (raise (Goto_return_label_exc void))
                         end in
       void))
      with
      Goto_return_label_exc jessie_12 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_24); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_78:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_right_unsigned_unsafe_safety =
 fun (x_23 : uint32) (y_23 : uint32) ->
  { (JC_73:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_uint32 void) in
  try
   begin
     (let __retres_23 = ref (any_uint32 void) in
     begin
       (let jessie_155 = begin
                           (assert
                           { (C_129: lt_int(integer_of_uint32(y_23), (32))) };
                           void);
                          (C_132:
                          begin
                            (__retres_23 := (C_131:
                                            (uint32_of_integer_ (C_130:
                                                                ((lsr 
                                                                  (integer_of_uint32 x_23)) 
                                                                 (integer_of_uint32 y_23))))));
                           !__retres_23
                          end)
                         end in
       void);
      (jessie_returned_value := !__retres_23);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_75:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let shift_right_unsigned_wrong_safety =
 fun (x_22 : uint32) (y_22 : uint32) ->
  { (JC_70:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_uint32 void) in
  try
   begin
     (let __retres_22 = ref (any_uint32 void) in
     begin
       (let jessie_153 = begin
                           (assert { (C_125: lt_int((32), (32))) }; void);
                          (C_128:
                          begin
                            (__retres_22 := (C_127:
                                            (uint32_of_integer_ (C_126:
                                                                ((div_int_ 
                                                                  (integer_of_uint32 x_22)) (4294967296))))));
                           !__retres_22
                          end)
                         end in
       void);
      (jessie_returned_value := !__retres_22);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_72:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let signed_overflow_safe_safety =
 fun (x_34 : int32) ->
  { (JC_137:
    ((C_249: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_41 = ref (any_int32 void) in
     try
      (if ((lt_int_ (integer_of_int32 x_34)) (0))
      then
       (let jessie_276 = (C_248:
                         begin
                           (let jessie_275 = (__retres_41 := (C_247:
                                                             (int32_of_integer_ 
                                                              (C_246:
                                                              ((add_int 
                                                                (integer_of_int32 x_34)) (2147483647)))))) in
                           void);
                          (raise (Goto_return_label_exc void))
                         end) in
       void)
      else
       (let jessie_278 = (C_245:
                         begin
                           (let jessie_277 = (__retres_41 := (C_244:
                                                             (int32_of_integer_ 
                                                              (C_243:
                                                              ((sub_int 
                                                                (integer_of_int32 x_34)) (2147483647)))))) in
                           void);
                          (raise (Goto_return_label_exc void))
                         end) in
       void))
      with
      Goto_return_label_exc jessie_17 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_41); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_139:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let signed_overflow_unsafe_safety =
 fun (x_33 : int32) ->
  { (JC_134:
    ((C_242: le_int(integer_of_int32(x_33), sub_int((2147483647), (10))))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_40 = ref (any_int32 void) in
     (C_241:
     begin
       (let jessie_273 = (__retres_40 := (C_240:
                                         (int32_of_integer_ (C_239:
                                                            ((add_int 
                                                              (integer_of_int32 x_33)) (10)))))) in
       void);
      (jessie_returned_value := !__retres_40);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_136:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let signed_overflow_wrong_safety =
 fun (x_32 : int32) ->
  { (JC_131:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_39 = ref (any_int32 void) in
     try
      (if ((gt_int_ (integer_of_int32 x_32)) (0))
      then
       (let jessie_266 = (C_238:
                         begin
                           (let jessie_265 = (__retres_39 := (C_237:
                                                             (int32_of_integer_ 
                                                              (C_236:
                                                              ((add_int 
                                                                (integer_of_int32 x_32)) (2147483647)))))) in
                           void);
                          (raise (Goto_return_label_exc void))
                         end) in
       void)
      else
       (let jessie_268 = (C_235:
                         begin
                           (let jessie_267 = (__retres_39 := (C_234:
                                                             (int32_of_integer_ 
                                                              (C_233:
                                                              ((sub_int 
                                                                (integer_of_int32 
                                                                 (C_232:
                                                                 (int32_of_integer_ 
                                                                  (C_231:
                                                                  ((sub_int 
                                                                    (integer_of_int32 x_32)) (1))))))) (2147483647)))))) in
                           void);
                          (raise (Goto_return_label_exc void))
                         end) in
       void))
      with
      Goto_return_label_exc jessie_16 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_39); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_133:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let stack_access_wrong_safety =
 fun (tt : unit) ->
  { (JC_92:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let x_42 = ref (any_pointer void) in
     (let __retres_29 = ref (any_int32 void) in
     (C_159:
     begin
       (let jessie_192 = (x_42 := (C_158: (bad_local_pointer void))) in void);
      (C_161:
      begin
        (let jessie_193 = (__retres_29 := (C_160:
                                          (((acc_ !int_P_alloc_table) !int_P_int_M) !x_42))) in
        void);
       (jessie_returned_value := !__retres_29);
       (raise Return)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_94:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let udiv0_safe_safety =
 fun (x_6 : uint32) (y_6 : uint32) ->
  { (JC_22:
    ((C_33: (true = true))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_uint32 void) in
  try
   begin
     (let __retres_6 = ref (any_uint32 void) in
     try
      (if ((eq_int_ (integer_of_uint32 y_6)) (0))
      then
       (let jessie_48 = (C_32:
                        begin
                          (let jessie_47 = (__retres_6 := (safe_uint32_of_integer_ (0))) in
                          void);
                         (raise (Goto_return_label_exc void))
                        end) in
       void)
      else
       (let jessie_50 = (C_31:
                        begin
                          (let jessie_49 = (__retres_6 := (C_30:
                                                          (uint32_of_integer_ 
                                                           (C_29:
                                                           ((div_int_ 
                                                             (integer_of_uint32 x_6)) 
                                                            (integer_of_uint32 y_6)))))) in
                          void);
                         (raise (Goto_return_label_exc void))
                        end) in
       void))
      with
      Goto_return_label_exc jessie_3 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_6); (raise Return) end) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_24:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let udiv0_unsafe_safety =
 fun (x_5 : uint32) (y_5 : uint32) ->
  { (JC_19:
    ((C_28: neq_int(integer_of_uint32(y_5), (0)))
    and (valid_a(a, int_P_alloc_table, a, __string_abc)
        and valid___string_abc(__string_abc, char_P_alloc_table, a,
            __string_abc)))) }
  (init:
  (let jessie_returned_value = ref (any_uint32 void) in
  try
   begin
     (let __retres_5 = ref (any_uint32 void) in
     (C_27:
     begin
       (let jessie_45 = (__retres_5 := (C_26:
                                       (uint32_of_integer_ (C_25:
                                                           ((div_int_ 
                                                             (integer_of_uint32 x_5)) 
                                                            (integer_of_uint32 y_5)))))) in
       void);
      (jessie_returned_value := !__retres_5);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_21:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let udiv0_wrong_safety =
 fun (x_4 : uint32) (y_4 : uint32) ->
  { (JC_16:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_uint32 void) in
  try
   begin
     (let __retres_4 = ref (any_uint32 void) in
     (C_24:
     begin
       (let jessie_43 = (__retres_4 := (C_23:
                                       (uint32_of_integer_ (C_22:
                                                           ((div_int_ 
                                                             (integer_of_uint32 x_4)) (0)))))) in
       void);
      (jessie_returned_value := !__retres_4);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_18:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }

let volatile_cast_wrong_safety =
 fun (ip : int_P pointer) ->
  { (JC_186:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let x_48 = (any_pointer void) in
     (let __retres_48 = ref (any_int32 void) in
     (let __jc_off_x_2 = ref (any_int32 void) in
     (C_318:
     begin
       (let jessie_383 = (__jc_off_x_2 := (safe_int32_of_integer_ (0))) in
       void);
      (C_321:
      begin
        (let jessie_384 = (__retres_48 := (C_320:
                                          ((((offset_acc_ !int_P_alloc_table) !int_P_int_M) ip) 
                                           (integer_of_int32 !__jc_off_x_2)))) in
        void);
       (jessie_returned_value := !__retres_48);
       (raise Return)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_188:
    (valid_a(a, int_P_alloc_table, a, __string_abc)
    and valid___string_abc(__string_abc, char_P_alloc_table, a, __string_abc))) }


