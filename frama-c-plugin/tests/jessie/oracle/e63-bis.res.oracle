Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only e63-bis.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD e63-bis.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir e63-bis.jessie
[jessie] File e63-bis.jessie/e63-bis.jc written.
[jessie] File e63-bis.jessie/e63-bis.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

tag float_P = {
  real float_M: 32;
}

type float_P = [float_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

predicate incr{L}(float_P[..] t, integer i, integer j) {
case incr_ok{L}: (\forall float_P[..] t_0;
                   (\forall integer i_0;
                     (\forall integer j_0;
                       ((i_0 < j_0) ==>
                         (((t_0 + i_0).float_M <= (t_0 + (i_0 + 1)).float_M) ==>
                           (incr{L}(t_0, (i_0 + 1), j_0) ==>
                             incr{L}(t_0, i_0, j_0)))))));
  
  case incr_alone{L}: (\forall float_P[..] t_1;
                        (\forall integer i_1;
                          incr{L}(t_1, i_1, i_1)));
  
}

predicate incr2{L}(float_P[..] t_2, integer i_2, integer j_1) =
(\forall integer k1;
  (\forall integer k2;
    (((i_2 <= k1) && ((k1 <= k2) && (k2 <= j_1))) ==>
      ((t_2 + k1).float_M <= (t_2 + k2).float_M))))

predicate incr3{L}(float_P[..] t_3, integer i_3, integer j_2) =
(\forall integer k;
  (((i_3 <= k) && (k < j_2)) ==>
    ((t_3 + k).float_M <= (t_3 + (k + 1)).float_M)))

unit f()
behavior default:
  ensures (C_27 : true);
{  
   (var float_P[0..19] t);
   
   {  (C_2 : (t = (C_1 : (new float_P[20]))));
      
      {  
         (assert for default: (C_3 : ((t + 0).float_M == 0.)));
         ()
      };
      
      {  
         (assert for default: (C_4 : ((t + 1).float_M == 1.)));
         ()
      };
      
      {  
         (assert for default: (C_5 : ((t + 2).float_M == 2.)));
         ()
      };
      
      {  
         (assert for default: (C_6 : ((t + 3).float_M == 3.)));
         ()
      };
      
      {  
         (assert for default: (C_7 : ((t + 4).float_M == 4.)));
         ()
      };
      
      {  
         (assert for default: (C_8 : ((t + 5).float_M == 5.)));
         ()
      };
      
      {  
         (assert for default: (C_9 : ((t + 6).float_M == 6.)));
         ()
      };
      
      {  
         (assert for default: (C_10 : ((t + 7).float_M == 7.)));
         ()
      };
      
      {  
         (assert for default: (C_11 : ((t + 8).float_M == 8.)));
         ()
      };
      
      {  
         (assert for default: (C_12 : ((t + 9).float_M == 9.)));
         ()
      };
      
      {  
         (assert for default: (C_13 : ((t + 10).float_M == 10.)));
         ()
      };
      
      {  
         (assert for default: (C_14 : ((t + 11).float_M == 11.)));
         ()
      };
      
      {  
         (assert for default: (C_15 : ((t + 12).float_M == 12.)));
         ()
      };
      
      {  
         (assert for default: (C_16 : ((t + 13).float_M == 13.)));
         ()
      };
      
      {  
         (assert for default: (C_17 : ((t + 14).float_M == 14.)));
         ()
      };
      
      {  
         (assert for default: (C_18 : ((t + 15).float_M == 15.)));
         ()
      };
      
      {  
         (assert for default: (C_19 : ((t + 16).float_M == 16.)));
         ()
      };
      
      {  
         (assert for default: (C_20 : ((t + 17).float_M == 17.)));
         ()
      };
      
      {  
         (assert for default: (C_21 : ((t + 18).float_M == 18.)));
         ()
      };
      
      {  
         (assert for default: (C_22 : ((t + 19).float_M == 19.)));
         ()
      };
      
      {  
         (assert for default: (C_23 : incr3{Here}(t, 0, 4)));
         ()
      };
      
      {  
         (assert for default: (C_24 : incr3{Here}(t, 0, 9)));
         ()
      };
      
      {  
         (assert for default: (C_25 : incr3{Here}(t, 0, 19)));
         ()
      };
      
      {  (C_26 : (free(t)));
         
         (return ())
      }
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs e63-bis.jessie/e63-bis.cloc e63-bis.jessie/e63-bis.jc
type char_P

type float_P

type int8

type padding

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic bitvector_of_char_P: char_P pointer -> bitvector

logic char_P_of_bitvector: bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_float_P: float_P pointer -> bitvector

logic float_P_of_bitvector: bitvector -> float_P pointer

axiom bitvector_of_float_P_of_float_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_float_P(float_P_of_bitvector(x)) = x))

logic bitvector_of_int8: int8 -> bitvector

logic int8_of_bitvector: bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector :
 (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_void_P: void_P pointer -> bitvector

logic void_P_of_bitvector: bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_of_bitvector_of_bitvector_of_char_P :
 (forall x:char_P pointer. (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic float_P_tag:  -> float_P tag_id

axiom float_P_int : (int_of_tag(float_P_tag) = (1))

axiom float_P_of_bitvector_of_bitvector_of_float_P :
 (forall x:float_P pointer.
  (float_P_of_bitvector(bitvector_of_float_P(x)) = x))

logic float_P_of_pointer_address: unit pointer -> float_P pointer

axiom float_P_of_pointer_address_of_pointer_addr :
 (forall p:float_P pointer.
  (p = float_P_of_pointer_address(pointer_address(p))))

axiom float_P_parenttag_bottom : parenttag(float_P_tag, bottom_tag)

axiom float_P_tags :
 (forall x:float_P pointer.
  (forall float_P_tag_table:float_P tag_table.
   instanceof(float_P_tag_table, x, float_P_tag)))

inductive incr: float_P pointer, int, int, (float_P, real) memory -> prop =
 | incr_ok: (forall float_P_float_M_t_1_at_L:(float_P, real) memory.
             (forall t_0:float_P pointer.
              (forall i_0:int.
               (forall j_0:int.
                (lt_int(i_0, j_0) ->
                 (le_real(select(float_P_float_M_t_1_at_L, shift(t_0, i_0)),
                  select(float_P_float_M_t_1_at_L,
                  shift(t_0, add_int(i_0, (1))))) ->
                  (incr(t_0, add_int(i_0, (1)), j_0,
                   float_P_float_M_t_1_at_L) ->
                   incr(t_0, i_0, j_0, float_P_float_M_t_1_at_L))))))))
 | incr_alone: (forall float_P_float_M_t_1_at_L:(float_P, real) memory.
                (forall t_1:float_P pointer.
                 (forall i_1:int.
                  incr(t_1, i_1, i_1, float_P_float_M_t_1_at_L))))
 
predicate incr2(t_2:float_P pointer,
 i_2:int,
 j_1:int,
 float_P_float_M_t_2_2_at_L:(float_P, real) memory) =
 (forall k1:int.
  (forall k2:int.
   ((le_int(i_2, k1) and (le_int(k1, k2) and le_int(k2, j_1))) ->
    le_real(select(float_P_float_M_t_2_2_at_L, shift(t_2, k1)),
    select(float_P_float_M_t_2_2_at_L, shift(t_2, k2))))))

predicate incr3(t_3:float_P pointer,
 i_3:int,
 j_2:int,
 float_P_float_M_t_3_3_at_L:(float_P, real) memory) =
 (forall k:int.
  ((le_int(i_3, k) and lt_int(k, j_2)) ->
   le_real(select(float_P_float_M_t_3_3_at_L, shift(t_3, k)),
   select(float_P_float_M_t_3_3_at_L, shift(t_3, add_int(k, (1)))))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_of_bitvector_of_bitvector_of_int8 :
 (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_float_P(p:float_P pointer,
 a:int,
 float_P_alloc_table:float_P alloc_table) =
 (offset_min(float_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_float_P_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(float_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_float_P(p:float_P pointer,
 b:int,
 float_P_alloc_table:float_P alloc_table) =
 (offset_max(float_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_float_P(p:float_P pointer,
 a:int,
 b:int,
 float_P_alloc_table:float_P alloc_table) =
 ((offset_min(float_P_alloc_table, p) = a)
 and (offset_max(float_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_float_P(p:float_P pointer,
 a:int,
 b:int,
 float_P_alloc_table:float_P alloc_table) =
 ((offset_min(float_P_alloc_table, p) = a)
 and (offset_max(float_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_float_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_float_P(p:float_P pointer,
 a:int,
 b:int,
 float_P_alloc_table:float_P alloc_table) =
 ((offset_min(float_P_alloc_table, p) <= a)
 and (offset_max(float_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_float_P(p:float_P pointer,
 a:int,
 b:int,
 float_P_alloc_table:float_P alloc_table) =
 ((offset_min(float_P_alloc_table, p) <= a)
 and (offset_max(float_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_bitvector_of_bitvector_of_void_P :
 (forall x:void_P pointer. (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_float_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_float_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_float_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_float_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter float_P_alloc_table : float_P alloc_table ref

parameter float_P_tag_table : float_P tag_table ref

parameter alloc_struct_float_P :
 n:int ->
  float_P_alloc_table:float_P alloc_table ref ->
   float_P_tag_table:float_P tag_table ref ->
    { } float_P pointer writes float_P_alloc_table,float_P_tag_table
    { (strict_valid_struct_float_P(result, (0), sub_int(n, (1)),
       float_P_alloc_table)
      and (alloc_extends(float_P_alloc_table@, float_P_alloc_table)
          and (alloc_fresh(float_P_alloc_table@, result, n)
              and instanceof(float_P_tag_table, result, float_P_tag)))) }

parameter alloc_struct_float_P_requires :
 n:int ->
  float_P_alloc_table:float_P alloc_table ref ->
   float_P_tag_table:float_P tag_table ref ->
    { ge_int(n, (0))} float_P pointer
    writes float_P_alloc_table,float_P_tag_table
    { (strict_valid_struct_float_P(result, (0), sub_int(n, (1)),
       float_P_alloc_table)
      and (alloc_extends(float_P_alloc_table@, float_P_alloc_table)
          and (alloc_fresh(float_P_alloc_table@, result, n)
              and instanceof(float_P_tag_table, result, float_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int8 : unit -> { } int8 { true }

parameter f : tt:unit -> { } unit { true }

parameter f_requires : tt:unit -> { } unit { true }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let f_ensures_default =
 fun (tt : unit) ->
  { (JC_4: true) }
  (init:
  try
   begin
     (let float_P_t_6_tag_table = ref (any_tag_table void) in
     (let float_P_t_6_alloc_table = ref (any_alloc_table void) in
     (let float_P_float_M_t_6 = (any_memory void) in
     (let t_4 = ref (any_pointer void) in
     (C_2:
     begin
       (let jessie_4 = (t_4 := (C_1:
                               (JC_34:
                               (((alloc_struct_float_P (20)) float_P_t_6_alloc_table) float_P_t_6_tag_table)))) in
       void);
      (assert
      { (JC_35: eq_real(select(float_P_float_M_t_6, shift(t_4, (0))), 0.)) };
      void);
      void;
      (assert
      { (JC_36: eq_real(select(float_P_float_M_t_6, shift(t_4, (1))), 1.)) };
      void);
      void;
      (assert
      { (JC_37: eq_real(select(float_P_float_M_t_6, shift(t_4, (2))), 2.)) };
      void);
      void;
      (assert
      { (JC_38: eq_real(select(float_P_float_M_t_6, shift(t_4, (3))), 3.)) };
      void);
      void;
      (assert
      { (JC_39: eq_real(select(float_P_float_M_t_6, shift(t_4, (4))), 4.)) };
      void);
      void;
      (assert
      { (JC_40: eq_real(select(float_P_float_M_t_6, shift(t_4, (5))), 5.)) };
      void);
      void;
      (assert
      { (JC_41: eq_real(select(float_P_float_M_t_6, shift(t_4, (6))), 6.)) };
      void);
      void;
      (assert
      { (JC_42: eq_real(select(float_P_float_M_t_6, shift(t_4, (7))), 7.)) };
      void);
      void;
      (assert
      { (JC_43: eq_real(select(float_P_float_M_t_6, shift(t_4, (8))), 8.)) };
      void);
      void;
      (assert
      { (JC_44: eq_real(select(float_P_float_M_t_6, shift(t_4, (9))), 9.)) };
      void);
      void;
      (assert
      { (JC_45: eq_real(select(float_P_float_M_t_6, shift(t_4, (10))), 10.)) };
      void);
      void;
      (assert
      { (JC_46: eq_real(select(float_P_float_M_t_6, shift(t_4, (11))), 11.)) };
      void);
      void;
      (assert
      { (JC_47: eq_real(select(float_P_float_M_t_6, shift(t_4, (12))), 12.)) };
      void);
      void;
      (assert
      { (JC_48: eq_real(select(float_P_float_M_t_6, shift(t_4, (13))), 13.)) };
      void);
      void;
      (assert
      { (JC_49: eq_real(select(float_P_float_M_t_6, shift(t_4, (14))), 14.)) };
      void);
      void;
      (assert
      { (JC_50: eq_real(select(float_P_float_M_t_6, shift(t_4, (15))), 15.)) };
      void);
      void;
      (assert
      { (JC_51: eq_real(select(float_P_float_M_t_6, shift(t_4, (16))), 16.)) };
      void);
      void;
      (assert
      { (JC_52: eq_real(select(float_P_float_M_t_6, shift(t_4, (17))), 17.)) };
      void);
      void;
      (assert
      { (JC_53: eq_real(select(float_P_float_M_t_6, shift(t_4, (18))), 18.)) };
      void);
      void;
      (assert
      { (JC_54: eq_real(select(float_P_float_M_t_6, shift(t_4, (19))), 19.)) };
      void);
      void;
      (assert { (JC_55: incr3(t_4, (0), (4), float_P_float_M_t_6)) }; void);
      void;
      (assert { (JC_56: incr3(t_4, (0), (9), float_P_float_M_t_6)) }; void);
      void;
      (assert { (JC_57: incr3(t_4, (0), (19), float_P_float_M_t_6)) }; void);
      void;
      (C_26:
      begin
        ((safe_free_parameter float_P_t_6_alloc_table) !t_4); (raise Return)
      end)
     end)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_5: true) }

let f_safety =
 fun (tt : unit) ->
  { (JC_4: true) }
  (init:
  try
   begin
     (let float_P_t_6_tag_table = ref (any_tag_table void) in
     (let float_P_t_6_alloc_table = ref (any_alloc_table void) in
     (let float_P_float_M_t_6 = (any_memory void) in
     (let t_4 = ref (any_pointer void) in
     (C_2:
     begin
       (let jessie_2 = (t_4 := (let jessie_1 = (C_1:
                                               (JC_9:
                                               (((alloc_struct_float_P_requires (20)) float_P_t_6_alloc_table) float_P_t_6_tag_table))) in
                               (JC_10:
                               (assert
                               { ge_int(offset_max(float_P_t_6_alloc_table,
                                        jessie_1),
                                 (19)) };
                               jessie_1)))) in
       void);
      [ { } unit reads t_4
        { (JC_11: eq_real(select(float_P_float_M_t_6, shift(t_4, (0))), 0.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_12: eq_real(select(float_P_float_M_t_6, shift(t_4, (1))), 1.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_13: eq_real(select(float_P_float_M_t_6, shift(t_4, (2))), 2.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_14: eq_real(select(float_P_float_M_t_6, shift(t_4, (3))), 3.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_15: eq_real(select(float_P_float_M_t_6, shift(t_4, (4))), 4.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_16: eq_real(select(float_P_float_M_t_6, shift(t_4, (5))), 5.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_17: eq_real(select(float_P_float_M_t_6, shift(t_4, (6))), 6.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_18: eq_real(select(float_P_float_M_t_6, shift(t_4, (7))), 7.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_19: eq_real(select(float_P_float_M_t_6, shift(t_4, (8))), 8.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_20: eq_real(select(float_P_float_M_t_6, shift(t_4, (9))), 9.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_21:
          eq_real(select(float_P_float_M_t_6, shift(t_4, (10))), 10.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_22:
          eq_real(select(float_P_float_M_t_6, shift(t_4, (11))), 11.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_23:
          eq_real(select(float_P_float_M_t_6, shift(t_4, (12))), 12.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_24:
          eq_real(select(float_P_float_M_t_6, shift(t_4, (13))), 13.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_25:
          eq_real(select(float_P_float_M_t_6, shift(t_4, (14))), 14.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_26:
          eq_real(select(float_P_float_M_t_6, shift(t_4, (15))), 15.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_27:
          eq_real(select(float_P_float_M_t_6, shift(t_4, (16))), 16.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_28:
          eq_real(select(float_P_float_M_t_6, shift(t_4, (17))), 17.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_29:
          eq_real(select(float_P_float_M_t_6, shift(t_4, (18))), 18.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_30:
          eq_real(select(float_P_float_M_t_6, shift(t_4, (19))), 19.)) } ];
      void;
      [ { } unit reads t_4
        { (JC_31: incr3(t_4, (0), (4), float_P_float_M_t_6)) } ];
      void;
      [ { } unit reads t_4
        { (JC_32: incr3(t_4, (0), (9), float_P_float_M_t_6)) } ];
      void;
      [ { } unit reads t_4
        { (JC_33: incr3(t_4, (0), (19), float_P_float_M_t_6)) } ];
      void;
      (C_26:
      begin
        ((free_parameter float_P_t_6_alloc_table) !t_4); (raise Return)
      end)
     end)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C e63-bis.jessie --quiet -f e63-bis.makefile project
why --project [...] why/e63-bis.why
<project name="e63-bis" context="why/e63-bis_ctx.why">
  <function name="Function f">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/e63-bis_po24.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "31" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/e63-bis_po25.why">
      <location file = "why/e63-bis.why" line = "587" begin = "33" end = "165"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po26.why">
      <location file = "why/e63-bis.why" line = "673" begin = "9" end = "54"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/e63-bis_po1.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "36" begin = "13" end = "23"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po2.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "37" begin = "13" end = "23"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po3.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "38" begin = "13" end = "23"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po4.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "39" begin = "13" end = "23"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po5.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "40" begin = "13" end = "23"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po6.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "41" begin = "13" end = "23"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po7.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "42" begin = "13" end = "23"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po8.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "43" begin = "13" end = "23"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po9.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "44" begin = "13" end = "23"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po10.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "45" begin = "13" end = "23"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po11.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "46" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po12.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "47" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po13.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "48" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po14.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "49" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po15.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "50" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po16.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "51" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po17.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "52" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po18.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "53" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po19.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "54" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po20.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "55" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po21.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "65" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po22.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "66" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/e63-bis_po23.why">
      <location file = "PPCHOME/tests/jessie/e63-bis.c" line = "67" begin = "13" end = "26"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

logic integer_of_bitvector : bitvector -> int

logic bitvector_of_integer : int -> bitvector

logic real_of_bitvector : bitvector -> real

type char_P

type float_P

type int8

type padding

type void_P

logic bitvector_of_char_P : char_P pointer -> bitvector

logic char_P_of_bitvector : bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector:
  (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_float_P : float_P pointer -> bitvector

logic float_P_of_bitvector : bitvector -> float_P pointer

axiom bitvector_of_float_P_of_float_P_of_bitvector:
  (forall x:bitvector. (bitvector_of_float_P(float_P_of_bitvector(x)) = x))

logic bitvector_of_int8 : int8 -> bitvector

logic int8_of_bitvector : bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector:
  (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_void_P : void_P pointer -> bitvector

logic void_P_of_bitvector : bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector:
  (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

axiom char_P_of_bitvector_of_bitvector_of_char_P:
  (forall x:char_P pointer.
    (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic float_P_tag : float_P tag_id

axiom float_P_int: (int_of_tag(float_P_tag) = 1)

axiom float_P_of_bitvector_of_bitvector_of_float_P:
  (forall x:float_P pointer.
    (float_P_of_bitvector(bitvector_of_float_P(x)) = x))

logic float_P_of_pointer_address : unit pointer -> float_P pointer

axiom float_P_of_pointer_address_of_pointer_addr:
  (forall p:float_P pointer.
    (p = float_P_of_pointer_address(pointer_address(p))))

axiom float_P_parenttag_bottom: parenttag(float_P_tag, bottom_tag)

axiom float_P_tags:
  (forall x:float_P pointer.
    (forall float_P_tag_table:float_P tag_table.
      instanceof(float_P_tag_table, x, float_P_tag)))

inductive incr: float_P pointer, int, int, (float_P, real) memory -> prop =
  | incr_ok: (forall float_P_float_M_t_1_at_L:(float_P, real) memory.
               (forall t_0:float_P pointer.
                 (forall i_0:int.
                   (forall j_0:int.
                     ((i_0 < j_0) ->
                      ((select(float_P_float_M_t_1_at_L, shift(t_0,
                       i_0)) <= select(float_P_float_M_t_1_at_L, shift(t_0,
                       (i_0 + 1)))) ->
                       (incr(t_0, (i_0 + 1), j_0,
                        float_P_float_M_t_1_at_L) -> incr(t_0, i_0, j_0,
                        float_P_float_M_t_1_at_L))))))))
  | incr_alone: (forall float_P_float_M_t_1_at_L:(float_P, real) memory.
                  (forall t_1:float_P pointer.
                    (forall i_1:int. incr(t_1, i_1, i_1,
                      float_P_float_M_t_1_at_L))))



predicate incr2(t_2: float_P pointer, i_2: int, j_1: int,
  float_P_float_M_t_2_2_at_L: (float_P, real) memory) =
  (forall k1:int.
    (forall k2:int.
      (((i_2 <= k1) and ((k1 <= k2) and (k2 <= j_1))) ->
       (select(float_P_float_M_t_2_2_at_L, shift(t_2,
       k1)) <= select(float_P_float_M_t_2_2_at_L, shift(t_2, k2))))))

predicate incr3(t_3: float_P pointer, i_3: int, j_2: int,
  float_P_float_M_t_3_3_at_L: (float_P, real) memory) =
  (forall k:int.
    (((i_3 <= k) and (k < j_2)) -> (select(float_P_float_M_t_3_3_at_L,
     shift(t_3, k)) <= select(float_P_float_M_t_3_3_at_L, shift(t_3,
     (k + 1))))))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_of_bitvector_of_bitvector_of_int8:
  (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_float_P(p: float_P pointer, a: int,
  float_P_alloc_table: float_P alloc_table) =
  (offset_min(float_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_float_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(float_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_float_P(p: float_P pointer, b: int,
  float_P_alloc_table: float_P alloc_table) =
  (offset_max(float_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_float_P(p: float_P pointer, a: int, b: int,
  float_P_alloc_table: float_P alloc_table) =
  ((offset_min(float_P_alloc_table, p) = a) and
   (offset_max(float_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_float_P(p: float_P pointer, a: int, b: int,
  float_P_alloc_table: float_P alloc_table) =
  ((offset_min(float_P_alloc_table, p) = a) and
   (offset_max(float_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_float_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_float_P(p: float_P pointer, a: int, b: int,
  float_P_alloc_table: float_P alloc_table) =
  ((offset_min(float_P_alloc_table, p) <= a) and
   (offset_max(float_P_alloc_table, p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_float_P(p: float_P pointer, a: int, b: int,
  float_P_alloc_table: float_P alloc_table) =
  ((offset_min(float_P_alloc_table, p) <= a) and
   (offset_max(float_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_bitvector_of_bitvector_of_void_P:
  (forall x:void_P pointer.
    (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

