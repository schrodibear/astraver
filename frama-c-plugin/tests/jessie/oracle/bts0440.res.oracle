Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only bts0440.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD bts0440.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir bts0440.jessie
[jessie] File bts0440.jessie/bts0440.jc written.
[jessie] File bts0440.jessie/bts0440.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

int32 fact(int32 n)
behavior default:
  ensures (C_11 : true);
{  
   (var int32 r);
   
   (var int32 tmp);
   
   {  (C_1 : (r = 1));
      
      {  
         loop 
         while (true)
         {  
            {  (if (n > 0) then () else 
               (goto while_0_break));
               
               {  
                  (assert for default: (C_2 : (n > 0)));
                  ()
               };
               
               {  (before : 
                  {  
                     {  (C_3 : (tmp = n));
                        (C_6 : (n = (C_5 : ((C_4 : (n - 1)) :> int32))))
                     };
                     (C_9 : (r = (C_8 : ((C_7 : (r * tmp)) :> int32))))
                  })
               };
               
               {  
                  (assert for default: (C_10 : (r == \at((r * n),before))));
                  ()
               }
            }
         };
         (while_0_break : ())
      };
      
      (return r)
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs bts0440.jessie/bts0440.cloc bts0440.jessie/bts0440.jc
type char_P

type int32

type int8

type padding

type void_P

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter fact : n:int32 -> { } int32 { true }

parameter fact_requires : n:int32 -> { } int32 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let fact_ensures_default =
 fun (n : int32) ->
  { (JC_4: true) }
  (let mutable_n = ref n in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let r = ref (any_int32 void) in
     (let tmp = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_17 = (r := (safe_int32_of_integer_ (1))) in void);
      try
       (let jessie_26 = begin
                          (loop_2:
                          while true do
                          { invariant (JC_17: true)  }
                           begin
                             [ { } unit { true } ];
                            try
                             (let jessie_25 = begin
                                                (if ((gt_int_ (integer_of_int32 !mutable_n)) (0))
                                                then void
                                                else
                                                 (let jessie_18 = (raise
                                                                   (Goto_while_0_break_exc
                                                                   void)) in
                                                 void));
                                               (assert
                                               { (JC_19:
                                                 gt_int(integer_of_int32(mutable_n),
                                                 (0))) };
                                               void);
                                               void;
                                               (let jessie_24 = (before:
                                                                begin
                                                                  (let jessie_22 = 
                                                                  (C_3:
                                                                  begin
                                                                    (let jessie_20 = 
                                                                    (tmp := !mutable_n) in
                                                                    void);
                                                                   (C_6:
                                                                   begin
                                                                     
                                                                    (mutable_n := 
                                                                    (C_5:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_4:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !mutable_n)) (1))))));
                                                                    !mutable_n
                                                                   end)
                                                                  end) in
                                                                  void);
                                                                 (C_9:
                                                                 begin
                                                                   (r := 
                                                                    (C_8:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_7:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !r)) 
                                                                    (integer_of_int32 !tmp))))));
                                                                  !r
                                                                 end)
                                                                end) in
                                               void);
                                               (assert
                                               { (JC_20:
                                                 eq_int(integer_of_int32(r),
                                                 mul_int(integer_of_int32(r@before),
                                                 integer_of_int32(mutable_n@before)))) };
                                               void);
                                               void;
                                               (raise
                                                (Loop_continue_exc
                                                void))
                                              end in
                             void)
                             with
                             Loop_continue_exc jessie_3 ->
                             void end
                           end
                          done);
                         (raise (Goto_while_0_break_exc void))
                        end in
       void)
       with
       Goto_while_0_break_exc jessie_1 ->
       (while_0_break: void) end;
      (return := !r);
      (raise Return)
     end)));
    absurd 
   end
   with
   Return ->
   !return end)))
  { (JC_5: true) }

let fact_safety =
 fun (n : int32) ->
  { (JC_4: true) }
  (let mutable_n = ref n in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let r = ref (any_int32 void) in
     (let tmp = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_5 = (r := (safe_int32_of_integer_ (1))) in void);
      try
       (let jessie_14 = begin
                          (loop_1:
                          while true do
                          { invariant (JC_10: true) variant (0) }
                           begin
                             [ { } unit { true } ];
                            try
                             (let jessie_13 = begin
                                                (if ((gt_int_ (integer_of_int32 !mutable_n)) (0))
                                                then void
                                                else
                                                 (let jessie_6 = (raise
                                                                  (Goto_while_0_break_exc
                                                                  void)) in
                                                 void));
                                               [ { } unit reads mutable_n
                                                 { (JC_12:
                                                   gt_int(integer_of_int32(mutable_n),
                                                   (0))) } ];
                                               void;
                                               (let jessie_12 = (before:
                                                                begin
                                                                  (let jessie_10 = 
                                                                  (C_3:
                                                                  begin
                                                                    (let jessie_8 = 
                                                                    (tmp := !mutable_n) in
                                                                    void);
                                                                   (C_6:
                                                                   begin
                                                                     
                                                                    (mutable_n := 
                                                                    (C_5:
                                                                    (JC_13:
                                                                    (int32_of_integer_ 
                                                                    (C_4:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !mutable_n)) (1)))))));
                                                                    !mutable_n
                                                                   end)
                                                                  end) in
                                                                  void);
                                                                 (C_9:
                                                                 begin
                                                                   (r := 
                                                                    (C_8:
                                                                    (JC_14:
                                                                    (int32_of_integer_ 
                                                                    (C_7:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !r)) 
                                                                    (integer_of_int32 !tmp)))))));
                                                                  !r
                                                                 end)
                                                                end) in
                                               void);
                                               [ { } unit reads mutable_n,r
                                                 { (JC_15:
                                                   eq_int(integer_of_int32(r),
                                                   mul_int(integer_of_int32(r@before),
                                                   integer_of_int32(mutable_n@before)))) } ];
                                               void;
                                               (raise
                                                (Loop_continue_exc
                                                void))
                                              end in
                             void)
                             with
                             Loop_continue_exc jessie_3 ->
                             void end
                           end
                          done);
                         (raise (Goto_while_0_break_exc void))
                        end in
       void)
       with
       Goto_while_0_break_exc jessie_1 ->
       (while_0_break: void) end;
      (return := !r);
      (raise Return)
     end)));
    absurd 
   end
   with
   Return ->
   !return end)))
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C bts0440.jessie --quiet -f bts0440.makefile project
why --project [...] why/bts0440.why
