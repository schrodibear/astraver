Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only addrof_param.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD addrof_param.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir addrof_param.jessie
[jessie] File addrof_param.jessie/addrof_param.jc written.
[jessie] File addrof_param.jessie/addrof_param.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag int_xP = {
  int_P[..] int_xM: 32;
}

type int_xP = [int_xP]

tag int_P = {
  int32 int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

unit gi(int_P[..] p_0, int32 i_0)
  requires (C_3 : ((C_4 : (\offset_min(p_0) <= 0)) &&
                    (C_5 : (\offset_max(p_0) >= 0))));
behavior default:
  assumes true;
  ensures (C_6 : (p_0.int_M == \old(i_0)));
{  
   {  (C_2 : ((C_1 : p_0.int_M) = i_0));
      
      (return ())
   }
}

int32 fi(int32 v_i_2)
behavior default:
  assumes true;
  ensures (C_15 : true);
behavior zero:
  assumes (v_i_2 == 0);
  ensures (C_16 : (\result == 0));
{  
   (var int_P[0] i_2);
   
   {  (C_8 : (i_2 = (C_7 : (new int_P[1]))));
      (C_10 : ((C_9 : i_2.int_M) = v_i_2));
      (C_12 : gi(i_2, (C_11 : i_2.int_M)));
      
      {  (C_13 : (free(i_2)));
         
         (return (C_14 : i_2.int_M))
      }
   }
}

unit gp(int_xP[..] p, int_P[..] i)
  requires (C_23 : ((((C_26 : (\offset_min(p) <= 0)) &&
                       (C_27 : (\offset_max(p) >= 0))) &&
                      ((C_29 : (\offset_min(p.int_xM) <= 0)) &&
                        (C_30 : (\offset_max(p.int_xM) >= 0)))) &&
                     ((C_32 : (\offset_min(i) <= 0)) &&
                       (C_33 : (\offset_max(i) >= 0)))));
behavior default:
  assumes true;
  ensures (C_34 : ((C_35 : (p.int_xM.int_M == \old(i.int_M))) &&
                    (C_36 : (p.int_xM == \old(i)))));
{  
   {  (C_20 : ((C_19 : (C_18 : p.int_xM).int_M) = (C_17 : i.int_M)));
      (C_22 : ((C_21 : p.int_xM) = i));
      
      (return ())
   }
}

int32 fp(int32 i_1, int_P[..] v_p_1)
behavior default:
  assumes true;
  ensures (C_48 : true);
behavior zero:
  assumes ((i_1 == 0) &&
            ((\offset_min(v_p_1) <= 0) && (\offset_max(v_p_1) >= 0)));
  ensures (C_49 : (\result == 0));
{  
   (var int_xP[0] p_1);
   
   {  (C_38 : (p_1 = (C_37 : (new int_xP[1]))));
      (C_40 : ((C_39 : p_1.int_xM) = v_p_1));
      (C_42 : gp(p_1, (C_41 : p_1.int_xM)));
      
      {  
         (assert for default: (C_43 : (i_1 == 0)));
         ()
      };
      (C_46 : ((C_45 : (C_44 : p_1.int_xM).int_M) = 0));
      
      {  (C_47 : (free(p_1)));
         
         (return i_1)
      }
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs addrof_param.jessie/addrof_param.cloc addrof_param.jessie/addrof_param.jc
type char_P

type int32

type int8

type int_P

type int_xP

type padding

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic bitvector_of_char_P: char_P pointer -> bitvector

logic char_P_of_bitvector: bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_int32: int32 -> bitvector

logic int32_of_bitvector: bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector :
 (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_int8: int8 -> bitvector

logic int8_of_bitvector: bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector :
 (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_int_P: int_P pointer -> bitvector

logic int_P_of_bitvector: bitvector -> int_P pointer

axiom bitvector_of_int_P_of_int_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_int_P(int_P_of_bitvector(x)) = x))

logic bitvector_of_int_xP: int_xP pointer -> bitvector

logic int_xP_of_bitvector: bitvector -> int_xP pointer

axiom bitvector_of_int_xP_of_int_xP_of_bitvector :
 (forall x:bitvector. (bitvector_of_int_xP(int_xP_of_bitvector(x)) = x))

logic bitvector_of_void_P: void_P pointer -> bitvector

logic void_P_of_bitvector: bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_of_bitvector_of_bitvector_of_char_P :
 (forall x:char_P pointer. (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_of_bitvector_of_bitvector_of_int32 :
 (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_of_bitvector_of_bitvector_of_int8 :
 (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_of_bitvector_of_bitvector_of_int_P :
 (forall x:int_P pointer. (int_P_of_bitvector(bitvector_of_int_P(x)) = x))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

logic int_xP_tag:  -> int_xP tag_id

axiom int_xP_int : (int_of_tag(int_xP_tag) = (1))

axiom int_xP_of_bitvector_of_bitvector_of_int_xP :
 (forall x:int_xP pointer. (int_xP_of_bitvector(bitvector_of_int_xP(x)) = x))

logic int_xP_of_pointer_address: unit pointer -> int_xP pointer

axiom int_xP_of_pointer_address_of_pointer_addr :
 (forall p:int_xP pointer.
  (p = int_xP_of_pointer_address(pointer_address(p))))

axiom int_xP_parenttag_bottom : parenttag(int_xP_tag, bottom_tag)

axiom int_xP_tags :
 (forall x:int_xP pointer.
  (forall int_xP_tag_table:int_xP tag_table.
   instanceof(int_xP_tag_table, x, int_xP_tag)))

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_int_P(p:int_P pointer,
 a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct_int_xP(p:int_xP pointer,
 a:int,
 int_xP_alloc_table:int_xP alloc_table) =
 (offset_min(int_xP_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

axiom pointer_addr_of_int_xP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_xP_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_int_P(p:int_P pointer,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct_int_xP(p:int_xP pointer,
 b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 (offset_max(int_xP_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_int_xP(p:int_xP pointer,
 a:int,
 b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) = a)
 and (offset_max(int_xP_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct_int_xP(p:int_xP pointer,
 a:int,
 b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) = a)
 and (offset_max(int_xP_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_xP(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_int_xP(p:int_xP pointer,
 a:int,
 b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) <= a)
 and (offset_max(int_xP_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct_int_xP(p:int_xP pointer,
 a:int,
 b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) <= a)
 and (offset_max(int_xP_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_bitvector_of_bitvector_of_void_P :
 (forall x:void_P pointer. (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_xP :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_xP(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_xP_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_xP(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter int_xP_alloc_table : int_xP alloc_table ref

parameter int_xP_tag_table : int_xP tag_table ref

parameter alloc_struct_int_xP :
 n:int ->
  int_xP_alloc_table:int_xP alloc_table ref ->
   int_xP_tag_table:int_xP tag_table ref ->
    { } int_xP pointer writes int_xP_alloc_table,int_xP_tag_table
    { (strict_valid_struct_int_xP(result, (0), sub_int(n, (1)),
       int_xP_alloc_table)
      and (alloc_extends(int_xP_alloc_table@, int_xP_alloc_table)
          and (alloc_fresh(int_xP_alloc_table@, result, n)
              and instanceof(int_xP_tag_table, result, int_xP_tag)))) }

parameter alloc_struct_int_xP_requires :
 n:int ->
  int_xP_alloc_table:int_xP alloc_table ref ->
   int_xP_tag_table:int_xP tag_table ref ->
    { ge_int(n, (0))} int_xP pointer
    writes int_xP_alloc_table,int_xP_tag_table
    { (strict_valid_struct_int_xP(result, (0), sub_int(n, (1)),
       int_xP_alloc_table)
      and (alloc_extends(int_xP_alloc_table@, int_xP_alloc_table)
          and (alloc_fresh(int_xP_alloc_table@, result, n)
              and instanceof(int_xP_tag_table, result, int_xP_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter fi :
 v_i_2:int32 ->
  { } int32
  { (eq_int(integer_of_int32(v_i_2@), (0)) ->
     (JC_23: eq_int(integer_of_int32(result), (0)))) }

parameter fi_requires :
 v_i_2:int32 ->
  { } int32
  { (eq_int(integer_of_int32(v_i_2@), (0)) ->
     (JC_23: eq_int(integer_of_int32(result), (0)))) }

parameter fp :
 i_1:int32 ->
  v_p_1:int_P pointer ->
   int_P_int_M_v_p_1_4:(int_P, int32) memory ref ->
    int_P_v_p_1_4_alloc_table:int_P alloc_table ->
     { } int32 reads int_P_int_M_v_p_1_4 writes int_P_int_M_v_p_1_4
     { ((eq_int(integer_of_int32(i_1@), (0))
        and (le_int(offset_min(int_P_v_p_1_4_alloc_table@, v_p_1@), (0))
            and ge_int(offset_max(int_P_v_p_1_4_alloc_table@, v_p_1@), (0)))) ->
        (JC_71: eq_int(integer_of_int32(result), (0)))) }

parameter fp_requires :
 i_1:int32 ->
  v_p_1:int_P pointer ->
   int_P_int_M_v_p_1_4:(int_P, int32) memory ref ->
    int_P_v_p_1_4_alloc_table:int_P alloc_table ->
     { } int32 reads int_P_int_M_v_p_1_4 writes int_P_int_M_v_p_1_4
     { ((eq_int(integer_of_int32(i_1@), (0))
        and (le_int(offset_min(int_P_v_p_1_4_alloc_table@, v_p_1@), (0))
            and ge_int(offset_max(int_P_v_p_1_4_alloc_table@, v_p_1@), (0)))) ->
        (JC_71: eq_int(integer_of_int32(result), (0)))) }

parameter gi :
 p_0:int_P pointer ->
  i_0:int32 ->
   int_P_int_M_p_0_1:(int_P, int32) memory ref ->
    int_P_p_0_1_alloc_table:int_P alloc_table ->
     { } unit reads int_P_int_M_p_0_1 writes int_P_int_M_p_0_1
     { ((true = true) ->
        (JC_10:
        eq_int(integer_of_int32(select(int_P_int_M_p_0_1, p_0)),
        integer_of_int32(i_0@)))) }

parameter gi_requires :
 p_0:int_P pointer ->
  i_0:int32 ->
   int_P_int_M_p_0_1:(int_P, int32) memory ref ->
    int_P_p_0_1_alloc_table:int_P alloc_table ->
     { (JC_3:
       ((JC_1: le_int(offset_min(int_P_p_0_1_alloc_table, p_0), (0)))
       and (JC_2: ge_int(offset_max(int_P_p_0_1_alloc_table, p_0), (0)))))}
     unit reads int_P_int_M_p_0_1 writes int_P_int_M_p_0_1
     { ((true = true) ->
        (JC_10:
        eq_int(integer_of_int32(select(int_P_int_M_p_0_1, p_0)),
        integer_of_int32(i_0@)))) }

parameter gp :
 p:int_xP pointer ->
  i:int_P pointer ->
   int_P_int_M_i_3:(int_P, int32) memory ref ->
    int_xP_int_xM_p_2:(int_xP, int_P pointer) memory ref ->
     int_xP_p_2_alloc_table:int_xP alloc_table ->
      int_P_i_3_alloc_table:int_P alloc_table ->
       { } unit reads int_P_int_M_i_3,int_xP_int_xM_p_2
       writes int_P_int_M_i_3,int_xP_int_xM_p_2
       { ((true = true) ->
          (JC_54:
          ((JC_52:
           eq_int(integer_of_int32(select(int_P_int_M_i_3,
                                   select(int_xP_int_xM_p_2, p))),
           integer_of_int32(select(int_P_int_M_i_3@, i@))))
          and (JC_53: (select(int_xP_int_xM_p_2, p) = i@))))) }

parameter gp_requires :
 p:int_xP pointer ->
  i:int_P pointer ->
   int_P_int_M_i_3:(int_P, int32) memory ref ->
    int_xP_int_xM_p_2:(int_xP, int_P pointer) memory ref ->
     int_xP_p_2_alloc_table:int_xP alloc_table ->
      int_P_i_3_alloc_table:int_P alloc_table ->
       { (JC_39:
         ((JC_33: le_int(offset_min(int_xP_p_2_alloc_table, p), (0)))
         and ((JC_34: ge_int(offset_max(int_xP_p_2_alloc_table, p), (0)))
             and ((JC_35:
                  le_int(offset_min(int_P_i_3_alloc_table,
                         select(int_xP_int_xM_p_2, p)),
                  (0)))
                 and ((JC_36:
                      ge_int(offset_max(int_P_i_3_alloc_table,
                             select(int_xP_int_xM_p_2, p)),
                      (0)))
                     and ((JC_37:
                          le_int(offset_min(int_P_i_3_alloc_table, i), (0)))
                         and (JC_38:
                             ge_int(offset_max(int_P_i_3_alloc_table, i),
                             (0)))))))))}
       unit reads int_P_int_M_i_3,int_xP_int_xM_p_2
       writes int_P_int_M_i_3,int_xP_int_xM_p_2
       { ((true = true) ->
          (JC_54:
          ((JC_52:
           eq_int(integer_of_int32(select(int_P_int_M_i_3,
                                   select(int_xP_int_xM_p_2, p))),
           integer_of_int32(select(int_P_int_M_i_3@, i@))))
          and (JC_53: (select(int_xP_int_xM_p_2, p) = i@))))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let fi_ensures_default =
 fun (v_i_2 : int32) ->
  { (true = true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_i_2_5 = ref (any_memory void) in
     (let int_P_i_2_5_tag_table = ref (any_tag_table void) in
     (let int_P_i_2_5_alloc_table = ref (any_alloc_table void) in
     (let i_2 = ref (any_pointer void) in
     (C_8:
     begin
       (let jessie_20 = (i_2 := (C_7:
                                (JC_28:
                                (((alloc_struct_int_P (1)) int_P_i_2_5_alloc_table) int_P_i_2_5_tag_table)))) in
       void);
      (C_10:
      begin
        (let jessie_25 = (let jessie_21 = v_i_2 in
                         (let jessie_24 = !i_2 in
                         (((safe_upd_ int_P_int_M_i_2_5) jessie_24) jessie_21))) in
        void);
       (C_12:
       begin
         (JC_29:
         ((((gi !i_2) (C_11: ((safe_acc_ !int_P_int_M_i_2_5) !i_2))) int_P_int_M_i_2_5) !int_P_i_2_5_alloc_table));
        (C_13:
        begin
          ((safe_free_parameter int_P_i_2_5_alloc_table) !i_2);
         (return := (C_14: ((safe_acc_ !int_P_int_M_i_2_5) !i_2)));
         (raise Return)
        end)
       end)
      end)
     end)))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_18: true) }

let fi_ensures_zero =
 fun (v_i_2 : int32) ->
  { eq_int(integer_of_int32(v_i_2), (0)) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_i_2_5 = ref (any_memory void) in
     (let int_P_i_2_5_tag_table = ref (any_tag_table void) in
     (let int_P_i_2_5_alloc_table = ref (any_alloc_table void) in
     (let i_2 = ref (any_pointer void) in
     (C_8:
     begin
       (let jessie_28 = (i_2 := (C_7:
                                (JC_31:
                                (((alloc_struct_int_P (1)) int_P_i_2_5_alloc_table) int_P_i_2_5_tag_table)))) in
       void);
      (C_10:
      begin
        (let jessie_33 = (let jessie_29 = v_i_2 in
                         (let jessie_32 = !i_2 in
                         (((safe_upd_ int_P_int_M_i_2_5) jessie_32) jessie_29))) in
        void);
       (C_12:
       begin
         (JC_32:
         ((((gi !i_2) (C_11: ((safe_acc_ !int_P_int_M_i_2_5) !i_2))) int_P_int_M_i_2_5) !int_P_i_2_5_alloc_table));
        (C_13:
        begin
          ((safe_free_parameter int_P_i_2_5_alloc_table) !i_2);
         (return := (C_14: ((safe_acc_ !int_P_int_M_i_2_5) !i_2)));
         (raise Return)
        end)
       end)
      end)
     end)))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_22: eq_int(integer_of_int32(result), (0))) }

let fi_safety =
 fun (v_i_2 : int32) ->
  { (JC_17: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_i_2_5 = ref (any_memory void) in
     (let int_P_i_2_5_tag_table = ref (any_tag_table void) in
     (let int_P_i_2_5_alloc_table = ref (any_alloc_table void) in
     (let i_2 = ref (any_pointer void) in
     (C_8:
     begin
       (let jessie_12 = (i_2 := (let jessie_11 = (C_7:
                                                 (JC_24:
                                                 (((alloc_struct_int_P_requires (1)) int_P_i_2_5_alloc_table) int_P_i_2_5_tag_table))) in
                                (JC_25:
                                (assert
                                { ge_int(offset_max(int_P_i_2_5_alloc_table,
                                         jessie_11),
                                  (0)) };
                                jessie_11)))) in
       void);
      (C_10:
      begin
        (let jessie_17 = (let jessie_13 = v_i_2 in
                         (let jessie_16 = !i_2 in
                         (((safe_upd_ int_P_int_M_i_2_5) jessie_16) jessie_13))) in
        void);
       (C_12:
       begin
         (JC_26:
         ((((gi_requires !i_2) (C_11: ((safe_acc_ !int_P_int_M_i_2_5) !i_2))) int_P_int_M_i_2_5) !int_P_i_2_5_alloc_table));
        (C_13:
        begin
          ((free_parameter int_P_i_2_5_alloc_table) !i_2);
         (return := (C_14: ((safe_acc_ !int_P_int_M_i_2_5) !i_2)));
         (raise Return)
        end)
       end)
      end)
     end)))));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let fp_ensures_default =
 fun (i_1 : int32) (v_p_1 : int_P pointer) (int_P_int_M_v_p_1_4 : (int_P, int32) memory ref) (int_P_v_p_1_4_alloc_table : int_P alloc_table) ->
  { (true = true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_xP_int_xM_p_1_8 = ref (any_memory void) in
     (let int_xP_p_1_8_tag_table = ref (any_tag_table void) in
     (let int_xP_p_1_8_alloc_table = ref (any_alloc_table void) in
     (let p_1 = ref (any_pointer void) in
     (C_38:
     begin
       (let jessie_73 = (p_1 := (C_37:
                                (JC_78:
                                (((alloc_struct_int_xP (1)) int_xP_p_1_8_alloc_table) int_xP_p_1_8_tag_table)))) in
       void);
      (C_40:
      begin
        (let jessie_79 = (let jessie_75 = v_p_1 in
                         (let jessie_78 = !p_1 in
                         (((safe_upd_ int_xP_int_xM_p_1_8) jessie_78) jessie_75))) in
        void);
       (C_42:
       begin
         (JC_79:
         ((((((gp !p_1) (C_41: ((safe_acc_ !int_xP_int_xM_p_1_8) !p_1))) int_P_int_M_v_p_1_4) int_xP_int_xM_p_1_8) !int_xP_p_1_8_alloc_table) int_P_v_p_1_4_alloc_table));
        (assert { (JC_80: eq_int(integer_of_int32(i_1), (0))) }; void);
        void;
        (C_46:
        begin
          (let jessie_86 = (let jessie_82 = (safe_int32_of_integer_ (0)) in
                           (let jessie_85 = (C_44:
                                            ((safe_acc_ !int_xP_int_xM_p_1_8) !p_1)) in
                           (((safe_upd_ int_P_int_M_v_p_1_4) jessie_85) jessie_82))) in
          void);
         (C_47:
         begin
           ((safe_free_parameter int_xP_p_1_8_alloc_table) !p_1);
          (return := i_1);
          (raise Return)
         end)
        end)
       end)
      end)
     end)))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_66: true) }

let fp_ensures_zero =
 fun (i_1 : int32) (v_p_1 : int_P pointer) (int_P_int_M_v_p_1_4 : (int_P, int32) memory ref) (int_P_v_p_1_4_alloc_table : int_P alloc_table) ->
  { (eq_int(integer_of_int32(i_1), (0))
    and (le_int(offset_min(int_P_v_p_1_4_alloc_table, v_p_1), (0))
        and ge_int(offset_max(int_P_v_p_1_4_alloc_table, v_p_1), (0)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_xP_int_xM_p_1_8 = ref (any_memory void) in
     (let int_xP_p_1_8_tag_table = ref (any_tag_table void) in
     (let int_xP_p_1_8_alloc_table = ref (any_alloc_table void) in
     (let p_1 = ref (any_pointer void) in
     (C_38:
     begin
       (let jessie_88 = (p_1 := (C_37:
                                (JC_82:
                                (((alloc_struct_int_xP (1)) int_xP_p_1_8_alloc_table) int_xP_p_1_8_tag_table)))) in
       void);
      (C_40:
      begin
        (let jessie_94 = (let jessie_90 = v_p_1 in
                         (let jessie_93 = !p_1 in
                         (((safe_upd_ int_xP_int_xM_p_1_8) jessie_93) jessie_90))) in
        void);
       (C_42:
       begin
         (JC_83:
         ((((((gp !p_1) (C_41: ((safe_acc_ !int_xP_int_xM_p_1_8) !p_1))) int_P_int_M_v_p_1_4) int_xP_int_xM_p_1_8) !int_xP_p_1_8_alloc_table) int_P_v_p_1_4_alloc_table));
        [ { } unit { (JC_84: eq_int(integer_of_int32(i_1), (0))) } ];
        void;
        (C_46:
        begin
          (let jessie_101 = (let jessie_97 = (safe_int32_of_integer_ (0)) in
                            (let jessie_100 = (C_44:
                                              ((safe_acc_ !int_xP_int_xM_p_1_8) !p_1)) in
                            (((safe_upd_ int_P_int_M_v_p_1_4) jessie_100) jessie_97))) in
          void);
         (C_47:
         begin
           ((safe_free_parameter int_xP_p_1_8_alloc_table) !p_1);
          (return := i_1);
          (raise Return)
         end)
        end)
       end)
      end)
     end)))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_70: eq_int(integer_of_int32(result), (0))) }

let fp_safety =
 fun (i_1 : int32) (v_p_1 : int_P pointer) (int_P_int_M_v_p_1_4 : (int_P, int32) memory ref) (int_P_v_p_1_4_alloc_table : int_P alloc_table) ->
  { (JC_65: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_xP_int_xM_p_1_8 = ref (any_memory void) in
     (let int_xP_p_1_8_tag_table = ref (any_tag_table void) in
     (let int_xP_p_1_8_alloc_table = ref (any_alloc_table void) in
     (let p_1 = ref (any_pointer void) in
     (C_38:
     begin
       (let jessie_58 = (p_1 := (let jessie_57 = (C_37:
                                                 (JC_72:
                                                 (((alloc_struct_int_xP_requires (1)) int_xP_p_1_8_alloc_table) int_xP_p_1_8_tag_table))) in
                                (JC_73:
                                (assert
                                { ge_int(offset_max(int_xP_p_1_8_alloc_table,
                                         jessie_57),
                                  (0)) };
                                jessie_57)))) in
       void);
      (C_40:
      begin
        (let jessie_64 = (let jessie_60 = v_p_1 in
                         (let jessie_63 = !p_1 in
                         (((safe_upd_ int_xP_int_xM_p_1_8) jessie_63) jessie_60))) in
        void);
       (C_42:
       begin
         (JC_74:
         ((((((gp_requires !p_1) (C_41:
                                 ((safe_acc_ !int_xP_int_xM_p_1_8) !p_1))) int_P_int_M_v_p_1_4) int_xP_int_xM_p_1_8) !int_xP_p_1_8_alloc_table) int_P_v_p_1_4_alloc_table));
        [ { } unit { (JC_75: eq_int(integer_of_int32(i_1), (0))) } ];
        void;
        (C_46:
        begin
          (let jessie_71 = (let jessie_67 = (safe_int32_of_integer_ (0)) in
                           (let jessie_70 = (C_44:
                                            ((safe_acc_ !int_xP_int_xM_p_1_8) !p_1)) in
                           (JC_76:
                           ((((upd_ int_P_v_p_1_4_alloc_table) int_P_int_M_v_p_1_4) jessie_70) jessie_67)))) in
          void);
         (C_47:
         begin
           ((free_parameter int_xP_p_1_8_alloc_table) !p_1);
          (return := i_1);
          (raise Return)
         end)
        end)
       end)
      end)
     end)))));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let gi_ensures_default =
 fun (p_0 : int_P pointer) (i_0 : int32) (int_P_int_M_p_0_1 : (int_P, int32) memory ref) (int_P_p_0_1_alloc_table : int_P alloc_table) ->
  { ((true = true)
    and (JC_7:
        ((JC_5: le_int(offset_min(int_P_p_0_1_alloc_table, p_0), (0)))
        and (JC_6: ge_int(offset_max(int_P_p_0_1_alloc_table, p_0), (0)))))) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_10 = (let jessie_6 = i_0 in
                        (let jessie_9 = p_0 in
                        (((safe_upd_ int_P_int_M_p_0_1) jessie_9) jessie_6))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_9:
    eq_int(integer_of_int32(select(int_P_int_M_p_0_1, p_0)),
    integer_of_int32(i_0@))) }

let gi_safety =
 fun (p_0 : int_P pointer) (i_0 : int32) (int_P_int_M_p_0_1 : (int_P, int32) memory ref) (int_P_p_0_1_alloc_table : int_P alloc_table) ->
  { (JC_7:
    ((JC_5: le_int(offset_min(int_P_p_0_1_alloc_table, p_0), (0)))
    and (JC_6: ge_int(offset_max(int_P_p_0_1_alloc_table, p_0), (0))))) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_5 = (let jessie_1 = i_0 in
                       (let jessie_4 = p_0 in
                       (JC_13:
                       ((((upd_ int_P_p_0_1_alloc_table) int_P_int_M_p_0_1) jessie_4) jessie_1)))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let gp_ensures_default =
 fun (p : int_xP pointer) (i : int_P pointer) (int_xP_int_xM_p_2 : (int_xP, int_P pointer) memory ref) (int_P_int_M_i_3 : (int_P, int32) memory ref) (int_P_i_3_alloc_table : int_P alloc_table) (int_xP_p_2_alloc_table : int_xP alloc_table) ->
  { ((true = true)
    and (JC_47:
        ((JC_41: le_int(offset_min(int_xP_p_2_alloc_table, p), (0)))
        and ((JC_42: ge_int(offset_max(int_xP_p_2_alloc_table, p), (0)))
            and ((JC_43:
                 le_int(offset_min(int_P_i_3_alloc_table,
                        select(int_xP_int_xM_p_2, p)),
                 (0)))
                and ((JC_44:
                     ge_int(offset_max(int_P_i_3_alloc_table,
                            select(int_xP_int_xM_p_2, p)),
                     (0)))
                    and ((JC_45:
                         le_int(offset_min(int_P_i_3_alloc_table, i), (0)))
                        and (JC_46:
                            ge_int(offset_max(int_P_i_3_alloc_table, i), (0)))))))))) }
  (init:
  try
   begin
     (C_20:
     begin
       (let jessie_50 = (let jessie_46 = (C_17:
                                         ((safe_acc_ !int_P_int_M_i_3) i)) in
                        (let jessie_49 = (C_18:
                                         ((safe_acc_ !int_xP_int_xM_p_2) p)) in
                        (((safe_upd_ int_P_int_M_i_3) jessie_49) jessie_46))) in
       void);
      (C_22:
      begin
        (let jessie_56 = (let jessie_52 = i in
                         (let jessie_55 = p in
                         (((safe_upd_ int_xP_int_xM_p_2) jessie_55) jessie_52))) in
        void);
       (raise Return)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_51:
    ((JC_49:
     eq_int(integer_of_int32(select(int_P_int_M_i_3,
                             select(int_xP_int_xM_p_2, p))),
     integer_of_int32(select(int_P_int_M_i_3@, i@))))
    and (JC_50: (select(int_xP_int_xM_p_2, p) = i@)))) }

let gp_safety =
 fun (p : int_xP pointer) (i : int_P pointer) (int_xP_int_xM_p_2 : (int_xP, int_P pointer) memory ref) (int_P_int_M_i_3 : (int_P, int32) memory ref) (int_P_i_3_alloc_table : int_P alloc_table) (int_xP_p_2_alloc_table : int_xP alloc_table) ->
  { (JC_47:
    ((JC_41: le_int(offset_min(int_xP_p_2_alloc_table, p), (0)))
    and ((JC_42: ge_int(offset_max(int_xP_p_2_alloc_table, p), (0)))
        and ((JC_43:
             le_int(offset_min(int_P_i_3_alloc_table,
                    select(int_xP_int_xM_p_2, p)),
             (0)))
            and ((JC_44:
                 ge_int(offset_max(int_P_i_3_alloc_table,
                        select(int_xP_int_xM_p_2, p)),
                 (0)))
                and ((JC_45:
                     le_int(offset_min(int_P_i_3_alloc_table, i), (0)))
                    and (JC_46:
                        ge_int(offset_max(int_P_i_3_alloc_table, i), (0))))))))) }
  (init:
  try
   begin
     (C_20:
     begin
       (let jessie_39 = (let jessie_35 = (C_17:
                                         (JC_58:
                                         (((acc_ int_P_i_3_alloc_table) !int_P_int_M_i_3) i))) in
                        (let jessie_38 = (C_18:
                                         (JC_59:
                                         (((acc_ int_xP_p_2_alloc_table) !int_xP_int_xM_p_2) p))) in
                        (JC_60:
                        ((((upd_ int_P_i_3_alloc_table) int_P_int_M_i_3) jessie_38) jessie_35)))) in
       void);
      (C_22:
      begin
        (let jessie_45 = (let jessie_41 = i in
                         (let jessie_44 = p in
                         (JC_61:
                         ((((upd_ int_xP_p_2_alloc_table) int_xP_int_xM_p_2) jessie_44) jessie_41)))) in
        void);
       (raise Return)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C addrof_param.jessie --quiet -f addrof_param.makefile project
why --project [...] why/addrof_param.why
<project name="addrof_param" context="why/addrof_param_ctx.why">
  <function name="Function gp">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/addrof_param_po25.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po26.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po27.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po28.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po29.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po30.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po31.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/addrof_param_po23.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "19" begin = "12" end = "27"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po24.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "19" begin = "31" end = "44"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
  </function>
  <function name="Function gi">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/addrof_param_po21.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po22.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/addrof_param_po20.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "3" begin = "12" end = "25"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
  </function>
  <function name="Function fp">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/addrof_param_po9.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po10.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po11.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "18" begin = "13" end = "22"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po12.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "18" begin = "13" end = "22"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po13.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "18" begin = "26" end = "36"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po14.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "18" begin = "26" end = "36"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po15.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "18" begin = "40" end = "49"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po16.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "18" begin = "40" end = "49"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po17.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po18.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po19.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `zero'">
    <goal why_file="why/addrof_param_po8.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "28" begin = "14" end = "26"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/addrof_param_po7.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "32" begin = "13" end = "19"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
  </function>
  <function name="Function fi">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/addrof_param_po2.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po3.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po4.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "2" begin = "13" end = "22"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po5.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "2" begin = "13" end = "22"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/addrof_param_po6.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `zero'">
    <goal why_file="why/addrof_param_po1.why">
      <location file = "PPCHOME/tests/jessie/addrof_param.c" line = "11" begin = "14" end = "26"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

logic sqrt_real : real -> real

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null :  -> 'a1 pointer

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_positive: (forall p:'a1 pointer. (0 <= address(p)))

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

logic real_of_bitvector : bitvector -> real

type char_P

type int32

type int8

type int_P

type int_xP

type padding

type void_P

logic bitvector_of_char_P : char_P pointer -> bitvector

logic char_P_of_bitvector : bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector:
  (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_int32 : int32 -> bitvector

logic int32_of_bitvector : bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector:
  (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_int8 : int8 -> bitvector

logic int8_of_bitvector : bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector:
  (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_int_P : int_P pointer -> bitvector

logic int_P_of_bitvector : bitvector -> int_P pointer

axiom bitvector_of_int_P_of_int_P_of_bitvector:
  (forall x:bitvector. (bitvector_of_int_P(int_P_of_bitvector(x)) = x))

logic bitvector_of_int_xP : int_xP pointer -> bitvector

logic int_xP_of_bitvector : bitvector -> int_xP pointer

axiom bitvector_of_int_xP_of_int_xP_of_bitvector:
  (forall x:bitvector. (bitvector_of_int_xP(int_xP_of_bitvector(x)) = x))

logic bitvector_of_void_P : void_P pointer -> bitvector

logic void_P_of_bitvector : bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector:
  (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic char_P_tag :  -> char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

axiom char_P_of_bitvector_of_bitvector_of_char_P:
  (forall x:char_P pointer.
    (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_of_bitvector_of_bitvector_of_int32:
  (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_of_bitvector_of_bitvector_of_int8:
  (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic int_P_tag :  -> int_P tag_id

axiom int_P_int: (int_of_tag(int_P_tag) = 1)

axiom int_P_of_bitvector_of_bitvector_of_int_P:
  (forall x:int_P pointer. (int_P_of_bitvector(bitvector_of_int_P(x)) = x))

logic int_P_of_pointer_address : unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr:
  (forall p:int_P pointer.
    (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom: parenttag(int_P_tag, bottom_tag)

axiom int_P_tags:
  (forall x:int_P pointer.
    (forall int_P_tag_table:int_P tag_table. instanceof(int_P_tag_table, x,
      int_P_tag)))

logic int_xP_tag :  -> int_xP tag_id

axiom int_xP_int: (int_of_tag(int_xP_tag) = 1)

axiom int_xP_of_bitvector_of_bitvector_of_int_xP:
  (forall x:int_xP pointer.
    (int_xP_of_bitvector(bitvector_of_int_xP(x)) = x))

logic int_xP_of_pointer_address : unit pointer -> int_xP pointer

axiom int_xP_of_pointer_address_of_pointer_addr:
  (forall p:int_xP pointer.
    (p = int_xP_of_pointer_address(pointer_address(p))))

axiom int_xP_parenttag_bottom: parenttag(int_xP_tag, bottom_tag)

axiom int_xP_tags:
  (forall x:int_xP pointer.
    (forall int_xP_tag_table:int_xP tag_table. instanceof(int_xP_tag_table,
      x, int_xP_tag)))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_int_P(p: int_P pointer, a: int,
  int_P_alloc_table: int_P alloc_table) = (offset_min(int_P_alloc_table,
  p) <= a)

predicate left_valid_struct_int_xP(p: int_xP pointer, a: int,
  int_xP_alloc_table: int_xP alloc_table) = (offset_min(int_xP_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

axiom pointer_addr_of_int_xP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(int_xP_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_int_P(p: int_P pointer, b: int,
  int_P_alloc_table: int_P alloc_table) = (offset_max(int_P_alloc_table,
  p) >= b)

predicate right_valid_struct_int_xP(p: int_xP pointer, b: int,
  int_xP_alloc_table: int_xP alloc_table) = (offset_max(int_xP_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_root_int_xP(p: int_xP pointer, a: int, b: int,
  int_xP_alloc_table: int_xP alloc_table) =
  ((offset_min(int_xP_alloc_table, p) = a) and
   (offset_max(int_xP_alloc_table, p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_struct_int_xP(p: int_xP pointer, a: int, b: int,
  int_xP_alloc_table: int_xP alloc_table) =
  ((offset_min(int_xP_alloc_table, p) = a) and
   (offset_max(int_xP_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_xP(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_root_int_xP(p: int_xP pointer, a: int, b: int,
  int_xP_alloc_table: int_xP alloc_table) =
  ((offset_min(int_xP_alloc_table, p) <= a) and
   (offset_max(int_xP_alloc_table, p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_struct_int_xP(p: int_xP pointer, a: int, b: int,
  int_xP_alloc_table: int_xP alloc_table) =
  ((offset_min(int_xP_alloc_table, p) <= a) and
   (offset_max(int_xP_alloc_table, p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag :  -> void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_bitvector_of_bitvector_of_void_P:
  (forall x:void_P pointer.
    (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

