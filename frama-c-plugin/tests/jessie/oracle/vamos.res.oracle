Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only vamos.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD vamos.c"
[jessie] Starting Jessie translation
[kernel] No code for function pid2pcb, default assigns generated
[jessie] Producing Jessie files in subdir vamos.jessie
[jessie] File vamos.jessie/vamos.jc written.
[jessie] File vamos.jessie/vamos.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint32 = 0..4294967295

type int8 = -128..127

type int32 = -2147483648..2147483647

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

tag Proc = {
  Proc[..] next: 32; 
  int32 priority: 32; 
  int32 pid_0: 32;
}

type Proc = [Proc]

int32 max_prio;

Proc[..] pid2pcb(uint32 unnamed)
behavior default:
  assigns \nothing;
  ensures (C_1 : ((C_2 : (\offset_min(\result) <= 0)) &&
                   (C_3 : (\offset_max(\result) >= 0))));
;

Proc[..] ready_list;

axiomatic ListLength {

  logic int32 list_length{State}(Proc[..] p) reads p.next, p.next.next;
   
  axiom list_length_zero{State} :
  (\forall Proc[..] p_0;
    ((list_length{State}(p_0) == 0) <==> (p_0 == null)))
   
  axiom list_length_pos{State} :
  (\forall Proc[..] p_1;
    ((list_length{State}(p_1) > 0) ==>
      (((\offset_min(p_1) <= 0) && (\offset_max(p_1) >= 0)) &&
        (list_length{State}(p_1.next) == (list_length{State}(p_1) - 1)))))
   
  axiom list_length_remove{State} :
  (\forall Proc[..] p_2;
    ((list_length{State}(p_2) > 0) ==>
      (((\offset_min(p_2) <= 0) && (\offset_max(p_2) >= 0)) &&
        (list_length{State}(p_2.next) == (list_length{State}(p_2) - 1)))))
  
}

axiomatic Reachable {

  predicate reachable{State}(Proc[..] p_3, Proc[..] q) reads p_3.next;
   
  axiom reachable_def{State} :
  (\forall Proc[..] p_4;
    (\forall Proc[..] q_0;
      (reachable{State}(p_4, q_0) ==>
        ((p_4 == q_0) || reachable{State}(p_4.next, q_0)))))
  
}

int32 process_kill(uint32 pid)
  requires (C_46 : (list_length{Here}(ready_list) >= 0));
behavior default:
  ensures (C_45 : true);
{  
   (var int32 found);
   
   (var uint32 proc_id);
   
   (var uint32 proc_id2);
   
   (var Proc[..] process);
   
   (var Proc[..] prev_elem);
   
   (var Proc[..] ready_list_elem);
   
   (var Proc[..] highest_search);
   
   (var int32 highest_prio);
   
   (var int32 __retres);
   
   {  (C_4 : (found = 0));
      (C_7 : (proc_id = (C_6 : ((C_5 : (pid & 127u)) :> uint32))));
      (C_9 : (process = (C_8 : pid2pcb(proc_id))));
      (C_10 : (prev_elem = null));
      (C_11 : (ready_list_elem = ready_list));
      (C_12 : (highest_search = null));
      
      {  
         loop 
         behavior default:
           invariant (C_13 : ((((C_16 : (list_length{Here}(ready_list) >= 0)) &&
                                 (C_17 : (list_length{Here}(ready_list_elem) >=
                                           0))) &&
                                (C_18 : (list_length{Here}(prev_elem) >= 0))) &&
                               (C_19 : (list_length{Here}(highest_search) >=
                                         0))));
         while (true)
         {  
            {  (if (ready_list_elem != null) then (if (found == 0) then () else 
                                                  (goto while_0_break)) else 
               (goto while_0_break));
               (C_22 : (proc_id2 = (C_21 : ((C_20 : ready_list_elem.pid_0) :> uint32))));
               (if (proc_id == proc_id2) then 
               {  (if (prev_elem != null) then (C_27 : ((C_26 : prev_elem.next) = 
                                               (C_25 : ready_list_elem.next))) else 
                  (C_24 : (ready_list = (C_23 : ready_list_elem.next))));
                  (C_29 : ((C_28 : ready_list_elem.next) = null));
                  (if ((C_39 : process.priority) == max_prio) then 
                  {  (C_30 : (highest_prio = 0));
                     (C_31 : (highest_search = ready_list));
                     
                     {  
                        loop 
                        behavior default:
                          invariant (C_32 : (list_length{Here}(highest_search) >=
                                              0));
                        while (true)
                        {  
                           {  (if (highest_search != null) then () else 
                              (goto while_1_break));
                              (if ((C_35 : highest_search.priority) >
                                    highest_prio) then (C_34 : (highest_prio = 
                                                       (C_33 : highest_search.priority))) else ());
                              (C_37 : (highest_search = (C_36 : highest_search.next)))
                           }
                        };
                        (while_1_break : ())
                     };
                     (C_38 : (max_prio = highest_prio))
                  } else ());
                  (C_40 : (found = 1))
               } else ());
               (C_41 : (prev_elem = ready_list_elem));
               (C_43 : (ready_list_elem = (C_42 : ready_list_elem.next)))
            }
         };
         (while_0_break : ())
      };
      (C_44 : (__retres = 0));
      
      (return __retres)
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs vamos.jessie/vamos.cloc vamos.jessie/vamos.jc
type Proc

type char_P

type int32

type int8

type padding

type ready_list_1

type uint32

type void_P

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic Proc_tag:  -> Proc tag_id

axiom Proc_int : (int_of_tag(Proc_tag) = (1))

logic Proc_of_pointer_address: unit pointer -> Proc pointer

axiom Proc_of_pointer_address_of_pointer_addr :
 (forall p:Proc pointer. (p = Proc_of_pointer_address(pointer_address(p))))

axiom Proc_parenttag_bottom : parenttag(Proc_tag, bottom_tag)

axiom Proc_tags :
 (forall x:Proc pointer.
  (forall Proc_tag_table:Proc tag_table.
   instanceof(Proc_tag_table, x, Proc_tag)))

exception Return_label_exc of unit

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32, y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_Proc(p:Proc pointer, a:int,
 Proc_alloc_table:Proc alloc_table) = (offset_min(Proc_alloc_table, p) <= a)

predicate left_valid_struct_char_P(p:char_P pointer, a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer, a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

logic list_length: Proc pointer, (Proc, Proc pointer) memory -> int32

axiom list_length_pos :
 (forall Proc_p_4_alloc_table_at_State:Proc alloc_table.
  (forall Proc_next_p_4_at_State:(Proc, Proc pointer) memory.
   (forall p_1:Proc pointer.
    (gt_int(integer_of_int32(list_length(p_1, Proc_next_p_4_at_State)), (0)) ->
     (le_int(offset_min(Proc_p_4_alloc_table_at_State, p_1), (0))
     and (ge_int(offset_max(Proc_p_4_alloc_table_at_State, p_1), (0))
         and eq_int(integer_of_int32(list_length(select(Proc_next_p_4_at_State,
                                                 p_1),
                                     Proc_next_p_4_at_State)),
             sub_int(integer_of_int32(list_length(p_1,
                                      Proc_next_p_4_at_State)),
             (1)))))))))

axiom list_length_remove :
 (forall Proc_p_4_alloc_table_at_State:Proc alloc_table.
  (forall Proc_next_p_4_at_State:(Proc, Proc pointer) memory.
   (forall p_2:Proc pointer.
    (gt_int(integer_of_int32(list_length(p_2, Proc_next_p_4_at_State)), (0)) ->
     (le_int(offset_min(Proc_p_4_alloc_table_at_State, p_2), (0))
     and (ge_int(offset_max(Proc_p_4_alloc_table_at_State, p_2), (0))
         and eq_int(integer_of_int32(list_length(select(Proc_next_p_4_at_State,
                                                 p_2),
                                     Proc_next_p_4_at_State)),
             sub_int(integer_of_int32(list_length(p_2,
                                      Proc_next_p_4_at_State)),
             (1)))))))))

axiom list_length_zero :
 (forall Proc_next_p_4_at_State:(Proc, Proc pointer) memory.
  (forall p_0:Proc pointer.
   (eq_int(integer_of_int32(list_length(p_0, Proc_next_p_4_at_State)), (0))
   <-> (p_0 = null))))

axiom no_assign_list_length_0 :
 (forall tmp:Proc pset.
  (forall tmpmem:(Proc, Proc pointer) memory.
   (forall tmpalloc:Proc alloc_table.
    (forall Proc_next_p_4_at_State:(Proc, Proc pointer) memory.
     (forall p:Proc pointer.
      ((pset_disjoint(tmp,
        pset_union(pset_deref(Proc_next_p_4_at_State, pset_singleton(p)),
        pset_singleton(p)))
       and not_assigns(tmpalloc, Proc_next_p_4_at_State, tmpmem, tmp)) ->
       (list_length(p, Proc_next_p_4_at_State) = list_length(p, tmpmem))))))))

logic reachable: Proc pointer, Proc pointer,
 (Proc, Proc pointer) memory -> prop

axiom no_assign_reachable_0 :
 (forall tmp:Proc pset.
  (forall tmpmem:(Proc, Proc pointer) memory.
   (forall tmpalloc:Proc alloc_table.
    (forall Proc_next_p_3_5_at_State:(Proc, Proc pointer) memory.
     (forall q:Proc pointer.
      (forall p_3:Proc pointer.
       ((pset_disjoint(tmp, pset_singleton(p_3))
        and not_assigns(tmpalloc, Proc_next_p_3_5_at_State, tmpmem, tmp)) ->
        (reachable(p_3, q, Proc_next_p_3_5_at_State)
        <-> reachable(p_3, q, tmpmem)))))))))

axiom no_update_list_length_0 :
 (forall tmp:Proc pointer.
  (forall tmpval:Proc pointer.
   (forall Proc_next_p_4_at_State:(Proc, Proc pointer) memory.
    (forall p:Proc pointer.
     ((not in_pset(tmp,
           pset_union(pset_deref(Proc_next_p_4_at_State, pset_singleton(p)),
           pset_singleton(p)))) ->
      (list_length(p, Proc_next_p_4_at_State) = list_length(p,
                                                store(Proc_next_p_4_at_State,
                                                tmp, tmpval))))))))

axiom no_update_reachable_0 :
 (forall tmp:Proc pointer.
  (forall tmpval:Proc pointer.
   (forall Proc_next_p_3_5_at_State:(Proc, Proc pointer) memory.
    (forall q:Proc pointer.
     (forall p_3:Proc pointer.
      ((not in_pset(tmp, pset_singleton(p_3))) ->
       (reachable(p_3, q, Proc_next_p_3_5_at_State)
       <-> reachable(p_3, q, store(Proc_next_p_3_5_at_State, tmp, tmpval)))))))))

axiom pointer_addr_of_Proc_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(Proc_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

axiom reachable_def :
 (forall Proc_next_p_3_5_at_State:(Proc, Proc pointer) memory.
  (forall p_4:Proc pointer.
   (forall q_0:Proc pointer.
    (reachable(p_4, q_0, Proc_next_p_3_5_at_State) ->
     ((p_4 = q_0)
     or reachable(select(Proc_next_p_3_5_at_State, p_4), q_0,
        Proc_next_p_3_5_at_State))))))

predicate right_valid_struct_Proc(p:Proc pointer, b:int,
 Proc_alloc_table:Proc alloc_table) = (offset_max(Proc_alloc_table, p) >= b)

predicate right_valid_struct_char_P(p:char_P pointer, b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer, b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_Proc(p:Proc pointer, a:int, b:int,
 Proc_alloc_table:Proc alloc_table) =
 ((offset_min(Proc_alloc_table, p) = a)
 and (offset_max(Proc_alloc_table, p) = b))

predicate strict_valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_Proc(p:Proc pointer, a:int, b:int,
 Proc_alloc_table:Proc alloc_table) =
 ((offset_min(Proc_alloc_table, p) = a)
 and (offset_max(Proc_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

predicate valid_bitvector_struct_Proc(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Proc(p:Proc pointer, a:int, b:int,
 Proc_alloc_table:Proc alloc_table) =
 ((offset_min(Proc_alloc_table, p) <= a)
 and (offset_max(Proc_alloc_table, p) >= b))

predicate valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_Proc(p:Proc pointer, a:int, b:int,
 Proc_alloc_table:Proc alloc_table) =
 ((offset_min(Proc_alloc_table, p) <= a)
 and (offset_max(Proc_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter Proc_alloc_table : Proc alloc_table ref

parameter Proc_next_ready_list_1 : (Proc, Proc pointer) memory ref

parameter Proc_pid_0_ready_list_1 : (Proc, int32) memory ref

parameter Proc_priority_ready_list_1 : (Proc, int32) memory ref

parameter Proc_ready_list_1_alloc_table : Proc alloc_table ref

parameter Proc_tag_table : Proc tag_table ref

parameter alloc_bitvector_struct_Proc :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Proc(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Proc_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Proc(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_struct_Proc :
 n:int ->
  Proc_alloc_table:Proc alloc_table ref ->
   Proc_tag_table:Proc tag_table ref ->
    { } Proc pointer writes Proc_alloc_table,Proc_tag_table
    { (strict_valid_struct_Proc(result, (0), sub_int(n, (1)),
       Proc_alloc_table)
      and (alloc_extends(Proc_alloc_table@, Proc_alloc_table)
          and (alloc_fresh(Proc_alloc_table@, result, n)
              and instanceof(Proc_tag_table, result, Proc_tag)))) }

parameter alloc_struct_Proc_requires :
 n:int ->
  Proc_alloc_table:Proc alloc_table ref ->
   Proc_tag_table:Proc tag_table ref ->
    { ge_int(n, (0))} Proc pointer writes Proc_alloc_table,Proc_tag_table
    { (strict_valid_struct_Proc(result, (0), sub_int(n, (1)),
       Proc_alloc_table)
      and (alloc_extends(Proc_alloc_table@, Proc_alloc_table)
          and (alloc_fresh(Proc_alloc_table@, result, n)
              and instanceof(Proc_tag_table, result, Proc_tag)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter max_prio : int32 ref

parameter pid2pcb :
 unnamed:uint32 ->
  Proc_result_2_alloc_table:Proc alloc_table ->
   { } Proc pointer
   { (JC_11:
     ((JC_9: le_int(offset_min(Proc_result_2_alloc_table, result), (0)))
     and (JC_10: ge_int(offset_max(Proc_result_2_alloc_table, result), (0))))) }

parameter pid2pcb_requires :
 unnamed:uint32 ->
  Proc_result_2_alloc_table:Proc alloc_table ->
   { } Proc pointer
   { (JC_11:
     ((JC_9: le_int(offset_min(Proc_result_2_alloc_table, result), (0)))
     and (JC_10: ge_int(offset_max(Proc_result_2_alloc_table, result), (0))))) }

parameter ready_list : Proc pointer ref

parameter process_kill :
 pid:uint32 ->
  { } int32
  reads Proc_next_ready_list_1,Proc_pid_0_ready_list_1,Proc_priority_ready_list_1,Proc_ready_list_1_alloc_table,max_prio,ready_list
  writes Proc_next_ready_list_1,max_prio,ready_list { true }

parameter process_kill_requires :
 pid:uint32 ->
  { (JC_15:
    ge_int(integer_of_int32(list_length(ready_list, Proc_next_ready_list_1)),
    (0)))}
  int32
  reads Proc_next_ready_list_1,Proc_pid_0_ready_list_1,Proc_priority_ready_list_1,Proc_ready_list_1_alloc_table,max_prio,ready_list
  writes Proc_next_ready_list_1,max_prio,ready_list { true }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

let process_kill_ensures_default =
 fun (pid : uint32) ->
  { (JC_17:
    ge_int(integer_of_int32(list_length(ready_list, Proc_next_ready_list_1)),
    (0))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let Proc_priority_process_19 = (any_memory void) in
     (let Proc_process_19_alloc_table = (any_alloc_table void) in
     (let found = ref (any_int32 void) in
     (let proc_id = ref (any_uint32 void) in
     (let proc_id2 = ref (any_uint32 void) in
     (let process = ref (any_pointer void) in
     (let prev_elem = ref (any_pointer void) in
     (let ready_list_elem = ref (any_pointer void) in
     (let highest_search = ref (any_pointer void) in
     (let highest_prio = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     (C_4:
     begin
       (let jessie_62 = (found := (safe_int32_of_integer_ (0))) in void);
      (C_7:
      begin
        (let jessie_64 =
        (proc_id := (C_6:
                    (safe_uint32_of_integer_ (C_5:
                                             ((bw_and (integer_of_uint32 pid)) (127)))))) in
        void);
       (C_9:
       begin
         (let jessie_67 =
         (process := (C_8:
                     (let jessie_66 = !proc_id in
                     (JC_48:
                     ((pid2pcb jessie_66) Proc_process_19_alloc_table))))) in
         void);
        (C_10:
        begin
          (let jessie_69 = (prev_elem := null) in void);
         (C_11:
         begin
           (let jessie_71 = (ready_list_elem := !ready_list) in void);
          (C_12:
          begin
            (let jessie_73 = (highest_search := null) in void);
           try
            (let jessie_111 =
            begin
              (loop_3:
              while true do
              { invariant
                  (JC_53:
                  ((JC_49:
                   ge_int(integer_of_int32(list_length(ready_list,
                                           Proc_next_ready_list_1)),
                   (0)))
                  and ((JC_50:
                       ge_int(integer_of_int32(list_length(ready_list_elem,
                                               Proc_next_ready_list_1)),
                       (0)))
                      and ((JC_51:
                           ge_int(integer_of_int32(list_length(prev_elem,
                                                   Proc_next_ready_list_1)),
                           (0)))
                          and (JC_52:
                              ge_int(integer_of_int32(list_length(highest_search,
                                                      Proc_next_ready_list_1)),
                              (0)))))))  }
               begin
                 [ { } unit { true } ];
                try
                 (let jessie_110 =
                 begin
                   (let jessie_109 =
                   begin
                     (if ((safe_neq_pointer !ready_list_elem) null)
                     then
                      (if ((eq_int_ (integer_of_int32 !found)) (0)) then void
                      else
                       (let jessie_74 =
                       (raise (Goto_while_0_break_exc void)) in void))
                     else
                      (let jessie_75 =
                      (raise (Goto_while_0_break_exc void)) in void));
                    (C_22:
                    begin
                      (let jessie_77 =
                      (proc_id2 := (C_21:
                                   (safe_uint32_of_integer_ (integer_of_int32 
                                                             (C_20:
                                                             ((safe_acc_ !Proc_pid_0_ready_list_1) !ready_list_elem)))))) in
                      void);
                     (if ((eq_int_ (integer_of_uint32 !proc_id)) (integer_of_uint32 !proc_id2))
                     then
                      (let jessie_105 =
                      begin
                        (let jessie_84 =
                        (if ((safe_neq_pointer !prev_elem) null)
                        then
                         (C_27:
                         (let jessie_79 =
                         (C_25:
                         ((safe_acc_ !Proc_next_ready_list_1) !ready_list_elem)) in
                         (let jessie_82 = !prev_elem in
                         begin
                           (((safe_upd_ Proc_next_ready_list_1) jessie_82) jessie_79);
                          jessie_79 end)))
                        else
                         (C_24:
                         begin
                           (ready_list := (C_23:
                                          ((safe_acc_ !Proc_next_ready_list_1) !ready_list_elem)));
                          !ready_list end)) in void);
                       (C_29:
                       begin
                         (let jessie_90 =
                         (let jessie_86 = null in
                         (let jessie_89 = !ready_list_elem in
                         (((safe_upd_ Proc_next_ready_list_1) jessie_89) jessie_86))) in
                         void);
                        (if ((eq_int_ (integer_of_int32 (C_39:
                                                        ((safe_acc_ Proc_priority_process_19) !process)))) 
                             (integer_of_int32 !max_prio))
                        then
                         (let jessie_103 =
                         (C_30:
                         begin
                           (let jessie_92 =
                           (highest_prio := (safe_int32_of_integer_ (0))) in
                           void);
                          (C_31:
                          begin
                            (let jessie_94 =
                            (highest_search := !ready_list) in void);
                           try
                            (let jessie_101 =
                            begin
                              (loop_4:
                              while true do
                              { invariant
                                  (JC_57:
                                  ge_int(integer_of_int32(list_length(highest_search,
                                                          Proc_next_ready_list_1)),
                                  (0)))  }
                               begin
                                 [ { } unit { true } ];
                                try
                                 (let jessie_100 =
                                 begin
                                   (let jessie_99 =
                                   begin
                                     (if ((safe_neq_pointer !highest_search) null)
                                     then void
                                     else
                                      (let jessie_95 =
                                      (raise (Goto_while_1_break_exc void)) in
                                      void));
                                    (if ((gt_int_ (integer_of_int32 (C_35:
                                                                    ((safe_acc_ !Proc_priority_ready_list_1) !highest_search)))) 
                                         (integer_of_int32 !highest_prio))
                                    then
                                     (C_34:
                                     (let jessie_97 =
                                     (highest_prio := (C_33:
                                                      ((safe_acc_ !Proc_priority_ready_list_1) !highest_search))) in
                                     void)) else void);
                                    (C_37:
                                    begin
                                      (highest_search := (C_36:
                                                         ((safe_acc_ !Proc_next_ready_list_1) !highest_search)));
                                     !highest_search end) end in void);
                                  (raise (Loop_continue_exc void)) end in
                                 void) with Loop_continue_exc jessie_4 ->
                                 void end end done);
                             (raise (Goto_while_1_break_exc void)) end in
                            void) with Goto_while_1_break_exc jessie_1 ->
                            (while_1_break: void) end;
                           (C_38:
                           begin   (max_prio := !highest_prio); !max_prio end)
                          end) end) in void) else void);
                        (C_40:
                        begin
                          (found := (safe_int32_of_integer_ (1))); !found end)
                       end) end in void) else void);
                     (C_41:
                     begin
                       (let jessie_107 = (prev_elem := !ready_list_elem) in
                       void);
                      (C_43:
                      begin
                        (ready_list_elem := (C_42:
                                            ((safe_acc_ !Proc_next_ready_list_1) !ready_list_elem)));
                       !ready_list_elem end) end) end) end in void);
                  (raise (Loop_continue_exc void)) end in void) with
                 Loop_continue_exc jessie_6 -> void end end done);
             (raise (Goto_while_0_break_exc void)) end in void) with
            Goto_while_0_break_exc jessie_2 -> (while_0_break: void) end;
           (C_44:
           begin
             (let jessie_113 = (__retres := (safe_int32_of_integer_ (0))) in
             void); (return := !__retres); (raise Return) end) end) end) end)
       end) end) end)))))))))))); absurd  end with Return -> !return end))
  { (JC_19: true) }

let process_kill_safety =
 fun (pid : uint32) ->
  { (JC_17:
    ge_int(integer_of_int32(list_length(ready_list, Proc_next_ready_list_1)),
    (0))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let Proc_priority_process_19 = (any_memory void) in
     (let Proc_process_19_alloc_table = (any_alloc_table void) in
     (let found = ref (any_int32 void) in
     (let proc_id = ref (any_uint32 void) in
     (let proc_id2 = ref (any_uint32 void) in
     (let process = ref (any_pointer void) in
     (let prev_elem = ref (any_pointer void) in
     (let ready_list_elem = ref (any_pointer void) in
     (let highest_search = ref (any_pointer void) in
     (let highest_prio = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     (C_4:
     begin
       (let jessie_8 = (found := (safe_int32_of_integer_ (0))) in void);
      (C_7:
      begin
        (let jessie_10 =
        (proc_id := (C_6:
                    (JC_23:
                    (uint32_of_integer_ (C_5:
                                        ((bw_and (integer_of_uint32 pid)) (127))))))) in
        void);
       (C_9:
       begin
         (let jessie_13 =
         (process := (C_8:
                     (let jessie_12 = !proc_id in
                     (JC_24:
                     ((pid2pcb_requires jessie_12) Proc_process_19_alloc_table))))) in
         void);
        (C_10:
        begin
          (let jessie_15 = (prev_elem := null) in void);
         (C_11:
         begin
           (let jessie_17 = (ready_list_elem := !ready_list) in void);
          (C_12:
          begin
            (let jessie_19 = (highest_search := null) in void);
           try
            (let jessie_57 =
            begin
              (loop_1:
              while true do
              { invariant (JC_31: true) variant (0) }
               begin
                 [ { } unit
                   reads Proc_next_ready_list_1,highest_search,prev_elem,ready_list,ready_list_elem
                   { (JC_29:
                     ((JC_25:
                      ge_int(integer_of_int32(list_length(ready_list,
                                              Proc_next_ready_list_1)),
                      (0)))
                     and ((JC_26:
                          ge_int(integer_of_int32(list_length(ready_list_elem,
                                                  Proc_next_ready_list_1)),
                          (0)))
                         and ((JC_27:
                              ge_int(integer_of_int32(list_length(prev_elem,
                                                      Proc_next_ready_list_1)),
                              (0)))
                             and (JC_28:
                                 ge_int(integer_of_int32(list_length(highest_search,
                                                         Proc_next_ready_list_1)),
                                 (0))))))) } ];
                try
                 (let jessie_56 =
                 begin
                   (let jessie_55 =
                   begin
                     (if ((neq_pointer !ready_list_elem) null)
                     then
                      (if ((eq_int_ (integer_of_int32 !found)) (0)) then void
                      else
                       (let jessie_20 =
                       (raise (Goto_while_0_break_exc void)) in void))
                     else
                      (let jessie_21 =
                      (raise (Goto_while_0_break_exc void)) in void));
                    (C_22:
                    begin
                      (let jessie_23 =
                      (proc_id2 := (C_21:
                                   (JC_34:
                                   (uint32_of_integer_ (integer_of_int32 
                                                        (C_20:
                                                        (JC_33:
                                                        (((acc_ !Proc_ready_list_1_alloc_table) !Proc_pid_0_ready_list_1) !ready_list_elem)))))))) in
                      void);
                     (if ((eq_int_ (integer_of_uint32 !proc_id)) (integer_of_uint32 !proc_id2))
                     then
                      (let jessie_51 =
                      begin
                        (let jessie_30 =
                        (if ((neq_pointer !prev_elem) null)
                        then
                         (C_27:
                         (let jessie_25 =
                         (C_25:
                         (JC_35:
                         (((acc_ !Proc_ready_list_1_alloc_table) !Proc_next_ready_list_1) !ready_list_elem))) in
                         (let jessie_28 = !prev_elem in
                         begin
                           (JC_36:
                           ((((upd_ !Proc_ready_list_1_alloc_table) Proc_next_ready_list_1) jessie_28) jessie_25));
                          jessie_25 end)))
                        else
                         (C_24:
                         begin
                           (ready_list := (C_23:
                                          (JC_37:
                                          (((acc_ !Proc_ready_list_1_alloc_table) !Proc_next_ready_list_1) !ready_list_elem))));
                          !ready_list end)) in void);
                       (C_29:
                       begin
                         (let jessie_36 =
                         (let jessie_32 = null in
                         (let jessie_35 = !ready_list_elem in
                         (JC_38:
                         ((((upd_ !Proc_ready_list_1_alloc_table) Proc_next_ready_list_1) jessie_35) jessie_32)))) in
                         void);
                        (if ((eq_int_ (integer_of_int32 (C_39:
                                                        (JC_39:
                                                        (((acc_ Proc_process_19_alloc_table) Proc_priority_process_19) !process))))) 
                             (integer_of_int32 !max_prio))
                        then
                         (let jessie_49 =
                         (C_30:
                         begin
                           (let jessie_38 =
                           (highest_prio := (safe_int32_of_integer_ (0))) in
                           void);
                          (C_31:
                          begin
                            (let jessie_40 =
                            (highest_search := !ready_list) in void);
                           try
                            (let jessie_47 =
                            begin
                              (loop_2:
                              while true do
                              { invariant (JC_42: true) variant (0) }
                               begin
                                 [ { } unit
                                   reads Proc_next_ready_list_1,highest_search
                                   { (JC_40:
                                     ge_int(integer_of_int32(list_length(highest_search,
                                                             Proc_next_ready_list_1)),
                                     (0))) } ];
                                try
                                 (let jessie_46 =
                                 begin
                                   (let jessie_45 =
                                   begin
                                     (if ((neq_pointer !highest_search) null)
                                     then void
                                     else
                                      (let jessie_41 =
                                      (raise (Goto_while_1_break_exc void)) in
                                      void));
                                    (if ((gt_int_ (integer_of_int32 (C_35:
                                                                    (JC_44:
                                                                    (((acc_ !Proc_ready_list_1_alloc_table) !Proc_priority_ready_list_1) !highest_search))))) 
                                         (integer_of_int32 !highest_prio))
                                    then
                                     (C_34:
                                     (let jessie_43 =
                                     (highest_prio := (C_33:
                                                      (JC_45:
                                                      (((acc_ !Proc_ready_list_1_alloc_table) !Proc_priority_ready_list_1) !highest_search)))) in
                                     void)) else void);
                                    (C_37:
                                    begin
                                      (highest_search := (C_36:
                                                         (JC_46:
                                                         (((acc_ !Proc_ready_list_1_alloc_table) !Proc_next_ready_list_1) !highest_search))));
                                     !highest_search end) end in void);
                                  (raise (Loop_continue_exc void)) end in
                                 void) with Loop_continue_exc jessie_4 ->
                                 void end end done);
                             (raise (Goto_while_1_break_exc void)) end in
                            void) with Goto_while_1_break_exc jessie_1 ->
                            (while_1_break: void) end;
                           (C_38:
                           begin   (max_prio := !highest_prio); !max_prio end)
                          end) end) in void) else void);
                        (C_40:
                        begin
                          (found := (safe_int32_of_integer_ (1))); !found end)
                       end) end in void) else void);
                     (C_41:
                     begin
                       (let jessie_53 = (prev_elem := !ready_list_elem) in
                       void);
                      (C_43:
                      begin
                        (ready_list_elem := (C_42:
                                            (JC_47:
                                            (((acc_ !Proc_ready_list_1_alloc_table) !Proc_next_ready_list_1) !ready_list_elem))));
                       !ready_list_elem end) end) end) end in void);
                  (raise (Loop_continue_exc void)) end in void) with
                 Loop_continue_exc jessie_6 -> void end end done);
             (raise (Goto_while_0_break_exc void)) end in void) with
            Goto_while_0_break_exc jessie_2 -> (while_0_break: void) end;
           (C_44:
           begin
             (let jessie_59 = (__retres := (safe_int32_of_integer_ (0))) in
             void); (return := !__retres); (raise Return) end) end) end) end)
       end) end) end)))))))))))); absurd  end with Return -> !return end))
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C vamos.jessie --quiet -f vamos.makefile project
why --project [...] why/vamos.why
<project name="vamos" context="why/vamos_ctx.why">
  <function name="Function process_kill">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/vamos_po10.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "56" begin = "2" end = "10"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/vamos_po11.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "56" begin = "2" end = "10"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/vamos_po12.why">
      <location file = "why/vamos.why" line = "819" begin = "26" end = "61"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/vamos_po13.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "69" begin = "4" end = "12"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po14.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "69" begin = "4" end = "12"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po15.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "69" begin = "4" end = "12"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/vamos_po16.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "69" begin = "4" end = "12"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/vamos_po17.why">
      <location file = "why/vamos.why" line = "843" begin = "29" end = "58"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/vamos_po18.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "72" begin = "1" end = "10"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po19.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "72" begin = "1" end = "10"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po20.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "72" begin = "1" end = "10"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po21.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "72" begin = "1" end = "10"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po22.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "74" begin = "1" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po23.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "74" begin = "1" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po24.why">
      <location file = "PPCHOME/tests/jessie/vamos.jessie/vamos.jc" line = "132" begin = "27" end = "63"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po25.why">
      <location file = "PPCHOME/tests/jessie/vamos.jessie/vamos.jc" line = "132" begin = "27" end = "63"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po26.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "76" begin = "6" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po27.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "76" begin = "6" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po28.why">
      <location file = "why/vamos.why" line = "903" begin = "42" end = "76"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/vamos_po29.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "82" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po30.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "82" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po31.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "83" begin = "5" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po32.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "83" begin = "5" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po33.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "84" begin = "3" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po34.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "84" begin = "3" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po35.why">
      <location file = "why/vamos.why" line = "890" begin = "65" end = "66"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/vamos_po36.why">
      <location file = "why/vamos.why" line = "890" begin = "65" end = "66"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/vamos_po37.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "91" begin = "4" end = "19"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po38.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "91" begin = "4" end = "19"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/vamos_po39.why">
      <location file = "why/vamos.why" line = "793" begin = "49" end = "50"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/vamos_po40.why">
      <location file = "why/vamos.why" line = "793" begin = "49" end = "50"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/vamos_po1.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "64" begin = "21" end = "54"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/vamos_po2.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "65" begin = "21" end = "48"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/vamos_po3.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "66" begin = "21" end = "53"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/vamos_po4.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "79" begin = "20" end = "52"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/vamos_po5.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "79" begin = "20" end = "52"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/vamos_po6.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "63" begin = "21" end = "49"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/vamos_po7.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "64" begin = "21" end = "54"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/vamos_po8.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "65" begin = "21" end = "48"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/vamos_po9.why">
      <location file = "PPCHOME/tests/jessie/vamos.c" line = "66" begin = "21" end = "53"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type Proc

type char_P

type int32

type int8

type padding

type ready_list_1

type uint32

type void_P

logic Proc_tag : Proc tag_id

axiom Proc_int: (int_of_tag(Proc_tag) = 1)

logic Proc_of_pointer_address : unit pointer -> Proc pointer

axiom Proc_of_pointer_address_of_pointer_addr:
  (forall p:Proc pointer. (p = Proc_of_pointer_address(pointer_address(p))))

axiom Proc_parenttag_bottom: parenttag(Proc_tag, bottom_tag)

axiom Proc_tags:
  (forall x:Proc pointer.
    (forall Proc_tag_table:Proc tag_table. instanceof(Proc_tag_table, x,
      Proc_tag)))

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint32 : uint32 -> int

predicate eq_uint32(x: uint32, y: uint32) =
  (integer_of_uint32(x) = integer_of_uint32(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_Proc(p: Proc pointer, a: int,
  Proc_alloc_table: Proc alloc_table) = (offset_min(Proc_alloc_table,
  p) <= a)

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

logic list_length : Proc pointer, (Proc, Proc pointer) memory -> int32

axiom list_length_pos:
  (forall Proc_p_4_alloc_table_at_State:Proc alloc_table.
    (forall Proc_next_p_4_at_State:(Proc, Proc pointer) memory.
      (forall p_1:Proc pointer.
        ((integer_of_int32(list_length(p_1, Proc_next_p_4_at_State)) > 0) ->
         ((offset_min(Proc_p_4_alloc_table_at_State, p_1) <= 0) and
          ((offset_max(Proc_p_4_alloc_table_at_State, p_1) >= 0) and
           (integer_of_int32(list_length(select(Proc_next_p_4_at_State, p_1),
           Proc_next_p_4_at_State)) = (integer_of_int32(list_length(p_1,
           Proc_next_p_4_at_State)) - 1))))))))

axiom list_length_remove:
  (forall Proc_p_4_alloc_table_at_State:Proc alloc_table.
    (forall Proc_next_p_4_at_State:(Proc, Proc pointer) memory.
      (forall p_2:Proc pointer.
        ((integer_of_int32(list_length(p_2, Proc_next_p_4_at_State)) > 0) ->
         ((offset_min(Proc_p_4_alloc_table_at_State, p_2) <= 0) and
          ((offset_max(Proc_p_4_alloc_table_at_State, p_2) >= 0) and
           (integer_of_int32(list_length(select(Proc_next_p_4_at_State, p_2),
           Proc_next_p_4_at_State)) = (integer_of_int32(list_length(p_2,
           Proc_next_p_4_at_State)) - 1))))))))

axiom list_length_zero:
  (forall Proc_next_p_4_at_State:(Proc, Proc pointer) memory.
    (forall p_0:Proc pointer.
      ((integer_of_int32(list_length(p_0, Proc_next_p_4_at_State)) = 0) <->
       (p_0 = null))))

axiom no_assign_list_length_0:
  (forall tmp:Proc pset.
    (forall tmpmem:(Proc, Proc pointer) memory.
      (forall tmpalloc:Proc alloc_table.
        (forall Proc_next_p_4_at_State:(Proc, Proc pointer) memory.
          (forall p:Proc pointer.
            ((pset_disjoint(tmp,
              pset_union(pset_deref(Proc_next_p_4_at_State,
              pset_singleton(p)), pset_singleton(p))) and
              not_assigns(tmpalloc, Proc_next_p_4_at_State, tmpmem, tmp)) ->
             (list_length(p, Proc_next_p_4_at_State) = list_length(p,
             tmpmem))))))))

logic reachable : Proc pointer, Proc pointer, (Proc,
Proc pointer) memory -> prop

axiom no_assign_reachable_0:
  (forall tmp:Proc pset.
    (forall tmpmem:(Proc, Proc pointer) memory.
      (forall tmpalloc:Proc alloc_table.
        (forall Proc_next_p_3_5_at_State:(Proc, Proc pointer) memory.
          (forall q:Proc pointer.
            (forall p_3:Proc pointer.
              ((pset_disjoint(tmp, pset_singleton(p_3)) and
                not_assigns(tmpalloc, Proc_next_p_3_5_at_State, tmpmem, tmp)) ->
               (reachable(p_3, q, Proc_next_p_3_5_at_State) <->
                reachable(p_3, q, tmpmem)))))))))

axiom no_update_list_length_0:
  (forall tmp:Proc pointer.
    (forall tmpval:Proc pointer.
      (forall Proc_next_p_4_at_State:(Proc, Proc pointer) memory.
        (forall p:Proc pointer.
          ((not in_pset(tmp, pset_union(pset_deref(Proc_next_p_4_at_State,
           pset_singleton(p)), pset_singleton(p)))) -> (list_length(p,
           Proc_next_p_4_at_State) = list_length(p,
           store(Proc_next_p_4_at_State, tmp, tmpval))))))))

axiom no_update_reachable_0:
  (forall tmp:Proc pointer.
    (forall tmpval:Proc pointer.
      (forall Proc_next_p_3_5_at_State:(Proc, Proc pointer) memory.
        (forall q:Proc pointer.
          (forall p_3:Proc pointer.
            ((not in_pset(tmp, pset_singleton(p_3))) ->
             (reachable(p_3, q, Proc_next_p_3_5_at_State) <-> reachable(p_3,
              q, store(Proc_next_p_3_5_at_State, tmp, tmpval)))))))))

axiom pointer_addr_of_Proc_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(Proc_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

axiom reachable_def:
  (forall Proc_next_p_3_5_at_State:(Proc, Proc pointer) memory.
    (forall p_4:Proc pointer.
      (forall q_0:Proc pointer.
        (reachable(p_4, q_0, Proc_next_p_3_5_at_State) ->
         ((p_4 = q_0) or reachable(select(Proc_next_p_3_5_at_State, p_4),
          q_0, Proc_next_p_3_5_at_State))))))

predicate right_valid_struct_Proc(p: Proc pointer, b: int,
  Proc_alloc_table: Proc alloc_table) = (offset_max(Proc_alloc_table,
  p) >= b)

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_Proc(p: Proc pointer, a: int, b: int,
  Proc_alloc_table: Proc alloc_table) =
  ((offset_min(Proc_alloc_table, p) = a) and (offset_max(Proc_alloc_table,
   p) = b))

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_Proc(p: Proc pointer, a: int, b: int,
  Proc_alloc_table: Proc alloc_table) =
  ((offset_min(Proc_alloc_table, p) = a) and (offset_max(Proc_alloc_table,
   p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

logic uint32_of_integer : int -> uint32

axiom uint32_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 4294967295)) ->
     (integer_of_uint32(uint32_of_integer(x)) = x)))

axiom uint32_range:
  (forall x:uint32.
    ((0 <= integer_of_uint32(x)) and (integer_of_uint32(x) <= 4294967295)))

predicate valid_bitvector_struct_Proc(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Proc(p: Proc pointer, a: int, b: int,
  Proc_alloc_table: Proc alloc_table) =
  ((offset_min(Proc_alloc_table, p) <= a) and (offset_max(Proc_alloc_table,
   p) >= b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_Proc(p: Proc pointer, a: int, b: int,
  Proc_alloc_table: Proc alloc_table) =
  ((offset_min(Proc_alloc_table, p) <= a) and (offset_max(Proc_alloc_table,
   p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

