Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only bts0112.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD bts0112.c"
[jessie] Starting Jessie translation
[kernel] No code for function fmod, default assigns generated
bts0112.c:136:[jessie] warning: skipping all arguments of implicit prototype fmod
[jessie] Producing Jessie files in subdir bts0112.jessie
[jessie] File bts0112.jessie/bts0112.jc written.
[jessie] File bts0112.jessie/bts0112.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag double_P = {
  double double_M: 64;
}

type double_P = [double_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

axiomatic int_matrices {

  logic real pow_i(integer a, integer b)
   
  logic integer max_int 
   
  axiom max_int_eq :
  (max_int == 0x1p53)
   
  predicate delay(integer n, integer p) =
  (((0 < n) && (2 <= p)) &&
    ((((p - 1) / 2.) * (pow_i(p, (n - 1)) + pow_i((p - 2), (n - 1)))) <=
      max_int))
   
  axiom delay_decreases :
  (\forall integer n1;
    (\forall integer n2;
      (\forall integer p1;
        (\forall integer p2;
          (((0 < n1) && (n1 <= n2)) ==>
            (((2 <= p1) && (p1 <= p2)) ==> (delay(n2, p2) ==> delay(n1, p1))))))))
   
  axiom delay_2 :
  delay(55, 2)
   
  logic integer l_pmax(integer n_0)
   
  axiom l_pmax_def :
  (\forall integer n_1;
    (delay(n_1, l_pmax(n_1)) && (! delay(n_1, (l_pmax(n_1) + 1)))))
   
  axiom delay_pmax :
  (\forall integer n_2;
    (\forall integer p_0;
      (delay(n_2, p_0) ==> (p_0 <= l_pmax(n_2)))))
  
}

predicate is_exact_int_mat{L}(double_P[..] X, integer LDX, integer N,
                              integer M) =
(((((((\offset_min(X) <= 0) && (\offset_max(X) >= ((N * LDX) + M))) &&
      (0 <= LDX)) &&
     (0 <= N)) &&
    (0 <= M)) &&
   (M <= LDX)) &&
  (\forall integer i;
    (\forall integer j;
      ((((0 <= i) && (i < N)) && ((0 <= j) && (j < M))) ==>
        ((\double_round_error((X + ((i * LDX) + j)).double_M) == 0) &&
          (\exists integer v;
            (((X + ((i * LDX) + j)).double_M :> real) == v)))))))

predicate is_exact_int_mat_bounded_by{L}(double_P[..] X_0, integer LDX_0,
                                         integer N_0, integer M_0,
                                         integer min, integer max) =
(((((((\offset_min(X_0) <= 0) && (\offset_max(X_0) >= ((N_0 * LDX_0) + M_0))) &&
      (0 <= LDX_0)) &&
     (0 <= N_0)) &&
    (0 <= M_0)) &&
   (M_0 <= LDX_0)) &&
  (\forall integer i_0;
    (\forall integer j_0;
      ((((0 <= i_0) && (i_0 < N_0)) && ((0 <= j_0) && (j_0 < M_0))) ==>
        (((\double_round_error((X_0 + ((i_0 * LDX_0) + j_0)).double_M) == 0) &&
           (\exists integer v_0;
             (((X_0 + ((i_0 * LDX_0) + j_0)).double_M :> real) == v_0))) &&
          ((min <= ((X_0 + ((i_0 * LDX_0) + j_0)).double_M :> real)) &&
            (((X_0 + ((i_0 * LDX_0) + j_0)).double_M :> real) <= max)))))))

predicate temporary_is_exact_int_mat_bounded_by{L}(double_P[..] X_1,
                                                   integer LDX_1,
                                                   integer N_1, integer M_1,
                                                   integer k, integer min_0,
                                                   integer max_0) =
(((((((\offset_min(X_1) <= 0) && (\offset_max(X_1) >= ((N_1 * LDX_1) + M_1))) &&
      (0 <= LDX_1)) &&
     (0 <= N_1)) &&
    (0 <= M_1)) &&
   (M_1 <= LDX_1)) &&
  (\forall integer i_1;
    (\forall integer j_1;
      (((((0 <= i_1) && (i_1 < N_1)) && ((0 <= j_1) && (j_1 < M_1))) ||
         ((i_1 == N_1) && ((0 <= j_1) && (j_1 < k)))) ==>
        (((\double_round_error((X_1 + ((i_1 * LDX_1) + j_1)).double_M) == 0) &&
           (\exists integer v_1;
             (((X_1 + ((i_1 * LDX_1) + j_1)).double_M :> real) == v_1))) &&
          ((min_0 <= ((X_1 + ((i_1 * LDX_1) + j_1)).double_M :> real)) &&
            (((X_1 + ((i_1 * LDX_1) + j_1)).double_M :> real) <= max_0)))))))

unit DGEMM_NEG(int32 N, int32 M, int32 K, int32 p, double_P[..] A, int32 LDA,
               double_P[..] X, int32 LDX, double_P[..] Y, int32 LDY)
  requires (C_62 : (((((((C_68 : (2 <= p)) &&
                          (C_69 : ((((p - 1) * (p - 1)) * M) <= max_int))) &&
                         (C_70 : (\base_block(Y) != \base_block(A)))) &&
                        (C_71 : (\forall integer i_2;
                                  (\forall integer j_2;
                                    (((0 <= i_2) &&
                                       (i_2 <= ((((N - 1) * LDY) + K) - 1))) ==>
                                      (((0 <= j_2) &&
                                         (j_2 <= ((((M - 1) * LDX) + K) - 1))) ==>
                                        ((Y + i_2) != (X + j_2)))))))) &&
                       (C_72 : is_exact_int_mat_bounded_by{Here}(Y, LDY, N,
                                                                 K, 0,
                                                                 (p - 1)))) &&
                      (C_73 : is_exact_int_mat_bounded_by{Here}(A, LDA, N, M,
                                                                0, (p - 1)))) &&
                     (C_74 : is_exact_int_mat_bounded_by{Here}(X, LDX, M, K,
                                                               0, (p - 1)))));
behavior default:
  assigns (Y + [0..((((N - 1) * LDY) + K) - 1)]).double_M;
  ensures (C_61 : is_exact_int_mat_bounded_by{Here}(\at(Y,Old), \at(LDY,Old),
                                                    \at(N,Old), \at(K,Old),
                                                    (((1 - \at(p,Old)) *
                                                       (\at(p,Old) - 1)) *
                                                      \at(M,Old)),
                                                    (\at(p,Old) - 1)));
{  
   (var int32 i);
   
   (var int32 j);
   
   (var int32 k);
   
   {  (C_1 : (i = 0));
      
      {  
         loop 
         behavior default:
           invariant (C_2 : (((C_4 : (0 <= i)) && (C_5 : (i <= N))) &&
                              (C_6 : is_exact_int_mat_bounded_by{Here}(
                              Y, LDY, i, K, (((1 - p) * (p - 1)) * M),
                              (p - 1)))));
         behavior default:
           
           assigns (Y + [0..((((i - 1) * LDY) + K) - 1)]).double_M;
         while (true)
         {  
            {  (if (i < N) then () else 
               (goto while_0_break));
               (C_7 : (k = 0));
               
               {  
                  loop 
                  behavior default:
                    invariant (C_8 : (((C_10 : (0 <= k)) &&
                                        (C_11 : (k <= K))) &&
                                       (C_12 : temporary_is_exact_int_mat_bounded_by{Here}(
                                       Y, LDY, i, K, k,
                                       (((1 - p) * (p - 1)) * M), (p - 1)))));
                  behavior default:
                    
                    assigns (Y + [(i * LDY)..((i * LDY) + (k - 1))]).double_M;
                  while (true)
                  {  
                     {  (if (k < K) then () else 
                        (goto while_1_break));
                        (C_13 : (j = 0));
                        
                        {  
                           loop 
                           behavior default:
                             invariant (C_14 : ((((((C_19 : (0 <= j)) &&
                                                     (C_20 : (j <= M))) &&
                                                    (C_21 : (\double_round_error(
                                                              (Y +
                                                                ((i * LDY) +
                                                                  k)).double_M) ==
                                                              0))) &&
                                                   (C_22 : (\exists integer v_2;
                                                             (((Y +
                                                                 ((i * LDY) +
                                                                   k)).double_M :> real) ==
                                                               v_2)))) &&
                                                  (C_23 : ((((1 - p) *
                                                              (p - 1)) *
                                                             j) <=
                                                            ((Y +
                                                               ((i * LDY) +
                                                                 k)).double_M :> real)))) &&
                                                 (C_24 : (((Y +
                                                             ((i * LDY) + k)).double_M :> real) <=
                                                           (p - 1)))));
                           behavior default:
                             
                             assigns (Y + ((i * LDY) + k)).double_M;
                           while (true)
                           {  
                              {  (if (j < M) then () else 
                                 (goto while_2_break));
                                 (C_51 : ((C_50 : (C_49 : (Y +
                                                            (C_48 : (
                                                            (C_47 : ((C_46 : (
                                                                    (C_45 : 
                                                                    (i *
                                                                    LDY)) :> int32)) +
                                                                    k)) :> int32)))).double_M) = 
                                 (C_44 : ((C_43 : (C_42 : (Y +
                                                            (C_41 : (
                                                            (C_40 : ((C_39 : (
                                                                    (C_38 : 
                                                                    (i *
                                                                    LDY)) :> int32)) +
                                                                    k)) :> int32)))).double_M) -
                                           (C_37 : ((C_36 : (C_35 : (A +
                                                                    (C_34 : (
                                                                    (C_33 : 
                                                                    ((C_32 : (
                                                                    (C_31 : 
                                                                    (i *
                                                                    LDA)) :> int32)) +
                                                                    j)) :> int32)))).double_M) *
                                                     (C_30 : (C_29 : 
                                                             (X +
                                                               (C_28 : (
                                                               (C_27 : 
                                                               ((C_26 : (
                                                                (C_25 : 
                                                                (j *
                                                                  LDX)) :> int32)) +
                                                                 k)) :> int32)))).double_M)))))));
                                 (C_54 : (j = (C_53 : ((C_52 : (j + 1)) :> int32))))
                              }
                           };
                           (while_2_break : ())
                        };
                        (C_57 : (k = (C_56 : ((C_55 : (k + 1)) :> int32))))
                     }
                  };
                  (while_1_break : ())
               };
               (C_60 : (i = (C_59 : ((C_58 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      (return ())
   }
}

int32 fmod()
behavior default:
  assigns \nothing;
  ensures (C_75 : true);
;

unit DREMM(int32 N_0, int32 K_0, int32 p_0, double_P[..] X_0, int32 LDX_0)
  requires (C_125 : is_exact_int_mat{Here}(X_0, LDX_0, N_0, K_0));
behavior default:
  assigns (X_0 + [0..((((N_0 - 1) * LDX_0) + K_0) - 1)]).double_M;
  ensures (C_122 : ((C_123 : is_exact_int_mat_bounded_by{Here}(\at(X_0,Old),
                                                               \at(LDX_0,Old),
                                                               \at(N_0,Old),
                                                               \at(K_0,Old),
                                                               0,
                                                               (\at(p_0,Old) -
                                                                 1))) &&
                     (C_124 : (\forall integer i_3;
                                (\forall integer j_3;
                                  ((((0 <= i_3) && (i_3 < \at(N_0,Old))) &&
                                     ((0 <= j_3) && (j_3 < \at(K_0,Old)))) ==>
                                    (\exists integer d;
                                      (((\at(X_0,Old) +
                                          ((i_3 * \at(LDX_0,Old)) + j_3)).double_M :> real) ==
                                        ((\old((X_0 + ((i_3 * LDX_0) + j_3)).double_M) :> real) +
                                          (d * \at(p_0,Old)))))))))));
{  
   (var int32 i_0);
   
   (var int32 k_0);
   
   {  (C_76 : (i_0 = 0));
      
      {  
         loop 
         while (true)
         {  
            {  (if (i_0 < N_0) then () else 
               (goto while_3_break));
               (C_77 : (k_0 = 0));
               
               {  
                  loop 
                  while (true)
                  {  
                     {  (if (k_0 < K_0) then () else 
                        (goto while_4_break));
                        
                        {  (C_93 : (let __cil_tmp = (C_84 : fmod())
                                   in (C_92 : ((C_91 : (C_90 : (X_0 +
                                                                 (C_89 : (
                                                                 (C_88 : 
                                                                 ((C_87 : (
                                                                  (C_86 : 
                                                                  (i_0 *
                                                                    LDX_0)) :> int32)) +
                                                                   k_0)) :> int32)))).double_M) = 
                                      (C_85 : (__cil_tmp :> double))))));
                           (if ((C_115 : (C_114 : (X_0 +
                                                    (C_113 : ((C_112 : 
                                                              ((C_111 : (
                                                               (C_110 : 
                                                               (i_0 *
                                                                 LDX_0)) :> int32)) +
                                                                k_0)) :> int32)))).double_M) <
                                 (C_109 : (0 :> double))) then (C_108 : (
                                                               (C_107 : 
                                                               (C_106 : 
                                                               (X_0 +
                                                                 (C_105 : (
                                                                 (C_104 : 
                                                                 ((C_103 : (
                                                                  (C_102 : 
                                                                  (i_0 *
                                                                    LDX_0)) :> int32)) +
                                                                   k_0)) :> int32)))).double_M) = 
                                                               (C_101 : 
                                                               ((C_100 : 
                                                                (C_99 : 
                                                                (X_0 +
                                                                  (C_98 : (
                                                                  (C_97 : 
                                                                  ((C_96 : (
                                                                   (C_95 : 
                                                                   (i_0 *
                                                                    LDX_0)) :> int32)) +
                                                                    k_0)) :> int32)))).double_M) +
                                                                 (C_94 : (p_0 :> double)))))) else ())
                        };
                        (C_118 : (k_0 = (C_117 : ((C_116 : (k_0 + 1)) :> int32))))
                     }
                  };
                  (while_4_break : ())
               };
               (C_121 : (i_0 = (C_120 : ((C_119 : (i_0 + 1)) :> int32))))
            }
         };
         (while_3_break : ())
      };
      
      (return ())
   }
}

unit DTRSM(int32 N_1, int32 K_1, double_P[..] A_0, int32 LDA_0,
           double_P[..] X_1, int32 LDX_1)
  requires (C_170 : (((C_172 : (N_1 <= 55)) &&
                       (C_173 : is_exact_int_mat_bounded_by{Here}(X_1, LDX_1,
                                                                  N_1, K_1,
                                                                  0,
                                                                  (l_pmax(
                                                                    N_1) -
                                                                    1)))) &&
                      (C_174 : is_exact_int_mat_bounded_by{Here}(A_0, LDA_0,
                                                                 N_1, N_1, 0,
                                                                 (l_pmax(
                                                                   N_1) -
                                                                   1)))));
behavior default:
  assigns (X_1 + [0..((((N_1 - 1) * LDX_1) + K_1) - 1)]).double_M;
  ensures (C_169 : is_exact_int_mat_bounded_by{Here}(\at(X_1,Old),
                                                     \at(LDX_1,Old),
                                                     \at(N_1,Old),
                                                     \at(K_1,Old),
                                                     (- max_int), max_int));
{  
   (var int32 i_1);
   
   (var int32 j_0);
   
   (var int32 k_1);
   
   {  (C_128 : (i_1 = (C_127 : ((C_126 : (N_1 - 2)) :> int32))));
      
      {  
         loop 
         while (true)
         {  
            {  (if (i_1 >= 0) then () else 
               (goto while_5_break));
               (C_131 : (j_0 = (C_130 : ((C_129 : (i_1 + 1)) :> int32))));
               
               {  
                  loop 
                  while (true)
                  {  
                     {  (if (j_0 < N_1) then () else 
                        (goto while_6_break));
                        (C_132 : (k_1 = 0));
                        
                        {  
                           loop 
                           while (true)
                           {  
                              {  (if (k_1 < K_1) then () else 
                                 (goto while_7_break));
                                 (C_159 : ((C_158 : (C_157 : (X_1 +
                                                               (C_156 : (
                                                               (C_155 : 
                                                               ((C_154 : (
                                                                (C_153 : 
                                                                (i_1 *
                                                                  LDX_1)) :> int32)) +
                                                                 k_1)) :> int32)))).double_M) = 
                                 (C_152 : ((C_151 : (C_150 : (X_1 +
                                                               (C_149 : (
                                                               (C_148 : 
                                                               ((C_147 : (
                                                                (C_146 : 
                                                                (i_1 *
                                                                  LDX_1)) :> int32)) +
                                                                 k_1)) :> int32)))).double_M) -
                                            (C_145 : ((C_144 : (C_143 : 
                                                               (A_0 +
                                                                 (C_142 : (
                                                                 (C_141 : 
                                                                 ((C_140 : (
                                                                  (C_139 : 
                                                                  (i_1 *
                                                                    LDA_0)) :> int32)) +
                                                                   j_0)) :> int32)))).double_M) *
                                                       (C_138 : (C_137 : 
                                                                (X_1 +
                                                                  (C_136 : (
                                                                  (C_135 : 
                                                                  ((C_134 : (
                                                                   (C_133 : 
                                                                   (j_0 *
                                                                    LDX_1)) :> int32)) +
                                                                    k_1)) :> int32)))).double_M)))))));
                                 (C_162 : (k_1 = (C_161 : ((C_160 : (k_1 + 1)) :> int32))))
                              }
                           };
                           (while_7_break : ())
                        };
                        (C_165 : (j_0 = (C_164 : ((C_163 : (j_0 + 1)) :> int32))))
                     }
                  };
                  (while_6_break : ())
               };
               (C_168 : (i_1 = (C_167 : ((C_166 : (i_1 - 1)) :> int32))))
            }
         };
         (while_5_break : ())
      };
      
      (return ())
   }
}

int32 Nmax(int32 p_2)
  requires (C_207 : (2 <= p_2));
behavior default:
  ensures (C_202 : (((C_204 : delay(\result, \at(p_2,Old))) &&
                      (C_205 : (\forall integer q;
                                 (((1 <= q) && (q <= \result)) <==>
                                   delay(q, \at(p_2,Old)))))) &&
                     (C_206 : (\result <= 55))));
{  
   (var double pp);
   
   (var double p2);
   
   (var int32 N_4);
   
   {  (C_176 : (pp = (C_175 : (1 :> double))));
      (C_178 : (p2 = (C_177 : (1 :> double))));
      (C_179 : (N_4 = 0));
      
      {  
         loop 
         while (true)
         {  
            {  (if ((C_190 : ((C_189 : ((C_188 : ((if ((C_187 : ((C_186 : 
                                                                 ((C_185 : (
                                                                  (C_184 : (
                                                                  (C_183 : 
                                                                  (p_2 -
                                                                    1)) :> int32)) :> double)) *
                                                                   (C_182 : 
                                                                   (pp +
                                                                    p2)))) /
                                                                  (C_181 : (2 :> double)))) <
                                                        (C_180 : (1 :> double))) then 1 else 0) :> int32)) ^
                                         -53)) :> int32)) !=
                     0) then () else 
               (goto while_8_break));
               
               {  (C_193 : (pp = (C_192 : (pp * (C_191 : (p_2 :> double))))));
                  (C_198 : (p2 = (C_197 : (p2 *
                                            (C_196 : ((C_195 : ((C_194 : 
                                                                (p_2 -
                                                                  2)) :> int32)) :> double))))))
               };
               (C_201 : (N_4 = (C_200 : ((C_199 : (N_4 + 1)) :> int32))))
            }
         };
         (while_8_break : ())
      };
      
      (return N_4)
   }
}

int32 pmax(int32 N_3)
behavior default:
  ensures (C_217 : (\result == l_pmax(\at(N_3,Old))));
{  
   (var int32 p_3);
   
   (var int32 tmp);
   
   (var int32 __retres);
   
   {  (C_208 : (p_3 = 1));
      
      {  
         loop 
         while (true)
         {  
            {  
               {  (C_210 : (tmp = (C_209 : Nmax(p_3))));
                  ()
               };
               (if (N_3 <= tmp) then () else 
               (goto while_9_break));
               (C_213 : (p_3 = (C_212 : ((C_211 : (p_3 + 1)) :> int32))))
            }
         };
         (while_9_break : ())
      };
      (C_216 : (__retres = (C_215 : ((C_214 : (p_3 - 1)) :> int32))));
      
      (return __retres)
   }
}

unit LZ_TRSM(int32 N_2, int32 K_2, int32 p_1, double_P[..] A_1, int32 LDA_1,
             double_P[..] B, int32 LDB)
  requires (C_246 : (((((C_250 : (2 <= p_1)) &&
                         (C_251 : ((((p_1 - 1) * (p_1 - 1)) * N_2) <=
                                    max_int))) &&
                        (C_252 : (\base_block(B) != \base_block(A_1)))) &&
                       (C_253 : is_exact_int_mat_bounded_by{Here}(A_1, LDA_1,
                                                                  N_2, N_2,
                                                                  0,
                                                                  (p_1 - 1)))) &&
                      (C_254 : is_exact_int_mat_bounded_by{Here}(B, LDB, N_2,
                                                                 K_2, 0,
                                                                 (p_1 - 1)))));
behavior default:
  assigns (B + [0..((((N_2 - 1) * LDB) + K_2) - 1)]).double_M;
  ensures (C_245 : is_exact_int_mat_bounded_by{Here}(\at(B,Old),
                                                     \at(LDB,Old),
                                                     \at(N_2,Old),
                                                     \at(K_2,Old), 0,
                                                     (\at(p_1,Old) - 1)));
{  
   (var int32 P);
   
   (var int32 G);
   
   (var int32 tmp_0);
   
   {  
      {  (C_219 : (tmp_0 = (C_218 : Nmax(p_1))));
         ()
      };
      (if (N_2 <= tmp_0) then 
      {  
         {  
            (assert for default: (C_242 : (N_2 <= 55)));
            ()
         };
         (C_243 : DTRSM(N_2, K_2, A_1, LDA_1, B, LDB));
         (C_244 : DREMM(N_2, K_2, p_1, B, LDB))
      } else 
      {  (C_222 : (P = (C_221 : ((C_220 : (N_2 / 2)) :> int32))));
         (C_225 : (G = (C_224 : ((C_223 : (N_2 - P)) :> int32))));
         (C_234 : LZ_TRSM(G, K_2, p_1,
                          (C_230 : (A_1 +
                                     (C_229 : ((C_228 : (P *
                                                          (C_227 : ((C_226 : 
                                                                    (LDA_1 +
                                                                    1)) :> int32)))) :> int32)))),
                          LDA_1,
                          (C_233 : (B +
                                     (C_232 : ((C_231 : (P * LDB)) :> int32)))),
                          LDB));
         (C_239 : DGEMM_NEG(P, G, K_2, p_1, (C_235 : (A_1 + P)), LDA_1,
                            (C_238 : (B +
                                       (C_237 : ((C_236 : (P * LDB)) :> int32)))),
                            LDB, B, LDB));
         (C_240 : DREMM(P, K_2, p_1, B, LDB));
         (C_241 : LZ_TRSM(P, K_2, p_1, A_1, LDA_1, B, LDB))
      });
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs bts0112.jessie/bts0112.cloc bts0112.jessie/bts0112.jc
type char_P

type double_P

type int32

type int8

type padding

type void_P

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Goto_while_2_break_exc of unit

exception Goto_while_3_break_exc of unit

exception Goto_while_4_break_exc of unit

exception Goto_while_5_break_exc of unit

exception Goto_while_6_break_exc of unit

exception Goto_while_7_break_exc of unit

exception Goto_while_8_break_exc of unit

exception Goto_while_9_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic pow_i: int, int -> real

logic max_int:  -> int

predicate delay(n:int, p:int) =
 (lt_int((0), n)
 and (le_int((2), p)
     and le_real(mul_real(div_real(real_of_int(sub_int(p, (1))), 2.),
                 add_real(pow_i(p, sub_int(n, (1))),
                 pow_i(sub_int(p, (2)), sub_int(n, (1))))),
         real_of_int(max_int))))

axiom delay_2 : delay((55), (2))

axiom delay_decreases :
 (forall n1:int.
  (forall n2:int.
   (forall p1:int.
    (forall p2:int.
     ((lt_int((0), n1) and le_int(n1, n2)) ->
      ((le_int((2), p1) and le_int(p1, p2)) ->
       (delay(n2, p2) -> delay(n1, p1))))))))

logic l_pmax: int -> int

axiom delay_pmax :
 (forall n_2:int.
  (forall p_0_1:int. (delay(n_2, p_0_1) -> le_int(p_0_1, l_pmax(n_2)))))

logic double_P_tag:  -> double_P tag_id

axiom double_P_int : (int_of_tag(double_P_tag) = (1))

logic double_P_of_pointer_address: unit pointer -> double_P pointer

axiom double_P_of_pointer_address_of_pointer_addr :
 (forall p:double_P pointer.
  (p = double_P_of_pointer_address(pointer_address(p))))

axiom double_P_parenttag_bottom : parenttag(double_P_tag, bottom_tag)

axiom double_P_tags :
 (forall x:double_P pointer.
  (forall double_P_tag_table:double_P tag_table.
   instanceof(double_P_tag_table, x, double_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate is_exact_int_mat(X:double_P pointer, LDX:int, N:int, M:int,
 double_P_X_1_alloc_table_at_L:double_P alloc_table,
 double_P_double_M_X_1_at_L:(double_P, double) memory) =
 (le_int(offset_min(double_P_X_1_alloc_table_at_L, X), (0))
 and (ge_int(offset_max(double_P_X_1_alloc_table_at_L, X),
      add_int(mul_int(N, LDX), M))
     and (le_int((0), LDX)
         and (le_int((0), N)
             and (le_int((0), M)
                 and (le_int(M, LDX)
                     and (forall i:int.
                          (forall j:int.
                           ((le_int((0), i)
                            and (lt_int(i, N)
                                and (le_int((0), j) and lt_int(j, M)))) ->
                            (eq_real(double_round_error(select(double_P_double_M_X_1_at_L,
                                                        shift(X,
                                                        add_int(mul_int(i,
                                                                LDX),
                                                        j)))),
                             0.0)
                            and (exists v:int.
                                 eq_real(double_value(select(double_P_double_M_X_1_at_L,
                                                      shift(X,
                                                      add_int(mul_int(i, LDX),
                                                      j)))),
                                 real_of_int(v)))))))))))))

predicate is_exact_int_mat_bounded_by(X_0:double_P pointer, LDX_0:int,
 N_0:int, M_0:int, min:int, max:int,
 double_P_X_0_2_alloc_table_at_L:double_P alloc_table,
 double_P_double_M_X_0_2_at_L:(double_P, double) memory) =
 (le_int(offset_min(double_P_X_0_2_alloc_table_at_L, X_0), (0))
 and (ge_int(offset_max(double_P_X_0_2_alloc_table_at_L, X_0),
      add_int(mul_int(N_0, LDX_0), M_0))
     and (le_int((0), LDX_0)
         and (le_int((0), N_0)
             and (le_int((0), M_0)
                 and (le_int(M_0, LDX_0)
                     and (forall i_0:int.
                          (forall j_0:int.
                           ((le_int((0), i_0)
                            and (lt_int(i_0, N_0)
                                and (le_int((0), j_0) and lt_int(j_0, M_0)))) ->
                            (eq_real(double_round_error(select(double_P_double_M_X_0_2_at_L,
                                                        shift(X_0,
                                                        add_int(mul_int(i_0,
                                                                LDX_0),
                                                        j_0)))),
                             0.0)
                            and ((exists v_0:int.
                                  eq_real(double_value(select(double_P_double_M_X_0_2_at_L,
                                                       shift(X_0,
                                                       add_int(mul_int(i_0,
                                                               LDX_0),
                                                       j_0)))),
                                  real_of_int(v_0)))
                                and (le_real(real_of_int(min),
                                     double_value(select(double_P_double_M_X_0_2_at_L,
                                                  shift(X_0,
                                                  add_int(mul_int(i_0, LDX_0),
                                                  j_0)))))
                                    and le_real(double_value(select(double_P_double_M_X_0_2_at_L,
                                                             shift(X_0,
                                                             add_int(
                                                             mul_int(i_0,
                                                             LDX_0), j_0)))),
                                        real_of_int(max))))))))))))))

axiom l_pmax_def :
 (forall n_1:int.
  (delay(n_1, l_pmax(n_1)) and (not delay(n_1, add_int(l_pmax(n_1), (1))))))

predicate left_valid_struct_char_P(p:char_P pointer, a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_double_P(p:double_P pointer, a:int,
 double_P_alloc_table:double_P alloc_table) =
 (offset_min(double_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer, a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom max_int_eq : eq_real(real_of_int(max_int), 0x1p53)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_double_P_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(double_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer, b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_double_P(p:double_P pointer, b:int,
 double_P_alloc_table:double_P alloc_table) =
 (offset_max(double_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer, b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_double_P(p:double_P pointer, a:int, b:int,
 double_P_alloc_table:double_P alloc_table) =
 ((offset_min(double_P_alloc_table, p) = a)
 and (offset_max(double_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_double_P(p:double_P pointer, a:int, b:int,
 double_P_alloc_table:double_P alloc_table) =
 ((offset_min(double_P_alloc_table, p) = a)
 and (offset_max(double_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate temporary_is_exact_int_mat_bounded_by(X_1:double_P pointer,
 LDX_1:int, N_1:int, M_1:int, k:int, min_0:int, max_0:int,
 double_P_X_1_3_alloc_table_at_L:double_P alloc_table,
 double_P_double_M_X_1_3_at_L:(double_P, double) memory) =
 (le_int(offset_min(double_P_X_1_3_alloc_table_at_L, X_1), (0))
 and (ge_int(offset_max(double_P_X_1_3_alloc_table_at_L, X_1),
      add_int(mul_int(N_1, LDX_1), M_1))
     and (le_int((0), LDX_1)
         and (le_int((0), N_1)
             and (le_int((0), M_1)
                 and (le_int(M_1, LDX_1)
                     and (forall i_1:int.
                          (forall j_1:int.
                           (((le_int((0), i_1)
                             and (lt_int(i_1, N_1)
                                 and (le_int((0), j_1) and lt_int(j_1, M_1))))
                            or (eq_int(i_1, N_1)
                               and (le_int((0), j_1) and lt_int(j_1, k)))) ->
                            (eq_real(double_round_error(select(double_P_double_M_X_1_3_at_L,
                                                        shift(X_1,
                                                        add_int(mul_int(i_1,
                                                                LDX_1),
                                                        j_1)))),
                             0.0)
                            and ((exists v_1:int.
                                  eq_real(double_value(select(double_P_double_M_X_1_3_at_L,
                                                       shift(X_1,
                                                       add_int(mul_int(i_1,
                                                               LDX_1),
                                                       j_1)))),
                                  real_of_int(v_1)))
                                and (le_real(real_of_int(min_0),
                                     double_value(select(double_P_double_M_X_1_3_at_L,
                                                  shift(X_1,
                                                  add_int(mul_int(i_1, LDX_1),
                                                  j_1)))))
                                    and le_real(double_value(select(double_P_double_M_X_1_3_at_L,
                                                             shift(X_1,
                                                             add_int(
                                                             mul_int(i_1,
                                                             LDX_1), j_1)))),
                                        real_of_int(max_0))))))))))))))

predicate valid_bitvector_struct_char_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_double_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_double_P(p:double_P pointer, a:int, b:int,
 double_P_alloc_table:double_P alloc_table) =
 ((offset_min(double_P_alloc_table, p) <= a)
 and (offset_max(double_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_double_P(p:double_P pointer, a:int, b:int,
 double_P_alloc_table:double_P alloc_table) =
 ((offset_min(double_P_alloc_table, p) <= a)
 and (offset_max(double_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter DGEMM_NEG :
 N_2:int32 ->
  M_2:int32 ->
   K:int32 ->
    p_0:int32 ->
     A:double_P pointer ->
      LDA:int32 ->
       X_2:double_P pointer ->
        LDX_2:int32 ->
         Y:double_P pointer ->
          LDY:int32 ->
           double_P_double_M_Y_6:(double_P, double) memory ref ->
            double_P_Y_6_alloc_table:double_P alloc_table ->
             double_P_X_5_alloc_table:double_P alloc_table ->
              double_P_A_4_alloc_table:double_P alloc_table ->
               double_P_double_M_X_5:(double_P, double) memory ->
                double_P_double_M_A_4:(double_P, double) memory ->
                 { } unit reads double_P_double_M_Y_6
                 writes double_P_double_M_Y_6
                 { (JC_<somenum>:
                   ((JC_<somenum>:
                    is_exact_int_mat_bounded_by(Y@, integer_of_int32(LDY@),
                    integer_of_int32(N_2@), integer_of_int32(K@),
                    mul_int(mul_int(sub_int((1), integer_of_int32(p_0@)),
                            sub_int(integer_of_int32(p_0@), (1))),
                    integer_of_int32(M_2@)),
                    sub_int(integer_of_int32(p_0@), (1)),
                    double_P_Y_6_alloc_table, double_P_double_M_Y_6))
                   and (JC_<somenum>:
                       not_assigns(double_P_Y_6_alloc_table@,
                       double_P_double_M_Y_6@, double_P_double_M_Y_6,
                       pset_range(pset_singleton(Y@), (0),
                       sub_int(add_int(mul_int(sub_int(integer_of_int32(N_2@),
                                               (1)),
                                       integer_of_int32(LDY@)),
                               integer_of_int32(K@)),
                       (1))))))) }

parameter DGEMM_NEG_requires :
 N_2:int32 ->
  M_2:int32 ->
   K:int32 ->
    p_0:int32 ->
     A:double_P pointer ->
      LDA:int32 ->
       X_2:double_P pointer ->
        LDX_2:int32 ->
         Y:double_P pointer ->
          LDY:int32 ->
           double_P_double_M_Y_6:(double_P, double) memory ref ->
            double_P_Y_6_alloc_table:double_P alloc_table ->
             double_P_X_5_alloc_table:double_P alloc_table ->
              double_P_A_4_alloc_table:double_P alloc_table ->
               double_P_double_M_X_5:(double_P, double) memory ->
                double_P_double_M_A_4:(double_P, double) memory ->
                 { (JC_<somenum>:
                   ((JC_<somenum>: le_int((2), integer_of_int32(p_0)))
                   and ((JC_<somenum>:
                        le_int(mul_int(mul_int(sub_int(integer_of_int32(p_0),
                                               (1)),
                                       sub_int(integer_of_int32(p_0), (1))),
                               integer_of_int32(M_2)),
                        max_int))
                       and ((JC_<somenum>: (not same_block(Y, A)))
                           and ((JC_<somenum>:
                                (forall i_2:int.
                                 (forall j_2:int.
                                  ((le_int((0), i_2)
                                   and le_int(i_2,
                                       sub_int(add_int(mul_int(sub_int(
                                                               integer_of_int32(N_2),
                                                               (1)),
                                                       integer_of_int32(LDY)),
                                               integer_of_int32(K)),
                                       (1)))) ->
                                   ((le_int((0), j_2)
                                    and le_int(j_2,
                                        sub_int(add_int(mul_int(sub_int(
                                                                integer_of_int32(M_2),
                                                                (1)),
                                                        integer_of_int32(LDX_2)),
                                                integer_of_int32(K)),
                                        (1)))) ->
                                    (shift(Y, i_2) <> shift(X_2, j_2)))))))
                               and ((JC_<somenum>:
                                    is_exact_int_mat_bounded_by(Y,
                                    integer_of_int32(LDY),
                                    integer_of_int32(N_2),
                                    integer_of_int32(K), (0),
                                    sub_int(integer_of_int32(p_0), (1)),
                                    double_P_Y_6_alloc_table,
                                    double_P_double_M_Y_6))
                                   and ((JC_<somenum>:
                                        is_exact_int_mat_bounded_by(A,
                                        integer_of_int32(LDA),
                                        integer_of_int32(N_2),
                                        integer_of_int32(M_2), (0),
                                        sub_int(integer_of_int32(p_0), (1)),
                                        double_P_A_4_alloc_table,
                                        double_P_double_M_A_4))
                                       and (JC_<somenum>:
                                           is_exact_int_mat_bounded_by(X_2,
                                           integer_of_int32(LDX_2),
                                           integer_of_int32(M_2),
                                           integer_of_int32(K), (0),
                                           sub_int(integer_of_int32(p_0),
                                           (1)), double_P_X_5_alloc_table,
                                           double_P_double_M_X_5)))))))))}
                 unit reads double_P_double_M_Y_6
                 writes double_P_double_M_Y_6
                 { (JC_<somenum>:
                   ((JC_<somenum>:
                    is_exact_int_mat_bounded_by(Y@, integer_of_int32(LDY@),
                    integer_of_int32(N_2@), integer_of_int32(K@),
                    mul_int(mul_int(sub_int((1), integer_of_int32(p_0@)),
                            sub_int(integer_of_int32(p_0@), (1))),
                    integer_of_int32(M_2@)),
                    sub_int(integer_of_int32(p_0@), (1)),
                    double_P_Y_6_alloc_table, double_P_double_M_Y_6))
                   and (JC_<somenum>:
                       not_assigns(double_P_Y_6_alloc_table@,
                       double_P_double_M_Y_6@, double_P_double_M_Y_6,
                       pset_range(pset_singleton(Y@), (0),
                       sub_int(add_int(mul_int(sub_int(integer_of_int32(N_2@),
                                               (1)),
                                       integer_of_int32(LDY@)),
                               integer_of_int32(K@)),
                       (1))))))) }

parameter DREMM :
 N_0_0:int32 ->
  K_0:int32 ->
   p_0_0:int32 ->
    X_0_0:double_P pointer ->
     LDX_0_0:int32 ->
      double_P_double_M_X_0_7:(double_P, double) memory ref ->
       double_P_X_0_7_alloc_table:double_P alloc_table ->
        { } unit reads double_P_double_M_X_0_7 writes double_P_double_M_X_0_7
        { (JC_<somenum>:
          ((JC_<somenum>:
           ((JC_<somenum>:
            is_exact_int_mat_bounded_by(X_0_0@, integer_of_int32(LDX_0_0@),
            integer_of_int32(N_0_0@), integer_of_int32(K_0@), (0),
            sub_int(integer_of_int32(p_0_0@), (1)),
            double_P_X_0_7_alloc_table, double_P_double_M_X_0_7))
           and (JC_<somenum>:
               (forall i_3_0:int.
                (forall j_3_0:int.
                 ((le_int((0), i_3_0)
                  and (lt_int(i_3_0, integer_of_int32(N_0_0@))
                      and (le_int((0), j_3_0)
                          and lt_int(j_3_0, integer_of_int32(K_0@))))) ->
                  (exists d:int.
                   eq_real(double_value(select(double_P_double_M_X_0_7,
                                        shift(X_0_0@,
                                        add_int(mul_int(i_3_0,
                                                integer_of_int32(LDX_0_0@)),
                                        j_3_0)))),
                   add_real(double_value(select(double_P_double_M_X_0_7@,
                                         shift(X_0_0@,
                                         add_int(mul_int(i_3_0@,
                                                 integer_of_int32(LDX_0_0@)),
                                         j_3_0@)))),
                   real_of_int(mul_int(d, integer_of_int32(p_0_0@))))))))))))
          and (JC_<somenum>:
              not_assigns(double_P_X_0_7_alloc_table@,
              double_P_double_M_X_0_7@, double_P_double_M_X_0_7,
              pset_range(pset_singleton(X_0_0@), (0),
              sub_int(add_int(mul_int(sub_int(integer_of_int32(N_0_0@), (1)),
                              integer_of_int32(LDX_0_0@)),
                      integer_of_int32(K_0@)),
              (1))))))) }

parameter DREMM_requires :
 N_0_0:int32 ->
  K_0:int32 ->
   p_0_0:int32 ->
    X_0_0:double_P pointer ->
     LDX_0_0:int32 ->
      double_P_double_M_X_0_7:(double_P, double) memory ref ->
       double_P_X_0_7_alloc_table:double_P alloc_table ->
        { (JC_<somenum>:
          is_exact_int_mat(X_0_0, integer_of_int32(LDX_0_0),
          integer_of_int32(N_0_0), integer_of_int32(K_0),
          double_P_X_0_7_alloc_table, double_P_double_M_X_0_7))}
        unit reads double_P_double_M_X_0_7 writes double_P_double_M_X_0_7
        { (JC_<somenum>:
          ((JC_<somenum>:
           ((JC_<somenum>:
            is_exact_int_mat_bounded_by(X_0_0@, integer_of_int32(LDX_0_0@),
            integer_of_int32(N_0_0@), integer_of_int32(K_0@), (0),
            sub_int(integer_of_int32(p_0_0@), (1)),
            double_P_X_0_7_alloc_table, double_P_double_M_X_0_7))
           and (JC_<somenum>:
               (forall i_3_0:int.
                (forall j_3_0:int.
                 ((le_int((0), i_3_0)
                  and (lt_int(i_3_0, integer_of_int32(N_0_0@))
                      and (le_int((0), j_3_0)
                          and lt_int(j_3_0, integer_of_int32(K_0@))))) ->
                  (exists d:int.
                   eq_real(double_value(select(double_P_double_M_X_0_7,
                                        shift(X_0_0@,
                                        add_int(mul_int(i_3_0,
                                                integer_of_int32(LDX_0_0@)),
                                        j_3_0)))),
                   add_real(double_value(select(double_P_double_M_X_0_7@,
                                         shift(X_0_0@,
                                         add_int(mul_int(i_3_0@,
                                                 integer_of_int32(LDX_0_0@)),
                                         j_3_0@)))),
                   real_of_int(mul_int(d, integer_of_int32(p_0_0@))))))))))))
          and (JC_<somenum>:
              not_assigns(double_P_X_0_7_alloc_table@,
              double_P_double_M_X_0_7@, double_P_double_M_X_0_7,
              pset_range(pset_singleton(X_0_0@), (0),
              sub_int(add_int(mul_int(sub_int(integer_of_int32(N_0_0@), (1)),
                              integer_of_int32(LDX_0_0@)),
                      integer_of_int32(K_0@)),
              (1))))))) }

parameter DTRSM :
 N_1_0:int32 ->
  K_1:int32 ->
   A_0:double_P pointer ->
    LDA_0:int32 ->
     X_1_0:double_P pointer ->
      LDX_1_0:int32 ->
       double_P_double_M_X_1_9:(double_P, double) memory ref ->
        double_P_X_1_9_alloc_table:double_P alloc_table ->
         double_P_A_0_8_alloc_table:double_P alloc_table ->
          double_P_double_M_A_0_8:(double_P, double) memory ->
           { } unit reads double_P_double_M_X_1_9
           writes double_P_double_M_X_1_9
           { (JC_<somenum>:
             ((JC_<somenum>:
              is_exact_int_mat_bounded_by(X_1_0@, integer_of_int32(LDX_1_0@),
              integer_of_int32(N_1_0@), integer_of_int32(K_1@),
              neg_int(max_int), max_int, double_P_X_1_9_alloc_table,
              double_P_double_M_X_1_9))
             and (JC_<somenum>:
                 not_assigns(double_P_X_1_9_alloc_table@,
                 double_P_double_M_X_1_9@, double_P_double_M_X_1_9,
                 pset_range(pset_singleton(X_1_0@), (0),
                 sub_int(add_int(mul_int(sub_int(integer_of_int32(N_1_0@),
                                         (1)),
                                 integer_of_int32(LDX_1_0@)),
                         integer_of_int32(K_1@)),
                 (1))))))) }

parameter DTRSM_requires :
 N_1_0:int32 ->
  K_1:int32 ->
   A_0:double_P pointer ->
    LDA_0:int32 ->
     X_1_0:double_P pointer ->
      LDX_1_0:int32 ->
       double_P_double_M_X_1_9:(double_P, double) memory ref ->
        double_P_X_1_9_alloc_table:double_P alloc_table ->
         double_P_A_0_8_alloc_table:double_P alloc_table ->
          double_P_double_M_A_0_8:(double_P, double) memory ->
           { (JC_<somenum>:
             ((JC_<somenum>: le_int(integer_of_int32(N_1_0), (55)))
             and ((JC_<somenum>:
                  is_exact_int_mat_bounded_by(X_1_0,
                  integer_of_int32(LDX_1_0), integer_of_int32(N_1_0),
                  integer_of_int32(K_1), (0),
                  sub_int(l_pmax(integer_of_int32(N_1_0)), (1)),
                  double_P_X_1_9_alloc_table, double_P_double_M_X_1_9))
                 and (JC_<somenum>:
                     is_exact_int_mat_bounded_by(A_0,
                     integer_of_int32(LDA_0), integer_of_int32(N_1_0),
                     integer_of_int32(N_1_0), (0),
                     sub_int(l_pmax(integer_of_int32(N_1_0)), (1)),
                     double_P_A_0_8_alloc_table, double_P_double_M_A_0_8)))))}
           unit reads double_P_double_M_X_1_9 writes double_P_double_M_X_1_9
           { (JC_<somenum>:
             ((JC_<somenum>:
              is_exact_int_mat_bounded_by(X_1_0@, integer_of_int32(LDX_1_0@),
              integer_of_int32(N_1_0@), integer_of_int32(K_1@),
              neg_int(max_int), max_int, double_P_X_1_9_alloc_table,
              double_P_double_M_X_1_9))
             and (JC_<somenum>:
                 not_assigns(double_P_X_1_9_alloc_table@,
                 double_P_double_M_X_1_9@, double_P_double_M_X_1_9,
                 pset_range(pset_singleton(X_1_0@), (0),
                 sub_int(add_int(mul_int(sub_int(integer_of_int32(N_1_0@),
                                         (1)),
                                 integer_of_int32(LDX_1_0@)),
                         integer_of_int32(K_1@)),
                 (1))))))) }

parameter LZ_TRSM :
 N_2_0:int32 ->
  K_2:int32 ->
   p_1:int32 ->
    A_1:double_P pointer ->
     LDA_1:int32 ->
      B:double_P pointer ->
       LDB:int32 ->
        double_P_double_M_B_11:(double_P, double) memory ref ->
         double_P_B_11_alloc_table:double_P alloc_table ->
          double_P_A_1_10_alloc_table:double_P alloc_table ->
           double_P_double_M_A_1_10:(double_P, double) memory ->
            { } unit reads double_P_double_M_B_11
            writes double_P_double_M_B_11
            { (JC_<somenum>:
              ((JC_<somenum>:
               is_exact_int_mat_bounded_by(B@, integer_of_int32(LDB@),
               integer_of_int32(N_2_0@), integer_of_int32(K_2@), (0),
               sub_int(integer_of_int32(p_1@), (1)),
               double_P_B_11_alloc_table, double_P_double_M_B_11))
              and (JC_<somenum>:
                  not_assigns(double_P_B_11_alloc_table@,
                  double_P_double_M_B_11@, double_P_double_M_B_11,
                  pset_range(pset_singleton(B@), (0),
                  sub_int(add_int(mul_int(sub_int(integer_of_int32(N_2_0@),
                                          (1)),
                                  integer_of_int32(LDB@)),
                          integer_of_int32(K_2@)),
                  (1))))))) }

parameter LZ_TRSM_requires :
 N_2_0:int32 ->
  K_2:int32 ->
   p_1:int32 ->
    A_1:double_P pointer ->
     LDA_1:int32 ->
      B:double_P pointer ->
       LDB:int32 ->
        double_P_double_M_B_11:(double_P, double) memory ref ->
         double_P_B_11_alloc_table:double_P alloc_table ->
          double_P_A_1_10_alloc_table:double_P alloc_table ->
           double_P_double_M_A_1_10:(double_P, double) memory ->
            { (JC_<somenum>:
              ((JC_<somenum>: le_int((2), integer_of_int32(p_1)))
              and ((JC_<somenum>:
                   le_int(mul_int(mul_int(sub_int(integer_of_int32(p_1), (1)),
                                  sub_int(integer_of_int32(p_1), (1))),
                          integer_of_int32(N_2_0)),
                   max_int))
                  and ((JC_<somenum>: (not same_block(B, A_1)))
                      and ((JC_<somenum>:
                           is_exact_int_mat_bounded_by(A_1,
                           integer_of_int32(LDA_1), integer_of_int32(N_2_0),
                           integer_of_int32(N_2_0), (0),
                           sub_int(integer_of_int32(p_1), (1)),
                           double_P_A_1_10_alloc_table,
                           double_P_double_M_A_1_10))
                          and (JC_<somenum>:
                              is_exact_int_mat_bounded_by(B,
                              integer_of_int32(LDB), integer_of_int32(N_2_0),
                              integer_of_int32(K_2), (0),
                              sub_int(integer_of_int32(p_1), (1)),
                              double_P_B_11_alloc_table,
                              double_P_double_M_B_11)))))))}
            unit reads double_P_double_M_B_11 writes double_P_double_M_B_11
            { (JC_<somenum>:
              ((JC_<somenum>:
               is_exact_int_mat_bounded_by(B@, integer_of_int32(LDB@),
               integer_of_int32(N_2_0@), integer_of_int32(K_2@), (0),
               sub_int(integer_of_int32(p_1@), (1)),
               double_P_B_11_alloc_table, double_P_double_M_B_11))
              and (JC_<somenum>:
                  not_assigns(double_P_B_11_alloc_table@,
                  double_P_double_M_B_11@, double_P_double_M_B_11,
                  pset_range(pset_singleton(B@), (0),
                  sub_int(add_int(mul_int(sub_int(integer_of_int32(N_2_0@),
                                          (1)),
                                  integer_of_int32(LDB@)),
                          integer_of_int32(K_2@)),
                  (1))))))) }

parameter Nmax :
 p_2:int32 ->
  { } int32
  { (JC_<somenum>:
    ((JC_<somenum>: delay(integer_of_int32(result), integer_of_int32(p_2@)))
    and ((JC_<somenum>:
         (forall q:int.
          ((le_int((1), q) and le_int(q, integer_of_int32(result)))
          <-> delay(q, integer_of_int32(p_2@)))))
        and (JC_<somenum>: le_int(integer_of_int32(result), (55)))))) }

parameter Nmax_requires :
 p_2:int32 ->
  { (JC_<somenum>: le_int((2), integer_of_int32(p_2)))} int32
  { (JC_<somenum>:
    ((JC_<somenum>: delay(integer_of_int32(result), integer_of_int32(p_2@)))
    and ((JC_<somenum>:
         (forall q:int.
          ((le_int((1), q) and le_int(q, integer_of_int32(result)))
          <-> delay(q, integer_of_int32(p_2@)))))
        and (JC_<somenum>: le_int(integer_of_int32(result), (55)))))) }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_double_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_double_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_double_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_double_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter double_P_alloc_table : double_P alloc_table ref

parameter double_P_tag_table : double_P tag_table ref

parameter alloc_struct_double_P :
 n:int ->
  double_P_alloc_table:double_P alloc_table ref ->
   double_P_tag_table:double_P tag_table ref ->
    { } double_P pointer writes double_P_alloc_table,double_P_tag_table
    { (strict_valid_struct_double_P(result, (0), sub_int(n, (1)),
       double_P_alloc_table)
      and (alloc_extends(double_P_alloc_table@, double_P_alloc_table)
          and (alloc_fresh(double_P_alloc_table@, result, n)
              and instanceof(double_P_tag_table, result, double_P_tag)))) }

parameter alloc_struct_double_P_requires :
 n:int ->
  double_P_alloc_table:double_P alloc_table ref ->
   double_P_tag_table:double_P tag_table ref ->
    { ge_int(n, (0))} double_P pointer
    writes double_P_alloc_table,double_P_tag_table
    { (strict_valid_struct_double_P(result, (0), sub_int(n, (1)),
       double_P_alloc_table)
      and (alloc_extends(double_P_alloc_table@, double_P_alloc_table)
          and (alloc_fresh(double_P_alloc_table@, result, n)
              and instanceof(double_P_tag_table, result, double_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter fmod : tt:unit -> { } int32 { true }

parameter fmod_requires : tt:unit -> { } int32 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter pmax :
 N_3:int32 ->
  { } int32
  { (JC_<somenum>:
    eq_int(integer_of_int32(result), l_pmax(integer_of_int32(N_3@)))) }

parameter pmax_requires :
 N_3:int32 ->
  { } int32
  { (JC_<somenum>:
    eq_int(integer_of_int32(result), l_pmax(integer_of_int32(N_3@)))) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let DGEMM_NEG_ensures_default =
 fun (N_2 : int32) (M_2 : int32) (K : int32) (p_0 : int32) (A : double_P pointer) (LDA : int32) (X_2 : double_P pointer) (LDX_2 : int32) (Y : double_P pointer) (LDY : int32) (double_P_double_M_Y_6 : (double_P, double) memory ref) (double_P_A_4_alloc_table : double_P alloc_table) (double_P_X_5_alloc_table : double_P alloc_table) (double_P_Y_6_alloc_table : double_P alloc_table) (double_P_double_M_A_4 : (double_P, double) memory) (double_P_double_M_X_5 : (double_P, double) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int((2), integer_of_int32(p_0)))
    and ((JC_<somenum>:
         le_int(mul_int(mul_int(sub_int(integer_of_int32(p_0), (1)),
                        sub_int(integer_of_int32(p_0), (1))),
                integer_of_int32(M_2)),
         max_int))
        and ((JC_<somenum>: (not same_block(Y, A)))
            and ((JC_<somenum>:
                 (forall i_2:int.
                  (forall j_2:int.
                   ((le_int((0), i_2)
                    and le_int(i_2,
                        sub_int(add_int(mul_int(sub_int(integer_of_int32(N_2),
                                                (1)),
                                        integer_of_int32(LDY)),
                                integer_of_int32(K)),
                        (1)))) ->
                    ((le_int((0), j_2)
                     and le_int(j_2,
                         sub_int(add_int(mul_int(sub_int(integer_of_int32(M_2),
                                                 (1)),
                                         integer_of_int32(LDX_2)),
                                 integer_of_int32(K)),
                         (1)))) -> (shift(Y, i_2) <> shift(X_2, j_2)))))))
                and ((JC_<somenum>:
                     is_exact_int_mat_bounded_by(Y, integer_of_int32(LDY),
                     integer_of_int32(N_2), integer_of_int32(K), (0),
                     sub_int(integer_of_int32(p_0), (1)),
                     double_P_Y_6_alloc_table, double_P_double_M_Y_6))
                    and ((JC_<somenum>:
                         is_exact_int_mat_bounded_by(A,
                         integer_of_int32(LDA), integer_of_int32(N_2),
                         integer_of_int32(M_2), (0),
                         sub_int(integer_of_int32(p_0), (1)),
                         double_P_A_4_alloc_table, double_P_double_M_A_4))
                        and (JC_<somenum>:
                            is_exact_int_mat_bounded_by(X_2,
                            integer_of_int32(LDX_2), integer_of_int32(M_2),
                            integer_of_int32(K), (0),
                            sub_int(integer_of_int32(p_0), (1)),
                            double_P_X_5_alloc_table, double_P_double_M_X_5))))))))) }
  (init:
  try
   begin
     (let i_3 = ref (any_int32 void) in
     (let j_3 = ref (any_int32 void) in
     (let k_0 = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_<somenum> = (i_3 := (safe_int32_of_integer_ (0))) in void);
      try
       (let jessie_<somenum> =
       begin
         (loop_4:
         while true do
         { invariant
             ((JC_<somenum>:
              ((JC_<somenum>: le_int((0), integer_of_int32(i_3)))
              and ((JC_<somenum>:
                   le_int(integer_of_int32(i_3), integer_of_int32(N_2)))
                  and (JC_<somenum>:
                      is_exact_int_mat_bounded_by(Y, integer_of_int32(LDY),
                      integer_of_int32(i_3), integer_of_int32(K),
                      mul_int(mul_int(sub_int((1), integer_of_int32(p_0)),
                              sub_int(integer_of_int32(p_0), (1))),
                      integer_of_int32(M_2)),
                      sub_int(integer_of_int32(p_0), (1)),
                      double_P_Y_6_alloc_table, double_P_double_M_Y_6)))))
             and ((JC_<somenum>:
                  not_assigns(double_P_Y_6_alloc_table@loop_4,
                  double_P_double_M_Y_6@loop_4, double_P_double_M_Y_6,
                  pset_range(pset_singleton(Y), (0),
                  sub_int(add_int(mul_int(sub_int(integer_of_int32(i_3), (1)),
                                  integer_of_int32(LDY)),
                          integer_of_int32(K)),
                  (1)))))
                 and (JC_<somenum>:
                     not_assigns(double_P_Y_6_alloc_table@init,
                     double_P_double_M_Y_6@init, double_P_double_M_Y_6,
                     pset_range(pset_singleton(Y@init), (0),
                     sub_int(add_int(mul_int(sub_int(integer_of_int32(N_2@init),
                                             (1)),
                                     integer_of_int32(LDY@init)),
                             integer_of_int32(K@init)),
                     (1)))))))  }
          begin
            [ { } unit { true } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_7:
              (C_60:
              begin
                (if ((lt_int_ (integer_of_int32 !i_3)) (integer_of_int32 N_2))
                then void
                else
                 (let jessie_<somenum> = (raise (Goto_while_0_break_exc void)) in
                 void));
               (let jessie_<somenum> = (k_0 := (safe_int32_of_integer_ (0))) in
               void);
               try
                (let jessie_<somenum> =
                begin
                  (loop_5:
                  while true do
                  { invariant
                      ((JC_<somenum>:
                       ((JC_<somenum>: le_int((0), integer_of_int32(k_0)))
                       and ((JC_<somenum>:
                            le_int(integer_of_int32(k_0),
                            integer_of_int32(K)))
                           and (JC_<somenum>:
                               temporary_is_exact_int_mat_bounded_by(Y,
                               integer_of_int32(LDY), integer_of_int32(i_3),
                               integer_of_int32(K), integer_of_int32(k_0),
                               mul_int(mul_int(sub_int((1),
                                               integer_of_int32(p_0)),
                                       sub_int(integer_of_int32(p_0), (1))),
                               integer_of_int32(M_2)),
                               sub_int(integer_of_int32(p_0), (1)),
                               double_P_Y_6_alloc_table,
                               double_P_double_M_Y_6)))))
                      and ((JC_<somenum>:
                           not_assigns(double_P_Y_6_alloc_table@loop_5,
                           double_P_double_M_Y_6@loop_5,
                           double_P_double_M_Y_6,
                           pset_range(pset_singleton(Y),
                           mul_int(integer_of_int32(i_3),
                           integer_of_int32(LDY)),
                           add_int(mul_int(integer_of_int32(i_3),
                                   integer_of_int32(LDY)),
                           sub_int(integer_of_int32(k_0), (1))))))
                          and (JC_<somenum>:
                              not_assigns(double_P_Y_6_alloc_table@init,
                              double_P_double_M_Y_6@init,
                              double_P_double_M_Y_6,
                              pset_range(pset_singleton(Y@init), (0),
                              sub_int(add_int(mul_int(sub_int(integer_of_int32(N_2@init),
                                                      (1)),
                                              integer_of_int32(LDY@init)),
                                      integer_of_int32(K@init)),
                              (1)))))))  }
                   begin
                     [ { } unit { true } ];
                    try
                     (let jessie_<somenum> =
                     begin
                       (let jessie_<somenum> =
                       (C_13:
                       (C_57:
                       begin
                         (if ((lt_int_ (integer_of_int32 !k_0)) (integer_of_int32 K))
                         then void
                         else
                          (let jessie_<somenum> =
                          (raise (Goto_while_1_break_exc void)) in void));
                        (let jessie_<somenum> =
                        (j_3 := (safe_int32_of_integer_ (0))) in void);
                        try
                         (let jessie_<somenum> =
                         begin
                           (loop_6:
                           while true do
                           { invariant
                               ((JC_<somenum>:
                                ((JC_<somenum>: le_int((0), integer_of_int32(j_3)))
                                and ((JC_<somenum>:
                                     le_int(integer_of_int32(j_3),
                                     integer_of_int32(M_2)))
                                    and ((JC_<somenum>:
                                         eq_real(double_round_error(select(double_P_double_M_Y_6,
                                                                    shift(Y,
                                                                    add_int(
                                                                    mul_int(
                                                                    integer_of_int32(i_3),
                                                                    integer_of_int32(LDY)),
                                                                    integer_of_int32(k_0))))),
                                         0.0))
                                        and ((JC_<somenum>:
                                             (exists v_2:int.
                                              eq_real(double_value(select(double_P_double_M_Y_6,
                                                                   shift(Y,
                                                                   add_int(
                                                                   mul_int(
                                                                   integer_of_int32(i_3),
                                                                   integer_of_int32(LDY)),
                                                                   integer_of_int32(k_0))))),
                                              real_of_int(v_2))))
                                            and ((JC_<somenum>:
                                                 le_real(real_of_int(
                                                         mul_int(mul_int(
                                                                 sub_int((1),
                                                                 integer_of_int32(p_0)),
                                                                 sub_int(
                                                                 integer_of_int32(p_0),
                                                                 (1))),
                                                         integer_of_int32(j_3))),
                                                 double_value(select(double_P_double_M_Y_6,
                                                              shift(Y,
                                                              add_int(
                                                              mul_int(
                                                              integer_of_int32(i_3),
                                                              integer_of_int32(LDY)),
                                                              integer_of_int32(k_0)))))))
                                                and (JC_<somenum>:
                                                    le_real(double_value(
                                                            select(double_P_double_M_Y_6,
                                                            shift(Y,
                                                            add_int(mul_int(
                                                                    integer_of_int32(i_3),
                                                                    integer_of_int32(LDY)),
                                                            integer_of_int32(k_0))))),
                                                    real_of_int(sub_int(
                                                                integer_of_int32(p_0),
                                                                (1)))))))))))
                               and ((JC_<somenum>:
                                    not_assigns(double_P_Y_6_alloc_table@loop_6,
                                    double_P_double_M_Y_6@loop_6,
                                    double_P_double_M_Y_6,
                                    pset_range(pset_singleton(Y),
                                    add_int(mul_int(integer_of_int32(i_3),
                                            integer_of_int32(LDY)),
                                    integer_of_int32(k_0)),
                                    add_int(mul_int(integer_of_int32(i_3),
                                            integer_of_int32(LDY)),
                                    integer_of_int32(k_0)))))
                                   and (JC_<somenum>:
                                       not_assigns(double_P_Y_6_alloc_table@init,
                                       double_P_double_M_Y_6@init,
                                       double_P_double_M_Y_6,
                                       pset_range(pset_singleton(Y@init),
                                       (0),
                                       sub_int(add_int(mul_int(sub_int(
                                                               integer_of_int32(N_2@init),
                                                               (1)),
                                                       integer_of_int32(LDY@init)),
                                               integer_of_int32(K@init)),
                                       (1)))))))  }
                            begin
                              [ { } unit { true } ];
                             try
                              (let jessie_<somenum> =
                              begin
                                (let jessie_<somenum> =
                                (C_51:
                                (C_54:
                                begin
                                  (if ((lt_int_ (integer_of_int32 !j_3)) 
                                       (integer_of_int32 M_2)) then void
                                  else
                                   (let jessie_<somenum> =
                                   (raise (Goto_while_2_break_exc void)) in
                                   void));
                                 (let jessie_<somenum> =
                                 (let jessie_<somenum> =
                                 (C_44:
                                 (JC_<somenum>:
                                 (((sub_double_safe nearest_even) (C_43:
                                                                  ((safe_acc_ !double_P_double_M_Y_6) 
                                                                   (C_42:
                                                                   ((shift Y) 
                                                                    (integer_of_int32 
                                                                    (C_41:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_40:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    (C_39:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_38:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !i_3)) 
                                                                    (integer_of_int32 LDY))))))) 
                                                                    (integer_of_int32 !k_0))))))))))) 
                                  (C_37:
                                  (JC_<somenum>:
                                  (((mul_double_safe nearest_even) (C_36:
                                                                   ((safe_acc_ double_P_double_M_A_4) 
                                                                    (C_35:
                                                                    ((shift A) 
                                                                    (integer_of_int32 
                                                                    (C_34:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_33:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    (C_32:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_31:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !i_3)) 
                                                                    (integer_of_int32 LDA))))))) 
                                                                    (integer_of_int32 !j_3))))))))))) 
                                   (C_30:
                                   ((safe_acc_ double_P_double_M_X_5) 
                                    (C_29:
                                    ((shift X_2) (integer_of_int32 (C_28:
                                                                   (safe_int32_of_integer_ 
                                                                    (C_27:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    (C_26:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_25:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !j_3)) 
                                                                    (integer_of_int32 LDX_2))))))) 
                                                                    (integer_of_int32 !k_0)))))))))))))))) in
                                 (let jessie_<somenum> = Y in
                                 (let jessie_<somenum> =
                                 (integer_of_int32 (C_48:
                                                   (safe_int32_of_integer_ 
                                                    (C_47:
                                                    ((add_int (integer_of_int32 
                                                               (C_46:
                                                               (safe_int32_of_integer_ 
                                                                (C_45:
                                                                ((mul_int 
                                                                  (integer_of_int32 !i_3)) 
                                                                 (integer_of_int32 LDY))))))) 
                                                     (integer_of_int32 !k_0)))))) in
                                 (let jessie_<somenum> =
                                 ((shift jessie_<somenum>) jessie_<somenum>) in
                                 (((safe_upd_ double_P_double_M_Y_6) jessie_<somenum>) jessie_<somenum>))))) in
                                 void);
                                 (j_3 := (C_53:
                                         (safe_int32_of_integer_ (C_52:
                                                                 ((add_int 
                                                                   (integer_of_int32 !j_3)) (1))))));
                                 !j_3 end)) in void);
                               (raise (Loop_continue_exc void)) end in void)
                              with Loop_continue_exc jessie_<somenum> -> void end end
                           done); (raise (Goto_while_2_break_exc void)) end in
                         void) with Goto_while_2_break_exc jessie_<somenum> ->
                         (while_2_break: void) end;
                        (k_0 := (C_56:
                                (safe_int32_of_integer_ (C_55:
                                                        ((add_int (integer_of_int32 !k_0)) (1))))));
                        !k_0 end)) in void); (raise (Loop_continue_exc void))
                     end in void) with Loop_continue_exc jessie_<somenum> -> void end
                   end done); (raise (Goto_while_1_break_exc void)) end in
                void) with Goto_while_1_break_exc jessie_<somenum> ->
                (while_1_break: void) end;
               (i_3 := (C_59:
                       (safe_int32_of_integer_ (C_58:
                                               ((add_int (integer_of_int32 !i_3)) (1))))));
               !i_3 end)) in void); (raise (Loop_continue_exc void)) end in
            void) with Loop_continue_exc jessie_<somenum> -> void end end done);
        (raise (Goto_while_0_break_exc void)) end in void) with
       Goto_while_0_break_exc jessie_<somenum> -> (while_0_break: void) end;
      (raise Return) end)))); (raise Return) end with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>:
     is_exact_int_mat_bounded_by(Y@, integer_of_int32(LDY@),
     integer_of_int32(N_2@), integer_of_int32(K@),
     mul_int(mul_int(sub_int((1), integer_of_int32(p_0@)),
             sub_int(integer_of_int32(p_0@), (1))),
     integer_of_int32(M_2@)), sub_int(integer_of_int32(p_0@), (1)),
     double_P_Y_6_alloc_table, double_P_double_M_Y_6))
    and (JC_<somenum>:
        not_assigns(double_P_Y_6_alloc_table@, double_P_double_M_Y_6@,
        double_P_double_M_Y_6,
        pset_range(pset_singleton(Y@), (0),
        sub_int(add_int(mul_int(sub_int(integer_of_int32(N_2@), (1)),
                        integer_of_int32(LDY@)),
                integer_of_int32(K@)),
        (1))))))) }

let DGEMM_NEG_safety =
 fun (N_2 : int32) (M_2 : int32) (K : int32) (p_0 : int32) (A : double_P pointer) (LDA : int32) (X_2 : double_P pointer) (LDX_2 : int32) (Y : double_P pointer) (LDY : int32) (double_P_double_M_Y_6 : (double_P, double) memory ref) (double_P_A_4_alloc_table : double_P alloc_table) (double_P_X_5_alloc_table : double_P alloc_table) (double_P_Y_6_alloc_table : double_P alloc_table) (double_P_double_M_A_4 : (double_P, double) memory) (double_P_double_M_X_5 : (double_P, double) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int((2), integer_of_int32(p_0)))
    and ((JC_<somenum>:
         le_int(mul_int(mul_int(sub_int(integer_of_int32(p_0), (1)),
                        sub_int(integer_of_int32(p_0), (1))),
                integer_of_int32(M_2)),
         max_int))
        and ((JC_<somenum>: (not same_block(Y, A)))
            and ((JC_<somenum>:
                 (forall i_2:int.
                  (forall j_2:int.
                   ((le_int((0), i_2)
                    and le_int(i_2,
                        sub_int(add_int(mul_int(sub_int(integer_of_int32(N_2),
                                                (1)),
                                        integer_of_int32(LDY)),
                                integer_of_int32(K)),
                        (1)))) ->
                    ((le_int((0), j_2)
                     and le_int(j_2,
                         sub_int(add_int(mul_int(sub_int(integer_of_int32(M_2),
                                                 (1)),
                                         integer_of_int32(LDX_2)),
                                 integer_of_int32(K)),
                         (1)))) -> (shift(Y, i_2) <> shift(X_2, j_2)))))))
                and ((JC_<somenum>:
                     is_exact_int_mat_bounded_by(Y, integer_of_int32(LDY),
                     integer_of_int32(N_2), integer_of_int32(K), (0),
                     sub_int(integer_of_int32(p_0), (1)),
                     double_P_Y_6_alloc_table, double_P_double_M_Y_6))
                    and ((JC_<somenum>:
                         is_exact_int_mat_bounded_by(A,
                         integer_of_int32(LDA), integer_of_int32(N_2),
                         integer_of_int32(M_2), (0),
                         sub_int(integer_of_int32(p_0), (1)),
                         double_P_A_4_alloc_table, double_P_double_M_A_4))
                        and (JC_<somenum>:
                            is_exact_int_mat_bounded_by(X_2,
                            integer_of_int32(LDX_2), integer_of_int32(M_2),
                            integer_of_int32(K), (0),
                            sub_int(integer_of_int32(p_0), (1)),
                            double_P_X_5_alloc_table, double_P_double_M_X_5))))))))) }
  (init:
  try
   begin
     (let i_3 = ref (any_int32 void) in
     (let j_3 = ref (any_int32 void) in
     (let k_0 = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_<somenum> = (i_3 := (safe_int32_of_integer_ (0))) in void);
      try
       (let jessie_<somenum> =
       begin
         (loop_1:
         while true do
         { invariant (JC_<somenum>: true) variant (0) }
          begin
            [ { } unit reads double_P_double_M_Y_6,i_3
              { (JC_<somenum>:
                ((JC_<somenum>: le_int((0), integer_of_int32(i_3)))
                and ((JC_<somenum>:
                     le_int(integer_of_int32(i_3), integer_of_int32(N_2)))
                    and (JC_<somenum>:
                        is_exact_int_mat_bounded_by(Y, integer_of_int32(LDY),
                        integer_of_int32(i_3), integer_of_int32(K),
                        mul_int(mul_int(sub_int((1), integer_of_int32(p_0)),
                                sub_int(integer_of_int32(p_0), (1))),
                        integer_of_int32(M_2)),
                        sub_int(integer_of_int32(p_0), (1)),
                        double_P_Y_6_alloc_table, double_P_double_M_Y_6))))) } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_7:
              (C_60:
              begin
                (if ((lt_int_ (integer_of_int32 !i_3)) (integer_of_int32 N_2))
                then void
                else
                 (let jessie_<somenum> = (raise (Goto_while_0_break_exc void)) in
                 void));
               (let jessie_<somenum> = (k_0 := (safe_int32_of_integer_ (0))) in
               void);
               try
                (let jessie_<somenum> =
                begin
                  (loop_2:
                  while true do
                  { invariant (JC_<somenum>: true) variant (0) }
                   begin
                     [ { } unit reads double_P_double_M_Y_6,i_3,k_0
                       { (JC_<somenum>:
                         ((JC_<somenum>: le_int((0), integer_of_int32(k_0)))
                         and ((JC_<somenum>:
                              le_int(integer_of_int32(k_0),
                              integer_of_int32(K)))
                             and (JC_<somenum>:
                                 temporary_is_exact_int_mat_bounded_by(Y,
                                 integer_of_int32(LDY),
                                 integer_of_int32(i_3), integer_of_int32(K),
                                 integer_of_int32(k_0),
                                 mul_int(mul_int(sub_int((1),
                                                 integer_of_int32(p_0)),
                                         sub_int(integer_of_int32(p_0), (1))),
                                 integer_of_int32(M_2)),
                                 sub_int(integer_of_int32(p_0), (1)),
                                 double_P_Y_6_alloc_table,
                                 double_P_double_M_Y_6))))) } ];
                    try
                     (let jessie_<somenum> =
                     begin
                       (let jessie_<somenum> =
                       (C_13:
                       (C_57:
                       begin
                         (if ((lt_int_ (integer_of_int32 !k_0)) (integer_of_int32 K))
                         then void
                         else
                          (let jessie_<somenum> =
                          (raise (Goto_while_1_break_exc void)) in void));
                        (let jessie_<somenum> =
                        (j_3 := (safe_int32_of_integer_ (0))) in void);
                        try
                         (let jessie_<somenum> =
                         begin
                           (loop_3:
                           while true do
                           { invariant (JC_<somenum>: true) variant (0) }
                            begin
                              [ { } unit
                                reads double_P_double_M_Y_6,i_3,j_3,k_0
                                { (JC_<somenum>:
                                  ((JC_<somenum>:
                                   le_int((0), integer_of_int32(j_3)))
                                  and ((JC_<somenum>:
                                       le_int(integer_of_int32(j_3),
                                       integer_of_int32(M_2)))
                                      and ((JC_<somenum>:
                                           eq_real(double_round_error(
                                                   select(double_P_double_M_Y_6,
                                                   shift(Y,
                                                   add_int(mul_int(integer_of_int32(i_3),
                                                           integer_of_int32(LDY)),
                                                   integer_of_int32(k_0))))),
                                           0.0))
                                          and ((JC_<somenum>:
                                               (exists v_2:int.
                                                eq_real(double_value(
                                                        select(double_P_double_M_Y_6,
                                                        shift(Y,
                                                        add_int(mul_int(
                                                                integer_of_int32(i_3),
                                                                integer_of_int32(LDY)),
                                                        integer_of_int32(k_0))))),
                                                real_of_int(v_2))))
                                              and ((JC_<somenum>:
                                                   le_real(real_of_int(
                                                           mul_int(mul_int(
                                                                   sub_int((1),
                                                                   integer_of_int32(p_0)),
                                                                   sub_int(
                                                                   integer_of_int32(p_0),
                                                                   (1))),
                                                           integer_of_int32(j_3))),
                                                   double_value(select(double_P_double_M_Y_6,
                                                                shift(Y,
                                                                add_int(
                                                                mul_int(
                                                                integer_of_int32(i_3),
                                                                integer_of_int32(LDY)),
                                                                integer_of_int32(k_0)))))))
                                                  and (JC_<somenum>:
                                                      le_real(double_value(
                                                              select(double_P_double_M_Y_6,
                                                              shift(Y,
                                                              add_int(
                                                              mul_int(
                                                              integer_of_int32(i_3),
                                                              integer_of_int32(LDY)),
                                                              integer_of_int32(k_0))))),
                                                      real_of_int(sub_int(
                                                                  integer_of_int32(p_0),
                                                                  (1))))))))))) } ];
                             try
                              (let jessie_<somenum> =
                              begin
                                (let jessie_<somenum> =
                                (C_51:
                                (C_54:
                                begin
                                  (if ((lt_int_ (integer_of_int32 !j_3)) 
                                       (integer_of_int32 M_2)) then void
                                  else
                                   (let jessie_<somenum> =
                                   (raise (Goto_while_2_break_exc void)) in
                                   void));
                                 (let jessie_<somenum> =
                                 (let jessie_<somenum> =
                                 (C_44:
                                 (JC_<somenum>:
                                 (((sub_double nearest_even) (C_43:
                                                             (JC_<somenum>:
                                                             ((((offset_acc_ double_P_Y_6_alloc_table) !double_P_double_M_Y_6) Y) 
                                                              (integer_of_int32 
                                                               (C_41:
                                                               (JC_<somenum>:
                                                               (int32_of_integer_ 
                                                                (C_40:
                                                                ((add_int 
                                                                  (integer_of_int32 
                                                                   (C_39:
                                                                   (JC_<somenum>:
                                                                   (int32_of_integer_ 
                                                                    (C_38:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !i_3)) 
                                                                    (integer_of_int32 LDY)))))))) 
                                                                 (integer_of_int32 !k_0))))))))))) 
                                  (C_37:
                                  (JC_<somenum>:
                                  (((mul_double nearest_even) (C_36:
                                                              (JC_<somenum>:
                                                              ((((offset_acc_ double_P_A_4_alloc_table) double_P_double_M_A_4) A) 
                                                               (integer_of_int32 
                                                                (C_34:
                                                                (JC_<somenum>:
                                                                (int32_of_integer_ 
                                                                 (C_33:
                                                                 ((add_int 
                                                                   (integer_of_int32 
                                                                    (C_32:
                                                                    (JC_<somenum>:
                                                                    (int32_of_integer_ 
                                                                    (C_31:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !i_3)) 
                                                                    (integer_of_int32 LDA)))))))) 
                                                                  (integer_of_int32 !j_3))))))))))) 
                                   (C_30:
                                   (JC_<somenum>:
                                   ((((offset_acc_ double_P_X_5_alloc_table) double_P_double_M_X_5) X_2) 
                                    (integer_of_int32 (C_28:
                                                      (JC_<somenum>:
                                                      (int32_of_integer_ 
                                                       (C_27:
                                                       ((add_int (integer_of_int32 
                                                                  (C_26:
                                                                  (JC_<somenum>:
                                                                  (int32_of_integer_ 
                                                                   (C_25:
                                                                   ((mul_int 
                                                                    (integer_of_int32 !j_3)) 
                                                                    (integer_of_int32 LDX_2)))))))) 
                                                        (integer_of_int32 !k_0)))))))))))))))) in
                                 (let jessie_<somenum> = Y in
                                 (let jessie_<somenum> =
                                 (integer_of_int32 (C_48:
                                                   (JC_<somenum>:
                                                   (int32_of_integer_ 
                                                    (C_47:
                                                    ((add_int (integer_of_int32 
                                                               (C_46:
                                                               (JC_<somenum>:
                                                               (int32_of_integer_ 
                                                                (C_45:
                                                                ((mul_int 
                                                                  (integer_of_int32 !i_3)) 
                                                                 (integer_of_int32 LDY)))))))) 
                                                     (integer_of_int32 !k_0))))))) in
                                 (let jessie_<somenum> =
                                 ((shift jessie_<somenum>) jessie_<somenum>) in
                                 (JC_<somenum>:
                                 (((((offset_upd_ double_P_Y_6_alloc_table) double_P_double_M_Y_6) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
                                 void);
                                 (j_3 := (C_53:
                                         (JC_<somenum>:
                                         (int32_of_integer_ (C_52:
                                                            ((add_int 
                                                              (integer_of_int32 !j_3)) (1)))))));
                                 !j_3 end)) in void);
                               (raise (Loop_continue_exc void)) end in void)
                              with Loop_continue_exc jessie_<somenum> -> void end end
                           done); (raise (Goto_while_2_break_exc void)) end in
                         void) with Goto_while_2_break_exc jessie_<somenum> ->
                         (while_2_break: void) end;
                        (k_0 := (C_56:
                                (JC_<somenum>:
                                (int32_of_integer_ (C_55:
                                                   ((add_int (integer_of_int32 !k_0)) (1)))))));
                        !k_0 end)) in void); (raise (Loop_continue_exc void))
                     end in void) with Loop_continue_exc jessie_<somenum> -> void end
                   end done); (raise (Goto_while_1_break_exc void)) end in
                void) with Goto_while_1_break_exc jessie_<somenum> ->
                (while_1_break: void) end;
               (i_3 := (C_59:
                       (JC_<somenum>:
                       (int32_of_integer_ (C_58:
                                          ((add_int (integer_of_int32 !i_3)) (1)))))));
               !i_3 end)) in void); (raise (Loop_continue_exc void)) end in
            void) with Loop_continue_exc jessie_<somenum> -> void end end done);
        (raise (Goto_while_0_break_exc void)) end in void) with
       Goto_while_0_break_exc jessie_<somenum> -> (while_0_break: void) end;
      (raise Return) end)))); (raise Return) end with Return -> void end)
  { true }

let DREMM_ensures_default =
 fun (N_0_0 : int32) (K_0 : int32) (p_0_0 : int32) (X_0_0 : double_P pointer) (LDX_0_0 : int32) (double_P_double_M_X_0_7 : (double_P, double) memory ref) (double_P_X_0_7_alloc_table : double_P alloc_table) ->
  { (JC_<somenum>:
    is_exact_int_mat(X_0_0, integer_of_int32(LDX_0_0),
    integer_of_int32(N_0_0), integer_of_int32(K_0),
    double_P_X_0_7_alloc_table, double_P_double_M_X_0_7)) }
  (init:
  try
   begin
     (let i_0_0 = ref (any_int32 void) in
     (let k_0_0 = ref (any_int32 void) in
     (C_76:
     begin
       (let jessie_<somenum> = (i_0_0 := (safe_int32_of_integer_ (0))) in void);
      try
       (let jessie_<somenum> =
       begin
         (loop_9:
         while true do
         { invariant
             (JC_<somenum>:
             not_assigns(double_P_X_0_7_alloc_table@init,
             double_P_double_M_X_0_7@init, double_P_double_M_X_0_7,
             pset_range(pset_singleton(X_0_0@init), (0),
             sub_int(add_int(mul_int(sub_int(integer_of_int32(N_0_0@init),
                                     (1)),
                             integer_of_int32(LDX_0_0@init)),
                     integer_of_int32(K_0@init)),
             (1)))))  }
          begin
            [ { } unit { true } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_77:
              (C_121:
              begin
                (if ((lt_int_ (integer_of_int32 !i_0_0)) (integer_of_int32 N_0_0))
                then void
                else
                 (let jessie_<somenum> = (raise (Goto_while_3_break_exc void)) in
                 void));
               (let jessie_<somenum> = (k_0_0 := (safe_int32_of_integer_ (0))) in
               void);
               try
                (let jessie_<somenum> =
                begin
                  (loop_10:
                  while true do
                  { invariant
                      (JC_<somenum>:
                      not_assigns(double_P_X_0_7_alloc_table@init,
                      double_P_double_M_X_0_7@init, double_P_double_M_X_0_7,
                      pset_range(pset_singleton(X_0_0@init), (0),
                      sub_int(add_int(mul_int(sub_int(integer_of_int32(N_0_0@init),
                                              (1)),
                                      integer_of_int32(LDX_0_0@init)),
                              integer_of_int32(K_0@init)),
                      (1)))))  }
                   begin
                     [ { } unit { true } ];
                    try
                     (let jessie_<somenum> =
                     begin
                       (let jessie_<somenum> =
                       (C_93:
                       (C_118:
                       begin
                         (if ((lt_int_ (integer_of_int32 !k_0_0)) (integer_of_int32 K_0))
                         then void
                         else
                          (let jessie_<somenum> =
                          (raise (Goto_while_4_break_exc void)) in void));
                        (let jessie_<somenum> =
                        (let __cil_tmp = (C_84: (JC_<somenum>: (fmod void))) in
                        (C_92:
                        (let jessie_<somenum> =
                        (C_85:
                        ((double_of_real_safe nearest_even) (real_of_int 
                                                             (integer_of_int32 __cil_tmp)))) in
                        (let jessie_<somenum> = X_0_0 in
                        (let jessie_<somenum> =
                        (integer_of_int32 (C_89:
                                          (safe_int32_of_integer_ (C_88:
                                                                  ((add_int 
                                                                    (integer_of_int32 
                                                                    (C_87:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_86:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !i_0_0)) 
                                                                    (integer_of_int32 LDX_0_0))))))) 
                                                                   (integer_of_int32 !k_0_0)))))) in
                        (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
                        begin
                          (((safe_upd_ double_P_double_M_X_0_7) jessie_<somenum>) jessie_<somenum>);
                         jessie_<somenum> end)))))) in void);
                        (if ((lt_double (C_115:
                                        ((safe_acc_ !double_P_double_M_X_0_7) 
                                         (C_114:
                                         ((shift X_0_0) (integer_of_int32 
                                                         (C_113:
                                                         (safe_int32_of_integer_ 
                                                          (C_112:
                                                          ((add_int (integer_of_int32 
                                                                    (C_111:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_110:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !i_0_0)) 
                                                                    (integer_of_int32 LDX_0_0))))))) 
                                                           (integer_of_int32 !k_0_0))))))))))) 
                             (C_109: (double_of_real_exact 0.0)))
                        then
                         (let jessie_<somenum> =
                         (C_108:
                         (let jessie_<somenum> =
                         (C_101:
                         (JC_<somenum>:
                         (((add_double_safe nearest_even) (C_100:
                                                          ((safe_acc_ !double_P_double_M_X_0_7) 
                                                           (C_99:
                                                           ((shift X_0_0) 
                                                            (integer_of_int32 
                                                             (C_98:
                                                             (safe_int32_of_integer_ 
                                                              (C_97:
                                                              ((add_int 
                                                                (integer_of_int32 
                                                                 (C_96:
                                                                 (safe_int32_of_integer_ 
                                                                  (C_95:
                                                                  ((mul_int 
                                                                    (integer_of_int32 !i_0_0)) 
                                                                   (integer_of_int32 LDX_0_0))))))) 
                                                               (integer_of_int32 !k_0_0))))))))))) 
                          (C_94:
                          ((double_of_real_safe nearest_even) (real_of_int 
                                                               (integer_of_int32 p_0_0))))))) in
                         (let jessie_<somenum> = X_0_0 in
                         (let jessie_<somenum> =
                         (integer_of_int32 (C_105:
                                           (safe_int32_of_integer_ (C_104:
                                                                   ((add_int 
                                                                    (integer_of_int32 
                                                                    (C_103:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_102:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !i_0_0)) 
                                                                    (integer_of_int32 LDX_0_0))))))) 
                                                                    (integer_of_int32 !k_0_0)))))) in
                         (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
                         (((safe_upd_ double_P_double_M_X_0_7) jessie_<somenum>) jessie_<somenum>)))))) in
                         void) else void);
                        (k_0_0 := (C_117:
                                  (safe_int32_of_integer_ (C_116:
                                                          ((add_int (integer_of_int32 !k_0_0)) (1))))));
                        !k_0_0 end)) in void);
                      (raise (Loop_continue_exc void)) end in void) with
                     Loop_continue_exc jessie_<somenum> -> void end end done);
                 (raise (Goto_while_4_break_exc void)) end in void) with
                Goto_while_4_break_exc jessie_<somenum> -> (while_4_break: void) end;
               (i_0_0 := (C_120:
                         (safe_int32_of_integer_ (C_119:
                                                 ((add_int (integer_of_int32 !i_0_0)) (1))))));
               !i_0_0 end)) in void); (raise (Loop_continue_exc void)) end in
            void) with Loop_continue_exc jessie_<somenum> -> void end end done);
        (raise (Goto_while_3_break_exc void)) end in void) with
       Goto_while_3_break_exc jessie_<somenum> -> (while_3_break: void) end;
      (raise Return) end))); (raise Return) end with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>:
      is_exact_int_mat_bounded_by(X_0_0@, integer_of_int32(LDX_0_0@),
      integer_of_int32(N_0_0@), integer_of_int32(K_0@), (0),
      sub_int(integer_of_int32(p_0_0@), (1)), double_P_X_0_7_alloc_table,
      double_P_double_M_X_0_7))
     and (JC_<somenum>:
         (forall i_3_0:int.
          (forall j_3_0:int.
           ((le_int((0), i_3_0)
            and (lt_int(i_3_0, integer_of_int32(N_0_0@))
                and (le_int((0), j_3_0)
                    and lt_int(j_3_0, integer_of_int32(K_0@))))) ->
            (exists d:int.
             eq_real(double_value(select(double_P_double_M_X_0_7,
                                  shift(X_0_0@,
                                  add_int(mul_int(i_3_0,
                                          integer_of_int32(LDX_0_0@)),
                                  j_3_0)))),
             add_real(double_value(select(double_P_double_M_X_0_7@,
                                   shift(X_0_0@,
                                   add_int(mul_int(i_3_0@,
                                           integer_of_int32(LDX_0_0@)),
                                   j_3_0@)))),
             real_of_int(mul_int(d, integer_of_int32(p_0_0@))))))))))))
    and (JC_<somenum>:
        not_assigns(double_P_X_0_7_alloc_table@, double_P_double_M_X_0_7@,
        double_P_double_M_X_0_7,
        pset_range(pset_singleton(X_0_0@), (0),
        sub_int(add_int(mul_int(sub_int(integer_of_int32(N_0_0@), (1)),
                        integer_of_int32(LDX_0_0@)),
                integer_of_int32(K_0@)),
        (1))))))) }

let DREMM_safety =
 fun (N_0_0 : int32) (K_0 : int32) (p_0_0 : int32) (X_0_0 : double_P pointer) (LDX_0_0 : int32) (double_P_double_M_X_0_7 : (double_P, double) memory ref) (double_P_X_0_7_alloc_table : double_P alloc_table) ->
  { (JC_<somenum>:
    is_exact_int_mat(X_0_0, integer_of_int32(LDX_0_0),
    integer_of_int32(N_0_0), integer_of_int32(K_0),
    double_P_X_0_7_alloc_table, double_P_double_M_X_0_7)) }
  (init:
  try
   begin
     (let i_0_0 = ref (any_int32 void) in
     (let k_0_0 = ref (any_int32 void) in
     (C_76:
     begin
       (let jessie_<somenum> = (i_0_0 := (safe_int32_of_integer_ (0))) in void);
      try
       (let jessie_<somenum> =
       begin
         (loop_7:
         while true do
         { invariant (JC_<somenum>: true) variant (0) }
          begin
            [ { } unit { true } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_77:
              (C_121:
              begin
                (if ((lt_int_ (integer_of_int32 !i_0_0)) (integer_of_int32 N_0_0))
                then void
                else
                 (let jessie_<somenum> = (raise (Goto_while_3_break_exc void)) in
                 void));
               (let jessie_<somenum> = (k_0_0 := (safe_int32_of_integer_ (0))) in
               void);
               try
                (let jessie_<somenum> =
                begin
                  (loop_8:
                  while true do
                  { invariant (JC_<somenum>: true) variant (0) }
                   begin
                     [ { } unit { true } ];
                    try
                     (let jessie_<somenum> =
                     begin
                       (let jessie_<somenum> =
                       (C_93:
                       (C_118:
                       begin
                         (if ((lt_int_ (integer_of_int32 !k_0_0)) (integer_of_int32 K_0))
                         then void
                         else
                          (let jessie_<somenum> =
                          (raise (Goto_while_4_break_exc void)) in void));
                        (let jessie_<somenum> =
                        (let __cil_tmp =
                        (C_84: (JC_<somenum>: (fmod_requires void))) in
                        (C_92:
                        (let jessie_<somenum> =
                        (C_85:
                        (JC_<somenum>:
                        ((double_of_real nearest_even) (real_of_int (integer_of_int32 __cil_tmp))))) in
                        (let jessie_<somenum> = X_0_0 in
                        (let jessie_<somenum> =
                        (integer_of_int32 (C_89:
                                          (JC_<somenum>:
                                          (int32_of_integer_ (C_88:
                                                             ((add_int 
                                                               (integer_of_int32 
                                                                (C_87:
                                                                (JC_<somenum>:
                                                                (int32_of_integer_ 
                                                                 (C_86:
                                                                 ((mul_int 
                                                                   (integer_of_int32 !i_0_0)) 
                                                                  (integer_of_int32 LDX_0_0)))))))) 
                                                              (integer_of_int32 !k_0_0))))))) in
                        (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
                        begin
                          (JC_<somenum>:
                          (((((offset_upd_ double_P_X_0_7_alloc_table) double_P_double_M_X_0_7) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>));
                         jessie_<somenum> end)))))) in void);
                        (if ((lt_double (C_115:
                                        (JC_<somenum>:
                                        ((((offset_acc_ double_P_X_0_7_alloc_table) !double_P_double_M_X_0_7) X_0_0) 
                                         (integer_of_int32 (C_113:
                                                           (JC_<somenum>:
                                                           (int32_of_integer_ 
                                                            (C_112:
                                                            ((add_int 
                                                              (integer_of_int32 
                                                               (C_111:
                                                               (JC_<somenum>:
                                                               (int32_of_integer_ 
                                                                (C_110:
                                                                ((mul_int 
                                                                  (integer_of_int32 !i_0_0)) 
                                                                 (integer_of_int32 LDX_0_0)))))))) 
                                                             (integer_of_int32 !k_0_0))))))))))) 
                             (C_109: (double_of_real_exact 0.0)))
                        then
                         (let jessie_<somenum> =
                         (C_108:
                         (let jessie_<somenum> =
                         (C_101:
                         (JC_<somenum>:
                         (((add_double nearest_even) (C_100:
                                                     (JC_<somenum>:
                                                     ((((offset_acc_ double_P_X_0_7_alloc_table) !double_P_double_M_X_0_7) X_0_0) 
                                                      (integer_of_int32 
                                                       (C_98:
                                                       (JC_<somenum>:
                                                       (int32_of_integer_ 
                                                        (C_97:
                                                        ((add_int (integer_of_int32 
                                                                   (C_96:
                                                                   (JC_<somenum>:
                                                                   (int32_of_integer_ 
                                                                    (C_95:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !i_0_0)) 
                                                                    (integer_of_int32 LDX_0_0)))))))) 
                                                         (integer_of_int32 !k_0_0))))))))))) 
                          (C_94:
                          (JC_<somenum>:
                          ((double_of_real nearest_even) (real_of_int 
                                                          (integer_of_int32 p_0_0)))))))) in
                         (let jessie_<somenum> = X_0_0 in
                         (let jessie_<somenum> =
                         (integer_of_int32 (C_105:
                                           (JC_<somenum>:
                                           (int32_of_integer_ (C_104:
                                                              ((add_int 
                                                                (integer_of_int32 
                                                                 (C_103:
                                                                 (JC_<somenum>:
                                                                 (int32_of_integer_ 
                                                                  (C_102:
                                                                  ((mul_int 
                                                                    (integer_of_int32 !i_0_0)) 
                                                                   (integer_of_int32 LDX_0_0)))))))) 
                                                               (integer_of_int32 !k_0_0))))))) in
                         (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
                         (JC_<somenum>:
                         (((((offset_upd_ double_P_X_0_7_alloc_table) double_P_double_M_X_0_7) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>))))))) in
                         void) else void);
                        (k_0_0 := (C_117:
                                  (JC_<somenum>:
                                  (int32_of_integer_ (C_116:
                                                     ((add_int (integer_of_int32 !k_0_0)) (1)))))));
                        !k_0_0 end)) in void);
                      (raise (Loop_continue_exc void)) end in void) with
                     Loop_continue_exc jessie_<somenum> -> void end end done);
                 (raise (Goto_while_4_break_exc void)) end in void) with
                Goto_while_4_break_exc jessie_<somenum> -> (while_4_break: void) end;
               (i_0_0 := (C_120:
                         (JC_<somenum>:
                         (int32_of_integer_ (C_119:
                                            ((add_int (integer_of_int32 !i_0_0)) (1)))))));
               !i_0_0 end)) in void); (raise (Loop_continue_exc void)) end in
            void) with Loop_continue_exc jessie_<somenum> -> void end end done);
        (raise (Goto_while_3_break_exc void)) end in void) with
       Goto_while_3_break_exc jessie_<somenum> -> (while_3_break: void) end;
      (raise Return) end))); (raise Return) end with Return -> void end)
  { true }

let DTRSM_ensures_default =
 fun (N_1_0 : int32) (K_1 : int32) (A_0 : double_P pointer) (LDA_0 : int32) (X_1_0 : double_P pointer) (LDX_1_0 : int32) (double_P_double_M_X_1_9 : (double_P, double) memory ref) (double_P_A_0_8_alloc_table : double_P alloc_table) (double_P_X_1_9_alloc_table : double_P alloc_table) (double_P_double_M_A_0_8 : (double_P, double) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(integer_of_int32(N_1_0), (55)))
    and ((JC_<somenum>:
         is_exact_int_mat_bounded_by(X_1_0, integer_of_int32(LDX_1_0),
         integer_of_int32(N_1_0), integer_of_int32(K_1), (0),
         sub_int(l_pmax(integer_of_int32(N_1_0)), (1)),
         double_P_X_1_9_alloc_table, double_P_double_M_X_1_9))
        and (JC_<somenum>:
            is_exact_int_mat_bounded_by(A_0, integer_of_int32(LDA_0),
            integer_of_int32(N_1_0), integer_of_int32(N_1_0), (0),
            sub_int(l_pmax(integer_of_int32(N_1_0)), (1)),
            double_P_A_0_8_alloc_table, double_P_double_M_A_0_8))))) }
  (init:
  try
   begin
     (let i_1_0 = ref (any_int32 void) in
     (let j_0_0 = ref (any_int32 void) in
     (let k_1 = ref (any_int32 void) in
     (C_128:
     begin
       (let jessie_<somenum> =
       (i_1_0 := (C_127:
                 (safe_int32_of_integer_ (C_126:
                                         ((sub_int (integer_of_int32 N_1_0)) (2)))))) in
       void);
      try
       (let jessie_<somenum> =
       begin
         (loop_14:
         while true do
         { invariant
             (JC_<somenum>:
             not_assigns(double_P_X_1_9_alloc_table@init,
             double_P_double_M_X_1_9@init, double_P_double_M_X_1_9,
             pset_range(pset_singleton(X_1_0@init), (0),
             sub_int(add_int(mul_int(sub_int(integer_of_int32(N_1_0@init),
                                     (1)),
                             integer_of_int32(LDX_1_0@init)),
                     integer_of_int32(K_1@init)),
             (1)))))  }
          begin
            [ { } unit { true } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_131:
              (C_168:
              begin
                (if ((ge_int_ (integer_of_int32 !i_1_0)) (0)) then void
                else
                 (let jessie_<somenum> = (raise (Goto_while_5_break_exc void)) in
                 void));
               (let jessie_<somenum> =
               (j_0_0 := (C_130:
                         (safe_int32_of_integer_ (C_129:
                                                 ((add_int (integer_of_int32 !i_1_0)) (1)))))) in
               void);
               try
                (let jessie_<somenum> =
                begin
                  (loop_15:
                  while true do
                  { invariant
                      (JC_<somenum>:
                      not_assigns(double_P_X_1_9_alloc_table@init,
                      double_P_double_M_X_1_9@init, double_P_double_M_X_1_9,
                      pset_range(pset_singleton(X_1_0@init), (0),
                      sub_int(add_int(mul_int(sub_int(integer_of_int32(N_1_0@init),
                                              (1)),
                                      integer_of_int32(LDX_1_0@init)),
                              integer_of_int32(K_1@init)),
                      (1)))))  }
                   begin
                     [ { } unit { true } ];
                    try
                     (let jessie_<somenum> =
                     begin
                       (let jessie_<somenum> =
                       (C_132:
                       (C_165:
                       begin
                         (if ((lt_int_ (integer_of_int32 !j_0_0)) (integer_of_int32 N_1_0))
                         then void
                         else
                          (let jessie_<somenum> =
                          (raise (Goto_while_6_break_exc void)) in void));
                        (let jessie_<somenum> =
                        (k_1 := (safe_int32_of_integer_ (0))) in void);
                        try
                         (let jessie_<somenum> =
                         begin
                           (loop_16:
                           while true do
                           { invariant
                               (JC_<somenum>:
                               not_assigns(double_P_X_1_9_alloc_table@init,
                               double_P_double_M_X_1_9@init,
                               double_P_double_M_X_1_9,
                               pset_range(pset_singleton(X_1_0@init), (0),
                               sub_int(add_int(mul_int(sub_int(integer_of_int32(N_1_0@init),
                                                       (1)),
                                               integer_of_int32(LDX_1_0@init)),
                                       integer_of_int32(K_1@init)),
                               (1)))))  }
                            begin
                              [ { } unit { true } ];
                             try
                              (let jessie_<somenum> =
                              begin
                                (let jessie_<somenum> =
                                (C_159:
                                (C_162:
                                begin
                                  (if ((lt_int_ (integer_of_int32 !k_1)) 
                                       (integer_of_int32 K_1)) then void
                                  else
                                   (let jessie_<somenum> =
                                   (raise (Goto_while_7_break_exc void)) in
                                   void));
                                 (let jessie_<somenum> =
                                 (let jessie_<somenum> =
                                 (C_152:
                                 (JC_<somenum>:
                                 (((sub_double_safe nearest_even) (C_151:
                                                                  ((safe_acc_ !double_P_double_M_X_1_9) 
                                                                   (C_150:
                                                                   ((shift X_1_0) 
                                                                    (integer_of_int32 
                                                                    (C_149:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_148:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    (C_147:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_146:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !i_1_0)) 
                                                                    (integer_of_int32 LDX_1_0))))))) 
                                                                    (integer_of_int32 !k_1))))))))))) 
                                  (C_145:
                                  (JC_<somenum>:
                                  (((mul_double_safe nearest_even) (C_144:
                                                                   ((safe_acc_ double_P_double_M_A_0_8) 
                                                                    (C_143:
                                                                    ((shift A_0) 
                                                                    (integer_of_int32 
                                                                    (C_142:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_141:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    (C_140:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_139:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !i_1_0)) 
                                                                    (integer_of_int32 LDA_0))))))) 
                                                                    (integer_of_int32 !j_0_0))))))))))) 
                                   (C_138:
                                   ((safe_acc_ !double_P_double_M_X_1_9) 
                                    (C_137:
                                    ((shift X_1_0) (integer_of_int32 
                                                    (C_136:
                                                    (safe_int32_of_integer_ 
                                                     (C_135:
                                                     ((add_int (integer_of_int32 
                                                                (C_134:
                                                                (safe_int32_of_integer_ 
                                                                 (C_133:
                                                                 ((mul_int 
                                                                   (integer_of_int32 !j_0_0)) 
                                                                  (integer_of_int32 LDX_1_0))))))) 
                                                      (integer_of_int32 !k_1)))))))))))))))) in
                                 (let jessie_<somenum> = X_1_0 in
                                 (let jessie_<somenum> =
                                 (integer_of_int32 (C_156:
                                                   (safe_int32_of_integer_ 
                                                    (C_155:
                                                    ((add_int (integer_of_int32 
                                                               (C_154:
                                                               (safe_int32_of_integer_ 
                                                                (C_153:
                                                                ((mul_int 
                                                                  (integer_of_int32 !i_1_0)) 
                                                                 (integer_of_int32 LDX_1_0))))))) 
                                                     (integer_of_int32 !k_1)))))) in
                                 (let jessie_<somenum> =
                                 ((shift jessie_<somenum>) jessie_<somenum>) in
                                 (((safe_upd_ double_P_double_M_X_1_9) jessie_<somenum>) jessie_<somenum>))))) in
                                 void);
                                 (k_1 := (C_161:
                                         (safe_int32_of_integer_ (C_160:
                                                                 ((add_int 
                                                                   (integer_of_int32 !k_1)) (1))))));
                                 !k_1 end)) in void);
                               (raise (Loop_continue_exc void)) end in void)
                              with Loop_continue_exc jessie_<somenum> -> void end
                            end done); (raise (Goto_while_7_break_exc void))
                         end in void) with
                         Goto_while_7_break_exc jessie_<somenum> ->
                         (while_7_break: void) end;
                        (j_0_0 := (C_164:
                                  (safe_int32_of_integer_ (C_163:
                                                          ((add_int (integer_of_int32 !j_0_0)) (1))))));
                        !j_0_0 end)) in void);
                      (raise (Loop_continue_exc void)) end in void) with
                     Loop_continue_exc jessie_<somenum> -> void end end done);
                 (raise (Goto_while_6_break_exc void)) end in void) with
                Goto_while_6_break_exc jessie_<somenum> -> (while_6_break: void) end;
               (i_1_0 := (C_167:
                         (safe_int32_of_integer_ (C_166:
                                                 ((sub_int (integer_of_int32 !i_1_0)) (1))))));
               !i_1_0 end)) in void); (raise (Loop_continue_exc void)) end in
            void) with Loop_continue_exc jessie_<somenum> -> void end end done);
        (raise (Goto_while_5_break_exc void)) end in void) with
       Goto_while_5_break_exc jessie_<somenum> -> (while_5_break: void) end;
      (raise Return) end)))); (raise Return) end with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>:
     is_exact_int_mat_bounded_by(X_1_0@, integer_of_int32(LDX_1_0@),
     integer_of_int32(N_1_0@), integer_of_int32(K_1@), neg_int(max_int),
     max_int, double_P_X_1_9_alloc_table, double_P_double_M_X_1_9))
    and (JC_<somenum>:
        not_assigns(double_P_X_1_9_alloc_table@, double_P_double_M_X_1_9@,
        double_P_double_M_X_1_9,
        pset_range(pset_singleton(X_1_0@), (0),
        sub_int(add_int(mul_int(sub_int(integer_of_int32(N_1_0@), (1)),
                        integer_of_int32(LDX_1_0@)),
                integer_of_int32(K_1@)),
        (1))))))) }

let DTRSM_safety =
 fun (N_1_0 : int32) (K_1 : int32) (A_0 : double_P pointer) (LDA_0 : int32) (X_1_0 : double_P pointer) (LDX_1_0 : int32) (double_P_double_M_X_1_9 : (double_P, double) memory ref) (double_P_A_0_8_alloc_table : double_P alloc_table) (double_P_X_1_9_alloc_table : double_P alloc_table) (double_P_double_M_A_0_8 : (double_P, double) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(integer_of_int32(N_1_0), (55)))
    and ((JC_<somenum>:
         is_exact_int_mat_bounded_by(X_1_0, integer_of_int32(LDX_1_0),
         integer_of_int32(N_1_0), integer_of_int32(K_1), (0),
         sub_int(l_pmax(integer_of_int32(N_1_0)), (1)),
         double_P_X_1_9_alloc_table, double_P_double_M_X_1_9))
        and (JC_<somenum>:
            is_exact_int_mat_bounded_by(A_0, integer_of_int32(LDA_0),
            integer_of_int32(N_1_0), integer_of_int32(N_1_0), (0),
            sub_int(l_pmax(integer_of_int32(N_1_0)), (1)),
            double_P_A_0_8_alloc_table, double_P_double_M_A_0_8))))) }
  (init:
  try
   begin
     (let i_1_0 = ref (any_int32 void) in
     (let j_0_0 = ref (any_int32 void) in
     (let k_1 = ref (any_int32 void) in
     (C_128:
     begin
       (let jessie_<somenum> =
       (i_1_0 := (C_127:
                 (JC_<somenum>:
                 (int32_of_integer_ (C_126:
                                    ((sub_int (integer_of_int32 N_1_0)) (2))))))) in
       void);
      try
       (let jessie_<somenum> =
       begin
         (loop_11:
         while true do
         { invariant (JC_<somenum>: true) variant (0) }
          begin
            [ { } unit { true } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_131:
              (C_168:
              begin
                (if ((ge_int_ (integer_of_int32 !i_1_0)) (0)) then void
                else
                 (let jessie_<somenum> = (raise (Goto_while_5_break_exc void)) in
                 void));
               (let jessie_<somenum> =
               (j_0_0 := (C_130:
                         (JC_<somenum>:
                         (int32_of_integer_ (C_129:
                                            ((add_int (integer_of_int32 !i_1_0)) (1))))))) in
               void);
               try
                (let jessie_<somenum> =
                begin
                  (loop_12:
                  while true do
                  { invariant (JC_<somenum>: true) variant (0) }
                   begin
                     [ { } unit { true } ];
                    try
                     (let jessie_<somenum> =
                     begin
                       (let jessie_<somenum> =
                       (C_132:
                       (C_165:
                       begin
                         (if ((lt_int_ (integer_of_int32 !j_0_0)) (integer_of_int32 N_1_0))
                         then void
                         else
                          (let jessie_<somenum> =
                          (raise (Goto_while_6_break_exc void)) in void));
                        (let jessie_<somenum> =
                        (k_1 := (safe_int32_of_integer_ (0))) in void);
                        try
                         (let jessie_<somenum> =
                         begin
                           (loop_13:
                           while true do
                           { invariant (JC_<somenum>: true) variant (0) }
                            begin
                              [ { } unit { true } ];
                             try
                              (let jessie_<somenum> =
                              begin
                                (let jessie_<somenum> =
                                (C_159:
                                (C_162:
                                begin
                                  (if ((lt_int_ (integer_of_int32 !k_1)) 
                                       (integer_of_int32 K_1)) then void
                                  else
                                   (let jessie_<somenum> =
                                   (raise (Goto_while_7_break_exc void)) in
                                   void));
                                 (let jessie_<somenum> =
                                 (let jessie_<somenum> =
                                 (C_152:
                                 (JC_<somenum>:
                                 (((sub_double nearest_even) (C_151:
                                                             (JC_<somenum>:
                                                             ((((offset_acc_ double_P_X_1_9_alloc_table) !double_P_double_M_X_1_9) X_1_0) 
                                                              (integer_of_int32 
                                                               (C_149:
                                                               (JC_<somenum>:
                                                               (int32_of_integer_ 
                                                                (C_148:
                                                                ((add_int 
                                                                  (integer_of_int32 
                                                                   (C_147:
                                                                   (JC_<somenum>:
                                                                   (int32_of_integer_ 
                                                                    (C_146:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !i_1_0)) 
                                                                    (integer_of_int32 LDX_1_0)))))))) 
                                                                 (integer_of_int32 !k_1))))))))))) 
                                  (C_145:
                                  (JC_<somenum>:
                                  (((mul_double nearest_even) (C_144:
                                                              (JC_<somenum>:
                                                              ((((offset_acc_ double_P_A_0_8_alloc_table) double_P_double_M_A_0_8) A_0) 
                                                               (integer_of_int32 
                                                                (C_142:
                                                                (JC_<somenum>:
                                                                (int32_of_integer_ 
                                                                 (C_141:
                                                                 ((add_int 
                                                                   (integer_of_int32 
                                                                    (C_140:
                                                                    (JC_<somenum>:
                                                                    (int32_of_integer_ 
                                                                    (C_139:
                                                                    ((mul_int 
                                                                    (integer_of_int32 !i_1_0)) 
                                                                    (integer_of_int32 LDA_0)))))))) 
                                                                  (integer_of_int32 !j_0_0))))))))))) 
                                   (C_138:
                                   (JC_<somenum>:
                                   ((((offset_acc_ double_P_X_1_9_alloc_table) !double_P_double_M_X_1_9) X_1_0) 
                                    (integer_of_int32 (C_136:
                                                      (JC_<somenum>:
                                                      (int32_of_integer_ 
                                                       (C_135:
                                                       ((add_int (integer_of_int32 
                                                                  (C_134:
                                                                  (JC_<somenum>:
                                                                  (int32_of_integer_ 
                                                                   (C_133:
                                                                   ((mul_int 
                                                                    (integer_of_int32 !j_0_0)) 
                                                                    (integer_of_int32 LDX_1_0)))))))) 
                                                        (integer_of_int32 !k_1)))))))))))))))) in
                                 (let jessie_<somenum> = X_1_0 in
                                 (let jessie_<somenum> =
                                 (integer_of_int32 (C_156:
                                                   (JC_<somenum>:
                                                   (int32_of_integer_ 
                                                    (C_155:
                                                    ((add_int (integer_of_int32 
                                                               (C_154:
                                                               (JC_<somenum>:
                                                               (int32_of_integer_ 
                                                                (C_153:
                                                                ((mul_int 
                                                                  (integer_of_int32 !i_1_0)) 
                                                                 (integer_of_int32 LDX_1_0)))))))) 
                                                     (integer_of_int32 !k_1))))))) in
                                 (let jessie_<somenum> =
                                 ((shift jessie_<somenum>) jessie_<somenum>) in
                                 (JC_<somenum>:
                                 (((((offset_upd_ double_P_X_1_9_alloc_table) double_P_double_M_X_1_9) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
                                 void);
                                 (k_1 := (C_161:
                                         (JC_<somenum>:
                                         (int32_of_integer_ (C_160:
                                                            ((add_int 
                                                              (integer_of_int32 !k_1)) (1)))))));
                                 !k_1 end)) in void);
                               (raise (Loop_continue_exc void)) end in void)
                              with Loop_continue_exc jessie_<somenum> -> void end
                            end done); (raise (Goto_while_7_break_exc void))
                         end in void) with
                         Goto_while_7_break_exc jessie_<somenum> ->
                         (while_7_break: void) end;
                        (j_0_0 := (C_164:
                                  (JC_<somenum>:
                                  (int32_of_integer_ (C_163:
                                                     ((add_int (integer_of_int32 !j_0_0)) (1)))))));
                        !j_0_0 end)) in void);
                      (raise (Loop_continue_exc void)) end in void) with
                     Loop_continue_exc jessie_<somenum> -> void end end done);
                 (raise (Goto_while_6_break_exc void)) end in void) with
                Goto_while_6_break_exc jessie_<somenum> -> (while_6_break: void) end;
               (i_1_0 := (C_167:
                         (JC_<somenum>:
                         (int32_of_integer_ (C_166:
                                            ((sub_int (integer_of_int32 !i_1_0)) (1)))))));
               !i_1_0 end)) in void); (raise (Loop_continue_exc void)) end in
            void) with Loop_continue_exc jessie_<somenum> -> void end end done);
        (raise (Goto_while_5_break_exc void)) end in void) with
       Goto_while_5_break_exc jessie_<somenum> -> (while_5_break: void) end;
      (raise Return) end)))); (raise Return) end with Return -> void end)
  { true }

let LZ_TRSM_ensures_default =
 fun (N_2_0 : int32) (K_2 : int32) (p_1 : int32) (A_1 : double_P pointer) (LDA_1 : int32) (B : double_P pointer) (LDB : int32) (double_P_double_M_B_11 : (double_P, double) memory ref) (double_P_A_1_10_alloc_table : double_P alloc_table) (double_P_B_11_alloc_table : double_P alloc_table) (double_P_double_M_A_1_10 : (double_P, double) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int((2), integer_of_int32(p_1)))
    and ((JC_<somenum>:
         le_int(mul_int(mul_int(sub_int(integer_of_int32(p_1), (1)),
                        sub_int(integer_of_int32(p_1), (1))),
                integer_of_int32(N_2_0)),
         max_int))
        and ((JC_<somenum>: (not same_block(B, A_1)))
            and ((JC_<somenum>:
                 is_exact_int_mat_bounded_by(A_1, integer_of_int32(LDA_1),
                 integer_of_int32(N_2_0), integer_of_int32(N_2_0), (0),
                 sub_int(integer_of_int32(p_1), (1)),
                 double_P_A_1_10_alloc_table, double_P_double_M_A_1_10))
                and (JC_<somenum>:
                    is_exact_int_mat_bounded_by(B, integer_of_int32(LDB),
                    integer_of_int32(N_2_0), integer_of_int32(K_2), (0),
                    sub_int(integer_of_int32(p_1), (1)),
                    double_P_B_11_alloc_table, double_P_double_M_B_11))))))) }
  (init:
  try
   begin
     (let P = ref (any_int32 void) in
     (let G = ref (any_int32 void) in
     (let tmp_0 = ref (any_int32 void) in
     (C_219:
     begin
       (let jessie_<somenum> =
       (tmp_0 := (C_218:
                 (let jessie_<somenum> = p_1 in (JC_<somenum>: (Nmax jessie_<somenum>))))) in
       void); void;
      (if ((le_int_ (integer_of_int32 N_2_0)) (integer_of_int32 !tmp_0))
      then
       (C_243:
       begin
         (assert { (JC_<somenum>: le_int(integer_of_int32(N_2_0), (55))) }; void);
        void;
        (let jessie_<somenum> = N_2_0 in
        (let jessie_<somenum> = K_2 in
        (let jessie_<somenum> = A_1 in
        (let jessie_<somenum> = LDA_1 in
        (let jessie_<somenum> = B in
        (let jessie_<somenum> = LDB in
        (JC_<somenum>:
        ((((((((((DTRSM jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) double_P_double_M_B_11) double_P_B_11_alloc_table) double_P_A_1_10_alloc_table) double_P_double_M_A_1_10))))))));
        (C_244:
        (let jessie_<somenum> = N_2_0 in
        (let jessie_<somenum> = K_2 in
        (let jessie_<somenum> = p_1 in
        (let jessie_<somenum> = B in
        (let jessie_<somenum> = LDB in
        (JC_<somenum>:
        (((((((DREMM jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) double_P_double_M_B_11) double_P_B_11_alloc_table))))))))
       end)
      else
       (C_222:
       (C_225:
       (C_234:
       (C_239:
       (C_240:
       begin
         (let jessie_<somenum> =
         (P := (C_221:
               (safe_int32_of_integer_ (C_220:
                                       (JC_<somenum>:
                                       ((div_int (integer_of_int32 N_2_0)) (2))))))) in
         void);
        (let jessie_<somenum> =
        (G := (C_224:
              (safe_int32_of_integer_ (C_223:
                                      ((sub_int (integer_of_int32 N_2_0)) 
                                       (integer_of_int32 !P)))))) in void);
        (let jessie_<somenum> = !G in
        (let jessie_<somenum> = K_2 in
        (let jessie_<somenum> = p_1 in
        (let jessie_<somenum> =
        (C_230:
        ((shift A_1) (integer_of_int32 (C_229:
                                       (safe_int32_of_integer_ (C_228:
                                                               ((mul_int 
                                                                 (integer_of_int32 !P)) 
                                                                (integer_of_int32 
                                                                 (C_227:
                                                                 (safe_int32_of_integer_ 
                                                                  (C_226:
                                                                  ((add_int 
                                                                    (integer_of_int32 LDA_1)) (1))))))))))))) in
        (let jessie_<somenum> = LDA_1 in
        (let jessie_<somenum> =
        (C_233:
        ((shift B) (integer_of_int32 (C_232:
                                     (safe_int32_of_integer_ (C_231:
                                                             ((mul_int 
                                                               (integer_of_int32 !P)) 
                                                              (integer_of_int32 LDB)))))))) in
        (let jessie_<somenum> = LDB in
        (JC_<somenum>:
        (((((((((((LZ_TRSM jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) double_P_double_M_B_11) double_P_B_11_alloc_table) double_P_A_1_10_alloc_table) double_P_double_M_A_1_10)))))))));
        (let jessie_<somenum> = !P in
        (let jessie_<somenum> = !G in
        (let jessie_<somenum> = K_2 in
        (let jessie_<somenum> = p_1 in
        (let jessie_<somenum> = (C_235: ((shift A_1) (integer_of_int32 !P))) in
        (let jessie_<somenum> = LDA_1 in
        (let jessie_<somenum> =
        (C_238:
        ((shift B) (integer_of_int32 (C_237:
                                     (safe_int32_of_integer_ (C_236:
                                                             ((mul_int 
                                                               (integer_of_int32 !P)) 
                                                              (integer_of_int32 LDB)))))))) in
        (let jessie_<somenum> = LDB in
        (let jessie_<somenum> = B in
        (let jessie_<somenum> = LDB in
        (JC_<somenum>:
        ((((((((((((((((DGEMM_NEG jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) double_P_double_M_B_11) double_P_B_11_alloc_table) double_P_B_11_alloc_table) double_P_A_1_10_alloc_table) !double_P_double_M_B_11) double_P_double_M_A_1_10))))))))))));
        (let jessie_<somenum> = !P in
        (let jessie_<somenum> = K_2 in
        (let jessie_<somenum> = p_1 in
        (let jessie_<somenum> = B in
        (let jessie_<somenum> = LDB in
        (JC_<somenum>:
        (((((((DREMM jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) double_P_double_M_B_11) double_P_B_11_alloc_table)))))));
        (C_241:
        (let jessie_<somenum> = !P in
        (let jessie_<somenum> = K_2 in
        (let jessie_<somenum> = p_1 in
        (let jessie_<somenum> = A_1 in
        (let jessie_<somenum> = LDA_1 in
        (let jessie_<somenum> = B in
        (let jessie_<somenum> = LDB in
        (JC_<somenum>:
        (((((((((((LZ_TRSM jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) double_P_double_M_B_11) double_P_B_11_alloc_table) double_P_A_1_10_alloc_table) double_P_double_M_A_1_10))))))))))
       end)))))); (raise Return) end)))); (raise Return) end with Return ->
   void end)
  { (JC_<somenum>:
    ((JC_<somenum>:
     is_exact_int_mat_bounded_by(B@, integer_of_int32(LDB@),
     integer_of_int32(N_2_0@), integer_of_int32(K_2@), (0),
     sub_int(integer_of_int32(p_1@), (1)), double_P_B_11_alloc_table,
     double_P_double_M_B_11))
    and (JC_<somenum>:
        not_assigns(double_P_B_11_alloc_table@, double_P_double_M_B_11@,
        double_P_double_M_B_11,
        pset_range(pset_singleton(B@), (0),
        sub_int(add_int(mul_int(sub_int(integer_of_int32(N_2_0@), (1)),
                        integer_of_int32(LDB@)),
                integer_of_int32(K_2@)),
        (1))))))) }

let LZ_TRSM_safety =
 fun (N_2_0 : int32) (K_2 : int32) (p_1 : int32) (A_1 : double_P pointer) (LDA_1 : int32) (B : double_P pointer) (LDB : int32) (double_P_double_M_B_11 : (double_P, double) memory ref) (double_P_A_1_10_alloc_table : double_P alloc_table) (double_P_B_11_alloc_table : double_P alloc_table) (double_P_double_M_A_1_10 : (double_P, double) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int((2), integer_of_int32(p_1)))
    and ((JC_<somenum>:
         le_int(mul_int(mul_int(sub_int(integer_of_int32(p_1), (1)),
                        sub_int(integer_of_int32(p_1), (1))),
                integer_of_int32(N_2_0)),
         max_int))
        and ((JC_<somenum>: (not same_block(B, A_1)))
            and ((JC_<somenum>:
                 is_exact_int_mat_bounded_by(A_1, integer_of_int32(LDA_1),
                 integer_of_int32(N_2_0), integer_of_int32(N_2_0), (0),
                 sub_int(integer_of_int32(p_1), (1)),
                 double_P_A_1_10_alloc_table, double_P_double_M_A_1_10))
                and (JC_<somenum>:
                    is_exact_int_mat_bounded_by(B, integer_of_int32(LDB),
                    integer_of_int32(N_2_0), integer_of_int32(K_2), (0),
                    sub_int(integer_of_int32(p_1), (1)),
                    double_P_B_11_alloc_table, double_P_double_M_B_11))))))) }
  (init:
  try
   begin
     (let P = ref (any_int32 void) in
     (let G = ref (any_int32 void) in
     (let tmp_0 = ref (any_int32 void) in
     (C_219:
     begin
       (let jessie_<somenum> =
       (tmp_0 := (C_218:
                 (let jessie_<somenum> = p_1 in
                 (JC_<somenum>: (Nmax_requires jessie_<somenum>))))) in void); void;
      (if ((le_int_ (integer_of_int32 N_2_0)) (integer_of_int32 !tmp_0))
      then
       (C_243:
       begin
         [ { } unit { (JC_<somenum>: le_int(integer_of_int32(N_2_0), (55))) } ];
        void;
        (let jessie_<somenum> = N_2_0 in
        (let jessie_<somenum> = K_2 in
        (let jessie_<somenum> = A_1 in
        (let jessie_<somenum> = LDA_1 in
        (let jessie_<somenum> = B in
        (let jessie_<somenum> = LDB in
        (JC_<somenum>:
        ((((((((((DTRSM_requires jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) double_P_double_M_B_11) double_P_B_11_alloc_table) double_P_A_1_10_alloc_table) double_P_double_M_A_1_10))))))));
        (C_244:
        (let jessie_<somenum> = N_2_0 in
        (let jessie_<somenum> = K_2 in
        (let jessie_<somenum> = p_1 in
        (let jessie_<somenum> = B in
        (let jessie_<somenum> = LDB in
        (JC_<somenum>:
        (((((((DREMM_requires jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) double_P_double_M_B_11) double_P_B_11_alloc_table))))))))
       end)
      else
       (C_222:
       (C_225:
       (C_234:
       (C_239:
       (C_240:
       begin
         (let jessie_<somenum> =
         (P := (C_221:
               (JC_<somenum>:
               (int32_of_integer_ (C_220:
                                  (JC_<somenum>:
                                  ((div_int_ (integer_of_int32 N_2_0)) (2)))))))) in
         void);
        (let jessie_<somenum> =
        (G := (C_224:
              (JC_<somenum>:
              (int32_of_integer_ (C_223:
                                 ((sub_int (integer_of_int32 N_2_0)) 
                                  (integer_of_int32 !P))))))) in void);
        (let jessie_<somenum> = !G in
        (let jessie_<somenum> = K_2 in
        (let jessie_<somenum> = p_1 in
        (let jessie_<somenum> =
        (C_230:
        ((shift A_1) (integer_of_int32 (C_229:
                                       (JC_<somenum>:
                                       (int32_of_integer_ (C_228:
                                                          ((mul_int (integer_of_int32 !P)) 
                                                           (integer_of_int32 
                                                            (C_227:
                                                            (JC_<somenum>:
                                                            (int32_of_integer_ 
                                                             (C_226:
                                                             ((add_int 
                                                               (integer_of_int32 LDA_1)) (1))))))))))))))) in
        (let jessie_<somenum> = LDA_1 in
        (let jessie_<somenum> =
        (C_233:
        ((shift B) (integer_of_int32 (C_232:
                                     (JC_<somenum>:
                                     (int32_of_integer_ (C_231:
                                                        ((mul_int (integer_of_int32 !P)) 
                                                         (integer_of_int32 LDB))))))))) in
        (let jessie_<somenum> = LDB in
        (JC_<somenum>:
        (check { zwf_zero((0), (0)) };
        (JC_<somenum>:
        (((((((((((LZ_TRSM_requires jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) double_P_double_M_B_11) double_P_B_11_alloc_table) double_P_A_1_10_alloc_table) double_P_double_M_A_1_10)))))))))));
        (let jessie_<somenum> = !P in
        (let jessie_<somenum> = !G in
        (let jessie_<somenum> = K_2 in
        (let jessie_<somenum> = p_1 in
        (let jessie_<somenum> = (C_235: ((shift A_1) (integer_of_int32 !P))) in
        (let jessie_<somenum> = LDA_1 in
        (let jessie_<somenum> =
        (C_238:
        ((shift B) (integer_of_int32 (C_237:
                                     (JC_<somenum>:
                                     (int32_of_integer_ (C_236:
                                                        ((mul_int (integer_of_int32 !P)) 
                                                         (integer_of_int32 LDB))))))))) in
        (let jessie_<somenum> = LDB in
        (let jessie_<somenum> = B in
        (let jessie_<somenum> = LDB in
        (JC_<somenum>:
        ((((((((((((((((DGEMM_NEG_requires jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) double_P_double_M_B_11) double_P_B_11_alloc_table) double_P_B_11_alloc_table) double_P_A_1_10_alloc_table) !double_P_double_M_B_11) double_P_double_M_A_1_10))))))))))));
        (let jessie_<somenum> = !P in
        (let jessie_<somenum> = K_2 in
        (let jessie_<somenum> = p_1 in
        (let jessie_<somenum> = B in
        (let jessie_<somenum> = LDB in
        (JC_<somenum>:
        (((((((DREMM_requires jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) double_P_double_M_B_11) double_P_B_11_alloc_table)))))));
        (C_241:
        (let jessie_<somenum> = !P in
        (let jessie_<somenum> = K_2 in
        (let jessie_<somenum> = p_1 in
        (let jessie_<somenum> = A_1 in
        (let jessie_<somenum> = LDA_1 in
        (let jessie_<somenum> = B in
        (let jessie_<somenum> = LDB in
        (JC_<somenum>:
        (check { zwf_zero((0), (0)) };
        (JC_<somenum>:
        (((((((((((LZ_TRSM_requires jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) double_P_double_M_B_11) double_P_B_11_alloc_table) double_P_A_1_10_alloc_table) double_P_double_M_A_1_10))))))))))))
       end)))))); (raise Return) end)))); (raise Return) end with Return ->
   void end) { true }

let Nmax_ensures_default =
 fun (p_2 : int32) ->
  { (JC_<somenum>: le_int((2), integer_of_int32(p_2))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let pp = ref (any_double void) in
     (let p2_0 = ref (any_double void) in
     (let N_4 = ref (any_int32 void) in
     (C_176:
     (C_178:
     (C_179:
     begin
       (let jessie_<somenum> = (pp := (C_175: (double_of_real_exact 1.0))) in void);
      (let jessie_<somenum> = (p2_0 := (C_177: (double_of_real_exact 1.0))) in
      void);
      (let jessie_<somenum> = (N_4 := (safe_int32_of_integer_ (0))) in void);
      try
       (let jessie_<somenum> =
       begin
         (loop_18:
         while true do
         { invariant (JC_<somenum>: true)  }
          begin
            [ { } unit { true } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_201:
              begin
                (if ((neq_int_ (integer_of_int32 (C_190:
                                                 (safe_int32_of_integer_ 
                                                  (C_189:
                                                  ((bw_xor (integer_of_int32 
                                                            (C_188:
                                                            (safe_int32_of_integer_ 
                                                             (if ((lt_double 
                                                                   (C_187:
                                                                   (JC_<somenum>:
                                                                   (((div_double_safe nearest_even) 
                                                                    (C_186:
                                                                    (JC_<somenum>:
                                                                    (((mul_double_safe nearest_even) 
                                                                    (C_185:
                                                                    ((double_of_real_safe nearest_even) 
                                                                    (real_of_int 
                                                                    (integer_of_int32 
                                                                    (C_184:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_183:
                                                                    ((sub_int 
                                                                    (integer_of_int32 p_2)) (1)))))))))) 
                                                                    (C_182:
                                                                    (JC_<somenum>:
                                                                    (((add_double_safe nearest_even) !pp) !p2_0))))))) 
                                                                    (C_181:
                                                                    (double_of_real_exact 2.0)))))) 
                                                                  (C_180:
                                                                  (double_of_real_exact 1.0)))
                                                             then (1)
                                                             else (0)))))) 
                                                   (neg_int (53)))))))) (0))
                then void
                else
                 (let jessie_<somenum> = (raise (Goto_while_8_break_exc void)) in
                 void));
               (let jessie_<somenum> =
               (C_193:
               (C_198:
               begin
                 (let jessie_<somenum> =
                 (pp := (C_192:
                        (JC_<somenum>:
                        (((mul_double_safe nearest_even) !pp) (C_191:
                                                              ((double_of_real_safe nearest_even) 
                                                               (real_of_int 
                                                                (integer_of_int32 p_2)))))))) in
                 void);
                (p2_0 := (C_197:
                         (JC_<somenum>:
                         (((mul_double_safe nearest_even) !p2_0) (C_196:
                                                                 ((double_of_real_safe nearest_even) 
                                                                  (real_of_int 
                                                                   (integer_of_int32 
                                                                    (C_195:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_194:
                                                                    ((sub_int 
                                                                    (integer_of_int32 p_2)) (2)))))))))))));
                !p2_0 end)) in void);
               (N_4 := (C_200:
                       (safe_int32_of_integer_ (C_199:
                                               ((add_int (integer_of_int32 !N_4)) (1))))));
               !N_4 end) in void); (raise (Loop_continue_exc void)) end in
            void) with Loop_continue_exc jessie_<somenum> -> void end end done);
        (raise (Goto_while_8_break_exc void)) end in void) with
       Goto_while_8_break_exc jessie_<somenum> -> (while_8_break: void) end;
      (return := !N_4); (raise Return) end)))))); absurd  end with Return ->
   !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: delay(integer_of_int32(result), integer_of_int32(p_2@)))
    and ((JC_<somenum>:
         (forall q:int.
          ((le_int((1), q) and le_int(q, integer_of_int32(result)))
          <-> delay(q, integer_of_int32(p_2@)))))
        and (JC_<somenum>: le_int(integer_of_int32(result), (55)))))) }

let Nmax_safety =
 fun (p_2 : int32) ->
  { (JC_<somenum>: le_int((2), integer_of_int32(p_2))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let pp = ref (any_double void) in
     (let p2_0 = ref (any_double void) in
     (let N_4 = ref (any_int32 void) in
     (C_176:
     (C_178:
     (C_179:
     begin
       (let jessie_<somenum> = (pp := (C_175: (double_of_real_exact 1.0))) in void);
      (let jessie_<somenum> = (p2_0 := (C_177: (double_of_real_exact 1.0))) in
      void);
      (let jessie_<somenum> = (N_4 := (safe_int32_of_integer_ (0))) in void);
      try
       (let jessie_<somenum> =
       begin
         (loop_17:
         while true do
         { invariant (JC_<somenum>: true) variant (0) }
          begin
            [ { } unit { true } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_201:
              begin
                (if ((neq_int_ (integer_of_int32 (C_190:
                                                 (JC_<somenum>:
                                                 (int32_of_integer_ (C_189:
                                                                    ((bw_xor 
                                                                    (integer_of_int32 
                                                                    (C_188:
                                                                    (JC_<somenum>:
                                                                    (int32_of_integer_ 
                                                                    (if 
                                                                    ((lt_double 
                                                                    (C_187:
                                                                    (JC_<somenum>:
                                                                    (((div_double nearest_even) 
                                                                    (C_186:
                                                                    (JC_<somenum>:
                                                                    (((mul_double nearest_even) 
                                                                    (C_185:
                                                                    (JC_<somenum>:
                                                                    ((double_of_real nearest_even) 
                                                                    (real_of_int 
                                                                    (integer_of_int32 
                                                                    (C_184:
                                                                    (JC_<somenum>:
                                                                    (int32_of_integer_ 
                                                                    (C_183:
                                                                    ((sub_int 
                                                                    (integer_of_int32 p_2)) (1)))))))))))) 
                                                                    (C_182:
                                                                    (JC_<somenum>:
                                                                    (((add_double nearest_even) !pp) !p2_0))))))) 
                                                                    (C_181:
                                                                    (double_of_real_exact 2.0)))))) 
                                                                    (C_180:
                                                                    (double_of_real_exact 1.0)))
                                                                    then (1)
                                                                    else (0))))))) 
                                                                    (neg_int (53))))))))) (0))
                then void
                else
                 (let jessie_<somenum> = (raise (Goto_while_8_break_exc void)) in
                 void));
               (let jessie_<somenum> =
               (C_193:
               (C_198:
               begin
                 (let jessie_<somenum> =
                 (pp := (C_192:
                        (JC_<somenum>:
                        (((mul_double nearest_even) !pp) (C_191:
                                                         (JC_<somenum>:
                                                         ((double_of_real nearest_even) 
                                                          (real_of_int 
                                                           (integer_of_int32 p_2))))))))) in
                 void);
                (p2_0 := (C_197:
                         (JC_<somenum>:
                         (((mul_double nearest_even) !p2_0) (C_196:
                                                            (JC_<somenum>:
                                                            ((double_of_real nearest_even) 
                                                             (real_of_int 
                                                              (integer_of_int32 
                                                               (C_195:
                                                               (JC_<somenum>:
                                                               (int32_of_integer_ 
                                                                (C_194:
                                                                ((sub_int 
                                                                  (integer_of_int32 p_2)) (2)))))))))))))));
                !p2_0 end)) in void);
               (N_4 := (C_200:
                       (JC_<somenum>:
                       (int32_of_integer_ (C_199:
                                          ((add_int (integer_of_int32 !N_4)) (1)))))));
               !N_4 end) in void); (raise (Loop_continue_exc void)) end in
            void) with Loop_continue_exc jessie_<somenum> -> void end end done);
        (raise (Goto_while_8_break_exc void)) end in void) with
       Goto_while_8_break_exc jessie_<somenum> -> (while_8_break: void) end;
      (return := !N_4); (raise Return) end)))))); absurd  end with Return ->
   !return end)) { true }

let pmax_ensures_default =
 fun (N_3 : int32) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let p_3 = ref (any_int32 void) in
     (let tmp = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     (C_208:
     (C_216:
     begin
       (let jessie_<somenum> = (p_3 := (safe_int32_of_integer_ (1))) in void);
      try
       (let jessie_<somenum> =
       begin
         (loop_20:
         while true do
         { invariant (JC_<somenum>: true)  }
          begin
            [ { } unit { true } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_210:
              (C_213:
              begin
                (let jessie_<somenum> =
                (tmp := (C_209:
                        (let jessie_<somenum> = !p_3 in
                        (JC_<somenum>: (Nmax jessie_<somenum>))))) in void); void;
               (if ((le_int_ (integer_of_int32 N_3)) (integer_of_int32 !tmp))
               then void
               else
                (let jessie_<somenum> = (raise (Goto_while_9_break_exc void)) in
                void));
               (p_3 := (C_212:
                       (safe_int32_of_integer_ (C_211:
                                               ((add_int (integer_of_int32 !p_3)) (1))))));
               !p_3 end)) in void); (raise (Loop_continue_exc void)) end in
            void) with Loop_continue_exc jessie_<somenum> -> void end end done);
        (raise (Goto_while_9_break_exc void)) end in void) with
       Goto_while_9_break_exc jessie_<somenum> -> (while_9_break: void) end;
      (let jessie_<somenum> =
      (__retres := (C_215:
                   (safe_int32_of_integer_ (C_214:
                                           ((sub_int (integer_of_int32 !p_3)) (1)))))) in
      void); (return := !__retres); (raise Return) end))))); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    eq_int(integer_of_int32(result), l_pmax(integer_of_int32(N_3@)))) }

let pmax_safety =
 fun (N_3 : int32) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let p_3 = ref (any_int32 void) in
     (let tmp = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     (C_208:
     (C_216:
     begin
       (let jessie_<somenum> = (p_3 := (safe_int32_of_integer_ (1))) in void);
      try
       (let jessie_<somenum> =
       begin
         (loop_19:
         while true do
         { invariant (JC_<somenum>: true) variant (0) }
          begin
            [ { } unit { true } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_210:
              (C_213:
              begin
                (let jessie_<somenum> =
                (tmp := (C_209:
                        (let jessie_<somenum> = !p_3 in
                        (JC_<somenum>: (Nmax_requires jessie_<somenum>))))) in void);
               void;
               (if ((le_int_ (integer_of_int32 N_3)) (integer_of_int32 !tmp))
               then void
               else
                (let jessie_<somenum> = (raise (Goto_while_9_break_exc void)) in
                void));
               (p_3 := (C_212:
                       (JC_<somenum>:
                       (int32_of_integer_ (C_211:
                                          ((add_int (integer_of_int32 !p_3)) (1)))))));
               !p_3 end)) in void); (raise (Loop_continue_exc void)) end in
            void) with Loop_continue_exc jessie_<somenum> -> void end end done);
        (raise (Goto_while_9_break_exc void)) end in void) with
       Goto_while_9_break_exc jessie_<somenum> -> (while_9_break: void) end;
      (let jessie_<somenum> =
      (__retres := (C_215:
                   (JC_<somenum>:
                   (int32_of_integer_ (C_214:
                                      ((sub_int (integer_of_int32 !p_3)) (1))))))) in
      void); (return := !__retres); (raise Return) end))))); absurd  end with
   Return -> !return end)) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C bts0112.jessie --quiet -f bts0112.makefile project
why --project [...] why/bts0112.why
<project name="bts0112" context="why/bts0112_ctx.why">
  <function name="Function pmax">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/bts0112_po236.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "178" begin = "19" end = "26"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po237.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "178" begin = "28" end = "31"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po238.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "178" begin = "28" end = "31"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po239.why">
      <location file = "why/bts0112.why" line = "3030" begin = "45" end = "46"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po240.why">
      <location file = "why/bts0112.why" line = "3030" begin = "45" end = "46"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po241.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "179" begin = "9" end = "12"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po242.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "179" begin = "9" end = "12"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/bts0112_po235.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "175" begin = "12" end = "30"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function Nmax">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/bts0112_po214.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "170" begin = "16" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po215.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "170" begin = "16" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po216.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "170" begin = "16" end = "19"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po217.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "170" begin = "22" end = "27"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po218.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "170" begin = "15" end = "28"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po219.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "170" begin = "14" end = "31"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po220.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "170" begin = "14" end = "31"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po221.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "170" begin = "14" end = "39"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po222.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "170" begin = "14" end = "39"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po223.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "170" begin = "14" end = "45"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po224.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "170" begin = "14" end = "45"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po225.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "171" begin = "11" end = "12"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po226.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "171" begin = "5" end = "12"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po227.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "171" begin = "20" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po228.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "171" begin = "20" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po229.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "171" begin = "20" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po230.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "171" begin = "14" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po231.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "170" begin = "47" end = "50"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po232.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "170" begin = "47" end = "50"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po233.why">
      <location file = "why/bts0112.why" line = "2869" begin = "45" end = "46"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po234.why">
      <location file = "why/bts0112.why" line = "2869" begin = "45" end = "46"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/bts0112_po209.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "164" begin = "13" end = "29"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/bts0112_po210.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "165" begin = "5" end = "59"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/bts0112_po211.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "165" begin = "5" end = "59"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/bts0112_po212.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "165" begin = "5" end = "59"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/bts0112_po213.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "166" begin = "11" end = "24"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function LZ_TRSM">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/bts0112_po169.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "193" begin = "11" end = "18"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po170.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "608" begin = "18" end = "53"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po171.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "608" begin = "18" end = "53"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po172.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "608" begin = "18" end = "53"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po173.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "609" begin = "18" end = "46"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po174.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "197" begin = "12" end = "15"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/bts0112_po175.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "197" begin = "12" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po176.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "197" begin = "12" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po177.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "197" begin = "21" end = "26"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po178.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "197" begin = "21" end = "26"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po179.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "198" begin = "27" end = "32"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po180.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "198" begin = "27" end = "32"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po181.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "198" begin = "24" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po182.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "198" begin = "24" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po183.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "198" begin = "42" end = "47"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po184.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "198" begin = "42" end = "47"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po185.why">
      <location file = "why/bts0112.why" line = "2694" begin = "17" end = "35"/>
      <explain kind = "Check"/>
    </goal>
    <goal why_file="why/bts0112_po186.why">
      <location file = "why/bts0112.why" line = "2694" begin = "17" end = "35"/>
      <explain kind = "Check"/>
    </goal>
    <goal why_file="why/bts0112_po187.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "613" begin = "18" end = "580"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po188.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "613" begin = "18" end = "580"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po189.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "613" begin = "18" end = "580"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po190.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "613" begin = "18" end = "580"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po191.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "613" begin = "18" end = "580"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po192.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "199" begin = "39" end = "44"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po193.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "199" begin = "39" end = "44"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po194.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "623" begin = "18" end = "237"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po195.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "623" begin = "18" end = "237"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po196.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "623" begin = "18" end = "237"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po197.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "623" begin = "18" end = "237"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po198.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "623" begin = "18" end = "237"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po199.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "623" begin = "18" end = "237"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po200.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "623" begin = "18" end = "237"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po201.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "627" begin = "18" end = "44"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po202.why">
      <location file = "why/bts0112.why" line = "2731" begin = "17" end = "35"/>
      <explain kind = "Check"/>
    </goal>
    <goal why_file="why/bts0112_po203.why">
      <location file = "why/bts0112.why" line = "2731" begin = "17" end = "35"/>
      <explain kind = "Check"/>
    </goal>
    <goal why_file="why/bts0112_po204.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "628" begin = "18" end = "58"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po205.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "628" begin = "18" end = "58"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po206.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "628" begin = "18" end = "58"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po207.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "628" begin = "18" end = "58"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/bts0112_po208.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "628" begin = "18" end = "58"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/bts0112_po166.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "194" begin = "15" end = "22"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/bts0112_po167.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "189" begin = "12" end = "56"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/bts0112_po168.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "191" begin = "5" end = "12"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function DTRSM">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/bts0112_po124.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "154" begin = "11" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po125.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "154" begin = "11" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po126.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "155" begin = "13" end = "16"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po127.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "155" begin = "13" end = "16"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po128.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "23" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po129.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "23" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po130.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "23" end = "30"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po131.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "23" end = "30"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po132.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "21" end = "31"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po133.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "21" end = "31"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po134.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "36" end = "41"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po135.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "36" end = "41"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po136.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "36" end = "43"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po137.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "36" end = "43"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po138.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "34" end = "44"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po139.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "34" end = "44"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po140.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "49" end = "54"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po141.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "49" end = "54"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po142.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "49" end = "56"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po143.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "49" end = "56"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po144.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "47" end = "57"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po145.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "47" end = "57"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po146.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "34" end = "57"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po147.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "21" end = "57"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po148.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po149.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po150.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "10" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po151.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "157" begin = "10" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po152.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "430" begin = "43" end = "2660"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po153.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "430" begin = "43" end = "2660"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po154.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "156" begin = "26" end = "29"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po155.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "156" begin = "26" end = "29"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po156.why">
      <location file = "why/bts0112.why" line = "2316" begin = "63" end = "64"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po157.why">
      <location file = "why/bts0112.why" line = "2316" begin = "63" end = "64"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po158.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "155" begin = "25" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po159.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "155" begin = "25" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po160.why">
      <location file = "why/bts0112.why" line = "2294" begin = "54" end = "55"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po161.why">
      <location file = "why/bts0112.why" line = "2294" begin = "54" end = "55"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po162.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "154" begin = "24" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po163.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "154" begin = "24" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po164.why">
      <location file = "why/bts0112.why" line = "2269" begin = "45" end = "46"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po165.why">
      <location file = "why/bts0112.why" line = "2269" begin = "45" end = "46"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/bts0112_po118.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "409" begin = "9" end = "3916"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po119.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "425" begin = "27" end = "3039"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po120.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "417" begin = "18" end = "3517"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po121.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "409" begin = "9" end = "3916"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po122.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "150" begin = "6" end = "61"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/bts0112_po123.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "152" begin = "5" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function DREMM">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/bts0112_po83.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "136" begin = "17" end = "37"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po84.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "136" begin = "6" end = "11"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po85.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "136" begin = "6" end = "11"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po86.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "136" begin = "6" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po87.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "136" begin = "6" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po88.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "136" begin = "17" end = "37"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po89.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "136" begin = "17" end = "37"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po90.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po91.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po92.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "10" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po93.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "10" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po94.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "8" end = "18"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po95.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "8" end = "18"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po96.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "26" end = "31"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po97.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "26" end = "31"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po98.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "26" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po99.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "26" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po100.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "24" end = "34"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po101.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "24" end = "34"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po102.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "38" end = "39"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po103.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "24" end = "39"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po104.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "26" end = "31"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po105.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "26" end = "31"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po106.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "26" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po107.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "26" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po108.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "24" end = "39"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po109.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "137" begin = "24" end = "39"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po110.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "135" begin = "45" end = "48"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po111.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "135" begin = "45" end = "48"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po112.why">
      <location file = "why/bts0112.why" line = "1874" begin = "54" end = "55"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po113.why">
      <location file = "why/bts0112.why" line = "1874" begin = "54" end = "55"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po114.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "135" begin = "21" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po115.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "135" begin = "21" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po116.why">
      <location file = "why/bts0112.why" line = "1852" begin = "45" end = "46"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po117.why">
      <location file = "why/bts0112.why" line = "1852" begin = "45" end = "46"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/bts0112_po77.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "308" begin = "9" end = "3830"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po78.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "316" begin = "18" end = "3470"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po79.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "308" begin = "9" end = "3830"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po80.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "129" begin = "12" end = "56"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/bts0112_po81.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "130" begin = "6" end = "136"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/bts0112_po82.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "133" begin = "5" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function DGEMM_NEG">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/bts0112_po39.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "18" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po40.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "18" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po41.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "18" end = "25"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po42.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "18" end = "25"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po43.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "16" end = "26"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po44.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "16" end = "26"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po45.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "31" end = "36"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po46.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "31" end = "36"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po47.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "31" end = "38"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po48.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "31" end = "38"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po49.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "29" end = "39"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po50.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "29" end = "39"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po51.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "44" end = "49"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po52.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "44" end = "49"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po53.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "44" end = "51"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po54.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "44" end = "51"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po55.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "42" end = "52"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po56.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "42" end = "52"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po57.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "29" end = "52"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po58.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "16" end = "52"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po59.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "5" end = "10"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po60.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "5" end = "10"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po61.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "5" end = "12"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po62.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "121" begin = "5" end = "12"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po63.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "223" begin = "42" end = "2411"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po64.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "223" begin = "42" end = "2411"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0112_po65.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "120" begin = "21" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po66.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "120" begin = "21" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po67.why">
      <location file = "why/bts0112.why" line = "1448" begin = "62" end = "63"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po68.why">
      <location file = "why/bts0112.why" line = "1448" begin = "62" end = "63"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po69.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "112" begin = "25" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po70.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "112" begin = "25" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po71.why">
      <location file = "why/bts0112.why" line = "1409" begin = "53" end = "54"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po72.why">
      <location file = "why/bts0112.why" line = "1409" begin = "53" end = "54"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po73.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "107" begin = "21" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po74.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "107" begin = "21" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0112_po75.why">
      <location file = "why/bts0112.why" line = "1375" begin = "44" end = "45"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/bts0112_po76.why">
      <location file = "why/bts0112.why" line = "1375" begin = "44" end = "45"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/bts0112_po1.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "103" begin = "21" end = "27"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po2.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "103" begin = "26" end = "32"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po3.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "104" begin = "9" end = "65"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po4.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "160" begin = "9" end = "6291"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po5.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "160" begin = "9" end = "6291"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po6.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "108" begin = "23" end = "29"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po7.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "108" begin = "28" end = "34"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po8.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "109" begin = "10" end = "78"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po9.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "176" begin = "18" end = "5554"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po10.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "176" begin = "18" end = "5554"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po11.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "113" begin = "20" end = "26"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po12.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "113" begin = "25" end = "31"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po13.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "114" begin = "13" end = "42"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po14.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "115" begin = "13" end = "47"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po15.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "116" begin = "15" end = "46"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po16.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "117" begin = "8" end = "29"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po17.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "193" begin = "27" end = "4569"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po18.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "193" begin = "27" end = "4569"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/bts0112_po19.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "113" begin = "20" end = "26"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po20.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "113" begin = "25" end = "31"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po21.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "114" begin = "13" end = "42"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po22.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "115" begin = "13" end = "47"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po23.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "116" begin = "15" end = "46"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po24.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "117" begin = "8" end = "29"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po25.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "193" begin = "27" end = "4569"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po26.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "193" begin = "27" end = "4569"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po27.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "108" begin = "23" end = "29"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po28.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "108" begin = "28" end = "34"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po29.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "109" begin = "10" end = "78"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po30.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "176" begin = "18" end = "5554"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po31.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "176" begin = "18" end = "5554"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po32.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "103" begin = "21" end = "27"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po33.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "103" begin = "26" end = "32"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po34.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "104" begin = "9" end = "65"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po35.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "160" begin = "9" end = "6291"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po36.why">
      <location file = "PPCHOME/tests/jessie/bts0112.jessie/bts0112.jc" line = "160" begin = "9" end = "6291"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/bts0112_po37.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "98" begin = "6" end = "62"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/bts0112_po38.why">
      <location file = "PPCHOME/tests/jessie/bts0112.c" line = "100" begin = "5" end = "14"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s2) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s3))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type mode =
  | nearest_even
  | to_zero
  | up
  | down
  | nearest_away

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

logic single_to_double : mode, single -> double

logic double_to_single : mode, double -> single

axiom double_to_single_val:
  (forall m:mode.
    (forall s:single. (double_value(single_to_double(m,
      s)) = single_value(s))))

axiom single_to_double_val:
  (forall m:mode.
    (forall d:double. (single_value(double_to_single(m, d)) = round_single(m,
      double_value(d)))))

predicate single_of_real_post(m: mode, x: real, res: single) =
  ((single_value(res) = round_single(m, x)) and
   ((single_exact(res) = x) and (single_model(res) = x)))

predicate add_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) + single_value(y)))) and
   ((single_exact(res) = (single_exact(x) + single_exact(y))) and
    (single_model(res) = (single_model(x) + single_model(y)))))

predicate sub_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) - single_value(y)))) and
   ((single_exact(res) = (single_exact(x) - single_exact(y))) and
    (single_model(res) = (single_model(x) - single_model(y)))))

predicate mul_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) * single_value(y)))) and
   ((single_exact(res) = (single_exact(x) * single_exact(y))) and
    (single_model(res) = (single_model(x) * single_model(y)))))

predicate div_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) / single_value(y)))) and
   ((single_exact(res) = (single_exact(x) / single_exact(y))) and
    (single_model(res) = (single_model(x) / single_model(y)))))

predicate sqrt_single_post(m: mode, x: single, res: single) =
  ((single_value(res) = round_single(m, sqrt_real(single_value(x)))) and
   ((single_exact(res) = sqrt_real(single_exact(x))) and
    (single_model(res) = sqrt_real(single_model(x)))))

predicate neg_single_post(x: single, res: single) =
  ((single_value(res) = (-single_value(x))) and
   ((single_exact(res) = (-single_exact(x))) and
    (single_model(res) = (-single_model(x)))))

predicate abs_single_post(x: single, res: single) =
  ((single_value(res) = abs_real(single_value(x))) and
   ((single_exact(res) = abs_real(single_exact(x))) and
    (single_model(res) = abs_real(single_model(x)))))

predicate double_of_real_post(m: mode, x: real, res: double) =
  ((double_value(res) = round_double(m, x)) and
   ((double_exact(res) = x) and (double_model(res) = x)))

predicate add_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) + double_value(y)))) and
   ((double_exact(res) = (double_exact(x) + double_exact(y))) and
    (double_model(res) = (double_model(x) + double_model(y)))))

predicate sub_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) - double_value(y)))) and
   ((double_exact(res) = (double_exact(x) - double_exact(y))) and
    (double_model(res) = (double_model(x) - double_model(y)))))

predicate mul_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) * double_value(y)))) and
   ((double_exact(res) = (double_exact(x) * double_exact(y))) and
    (double_model(res) = (double_model(x) * double_model(y)))))

predicate div_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) / double_value(y)))) and
   ((double_exact(res) = (double_exact(x) / double_exact(y))) and
    (double_model(res) = (double_model(x) / double_model(y)))))

predicate sqrt_double_post(m: mode, x: double, res: double) =
  ((double_value(res) = round_double(m, sqrt_real(double_value(x)))) and
   ((double_exact(res) = sqrt_real(double_exact(x))) and
    (double_model(res) = sqrt_real(double_model(x)))))

predicate neg_double_post(x: double, res: double) =
  ((double_value(res) = (-double_value(x))) and
   ((double_exact(res) = (-double_exact(x))) and
    (double_model(res) = (-double_model(x)))))

predicate abs_double_post(x: double, res: double) =
  ((double_value(res) = abs_real(double_value(x))) and
   ((double_exact(res) = abs_real(double_exact(x))) and
    (double_model(res) = abs_real(double_model(x)))))

type char_P

type double_P

type int32

type int8

type padding

type void_P

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic pow_i : int, int -> real

logic max_int : int

predicate delay(n: int, p: int) =
  ((0 < n) and
   ((2 <= p) and (((real_of_int((p - 1)) / 2.) * (pow_i(p,
    (n - 1)) + pow_i((p - 2), (n - 1)))) <= real_of_int(max_int))))

axiom delay_2: delay(55, 2)

axiom delay_decreases:
  (forall n1:int.
    (forall n2:int.
      (forall p1:int.
        (forall p2:int.
          (((0 < n1) and (n1 <= n2)) ->
           (((2 <= p1) and (p1 <= p2)) -> (delay(n2, p2) -> delay(n1, p1))))))))

logic l_pmax : int -> int

axiom delay_pmax:
  (forall n_2:int.
    (forall p_0_1:int. (delay(n_2, p_0_1) -> (p_0_1 <= l_pmax(n_2)))))

logic double_P_tag : double_P tag_id

axiom double_P_int: (int_of_tag(double_P_tag) = 1)

logic double_P_of_pointer_address : unit pointer -> double_P pointer

axiom double_P_of_pointer_address_of_pointer_addr:
  (forall p:double_P pointer.
    (p = double_P_of_pointer_address(pointer_address(p))))

axiom double_P_parenttag_bottom: parenttag(double_P_tag, bottom_tag)

axiom double_P_tags:
  (forall x:double_P pointer.
    (forall double_P_tag_table:double_P tag_table.
      instanceof(double_P_tag_table, x, double_P_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate is_exact_int_mat(X: double_P pointer, LDX: int, N: int, M: int,
  double_P_X_1_alloc_table_at_L: double_P alloc_table,
  double_P_double_M_X_1_at_L: (double_P, double) memory) =
  ((offset_min(double_P_X_1_alloc_table_at_L, X) <= 0) and
   ((offset_max(double_P_X_1_alloc_table_at_L, X) >= ((N * LDX) + M)) and
    ((0 <= LDX) and
     ((0 <= N) and
      ((0 <= M) and
       ((M <= LDX) and
        (forall i:int.
          (forall j:int.
            (((0 <= i) and ((i < N) and ((0 <= j) and (j < M)))) ->
             ((double_round_error(select(double_P_double_M_X_1_at_L, shift(X,
              ((i * LDX) + j)))) = 0.0) and
              (exists v:int. (double_value(select(double_P_double_M_X_1_at_L,
                shift(X, ((i * LDX) + j)))) = real_of_int(v)))))))))))))

predicate is_exact_int_mat_bounded_by(X_0: double_P pointer, LDX_0: int,
  N_0: int, M_0: int, min: int, max: int,
  double_P_X_0_2_alloc_table_at_L: double_P alloc_table,
  double_P_double_M_X_0_2_at_L: (double_P, double) memory) =
  ((offset_min(double_P_X_0_2_alloc_table_at_L, X_0) <= 0) and
   ((offset_max(double_P_X_0_2_alloc_table_at_L,
    X_0) >= ((N_0 * LDX_0) + M_0)) and
    ((0 <= LDX_0) and
     ((0 <= N_0) and
      ((0 <= M_0) and
       ((M_0 <= LDX_0) and
        (forall i_0:int.
          (forall j_0:int.
            (((0 <= i_0) and ((i_0 < N_0) and ((0 <= j_0) and (j_0 < M_0)))) ->
             ((double_round_error(select(double_P_double_M_X_0_2_at_L,
              shift(X_0, ((i_0 * LDX_0) + j_0)))) = 0.0) and
              ((exists v_0:int.
                 (double_value(select(double_P_double_M_X_0_2_at_L,
                 shift(X_0, ((i_0 * LDX_0) + j_0)))) = real_of_int(v_0))) and
               ((real_of_int(min) <= double_value(select(double_P_double_M_X_0_2_at_L,
                shift(X_0, ((i_0 * LDX_0) + j_0))))) and
                (double_value(select(double_P_double_M_X_0_2_at_L, shift(X_0,
                ((i_0 * LDX_0) + j_0)))) <= real_of_int(max))))))))))))))

axiom l_pmax_def:
  (forall n_1:int.
    (delay(n_1, l_pmax(n_1)) and (not delay(n_1, (l_pmax(n_1) + 1)))))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_double_P(p: double_P pointer, a: int,
  double_P_alloc_table: double_P alloc_table) =
  (offset_min(double_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom max_int_eq: (real_of_int(max_int) = 0x1.p53)

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_double_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(double_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_double_P(p: double_P pointer, b: int,
  double_P_alloc_table: double_P alloc_table) =
  (offset_max(double_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_double_P(p: double_P pointer, a: int, b: int,
  double_P_alloc_table: double_P alloc_table) =
  ((offset_min(double_P_alloc_table, p) = a) and
   (offset_max(double_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_double_P(p: double_P pointer, a: int, b: int,
  double_P_alloc_table: double_P alloc_table) =
  ((offset_min(double_P_alloc_table, p) = a) and
   (offset_max(double_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate temporary_is_exact_int_mat_bounded_by(X_1: double_P pointer,
  LDX_1: int, N_1: int, M_1: int, k: int, min_0: int, max_0: int,
  double_P_X_1_3_alloc_table_at_L: double_P alloc_table,
  double_P_double_M_X_1_3_at_L: (double_P, double) memory) =
  ((offset_min(double_P_X_1_3_alloc_table_at_L, X_1) <= 0) and
   ((offset_max(double_P_X_1_3_alloc_table_at_L,
    X_1) >= ((N_1 * LDX_1) + M_1)) and
    ((0 <= LDX_1) and
     ((0 <= N_1) and
      ((0 <= M_1) and
       ((M_1 <= LDX_1) and
        (forall i_1:int.
          (forall j_1:int.
            ((((0 <= i_1) and ((i_1 < N_1) and ((0 <= j_1) and (j_1 < M_1)))) or
              ((i_1 = N_1) and ((0 <= j_1) and (j_1 < k)))) ->
             ((double_round_error(select(double_P_double_M_X_1_3_at_L,
              shift(X_1, ((i_1 * LDX_1) + j_1)))) = 0.0) and
              ((exists v_1:int.
                 (double_value(select(double_P_double_M_X_1_3_at_L,
                 shift(X_1, ((i_1 * LDX_1) + j_1)))) = real_of_int(v_1))) and
               ((real_of_int(min_0) <= double_value(select(double_P_double_M_X_1_3_at_L,
                shift(X_1, ((i_1 * LDX_1) + j_1))))) and
                (double_value(select(double_P_double_M_X_1_3_at_L, shift(X_1,
                ((i_1 * LDX_1) + j_1)))) <= real_of_int(max_0))))))))))))))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_double_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_double_P(p: double_P pointer, a: int, b: int,
  double_P_alloc_table: double_P alloc_table) =
  ((offset_min(double_P_alloc_table, p) <= a) and
   (offset_max(double_P_alloc_table, p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_double_P(p: double_P pointer, a: int, b: int,
  double_P_alloc_table: double_P alloc_table) =
  ((offset_min(double_P_alloc_table, p) <= a) and
   (offset_max(double_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

