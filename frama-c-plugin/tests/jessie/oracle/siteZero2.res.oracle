Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -add-symbolic-path PPCHOME:PPCHOME -jessie -jessie-gen-only siteZero2.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -dD PPCHOME/tests/jessie/siteZero2.c"
PPCHOME/tests/jessie/siteZero2.c:84:[kernel] warning: Floating-point constant 0.99838542645959 is not represented exactly. Will use 0x1.ff2c5fe6e4d6fp-1. See documentation for option -warn-decimal-float
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir siteZero2.jessie
[jessie] File siteZero2.jessie/siteZero2.jc written.
[jessie] File siteZero2.jessie/siteZero2.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

type int16 = -32768..32767

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

tag __anonstruct_M_1 = {
  float x1: 32; 
  float y1: 32; 
  float z1: 32; 
  float xx: 32; 
  float xz: 32; 
  float y: 32; 
  float yy: 32; 
  float r1: 32;
}

type __anonstruct_M_1 = [__anonstruct_M_1]

tag __anonstruct_L_2 = {
  float Fixy: 32; 
  float Fixz: 32; 
  float Fiyz: 32; 
  float M1x: 32; 
  float M1y: 32; 
  float M1z: 32; 
  float M1r: 32; 
  float Mxx: 32; 
  float Myy: 32; 
  float Mxz: 32; 
  float My: 32;
}

type __anonstruct_L_2 = [__anonstruct_L_2]

tag __anonstruct_COMPVETOR_3 = {
  double x_0: 64; 
  double y_0: 64; 
  double z: 64;
}

type __anonstruct_COMPVETOR_3 = [__anonstruct_COMPVETOR_3]

tag __anonstruct_Escala_4 = {
  float Mx: 32; 
  float My_0: 32; 
  float Mz: 32;
}

type __anonstruct_Escala_4 = [__anonstruct_Escala_4]

tag __anonstruct_Vel_Lin_5 = {
  int16 Fx: 16; 
  int16 Fy: 16; 
  int16 Fz: 16;
}

type __anonstruct_Vel_Lin_5 = [__anonstruct_Vel_Lin_5]

tag __anonstruct_Cmd_6 = {
  double P0_X: 64; 
  double P0_Y: 64; 
  double P0_Z: 64;
}

type __anonstruct_Cmd_6 = [__anonstruct_Cmd_6]

double sqrt(double x)
  requires (C_4 : ((x :> real) > 0.0));
behavior default:
  assigns \nothing;
  ensures (C_1 : ((C_2 : (\real_abs(((\result :> real) -
                                      \real_sqrt((\at(x,Old) :> real)))) <=
                           0x1p-20)) &&
                   (C_3 : ((\result :> real) > 0.0))));
;

__anonstruct_M_1[0] M;

invariant valid_M :
((\offset_min(M) <= 0) && (\offset_max(M) >= 0))

__anonstruct_L_2[0] L;

invariant valid_L :
((\offset_min(L) <= 0) && (\offset_max(L) >= 0))

__anonstruct_COMPVETOR_3[0] D;

invariant valid_D :
((\offset_min(D) <= 0) && (\offset_max(D) >= 0))

__anonstruct_Escala_4[0] Escala;

__anonstruct_Vel_Lin_5[0] Vel_Lin;

invariant valid_Vel_Lin :
((\offset_min(Vel_Lin) <= 0) && (\offset_max(Vel_Lin) >= 0))

__anonstruct_Cmd_6[0] Cmd;

float Wae;

float Nav_G;

float Grav;

unit Test()
  requires (C_315 : (((C_317 : (\real_abs(((Cmd.P0_X :> real) - 6.378291E+3)) <=
                                 0x1p-20)) &&
                       (C_318 : (\real_abs(((Cmd.P0_Y :> real) -
                                             (- 1.659630E+0))) <=
                                  0x1p-20))) &&
                      (C_319 : (\real_abs(((Cmd.P0_Z :> real) - 0.4758900)) <=
                                 0x1p-20))));
  requires (C_310 : (((C_312 : (\real_abs(((Escala.Mx :> real) - 0.03)) <=
                                 0x1p-20)) &&
                       (C_313 : (\real_abs(((Escala.My_0 :> real) - 0.03)) <=
                                  0x1p-20))) &&
                      (C_314 : (\real_abs(((Escala.Mz :> real) - 0.03)) <=
                                 0x1p-20))));
  requires (C_307 : ((C_308 : (5 <= Vel_Lin.Fx)) &&
                      (C_309 : (Vel_Lin.Fx <= 29))));
  requires (C_304 : ((C_305 : ((- 1) <= Vel_Lin.Fy)) &&
                      (C_306 : (Vel_Lin.Fy <= 1))));
  requires (C_301 : ((C_302 : (0 <= Vel_Lin.Fz)) &&
                      (C_303 : (Vel_Lin.Fz <= 12))));
  requires (C_280 : (((((((((((C_290 : (\real_abs((L.M1x :> real)) <=
                                         0x1p-20)) &&
                               (C_291 : (\real_abs((L.M1y :> real)) <=
                                          0x1p-20))) &&
                              (C_292 : (\real_abs((L.M1z :> real)) <=
                                         0x1p-20))) &&
                             (C_293 : (\real_abs((L.Mxx :> real)) <= 0x1p-20))) &&
                            (C_294 : (\real_abs((L.Mxz :> real)) <= 0x1p-20))) &&
                           (C_295 : (\real_abs((L.Myy :> real)) <= 0x1p-20))) &&
                          (C_296 : (\real_abs((L.My :> real)) <= 0x1p-20))) &&
                         (C_297 : (\real_abs((L.M1r :> real)) <= 0x1p-20))) &&
                        (C_298 : (\real_abs((L.Fixy :> real)) <= 0x1p-20))) &&
                       (C_299 : (\real_abs((L.Fixz :> real)) <= 0x1p-20))) &&
                      (C_300 : (\real_abs((L.Fiyz :> real)) <= 0x1p-20))));
  requires (C_279 : (\real_abs((Wae :> real)) <= 0x1p-20));
behavior default:
  ensures (C_278 : true);
{  
   (var float result);
   
   (var float Modulo);
   
   (var double Adcc_Vx);
   
   (var double Adcc_Vy);
   
   (var double Adcc_Vz);
   
   (var double aux);
   
   (var double R);
   
   (var double tmp);
   
   (var float tmp1);
   
   (var double tmp2);
   
   {  (C_6 : (Grav = (C_5 : ((3.986005E+005 :> double) :> float))));
      
      {  
         (assert for default: (C_7 : (jessie : (\real_abs(((Grav :> real) -
                                                            3.986005E+005)) <=
                                                 0x1p-20))));
         ()
      };
      (C_19 : (aux = (C_18 : ((C_17 : ((C_16 : ((C_15 : Cmd.P0_X) *
                                                 (C_14 : Cmd.P0_X))) +
                                        (C_13 : ((C_12 : Cmd.P0_Y) *
                                                  (C_11 : Cmd.P0_Y))))) +
                               (C_10 : ((C_9 : Cmd.P0_Z) * (C_8 : Cmd.P0_Z)))))));
      
      {  
         (assert for default: (C_20 : (jessie : ((aux :> real) > 0.0))));
         ()
      };
      
      {  (C_22 : (tmp = (C_21 : sqrt(aux))));
         (C_24 : (Modulo = (C_23 : (tmp :> float))))
      };
      
      {  
         (assert for default: (C_25 : (jessie : ((Modulo :> real) > 0.0))));
         ()
      };
      
      {  
         (assert for default: (C_26 : (jessie : (((Modulo :> real) -
                                                   10.3020010835769) !=
                                                  0.0))));
         ()
      };
      (C_35 : (Nav_G = (C_34 : ((C_33 : ((C_32 : ((0.99838542645959 :> double) :> float)) *
                                          Grav)) /
                                 (C_31 : ((C_30 : (Modulo -
                                                    (C_29 : ((10.3020010835769 :> double) :> float)))) *
                                           (C_28 : (Modulo -
                                                     (C_27 : ((10.3020010835769 :> double) :> float))))))))));
      
      {  
         (assert for default: (C_36 : (jessie : ((Nav_G :> real) > 0.0))));
         ()
      };
      (C_57 : (Adcc_Vx = (C_56 : ((C_55 : ((C_54 : ((C_53 : ((C_52 : 
                                                             ((C_51 : Escala.Mx) *
                                                               (C_50 : (
                                                               (C_49 : Vel_Lin.Fx) :> float)))) -
                                                              (C_48 : 
                                                              ((C_47 : 
                                                               ((C_46 : L.Fixy) *
                                                                 (C_45 : Escala.My_0))) *
                                                                (C_44 : (
                                                                (C_43 : Vel_Lin.Fy) :> float)))))) -
                                                     (C_42 : ((C_41 : 
                                                              ((C_40 : L.Fixz) *
                                                                (C_39 : Escala.Mz))) *
                                                               (C_38 : (
                                                               (C_37 : Vel_Lin.Fz) :> float)))))) :> double)) /
                                   (1000.0 :> double)))));
      
      {  
         (assert for default: (C_58 : (jessie : ((Adcc_Vx :> real) >= 0.0))));
         ()
      };
      (C_72 : (Adcc_Vy = (C_71 : ((C_70 : ((C_69 : ((C_68 : ((C_67 : Escala.My_0) *
                                                              (C_66 : (
                                                              (C_65 : Vel_Lin.Fy) :> float)))) -
                                                     (C_64 : ((C_63 : 
                                                              ((C_62 : L.Fiyz) *
                                                                (C_61 : Escala.Mz))) *
                                                               (C_60 : (
                                                               (C_59 : Vel_Lin.Fz) :> float)))))) :> double)) /
                                   (1000.0 :> double)))));
      (C_79 : (Adcc_Vz = (C_78 : ((C_77 : ((C_76 : ((C_75 : Escala.Mz) *
                                                     (C_74 : ((C_73 : Vel_Lin.Fz) :> float)))) :> double)) /
                                   (1000.0 :> double)))));
      
      {  
         (assert for default: (C_80 : (jessie : ((Adcc_Vz :> real) >= 0.0))));
         ()
      };
      
      {  
         (assert for default: (C_81 : (jessie : ((((((((\real_abs((L.M1x :> real)) <=
                                                         0x1p-20) &&
                                                        (\real_abs((L.M1y :> real)) <=
                                                          0x1p-20)) &&
                                                       (\real_abs((L.M1z :> real)) <=
                                                         0x1p-20)) &&
                                                      (\real_abs((L.Mxx :> real)) <=
                                                        0x1p-20)) &&
                                                     (\real_abs((L.Mxz :> real)) <=
                                                       0x1p-20)) &&
                                                    (\real_abs((L.Myy :> real)) <=
                                                      0x1p-20)) &&
                                                   (\real_abs((L.My :> real)) <=
                                                     0x1p-20)) &&
                                                  (\real_abs((L.M1r :> real)) <=
                                                    0x1p-20)))));
         ()
      };
      (C_87 : ((C_86 : M.x1) = (C_85 : ((C_84 : ((C_83 : ((C_82 : L.M1x) :> double)) /
                                                  (3600.0 :> double))) :> float))));
      (C_92 : (tmp1 = (C_91 : ((C_90 : ((C_89 : ((C_88 : L.M1x) :> double)) /
                                         (3600.0 :> double))) :> float))));
      
      {  
         (assert for default: (C_93 : (jessie : (\real_abs((tmp1 :> real)) <=
                                                  0x1p-20))));
         ()
      };
      
      {  
         (assert for default: (C_94 : (jessie : ((tmp1 :> real) ==
                                                  (M.x1 :> real)))));
         ()
      };
      
      {  
         (assert for default: (C_95 : (jessie : (\real_abs((M.x1 :> real)) <=
                                                  0x1p-20))));
         ()
      };
      (C_101 : ((C_100 : M.y1) = (C_99 : ((C_98 : ((C_97 : ((C_96 : L.M1y) :> double)) /
                                                    (3600.0 :> double))) :> float))));
      (C_106 : (tmp1 = (C_105 : ((C_104 : ((C_103 : ((C_102 : L.M1y) :> double)) /
                                            (3600.0 :> double))) :> float))));
      
      {  
         (assert for default: (C_107 : (jessie : (\real_abs((tmp1 :> real)) <=
                                                   0x1p-20))));
         ()
      };
      
      {  
         (assert for default: (C_108 : (jessie : ((tmp1 :> real) ==
                                                   (M.y1 :> real)))));
         ()
      };
      
      {  
         (assert for default: (C_109 : (jessie : (\real_abs((M.y1 :> real)) <=
                                                   0x1p-20))));
         ()
      };
      (C_115 : ((C_114 : M.z1) = (C_113 : ((C_112 : ((C_111 : ((C_110 : L.M1z) :> double)) /
                                                      (3600.0 :> double))) :> float))));
      (C_120 : (tmp1 = (C_119 : ((C_118 : ((C_117 : ((C_116 : L.M1z) :> double)) /
                                            (3600.0 :> double))) :> float))));
      
      {  
         (assert for default: (C_121 : (jessie : (\real_abs((tmp1 :> real)) <=
                                                   0x1p-20))));
         ()
      };
      
      {  
         (assert for default: (C_122 : (jessie : ((tmp1 :> real) ==
                                                   (M.z1 :> real)))));
         ()
      };
      
      {  
         (assert for default: (C_123 : (jessie : (\real_abs((M.z1 :> real)) <=
                                                   0x1p-20))));
         ()
      };
      (C_129 : ((C_128 : M.xx) = (C_127 : ((C_126 : ((C_125 : ((C_124 : L.Mxx) :> double)) /
                                                      (3600.0 :> double))) :> float))));
      (C_134 : (tmp1 = (C_133 : ((C_132 : ((C_131 : ((C_130 : L.Mxx) :> double)) /
                                            (3600.0 :> double))) :> float))));
      
      {  
         (assert for default: (C_135 : (jessie : (\real_abs((tmp1 :> real)) <=
                                                   0x1p-20))));
         ()
      };
      
      {  
         (assert for default: (C_136 : (jessie : ((tmp1 :> real) ==
                                                   (M.xx :> real)))));
         ()
      };
      
      {  
         (assert for default: (C_137 : (jessie : (\real_abs((M.xx :> real)) <=
                                                   0x1p-20))));
         ()
      };
      (C_143 : ((C_142 : M.xz) = (C_141 : ((C_140 : ((C_139 : ((C_138 : L.Mxz) :> double)) /
                                                      (3600.0 :> double))) :> float))));
      (C_148 : (tmp1 = (C_147 : ((C_146 : ((C_145 : ((C_144 : L.Mxz) :> double)) /
                                            (3600.0 :> double))) :> float))));
      
      {  
         (assert for default: (C_149 : (jessie : (\real_abs((tmp1 :> real)) <=
                                                   0x1p-20))));
         ()
      };
      
      {  
         (assert for default: (C_150 : (jessie : ((tmp1 :> real) ==
                                                   (M.xz :> real)))));
         ()
      };
      
      {  
         (assert for default: (C_151 : (jessie : (\real_abs((M.xz :> real)) <=
                                                   0x1p-20))));
         ()
      };
      (C_157 : ((C_156 : M.yy) = (C_155 : ((C_154 : ((C_153 : ((C_152 : L.Myy) :> double)) /
                                                      (3600.0 :> double))) :> float))));
      (C_162 : (tmp1 = (C_161 : ((C_160 : ((C_159 : ((C_158 : L.Myy) :> double)) /
                                            (3600.0 :> double))) :> float))));
      
      {  
         (assert for default: (C_163 : (jessie : (\real_abs((tmp1 :> real)) <=
                                                   0x1p-20))));
         ()
      };
      
      {  
         (assert for default: (C_164 : (jessie : ((tmp1 :> real) ==
                                                   (M.yy :> real)))));
         ()
      };
      
      {  
         (assert for default: (C_165 : (jessie : (\real_abs((M.yy :> real)) <=
                                                   0x1p-20))));
         ()
      };
      (C_171 : ((C_170 : M.y) = (C_169 : ((C_168 : ((C_167 : ((C_166 : L.My) :> double)) /
                                                     (3600.0 :> double))) :> float))));
      (C_176 : (tmp1 = (C_175 : ((C_174 : ((C_173 : ((C_172 : L.My) :> double)) /
                                            (3600.0 :> double))) :> float))));
      
      {  
         (assert for default: (C_177 : (jessie : (\real_abs((tmp1 :> real)) <=
                                                   0x1p-20))));
         ()
      };
      
      {  
         (assert for default: (C_178 : (jessie : ((tmp1 :> real) ==
                                                   (M.y :> real)))));
         ()
      };
      
      {  
         (assert for default: (C_179 : (jessie : (\real_abs((M.y :> real)) <=
                                                   0x1p-20))));
         ()
      };
      (C_185 : ((C_184 : M.r1) = (C_183 : ((C_182 : ((C_181 : ((C_180 : L.M1r) :> double)) /
                                                      (3600.0 :> double))) :> float))));
      (C_190 : (tmp1 = (C_189 : ((C_188 : ((C_187 : ((C_186 : L.M1r) :> double)) /
                                            (3600.0 :> double))) :> float))));
      
      {  
         (assert for default: (C_191 : (jessie : (\real_abs((tmp1 :> real)) <=
                                                   0x1p-20))));
         ()
      };
      
      {  
         (assert for default: (C_192 : (jessie : ((tmp1 :> real) ==
                                                   (M.r1 :> real)))));
         ()
      };
      
      {  
         (assert for default: (C_193 : (jessie : (\real_abs((M.r1 :> real)) <=
                                                   0x1p-20))));
         ()
      };
      (C_219 : ((C_218 : D.x_0) = (C_217 : ((C_216 : ((C_215 : ((C_214 : 
                                                                ((C_213 : (
                                                                 (C_212 : M.x1) :> double)) *
                                                                  (0.015625 :> double))) +
                                                                 (C_211 : 
                                                                 ((C_210 : 
                                                                  ((C_209 : (
                                                                   (C_208 : M.xx) :> double)) *
                                                                    Adcc_Vx)) /
                                                                   (C_207 : (Nav_G :> double)))))) +
                                                       (C_206 : ((C_205 : 
                                                                 ((C_204 : (
                                                                  (C_203 : M.xz) :> double)) *
                                                                   Adcc_Vz)) /
                                                                  (C_202 : (Nav_G :> double)))))) -
                                             (C_201 : ((C_200 : ((C_199 : 
                                                                 ((C_198 : (Wae :> double)) *
                                                                   Adcc_Vx)) *
                                                                  Adcc_Vy)) /
                                                        (C_197 : ((C_196 : 
                                                                  ((0.015625 :> double) *
                                                                    (C_195 : (Nav_G :> double)))) *
                                                                   (C_194 : (Nav_G :> double))))))))));
      (C_244 : (tmp2 = (C_243 : ((C_242 : ((C_241 : ((C_240 : ((C_239 : (
                                                               (C_238 : M.x1) :> double)) *
                                                                (0.015625 :> double))) +
                                                      (C_237 : ((C_236 : 
                                                                ((C_235 : (
                                                                 (C_234 : M.xx) :> double)) *
                                                                  Adcc_Vx)) /
                                                                 (C_233 : (Nav_G :> double)))))) +
                                            (C_232 : ((C_231 : ((C_230 : (
                                                                (C_229 : M.xz) :> double)) *
                                                                 Adcc_Vz)) /
                                                       (C_228 : (Nav_G :> double)))))) -
                                  (C_227 : ((C_226 : ((C_225 : ((C_224 : (Wae :> double)) *
                                                                 Adcc_Vx)) *
                                                       Adcc_Vy)) /
                                             (C_223 : ((C_222 : ((0.015625 :> double) *
                                                                  (C_221 : (Nav_G :> double)))) *
                                                        (C_220 : (Nav_G :> double))))))))));
      
      {  
         (assert for default: (C_245 : (jessie : (\real_abs((tmp2 :> real)) <=
                                                   0x1p-20))));
         ()
      };
      
      {  
         (assert for default: (C_246 : (jessie : ((D.x_0 :> real) ==
                                                   \round_single(\NearestEven(
                                                                 ),
                                                                 (tmp2 :> real))))));
         ()
      };
      
      {  
         (assert for default: (C_247 : (jessie : (\real_abs((D.x_0 :> real)) <=
                                                   0x1p-20))));
         ()
      };
      (C_250 : ((C_249 : D.y_0) = (C_248 : (Nav_G :> double))));
      
      {  
         (assert for default: (C_251 : (jessie : ((\real_abs((D.x_0 :> real)) >
                                                    0.0) ||
                                                   (\real_abs((D.x_0 :> real)) >
                                                     0.0)))));
         ()
      };
      (C_259 : (aux = (C_258 : ((C_257 : ((C_256 : D.x_0) * (C_255 : D.x_0))) +
                                 (C_254 : ((C_253 : D.y_0) * (C_252 : D.y_0)))))));
      
      {  
         (assert for default: (C_260 : (jessie : ((aux :> real) > 0.0))));
         ()
      };
      (C_262 : (R = (C_261 : sqrt(aux))));
      
      {  
         (assert for default: (C_263 : (jessie : ((R :> real) > 0.0))));
         ()
      };
      
      {  
         (assert for default: (C_264 : (jessie : (((R :> real) -
                                                    10.3020010835769) !=
                                                   0.0))));
         ()
      };
      (C_277 : (result = (C_276 : ((C_275 : ((C_274 : ((C_273 : ((C_272 : ((0.99838542645959 :> double) :> float)) *
                                                                  Grav)) :> double)) /
                                              (C_271 : ((C_270 : (R -
                                                                   (C_269 : (
                                                                   (C_268 : ((10.3020010835769 :> double) :> float)) :> double)))) *
                                                         (C_267 : (R -
                                                                    (C_266 : (
                                                                    (C_265 : ((10.3020010835769 :> double) :> float)) :> double)))))))) :> float))));
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs siteZero2.jessie/siteZero2.cloc siteZero2.jessie/siteZero2.jc
type Cmd_6

type D_3

type Escala_4

type L_2

type M_1

type Vel_Lin_5

type __anonstruct_COMPVETOR_3

type __anonstruct_Cmd_6

type __anonstruct_Escala_4

type __anonstruct_L_2

type __anonstruct_M_1

type __anonstruct_Vel_Lin_5

type charP

type int16

type int8

type padding

type uint8

type unsigned_charP

type voidP

logic Cmd:  -> __anonstruct_Cmd_6 pointer

logic D:  -> __anonstruct_COMPVETOR_3 pointer

logic Escala:  -> __anonstruct_Escala_4 pointer

logic L:  -> __anonstruct_L_2 pointer

logic M:  -> __anonstruct_M_1 pointer

logic Vel_Lin:  -> __anonstruct_Vel_Lin_5 pointer

logic Wae:  -> single

logic __anonstruct_COMPVETOR_3_tag:  -> __anonstruct_COMPVETOR_3 tag_id

axiom __anonstruct_COMPVETOR_3_int :
 (int_of_tag(__anonstruct_COMPVETOR_3_tag) = (1))

logic __anonstruct_COMPVETOR_3_of_pointer_address: unit pointer -> __anonstruct_COMPVETOR_3 pointer

axiom __anonstruct_COMPVETOR_3_of_pointer_address_of_pointer_addr :
 (forall p:__anonstruct_COMPVETOR_3 pointer.
  (p = __anonstruct_COMPVETOR_3_of_pointer_address(pointer_address(p))))

axiom __anonstruct_COMPVETOR_3_parenttag_bottom :
 parenttag(__anonstruct_COMPVETOR_3_tag, bottom_tag)

axiom __anonstruct_COMPVETOR_3_tags :
 (forall x:__anonstruct_COMPVETOR_3 pointer.
  (forall __anonstruct_COMPVETOR_3_tag_table:
   __anonstruct_COMPVETOR_3 tag_table.
   instanceof(__anonstruct_COMPVETOR_3_tag_table, x,
   __anonstruct_COMPVETOR_3_tag)))

logic __anonstruct_Cmd_6_tag:  -> __anonstruct_Cmd_6 tag_id

axiom __anonstruct_Cmd_6_int : (int_of_tag(__anonstruct_Cmd_6_tag) = (1))

logic __anonstruct_Cmd_6_of_pointer_address: unit pointer -> __anonstruct_Cmd_6 pointer

axiom __anonstruct_Cmd_6_of_pointer_address_of_pointer_addr :
 (forall p:__anonstruct_Cmd_6 pointer.
  (p = __anonstruct_Cmd_6_of_pointer_address(pointer_address(p))))

axiom __anonstruct_Cmd_6_parenttag_bottom :
 parenttag(__anonstruct_Cmd_6_tag, bottom_tag)

axiom __anonstruct_Cmd_6_tags :
 (forall x:__anonstruct_Cmd_6 pointer.
  (forall __anonstruct_Cmd_6_tag_table:__anonstruct_Cmd_6 tag_table.
   instanceof(__anonstruct_Cmd_6_tag_table, x, __anonstruct_Cmd_6_tag)))

logic __anonstruct_Escala_4_tag:  -> __anonstruct_Escala_4 tag_id

axiom __anonstruct_Escala_4_int :
 (int_of_tag(__anonstruct_Escala_4_tag) = (1))

logic __anonstruct_Escala_4_of_pointer_address: unit pointer -> __anonstruct_Escala_4 pointer

axiom __anonstruct_Escala_4_of_pointer_address_of_pointer_addr :
 (forall p:__anonstruct_Escala_4 pointer.
  (p = __anonstruct_Escala_4_of_pointer_address(pointer_address(p))))

axiom __anonstruct_Escala_4_parenttag_bottom :
 parenttag(__anonstruct_Escala_4_tag, bottom_tag)

axiom __anonstruct_Escala_4_tags :
 (forall x:__anonstruct_Escala_4 pointer.
  (forall __anonstruct_Escala_4_tag_table:__anonstruct_Escala_4 tag_table.
   instanceof(__anonstruct_Escala_4_tag_table, x, __anonstruct_Escala_4_tag)))

logic __anonstruct_L_2_tag:  -> __anonstruct_L_2 tag_id

axiom __anonstruct_L_2_int : (int_of_tag(__anonstruct_L_2_tag) = (1))

logic __anonstruct_L_2_of_pointer_address: unit pointer -> __anonstruct_L_2 pointer

axiom __anonstruct_L_2_of_pointer_address_of_pointer_addr :
 (forall p:__anonstruct_L_2 pointer.
  (p = __anonstruct_L_2_of_pointer_address(pointer_address(p))))

axiom __anonstruct_L_2_parenttag_bottom :
 parenttag(__anonstruct_L_2_tag, bottom_tag)

axiom __anonstruct_L_2_tags :
 (forall x:__anonstruct_L_2 pointer.
  (forall __anonstruct_L_2_tag_table:__anonstruct_L_2 tag_table.
   instanceof(__anonstruct_L_2_tag_table, x, __anonstruct_L_2_tag)))

logic __anonstruct_M_1_tag:  -> __anonstruct_M_1 tag_id

axiom __anonstruct_M_1_int : (int_of_tag(__anonstruct_M_1_tag) = (1))

logic __anonstruct_M_1_of_pointer_address: unit pointer -> __anonstruct_M_1 pointer

axiom __anonstruct_M_1_of_pointer_address_of_pointer_addr :
 (forall p:__anonstruct_M_1 pointer.
  (p = __anonstruct_M_1_of_pointer_address(pointer_address(p))))

axiom __anonstruct_M_1_parenttag_bottom :
 parenttag(__anonstruct_M_1_tag, bottom_tag)

axiom __anonstruct_M_1_tags :
 (forall x:__anonstruct_M_1 pointer.
  (forall __anonstruct_M_1_tag_table:__anonstruct_M_1 tag_table.
   instanceof(__anonstruct_M_1_tag_table, x, __anonstruct_M_1_tag)))

logic __anonstruct_Vel_Lin_5_tag:  -> __anonstruct_Vel_Lin_5 tag_id

axiom __anonstruct_Vel_Lin_5_int :
 (int_of_tag(__anonstruct_Vel_Lin_5_tag) = (1))

logic __anonstruct_Vel_Lin_5_of_pointer_address: unit pointer -> __anonstruct_Vel_Lin_5 pointer

axiom __anonstruct_Vel_Lin_5_of_pointer_address_of_pointer_addr :
 (forall p:__anonstruct_Vel_Lin_5 pointer.
  (p = __anonstruct_Vel_Lin_5_of_pointer_address(pointer_address(p))))

axiom __anonstruct_Vel_Lin_5_parenttag_bottom :
 parenttag(__anonstruct_Vel_Lin_5_tag, bottom_tag)

axiom __anonstruct_Vel_Lin_5_tags :
 (forall x:__anonstruct_Vel_Lin_5 pointer.
  (forall __anonstruct_Vel_Lin_5_tag_table:__anonstruct_Vel_Lin_5 tag_table.
   instanceof(__anonstruct_Vel_Lin_5_tag_table, x,
   __anonstruct_Vel_Lin_5_tag)))

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16, y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_extensionality :
 (forall x:int16.
  (forall y:int16[eq_int(integer_of_int16(x), integer_of_int16(y))].
   (eq_int(integer_of_int16(x), integer_of_int16(y)) -> (x = y))))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct___anonstruct_COMPVETOR_3(p:__anonstruct_COMPVETOR_3 pointer,
 a:int,
 __anonstruct_COMPVETOR_3_alloc_table:__anonstruct_COMPVETOR_3 alloc_table) =
 (offset_min(__anonstruct_COMPVETOR_3_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_Cmd_6(p:__anonstruct_Cmd_6 pointer,
 a:int, __anonstruct_Cmd_6_alloc_table:__anonstruct_Cmd_6 alloc_table) =
 (offset_min(__anonstruct_Cmd_6_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_Escala_4(p:__anonstruct_Escala_4 pointer,
 a:int,
 __anonstruct_Escala_4_alloc_table:__anonstruct_Escala_4 alloc_table) =
 (offset_min(__anonstruct_Escala_4_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_L_2(p:__anonstruct_L_2 pointer,
 a:int, __anonstruct_L_2_alloc_table:__anonstruct_L_2 alloc_table) =
 (offset_min(__anonstruct_L_2_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_M_1(p:__anonstruct_M_1 pointer,
 a:int, __anonstruct_M_1_alloc_table:__anonstruct_M_1 alloc_table) =
 (offset_min(__anonstruct_M_1_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_Vel_Lin_5(p:__anonstruct_Vel_Lin_5 pointer,
 a:int,
 __anonstruct_Vel_Lin_5_alloc_table:__anonstruct_Vel_Lin_5 alloc_table) =
 (offset_min(__anonstruct_Vel_Lin_5_alloc_table, p) <= a)

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of___anonstruct_COMPVETOR_3_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(__anonstruct_COMPVETOR_3_of_pointer_address(p))))

axiom pointer_addr_of___anonstruct_Cmd_6_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(__anonstruct_Cmd_6_of_pointer_address(p))))

axiom pointer_addr_of___anonstruct_Escala_4_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(__anonstruct_Escala_4_of_pointer_address(p))))

axiom pointer_addr_of___anonstruct_L_2_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(__anonstruct_L_2_of_pointer_address(p))))

axiom pointer_addr_of___anonstruct_M_1_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(__anonstruct_M_1_of_pointer_address(p))))

axiom pointer_addr_of___anonstruct_Vel_Lin_5_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(__anonstruct_Vel_Lin_5_of_pointer_address(p))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct___anonstruct_COMPVETOR_3(p:__anonstruct_COMPVETOR_3 pointer,
 b:int,
 __anonstruct_COMPVETOR_3_alloc_table:__anonstruct_COMPVETOR_3 alloc_table) =
 (offset_max(__anonstruct_COMPVETOR_3_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_Cmd_6(p:__anonstruct_Cmd_6 pointer,
 b:int, __anonstruct_Cmd_6_alloc_table:__anonstruct_Cmd_6 alloc_table) =
 (offset_max(__anonstruct_Cmd_6_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_Escala_4(p:__anonstruct_Escala_4 pointer,
 b:int,
 __anonstruct_Escala_4_alloc_table:__anonstruct_Escala_4 alloc_table) =
 (offset_max(__anonstruct_Escala_4_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_L_2(p:__anonstruct_L_2 pointer,
 b:int, __anonstruct_L_2_alloc_table:__anonstruct_L_2 alloc_table) =
 (offset_max(__anonstruct_L_2_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_M_1(p:__anonstruct_M_1 pointer,
 b:int, __anonstruct_M_1_alloc_table:__anonstruct_M_1 alloc_table) =
 (offset_max(__anonstruct_M_1_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_Vel_Lin_5(p:__anonstruct_Vel_Lin_5 pointer,
 b:int,
 __anonstruct_Vel_Lin_5_alloc_table:__anonstruct_Vel_Lin_5 alloc_table) =
 (offset_max(__anonstruct_Vel_Lin_5_alloc_table, p) >= b)

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root___anonstruct_COMPVETOR_3(p:__anonstruct_COMPVETOR_3 pointer,
 a:int, b:int,
 __anonstruct_COMPVETOR_3_alloc_table:__anonstruct_COMPVETOR_3 alloc_table) =
 ((offset_min(__anonstruct_COMPVETOR_3_alloc_table, p) = a)
 and (offset_max(__anonstruct_COMPVETOR_3_alloc_table, p) = b))

predicate strict_valid_root___anonstruct_Cmd_6(p:__anonstruct_Cmd_6 pointer,
 a:int, b:int,
 __anonstruct_Cmd_6_alloc_table:__anonstruct_Cmd_6 alloc_table) =
 ((offset_min(__anonstruct_Cmd_6_alloc_table, p) = a)
 and (offset_max(__anonstruct_Cmd_6_alloc_table, p) = b))

predicate strict_valid_root___anonstruct_Escala_4(p:__anonstruct_Escala_4 pointer,
 a:int, b:int,
 __anonstruct_Escala_4_alloc_table:__anonstruct_Escala_4 alloc_table) =
 ((offset_min(__anonstruct_Escala_4_alloc_table, p) = a)
 and (offset_max(__anonstruct_Escala_4_alloc_table, p) = b))

predicate strict_valid_root___anonstruct_L_2(p:__anonstruct_L_2 pointer,
 a:int, b:int, __anonstruct_L_2_alloc_table:__anonstruct_L_2 alloc_table) =
 ((offset_min(__anonstruct_L_2_alloc_table, p) = a)
 and (offset_max(__anonstruct_L_2_alloc_table, p) = b))

predicate strict_valid_root___anonstruct_M_1(p:__anonstruct_M_1 pointer,
 a:int, b:int, __anonstruct_M_1_alloc_table:__anonstruct_M_1 alloc_table) =
 ((offset_min(__anonstruct_M_1_alloc_table, p) = a)
 and (offset_max(__anonstruct_M_1_alloc_table, p) = b))

predicate strict_valid_root___anonstruct_Vel_Lin_5(p:__anonstruct_Vel_Lin_5 pointer,
 a:int, b:int,
 __anonstruct_Vel_Lin_5_alloc_table:__anonstruct_Vel_Lin_5 alloc_table) =
 ((offset_min(__anonstruct_Vel_Lin_5_alloc_table, p) = a)
 and (offset_max(__anonstruct_Vel_Lin_5_alloc_table, p) = b))

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_COMPVETOR_3(p:__anonstruct_COMPVETOR_3 pointer,
 a:int, b:int,
 __anonstruct_COMPVETOR_3_alloc_table:__anonstruct_COMPVETOR_3 alloc_table) =
 ((offset_min(__anonstruct_COMPVETOR_3_alloc_table, p) = a)
 and (offset_max(__anonstruct_COMPVETOR_3_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_Cmd_6(p:__anonstruct_Cmd_6 pointer,
 a:int, b:int,
 __anonstruct_Cmd_6_alloc_table:__anonstruct_Cmd_6 alloc_table) =
 ((offset_min(__anonstruct_Cmd_6_alloc_table, p) = a)
 and (offset_max(__anonstruct_Cmd_6_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_Escala_4(p:__anonstruct_Escala_4 pointer,
 a:int, b:int,
 __anonstruct_Escala_4_alloc_table:__anonstruct_Escala_4 alloc_table) =
 ((offset_min(__anonstruct_Escala_4_alloc_table, p) = a)
 and (offset_max(__anonstruct_Escala_4_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_L_2(p:__anonstruct_L_2 pointer,
 a:int, b:int, __anonstruct_L_2_alloc_table:__anonstruct_L_2 alloc_table) =
 ((offset_min(__anonstruct_L_2_alloc_table, p) = a)
 and (offset_max(__anonstruct_L_2_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_M_1(p:__anonstruct_M_1 pointer,
 a:int, b:int, __anonstruct_M_1_alloc_table:__anonstruct_M_1 alloc_table) =
 ((offset_min(__anonstruct_M_1_alloc_table, p) = a)
 and (offset_max(__anonstruct_M_1_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_Vel_Lin_5(p:__anonstruct_Vel_Lin_5 pointer,
 a:int, b:int,
 __anonstruct_Vel_Lin_5_alloc_table:__anonstruct_Vel_Lin_5 alloc_table) =
 ((offset_min(__anonstruct_Vel_Lin_5_alloc_table, p) = a)
 and (offset_max(__anonstruct_Vel_Lin_5_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_D(__anonstruct_COMPVETOR_3_D_3_alloc_table:__anonstruct_COMPVETOR_3 alloc_table) =
 (le_int(offset_min(__anonstruct_COMPVETOR_3_D_3_alloc_table, D), (0))
 and ge_int(offset_max(__anonstruct_COMPVETOR_3_D_3_alloc_table, D), (0)))

predicate valid_L(__anonstruct_L_2_L_2_alloc_table:__anonstruct_L_2 alloc_table) =
 (le_int(offset_min(__anonstruct_L_2_L_2_alloc_table, L), (0))
 and ge_int(offset_max(__anonstruct_L_2_L_2_alloc_table, L), (0)))

predicate valid_M(__anonstruct_M_1_M_1_alloc_table:__anonstruct_M_1 alloc_table) =
 (le_int(offset_min(__anonstruct_M_1_M_1_alloc_table, M), (0))
 and ge_int(offset_max(__anonstruct_M_1_M_1_alloc_table, M), (0)))

predicate valid_Vel_Lin(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table:__anonstruct_Vel_Lin_5 alloc_table) =
 (le_int(offset_min(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table, Vel_Lin),
  (0))
 and ge_int(offset_max(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table, Vel_Lin),
     (0)))

predicate valid_root___anonstruct_COMPVETOR_3(p:__anonstruct_COMPVETOR_3 pointer,
 a:int, b:int,
 __anonstruct_COMPVETOR_3_alloc_table:__anonstruct_COMPVETOR_3 alloc_table) =
 ((offset_min(__anonstruct_COMPVETOR_3_alloc_table, p) <= a)
 and (offset_max(__anonstruct_COMPVETOR_3_alloc_table, p) >= b))

predicate valid_root___anonstruct_Cmd_6(p:__anonstruct_Cmd_6 pointer, a:int,
 b:int, __anonstruct_Cmd_6_alloc_table:__anonstruct_Cmd_6 alloc_table) =
 ((offset_min(__anonstruct_Cmd_6_alloc_table, p) <= a)
 and (offset_max(__anonstruct_Cmd_6_alloc_table, p) >= b))

predicate valid_root___anonstruct_Escala_4(p:__anonstruct_Escala_4 pointer,
 a:int, b:int,
 __anonstruct_Escala_4_alloc_table:__anonstruct_Escala_4 alloc_table) =
 ((offset_min(__anonstruct_Escala_4_alloc_table, p) <= a)
 and (offset_max(__anonstruct_Escala_4_alloc_table, p) >= b))

predicate valid_root___anonstruct_L_2(p:__anonstruct_L_2 pointer, a:int,
 b:int, __anonstruct_L_2_alloc_table:__anonstruct_L_2 alloc_table) =
 ((offset_min(__anonstruct_L_2_alloc_table, p) <= a)
 and (offset_max(__anonstruct_L_2_alloc_table, p) >= b))

predicate valid_root___anonstruct_M_1(p:__anonstruct_M_1 pointer, a:int,
 b:int, __anonstruct_M_1_alloc_table:__anonstruct_M_1 alloc_table) =
 ((offset_min(__anonstruct_M_1_alloc_table, p) <= a)
 and (offset_max(__anonstruct_M_1_alloc_table, p) >= b))

predicate valid_root___anonstruct_Vel_Lin_5(p:__anonstruct_Vel_Lin_5 pointer,
 a:int, b:int,
 __anonstruct_Vel_Lin_5_alloc_table:__anonstruct_Vel_Lin_5 alloc_table) =
 ((offset_min(__anonstruct_Vel_Lin_5_alloc_table, p) <= a)
 and (offset_max(__anonstruct_Vel_Lin_5_alloc_table, p) >= b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct___anonstruct_COMPVETOR_3(p:__anonstruct_COMPVETOR_3 pointer,
 a:int, b:int,
 __anonstruct_COMPVETOR_3_alloc_table:__anonstruct_COMPVETOR_3 alloc_table) =
 ((offset_min(__anonstruct_COMPVETOR_3_alloc_table, p) <= a)
 and (offset_max(__anonstruct_COMPVETOR_3_alloc_table, p) >= b))

predicate valid_struct___anonstruct_Cmd_6(p:__anonstruct_Cmd_6 pointer,
 a:int, b:int,
 __anonstruct_Cmd_6_alloc_table:__anonstruct_Cmd_6 alloc_table) =
 ((offset_min(__anonstruct_Cmd_6_alloc_table, p) <= a)
 and (offset_max(__anonstruct_Cmd_6_alloc_table, p) >= b))

predicate valid_struct___anonstruct_Escala_4(p:__anonstruct_Escala_4 pointer,
 a:int, b:int,
 __anonstruct_Escala_4_alloc_table:__anonstruct_Escala_4 alloc_table) =
 ((offset_min(__anonstruct_Escala_4_alloc_table, p) <= a)
 and (offset_max(__anonstruct_Escala_4_alloc_table, p) >= b))

predicate valid_struct___anonstruct_L_2(p:__anonstruct_L_2 pointer, a:int,
 b:int, __anonstruct_L_2_alloc_table:__anonstruct_L_2 alloc_table) =
 ((offset_min(__anonstruct_L_2_alloc_table, p) <= a)
 and (offset_max(__anonstruct_L_2_alloc_table, p) >= b))

predicate valid_struct___anonstruct_M_1(p:__anonstruct_M_1 pointer, a:int,
 b:int, __anonstruct_M_1_alloc_table:__anonstruct_M_1 alloc_table) =
 ((offset_min(__anonstruct_M_1_alloc_table, p) <= a)
 and (offset_max(__anonstruct_M_1_alloc_table, p) >= b))

predicate valid_struct___anonstruct_Vel_Lin_5(p:__anonstruct_Vel_Lin_5 pointer,
 a:int, b:int,
 __anonstruct_Vel_Lin_5_alloc_table:__anonstruct_Vel_Lin_5 alloc_table) =
 ((offset_min(__anonstruct_Vel_Lin_5_alloc_table, p) <= a)
 and (offset_max(__anonstruct_Vel_Lin_5_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

parameter Grav : single ref

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

parameter Nav_G : single ref

exception Return_label_exc of unit

parameter __anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table :
 __anonstruct_Vel_Lin_5 alloc_table ref

parameter __anonstruct_M_1_M_1_alloc_table : __anonstruct_M_1 alloc_table ref

parameter __anonstruct_L_2_L_2_alloc_table : __anonstruct_L_2 alloc_table ref

parameter __anonstruct_Escala_4_Escala_4_alloc_table :
 __anonstruct_Escala_4 alloc_table ref

parameter __anonstruct_Cmd_6_Cmd_6_alloc_table :
 __anonstruct_Cmd_6 alloc_table ref

parameter __anonstruct_COMPVETOR_3_D_3_alloc_table :
 __anonstruct_COMPVETOR_3 alloc_table ref

parameter __anonstruct_Cmd_6_P0_Z_Cmd_6 :
 (__anonstruct_Cmd_6, double) memory ref

parameter __anonstruct_Cmd_6_P0_Y_Cmd_6 :
 (__anonstruct_Cmd_6, double) memory ref

parameter __anonstruct_Cmd_6_P0_X_Cmd_6 :
 (__anonstruct_Cmd_6, double) memory ref

parameter __anonstruct_Vel_Lin_5_Fz_Vel_Lin_5 :
 (__anonstruct_Vel_Lin_5, int16) memory ref

parameter __anonstruct_Vel_Lin_5_Fy_Vel_Lin_5 :
 (__anonstruct_Vel_Lin_5, int16) memory ref

parameter __anonstruct_Vel_Lin_5_Fx_Vel_Lin_5 :
 (__anonstruct_Vel_Lin_5, int16) memory ref

parameter __anonstruct_Escala_4_Mz_Escala_4 :
 (__anonstruct_Escala_4, single) memory ref

parameter __anonstruct_Escala_4_My_0_Escala_4 :
 (__anonstruct_Escala_4, single) memory ref

parameter __anonstruct_Escala_4_Mx_Escala_4 :
 (__anonstruct_Escala_4, single) memory ref

parameter __anonstruct_COMPVETOR_3_y_0_D_3 :
 (__anonstruct_COMPVETOR_3, double) memory ref

parameter __anonstruct_COMPVETOR_3_x_0_D_3 :
 (__anonstruct_COMPVETOR_3, double) memory ref

parameter __anonstruct_L_2_My_L_2 : (__anonstruct_L_2, single) memory ref

parameter __anonstruct_L_2_Mxz_L_2 : (__anonstruct_L_2, single) memory ref

parameter __anonstruct_L_2_Myy_L_2 : (__anonstruct_L_2, single) memory ref

parameter __anonstruct_L_2_Mxx_L_2 : (__anonstruct_L_2, single) memory ref

parameter __anonstruct_L_2_M1r_L_2 : (__anonstruct_L_2, single) memory ref

parameter __anonstruct_L_2_M1z_L_2 : (__anonstruct_L_2, single) memory ref

parameter __anonstruct_L_2_M1y_L_2 : (__anonstruct_L_2, single) memory ref

parameter __anonstruct_L_2_M1x_L_2 : (__anonstruct_L_2, single) memory ref

parameter __anonstruct_L_2_Fiyz_L_2 : (__anonstruct_L_2, single) memory ref

parameter __anonstruct_L_2_Fixz_L_2 : (__anonstruct_L_2, single) memory ref

parameter __anonstruct_L_2_Fixy_L_2 : (__anonstruct_L_2, single) memory ref

parameter __anonstruct_M_1_r1_M_1 : (__anonstruct_M_1, single) memory ref

parameter __anonstruct_M_1_yy_M_1 : (__anonstruct_M_1, single) memory ref

parameter __anonstruct_M_1_y_M_1 : (__anonstruct_M_1, single) memory ref

parameter __anonstruct_M_1_xz_M_1 : (__anonstruct_M_1, single) memory ref

parameter __anonstruct_M_1_xx_M_1 : (__anonstruct_M_1, single) memory ref

parameter __anonstruct_M_1_z1_M_1 : (__anonstruct_M_1, single) memory ref

parameter __anonstruct_M_1_y1_M_1 : (__anonstruct_M_1, single) memory ref

parameter __anonstruct_M_1_x1_M_1 : (__anonstruct_M_1, single) memory ref

parameter Test :
 tt:unit ->
  { } unit
  reads Grav,Nav_G,__anonstruct_COMPVETOR_3_D_3_alloc_table,__anonstruct_COMPVETOR_3_x_0_D_3,__anonstruct_COMPVETOR_3_y_0_D_3,__anonstruct_Cmd_6_Cmd_6_alloc_table,__anonstruct_Cmd_6_P0_X_Cmd_6,__anonstruct_Cmd_6_P0_Y_Cmd_6,__anonstruct_Cmd_6_P0_Z_Cmd_6,__anonstruct_Escala_4_Escala_4_alloc_table,__anonstruct_Escala_4_Mx_Escala_4,__anonstruct_Escala_4_My_0_Escala_4,__anonstruct_Escala_4_Mz_Escala_4,__anonstruct_L_2_Fixy_L_2,__anonstruct_L_2_Fixz_L_2,__anonstruct_L_2_Fiyz_L_2,__anonstruct_L_2_L_2_alloc_table,__anonstruct_L_2_M1r_L_2,__anonstruct_L_2_M1x_L_2,__anonstruct_L_2_M1y_L_2,__anonstruct_L_2_M1z_L_2,__anonstruct_L_2_Mxx_L_2,__anonstruct_L_2_Mxz_L_2,__anonstruct_L_2_My_L_2,__anonstruct_L_2_Myy_L_2,__anonstruct_M_1_M_1_alloc_table,__anonstruct_M_1_r1_M_1,__anonstruct_M_1_x1_M_1,__anonstruct_M_1_xx_M_1,__anonstruct_M_1_xz_M_1,__anonstruct_M_1_y1_M_1,__anonstruct_M_1_y_M_1,__anonstruct_M_1_yy_M_1,__anonstruct_M_1_z1_M_1,__anonstruct_Vel_Lin_5_Fx_Vel_Lin_5,__anonstruct_Vel_Lin_5_Fy_Vel_Lin_5,__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5,__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table
  writes Grav,Nav_G,__anonstruct_COMPVETOR_3_x_0_D_3,__anonstruct_COMPVETOR_3_y_0_D_3,__anonstruct_M_1_r1_M_1,__anonstruct_M_1_x1_M_1,__anonstruct_M_1_xx_M_1,__anonstruct_M_1_xz_M_1,__anonstruct_M_1_y1_M_1,__anonstruct_M_1_y_M_1,__anonstruct_M_1_yy_M_1,__anonstruct_M_1_z1_M_1
  { (JC_<somenum>:
    ((JC_<somenum>: valid_Vel_Lin(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table))
    and ((JC_<somenum>: valid_D(__anonstruct_COMPVETOR_3_D_3_alloc_table))
        and ((JC_<somenum>: valid_L(__anonstruct_L_2_L_2_alloc_table))
            and (JC_<somenum>: valid_M(__anonstruct_M_1_M_1_alloc_table)))))) }

parameter Test_requires :
 tt:unit ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      le_real(abs_real(sub_real(double_value(select(__anonstruct_Cmd_6_P0_X_Cmd_6,
                                             Cmd)),
                       6.378291E+3)),
      0x1p-20))
     and ((JC_<somenum>:
          le_real(abs_real(sub_real(double_value(select(__anonstruct_Cmd_6_P0_Y_Cmd_6,
                                                 Cmd)),
                           neg_real(1.659630E+0))),
          0x1p-20))
         and ((JC_<somenum>:
              le_real(abs_real(sub_real(double_value(select(__anonstruct_Cmd_6_P0_Z_Cmd_6,
                                                     Cmd)),
                               0.4758900)),
              0x1p-20))
             and ((JC_<somenum>:
                  le_real(abs_real(sub_real(single_value(select(__anonstruct_Escala_4_Mx_Escala_4,
                                                         Escala)),
                                   0.03)),
                  0x1p-20))
                 and ((JC_<somenum>:
                      le_real(abs_real(sub_real(single_value(select(__anonstruct_Escala_4_My_0_Escala_4,
                                                             Escala)),
                                       0.03)),
                      0x1p-20))
                     and ((JC_<somenum>:
                          le_real(abs_real(sub_real(single_value(select(__anonstruct_Escala_4_Mz_Escala_4,
                                                                 Escala)),
                                           0.03)),
                          0x1p-20))
                         and ((JC_<somenum>:
                              le_int((5),
                              integer_of_int16(select(__anonstruct_Vel_Lin_5_Fx_Vel_Lin_5,
                                               Vel_Lin))))
                             and ((JC_<somenum>:
                                  le_int(integer_of_int16(select(__anonstruct_Vel_Lin_5_Fx_Vel_Lin_5,
                                                          Vel_Lin)),
                                  (29)))
                                 and ((JC_<somenum>:
                                      le_int(neg_int((1)),
                                      integer_of_int16(select(__anonstruct_Vel_Lin_5_Fy_Vel_Lin_5,
                                                       Vel_Lin))))
                                     and ((JC_<somenum>:
                                          le_int(integer_of_int16(select(__anonstruct_Vel_Lin_5_Fy_Vel_Lin_5,
                                                                  Vel_Lin)),
                                          (1)))
                                         and ((JC_<somenum>:
                                              le_int((0),
                                              integer_of_int16(select(__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5,
                                                               Vel_Lin))))
                                             and ((JC_<somenum>:
                                                  le_int(integer_of_int16(
                                                         select(__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5,
                                                         Vel_Lin)),
                                                  (12)))
                                                 and ((JC_<somenum>:
                                                      le_real(abs_real(
                                                              single_value(
                                                              select(__anonstruct_L_2_M1x_L_2,
                                                              L))),
                                                      0x1p-20))
                                                     and ((JC_<somenum>:
                                                          le_real(abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_M1y_L_2,
                                                                  L))),
                                                          0x1p-20))
                                                         and ((JC_<somenum>:
                                                              le_real(
                                                              abs_real(
                                                              single_value(
                                                              select(__anonstruct_L_2_M1z_L_2,
                                                              L))), 0x1p-20))
                                                             and ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Mxx_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Mxz_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Myy_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_My_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_M1r_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Fixy_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Fixz_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Fiyz_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 (JC_<somenum>:
                                                                 le_real(
                                                                 abs_real(
                                                                 single_value(Wae)),
                                                                 0x1p-20)))))))))))))))))))))))))
    and ((JC_<somenum>: valid_Vel_Lin(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table))
        and ((JC_<somenum>: valid_D(__anonstruct_COMPVETOR_3_D_3_alloc_table))
            and ((JC_<somenum>: valid_L(__anonstruct_L_2_L_2_alloc_table))
                and (JC_<somenum>: valid_M(__anonstruct_M_1_M_1_alloc_table)))))))}
  unit
  reads Grav,Nav_G,__anonstruct_COMPVETOR_3_D_3_alloc_table,__anonstruct_COMPVETOR_3_x_0_D_3,__anonstruct_COMPVETOR_3_y_0_D_3,__anonstruct_Cmd_6_Cmd_6_alloc_table,__anonstruct_Cmd_6_P0_X_Cmd_6,__anonstruct_Cmd_6_P0_Y_Cmd_6,__anonstruct_Cmd_6_P0_Z_Cmd_6,__anonstruct_Escala_4_Escala_4_alloc_table,__anonstruct_Escala_4_Mx_Escala_4,__anonstruct_Escala_4_My_0_Escala_4,__anonstruct_Escala_4_Mz_Escala_4,__anonstruct_L_2_Fixy_L_2,__anonstruct_L_2_Fixz_L_2,__anonstruct_L_2_Fiyz_L_2,__anonstruct_L_2_L_2_alloc_table,__anonstruct_L_2_M1r_L_2,__anonstruct_L_2_M1x_L_2,__anonstruct_L_2_M1y_L_2,__anonstruct_L_2_M1z_L_2,__anonstruct_L_2_Mxx_L_2,__anonstruct_L_2_Mxz_L_2,__anonstruct_L_2_My_L_2,__anonstruct_L_2_Myy_L_2,__anonstruct_M_1_M_1_alloc_table,__anonstruct_M_1_r1_M_1,__anonstruct_M_1_x1_M_1,__anonstruct_M_1_xx_M_1,__anonstruct_M_1_xz_M_1,__anonstruct_M_1_y1_M_1,__anonstruct_M_1_y_M_1,__anonstruct_M_1_yy_M_1,__anonstruct_M_1_z1_M_1,__anonstruct_Vel_Lin_5_Fx_Vel_Lin_5,__anonstruct_Vel_Lin_5_Fy_Vel_Lin_5,__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5,__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table
  writes Grav,Nav_G,__anonstruct_COMPVETOR_3_x_0_D_3,__anonstruct_COMPVETOR_3_y_0_D_3,__anonstruct_M_1_r1_M_1,__anonstruct_M_1_x1_M_1,__anonstruct_M_1_xx_M_1,__anonstruct_M_1_xz_M_1,__anonstruct_M_1_y1_M_1,__anonstruct_M_1_y_M_1,__anonstruct_M_1_yy_M_1,__anonstruct_M_1_z1_M_1
  { (JC_<somenum>:
    ((JC_<somenum>: valid_Vel_Lin(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table))
    and ((JC_<somenum>: valid_D(__anonstruct_COMPVETOR_3_D_3_alloc_table))
        and ((JC_<somenum>: valid_L(__anonstruct_L_2_L_2_alloc_table))
            and (JC_<somenum>: valid_M(__anonstruct_M_1_M_1_alloc_table)))))) }

parameter __anonstruct_COMPVETOR_3_alloc_table :
 __anonstruct_COMPVETOR_3 alloc_table ref

parameter __anonstruct_COMPVETOR_3_tag_table :
 __anonstruct_COMPVETOR_3 tag_table ref

parameter __anonstruct_Cmd_6_alloc_table : __anonstruct_Cmd_6 alloc_table ref

parameter __anonstruct_Cmd_6_tag_table : __anonstruct_Cmd_6 tag_table ref

parameter __anonstruct_Escala_4_alloc_table :
 __anonstruct_Escala_4 alloc_table ref

parameter __anonstruct_Escala_4_tag_table :
 __anonstruct_Escala_4 tag_table ref

parameter __anonstruct_L_2_alloc_table : __anonstruct_L_2 alloc_table ref

parameter __anonstruct_L_2_tag_table : __anonstruct_L_2 tag_table ref

parameter __anonstruct_M_1_alloc_table : __anonstruct_M_1 alloc_table ref

parameter __anonstruct_M_1_tag_table : __anonstruct_M_1 tag_table ref

parameter __anonstruct_Vel_Lin_5_alloc_table :
 __anonstruct_Vel_Lin_5 alloc_table ref

parameter __anonstruct_Vel_Lin_5_tag_table :
 __anonstruct_Vel_Lin_5 tag_table ref

parameter alloc_struct___anonstruct_COMPVETOR_3 :
 n:int ->
  __anonstruct_COMPVETOR_3_alloc_table:__anonstruct_COMPVETOR_3 alloc_table ref ->
   __anonstruct_COMPVETOR_3_tag_table:__anonstruct_COMPVETOR_3 tag_table ref ->
    { } __anonstruct_COMPVETOR_3 pointer
    writes __anonstruct_COMPVETOR_3_alloc_table,__anonstruct_COMPVETOR_3_tag_table
    { (strict_valid_struct___anonstruct_COMPVETOR_3(result, (0),
       sub_int(n, (1)), __anonstruct_COMPVETOR_3_alloc_table)
      and (alloc_extends(__anonstruct_COMPVETOR_3_alloc_table@,
           __anonstruct_COMPVETOR_3_alloc_table)
          and (alloc_fresh(__anonstruct_COMPVETOR_3_alloc_table@, result, n)
              and instanceof(__anonstruct_COMPVETOR_3_tag_table, result,
                  __anonstruct_COMPVETOR_3_tag)))) }

parameter alloc_struct___anonstruct_COMPVETOR_3_requires :
 n:int ->
  __anonstruct_COMPVETOR_3_alloc_table:__anonstruct_COMPVETOR_3 alloc_table ref ->
   __anonstruct_COMPVETOR_3_tag_table:__anonstruct_COMPVETOR_3 tag_table ref ->
    { ge_int(n, (0))} __anonstruct_COMPVETOR_3 pointer
    writes __anonstruct_COMPVETOR_3_alloc_table,__anonstruct_COMPVETOR_3_tag_table
    { (strict_valid_struct___anonstruct_COMPVETOR_3(result, (0),
       sub_int(n, (1)), __anonstruct_COMPVETOR_3_alloc_table)
      and (alloc_extends(__anonstruct_COMPVETOR_3_alloc_table@,
           __anonstruct_COMPVETOR_3_alloc_table)
          and (alloc_fresh(__anonstruct_COMPVETOR_3_alloc_table@, result, n)
              and instanceof(__anonstruct_COMPVETOR_3_tag_table, result,
                  __anonstruct_COMPVETOR_3_tag)))) }

parameter alloc_struct___anonstruct_Cmd_6 :
 n:int ->
  __anonstruct_Cmd_6_alloc_table:__anonstruct_Cmd_6 alloc_table ref ->
   __anonstruct_Cmd_6_tag_table:__anonstruct_Cmd_6 tag_table ref ->
    { } __anonstruct_Cmd_6 pointer
    writes __anonstruct_Cmd_6_alloc_table,__anonstruct_Cmd_6_tag_table
    { (strict_valid_struct___anonstruct_Cmd_6(result, (0), sub_int(n, (1)),
       __anonstruct_Cmd_6_alloc_table)
      and (alloc_extends(__anonstruct_Cmd_6_alloc_table@,
           __anonstruct_Cmd_6_alloc_table)
          and (alloc_fresh(__anonstruct_Cmd_6_alloc_table@, result, n)
              and instanceof(__anonstruct_Cmd_6_tag_table, result,
                  __anonstruct_Cmd_6_tag)))) }

parameter alloc_struct___anonstruct_Cmd_6_requires :
 n:int ->
  __anonstruct_Cmd_6_alloc_table:__anonstruct_Cmd_6 alloc_table ref ->
   __anonstruct_Cmd_6_tag_table:__anonstruct_Cmd_6 tag_table ref ->
    { ge_int(n, (0))} __anonstruct_Cmd_6 pointer
    writes __anonstruct_Cmd_6_alloc_table,__anonstruct_Cmd_6_tag_table
    { (strict_valid_struct___anonstruct_Cmd_6(result, (0), sub_int(n, (1)),
       __anonstruct_Cmd_6_alloc_table)
      and (alloc_extends(__anonstruct_Cmd_6_alloc_table@,
           __anonstruct_Cmd_6_alloc_table)
          and (alloc_fresh(__anonstruct_Cmd_6_alloc_table@, result, n)
              and instanceof(__anonstruct_Cmd_6_tag_table, result,
                  __anonstruct_Cmd_6_tag)))) }

parameter alloc_struct___anonstruct_Escala_4 :
 n:int ->
  __anonstruct_Escala_4_alloc_table:__anonstruct_Escala_4 alloc_table ref ->
   __anonstruct_Escala_4_tag_table:__anonstruct_Escala_4 tag_table ref ->
    { } __anonstruct_Escala_4 pointer
    writes __anonstruct_Escala_4_alloc_table,__anonstruct_Escala_4_tag_table
    { (strict_valid_struct___anonstruct_Escala_4(result, (0),
       sub_int(n, (1)), __anonstruct_Escala_4_alloc_table)
      and (alloc_extends(__anonstruct_Escala_4_alloc_table@,
           __anonstruct_Escala_4_alloc_table)
          and (alloc_fresh(__anonstruct_Escala_4_alloc_table@, result, n)
              and instanceof(__anonstruct_Escala_4_tag_table, result,
                  __anonstruct_Escala_4_tag)))) }

parameter alloc_struct___anonstruct_Escala_4_requires :
 n:int ->
  __anonstruct_Escala_4_alloc_table:__anonstruct_Escala_4 alloc_table ref ->
   __anonstruct_Escala_4_tag_table:__anonstruct_Escala_4 tag_table ref ->
    { ge_int(n, (0))} __anonstruct_Escala_4 pointer
    writes __anonstruct_Escala_4_alloc_table,__anonstruct_Escala_4_tag_table
    { (strict_valid_struct___anonstruct_Escala_4(result, (0),
       sub_int(n, (1)), __anonstruct_Escala_4_alloc_table)
      and (alloc_extends(__anonstruct_Escala_4_alloc_table@,
           __anonstruct_Escala_4_alloc_table)
          and (alloc_fresh(__anonstruct_Escala_4_alloc_table@, result, n)
              and instanceof(__anonstruct_Escala_4_tag_table, result,
                  __anonstruct_Escala_4_tag)))) }

parameter alloc_struct___anonstruct_L_2 :
 n:int ->
  __anonstruct_L_2_alloc_table:__anonstruct_L_2 alloc_table ref ->
   __anonstruct_L_2_tag_table:__anonstruct_L_2 tag_table ref ->
    { } __anonstruct_L_2 pointer
    writes __anonstruct_L_2_alloc_table,__anonstruct_L_2_tag_table
    { (strict_valid_struct___anonstruct_L_2(result, (0), sub_int(n, (1)),
       __anonstruct_L_2_alloc_table)
      and (alloc_extends(__anonstruct_L_2_alloc_table@,
           __anonstruct_L_2_alloc_table)
          and (alloc_fresh(__anonstruct_L_2_alloc_table@, result, n)
              and instanceof(__anonstruct_L_2_tag_table, result,
                  __anonstruct_L_2_tag)))) }

parameter alloc_struct___anonstruct_L_2_requires :
 n:int ->
  __anonstruct_L_2_alloc_table:__anonstruct_L_2 alloc_table ref ->
   __anonstruct_L_2_tag_table:__anonstruct_L_2 tag_table ref ->
    { ge_int(n, (0))} __anonstruct_L_2 pointer
    writes __anonstruct_L_2_alloc_table,__anonstruct_L_2_tag_table
    { (strict_valid_struct___anonstruct_L_2(result, (0), sub_int(n, (1)),
       __anonstruct_L_2_alloc_table)
      and (alloc_extends(__anonstruct_L_2_alloc_table@,
           __anonstruct_L_2_alloc_table)
          and (alloc_fresh(__anonstruct_L_2_alloc_table@, result, n)
              and instanceof(__anonstruct_L_2_tag_table, result,
                  __anonstruct_L_2_tag)))) }

parameter alloc_struct___anonstruct_M_1 :
 n:int ->
  __anonstruct_M_1_alloc_table:__anonstruct_M_1 alloc_table ref ->
   __anonstruct_M_1_tag_table:__anonstruct_M_1 tag_table ref ->
    { } __anonstruct_M_1 pointer
    writes __anonstruct_M_1_alloc_table,__anonstruct_M_1_tag_table
    { (strict_valid_struct___anonstruct_M_1(result, (0), sub_int(n, (1)),
       __anonstruct_M_1_alloc_table)
      and (alloc_extends(__anonstruct_M_1_alloc_table@,
           __anonstruct_M_1_alloc_table)
          and (alloc_fresh(__anonstruct_M_1_alloc_table@, result, n)
              and instanceof(__anonstruct_M_1_tag_table, result,
                  __anonstruct_M_1_tag)))) }

parameter alloc_struct___anonstruct_M_1_requires :
 n:int ->
  __anonstruct_M_1_alloc_table:__anonstruct_M_1 alloc_table ref ->
   __anonstruct_M_1_tag_table:__anonstruct_M_1 tag_table ref ->
    { ge_int(n, (0))} __anonstruct_M_1 pointer
    writes __anonstruct_M_1_alloc_table,__anonstruct_M_1_tag_table
    { (strict_valid_struct___anonstruct_M_1(result, (0), sub_int(n, (1)),
       __anonstruct_M_1_alloc_table)
      and (alloc_extends(__anonstruct_M_1_alloc_table@,
           __anonstruct_M_1_alloc_table)
          and (alloc_fresh(__anonstruct_M_1_alloc_table@, result, n)
              and instanceof(__anonstruct_M_1_tag_table, result,
                  __anonstruct_M_1_tag)))) }

parameter alloc_struct___anonstruct_Vel_Lin_5 :
 n:int ->
  __anonstruct_Vel_Lin_5_alloc_table:__anonstruct_Vel_Lin_5 alloc_table ref ->
   __anonstruct_Vel_Lin_5_tag_table:__anonstruct_Vel_Lin_5 tag_table ref ->
    { } __anonstruct_Vel_Lin_5 pointer
    writes __anonstruct_Vel_Lin_5_alloc_table,__anonstruct_Vel_Lin_5_tag_table
    { (strict_valid_struct___anonstruct_Vel_Lin_5(result, (0),
       sub_int(n, (1)), __anonstruct_Vel_Lin_5_alloc_table)
      and (alloc_extends(__anonstruct_Vel_Lin_5_alloc_table@,
           __anonstruct_Vel_Lin_5_alloc_table)
          and (alloc_fresh(__anonstruct_Vel_Lin_5_alloc_table@, result, n)
              and instanceof(__anonstruct_Vel_Lin_5_tag_table, result,
                  __anonstruct_Vel_Lin_5_tag)))) }

parameter alloc_struct___anonstruct_Vel_Lin_5_requires :
 n:int ->
  __anonstruct_Vel_Lin_5_alloc_table:__anonstruct_Vel_Lin_5 alloc_table ref ->
   __anonstruct_Vel_Lin_5_tag_table:__anonstruct_Vel_Lin_5 tag_table ref ->
    { ge_int(n, (0))} __anonstruct_Vel_Lin_5 pointer
    writes __anonstruct_Vel_Lin_5_alloc_table,__anonstruct_Vel_Lin_5_tag_table
    { (strict_valid_struct___anonstruct_Vel_Lin_5(result, (0),
       sub_int(n, (1)), __anonstruct_Vel_Lin_5_alloc_table)
      and (alloc_extends(__anonstruct_Vel_Lin_5_alloc_table@,
           __anonstruct_Vel_Lin_5_alloc_table)
          and (alloc_fresh(__anonstruct_Vel_Lin_5_alloc_table@, result, n)
              and instanceof(__anonstruct_Vel_Lin_5_tag_table, result,
                  __anonstruct_Vel_Lin_5_tag)))) }

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter sqrt :
 x_0:double ->
  { } double
  reads __anonstruct_COMPVETOR_3_D_3_alloc_table,__anonstruct_L_2_L_2_alloc_table,__anonstruct_M_1_M_1_alloc_table,__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table
  { ((JC_<somenum>:
     ((JC_<somenum>: valid_Vel_Lin(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table))
     and ((JC_<somenum>: valid_D(__anonstruct_COMPVETOR_3_D_3_alloc_table))
         and ((JC_<somenum>: valid_L(__anonstruct_L_2_L_2_alloc_table))
             and (JC_<somenum>: valid_M(__anonstruct_M_1_M_1_alloc_table))))))
    and (JC_<somenum>:
        ((JC_<somenum>:
         le_real(abs_real(sub_real(double_value(result),
                          sqrt_real(double_value(x_0)))),
         0x1p-20))
        and (JC_<somenum>: gt_real(double_value(result), 0.0))))) }

parameter sqrt_requires :
 x_0:double ->
  { (JC_<somenum>:
    ((JC_<somenum>: gt_real(double_value(x_0), 0.0))
    and ((JC_<somenum>: valid_Vel_Lin(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table))
        and ((JC_<somenum>: valid_D(__anonstruct_COMPVETOR_3_D_3_alloc_table))
            and ((JC_<somenum>: valid_L(__anonstruct_L_2_L_2_alloc_table))
                and (JC_<somenum>: valid_M(__anonstruct_M_1_M_1_alloc_table)))))))}
  double
  reads __anonstruct_COMPVETOR_3_D_3_alloc_table,__anonstruct_L_2_L_2_alloc_table,__anonstruct_M_1_M_1_alloc_table,__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table
  { ((JC_<somenum>:
     ((JC_<somenum>: valid_Vel_Lin(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table))
     and ((JC_<somenum>: valid_D(__anonstruct_COMPVETOR_3_D_3_alloc_table))
         and ((JC_<somenum>: valid_L(__anonstruct_L_2_L_2_alloc_table))
             and (JC_<somenum>: valid_M(__anonstruct_M_1_M_1_alloc_table))))))
    and (JC_<somenum>:
        ((JC_<somenum>:
         le_real(abs_real(sub_real(double_value(result),
                          sqrt_real(double_value(x_0)))),
         0x1p-20))
        and (JC_<somenum>: gt_real(double_value(result), 0.0))))) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let Test_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      le_real(abs_real(sub_real(double_value(select(__anonstruct_Cmd_6_P0_X_Cmd_6,
                                             Cmd)),
                       6.378291E+3)),
      0x1p-20))
     and ((JC_<somenum>:
          le_real(abs_real(sub_real(double_value(select(__anonstruct_Cmd_6_P0_Y_Cmd_6,
                                                 Cmd)),
                           neg_real(1.659630E+0))),
          0x1p-20))
         and ((JC_<somenum>:
              le_real(abs_real(sub_real(double_value(select(__anonstruct_Cmd_6_P0_Z_Cmd_6,
                                                     Cmd)),
                               0.4758900)),
              0x1p-20))
             and ((JC_<somenum>:
                  le_real(abs_real(sub_real(single_value(select(__anonstruct_Escala_4_Mx_Escala_4,
                                                         Escala)),
                                   0.03)),
                  0x1p-20))
                 and ((JC_<somenum>:
                      le_real(abs_real(sub_real(single_value(select(__anonstruct_Escala_4_My_0_Escala_4,
                                                             Escala)),
                                       0.03)),
                      0x1p-20))
                     and ((JC_<somenum>:
                          le_real(abs_real(sub_real(single_value(select(__anonstruct_Escala_4_Mz_Escala_4,
                                                                 Escala)),
                                           0.03)),
                          0x1p-20))
                         and ((JC_<somenum>:
                              le_int((5),
                              integer_of_int16(select(__anonstruct_Vel_Lin_5_Fx_Vel_Lin_5,
                                               Vel_Lin))))
                             and ((JC_<somenum>:
                                  le_int(integer_of_int16(select(__anonstruct_Vel_Lin_5_Fx_Vel_Lin_5,
                                                          Vel_Lin)),
                                  (29)))
                                 and ((JC_<somenum>:
                                      le_int(neg_int((1)),
                                      integer_of_int16(select(__anonstruct_Vel_Lin_5_Fy_Vel_Lin_5,
                                                       Vel_Lin))))
                                     and ((JC_<somenum>:
                                          le_int(integer_of_int16(select(__anonstruct_Vel_Lin_5_Fy_Vel_Lin_5,
                                                                  Vel_Lin)),
                                          (1)))
                                         and ((JC_<somenum>:
                                              le_int((0),
                                              integer_of_int16(select(__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5,
                                                               Vel_Lin))))
                                             and ((JC_<somenum>:
                                                  le_int(integer_of_int16(
                                                         select(__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5,
                                                         Vel_Lin)),
                                                  (12)))
                                                 and ((JC_<somenum>:
                                                      le_real(abs_real(
                                                              single_value(
                                                              select(__anonstruct_L_2_M1x_L_2,
                                                              L))),
                                                      0x1p-20))
                                                     and ((JC_<somenum>:
                                                          le_real(abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_M1y_L_2,
                                                                  L))),
                                                          0x1p-20))
                                                         and ((JC_<somenum>:
                                                              le_real(
                                                              abs_real(
                                                              single_value(
                                                              select(__anonstruct_L_2_M1z_L_2,
                                                              L))), 0x1p-20))
                                                             and ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Mxx_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Mxz_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Myy_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_My_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_M1r_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Fixy_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Fixz_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Fiyz_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 (JC_<somenum>:
                                                                 le_real(
                                                                 abs_real(
                                                                 single_value(Wae)),
                                                                 0x1p-20)))))))))))))))))))))))))
    and ((JC_<somenum>: valid_Vel_Lin(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table))
        and ((JC_<somenum>: valid_D(__anonstruct_COMPVETOR_3_D_3_alloc_table))
            and ((JC_<somenum>: valid_L(__anonstruct_L_2_L_2_alloc_table))
                and (JC_<somenum>: valid_M(__anonstruct_M_1_M_1_alloc_table))))))) }
  (init:
  try
   begin
     (let result_0 = ref (any_single void) in
     (let Modulo = ref (any_single void) in
     (let Adcc_Vx = ref (any_double void) in
     (let Adcc_Vy = ref (any_double void) in
     (let Adcc_Vz = ref (any_double void) in
     (let aux = ref (any_double void) in
     (let R = ref (any_double void) in
     (let tmp = ref (any_double void) in
     (let tmp1 = ref (any_single void) in
     (let tmp2 = ref (any_double void) in
     (C_6:
     begin
       (let _jessie_<somenum> =
       (Grav := (C_5:
                ((single_of_double_safe nearest_even) ((double_of_real_safe nearest_even) 3.986005E+005)))) in
       void);
      (assert
      { (JC_<somenum>:
        le_real(abs_real(sub_real(single_value(Grav), 3.986005E+005)),
        0x1p-20)) }; void);
      begin
        void;
       (C_19:
       begin
         (let _jessie_<somenum> =
         (aux := (C_18:
                 (JC_<somenum>:
                 (((add_double_safe nearest_even) (C_17:
                                                  (JC_<somenum>:
                                                  (((add_double_safe nearest_even) 
                                                    (C_16:
                                                    (JC_<somenum>:
                                                    (((mul_double_safe nearest_even) 
                                                      (C_15:
                                                      ((safe_acc_ !__anonstruct_Cmd_6_P0_X_Cmd_6) Cmd))) 
                                                     (C_14:
                                                     ((safe_acc_ !__anonstruct_Cmd_6_P0_X_Cmd_6) Cmd)))))) 
                                                   (C_13:
                                                   (JC_<somenum>:
                                                   (((mul_double_safe nearest_even) 
                                                     (C_12:
                                                     ((safe_acc_ !__anonstruct_Cmd_6_P0_Y_Cmd_6) Cmd))) 
                                                    (C_11:
                                                    ((safe_acc_ !__anonstruct_Cmd_6_P0_Y_Cmd_6) Cmd))))))))) 
                  (C_10:
                  (JC_<somenum>:
                  (((mul_double_safe nearest_even) (C_9:
                                                   ((safe_acc_ !__anonstruct_Cmd_6_P0_Z_Cmd_6) Cmd))) 
                   (C_8: ((safe_acc_ !__anonstruct_Cmd_6_P0_Z_Cmd_6) Cmd))))))))) in
         void); (assert { (JC_<somenum>: gt_real(double_value(aux), 0.0)) }; void);
        void;
        (let _jessie_<somenum> =
        (C_22:
        begin
          (let _jessie_<somenum> =
          (tmp := (C_21:
                  (let _jessie_<somenum> = !aux in (JC_<somenum>: (sqrt _jessie_<somenum>))))) in
          void);
         (C_24:
         begin
           (Modulo := (C_23: ((single_of_double_safe nearest_even) !tmp)));
          !Modulo end) end) in void);
        (assert { (JC_<somenum>: gt_real(single_value(Modulo), 0.0)) }; void);
        void;
        (assert
        { (JC_<somenum>: (sub_real(single_value(Modulo), 10.3020010835769) <> 0.0)) };
        void);
        begin
          void;
         (C_35:
         begin
           (let _jessie_<somenum> =
           (Nav_G := (C_34:
                     (JC_<somenum>:
                     (((div_single_safe nearest_even) (C_33:
                                                      (JC_<somenum>:
                                                      (((mul_single_safe nearest_even) 
                                                        (C_32:
                                                        ((single_of_double_safe nearest_even) 
                                                         ((double_of_real_safe nearest_even) 0.99838542645959)))) !Grav)))) 
                      (C_31:
                      (JC_<somenum>:
                      (((mul_single_safe nearest_even) (C_30:
                                                       (JC_<somenum>:
                                                       (((sub_single_safe nearest_even) !Modulo) 
                                                        (C_29:
                                                        ((single_of_double_safe nearest_even) 
                                                         ((double_of_real_safe nearest_even) 10.3020010835769))))))) 
                       (C_28:
                       (JC_<somenum>:
                       (((sub_single_safe nearest_even) !Modulo) (C_27:
                                                                 ((single_of_double_safe nearest_even) 
                                                                  ((double_of_real_safe nearest_even) 10.3020010835769))))))))))))) in
           void);
          (assert { (JC_<somenum>: gt_real(single_value(Nav_G), 0.0)) }; void);
          begin
            void;
           (C_57:
           begin
             (let _jessie_<somenum> =
             (Adcc_Vx := (C_56:
                         (JC_<somenum>:
                         (((div_double_safe nearest_even) (C_55:
                                                          (double_of_single 
                                                           (C_54:
                                                           (JC_<somenum>:
                                                           (((sub_single_safe nearest_even) 
                                                             (C_53:
                                                             (JC_<somenum>:
                                                             (((sub_single_safe nearest_even) 
                                                               (C_52:
                                                               (JC_<somenum>:
                                                               (((mul_single_safe nearest_even) 
                                                                 (C_51:
                                                                 ((safe_acc_ !__anonstruct_Escala_4_Mx_Escala_4) Escala))) 
                                                                (C_50:
                                                                ((single_of_real_safe nearest_even) 
                                                                 (real_of_int 
                                                                  (integer_of_int16 
                                                                   (C_49:
                                                                   ((safe_acc_ !__anonstruct_Vel_Lin_5_Fx_Vel_Lin_5) Vel_Lin)))))))))) 
                                                              (C_48:
                                                              (JC_<somenum>:
                                                              (((mul_single_safe nearest_even) 
                                                                (C_47:
                                                                (JC_<somenum>:
                                                                (((mul_single_safe nearest_even) 
                                                                  (C_46:
                                                                  ((safe_acc_ !__anonstruct_L_2_Fixy_L_2) L))) 
                                                                 (C_45:
                                                                 ((safe_acc_ !__anonstruct_Escala_4_My_0_Escala_4) Escala)))))) 
                                                               (C_44:
                                                               ((single_of_real_safe nearest_even) 
                                                                (real_of_int 
                                                                 (integer_of_int16 
                                                                  (C_43:
                                                                  ((safe_acc_ !__anonstruct_Vel_Lin_5_Fy_Vel_Lin_5) Vel_Lin))))))))))))) 
                                                            (C_42:
                                                            (JC_<somenum>:
                                                            (((mul_single_safe nearest_even) 
                                                              (C_41:
                                                              (JC_<somenum>:
                                                              (((mul_single_safe nearest_even) 
                                                                (C_40:
                                                                ((safe_acc_ !__anonstruct_L_2_Fixz_L_2) L))) 
                                                               (C_39:
                                                               ((safe_acc_ !__anonstruct_Escala_4_Mz_Escala_4) Escala)))))) 
                                                             (C_38:
                                                             ((single_of_real_safe nearest_even) 
                                                              (real_of_int 
                                                               (integer_of_int16 
                                                                (C_37:
                                                                ((safe_acc_ !__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5) Vel_Lin))))))))))))))) 
                          (double_of_real_exact 1000.0))))) in void);
            (assert { (JC_<somenum>: ge_real(double_value(Adcc_Vx), 0.0)) }; void);
            begin
              void;
             (C_72:
             begin
               (let _jessie_<somenum> =
               (Adcc_Vy := (C_71:
                           (JC_<somenum>:
                           (((div_double_safe nearest_even) (C_70:
                                                            (double_of_single 
                                                             (C_69:
                                                             (JC_<somenum>:
                                                             (((sub_single_safe nearest_even) 
                                                               (C_68:
                                                               (JC_<somenum>:
                                                               (((mul_single_safe nearest_even) 
                                                                 (C_67:
                                                                 ((safe_acc_ !__anonstruct_Escala_4_My_0_Escala_4) Escala))) 
                                                                (C_66:
                                                                ((single_of_real_safe nearest_even) 
                                                                 (real_of_int 
                                                                  (integer_of_int16 
                                                                   (C_65:
                                                                   ((safe_acc_ !__anonstruct_Vel_Lin_5_Fy_Vel_Lin_5) Vel_Lin)))))))))) 
                                                              (C_64:
                                                              (JC_<somenum>:
                                                              (((mul_single_safe nearest_even) 
                                                                (C_63:
                                                                (JC_<somenum>:
                                                                (((mul_single_safe nearest_even) 
                                                                  (C_62:
                                                                  ((safe_acc_ !__anonstruct_L_2_Fiyz_L_2) L))) 
                                                                 (C_61:
                                                                 ((safe_acc_ !__anonstruct_Escala_4_Mz_Escala_4) Escala)))))) 
                                                               (C_60:
                                                               ((single_of_real_safe nearest_even) 
                                                                (real_of_int 
                                                                 (integer_of_int16 
                                                                  (C_59:
                                                                  ((safe_acc_ !__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5) Vel_Lin))))))))))))))) 
                            (double_of_real_exact 1000.0))))) in void);
              (C_79:
              begin
                (let _jessie_<somenum> =
                (Adcc_Vz := (C_78:
                            (JC_<somenum>:
                            (((div_double_safe nearest_even) (C_77:
                                                             (double_of_single 
                                                              (C_76:
                                                              (JC_<somenum>:
                                                              (((mul_single_safe nearest_even) 
                                                                (C_75:
                                                                ((safe_acc_ !__anonstruct_Escala_4_Mz_Escala_4) Escala))) 
                                                               (C_74:
                                                               ((single_of_real_safe nearest_even) 
                                                                (real_of_int 
                                                                 (integer_of_int16 
                                                                  (C_73:
                                                                  ((safe_acc_ !__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5) Vel_Lin)))))))))))) 
                             (double_of_real_exact 1000.0))))) in void);
               (assert { (JC_<somenum>: ge_real(double_value(Adcc_Vz), 0.0)) };
               void); void;
               (assert
               { (JC_<somenum>:
                 (le_real(abs_real(single_value(select(__anonstruct_L_2_M1x_L_2,
                                                L))),
                  0x1p-20)
                 and (le_real(abs_real(single_value(select(__anonstruct_L_2_M1y_L_2,
                                                    L))),
                      0x1p-20)
                     and (le_real(abs_real(single_value(select(__anonstruct_L_2_M1z_L_2,
                                                        L))),
                          0x1p-20)
                         and (le_real(abs_real(single_value(select(__anonstruct_L_2_Mxx_L_2,
                                                            L))),
                              0x1p-20)
                             and (le_real(abs_real(single_value(select(__anonstruct_L_2_Mxz_L_2,
                                                                L))),
                                  0x1p-20)
                                 and (le_real(abs_real(single_value(select(__anonstruct_L_2_Myy_L_2,
                                                                    L))),
                                      0x1p-20)
                                     and (le_real(abs_real(single_value(
                                                           select(__anonstruct_L_2_My_L_2,
                                                           L))),
                                          0x1p-20)
                                         and le_real(abs_real(single_value(
                                                              select(__anonstruct_L_2_M1r_L_2,
                                                              L))),
                                             0x1p-20))))))))) }; void);
               begin
                 void;
                (C_87:
                begin
                  (let _jessie_<somenum> =
                  (C_85:
                  ((single_of_double_safe nearest_even) (C_84:
                                                        (JC_<somenum>:
                                                        (((div_double_safe nearest_even) 
                                                          (C_83:
                                                          (double_of_single 
                                                           (C_82:
                                                           ((safe_acc_ !__anonstruct_L_2_M1x_L_2) L))))) 
                                                         (double_of_real_exact 3600.0)))))) in
                  (let _jessie_<somenum> = M in
                  (((safe_upd_ __anonstruct_M_1_x1_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                 (C_92:
                 begin
                   (let _jessie_<somenum> =
                   (tmp1 := (C_91:
                            ((single_of_double_safe nearest_even) (C_90:
                                                                  (JC_<somenum>:
                                                                  (((div_double_safe nearest_even) 
                                                                    (C_89:
                                                                    (double_of_single 
                                                                    (C_88:
                                                                    ((safe_acc_ !__anonstruct_L_2_M1x_L_2) L))))) 
                                                                   (double_of_real_exact 3600.0))))))) in
                   void);
                  (assert
                  { (JC_<somenum>: le_real(abs_real(single_value(tmp1)), 0x1p-20)) };
                  void); void;
                  (assert
                  { (JC_<somenum>:
                    (single_value(tmp1) = single_value(select(__anonstruct_M_1_x1_M_1,
                                                       M)))) }; void); void;
                  (assert
                  { (JC_<somenum>:
                    le_real(abs_real(single_value(select(__anonstruct_M_1_x1_M_1,
                                                  M))),
                    0x1p-20)) }; void);
                  begin
                    void;
                   (C_101:
                   begin
                     (let _jessie_<somenum> =
                     (C_99:
                     ((single_of_double_safe nearest_even) (C_98:
                                                           (JC_<somenum>:
                                                           (((div_double_safe nearest_even) 
                                                             (C_97:
                                                             (double_of_single 
                                                              (C_96:
                                                              ((safe_acc_ !__anonstruct_L_2_M1y_L_2) L))))) 
                                                            (double_of_real_exact 3600.0)))))) in
                     (let _jessie_<somenum> = M in
                     (((safe_upd_ __anonstruct_M_1_y1_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                    (C_106:
                    begin
                      (let _jessie_<somenum> =
                      (tmp1 := (C_105:
                               ((single_of_double_safe nearest_even) 
                                (C_104:
                                (JC_<somenum>:
                                (((div_double_safe nearest_even) (C_103:
                                                                 (double_of_single 
                                                                  (C_102:
                                                                  ((safe_acc_ !__anonstruct_L_2_M1y_L_2) L))))) 
                                 (double_of_real_exact 3600.0))))))) in void);
                     (assert
                     { (JC_<somenum>:
                       le_real(abs_real(single_value(tmp1)), 0x1p-20)) };
                     void); void;
                     (assert
                     { (JC_<somenum>:
                       (single_value(tmp1) = single_value(select(__anonstruct_M_1_y1_M_1,
                                                          M)))) }; void);
                     void;
                     (assert
                     { (JC_<somenum>:
                       le_real(abs_real(single_value(select(__anonstruct_M_1_y1_M_1,
                                                     M))),
                       0x1p-20)) }; void);
                     begin
                       void;
                      (C_115:
                      begin
                        (let _jessie_<somenum> =
                        (C_113:
                        ((single_of_double_safe nearest_even) (C_112:
                                                              (JC_<somenum>:
                                                              (((div_double_safe nearest_even) 
                                                                (C_111:
                                                                (double_of_single 
                                                                 (C_110:
                                                                 ((safe_acc_ !__anonstruct_L_2_M1z_L_2) L))))) 
                                                               (double_of_real_exact 3600.0)))))) in
                        (let _jessie_<somenum> = M in
                        (((safe_upd_ __anonstruct_M_1_z1_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                       (C_120:
                       begin
                         (let _jessie_<somenum> =
                         (tmp1 := (C_119:
                                  ((single_of_double_safe nearest_even) 
                                   (C_118:
                                   (JC_<somenum>:
                                   (((div_double_safe nearest_even) (C_117:
                                                                    (double_of_single 
                                                                    (C_116:
                                                                    ((safe_acc_ !__anonstruct_L_2_M1z_L_2) L))))) 
                                    (double_of_real_exact 3600.0))))))) in
                         void);
                        (assert
                        { (JC_<somenum>:
                          le_real(abs_real(single_value(tmp1)), 0x1p-20)) };
                        void); void;
                        (assert
                        { (JC_<somenum>:
                          (single_value(tmp1) = single_value(select(__anonstruct_M_1_z1_M_1,
                                                             M)))) }; void);
                        void;
                        (assert
                        { (JC_<somenum>:
                          le_real(abs_real(single_value(select(__anonstruct_M_1_z1_M_1,
                                                        M))),
                          0x1p-20)) }; void);
                        begin
                          void;
                         (C_129:
                         begin
                           (let _jessie_<somenum> =
                           (C_127:
                           ((single_of_double_safe nearest_even) (C_126:
                                                                 (JC_<somenum>:
                                                                 (((div_double_safe nearest_even) 
                                                                   (C_125:
                                                                   (double_of_single 
                                                                    (C_124:
                                                                    ((safe_acc_ !__anonstruct_L_2_Mxx_L_2) L))))) 
                                                                  (double_of_real_exact 3600.0)))))) in
                           (let _jessie_<somenum> = M in
                           (((safe_upd_ __anonstruct_M_1_xx_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                          (C_134:
                          begin
                            (let _jessie_<somenum> =
                            (tmp1 := (C_133:
                                     ((single_of_double_safe nearest_even) 
                                      (C_132:
                                      (JC_<somenum>:
                                      (((div_double_safe nearest_even) 
                                        (C_131:
                                        (double_of_single (C_130:
                                                          ((safe_acc_ !__anonstruct_L_2_Mxx_L_2) L))))) 
                                       (double_of_real_exact 3600.0))))))) in
                            void);
                           (assert
                           { (JC_<somenum>:
                             le_real(abs_real(single_value(tmp1)), 0x1p-20)) };
                           void); void;
                           (assert
                           { (JC_<somenum>:
                             (single_value(tmp1) = single_value(select(__anonstruct_M_1_xx_M_1,
                                                                M)))) };
                           void); void;
                           (assert
                           { (JC_<somenum>:
                             le_real(abs_real(single_value(select(__anonstruct_M_1_xx_M_1,
                                                           M))),
                             0x1p-20)) }; void);
                           begin
                             void;
                            (C_143:
                            begin
                              (let _jessie_<somenum> =
                              (C_141:
                              ((single_of_double_safe nearest_even) (C_140:
                                                                    (JC_<somenum>:
                                                                    (((div_double_safe nearest_even) 
                                                                    (C_139:
                                                                    (double_of_single 
                                                                    (C_138:
                                                                    ((safe_acc_ !__anonstruct_L_2_Mxz_L_2) L))))) 
                                                                    (double_of_real_exact 3600.0)))))) in
                              (let _jessie_<somenum> = M in
                              (((safe_upd_ __anonstruct_M_1_xz_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                             (C_148:
                             begin
                               (let _jessie_<somenum> =
                               (tmp1 := (C_147:
                                        ((single_of_double_safe nearest_even) 
                                         (C_146:
                                         (JC_<somenum>:
                                         (((div_double_safe nearest_even) 
                                           (C_145:
                                           (double_of_single (C_144:
                                                             ((safe_acc_ !__anonstruct_L_2_Mxz_L_2) L))))) 
                                          (double_of_real_exact 3600.0))))))) in
                               void);
                              (assert
                              { (JC_<somenum>:
                                le_real(abs_real(single_value(tmp1)),
                                0x1p-20)) }; void); void;
                              (assert
                              { (JC_<somenum>:
                                (single_value(tmp1) = single_value(select(__anonstruct_M_1_xz_M_1,
                                                                   M)))) };
                              void); void;
                              (assert
                              { (JC_<somenum>:
                                le_real(abs_real(single_value(select(__anonstruct_M_1_xz_M_1,
                                                              M))),
                                0x1p-20)) }; void);
                              begin
                                void;
                               (C_157:
                               begin
                                 (let _jessie_<somenum> =
                                 (C_155:
                                 ((single_of_double_safe nearest_even) 
                                  (C_154:
                                  (JC_<somenum>:
                                  (((div_double_safe nearest_even) (C_153:
                                                                   (double_of_single 
                                                                    (C_152:
                                                                    ((safe_acc_ !__anonstruct_L_2_Myy_L_2) L))))) 
                                   (double_of_real_exact 3600.0)))))) in
                                 (let _jessie_<somenum> = M in
                                 (((safe_upd_ __anonstruct_M_1_yy_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                                (C_162:
                                begin
                                  (let _jessie_<somenum> =
                                  (tmp1 := (C_161:
                                           ((single_of_double_safe nearest_even) 
                                            (C_160:
                                            (JC_<somenum>:
                                            (((div_double_safe nearest_even) 
                                              (C_159:
                                              (double_of_single (C_158:
                                                                ((safe_acc_ !__anonstruct_L_2_Myy_L_2) L))))) 
                                             (double_of_real_exact 3600.0))))))) in
                                  void);
                                 (assert
                                 { (JC_<somenum>:
                                   le_real(abs_real(single_value(tmp1)),
                                   0x1p-20)) }; void); void;
                                 (assert
                                 { (JC_<somenum>:
                                   (single_value(tmp1) = single_value(
                                                         select(__anonstruct_M_1_yy_M_1,
                                                         M)))) }; void);
                                 void;
                                 (assert
                                 { (JC_<somenum>:
                                   le_real(abs_real(single_value(select(__anonstruct_M_1_yy_M_1,
                                                                 M))),
                                   0x1p-20)) }; void);
                                 begin
                                   void;
                                  (C_171:
                                  begin
                                    (let _jessie_<somenum> =
                                    (C_169:
                                    ((single_of_double_safe nearest_even) 
                                     (C_168:
                                     (JC_<somenum>:
                                     (((div_double_safe nearest_even) 
                                       (C_167:
                                       (double_of_single (C_166:
                                                         ((safe_acc_ !__anonstruct_L_2_My_L_2) L))))) 
                                      (double_of_real_exact 3600.0)))))) in
                                    (let _jessie_<somenum> = M in
                                    (((safe_upd_ __anonstruct_M_1_y_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                                   (C_176:
                                   begin
                                     (let _jessie_<somenum> =
                                     (tmp1 := (C_175:
                                              ((single_of_double_safe nearest_even) 
                                               (C_174:
                                               (JC_<somenum>:
                                               (((div_double_safe nearest_even) 
                                                 (C_173:
                                                 (double_of_single (C_172:
                                                                   ((safe_acc_ !__anonstruct_L_2_My_L_2) L))))) 
                                                (double_of_real_exact 3600.0))))))) in
                                     void);
                                    (assert
                                    { (JC_<somenum>:
                                      le_real(abs_real(single_value(tmp1)),
                                      0x1p-20)) }; void); void;
                                    (assert
                                    { (JC_<somenum>:
                                      (single_value(tmp1) = single_value(
                                                            select(__anonstruct_M_1_y_M_1,
                                                            M)))) }; void);
                                    void;
                                    (assert
                                    { (JC_<somenum>:
                                      le_real(abs_real(single_value(select(__anonstruct_M_1_y_M_1,
                                                                    M))),
                                      0x1p-20)) }; void);
                                    begin
                                      void;
                                     (C_185:
                                     begin
                                       (let _jessie_<somenum> =
                                       (C_183:
                                       ((single_of_double_safe nearest_even) 
                                        (C_182:
                                        (JC_<somenum>:
                                        (((div_double_safe nearest_even) 
                                          (C_181:
                                          (double_of_single (C_180:
                                                            ((safe_acc_ !__anonstruct_L_2_M1r_L_2) L))))) 
                                         (double_of_real_exact 3600.0)))))) in
                                       (let _jessie_<somenum> = M in
                                       (((safe_upd_ __anonstruct_M_1_r1_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                                      (C_190:
                                      begin
                                        (let _jessie_<somenum> =
                                        (tmp1 := (C_189:
                                                 ((single_of_double_safe nearest_even) 
                                                  (C_188:
                                                  (JC_<somenum>:
                                                  (((div_double_safe nearest_even) 
                                                    (C_187:
                                                    (double_of_single 
                                                     (C_186:
                                                     ((safe_acc_ !__anonstruct_L_2_M1r_L_2) L))))) 
                                                   (double_of_real_exact 3600.0))))))) in
                                        void);
                                       (assert
                                       { (JC_<somenum>:
                                         le_real(abs_real(single_value(tmp1)),
                                         0x1p-20)) }; void); void;
                                       (assert
                                       { (JC_<somenum>:
                                         (single_value(tmp1) = single_value(
                                                               select(__anonstruct_M_1_r1_M_1,
                                                               M)))) }; void);
                                       void;
                                       (assert
                                       { (JC_<somenum>:
                                         le_real(abs_real(single_value(
                                                          select(__anonstruct_M_1_r1_M_1,
                                                          M))),
                                         0x1p-20)) }; void);
                                       begin
                                         void;
                                        (C_219:
                                        begin
                                          (let _jessie_<somenum> =
                                          (C_217:
                                          (JC_<somenum>:
                                          (((sub_double_safe nearest_even) 
                                            (C_216:
                                            (JC_<somenum>:
                                            (((add_double_safe nearest_even) 
                                              (C_215:
                                              (JC_<somenum>:
                                              (((add_double_safe nearest_even) 
                                                (C_214:
                                                (JC_<somenum>:
                                                (((mul_double_safe nearest_even) 
                                                  (C_213:
                                                  (double_of_single (C_212:
                                                                    ((safe_acc_ !__anonstruct_M_1_x1_M_1) M))))) 
                                                 ((double_of_real_safe nearest_even) 0.015625))))) 
                                               (C_211:
                                               (JC_<somenum>:
                                               (((div_double_safe nearest_even) 
                                                 (C_210:
                                                 (JC_<somenum>:
                                                 (((mul_double_safe nearest_even) 
                                                   (C_209:
                                                   (double_of_single 
                                                    (C_208:
                                                    ((safe_acc_ !__anonstruct_M_1_xx_M_1) M))))) !Adcc_Vx)))) 
                                                (C_207:
                                                (double_of_single !Nav_G))))))))) 
                                             (C_206:
                                             (JC_<somenum>:
                                             (((div_double_safe nearest_even) 
                                               (C_205:
                                               (JC_<somenum>:
                                               (((mul_double_safe nearest_even) 
                                                 (C_204:
                                                 (double_of_single (C_203:
                                                                   ((safe_acc_ !__anonstruct_M_1_xz_M_1) M))))) !Adcc_Vz)))) 
                                              (C_202:
                                              (double_of_single !Nav_G))))))))) 
                                           (C_201:
                                           (JC_<somenum>:
                                           (((div_double_safe nearest_even) 
                                             (C_200:
                                             (JC_<somenum>:
                                             (((mul_double_safe nearest_even) 
                                               (C_199:
                                               (JC_<somenum>:
                                               (((mul_double_safe nearest_even) 
                                                 (C_198:
                                                 (double_of_single Wae))) !Adcc_Vx)))) !Adcc_Vy)))) 
                                            (C_197:
                                            (JC_<somenum>:
                                            (((mul_double_safe nearest_even) 
                                              (C_196:
                                              (JC_<somenum>:
                                              (((mul_double_safe nearest_even) 
                                                ((double_of_real_safe nearest_even) 0.015625)) 
                                               (C_195:
                                               (double_of_single !Nav_G)))))) 
                                             (C_194:
                                             (double_of_single !Nav_G))))))))))) in
                                          (let _jessie_<somenum> = D in
                                          (((safe_upd_ __anonstruct_COMPVETOR_3_x_0_D_3) _jessie_<somenum>) _jessie_<somenum>)));
                                         (C_244:
                                         begin
                                           (let _jessie_<somenum> =
                                           (tmp2 := (C_243:
                                                    (JC_<somenum>:
                                                    (((sub_double_safe nearest_even) 
                                                      (C_242:
                                                      (JC_<somenum>:
                                                      (((add_double_safe nearest_even) 
                                                        (C_241:
                                                        (JC_<somenum>:
                                                        (((add_double_safe nearest_even) 
                                                          (C_240:
                                                          (JC_<somenum>:
                                                          (((mul_double_safe nearest_even) 
                                                            (C_239:
                                                            (double_of_single 
                                                             (C_238:
                                                             ((safe_acc_ !__anonstruct_M_1_x1_M_1) M))))) 
                                                           ((double_of_real_safe nearest_even) 0.015625))))) 
                                                         (C_237:
                                                         (JC_<somenum>:
                                                         (((div_double_safe nearest_even) 
                                                           (C_236:
                                                           (JC_<somenum>:
                                                           (((mul_double_safe nearest_even) 
                                                             (C_235:
                                                             (double_of_single 
                                                              (C_234:
                                                              ((safe_acc_ !__anonstruct_M_1_xx_M_1) M))))) !Adcc_Vx)))) 
                                                          (C_233:
                                                          (double_of_single !Nav_G))))))))) 
                                                       (C_232:
                                                       (JC_<somenum>:
                                                       (((div_double_safe nearest_even) 
                                                         (C_231:
                                                         (JC_<somenum>:
                                                         (((mul_double_safe nearest_even) 
                                                           (C_230:
                                                           (double_of_single 
                                                            (C_229:
                                                            ((safe_acc_ !__anonstruct_M_1_xz_M_1) M))))) !Adcc_Vz)))) 
                                                        (C_228:
                                                        (double_of_single !Nav_G))))))))) 
                                                     (C_227:
                                                     (JC_<somenum>:
                                                     (((div_double_safe nearest_even) 
                                                       (C_226:
                                                       (JC_<somenum>:
                                                       (((mul_double_safe nearest_even) 
                                                         (C_225:
                                                         (JC_<somenum>:
                                                         (((mul_double_safe nearest_even) 
                                                           (C_224:
                                                           (double_of_single Wae))) !Adcc_Vx)))) !Adcc_Vy)))) 
                                                      (C_223:
                                                      (JC_<somenum>:
                                                      (((mul_double_safe nearest_even) 
                                                        (C_222:
                                                        (JC_<somenum>:
                                                        (((mul_double_safe nearest_even) 
                                                          ((double_of_real_safe nearest_even) 0.015625)) 
                                                         (C_221:
                                                         (double_of_single !Nav_G)))))) 
                                                       (C_220:
                                                       (double_of_single !Nav_G)))))))))))) in
                                           void);
                                          (assert
                                          { (JC_<somenum>:
                                            le_real(abs_real(double_value(tmp2)),
                                            0x1p-20)) }; void); void;
                                          (assert
                                          { (JC_<somenum>:
                                            (double_value(select(__anonstruct_COMPVETOR_3_x_0_D_3,
                                                          D)) = round_single(nearest_even,
                                                                double_value(tmp2)))) };
                                          void); void;
                                          (assert
                                          { (JC_<somenum>:
                                            le_real(abs_real(double_value(
                                                             select(__anonstruct_COMPVETOR_3_x_0_D_3,
                                                             D))),
                                            0x1p-20)) }; void);
                                          begin
                                            void;
                                           (C_250:
                                           begin
                                             (let _jessie_<somenum> =
                                             (C_248:
                                             (double_of_single !Nav_G)) in
                                             (let _jessie_<somenum> = D in
                                             (((safe_upd_ __anonstruct_COMPVETOR_3_y_0_D_3) _jessie_<somenum>) _jessie_<somenum>)));
                                            (assert
                                            { (JC_<somenum>:
                                              (gt_real(abs_real(double_value(
                                                                select(__anonstruct_COMPVETOR_3_x_0_D_3,
                                                                D))),
                                               0.0)
                                              or gt_real(abs_real(double_value(
                                                                  select(__anonstruct_COMPVETOR_3_x_0_D_3,
                                                                  D))),
                                                 0.0))) }; void);
                                            begin
                                              void;
                                             (C_259:
                                             begin
                                               (let _jessie_<somenum> =
                                               (aux := (C_258:
                                                       (JC_<somenum>:
                                                       (((add_double_safe nearest_even) 
                                                         (C_257:
                                                         (JC_<somenum>:
                                                         (((mul_double_safe nearest_even) 
                                                           (C_256:
                                                           ((safe_acc_ !__anonstruct_COMPVETOR_3_x_0_D_3) D))) 
                                                          (C_255:
                                                          ((safe_acc_ !__anonstruct_COMPVETOR_3_x_0_D_3) D)))))) 
                                                        (C_254:
                                                        (JC_<somenum>:
                                                        (((mul_double_safe nearest_even) 
                                                          (C_253:
                                                          ((safe_acc_ !__anonstruct_COMPVETOR_3_y_0_D_3) D))) 
                                                         (C_252:
                                                         ((safe_acc_ !__anonstruct_COMPVETOR_3_y_0_D_3) D))))))))) in
                                               void);
                                              (assert
                                              { (JC_<somenum>:
                                                gt_real(double_value(aux),
                                                0.0)) }; void);
                                              begin
                                                void;
                                               (C_262:
                                               begin
                                                 (let _jessie_<somenum> =
                                                 (R := (C_261:
                                                       (let _jessie_<somenum> =
                                                       !aux in
                                                       (JC_<somenum>:
                                                       (sqrt _jessie_<somenum>))))) in
                                                 void);
                                                (assert
                                                { (JC_<somenum>:
                                                  gt_real(double_value(R),
                                                  0.0)) }; void); void;
                                                (assert
                                                { (JC_<somenum>:
                                                  (sub_real(double_value(R),
                                                   10.3020010835769) <> 0.0)) };
                                                void);
                                                begin
                                                  void;
                                                 (C_277:
                                                 begin
                                                   (let _jessie_<somenum> =
                                                   (result_0 := (C_276:
                                                                ((single_of_double_safe nearest_even) 
                                                                 (C_275:
                                                                 (JC_<somenum>:
                                                                 (((div_double_safe nearest_even) 
                                                                   (C_274:
                                                                   (double_of_single 
                                                                    (C_273:
                                                                    (JC_<somenum>:
                                                                    (((mul_single_safe nearest_even) 
                                                                    (C_272:
                                                                    ((single_of_double_safe nearest_even) 
                                                                    ((double_of_real_safe nearest_even) 0.99838542645959)))) !Grav)))))) 
                                                                  (C_271:
                                                                  (JC_<somenum>:
                                                                  (((mul_double_safe nearest_even) 
                                                                    (C_270:
                                                                    (JC_<somenum>:
                                                                    (((sub_double_safe nearest_even) !R) 
                                                                    (C_269:
                                                                    (double_of_single 
                                                                    (C_268:
                                                                    ((single_of_double_safe nearest_even) 
                                                                    ((double_of_real_safe nearest_even) 10.3020010835769))))))))) 
                                                                   (C_267:
                                                                   (JC_<somenum>:
                                                                   (((sub_double_safe nearest_even) !R) 
                                                                    (C_266:
                                                                    (double_of_single 
                                                                    (C_265:
                                                                    ((single_of_double_safe nearest_even) 
                                                                    ((double_of_real_safe nearest_even) 10.3020010835769))))))))))))))))) in
                                                   void); (raise Return) end)
                                                end end) end end) end end)
                                          end end) end) end end) end) end end)
                                  end) end end) end) end end) end) end end)
                         end) end end) end) end end) end) end end) end) end
              end) end) end end) end end) end end) end end)))))))))));
    (raise Return) end with Return -> void end) { (JC_<somenum>: true) }

let Test_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      le_real(abs_real(sub_real(double_value(select(__anonstruct_Cmd_6_P0_X_Cmd_6,
                                             Cmd)),
                       6.378291E+3)),
      0x1p-20))
     and ((JC_<somenum>:
          le_real(abs_real(sub_real(double_value(select(__anonstruct_Cmd_6_P0_Y_Cmd_6,
                                                 Cmd)),
                           neg_real(1.659630E+0))),
          0x1p-20))
         and ((JC_<somenum>:
              le_real(abs_real(sub_real(double_value(select(__anonstruct_Cmd_6_P0_Z_Cmd_6,
                                                     Cmd)),
                               0.4758900)),
              0x1p-20))
             and ((JC_<somenum>:
                  le_real(abs_real(sub_real(single_value(select(__anonstruct_Escala_4_Mx_Escala_4,
                                                         Escala)),
                                   0.03)),
                  0x1p-20))
                 and ((JC_<somenum>:
                      le_real(abs_real(sub_real(single_value(select(__anonstruct_Escala_4_My_0_Escala_4,
                                                             Escala)),
                                       0.03)),
                      0x1p-20))
                     and ((JC_<somenum>:
                          le_real(abs_real(sub_real(single_value(select(__anonstruct_Escala_4_Mz_Escala_4,
                                                                 Escala)),
                                           0.03)),
                          0x1p-20))
                         and ((JC_<somenum>:
                              le_int((5),
                              integer_of_int16(select(__anonstruct_Vel_Lin_5_Fx_Vel_Lin_5,
                                               Vel_Lin))))
                             and ((JC_<somenum>:
                                  le_int(integer_of_int16(select(__anonstruct_Vel_Lin_5_Fx_Vel_Lin_5,
                                                          Vel_Lin)),
                                  (29)))
                                 and ((JC_<somenum>:
                                      le_int(neg_int((1)),
                                      integer_of_int16(select(__anonstruct_Vel_Lin_5_Fy_Vel_Lin_5,
                                                       Vel_Lin))))
                                     and ((JC_<somenum>:
                                          le_int(integer_of_int16(select(__anonstruct_Vel_Lin_5_Fy_Vel_Lin_5,
                                                                  Vel_Lin)),
                                          (1)))
                                         and ((JC_<somenum>:
                                              le_int((0),
                                              integer_of_int16(select(__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5,
                                                               Vel_Lin))))
                                             and ((JC_<somenum>:
                                                  le_int(integer_of_int16(
                                                         select(__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5,
                                                         Vel_Lin)),
                                                  (12)))
                                                 and ((JC_<somenum>:
                                                      le_real(abs_real(
                                                              single_value(
                                                              select(__anonstruct_L_2_M1x_L_2,
                                                              L))),
                                                      0x1p-20))
                                                     and ((JC_<somenum>:
                                                          le_real(abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_M1y_L_2,
                                                                  L))),
                                                          0x1p-20))
                                                         and ((JC_<somenum>:
                                                              le_real(
                                                              abs_real(
                                                              single_value(
                                                              select(__anonstruct_L_2_M1z_L_2,
                                                              L))), 0x1p-20))
                                                             and ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Mxx_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Mxz_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Myy_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_My_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_M1r_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Fixy_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Fixz_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 ((JC_<somenum>:
                                                                  le_real(
                                                                  abs_real(
                                                                  single_value(
                                                                  select(__anonstruct_L_2_Fiyz_L_2,
                                                                  L))),
                                                                  0x1p-20))
                                                                 and 
                                                                 (JC_<somenum>:
                                                                 le_real(
                                                                 abs_real(
                                                                 single_value(Wae)),
                                                                 0x1p-20)))))))))))))))))))))))))
    and ((JC_<somenum>: valid_Vel_Lin(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table))
        and ((JC_<somenum>: valid_D(__anonstruct_COMPVETOR_3_D_3_alloc_table))
            and ((JC_<somenum>: valid_L(__anonstruct_L_2_L_2_alloc_table))
                and (JC_<somenum>: valid_M(__anonstruct_M_1_M_1_alloc_table))))))) }
  (init:
  try
   begin
     (let result_0 = ref (any_single void) in
     (let Modulo = ref (any_single void) in
     (let Adcc_Vx = ref (any_double void) in
     (let Adcc_Vy = ref (any_double void) in
     (let Adcc_Vz = ref (any_double void) in
     (let aux = ref (any_double void) in
     (let R = ref (any_double void) in
     (let tmp = ref (any_double void) in
     (let tmp1 = ref (any_single void) in
     (let tmp2 = ref (any_double void) in
     (C_6:
     begin
       (let _jessie_<somenum> =
       (Grav := (C_5:
                (JC_<somenum>:
                ((single_of_double nearest_even) (JC_<somenum>:
                                                 ((double_of_real nearest_even) 3.986005E+005)))))) in
       void);
      [ { } unit reads Grav
        { (JC_<somenum>:
          le_real(abs_real(sub_real(single_value(Grav), 3.986005E+005)),
          0x1p-20)) } ];
      begin
        void;
       (C_19:
       begin
         (let _jessie_<somenum> =
         (aux := (C_18:
                 (JC_<somenum>:
                 (((add_double nearest_even) (C_17:
                                             (JC_<somenum>:
                                             (((add_double nearest_even) 
                                               (C_16:
                                               (JC_<somenum>:
                                               (((mul_double nearest_even) 
                                                 (C_15:
                                                 ((safe_acc_ !__anonstruct_Cmd_6_P0_X_Cmd_6) Cmd))) 
                                                (C_14:
                                                ((safe_acc_ !__anonstruct_Cmd_6_P0_X_Cmd_6) Cmd)))))) 
                                              (C_13:
                                              (JC_<somenum>:
                                              (((mul_double nearest_even) 
                                                (C_12:
                                                ((safe_acc_ !__anonstruct_Cmd_6_P0_Y_Cmd_6) Cmd))) 
                                               (C_11:
                                               ((safe_acc_ !__anonstruct_Cmd_6_P0_Y_Cmd_6) Cmd))))))))) 
                  (C_10:
                  (JC_<somenum>:
                  (((mul_double nearest_even) (C_9:
                                              ((safe_acc_ !__anonstruct_Cmd_6_P0_Z_Cmd_6) Cmd))) 
                   (C_8: ((safe_acc_ !__anonstruct_Cmd_6_P0_Z_Cmd_6) Cmd))))))))) in
         void);
        [ { } unit reads aux { (JC_<somenum>: gt_real(double_value(aux), 0.0)) } ];
        void;
        (let _jessie_<somenum> =
        (C_22:
        begin
          (let _jessie_<somenum> =
          (tmp := (C_21:
                  (let _jessie_<somenum> = !aux in
                  (JC_<somenum>: (sqrt_requires _jessie_<somenum>))))) in void);
         (C_24:
         begin
           (Modulo := (C_23:
                      (JC_<somenum>: ((single_of_double nearest_even) !tmp))));
          !Modulo end) end) in void);
        [ { } unit reads Modulo
          { (JC_<somenum>: gt_real(single_value(Modulo), 0.0)) } ]; void;
        [ { } unit reads Modulo
          { (JC_<somenum>:
            (sub_real(single_value(Modulo), 10.3020010835769) <> 0.0)) } ];
        begin
          void;
         (C_35:
         begin
           (let _jessie_<somenum> =
           (Nav_G := (C_34:
                     (JC_<somenum>:
                     (((div_single nearest_even) (C_33:
                                                 (JC_<somenum>:
                                                 (((mul_single nearest_even) 
                                                   (C_32:
                                                   (JC_<somenum>:
                                                   ((single_of_double nearest_even) 
                                                    (JC_<somenum>:
                                                    ((double_of_real nearest_even) 0.99838542645959)))))) !Grav)))) 
                      (C_31:
                      (JC_<somenum>:
                      (((mul_single nearest_even) (C_30:
                                                  (JC_<somenum>:
                                                  (((sub_single nearest_even) !Modulo) 
                                                   (C_29:
                                                   (JC_<somenum>:
                                                   ((single_of_double nearest_even) 
                                                    (JC_<somenum>:
                                                    ((double_of_real nearest_even) 10.3020010835769))))))))) 
                       (C_28:
                       (JC_<somenum>:
                       (((sub_single nearest_even) !Modulo) (C_27:
                                                            (JC_<somenum>:
                                                            ((single_of_double nearest_even) 
                                                             (JC_<somenum>:
                                                             ((double_of_real nearest_even) 10.3020010835769))))))))))))))) in
           void);
          [ { } unit reads Nav_G
            { (JC_<somenum>: gt_real(single_value(Nav_G), 0.0)) } ];
          begin
            void;
           (C_57:
           begin
             (let _jessie_<somenum> =
             (Adcc_Vx := (C_56:
                         (JC_<somenum>:
                         (((div_double nearest_even) (C_55:
                                                     (double_of_single 
                                                      (C_54:
                                                      (JC_<somenum>:
                                                      (((sub_single nearest_even) 
                                                        (C_53:
                                                        (JC_<somenum>:
                                                        (((sub_single nearest_even) 
                                                          (C_52:
                                                          (JC_<somenum>:
                                                          (((mul_single nearest_even) 
                                                            (C_51:
                                                            ((safe_acc_ !__anonstruct_Escala_4_Mx_Escala_4) Escala))) 
                                                           (C_50:
                                                           (JC_<somenum>:
                                                           ((single_of_real nearest_even) 
                                                            (real_of_int 
                                                             (integer_of_int16 
                                                              (C_49:
                                                              ((safe_acc_ !__anonstruct_Vel_Lin_5_Fx_Vel_Lin_5) Vel_Lin))))))))))) 
                                                         (C_48:
                                                         (JC_<somenum>:
                                                         (((mul_single nearest_even) 
                                                           (C_47:
                                                           (JC_<somenum>:
                                                           (((mul_single nearest_even) 
                                                             (C_46:
                                                             ((safe_acc_ !__anonstruct_L_2_Fixy_L_2) L))) 
                                                            (C_45:
                                                            ((safe_acc_ !__anonstruct_Escala_4_My_0_Escala_4) Escala)))))) 
                                                          (C_44:
                                                          (JC_<somenum>:
                                                          ((single_of_real nearest_even) 
                                                           (real_of_int 
                                                            (integer_of_int16 
                                                             (C_43:
                                                             ((safe_acc_ !__anonstruct_Vel_Lin_5_Fy_Vel_Lin_5) Vel_Lin)))))))))))))) 
                                                       (C_42:
                                                       (JC_<somenum>:
                                                       (((mul_single nearest_even) 
                                                         (C_41:
                                                         (JC_<somenum>:
                                                         (((mul_single nearest_even) 
                                                           (C_40:
                                                           ((safe_acc_ !__anonstruct_L_2_Fixz_L_2) L))) 
                                                          (C_39:
                                                          ((safe_acc_ !__anonstruct_Escala_4_Mz_Escala_4) Escala)))))) 
                                                        (C_38:
                                                        (JC_<somenum>:
                                                        ((single_of_real nearest_even) 
                                                         (real_of_int 
                                                          (integer_of_int16 
                                                           (C_37:
                                                           ((safe_acc_ !__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5) Vel_Lin)))))))))))))))) 
                          (double_of_real_exact 1000.0))))) in void);
            [ { } unit reads Adcc_Vx
              { (JC_<somenum>: ge_real(double_value(Adcc_Vx), 0.0)) } ];
            begin
              void;
             (C_72:
             begin
               (let _jessie_<somenum> =
               (Adcc_Vy := (C_71:
                           (JC_<somenum>:
                           (((div_double nearest_even) (C_70:
                                                       (double_of_single 
                                                        (C_69:
                                                        (JC_<somenum>:
                                                        (((sub_single nearest_even) 
                                                          (C_68:
                                                          (JC_<somenum>:
                                                          (((mul_single nearest_even) 
                                                            (C_67:
                                                            ((safe_acc_ !__anonstruct_Escala_4_My_0_Escala_4) Escala))) 
                                                           (C_66:
                                                           (JC_<somenum>:
                                                           ((single_of_real nearest_even) 
                                                            (real_of_int 
                                                             (integer_of_int16 
                                                              (C_65:
                                                              ((safe_acc_ !__anonstruct_Vel_Lin_5_Fy_Vel_Lin_5) Vel_Lin))))))))))) 
                                                         (C_64:
                                                         (JC_<somenum>:
                                                         (((mul_single nearest_even) 
                                                           (C_63:
                                                           (JC_<somenum>:
                                                           (((mul_single nearest_even) 
                                                             (C_62:
                                                             ((safe_acc_ !__anonstruct_L_2_Fiyz_L_2) L))) 
                                                            (C_61:
                                                            ((safe_acc_ !__anonstruct_Escala_4_Mz_Escala_4) Escala)))))) 
                                                          (C_60:
                                                          (JC_<somenum>:
                                                          ((single_of_real nearest_even) 
                                                           (real_of_int 
                                                            (integer_of_int16 
                                                             (C_59:
                                                             ((safe_acc_ !__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5) Vel_Lin)))))))))))))))) 
                            (double_of_real_exact 1000.0))))) in void);
              (C_79:
              begin
                (let _jessie_<somenum> =
                (Adcc_Vz := (C_78:
                            (JC_<somenum>:
                            (((div_double nearest_even) (C_77:
                                                        (double_of_single 
                                                         (C_76:
                                                         (JC_<somenum>:
                                                         (((mul_single nearest_even) 
                                                           (C_75:
                                                           ((safe_acc_ !__anonstruct_Escala_4_Mz_Escala_4) Escala))) 
                                                          (C_74:
                                                          (JC_<somenum>:
                                                          ((single_of_real nearest_even) 
                                                           (real_of_int 
                                                            (integer_of_int16 
                                                             (C_73:
                                                             ((safe_acc_ !__anonstruct_Vel_Lin_5_Fz_Vel_Lin_5) Vel_Lin))))))))))))) 
                             (double_of_real_exact 1000.0))))) in void);
               [ { } unit reads Adcc_Vz
                 { (JC_<somenum>: ge_real(double_value(Adcc_Vz), 0.0)) } ]; void;
               [ { } unit
                 reads __anonstruct_L_2_M1r_L_2,__anonstruct_L_2_M1x_L_2,__anonstruct_L_2_M1y_L_2,__anonstruct_L_2_M1z_L_2,__anonstruct_L_2_Mxx_L_2,__anonstruct_L_2_Mxz_L_2,__anonstruct_L_2_My_L_2,__anonstruct_L_2_Myy_L_2
                 { (JC_<somenum>:
                   (le_real(abs_real(single_value(select(__anonstruct_L_2_M1x_L_2,
                                                  L))),
                    0x1p-20)
                   and (le_real(abs_real(single_value(select(__anonstruct_L_2_M1y_L_2,
                                                      L))),
                        0x1p-20)
                       and (le_real(abs_real(single_value(select(__anonstruct_L_2_M1z_L_2,
                                                          L))),
                            0x1p-20)
                           and (le_real(abs_real(single_value(select(__anonstruct_L_2_Mxx_L_2,
                                                              L))),
                                0x1p-20)
                               and (le_real(abs_real(single_value(select(__anonstruct_L_2_Mxz_L_2,
                                                                  L))),
                                    0x1p-20)
                                   and (le_real(abs_real(single_value(
                                                         select(__anonstruct_L_2_Myy_L_2,
                                                         L))),
                                        0x1p-20)
                                       and (le_real(abs_real(single_value(
                                                             select(__anonstruct_L_2_My_L_2,
                                                             L))),
                                            0x1p-20)
                                           and le_real(abs_real(single_value(
                                                                select(__anonstruct_L_2_M1r_L_2,
                                                                L))),
                                               0x1p-20))))))))) } ];
               begin
                 void;
                (C_87:
                begin
                  (let _jessie_<somenum> =
                  (C_85:
                  (JC_<somenum>:
                  ((single_of_double nearest_even) (C_84:
                                                   (JC_<somenum>:
                                                   (((div_double nearest_even) 
                                                     (C_83:
                                                     (double_of_single 
                                                      (C_82:
                                                      ((safe_acc_ !__anonstruct_L_2_M1x_L_2) L))))) 
                                                    (double_of_real_exact 3600.0))))))) in
                  (let _jessie_<somenum> = M in
                  (((safe_upd_ __anonstruct_M_1_x1_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                 (C_92:
                 begin
                   (let _jessie_<somenum> =
                   (tmp1 := (C_91:
                            (JC_<somenum>:
                            ((single_of_double nearest_even) (C_90:
                                                             (JC_<somenum>:
                                                             (((div_double nearest_even) 
                                                               (C_89:
                                                               (double_of_single 
                                                                (C_88:
                                                                ((safe_acc_ !__anonstruct_L_2_M1x_L_2) L))))) 
                                                              (double_of_real_exact 3600.0)))))))) in
                   void);
                  [ { } unit reads tmp1
                    { (JC_<somenum>:
                      le_real(abs_real(single_value(tmp1)), 0x1p-20)) } ];
                  void;
                  [ { } unit reads __anonstruct_M_1_x1_M_1,tmp1
                    { (JC_<somenum>:
                      (single_value(tmp1) = single_value(select(__anonstruct_M_1_x1_M_1,
                                                         M)))) } ]; void;
                  [ { } unit reads __anonstruct_M_1_x1_M_1
                    { (JC_<somenum>:
                      le_real(abs_real(single_value(select(__anonstruct_M_1_x1_M_1,
                                                    M))),
                      0x1p-20)) } ];
                  begin
                    void;
                   (C_101:
                   begin
                     (let _jessie_<somenum> =
                     (C_99:
                     (JC_<somenum>:
                     ((single_of_double nearest_even) (C_98:
                                                      (JC_<somenum>:
                                                      (((div_double nearest_even) 
                                                        (C_97:
                                                        (double_of_single 
                                                         (C_96:
                                                         ((safe_acc_ !__anonstruct_L_2_M1y_L_2) L))))) 
                                                       (double_of_real_exact 3600.0))))))) in
                     (let _jessie_<somenum> = M in
                     (((safe_upd_ __anonstruct_M_1_y1_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                    (C_106:
                    begin
                      (let _jessie_<somenum> =
                      (tmp1 := (C_105:
                               (JC_<somenum>:
                               ((single_of_double nearest_even) (C_104:
                                                                (JC_<somenum>:
                                                                (((div_double nearest_even) 
                                                                  (C_103:
                                                                  (double_of_single 
                                                                   (C_102:
                                                                   ((safe_acc_ !__anonstruct_L_2_M1y_L_2) L))))) 
                                                                 (double_of_real_exact 3600.0)))))))) in
                      void);
                     [ { } unit reads tmp1
                       { (JC_<somenum>:
                         le_real(abs_real(single_value(tmp1)), 0x1p-20)) } ];
                     void;
                     [ { } unit reads __anonstruct_M_1_y1_M_1,tmp1
                       { (JC_<somenum>:
                         (single_value(tmp1) = single_value(select(__anonstruct_M_1_y1_M_1,
                                                            M)))) } ]; void;
                     [ { } unit reads __anonstruct_M_1_y1_M_1
                       { (JC_<somenum>:
                         le_real(abs_real(single_value(select(__anonstruct_M_1_y1_M_1,
                                                       M))),
                         0x1p-20)) } ];
                     begin
                       void;
                      (C_115:
                      begin
                        (let _jessie_<somenum> =
                        (C_113:
                        (JC_<somenum>:
                        ((single_of_double nearest_even) (C_112:
                                                         (JC_<somenum>:
                                                         (((div_double nearest_even) 
                                                           (C_111:
                                                           (double_of_single 
                                                            (C_110:
                                                            ((safe_acc_ !__anonstruct_L_2_M1z_L_2) L))))) 
                                                          (double_of_real_exact 3600.0))))))) in
                        (let _jessie_<somenum> = M in
                        (((safe_upd_ __anonstruct_M_1_z1_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                       (C_120:
                       begin
                         (let _jessie_<somenum> =
                         (tmp1 := (C_119:
                                  (JC_<somenum>:
                                  ((single_of_double nearest_even) (C_118:
                                                                   (JC_<somenum>:
                                                                   (((div_double nearest_even) 
                                                                    (C_117:
                                                                    (double_of_single 
                                                                    (C_116:
                                                                    ((safe_acc_ !__anonstruct_L_2_M1z_L_2) L))))) 
                                                                    (double_of_real_exact 3600.0)))))))) in
                         void);
                        [ { } unit reads tmp1
                          { (JC_<somenum>:
                            le_real(abs_real(single_value(tmp1)), 0x1p-20)) } ];
                        void;
                        [ { } unit reads __anonstruct_M_1_z1_M_1,tmp1
                          { (JC_<somenum>:
                            (single_value(tmp1) = single_value(select(__anonstruct_M_1_z1_M_1,
                                                               M)))) } ];
                        void;
                        [ { } unit reads __anonstruct_M_1_z1_M_1
                          { (JC_<somenum>:
                            le_real(abs_real(single_value(select(__anonstruct_M_1_z1_M_1,
                                                          M))),
                            0x1p-20)) } ];
                        begin
                          void;
                         (C_129:
                         begin
                           (let _jessie_<somenum> =
                           (C_127:
                           (JC_<somenum>:
                           ((single_of_double nearest_even) (C_126:
                                                            (JC_<somenum>:
                                                            (((div_double nearest_even) 
                                                              (C_125:
                                                              (double_of_single 
                                                               (C_124:
                                                               ((safe_acc_ !__anonstruct_L_2_Mxx_L_2) L))))) 
                                                             (double_of_real_exact 3600.0))))))) in
                           (let _jessie_<somenum> = M in
                           (((safe_upd_ __anonstruct_M_1_xx_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                          (C_134:
                          begin
                            (let _jessie_<somenum> =
                            (tmp1 := (C_133:
                                     (JC_<somenum>:
                                     ((single_of_double nearest_even) 
                                      (C_132:
                                      (JC_<somenum>:
                                      (((div_double nearest_even) (C_131:
                                                                  (double_of_single 
                                                                   (C_130:
                                                                   ((safe_acc_ !__anonstruct_L_2_Mxx_L_2) L))))) 
                                       (double_of_real_exact 3600.0)))))))) in
                            void);
                           [ { } unit reads tmp1
                             { (JC_<somenum>:
                               le_real(abs_real(single_value(tmp1)), 0x1p-20)) } ];
                           void;
                           [ { } unit reads __anonstruct_M_1_xx_M_1,tmp1
                             { (JC_<somenum>:
                               (single_value(tmp1) = single_value(select(__anonstruct_M_1_xx_M_1,
                                                                  M)))) } ];
                           void;
                           [ { } unit reads __anonstruct_M_1_xx_M_1
                             { (JC_<somenum>:
                               le_real(abs_real(single_value(select(__anonstruct_M_1_xx_M_1,
                                                             M))),
                               0x1p-20)) } ];
                           begin
                             void;
                            (C_143:
                            begin
                              (let _jessie_<somenum> =
                              (C_141:
                              (JC_<somenum>:
                              ((single_of_double nearest_even) (C_140:
                                                               (JC_<somenum>:
                                                               (((div_double nearest_even) 
                                                                 (C_139:
                                                                 (double_of_single 
                                                                  (C_138:
                                                                  ((safe_acc_ !__anonstruct_L_2_Mxz_L_2) L))))) 
                                                                (double_of_real_exact 3600.0))))))) in
                              (let _jessie_<somenum> = M in
                              (((safe_upd_ __anonstruct_M_1_xz_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                             (C_148:
                             begin
                               (let _jessie_<somenum> =
                               (tmp1 := (C_147:
                                        (JC_<somenum>:
                                        ((single_of_double nearest_even) 
                                         (C_146:
                                         (JC_<somenum>:
                                         (((div_double nearest_even) 
                                           (C_145:
                                           (double_of_single (C_144:
                                                             ((safe_acc_ !__anonstruct_L_2_Mxz_L_2) L))))) 
                                          (double_of_real_exact 3600.0)))))))) in
                               void);
                              [ { } unit reads tmp1
                                { (JC_<somenum>:
                                  le_real(abs_real(single_value(tmp1)),
                                  0x1p-20)) } ]; void;
                              [ { } unit reads __anonstruct_M_1_xz_M_1,tmp1
                                { (JC_<somenum>:
                                  (single_value(tmp1) = single_value(
                                                        select(__anonstruct_M_1_xz_M_1,
                                                        M)))) } ]; void;
                              [ { } unit reads __anonstruct_M_1_xz_M_1
                                { (JC_<somenum>:
                                  le_real(abs_real(single_value(select(__anonstruct_M_1_xz_M_1,
                                                                M))),
                                  0x1p-20)) } ];
                              begin
                                void;
                               (C_157:
                               begin
                                 (let _jessie_<somenum> =
                                 (C_155:
                                 (JC_<somenum>:
                                 ((single_of_double nearest_even) (C_154:
                                                                  (JC_<somenum>:
                                                                  (((div_double nearest_even) 
                                                                    (C_153:
                                                                    (double_of_single 
                                                                    (C_152:
                                                                    ((safe_acc_ !__anonstruct_L_2_Myy_L_2) L))))) 
                                                                   (double_of_real_exact 3600.0))))))) in
                                 (let _jessie_<somenum> = M in
                                 (((safe_upd_ __anonstruct_M_1_yy_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                                (C_162:
                                begin
                                  (let _jessie_<somenum> =
                                  (tmp1 := (C_161:
                                           (JC_<somenum>:
                                           ((single_of_double nearest_even) 
                                            (C_160:
                                            (JC_<somenum>:
                                            (((div_double nearest_even) 
                                              (C_159:
                                              (double_of_single (C_158:
                                                                ((safe_acc_ !__anonstruct_L_2_Myy_L_2) L))))) 
                                             (double_of_real_exact 3600.0)))))))) in
                                  void);
                                 [ { } unit reads tmp1
                                   { (JC_<somenum>:
                                     le_real(abs_real(single_value(tmp1)),
                                     0x1p-20)) } ]; void;
                                 [ { } unit
                                   reads __anonstruct_M_1_yy_M_1,tmp1
                                   { (JC_<somenum>:
                                     (single_value(tmp1) = single_value(
                                                           select(__anonstruct_M_1_yy_M_1,
                                                           M)))) } ]; void;
                                 [ { } unit reads __anonstruct_M_1_yy_M_1
                                   { (JC_<somenum>:
                                     le_real(abs_real(single_value(select(__anonstruct_M_1_yy_M_1,
                                                                   M))),
                                     0x1p-20)) } ];
                                 begin
                                   void;
                                  (C_171:
                                  begin
                                    (let _jessie_<somenum> =
                                    (C_169:
                                    (JC_<somenum>:
                                    ((single_of_double nearest_even) 
                                     (C_168:
                                     (JC_<somenum>:
                                     (((div_double nearest_even) (C_167:
                                                                 (double_of_single 
                                                                  (C_166:
                                                                  ((safe_acc_ !__anonstruct_L_2_My_L_2) L))))) 
                                      (double_of_real_exact 3600.0))))))) in
                                    (let _jessie_<somenum> = M in
                                    (((safe_upd_ __anonstruct_M_1_y_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                                   (C_176:
                                   begin
                                     (let _jessie_<somenum> =
                                     (tmp1 := (C_175:
                                              (JC_<somenum>:
                                              ((single_of_double nearest_even) 
                                               (C_174:
                                               (JC_<somenum>:
                                               (((div_double nearest_even) 
                                                 (C_173:
                                                 (double_of_single (C_172:
                                                                   ((safe_acc_ !__anonstruct_L_2_My_L_2) L))))) 
                                                (double_of_real_exact 3600.0)))))))) in
                                     void);
                                    [ { } unit reads tmp1
                                      { (JC_<somenum>:
                                        le_real(abs_real(single_value(tmp1)),
                                        0x1p-20)) } ]; void;
                                    [ { } unit
                                      reads __anonstruct_M_1_y_M_1,tmp1
                                      { (JC_<somenum>:
                                        (single_value(tmp1) = single_value(
                                                              select(__anonstruct_M_1_y_M_1,
                                                              M)))) } ];
                                    void;
                                    [ { } unit reads __anonstruct_M_1_y_M_1
                                      { (JC_<somenum>:
                                        le_real(abs_real(single_value(
                                                         select(__anonstruct_M_1_y_M_1,
                                                         M))),
                                        0x1p-20)) } ];
                                    begin
                                      void;
                                     (C_185:
                                     begin
                                       (let _jessie_<somenum> =
                                       (C_183:
                                       (JC_<somenum>:
                                       ((single_of_double nearest_even) 
                                        (C_182:
                                        (JC_<somenum>:
                                        (((div_double nearest_even) (C_181:
                                                                    (double_of_single 
                                                                    (C_180:
                                                                    ((safe_acc_ !__anonstruct_L_2_M1r_L_2) L))))) 
                                         (double_of_real_exact 3600.0))))))) in
                                       (let _jessie_<somenum> = M in
                                       (((safe_upd_ __anonstruct_M_1_r1_M_1) _jessie_<somenum>) _jessie_<somenum>)));
                                      (C_190:
                                      begin
                                        (let _jessie_<somenum> =
                                        (tmp1 := (C_189:
                                                 (JC_<somenum>:
                                                 ((single_of_double nearest_even) 
                                                  (C_188:
                                                  (JC_<somenum>:
                                                  (((div_double nearest_even) 
                                                    (C_187:
                                                    (double_of_single 
                                                     (C_186:
                                                     ((safe_acc_ !__anonstruct_L_2_M1r_L_2) L))))) 
                                                   (double_of_real_exact 3600.0)))))))) in
                                        void);
                                       [ { } unit reads tmp1
                                         { (JC_<somenum>:
                                           le_real(abs_real(single_value(tmp1)),
                                           0x1p-20)) } ]; void;
                                       [ { } unit
                                         reads __anonstruct_M_1_r1_M_1,tmp1
                                         { (JC_<somenum>:
                                           (single_value(tmp1) = single_value(
                                                                 select(__anonstruct_M_1_r1_M_1,
                                                                 M)))) } ];
                                       void;
                                       [ { } unit
                                         reads __anonstruct_M_1_r1_M_1
                                         { (JC_<somenum>:
                                           le_real(abs_real(single_value(
                                                            select(__anonstruct_M_1_r1_M_1,
                                                            M))),
                                           0x1p-20)) } ];
                                       begin
                                         void;
                                        (C_219:
                                        begin
                                          (let _jessie_<somenum> =
                                          (C_217:
                                          (JC_<somenum>:
                                          (((sub_double nearest_even) 
                                            (C_216:
                                            (JC_<somenum>:
                                            (((add_double nearest_even) 
                                              (C_215:
                                              (JC_<somenum>:
                                              (((add_double nearest_even) 
                                                (C_214:
                                                (JC_<somenum>:
                                                (((mul_double nearest_even) 
                                                  (C_213:
                                                  (double_of_single (C_212:
                                                                    ((safe_acc_ !__anonstruct_M_1_x1_M_1) M))))) 
                                                 (JC_<somenum>:
                                                 ((double_of_real nearest_even) 0.015625)))))) 
                                               (C_211:
                                               (JC_<somenum>:
                                               (((div_double nearest_even) 
                                                 (C_210:
                                                 (JC_<somenum>:
                                                 (((mul_double nearest_even) 
                                                   (C_209:
                                                   (double_of_single 
                                                    (C_208:
                                                    ((safe_acc_ !__anonstruct_M_1_xx_M_1) M))))) !Adcc_Vx)))) 
                                                (C_207:
                                                (double_of_single !Nav_G))))))))) 
                                             (C_206:
                                             (JC_<somenum>:
                                             (((div_double nearest_even) 
                                               (C_205:
                                               (JC_<somenum>:
                                               (((mul_double nearest_even) 
                                                 (C_204:
                                                 (double_of_single (C_203:
                                                                   ((safe_acc_ !__anonstruct_M_1_xz_M_1) M))))) !Adcc_Vz)))) 
                                              (C_202:
                                              (double_of_single !Nav_G))))))))) 
                                           (C_201:
                                           (JC_<somenum>:
                                           (((div_double nearest_even) 
                                             (C_200:
                                             (JC_<somenum>:
                                             (((mul_double nearest_even) 
                                               (C_199:
                                               (JC_<somenum>:
                                               (((mul_double nearest_even) 
                                                 (C_198:
                                                 (double_of_single Wae))) !Adcc_Vx)))) !Adcc_Vy)))) 
                                            (C_197:
                                            (JC_<somenum>:
                                            (((mul_double nearest_even) 
                                              (C_196:
                                              (JC_<somenum>:
                                              (((mul_double nearest_even) 
                                                (JC_<somenum>:
                                                ((double_of_real nearest_even) 0.015625))) 
                                               (C_195:
                                               (double_of_single !Nav_G)))))) 
                                             (C_194:
                                             (double_of_single !Nav_G))))))))))) in
                                          (let _jessie_<somenum> = D in
                                          (((safe_upd_ __anonstruct_COMPVETOR_3_x_0_D_3) _jessie_<somenum>) _jessie_<somenum>)));
                                         (C_244:
                                         begin
                                           (let _jessie_<somenum> =
                                           (tmp2 := (C_243:
                                                    (JC_<somenum>:
                                                    (((sub_double nearest_even) 
                                                      (C_242:
                                                      (JC_<somenum>:
                                                      (((add_double nearest_even) 
                                                        (C_241:
                                                        (JC_<somenum>:
                                                        (((add_double nearest_even) 
                                                          (C_240:
                                                          (JC_<somenum>:
                                                          (((mul_double nearest_even) 
                                                            (C_239:
                                                            (double_of_single 
                                                             (C_238:
                                                             ((safe_acc_ !__anonstruct_M_1_x1_M_1) M))))) 
                                                           (JC_<somenum>:
                                                           ((double_of_real nearest_even) 0.015625)))))) 
                                                         (C_237:
                                                         (JC_<somenum>:
                                                         (((div_double nearest_even) 
                                                           (C_236:
                                                           (JC_<somenum>:
                                                           (((mul_double nearest_even) 
                                                             (C_235:
                                                             (double_of_single 
                                                              (C_234:
                                                              ((safe_acc_ !__anonstruct_M_1_xx_M_1) M))))) !Adcc_Vx)))) 
                                                          (C_233:
                                                          (double_of_single !Nav_G))))))))) 
                                                       (C_232:
                                                       (JC_<somenum>:
                                                       (((div_double nearest_even) 
                                                         (C_231:
                                                         (JC_<somenum>:
                                                         (((mul_double nearest_even) 
                                                           (C_230:
                                                           (double_of_single 
                                                            (C_229:
                                                            ((safe_acc_ !__anonstruct_M_1_xz_M_1) M))))) !Adcc_Vz)))) 
                                                        (C_228:
                                                        (double_of_single !Nav_G))))))))) 
                                                     (C_227:
                                                     (JC_<somenum>:
                                                     (((div_double nearest_even) 
                                                       (C_226:
                                                       (JC_<somenum>:
                                                       (((mul_double nearest_even) 
                                                         (C_225:
                                                         (JC_<somenum>:
                                                         (((mul_double nearest_even) 
                                                           (C_224:
                                                           (double_of_single Wae))) !Adcc_Vx)))) !Adcc_Vy)))) 
                                                      (C_223:
                                                      (JC_<somenum>:
                                                      (((mul_double nearest_even) 
                                                        (C_222:
                                                        (JC_<somenum>:
                                                        (((mul_double nearest_even) 
                                                          (JC_<somenum>:
                                                          ((double_of_real nearest_even) 0.015625))) 
                                                         (C_221:
                                                         (double_of_single !Nav_G)))))) 
                                                       (C_220:
                                                       (double_of_single !Nav_G)))))))))))) in
                                           void);
                                          [ { } unit reads tmp2
                                            { (JC_<somenum>:
                                              le_real(abs_real(double_value(tmp2)),
                                              0x1p-20)) } ]; void;
                                          [ { } unit
                                            reads __anonstruct_COMPVETOR_3_x_0_D_3,tmp2
                                            { (JC_<somenum>:
                                              (double_value(select(__anonstruct_COMPVETOR_3_x_0_D_3,
                                                            D)) = round_single(nearest_even,
                                                                  double_value(tmp2)))) } ];
                                          void;
                                          [ { } unit
                                            reads __anonstruct_COMPVETOR_3_x_0_D_3
                                            { (JC_<somenum>:
                                              le_real(abs_real(double_value(
                                                               select(__anonstruct_COMPVETOR_3_x_0_D_3,
                                                               D))),
                                              0x1p-20)) } ];
                                          begin
                                            void;
                                           (C_250:
                                           begin
                                             (let _jessie_<somenum> =
                                             (C_248:
                                             (double_of_single !Nav_G)) in
                                             (let _jessie_<somenum> = D in
                                             (((safe_upd_ __anonstruct_COMPVETOR_3_y_0_D_3) _jessie_<somenum>) _jessie_<somenum>)));
                                            [ { } unit
                                              reads __anonstruct_COMPVETOR_3_x_0_D_3
                                              { (JC_<somenum>:
                                                (gt_real(abs_real(double_value(
                                                                  select(__anonstruct_COMPVETOR_3_x_0_D_3,
                                                                  D))),
                                                 0.0)
                                                or gt_real(abs_real(double_value(
                                                                    select(__anonstruct_COMPVETOR_3_x_0_D_3,
                                                                    D))),
                                                   0.0))) } ];
                                            begin
                                              void;
                                             (C_259:
                                             begin
                                               (let _jessie_<somenum> =
                                               (aux := (C_258:
                                                       (JC_<somenum>:
                                                       (((add_double nearest_even) 
                                                         (C_257:
                                                         (JC_<somenum>:
                                                         (((mul_double nearest_even) 
                                                           (C_256:
                                                           ((safe_acc_ !__anonstruct_COMPVETOR_3_x_0_D_3) D))) 
                                                          (C_255:
                                                          ((safe_acc_ !__anonstruct_COMPVETOR_3_x_0_D_3) D)))))) 
                                                        (C_254:
                                                        (JC_<somenum>:
                                                        (((mul_double nearest_even) 
                                                          (C_253:
                                                          ((safe_acc_ !__anonstruct_COMPVETOR_3_y_0_D_3) D))) 
                                                         (C_252:
                                                         ((safe_acc_ !__anonstruct_COMPVETOR_3_y_0_D_3) D))))))))) in
                                               void);
                                              [ { } unit reads aux
                                                { (JC_<somenum>:
                                                  gt_real(double_value(aux),
                                                  0.0)) } ];
                                              begin
                                                void;
                                               (C_262:
                                               begin
                                                 (let _jessie_<somenum> =
                                                 (R := (C_261:
                                                       (let _jessie_<somenum> =
                                                       !aux in
                                                       (JC_<somenum>:
                                                       (sqrt_requires _jessie_<somenum>))))) in
                                                 void);
                                                [ { } unit reads R
                                                  { (JC_<somenum>:
                                                    gt_real(double_value(R),
                                                    0.0)) } ]; void;
                                                [ { } unit reads R
                                                  { (JC_<somenum>:
                                                    (sub_real(double_value(R),
                                                     10.3020010835769) <> 0.0)) } ];
                                                begin
                                                  void;
                                                 (C_277:
                                                 begin
                                                   (let _jessie_<somenum> =
                                                   (result_0 := (C_276:
                                                                (JC_<somenum>:
                                                                ((single_of_double nearest_even) 
                                                                 (C_275:
                                                                 (JC_<somenum>:
                                                                 (((div_double nearest_even) 
                                                                   (C_274:
                                                                   (double_of_single 
                                                                    (C_273:
                                                                    (JC_<somenum>:
                                                                    (((mul_single nearest_even) 
                                                                    (C_272:
                                                                    (JC_<somenum>:
                                                                    ((single_of_double nearest_even) 
                                                                    (JC_<somenum>:
                                                                    ((double_of_real nearest_even) 0.99838542645959)))))) !Grav)))))) 
                                                                  (C_271:
                                                                  (JC_<somenum>:
                                                                  (((mul_double nearest_even) 
                                                                    (C_270:
                                                                    (JC_<somenum>:
                                                                    (((sub_double nearest_even) !R) 
                                                                    (C_269:
                                                                    (double_of_single 
                                                                    (C_268:
                                                                    (JC_<somenum>:
                                                                    ((single_of_double nearest_even) 
                                                                    (JC_<somenum>:
                                                                    ((double_of_real nearest_even) 10.3020010835769))))))))))) 
                                                                   (C_267:
                                                                   (JC_<somenum>:
                                                                   (((sub_double nearest_even) !R) 
                                                                    (C_266:
                                                                    (double_of_single 
                                                                    (C_265:
                                                                    (JC_<somenum>:
                                                                    ((single_of_double nearest_even) 
                                                                    (JC_<somenum>:
                                                                    ((double_of_real nearest_even) 10.3020010835769)))))))))))))))))))) in
                                                   void); (raise Return) end)
                                                end end) end end) end end)
                                          end end) end) end end) end) end end)
                                  end) end end) end) end end) end) end end)
                         end) end end) end) end end) end) end end) end) end
              end) end) end end) end end) end end) end end)))))))))));
    (raise Return) end with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>: valid_Vel_Lin(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table))
    and ((JC_<somenum>: valid_D(__anonstruct_COMPVETOR_3_D_3_alloc_table))
        and ((JC_<somenum>: valid_L(__anonstruct_L_2_L_2_alloc_table))
            and (JC_<somenum>: valid_M(__anonstruct_M_1_M_1_alloc_table)))))) }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C siteZero2.jessie --quiet -f siteZero2.makefile project
why --project [...] why/siteZero2.why
<project name="siteZero2" context="why/siteZero2_ctx.why">
  <function name="Function Test">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/siteZero2_po1.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "75" begin = "14" end = "52"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po2.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "79" begin = "14" end = "23"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po3.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "81" begin = "14" end = "26"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po4.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "83" begin = "14" end = "45"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po5.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "85" begin = "15" end = "26"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po6.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "88" begin = "14" end = "28"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po7.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "93" begin = "14" end = "28"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po8.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "96" begin = "12" end = "206"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po9.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "96" begin = "12" end = "206"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po10.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "96" begin = "12" end = "206"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po11.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "96" begin = "12" end = "206"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po12.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "96" begin = "12" end = "206"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po13.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "96" begin = "12" end = "206"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po14.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "96" begin = "12" end = "206"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po15.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "96" begin = "12" end = "206"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po16.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "100" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po17.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "101" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po18.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "102" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po19.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "106" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po20.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "107" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po21.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "108" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po22.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "112" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po23.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "113" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po24.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "114" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po25.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "118" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po26.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "119" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po27.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "120" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po28.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "124" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po29.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "125" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po30.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "126" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po31.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "130" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po32.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "131" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po33.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "132" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po34.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "136" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po35.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "137" begin = "13" end = "24"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po36.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "138" begin = "13" end = "33"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po37.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "142" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po38.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "143" begin = "13" end = "25"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po39.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "144" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po40.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "149" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po41.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "150" begin = "13" end = "59"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po42.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "151" begin = "13" end = "33"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po43.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "155" begin = "13" end = "47"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po44.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "158" begin = "13" end = "22"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po45.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "160" begin = "13" end = "20"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/siteZero2_po46.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "161" begin = "13" end = "39"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/siteZero2_po47.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.jessie/siteZero2.jc" line = "195" begin = "29" end = "54"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po48.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "74" begin = "18" end = "31"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po49.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "77" begin = "10" end = "29"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po50.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "77" begin = "32" end = "51"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po51.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "77" begin = "10" end = "51"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po52.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "77" begin = "54" end = "73"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po53.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "77" begin = "10" end = "73"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po54.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "80" begin = "13" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/siteZero2_po55.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "80" begin = "13" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/siteZero2_po56.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "80" begin = "13" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/siteZero2_po57.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "80" begin = "13" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/siteZero2_po58.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "80" begin = "13" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/siteZero2_po59.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "80" begin = "13" end = "22"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po60.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.jessie/siteZero2.jc" line = "229" begin = "50" end = "78"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po61.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "84" begin = "20" end = "36"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po62.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "84" begin = "13" end = "43"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po63.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.jessie/siteZero2.jc" line = "232" begin = "61" end = "89"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po64.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "84" begin = "65" end = "81"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po65.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "84" begin = "49" end = "81"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po66.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.jessie/siteZero2.jc" line = "234" begin = "62" end = "90"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po67.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "84" begin = "102" end = "118"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po68.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "84" begin = "86" end = "118"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po69.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "84" begin = "48" end = "119"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po70.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "84" begin = "13" end = "121"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po71.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "84" begin = "13" end = "121"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po72.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "87" begin = "35" end = "45"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po73.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "87" begin = "16" end = "45"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po74.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "87" begin = "51" end = "69"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po75.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "87" begin = "79" end = "89"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po76.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "87" begin = "51" end = "89"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po77.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "87" begin = "15" end = "90"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po78.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "87" begin = "94" end = "112"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po79.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "87" begin = "122" end = "132"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po80.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "87" begin = "94" end = "132"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po81.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "87" begin = "15" end = "133"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po82.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "87" begin = "14" end = "144"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po83.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "87" begin = "14" end = "144"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po84.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "90" begin = "34" end = "44"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po85.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "90" begin = "15" end = "44"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po86.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "90" begin = "50" end = "67"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po87.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "90" begin = "77" end = "87"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po88.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "90" begin = "50" end = "87"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po89.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "90" begin = "14" end = "88"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po90.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "90" begin = "13" end = "99"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po91.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "90" begin = "13" end = "99"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po92.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "92" begin = "34" end = "44"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po93.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "92" begin = "15" end = "44"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po94.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "92" begin = "14" end = "52"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po95.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "92" begin = "14" end = "52"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po96.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "98" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po97.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "98" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po98.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "98" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po99.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "99" begin = "25" end = "39"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po100.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "99" begin = "25" end = "39"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po101.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "99" begin = "25" end = "39"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po102.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "104" begin = "11" end = "25"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po103.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "104" begin = "11" end = "25"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po104.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "104" begin = "11" end = "25"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po105.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "105" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po106.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "105" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po107.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "105" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po108.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "110" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po109.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "110" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po110.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "110" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po111.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "111" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po112.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "111" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po113.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "111" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po114.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "116" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po115.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "116" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po116.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "116" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po117.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "117" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po118.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "117" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po119.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "117" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po120.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "122" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po121.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "122" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po122.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "122" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po123.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "123" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po124.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "123" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po125.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "123" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po126.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "128" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po127.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "128" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po128.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "128" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po129.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "129" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po130.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "129" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po131.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "129" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po132.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "134" begin = "8" end = "21"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po133.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "134" begin = "8" end = "21"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po134.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "134" begin = "8" end = "21"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po135.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "135" begin = "19" end = "32"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po136.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "135" begin = "19" end = "32"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po137.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "135" begin = "19" end = "32"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po138.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "140" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po139.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "140" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po140.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "140" begin = "9" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po141.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "141" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po142.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "141" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po143.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "141" begin = "19" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po144.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.jessie/siteZero2.jc" line = "477" begin = "66" end = "86"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po145.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "9" end = "24"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po146.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "29" end = "42"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po147.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "29" end = "50"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po148.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "29" end = "50"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po149.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "8" end = "51"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po150.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "55" end = "69"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po151.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "55" end = "77"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po152.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "55" end = "77"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po153.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "8" end = "78"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po154.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "82" end = "95"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po155.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "82" end = "105"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po156.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.jessie/siteZero2.jc" line = "494" begin = "67" end = "87"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po157.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "109" end = "125"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po158.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "109" end = "133"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po159.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "82" end = "134"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po160.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "82" end = "134"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po161.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "146" begin = "8" end = "135"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po162.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.jessie/siteZero2.jc" line = "499" begin = "64" end = "84"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po163.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "27" end = "42"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po164.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "47" end = "61"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po165.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "47" end = "69"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po166.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "47" end = "69"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po167.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "26" end = "70"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po168.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "74" end = "88"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po169.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "74" end = "96"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po170.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "74" end = "96"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po171.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "26" end = "97"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po172.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "101" end = "114"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po173.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "101" end = "124"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po174.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.jessie/siteZero2.jc" line = "512" begin = "65" end = "85"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po175.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "127" end = "143"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po176.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "127" end = "151"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po177.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "101" end = "152"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po178.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "101" end = "152"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po179.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "148" begin = "26" end = "153"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po180.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "156" begin = "9" end = "18"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po181.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "156" begin = "23" end = "32"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po182.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "156" begin = "8" end = "33"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po183.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "159" begin = "8" end = "17"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/siteZero2_po184.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "159" begin = "8" end = "17"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/siteZero2_po185.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "159" begin = "8" end = "17"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/siteZero2_po186.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "159" begin = "8" end = "17"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/siteZero2_po187.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "159" begin = "8" end = "17"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/siteZero2_po188.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.jessie/siteZero2.jc" line = "564" begin = "75" end = "103"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po189.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "163" begin = "18" end = "34"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po190.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "163" begin = "11" end = "41"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po191.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.jessie/siteZero2.jc" line = "568" begin = "77" end = "105"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po192.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "163" begin = "58" end = "74"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po193.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "163" begin = "47" end = "74"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po194.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.jessie/siteZero2.jc" line = "571" begin = "78" end = "106"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po195.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "163" begin = "90" end = "106"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po196.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "163" begin = "79" end = "106"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po197.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "163" begin = "46" end = "107"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po198.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "163" begin = "11" end = "109"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po199.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "163" begin = "11" end = "109"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po200.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "163" begin = "11" end = "109"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/siteZero2_po201.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "66" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/siteZero2_po202.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "66" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/siteZero2_po203.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "66" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/siteZero2_po204.why">
      <location file = "PPCHOME/tests/jessie/siteZero2.c" line = "66" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type mode =
  | nearest_even
  | to_zero
  | up
  | down
  | nearest_away

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom exact_round_double_for_doubles:
  (forall x:double.
    (forall m:mode. (round_double(m, double_value(x)) = double_value(x))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom exact_round_single_for_singles:
  (forall x:single.
    (forall m:mode. (round_single(m, single_value(x)) = single_value(x))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

axiom single_value_is_bounded:
  (forall x:single. (abs_real(single_value(x)) <= max_single))

axiom double_value_is_bounded:
  (forall x:double. (abs_real(double_value(x)) <= max_double))

predicate single_of_real_post(m: mode, x: real, res: single) =
  ((single_value(res) = round_single(m, x)) and
   ((single_exact(res) = x) and (single_model(res) = x)))

predicate single_of_double_post(m: mode, x: double, res: single) =
  ((single_value(res) = round_single(m, double_value(x))) and
   ((single_exact(res) = double_exact(x)) and
    (single_model(res) = double_model(x))))

predicate add_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) + single_value(y)))) and
   ((single_exact(res) = (single_exact(x) + single_exact(y))) and
    (single_model(res) = (single_model(x) + single_model(y)))))

predicate sub_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) - single_value(y)))) and
   ((single_exact(res) = (single_exact(x) - single_exact(y))) and
    (single_model(res) = (single_model(x) - single_model(y)))))

predicate mul_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) * single_value(y)))) and
   ((single_exact(res) = (single_exact(x) * single_exact(y))) and
    (single_model(res) = (single_model(x) * single_model(y)))))

predicate div_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m, div_real(single_value(x),
   single_value(y)))) and
   ((single_exact(res) = div_real(single_exact(x), single_exact(y))) and
    (single_model(res) = div_real(single_model(x), single_model(y)))))

predicate sqrt_single_post(m: mode, x: single, res: single) =
  ((single_value(res) = round_single(m, sqrt_real(single_value(x)))) and
   ((single_exact(res) = sqrt_real(single_exact(x))) and
    (single_model(res) = sqrt_real(single_model(x)))))

predicate neg_single_post(x: single, res: single) =
  ((single_value(res) = (-single_value(x))) and
   ((single_exact(res) = (-single_exact(x))) and
    (single_model(res) = (-single_model(x)))))

predicate abs_single_post(x: single, res: single) =
  ((single_value(res) = abs_real(single_value(x))) and
   ((single_exact(res) = abs_real(single_exact(x))) and
    (single_model(res) = abs_real(single_model(x)))))

predicate double_of_real_post(m: mode, x: real, res: double) =
  ((double_value(res) = round_double(m, x)) and
   ((double_exact(res) = x) and (double_model(res) = x)))

predicate double_of_single_post(x: single, res: double) =
  ((double_value(res) = single_value(x)) and
   ((double_exact(res) = single_exact(x)) and
    (double_model(res) = single_model(x))))

predicate add_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) + double_value(y)))) and
   ((double_exact(res) = (double_exact(x) + double_exact(y))) and
    (double_model(res) = (double_model(x) + double_model(y)))))

predicate sub_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) - double_value(y)))) and
   ((double_exact(res) = (double_exact(x) - double_exact(y))) and
    (double_model(res) = (double_model(x) - double_model(y)))))

predicate mul_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) * double_value(y)))) and
   ((double_exact(res) = (double_exact(x) * double_exact(y))) and
    (double_model(res) = (double_model(x) * double_model(y)))))

predicate div_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m, div_real(double_value(x),
   double_value(y)))) and
   ((double_exact(res) = div_real(double_exact(x), double_exact(y))) and
    (double_model(res) = div_real(double_model(x), double_model(y)))))

predicate sqrt_double_post(m: mode, x: double, res: double) =
  ((double_value(res) = round_double(m, sqrt_real(double_value(x)))) and
   ((double_exact(res) = sqrt_real(double_exact(x))) and
    (double_model(res) = sqrt_real(double_model(x)))))

predicate neg_double_post(x: double, res: double) =
  ((double_value(res) = (-double_value(x))) and
   ((double_exact(res) = (-double_exact(x))) and
    (double_model(res) = (-double_model(x)))))

predicate abs_double_post(x: double, res: double) =
  ((double_value(res) = abs_real(double_value(x))) and
   ((double_exact(res) = abs_real(double_exact(x))) and
    (double_model(res) = abs_real(double_model(x)))))

type Cmd_6

type D_3

type Escala_4

type L_2

type M_1

type Vel_Lin_5

type __anonstruct_COMPVETOR_3

type __anonstruct_Cmd_6

type __anonstruct_Escala_4

type __anonstruct_L_2

type __anonstruct_M_1

type __anonstruct_Vel_Lin_5

type charP

type int16

type int8

type padding

type uint8

type unsigned_charP

type voidP

logic Cmd : __anonstruct_Cmd_6 pointer

logic D : __anonstruct_COMPVETOR_3 pointer

logic Escala : __anonstruct_Escala_4 pointer

logic L : __anonstruct_L_2 pointer

logic M : __anonstruct_M_1 pointer

logic Vel_Lin : __anonstruct_Vel_Lin_5 pointer

logic Wae : single

logic __anonstruct_COMPVETOR_3_tag : __anonstruct_COMPVETOR_3 tag_id

axiom __anonstruct_COMPVETOR_3_int:
  (int_of_tag(__anonstruct_COMPVETOR_3_tag) = 1)

logic __anonstruct_COMPVETOR_3_of_pointer_address : unit pointer -> __anonstruct_COMPVETOR_3 pointer

axiom __anonstruct_COMPVETOR_3_of_pointer_address_of_pointer_addr:
  (forall p:__anonstruct_COMPVETOR_3 pointer.
    (p = __anonstruct_COMPVETOR_3_of_pointer_address(pointer_address(p))))

axiom __anonstruct_COMPVETOR_3_parenttag_bottom:
  parenttag(__anonstruct_COMPVETOR_3_tag, bottom_tag)

axiom __anonstruct_COMPVETOR_3_tags:
  (forall x:__anonstruct_COMPVETOR_3 pointer.
    (forall __anonstruct_COMPVETOR_3_tag_table:__anonstruct_COMPVETOR_3 tag_table.
      instanceof(__anonstruct_COMPVETOR_3_tag_table, x,
      __anonstruct_COMPVETOR_3_tag)))

logic __anonstruct_Cmd_6_tag : __anonstruct_Cmd_6 tag_id

axiom __anonstruct_Cmd_6_int: (int_of_tag(__anonstruct_Cmd_6_tag) = 1)

logic __anonstruct_Cmd_6_of_pointer_address : unit pointer -> __anonstruct_Cmd_6 pointer

axiom __anonstruct_Cmd_6_of_pointer_address_of_pointer_addr:
  (forall p:__anonstruct_Cmd_6 pointer.
    (p = __anonstruct_Cmd_6_of_pointer_address(pointer_address(p))))

axiom __anonstruct_Cmd_6_parenttag_bottom: parenttag(__anonstruct_Cmd_6_tag,
  bottom_tag)

axiom __anonstruct_Cmd_6_tags:
  (forall x:__anonstruct_Cmd_6 pointer.
    (forall __anonstruct_Cmd_6_tag_table:__anonstruct_Cmd_6 tag_table.
      instanceof(__anonstruct_Cmd_6_tag_table, x, __anonstruct_Cmd_6_tag)))

logic __anonstruct_Escala_4_tag : __anonstruct_Escala_4 tag_id

axiom __anonstruct_Escala_4_int: (int_of_tag(__anonstruct_Escala_4_tag) = 1)

logic __anonstruct_Escala_4_of_pointer_address : unit pointer -> __anonstruct_Escala_4 pointer

axiom __anonstruct_Escala_4_of_pointer_address_of_pointer_addr:
  (forall p:__anonstruct_Escala_4 pointer.
    (p = __anonstruct_Escala_4_of_pointer_address(pointer_address(p))))

axiom __anonstruct_Escala_4_parenttag_bottom:
  parenttag(__anonstruct_Escala_4_tag, bottom_tag)

axiom __anonstruct_Escala_4_tags:
  (forall x:__anonstruct_Escala_4 pointer.
    (forall __anonstruct_Escala_4_tag_table:__anonstruct_Escala_4 tag_table.
      instanceof(__anonstruct_Escala_4_tag_table, x,
      __anonstruct_Escala_4_tag)))

logic __anonstruct_L_2_tag : __anonstruct_L_2 tag_id

axiom __anonstruct_L_2_int: (int_of_tag(__anonstruct_L_2_tag) = 1)

logic __anonstruct_L_2_of_pointer_address : unit pointer -> __anonstruct_L_2 pointer

axiom __anonstruct_L_2_of_pointer_address_of_pointer_addr:
  (forall p:__anonstruct_L_2 pointer.
    (p = __anonstruct_L_2_of_pointer_address(pointer_address(p))))

axiom __anonstruct_L_2_parenttag_bottom: parenttag(__anonstruct_L_2_tag,
  bottom_tag)

axiom __anonstruct_L_2_tags:
  (forall x:__anonstruct_L_2 pointer.
    (forall __anonstruct_L_2_tag_table:__anonstruct_L_2 tag_table.
      instanceof(__anonstruct_L_2_tag_table, x, __anonstruct_L_2_tag)))

logic __anonstruct_M_1_tag : __anonstruct_M_1 tag_id

axiom __anonstruct_M_1_int: (int_of_tag(__anonstruct_M_1_tag) = 1)

logic __anonstruct_M_1_of_pointer_address : unit pointer -> __anonstruct_M_1 pointer

axiom __anonstruct_M_1_of_pointer_address_of_pointer_addr:
  (forall p:__anonstruct_M_1 pointer.
    (p = __anonstruct_M_1_of_pointer_address(pointer_address(p))))

axiom __anonstruct_M_1_parenttag_bottom: parenttag(__anonstruct_M_1_tag,
  bottom_tag)

axiom __anonstruct_M_1_tags:
  (forall x:__anonstruct_M_1 pointer.
    (forall __anonstruct_M_1_tag_table:__anonstruct_M_1 tag_table.
      instanceof(__anonstruct_M_1_tag_table, x, __anonstruct_M_1_tag)))

logic __anonstruct_Vel_Lin_5_tag : __anonstruct_Vel_Lin_5 tag_id

axiom __anonstruct_Vel_Lin_5_int:
  (int_of_tag(__anonstruct_Vel_Lin_5_tag) = 1)

logic __anonstruct_Vel_Lin_5_of_pointer_address : unit pointer -> __anonstruct_Vel_Lin_5 pointer

axiom __anonstruct_Vel_Lin_5_of_pointer_address_of_pointer_addr:
  (forall p:__anonstruct_Vel_Lin_5 pointer.
    (p = __anonstruct_Vel_Lin_5_of_pointer_address(pointer_address(p))))

axiom __anonstruct_Vel_Lin_5_parenttag_bottom:
  parenttag(__anonstruct_Vel_Lin_5_tag, bottom_tag)

axiom __anonstruct_Vel_Lin_5_tags:
  (forall x:__anonstruct_Vel_Lin_5 pointer.
    (forall __anonstruct_Vel_Lin_5_tag_table:__anonstruct_Vel_Lin_5 tag_table.
      instanceof(__anonstruct_Vel_Lin_5_tag_table, x,
      __anonstruct_Vel_Lin_5_tag)))

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic integer_of_int16 : int16 -> int

predicate eq_int16(x: int16, y: int16) =
  (integer_of_int16(x) = integer_of_int16(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint8 : uint8 -> int

predicate eq_uint8(x: uint8, y: uint8) =
  (integer_of_uint8(x) = integer_of_uint8(y))

logic int16_of_integer : int -> int16

axiom int16_coerce:
  (forall x:int.
    ((((-32768) <= x) and (x <= 32767)) ->
     (integer_of_int16(int16_of_integer(x)) = x)))

axiom int16_extensionality:
  (forall x:int16.
    (forall y:int16 [(integer_of_int16(x) = integer_of_int16(y))].
      ((integer_of_int16(x) = integer_of_int16(y)) -> (x = y))))

axiom int16_range:
  (forall x:int16.
    (((-32768) <= integer_of_int16(x)) and (integer_of_int16(x) <= 32767)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8 [(integer_of_int8(x) = integer_of_int8(y))].
      ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct___anonstruct_COMPVETOR_3(p: __anonstruct_COMPVETOR_3 pointer,
  a: int,
  __anonstruct_COMPVETOR_3_alloc_table: __anonstruct_COMPVETOR_3 alloc_table) =
  (offset_min(__anonstruct_COMPVETOR_3_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_Cmd_6(p: __anonstruct_Cmd_6 pointer,
  a: int, __anonstruct_Cmd_6_alloc_table: __anonstruct_Cmd_6 alloc_table) =
  (offset_min(__anonstruct_Cmd_6_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_Escala_4(p: __anonstruct_Escala_4 pointer,
  a: int,
  __anonstruct_Escala_4_alloc_table: __anonstruct_Escala_4 alloc_table) =
  (offset_min(__anonstruct_Escala_4_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_L_2(p: __anonstruct_L_2 pointer,
  a: int, __anonstruct_L_2_alloc_table: __anonstruct_L_2 alloc_table) =
  (offset_min(__anonstruct_L_2_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_M_1(p: __anonstruct_M_1 pointer,
  a: int, __anonstruct_M_1_alloc_table: __anonstruct_M_1 alloc_table) =
  (offset_min(__anonstruct_M_1_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_Vel_Lin_5(p: __anonstruct_Vel_Lin_5 pointer,
  a: int,
  __anonstruct_Vel_Lin_5_alloc_table: __anonstruct_Vel_Lin_5 alloc_table) =
  (offset_min(__anonstruct_Vel_Lin_5_alloc_table, p) <= a)

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of___anonstruct_COMPVETOR_3_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(__anonstruct_COMPVETOR_3_of_pointer_address(p))))

axiom pointer_addr_of___anonstruct_Cmd_6_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(__anonstruct_Cmd_6_of_pointer_address(p))))

axiom pointer_addr_of___anonstruct_Escala_4_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(__anonstruct_Escala_4_of_pointer_address(p))))

axiom pointer_addr_of___anonstruct_L_2_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(__anonstruct_L_2_of_pointer_address(p))))

axiom pointer_addr_of___anonstruct_M_1_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(__anonstruct_M_1_of_pointer_address(p))))

axiom pointer_addr_of___anonstruct_Vel_Lin_5_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(__anonstruct_Vel_Lin_5_of_pointer_address(p))))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct___anonstruct_COMPVETOR_3(p: __anonstruct_COMPVETOR_3 pointer,
  b: int,
  __anonstruct_COMPVETOR_3_alloc_table: __anonstruct_COMPVETOR_3 alloc_table) =
  (offset_max(__anonstruct_COMPVETOR_3_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_Cmd_6(p: __anonstruct_Cmd_6 pointer,
  b: int, __anonstruct_Cmd_6_alloc_table: __anonstruct_Cmd_6 alloc_table) =
  (offset_max(__anonstruct_Cmd_6_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_Escala_4(p: __anonstruct_Escala_4 pointer,
  b: int,
  __anonstruct_Escala_4_alloc_table: __anonstruct_Escala_4 alloc_table) =
  (offset_max(__anonstruct_Escala_4_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_L_2(p: __anonstruct_L_2 pointer,
  b: int, __anonstruct_L_2_alloc_table: __anonstruct_L_2 alloc_table) =
  (offset_max(__anonstruct_L_2_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_M_1(p: __anonstruct_M_1 pointer,
  b: int, __anonstruct_M_1_alloc_table: __anonstruct_M_1 alloc_table) =
  (offset_max(__anonstruct_M_1_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_Vel_Lin_5(p: __anonstruct_Vel_Lin_5 pointer,
  b: int,
  __anonstruct_Vel_Lin_5_alloc_table: __anonstruct_Vel_Lin_5 alloc_table) =
  (offset_max(__anonstruct_Vel_Lin_5_alloc_table, p) >= b)

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root___anonstruct_COMPVETOR_3(p: __anonstruct_COMPVETOR_3 pointer,
  a: int, b: int,
  __anonstruct_COMPVETOR_3_alloc_table: __anonstruct_COMPVETOR_3 alloc_table) =
  ((offset_min(__anonstruct_COMPVETOR_3_alloc_table, p) = a) and
   (offset_max(__anonstruct_COMPVETOR_3_alloc_table, p) = b))

predicate strict_valid_root___anonstruct_Cmd_6(p: __anonstruct_Cmd_6 pointer,
  a: int, b: int,
  __anonstruct_Cmd_6_alloc_table: __anonstruct_Cmd_6 alloc_table) =
  ((offset_min(__anonstruct_Cmd_6_alloc_table, p) = a) and
   (offset_max(__anonstruct_Cmd_6_alloc_table, p) = b))

predicate strict_valid_root___anonstruct_Escala_4(p: __anonstruct_Escala_4 pointer,
  a: int, b: int,
  __anonstruct_Escala_4_alloc_table: __anonstruct_Escala_4 alloc_table) =
  ((offset_min(__anonstruct_Escala_4_alloc_table, p) = a) and
   (offset_max(__anonstruct_Escala_4_alloc_table, p) = b))

predicate strict_valid_root___anonstruct_L_2(p: __anonstruct_L_2 pointer,
  a: int, b: int,
  __anonstruct_L_2_alloc_table: __anonstruct_L_2 alloc_table) =
  ((offset_min(__anonstruct_L_2_alloc_table, p) = a) and
   (offset_max(__anonstruct_L_2_alloc_table, p) = b))

predicate strict_valid_root___anonstruct_M_1(p: __anonstruct_M_1 pointer,
  a: int, b: int,
  __anonstruct_M_1_alloc_table: __anonstruct_M_1 alloc_table) =
  ((offset_min(__anonstruct_M_1_alloc_table, p) = a) and
   (offset_max(__anonstruct_M_1_alloc_table, p) = b))

predicate strict_valid_root___anonstruct_Vel_Lin_5(p: __anonstruct_Vel_Lin_5 pointer,
  a: int, b: int,
  __anonstruct_Vel_Lin_5_alloc_table: __anonstruct_Vel_Lin_5 alloc_table) =
  ((offset_min(__anonstruct_Vel_Lin_5_alloc_table, p) = a) and
   (offset_max(__anonstruct_Vel_Lin_5_alloc_table, p) = b))

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct___anonstruct_COMPVETOR_3(p: __anonstruct_COMPVETOR_3 pointer,
  a: int, b: int,
  __anonstruct_COMPVETOR_3_alloc_table: __anonstruct_COMPVETOR_3 alloc_table) =
  ((offset_min(__anonstruct_COMPVETOR_3_alloc_table, p) = a) and
   (offset_max(__anonstruct_COMPVETOR_3_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_Cmd_6(p: __anonstruct_Cmd_6 pointer,
  a: int, b: int,
  __anonstruct_Cmd_6_alloc_table: __anonstruct_Cmd_6 alloc_table) =
  ((offset_min(__anonstruct_Cmd_6_alloc_table, p) = a) and
   (offset_max(__anonstruct_Cmd_6_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_Escala_4(p: __anonstruct_Escala_4 pointer,
  a: int, b: int,
  __anonstruct_Escala_4_alloc_table: __anonstruct_Escala_4 alloc_table) =
  ((offset_min(__anonstruct_Escala_4_alloc_table, p) = a) and
   (offset_max(__anonstruct_Escala_4_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_L_2(p: __anonstruct_L_2 pointer,
  a: int, b: int,
  __anonstruct_L_2_alloc_table: __anonstruct_L_2 alloc_table) =
  ((offset_min(__anonstruct_L_2_alloc_table, p) = a) and
   (offset_max(__anonstruct_L_2_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_M_1(p: __anonstruct_M_1 pointer,
  a: int, b: int,
  __anonstruct_M_1_alloc_table: __anonstruct_M_1 alloc_table) =
  ((offset_min(__anonstruct_M_1_alloc_table, p) = a) and
   (offset_max(__anonstruct_M_1_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_Vel_Lin_5(p: __anonstruct_Vel_Lin_5 pointer,
  a: int, b: int,
  __anonstruct_Vel_Lin_5_alloc_table: __anonstruct_Vel_Lin_5 alloc_table) =
  ((offset_min(__anonstruct_Vel_Lin_5_alloc_table, p) = a) and
   (offset_max(__anonstruct_Vel_Lin_5_alloc_table, p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint8_of_integer : int -> uint8

axiom uint8_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 255)) -> (integer_of_uint8(uint8_of_integer(x)) = x)))

axiom uint8_extensionality:
  (forall x:uint8.
    (forall y:uint8 [(integer_of_uint8(x) = integer_of_uint8(y))].
      ((integer_of_uint8(x) = integer_of_uint8(y)) -> (x = y))))

axiom uint8_range:
  (forall x:uint8.
    ((0 <= integer_of_uint8(x)) and (integer_of_uint8(x) <= 255)))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_D(__anonstruct_COMPVETOR_3_D_3_alloc_table: __anonstruct_COMPVETOR_3 alloc_table) =
  ((offset_min(__anonstruct_COMPVETOR_3_D_3_alloc_table, D) <= 0) and
   (offset_max(__anonstruct_COMPVETOR_3_D_3_alloc_table, D) >= 0))

predicate valid_L(__anonstruct_L_2_L_2_alloc_table: __anonstruct_L_2 alloc_table) =
  ((offset_min(__anonstruct_L_2_L_2_alloc_table, L) <= 0) and
   (offset_max(__anonstruct_L_2_L_2_alloc_table, L) >= 0))

predicate valid_M(__anonstruct_M_1_M_1_alloc_table: __anonstruct_M_1 alloc_table) =
  ((offset_min(__anonstruct_M_1_M_1_alloc_table, M) <= 0) and
   (offset_max(__anonstruct_M_1_M_1_alloc_table, M) >= 0))

predicate valid_Vel_Lin(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table: __anonstruct_Vel_Lin_5 alloc_table) =
  ((offset_min(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table,
   Vel_Lin) <= 0) and
   (offset_max(__anonstruct_Vel_Lin_5_Vel_Lin_5_alloc_table, Vel_Lin) >= 0))

predicate valid_root___anonstruct_COMPVETOR_3(p: __anonstruct_COMPVETOR_3 pointer,
  a: int, b: int,
  __anonstruct_COMPVETOR_3_alloc_table: __anonstruct_COMPVETOR_3 alloc_table) =
  ((offset_min(__anonstruct_COMPVETOR_3_alloc_table, p) <= a) and
   (offset_max(__anonstruct_COMPVETOR_3_alloc_table, p) >= b))

predicate valid_root___anonstruct_Cmd_6(p: __anonstruct_Cmd_6 pointer,
  a: int, b: int,
  __anonstruct_Cmd_6_alloc_table: __anonstruct_Cmd_6 alloc_table) =
  ((offset_min(__anonstruct_Cmd_6_alloc_table, p) <= a) and
   (offset_max(__anonstruct_Cmd_6_alloc_table, p) >= b))

predicate valid_root___anonstruct_Escala_4(p: __anonstruct_Escala_4 pointer,
  a: int, b: int,
  __anonstruct_Escala_4_alloc_table: __anonstruct_Escala_4 alloc_table) =
  ((offset_min(__anonstruct_Escala_4_alloc_table, p) <= a) and
   (offset_max(__anonstruct_Escala_4_alloc_table, p) >= b))

predicate valid_root___anonstruct_L_2(p: __anonstruct_L_2 pointer, a: int,
  b: int, __anonstruct_L_2_alloc_table: __anonstruct_L_2 alloc_table) =
  ((offset_min(__anonstruct_L_2_alloc_table, p) <= a) and
   (offset_max(__anonstruct_L_2_alloc_table, p) >= b))

predicate valid_root___anonstruct_M_1(p: __anonstruct_M_1 pointer, a: int,
  b: int, __anonstruct_M_1_alloc_table: __anonstruct_M_1 alloc_table) =
  ((offset_min(__anonstruct_M_1_alloc_table, p) <= a) and
   (offset_max(__anonstruct_M_1_alloc_table, p) >= b))

predicate valid_root___anonstruct_Vel_Lin_5(p: __anonstruct_Vel_Lin_5 pointer,
  a: int, b: int,
  __anonstruct_Vel_Lin_5_alloc_table: __anonstruct_Vel_Lin_5 alloc_table) =
  ((offset_min(__anonstruct_Vel_Lin_5_alloc_table, p) <= a) and
   (offset_max(__anonstruct_Vel_Lin_5_alloc_table, p) >= b))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct___anonstruct_COMPVETOR_3(p: __anonstruct_COMPVETOR_3 pointer,
  a: int, b: int,
  __anonstruct_COMPVETOR_3_alloc_table: __anonstruct_COMPVETOR_3 alloc_table) =
  ((offset_min(__anonstruct_COMPVETOR_3_alloc_table, p) <= a) and
   (offset_max(__anonstruct_COMPVETOR_3_alloc_table, p) >= b))

predicate valid_struct___anonstruct_Cmd_6(p: __anonstruct_Cmd_6 pointer,
  a: int, b: int,
  __anonstruct_Cmd_6_alloc_table: __anonstruct_Cmd_6 alloc_table) =
  ((offset_min(__anonstruct_Cmd_6_alloc_table, p) <= a) and
   (offset_max(__anonstruct_Cmd_6_alloc_table, p) >= b))

predicate valid_struct___anonstruct_Escala_4(p: __anonstruct_Escala_4 pointer,
  a: int, b: int,
  __anonstruct_Escala_4_alloc_table: __anonstruct_Escala_4 alloc_table) =
  ((offset_min(__anonstruct_Escala_4_alloc_table, p) <= a) and
   (offset_max(__anonstruct_Escala_4_alloc_table, p) >= b))

predicate valid_struct___anonstruct_L_2(p: __anonstruct_L_2 pointer, a: int,
  b: int, __anonstruct_L_2_alloc_table: __anonstruct_L_2 alloc_table) =
  ((offset_min(__anonstruct_L_2_alloc_table, p) <= a) and
   (offset_max(__anonstruct_L_2_alloc_table, p) >= b))

predicate valid_struct___anonstruct_M_1(p: __anonstruct_M_1 pointer, a: int,
  b: int, __anonstruct_M_1_alloc_table: __anonstruct_M_1 alloc_table) =
  ((offset_min(__anonstruct_M_1_alloc_table, p) <= a) and
   (offset_max(__anonstruct_M_1_alloc_table, p) >= b))

predicate valid_struct___anonstruct_Vel_Lin_5(p: __anonstruct_Vel_Lin_5 pointer,
  a: int, b: int,
  __anonstruct_Vel_Lin_5_alloc_table: __anonstruct_Vel_Lin_5 alloc_table) =
  ((offset_min(__anonstruct_Vel_Lin_5_alloc_table, p) <= a) and
   (offset_max(__anonstruct_Vel_Lin_5_alloc_table, p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

