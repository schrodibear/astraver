Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -jessie -jessie-gen-only heap.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -dD heap.c"
[kernel] warning: ignoring status of global invariant `size_inv'
[kernel] warning: ignoring status of global invariant `is_heap_inv'
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir heap.jessie
[jessie] File heap.jessie/heap.jc written.
[jessie] File heap.jessie/heap.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

lemma div2_1 :
(\forall int32 x;
  ((0 <= x) ==> ((0 <= (x / 2)) && ((x / 2) <= x))))

axiomatic Bag {

  logic type bag
   
  logic bag empty_bag 
   
  logic bag singleton_bag(integer x_0)
   
  logic bag union_bag(bag b1, bag b2)
   
  logic bag add_bag(integer x_1, bag b) =
  union_bag(b, singleton_bag(x_1))
   
  logic integer occ_bag(integer x_2, bag b_0)
  
}

predicate is_max_bag(bag b_1, integer m) =
((occ_bag(m, b_1) >= 1) &&
  (\forall integer x_3;
    ((occ_bag(x_3, b_1) >= 1) ==> (x_3 <= m))))

axiomatic Tree {

  logic type tree
   
  logic tree Empty 
   
  logic tree Node(tree l, integer x_4, tree r)
   
  logic bag bag_of_tree(tree t)
   
  axiom bag_of_tree_def_1 :
  (bag_of_tree(Empty) == empty_bag)
   
  axiom bag_of_tree_def_2 :
  (\forall tree l_0;
    (\forall integer x_5;
      (\forall tree r_0;
        (bag_of_tree(Node(l_0, x_5, r_0)) ==
          add_bag(x_5, union_bag(bag_of_tree(l_0), bag_of_tree(r_0)))))))
  
}

axiomatic IsHeap {

  predicate is_heap(tree t_0)
   
  axiom is_heap_def_1 :
  is_heap(Empty)
   
  axiom is_heap_def_2 :
  (\forall integer x_6;
    is_heap(Node(Empty, x_6, Empty)))
   
  axiom is_heap_def_3 :
  (\forall tree ll;
    (\forall tree lr;
      (\forall integer lx;
        (\forall integer x_7;
          ((x_7 >= lx) ==>
            (is_heap(Node(ll, lx, lr)) ==>
              is_heap(Node(Node(ll, lx, lr), x_7, Empty))))))))
   
  axiom is_heap_def_4 :
  (\forall tree rl;
    (\forall tree rr;
      (\forall integer rx;
        (\forall integer x_8;
          ((x_8 >= rx) ==>
            (is_heap(Node(rl, rx, rr)) ==>
              is_heap(Node(Empty, x_8, Node(rl, rx, rr)))))))))
   
  axiom is_heap_def_5 :
  (\forall tree ll_0;
    (\forall tree lr_0;
      (\forall tree rl_0;
        (\forall tree rr_0;
          (\forall integer lx_0;
            (\forall integer x_9;
              (\forall integer rx_0;
                ((x_9 >= lx_0) ==>
                  (is_heap(Node(ll_0, lx_0, lr_0)) ==>
                    ((x_9 >= rx_0) ==>
                      (is_heap(Node(rl_0, rx_0, rr_0)) ==>
                        is_heap(Node(Node(ll_0, lx_0, lr_0), x_9,
                                     Node(rl_0, rx_0, rr_0))))))))))))))
  
}

axiomatic TreeOfArray {

  logic tree tree_of_array{L}(intP[..] t_1, integer root, integer bound)
  reads (t_1 + [..]).intM;
   
  axiom tree_of_array_def_1{L} :
  (\forall intP[..] t_2;
    (\forall integer root_0;
      (\forall integer bound_0;
        ((root_0 >= bound_0) ==>
          (tree_of_array{L}(t_2, root_0, bound_0) == Empty)))))
   
  axiom tree_of_array_def_2{L} :
  (\forall intP[..] t_3;
    (\forall integer root_1;
      (\forall integer bound_1;
        (((0 <= root_1) && (root_1 < bound_1)) ==>
          (tree_of_array{L}(t_3, root_1, bound_1) ==
            Node(tree_of_array{L}(t_3, ((2 * root_1) + 1), bound_1),
                 (t_3 + root_1).intM,
                 tree_of_array{L}(t_3, ((2 * root_1) + 2), bound_1)))))))
  
}

intP[0..99] heap;

invariant valid_heap :
((\offset_min(heap) <= 0) && (\offset_max(heap) >= 99))

int32 size;

invariant size_inv :
((0 <= size) && (size < 100))

invariant is_heap_inv :
is_heap(tree_of_array{Here}((heap + 0), 0, size))

logic bag model{L}() =
bag_of_tree(tree_of_array{L}((heap + 0), 0, size))

unit clear()
behavior default:
  assigns size;
  ensures (C_2 : (model{Here}() == empty_bag));
{  
   {  (C_1 : (size = 0));
      
      (return ())
   }
}

unit push(int32 x)
  requires (C_28 : (size < (100 - 1)));
behavior default:
  assigns (heap + [..]).intM,
  size;
  ensures (C_27 : (model{Here}() ==
                    add_bag(\at(x,Old), \at(model{Old}(),Old))));
{  
   (var int32 i);
   
   (var int32 parent);
   
   (var int32 p);
   
   {  (C_3 : (i = size));
      
      loop 
      behavior default:
        invariant (C_5 : ((((C_8 : (0 <= i)) && (C_9 : (i <= size))) &&
                            (C_10 : ((i == size) ==>
                                      (is_heap(tree_of_array{Here}((heap + 0),
                                                                   0, size)) &&
                                        (model{Here}() == model{Pre}()))))) &&
                           (C_11 : ((i < size) ==>
                                     (is_heap(tree_of_array{Here}((heap + 0),
                                                                  0,
                                                                  (size + 1))) &&
                                       (bag_of_tree(tree_of_array{Here}(
                                                    (heap + 0), 0, (size + 1))) ==
                                         add_bag((heap + i).intM,
                                                 \at(model{Pre}(),Pre))))))));
      behavior default:
        
        assigns (heap + [..]).intM;
      variant (C_4 : i);
      while (true)
      {  
         {  (if (i > 0) then () else 
            (goto while_0_break));
            
            {  (C_16 : (parent = (C_15 : ((C_14 : ((C_13 : ((C_12 : (i - 1)) :> int32)) /
                                                    2)) :> int32))));
               (C_18 : (p = (C_17 : (heap + parent).intM)));
               (if (p >= x) then 
               (goto while_0_break) else ());
               (C_20 : ((C_19 : (heap + i).intM) = p));
               (C_21 : (i = parent))
            }
         }
      };
      (while_0_break : ());
      (C_23 : ((C_22 : (heap + i).intM) = x));
      (C_26 : (size = (C_25 : ((C_24 : (size + 1)) :> int32))));
      
      (return ())
   }
}

int32 max()
  requires (C_32 : (size > 0));
behavior default:
  assigns \nothing;
  ensures (C_31 : is_max_bag(model{Here}(), \result));
{  
   (var int32 __retres);
   
   {  (C_30 : (__retres = (C_29 : (heap + 0).intM)));
      
      (return __retres)
   }
}

int32 pop()
  requires (C_71 : (size > 0));
behavior default:
  assigns (heap + [..]).intM,
  size;
  ensures (C_66 : (((C_68 : (size == (\at(size,Old) - 1))) &&
                     (C_69 : is_max_bag(\at(model{Old}(),Old), \result))) &&
                    (C_70 : (\at(model{Old}(),Old) ==
                              add_bag(\result, model{Here}())))));
{  
   (var int32 res);
   
   (var int32 v);
   
   (var int32 i_0);
   
   (var int32 j);
   
   {  (C_34 : (res = (C_33 : (heap + 0).intM)));
      (C_37 : (size = (C_36 : ((C_35 : (size - 1)) :> int32))));
      (if (size != 0) then 
      {  (C_39 : (v = (C_38 : (heap + size).intM)));
         (C_40 : (i_0 = 0));
         
         loop 
         behavior default:
           invariant (C_42 : ((C_43 : (0 <= i_0)) && (C_44 : (i_0 <= size))));
         behavior default:
           
           assigns (heap + [..]).intM;
         variant (C_41 : (size - i_0));
         while (true)
         {  
            {  (if (i_0 < size) then () else 
               (goto while_0_break));
               
               {  (C_49 : (j = (C_48 : ((C_47 : ((C_46 : ((C_45 : (2 * i_0)) :> int32)) +
                                                  1)) :> int32))));
                  (if (j < (C_58 : ((C_57 : (size - 1)) :> int32))) then 
                  (if ((C_56 : (heap + j).intM) <
                        (C_55 : (heap + (C_54 : ((C_53 : (j + 1)) :> int32))).intM)) then 
                  (C_52 : (j = (C_51 : ((C_50 : (j + 1)) :> int32)))) else ()) else ());
                  (if (v >= (C_59 : (heap + j).intM)) then 
                  (goto while_0_break) else ());
                  (C_62 : ((C_61 : (heap + i_0).intM) = (C_60 : (heap + j).intM)));
                  (C_63 : (i_0 = j))
               }
            }
         };
         (while_0_break : ());
         (C_65 : ((C_64 : (heap + i_0).intM) = v))
      } else ());
      
      (return res)
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs heap.jessie/heap.cloc heap.jessie/heap.jc
type bag

type charP

type heap_1

type int32

type int8

type intP

type padding

type tree

type uint8

type unsigned_charP

type voidP

logic Empty:  -> tree

logic Node: tree, int, tree -> tree

logic union_bag: bag, bag -> bag

logic singleton_bag: int -> bag

function add_bag(x_1:int, b:bag) : bag = union_bag(b, singleton_bag(x_1))

logic bag_of_tree: tree -> bag

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic empty_bag:  -> bag

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic heap:  -> intP pointer

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

logic is_heap: tree -> prop

logic tree_of_array: intP pointer, int, int, (intP, int32) memory -> tree

predicate is_heap_inv(intP_intM_heap_1:(intP, int32) memory, size:int32) =
 is_heap(tree_of_array(shift(heap, (0)), (0), integer_of_int32(size),
         intP_intM_heap_1))

logic occ_bag: int, bag -> int

predicate is_max_bag(b_1:bag, m:int) =
 (ge_int(occ_bag(m, b_1), (1))
 and (forall x_3_0:int.
      (ge_int(occ_bag(x_3_0, b_1), (1)) -> le_int(x_3_0, m))))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

function model(intP_intM_heap_1_at_L:(intP, int32) memory,
 size_at_L:int32) : bag =
 bag_of_tree(tree_of_array(shift(heap, (0)), (0),
             integer_of_int32(size_at_L), intP_intM_heap_1_at_L))

axiom no_assign_tree_of_array_0 :
 (forall tmp:intP pset.
  (forall tmpmem:(intP, int32) memory.
   (forall tmpalloc:intP alloc_table.
    (forall intP_intM_t_1_2_at_L:(intP, int32) memory.
     (forall bound:int.
      (forall root:int.
       (forall t_1:intP pointer.
        ((pset_disjoint(tmp, pset_all(pset_singleton(t_1)))
         and not_assigns(tmpalloc, intP_intM_t_1_2_at_L, tmpmem, tmp)) ->
         (tree_of_array(t_1, root, bound, intP_intM_t_1_2_at_L) = tree_of_array(t_1,
                                                                  root,
                                                                  bound,
                                                                  tmpmem))))))))))

axiom no_update_tree_of_array_0 :
 (forall tmp:intP pointer.
  (forall tmpval:int32.
   (forall intP_intM_t_1_2_at_L:(intP, int32) memory.
    (forall bound:int.
     (forall root:int.
      (forall t_1:intP pointer.
       ((not in_pset(tmp, pset_all(pset_singleton(t_1)))) ->
        (tree_of_array(t_1, root, bound, intP_intM_t_1_2_at_L) = tree_of_array(t_1,
                                                                 root, bound,
                                                                 store(intP_intM_t_1_2_at_L,
                                                                 tmp, tmpval))))))))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate size_inv(size:int32) =
 (le_int((0), integer_of_int32(size))
 and lt_int(integer_of_int32(size), (100)))

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_heap(intP_heap_1_alloc_table:intP alloc_table) =
 (le_int(offset_min(intP_heap_1_alloc_table, heap), (0))
 and ge_int(offset_max(intP_heap_1_alloc_table, heap), (99)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

lemma div2_1 :
 (forall x_5:int32.
  (le_int((0), integer_of_int32(x_5)) ->
   (le_int((0), computer_div(integer_of_int32(x_5), (2)))
   and le_int(computer_div(integer_of_int32(x_5), (2)),
       integer_of_int32(x_5)))))

axiom bag_of_tree_def_1 : (bag_of_tree(Empty) = empty_bag)

axiom bag_of_tree_def_2 :
 (forall l_0:tree.
  (forall x_5_0:int.
   (forall r_0:tree.
    (bag_of_tree(Node(l_0, x_5_0, r_0)) = add_bag(x_5_0,
                                          union_bag(bag_of_tree(l_0),
                                          bag_of_tree(r_0)))))))

axiom is_heap_def_1 : is_heap(Empty)

axiom is_heap_def_2 : (forall x_6:int. is_heap(Node(Empty, x_6, Empty)))

axiom is_heap_def_3 :
 (forall ll:tree.
  (forall lr:tree.
   (forall lx:int.
    (forall x_7:int.
     (ge_int(x_7, lx) ->
      (is_heap(Node(ll, lx, lr)) ->
       is_heap(Node(Node(ll, lx, lr), x_7, Empty))))))))

axiom is_heap_def_4 :
 (forall rl:tree.
  (forall rr:tree.
   (forall rx:int.
    (forall x_8:int.
     (ge_int(x_8, rx) ->
      (is_heap(Node(rl, rx, rr)) ->
       is_heap(Node(Empty, x_8, Node(rl, rx, rr)))))))))

axiom is_heap_def_5 :
 (forall ll_0:tree.
  (forall lr_0:tree.
   (forall rl_0:tree.
    (forall rr_0:tree.
     (forall lx_0:int.
      (forall x_9:int.
       (forall rx_0:int.
        (ge_int(x_9, lx_0) ->
         (is_heap(Node(ll_0, lx_0, lr_0)) ->
          (ge_int(x_9, rx_0) ->
           (is_heap(Node(rl_0, rx_0, rr_0)) ->
            is_heap(Node(Node(ll_0, lx_0, lr_0), x_9, Node(rl_0, rx_0, rr_0))))))))))))))

axiom tree_of_array_def_1 :
 (forall intP_intM_t_1_2_at_L:(intP, int32) memory.
  (forall t_2:intP pointer.
   (forall root_0:int.
    (forall bound_0:int.
     (ge_int(root_0, bound_0) ->
      (tree_of_array(t_2, root_0, bound_0, intP_intM_t_1_2_at_L) = Empty))))))

axiom tree_of_array_def_2 :
 (forall intP_intM_t_1_2_at_L:(intP, int32) memory.
  (forall t_3:intP pointer.
   (forall root_1:int.
    (forall bound_1:int.
     ((le_int((0), root_1) and lt_int(root_1, bound_1)) ->
      (tree_of_array(t_3, root_1, bound_1, intP_intM_t_1_2_at_L) = Node(
                                                                   tree_of_array(t_3,
                                                                   add_int(
                                                                   mul_int((2),
                                                                   root_1),
                                                                   (1)),
                                                                   bound_1,
                                                                   intP_intM_t_1_2_at_L),
                                                                   integer_of_int32(
                                                                   select(intP_intM_t_1_2_at_L,
                                                                   shift(t_3,
                                                                   root_1))),
                                                                   tree_of_array(t_3,
                                                                   add_int(
                                                                   mul_int((2),
                                                                   root_1),
                                                                   (2)),
                                                                   bound_1,
                                                                   intP_intM_t_1_2_at_L))))))))

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter intP_heap_1_alloc_table : intP alloc_table ref

parameter intP_intM_heap_1 : (intP, int32) memory ref

parameter size : int32 ref

parameter clear :
 tt:unit ->
  { } unit reads intP_heap_1_alloc_table,intP_intM_heap_1,size writes size
  { ((JC_<somenum>:
     ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
     and ((JC_<somenum>: size_inv(size))
         and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))
    and (JC_<somenum>: (model(intP_intM_heap_1, size) = empty_bag))) }

parameter clear_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
    and ((JC_<somenum>: size_inv(size))
        and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))}
  unit reads intP_heap_1_alloc_table,intP_intM_heap_1,size writes size
  { ((JC_<somenum>:
     ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
     and ((JC_<somenum>: size_inv(size))
         and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))
    and (JC_<somenum>: (model(intP_intM_heap_1, size) = empty_bag))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter max :
 tt:unit ->
  { } int32 reads intP_heap_1_alloc_table,intP_intM_heap_1,size
  { ((JC_<somenum>:
     ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
     and ((JC_<somenum>: size_inv(size))
         and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))
    and (JC_<somenum>:
        is_max_bag(model(intP_intM_heap_1, size), integer_of_int32(result)))) }

parameter max_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: gt_int(integer_of_int32(size), (0)))
    and ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
        and ((JC_<somenum>: size_inv(size))
            and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table))))))}
  int32 reads intP_heap_1_alloc_table,intP_intM_heap_1,size
  { ((JC_<somenum>:
     ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
     and ((JC_<somenum>: size_inv(size))
         and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))
    and (JC_<somenum>:
        is_max_bag(model(intP_intM_heap_1, size), integer_of_int32(result)))) }

parameter pop :
 tt:unit ->
  { } int32 reads intP_heap_1_alloc_table,intP_intM_heap_1,size
  writes intP_intM_heap_1,size
  { ((JC_<somenum>:
     ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
     and ((JC_<somenum>: size_inv(size))
         and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))
    and (JC_<somenum>:
        ((JC_<somenum>:
         ((JC_<somenum>:
          (integer_of_int32(size) = sub_int(integer_of_int32(size@), (1))))
         and ((JC_<somenum>:
              is_max_bag(model(intP_intM_heap_1@, size@),
              integer_of_int32(result)))
             and (JC_<somenum>:
                 (model(intP_intM_heap_1@, size@) = add_bag(integer_of_int32(result),
                                                    model(intP_intM_heap_1,
                                                    size)))))))
        and (JC_<somenum>:
            not_assigns(intP_heap_1_alloc_table@, intP_intM_heap_1@,
            intP_intM_heap_1, pset_all(pset_singleton(heap))))))) }

parameter pop_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: gt_int(integer_of_int32(size), (0)))
    and ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
        and ((JC_<somenum>: size_inv(size))
            and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table))))))}
  int32 reads intP_heap_1_alloc_table,intP_intM_heap_1,size
  writes intP_intM_heap_1,size
  { ((JC_<somenum>:
     ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
     and ((JC_<somenum>: size_inv(size))
         and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))
    and (JC_<somenum>:
        ((JC_<somenum>:
         ((JC_<somenum>:
          (integer_of_int32(size) = sub_int(integer_of_int32(size@), (1))))
         and ((JC_<somenum>:
              is_max_bag(model(intP_intM_heap_1@, size@),
              integer_of_int32(result)))
             and (JC_<somenum>:
                 (model(intP_intM_heap_1@, size@) = add_bag(integer_of_int32(result),
                                                    model(intP_intM_heap_1,
                                                    size)))))))
        and (JC_<somenum>:
            not_assigns(intP_heap_1_alloc_table@, intP_intM_heap_1@,
            intP_intM_heap_1, pset_all(pset_singleton(heap))))))) }

parameter push :
 x_3:int32 ->
  { } unit reads intP_heap_1_alloc_table,intP_intM_heap_1,size
  writes intP_intM_heap_1,size
  { ((JC_<somenum>:
     ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
     and ((JC_<somenum>: size_inv(size))
         and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))
    and (JC_<somenum>:
        ((JC_<somenum>:
         (model(intP_intM_heap_1, size) = add_bag(integer_of_int32(x_3),
                                          model(intP_intM_heap_1@, size@))))
        and (JC_<somenum>:
            not_assigns(intP_heap_1_alloc_table@, intP_intM_heap_1@,
            intP_intM_heap_1, pset_all(pset_singleton(heap))))))) }

parameter push_requires :
 x_3:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: lt_int(integer_of_int32(size), sub_int((100), (1))))
    and ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
        and ((JC_<somenum>: size_inv(size))
            and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table))))))}
  unit reads intP_heap_1_alloc_table,intP_intM_heap_1,size
  writes intP_intM_heap_1,size
  { ((JC_<somenum>:
     ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
     and ((JC_<somenum>: size_inv(size))
         and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))
    and (JC_<somenum>:
        ((JC_<somenum>:
         (model(intP_intM_heap_1, size) = add_bag(integer_of_int32(x_3),
                                          model(intP_intM_heap_1@, size@))))
        and (JC_<somenum>:
            not_assigns(intP_heap_1_alloc_table@, intP_intM_heap_1@,
            intP_intM_heap_1, pset_all(pset_singleton(heap))))))) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let clear_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
    and ((JC_<somenum>: size_inv(size))
        and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table))))) }
  (init:
  try
   (C_1:
   begin
     (let jessie_<somenum> = (size := (safe_int32_of_integer_ (0))) in void);
    (raise Return); (raise Return) end) with Return -> void end)
  { (JC_<somenum>: (model(intP_intM_heap_1, size) = empty_bag)) }

let clear_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
    and ((JC_<somenum>: size_inv(size))
        and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table))))) }
  (init:
  try
   (C_1:
   begin
     (let jessie_<somenum> = (size := (safe_int32_of_integer_ (0))) in void);
    (raise Return); (raise Return) end) with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
    and ((JC_<somenum>: size_inv(size))
        and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table))))) }

let max_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: gt_int(integer_of_int32(size), (0)))
    and ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
        and ((JC_<somenum>: size_inv(size))
            and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (C_30:
     begin
       (let jessie_<somenum> =
       (__retres := (C_29:
                    ((safe_acc_ !intP_intM_heap_1) ((shift heap) (0))))) in
       void); (return := !__retres); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    is_max_bag(model(intP_intM_heap_1, size), integer_of_int32(result))) }

let max_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: gt_int(integer_of_int32(size), (0)))
    and ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
        and ((JC_<somenum>: size_inv(size))
            and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (C_30:
     begin
       (let jessie_<somenum> =
       (__retres := (C_29:
                    ((safe_acc_ !intP_intM_heap_1) ((shift heap) (0))))) in
       void); (return := !__retres); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
    and ((JC_<somenum>: size_inv(size))
        and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table))))) }

let pop_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: gt_int(integer_of_int32(size), (0)))
    and ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
        and ((JC_<somenum>: size_inv(size))
            and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let res = ref (any_int32 void) in
     (let v = ref (any_int32 void) in
     (let i_0 = ref (any_int32 void) in
     (let j = ref (any_int32 void) in
     (C_34:
     begin
       (let jessie_<somenum> =
       (res := (C_33: ((safe_acc_ !intP_intM_heap_1) ((shift heap) (0))))) in
       void);
      (C_37:
      begin
        (let jessie_<somenum> =
        (size := (C_36:
                 (safe_int32_of_integer_ (C_35:
                                         ((sub_int (integer_of_int32 !size)) (1)))))) in
        void);
       (if ((neq_int_ (integer_of_int32 !size)) (0))
       then
        try
         (C_39:
         begin
           (let jessie_<somenum> =
           (v := (C_38:
                 ((safe_acc_ !intP_intM_heap_1) ((shift heap) (integer_of_int32 !size))))) in
           void);
          (C_40:
          begin
            (let jessie_<somenum> = (i_0 := (safe_int32_of_integer_ (0))) in void);
           (loop_4:
           begin
             while true do
             { invariant
                 ((JC_<somenum>:
                  ((JC_<somenum>: le_int((0), integer_of_int32(i_0)))
                  and (JC_<somenum>:
                      le_int(integer_of_int32(i_0), integer_of_int32(size)))))
                 and ((JC_<somenum>:
                      ((size = size@loop_4)
                      and (JC_<somenum>:
                          not_assigns(intP_heap_1_alloc_table@loop_4,
                          intP_intM_heap_1@loop_4, intP_intM_heap_1,
                          pset_all(pset_singleton(heap))))))
                     and (JC_<somenum>:
                         not_assigns(intP_heap_1_alloc_table@init,
                         intP_intM_heap_1@init, intP_intM_heap_1,
                         pset_all(pset_singleton(heap))))))  }
              begin
                [ { } unit { true } ];
               try
                begin
                  (let jessie_<somenum> =
                  begin
                    (if ((lt_int_ (integer_of_int32 !i_0)) (integer_of_int32 !size))
                    then void else (raise (Goto_while_0_break_exc void)));
                   (C_49:
                   begin
                     (let jessie_<somenum> =
                     (j := (C_48:
                           (safe_int32_of_integer_ (C_47:
                                                   ((add_int (integer_of_int32 
                                                              (C_46:
                                                              (safe_int32_of_integer_ 
                                                               (C_45:
                                                               ((mul_int (2)) 
                                                                (integer_of_int32 !i_0))))))) (1)))))) in
                     void);
                    (if ((lt_int_ (integer_of_int32 !j)) (integer_of_int32 
                                                          (C_58:
                                                          (safe_int32_of_integer_ 
                                                           (C_57:
                                                           ((sub_int 
                                                             (integer_of_int32 !size)) (1)))))))
                    then
                     (if ((lt_int_ (integer_of_int32 (C_56:
                                                     ((safe_acc_ !intP_intM_heap_1) 
                                                      ((shift heap) (integer_of_int32 !j)))))) 
                          (integer_of_int32 (C_55:
                                            ((safe_acc_ !intP_intM_heap_1) 
                                             ((shift heap) (integer_of_int32 
                                                            (C_54:
                                                            (safe_int32_of_integer_ 
                                                             (C_53:
                                                             ((add_int 
                                                               (integer_of_int32 !j)) (1)))))))))))
                     then
                      (let jessie_<somenum> =
                      (C_52:
                      (j := (C_51:
                            (safe_int32_of_integer_ (C_50:
                                                    ((add_int (integer_of_int32 !j)) (1))))))) in
                      void) else void) else void);
                    (if ((ge_int_ (integer_of_int32 !v)) (integer_of_int32 
                                                          (C_59:
                                                          ((safe_acc_ !intP_intM_heap_1) 
                                                           ((shift heap) 
                                                            (integer_of_int32 !j))))))
                    then (raise (Goto_while_0_break_exc void)) else void);
                    (C_62:
                    begin
                      (let jessie_<somenum> =
                      (let jessie_<somenum> =
                      (C_60:
                      ((safe_acc_ !intP_intM_heap_1) ((shift heap) (integer_of_int32 !j)))) in
                      (let jessie_<somenum> = heap in
                      (let jessie_<somenum> = (integer_of_int32 !i_0) in
                      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
                      (((safe_upd_ intP_intM_heap_1) jessie_<somenum>) jessie_<somenum>))))) in
                      void); (C_63: begin   (i_0 := !j); !i_0 end) end) end)
                  end in void); (raise (Loop_continue_exc void)) end with
                Loop_continue_exc jessie_<somenum> -> void end end done;
            (raise (Goto_while_0_break_exc void)) end) end) end) with
         Goto_while_0_break_exc jessie_<somenum> ->
         (let jessie_<somenum> =
         (while_0_break:
         begin
           void;
          (C_65:
          (let jessie_<somenum> = !v in
          (let jessie_<somenum> = heap in
          (let jessie_<somenum> = (integer_of_int32 !i_0) in
          (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
          begin
            (((safe_upd_ intP_intM_heap_1) jessie_<somenum>) jessie_<somenum>);
           jessie_<somenum> end))))) end) in void) end else void);
       (return := !res); (raise Return) end) end))))); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>:
      (integer_of_int32(size) = sub_int(integer_of_int32(size@), (1))))
     and ((JC_<somenum>:
          is_max_bag(model(intP_intM_heap_1@, size@),
          integer_of_int32(result)))
         and (JC_<somenum>:
             (model(intP_intM_heap_1@, size@) = add_bag(integer_of_int32(result),
                                                model(intP_intM_heap_1, size)))))))
    and (JC_<somenum>:
        not_assigns(intP_heap_1_alloc_table@, intP_intM_heap_1@,
        intP_intM_heap_1, pset_all(pset_singleton(heap)))))) }

let pop_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: gt_int(integer_of_int32(size), (0)))
    and ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
        and ((JC_<somenum>: size_inv(size))
            and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let res = ref (any_int32 void) in
     (let v = ref (any_int32 void) in
     (let i_0 = ref (any_int32 void) in
     (let j = ref (any_int32 void) in
     (C_34:
     begin
       (let jessie_<somenum> =
       (res := (C_33: ((safe_acc_ !intP_intM_heap_1) ((shift heap) (0))))) in
       void);
      (C_37:
      begin
        (let jessie_<somenum> =
        (size := (C_36:
                 (JC_<somenum>:
                 (int32_of_integer_ (C_35:
                                    ((sub_int (integer_of_int32 !size)) (1))))))) in
        void);
       (if ((neq_int_ (integer_of_int32 !size)) (0))
       then
        try
         (C_39:
         begin
           (let jessie_<somenum> =
           (v := (C_38:
                 (JC_<somenum>:
                 ((((offset_acc_ !intP_heap_1_alloc_table) !intP_intM_heap_1) heap) 
                  (integer_of_int32 !size))))) in void);
          (C_40:
          begin
            (let jessie_<somenum> = (i_0 := (safe_int32_of_integer_ (0))) in void);
           (loop_3:
           begin
             while true do
             { invariant (JC_<somenum>: true)
               variant (JC_<somenum> : sub_int(integer_of_int32(size),
                                 integer_of_int32(i_0))) }
              begin
                [ { } unit reads i_0,size
                  { (JC_<somenum>:
                    ((JC_<somenum>: le_int((0), integer_of_int32(i_0)))
                    and (JC_<somenum>:
                        le_int(integer_of_int32(i_0), integer_of_int32(size))))) } ];
               try
                begin
                  (let jessie_<somenum> =
                  begin
                    (if ((lt_int_ (integer_of_int32 !i_0)) (integer_of_int32 !size))
                    then void else (raise (Goto_while_0_break_exc void)));
                   (C_49:
                   begin
                     (let jessie_<somenum> =
                     (j := (C_48:
                           (JC_<somenum>:
                           (int32_of_integer_ (C_47:
                                              ((add_int (integer_of_int32 
                                                         (C_46:
                                                         (JC_<somenum>:
                                                         (int32_of_integer_ 
                                                          (C_45:
                                                          ((mul_int (2)) 
                                                           (integer_of_int32 !i_0)))))))) (1))))))) in
                     void);
                    (if ((lt_int_ (integer_of_int32 !j)) (integer_of_int32 
                                                          (C_58:
                                                          (JC_<somenum>:
                                                          (int32_of_integer_ 
                                                           (C_57:
                                                           ((sub_int 
                                                             (integer_of_int32 !size)) (1))))))))
                    then
                     (if ((lt_int_ (integer_of_int32 (C_56:
                                                     (JC_<somenum>:
                                                     ((((offset_acc_ !intP_heap_1_alloc_table) !intP_intM_heap_1) heap) 
                                                      (integer_of_int32 !j)))))) 
                          (integer_of_int32 (C_55:
                                            (JC_<somenum>:
                                            ((((offset_acc_ !intP_heap_1_alloc_table) !intP_intM_heap_1) heap) 
                                             (integer_of_int32 (C_54:
                                                               (JC_<somenum>:
                                                               (int32_of_integer_ 
                                                                (C_53:
                                                                ((add_int 
                                                                  (integer_of_int32 !j)) (1))))))))))))
                     then
                      (let jessie_<somenum> =
                      (C_52:
                      (j := (C_51:
                            (JC_<somenum>:
                            (int32_of_integer_ (C_50:
                                               ((add_int (integer_of_int32 !j)) (1)))))))) in
                      void) else void) else void);
                    (if ((ge_int_ (integer_of_int32 !v)) (integer_of_int32 
                                                          (C_59:
                                                          (JC_<somenum>:
                                                          ((((offset_acc_ !intP_heap_1_alloc_table) !intP_intM_heap_1) heap) 
                                                           (integer_of_int32 !j))))))
                    then (raise (Goto_while_0_break_exc void)) else void);
                    (C_62:
                    begin
                      (let jessie_<somenum> =
                      (let jessie_<somenum> =
                      (C_60:
                      (JC_<somenum>:
                      ((((offset_acc_ !intP_heap_1_alloc_table) !intP_intM_heap_1) heap) 
                       (integer_of_int32 !j)))) in
                      (let jessie_<somenum> = heap in
                      (let jessie_<somenum> = (integer_of_int32 !i_0) in
                      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
                      (JC_<somenum>:
                      (((((offset_upd_ !intP_heap_1_alloc_table) intP_intM_heap_1) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
                      void); (C_63: begin   (i_0 := !j); !i_0 end) end) end)
                  end in void); (raise (Loop_continue_exc void)) end with
                Loop_continue_exc jessie_<somenum> -> void end end done;
            (raise (Goto_while_0_break_exc void)) end) end) end) with
         Goto_while_0_break_exc jessie_<somenum> ->
         (let jessie_<somenum> =
         (while_0_break:
         begin
           void;
          (C_65:
          (let jessie_<somenum> = !v in
          (let jessie_<somenum> = heap in
          (let jessie_<somenum> = (integer_of_int32 !i_0) in
          (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
          (JC_<somenum>:
          begin
            (((((offset_upd_ !intP_heap_1_alloc_table) intP_intM_heap_1) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>);
           jessie_<somenum> end)))))) end) in void) end else void);
       (return := !res); (raise Return) end) end))))); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
    and ((JC_<somenum>: size_inv(size))
        and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table))))) }

let push_ensures_default =
 fun (x_3 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: lt_int(integer_of_int32(size), sub_int((100), (1))))
    and ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
        and ((JC_<somenum>: size_inv(size))
            and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))) }
  (init:
  try
   begin
     (let i = ref (any_int32 void) in
     (let parent = ref (any_int32 void) in
     (let p = ref (any_int32 void) in
     try
      (C_3:
      begin
        (let jessie_<somenum> = (i := !size) in void);
       (loop_2:
       begin
         while true do
         { invariant
             ((JC_<somenum>:
              ((JC_<somenum>: le_int((0), integer_of_int32(i)))
              and ((JC_<somenum>:
                   le_int(integer_of_int32(i), integer_of_int32(size)))
                  and ((JC_<somenum>:
                       ((integer_of_int32(i) = integer_of_int32(size)) ->
                        (is_heap(tree_of_array(shift(heap, (0)), (0),
                                 integer_of_int32(size), intP_intM_heap_1))
                        and (model(intP_intM_heap_1, size) = model(intP_intM_heap_1@init,
                                                             size@init)))))
                      and (JC_<somenum>:
                          (lt_int(integer_of_int32(i),
                           integer_of_int32(size)) ->
                           (is_heap(tree_of_array(shift(heap, (0)), (0),
                                    add_int(integer_of_int32(size), (1)),
                                    intP_intM_heap_1))
                           and (bag_of_tree(tree_of_array(shift(heap, (0)),
                                            (0),
                                            add_int(integer_of_int32(size),
                                            (1)), intP_intM_heap_1)) = 
                               add_bag(integer_of_int32(select(intP_intM_heap_1,
                                                        shift(heap,
                                                        integer_of_int32(i)))),
                               model(intP_intM_heap_1@init, size@init))))))))))
             and ((JC_<somenum>:
                  ((size = size@loop_2)
                  and (JC_<somenum>:
                      not_assigns(intP_heap_1_alloc_table@loop_2,
                      intP_intM_heap_1@loop_2, intP_intM_heap_1,
                      pset_all(pset_singleton(heap))))))
                 and (JC_<somenum>:
                     not_assigns(intP_heap_1_alloc_table@init,
                     intP_intM_heap_1@init, intP_intM_heap_1,
                     pset_all(pset_singleton(heap))))))  }
          begin
            [ { } unit { true } ];
           try
            begin
              (let jessie_<somenum> =
              begin
                (if ((gt_int_ (integer_of_int32 !i)) (0)) then void
                else (raise (Goto_while_0_break_exc void)));
               (C_16:
               begin
                 (let jessie_<somenum> =
                 (parent := (C_15:
                            (safe_int32_of_integer_ (C_14:
                                                    (JC_<somenum>:
                                                    ((computer_div (integer_of_int32 
                                                                    (C_13:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_12:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !i)) (1))))))) (2))))))) in
                 void);
                (C_18:
                begin
                  (let jessie_<somenum> =
                  (p := (C_17:
                        ((safe_acc_ !intP_intM_heap_1) ((shift heap) 
                                                        (integer_of_int32 !parent))))) in
                  void);
                 (if ((ge_int_ (integer_of_int32 !p)) (integer_of_int32 x_3))
                 then (raise (Goto_while_0_break_exc void)) else void);
                 (C_20:
                 begin
                   (let jessie_<somenum> =
                   (let jessie_<somenum> = !p in
                   (let jessie_<somenum> = heap in
                   (let jessie_<somenum> = (integer_of_int32 !i) in
                   (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
                   (((safe_upd_ intP_intM_heap_1) jessie_<somenum>) jessie_<somenum>))))) in
                   void); (C_21: begin   (i := !parent); !i end) end) end)
               end) end in void); (raise (Loop_continue_exc void)) end with
            Loop_continue_exc jessie_<somenum> -> void end end done;
        (raise (Goto_while_0_break_exc void)) end) end) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      begin
        void;
       (C_23:
       begin
         (let jessie_<somenum> =
         (let jessie_<somenum> = x_3 in
         (let jessie_<somenum> = heap in
         (let jessie_<somenum> = (integer_of_int32 !i) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
         (((safe_upd_ intP_intM_heap_1) jessie_<somenum>) jessie_<somenum>))))) in void);
        (C_26:
        begin
          (let jessie_<somenum> =
          (size := (C_25:
                   (safe_int32_of_integer_ (C_24:
                                           ((add_int (integer_of_int32 !size)) (1)))))) in
          void); (raise Return) end) end) end) end))); (raise Return) end
   with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>:
     (model(intP_intM_heap_1, size) = add_bag(integer_of_int32(x_3),
                                      model(intP_intM_heap_1@, size@))))
    and (JC_<somenum>:
        not_assigns(intP_heap_1_alloc_table@, intP_intM_heap_1@,
        intP_intM_heap_1, pset_all(pset_singleton(heap)))))) }

let push_safety =
 fun (x_3 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: lt_int(integer_of_int32(size), sub_int((100), (1))))
    and ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
        and ((JC_<somenum>: size_inv(size))
            and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table)))))) }
  (init:
  try
   begin
     (let i = ref (any_int32 void) in
     (let parent = ref (any_int32 void) in
     (let p = ref (any_int32 void) in
     try
      (C_3:
      begin
        (let jessie_<somenum> = (i := !size) in void);
       (loop_1:
       begin
         while true do
         { invariant (JC_<somenum>: true) variant integer_of_int32((JC_<somenum> : i)) }
          begin
            [ { } unit reads i,intP_intM_heap_1,size
              { (JC_<somenum>:
                ((JC_<somenum>: le_int((0), integer_of_int32(i)))
                and ((JC_<somenum>:
                     le_int(integer_of_int32(i), integer_of_int32(size)))
                    and ((JC_<somenum>:
                         ((integer_of_int32(i) = integer_of_int32(size)) ->
                          (is_heap(tree_of_array(shift(heap, (0)), (0),
                                   integer_of_int32(size), intP_intM_heap_1))
                          and (model(intP_intM_heap_1, size) = model(intP_intM_heap_1@init,
                                                               size@init)))))
                        and (JC_<somenum>:
                            (lt_int(integer_of_int32(i),
                             integer_of_int32(size)) ->
                             (is_heap(tree_of_array(shift(heap, (0)), (0),
                                      add_int(integer_of_int32(size), (1)),
                                      intP_intM_heap_1))
                             and (bag_of_tree(tree_of_array(shift(heap, (0)),
                                              (0),
                                              add_int(integer_of_int32(size),
                                              (1)), intP_intM_heap_1)) = 
                                 add_bag(integer_of_int32(select(intP_intM_heap_1,
                                                          shift(heap,
                                                          integer_of_int32(i)))),
                                 model(intP_intM_heap_1@init, size@init)))))))))) } ];
           try
            begin
              (let jessie_<somenum> =
              begin
                (if ((gt_int_ (integer_of_int32 !i)) (0)) then void
                else (raise (Goto_while_0_break_exc void)));
               (C_16:
               begin
                 (let jessie_<somenum> =
                 (parent := (C_15:
                            (JC_<somenum>:
                            (int32_of_integer_ (C_14:
                                               (JC_<somenum>:
                                               ((computer_div_ (integer_of_int32 
                                                                (C_13:
                                                                (JC_<somenum>:
                                                                (int32_of_integer_ 
                                                                 (C_12:
                                                                 ((sub_int 
                                                                   (integer_of_int32 !i)) (1)))))))) (2)))))))) in
                 void);
                (C_18:
                begin
                  (let jessie_<somenum> =
                  (p := (C_17:
                        (JC_<somenum>:
                        ((((offset_acc_ !intP_heap_1_alloc_table) !intP_intM_heap_1) heap) 
                         (integer_of_int32 !parent))))) in void);
                 (if ((ge_int_ (integer_of_int32 !p)) (integer_of_int32 x_3))
                 then (raise (Goto_while_0_break_exc void)) else void);
                 (C_20:
                 begin
                   (let jessie_<somenum> =
                   (let jessie_<somenum> = !p in
                   (let jessie_<somenum> = heap in
                   (let jessie_<somenum> = (integer_of_int32 !i) in
                   (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
                   (JC_<somenum>:
                   (((((offset_upd_ !intP_heap_1_alloc_table) intP_intM_heap_1) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
                   void); (C_21: begin   (i := !parent); !i end) end) end)
               end) end in void); (raise (Loop_continue_exc void)) end with
            Loop_continue_exc jessie_<somenum> -> void end end done;
        (raise (Goto_while_0_break_exc void)) end) end) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      begin
        void;
       (C_23:
       begin
         (let jessie_<somenum> =
         (let jessie_<somenum> = x_3 in
         (let jessie_<somenum> = heap in
         (let jessie_<somenum> = (integer_of_int32 !i) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
         (JC_<somenum>:
         (((((offset_upd_ !intP_heap_1_alloc_table) intP_intM_heap_1) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
         void);
        (C_26:
        begin
          (let jessie_<somenum> =
          (size := (C_25:
                   (JC_<somenum>:
                   (int32_of_integer_ (C_24:
                                      ((add_int (integer_of_int32 !size)) (1))))))) in
          void); (raise Return) end) end) end) end))); (raise Return) end
   with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>: is_heap_inv(intP_intM_heap_1, size))
    and ((JC_<somenum>: size_inv(size))
        and (JC_<somenum>: valid_heap(intP_heap_1_alloc_table))))) }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C heap.jessie --quiet -f heap.makefile project
why --project [...] why/heap.why
<project name="heap" context="why/heap_ctx.why">
  <lemma name="div2_1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/heap_po1.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "34" begin = "4" end = "58"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <function name="Lemma div2_1">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Function push">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/heap_po53.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "146" begin = "8" end = "14"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heap_po54.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "146" begin = "13" end = "22"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heap_po55.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "147" begin = "8" end = "108"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heap_po56.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "150" begin = "8" end = "183"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heap_po57.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "150" begin = "8" end = "183"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heap_po58.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "203" begin = "6" end = "1615"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heap_po59.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "203" begin = "6" end = "1615"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heap_po60.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "146" begin = "8" end = "14"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heap_po61.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "146" begin = "13" end = "22"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heap_po62.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "147" begin = "8" end = "108"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heap_po63.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "147" begin = "8" end = "108"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heap_po64.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "150" begin = "8" end = "183"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heap_po65.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "150" begin = "8" end = "183"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heap_po66.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "203" begin = "6" end = "1615"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heap_po67.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "203" begin = "6" end = "1615"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heap_po68.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "141" begin = "6" end = "38"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heap_po69.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "143" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/heap_po70.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "160" begin = "18" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po71.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "160" begin = "18" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po72.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "160" begin = "17" end = "26"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/heap_po73.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "160" begin = "17" end = "26"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po74.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "160" begin = "17" end = "26"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po75.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "161" begin = "12" end = "24"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po76.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "161" begin = "12" end = "24"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po77.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "232" begin = "24" end = "52"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po78.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "232" begin = "24" end = "52"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po79.why">
      <location file = "why/heap.why" line = "1243" begin = "43" end = "72"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/heap_po80.why">
      <location file = "why/heap.why" line = "1243" begin = "43" end = "72"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/heap_po81.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "238" begin = "15" end = "43"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po82.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "238" begin = "15" end = "43"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po83.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "167" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po84.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "167" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po85.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "143" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heap_po86.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "143" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heap_po87.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "143" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function pop">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/heap_po10.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "196" begin = "10" end = "16"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heap_po11.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "196" begin = "15" end = "24"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heap_po12.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "283" begin = "9" end = "1107"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heap_po13.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "283" begin = "9" end = "1107"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heap_po14.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "196" begin = "10" end = "16"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heap_po15.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "196" begin = "15" end = "24"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heap_po16.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "283" begin = "9" end = "1107"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heap_po17.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "283" begin = "9" end = "1107"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heap_po18.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "186" begin = "6" end = "28"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heap_po19.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "187" begin = "6" end = "38"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heap_po20.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "188" begin = "6" end = "44"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heap_po21.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "190" begin = "4" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/heap_po22.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "192" begin = "6" end = "12"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po23.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "192" begin = "6" end = "12"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po24.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "193" begin = "12" end = "22"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po25.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "193" begin = "12" end = "22"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po26.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "203" begin = "14" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po27.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "203" begin = "14" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po28.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "203" begin = "14" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po29.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "203" begin = "14" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po30.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "204" begin = "14" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po31.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "204" begin = "14" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po32.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "204" begin = "24" end = "31"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po33.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "204" begin = "24" end = "31"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po34.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "204" begin = "39" end = "42"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po35.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "204" begin = "39" end = "42"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po36.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "204" begin = "34" end = "43"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po37.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "204" begin = "34" end = "43"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po38.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "204" begin = "45" end = "48"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po39.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "204" begin = "45" end = "48"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heap_po40.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "205" begin = "15" end = "22"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po41.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "205" begin = "15" end = "22"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po42.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "206" begin = "16" end = "23"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po43.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "206" begin = "16" end = "23"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po44.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "303" begin = "27" end = "80"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po45.why">
      <location file = "PPCHOME/tests/jessie/heap.jessie/heap.jc" line = "303" begin = "27" end = "80"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heap_po46.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "200" begin = "10" end = "18"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/heap_po47.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "200" begin = "10" end = "18"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/heap_po48.why">
      <location file = "why/heap.why" line = "1089" begin = "13" end = "104"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/heap_po49.why">
      <location file = "why/heap.why" line = "1089" begin = "13" end = "104"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/heap_po50.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "190" begin = "4" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heap_po51.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "190" begin = "4" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heap_po52.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "190" begin = "4" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function max">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/heap_po6.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "175" begin = "6" end = "32"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/heap_po7.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "177" begin = "4" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heap_po8.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "177" begin = "4" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heap_po9.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "177" begin = "4" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function clear">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/heap_po2.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "130" begin = "6" end = "24"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/heap_po3.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "132" begin = "5" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heap_po4.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "132" begin = "5" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heap_po5.why">
      <location file = "PPCHOME/tests/jessie/heap.c" line = "132" begin = "5" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type bag

type charP

type heap_1

type int32

type int8

type intP

type padding

type tree

type uint8

type unsigned_charP

type voidP

logic Empty : tree

logic Node : tree, int, tree -> tree

logic union_bag : bag, bag -> bag

logic singleton_bag : int -> bag

function add_bag(x_1: int, b: bag) : bag = union_bag(b, singleton_bag(x_1))

logic bag_of_tree : tree -> bag

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic empty_bag : bag

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint8 : uint8 -> int

predicate eq_uint8(x: uint8, y: uint8) =
  (integer_of_uint8(x) = integer_of_uint8(y))

logic heap : intP pointer

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32 [(integer_of_int32(x) = integer_of_int32(y))].
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8 [(integer_of_int8(x) = integer_of_int8(y))].
      ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

logic is_heap : tree -> prop

logic tree_of_array : intP pointer, int, int, (intP, int32) memory -> tree

predicate is_heap_inv(intP_intM_heap_1: (intP, int32) memory, size: int32) =
  is_heap(tree_of_array(shift(heap, 0), 0, integer_of_int32(size),
  intP_intM_heap_1))

logic occ_bag : int, bag -> int

predicate is_max_bag(b_1: bag, m: int) =
  ((occ_bag(m, b_1) >= 1) and
   (forall x_3_0:int. ((occ_bag(x_3_0, b_1) >= 1) -> (x_3_0 <= m))))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

function model(intP_intM_heap_1_at_L: (intP, int32) memory,
  size_at_L: int32) : bag = bag_of_tree(tree_of_array(shift(heap, 0), 0,
  integer_of_int32(size_at_L), intP_intM_heap_1_at_L))

axiom no_assign_tree_of_array_0:
  (forall tmp:intP pset.
    (forall tmpmem:(intP, int32) memory.
      (forall tmpalloc:intP alloc_table.
        (forall intP_intM_t_1_2_at_L:(intP, int32) memory.
          (forall bound:int.
            (forall root:int.
              (forall t_1:intP pointer.
                ((pset_disjoint(tmp, pset_all(pset_singleton(t_1))) and
                  not_assigns(tmpalloc, intP_intM_t_1_2_at_L, tmpmem, tmp)) ->
                 (tree_of_array(t_1, root, bound,
                 intP_intM_t_1_2_at_L) = tree_of_array(t_1, root, bound,
                 tmpmem))))))))))

axiom no_update_tree_of_array_0:
  (forall tmp:intP pointer.
    (forall tmpval:int32.
      (forall intP_intM_t_1_2_at_L:(intP, int32) memory.
        (forall bound:int.
          (forall root:int.
            (forall t_1:intP pointer.
              ((not in_pset(tmp, pset_all(pset_singleton(t_1)))) ->
               (tree_of_array(t_1, root, bound,
               intP_intM_t_1_2_at_L) = tree_of_array(t_1, root, bound,
               store(intP_intM_t_1_2_at_L, tmp, tmpval))))))))))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate size_inv(size: int32) =
  ((0 <= integer_of_int32(size)) and (integer_of_int32(size) < 100))

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint8_of_integer : int -> uint8

axiom uint8_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 255)) -> (integer_of_uint8(uint8_of_integer(x)) = x)))

axiom uint8_extensionality:
  (forall x:uint8.
    (forall y:uint8 [(integer_of_uint8(x) = integer_of_uint8(y))].
      ((integer_of_uint8(x) = integer_of_uint8(y)) -> (x = y))))

axiom uint8_range:
  (forall x:uint8.
    ((0 <= integer_of_uint8(x)) and (integer_of_uint8(x) <= 255)))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_heap(intP_heap_1_alloc_table: intP alloc_table) =
  ((offset_min(intP_heap_1_alloc_table, heap) <= 0) and
   (offset_max(intP_heap_1_alloc_table, heap) >= 99))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

axiom bag_of_tree_def_1: (bag_of_tree(Empty) = empty_bag)

axiom bag_of_tree_def_2:
  (forall l_0:tree.
    (forall x_5_0:int.
      (forall r_0:tree. (bag_of_tree(Node(l_0, x_5_0, r_0)) = add_bag(x_5_0,
        union_bag(bag_of_tree(l_0), bag_of_tree(r_0)))))))

axiom is_heap_def_1: is_heap(Empty)

axiom is_heap_def_2: (forall x_6:int. is_heap(Node(Empty, x_6, Empty)))

axiom is_heap_def_3:
  (forall ll:tree.
    (forall lr:tree.
      (forall lx:int.
        (forall x_7:int.
          ((x_7 >= lx) ->
           (is_heap(Node(ll, lx, lr)) -> is_heap(Node(Node(ll, lx, lr), x_7,
            Empty))))))))

axiom is_heap_def_4:
  (forall rl:tree.
    (forall rr:tree.
      (forall rx:int.
        (forall x_8:int.
          ((x_8 >= rx) ->
           (is_heap(Node(rl, rx, rr)) -> is_heap(Node(Empty, x_8, Node(rl,
            rx, rr)))))))))

axiom is_heap_def_5:
  (forall ll_0:tree.
    (forall lr_0:tree.
      (forall rl_0:tree.
        (forall rr_0:tree.
          (forall lx_0:int.
            (forall x_9:int.
              (forall rx_0:int.
                ((x_9 >= lx_0) ->
                 (is_heap(Node(ll_0, lx_0, lr_0)) ->
                  ((x_9 >= rx_0) ->
                   (is_heap(Node(rl_0, rx_0, rr_0)) ->
                    is_heap(Node(Node(ll_0, lx_0, lr_0), x_9, Node(rl_0,
                    rx_0, rr_0))))))))))))))

axiom tree_of_array_def_1:
  (forall intP_intM_t_1_2_at_L:(intP, int32) memory.
    (forall t_2:intP pointer.
      (forall root_0:int.
        (forall bound_0:int.
          ((root_0 >= bound_0) -> (tree_of_array(t_2, root_0, bound_0,
           intP_intM_t_1_2_at_L) = Empty))))))

axiom tree_of_array_def_2:
  (forall intP_intM_t_1_2_at_L:(intP, int32) memory.
    (forall t_3:intP pointer.
      (forall root_1:int.
        (forall bound_1:int.
          (((0 <= root_1) and (root_1 < bound_1)) -> (tree_of_array(t_3,
           root_1, bound_1, intP_intM_t_1_2_at_L) = Node(tree_of_array(t_3,
           ((2 * root_1) + 1), bound_1, intP_intM_t_1_2_at_L),
           integer_of_int32(select(intP_intM_t_1_2_at_L, shift(t_3,
           root_1))), tree_of_array(t_3, ((2 * root_1) + 2), bound_1,
           intP_intM_t_1_2_at_L))))))))

