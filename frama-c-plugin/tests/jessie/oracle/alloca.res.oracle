Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only alloca.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD alloca.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir alloca.jessie
[jessie] File alloca.jessie/alloca.jc written.
[jessie] File alloca.jessie/alloca.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag int_P = {
  int32 int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

int32 f()
behavior default:
  ensures (C_12 : (\result == 3));
{  
   (var int_P[0..2] t);
   
   (var int32 __retres);
   
   {  (C_2 : (t = (C_1 : (new int_P[3]))));
      (C_4 : ((C_3 : (t + 0).int_M) = 1));
      (C_6 : ((C_5 : (t + 1).int_M) = 2));
      (C_8 : ((C_7 : (t + 2).int_M) = 3));
      (C_10 : (__retres = (C_9 : (t + 2).int_M)));
      
      {  (C_11 : (free(t)));
         
         (return __retres)
      }
   }
}

int32 g()
behavior default:
  ensures (C_24 : (\result == 3));
{  
   (var int_P[0..2] t_0);
   
   (var int32 __retres_0);
   
   {  (C_14 : (t_0 = (C_13 : (new int_P[3]))));
      (C_16 : ((C_15 : (t_0 + 0).int_M) = 1));
      (C_18 : ((C_17 : (t_0 + 1).int_M) = 2));
      (C_20 : ((C_19 : (t_0 + 2).int_M) = 3));
      (C_22 : (__retres_0 = (C_21 : (t_0 + 2).int_M)));
      
      {  (C_23 : (free(t_0)));
         
         (return __retres_0)
      }
   }
}

int_P[0..3] u;

invariant valid_u :
((\offset_min(u) <= 0) && (\offset_max(u) >= 3))

int32 h()
  requires (C_38 : ((u + 2).int_M == 12));
behavior default:
  ensures (C_39 : (\result == 12));
{  
   (var int_P[0..3] t_1);
   
   (var int32 __retres_1);
   
   {  (C_26 : (t_1 = (C_25 : (new int_P[4]))));
      (C_28 : ((C_27 : (t_1 + 0).int_M) = 1));
      (C_30 : ((C_29 : (t_1 + 1).int_M) = 2));
      (C_32 : ((C_31 : (t_1 + 2).int_M) = 3));
      (C_34 : ((C_33 : (t_1 + 3).int_M) = 4));
      (C_36 : (__retres_1 = (C_35 : (u + 2).int_M)));
      
      {  (C_37 : (free(t_1)));
         
         (return __retres_1)
      }
   }
}

int32 two_local_arrays()
behavior default:
  ensures (C_67 : (\result == 3));
{  
   (var int_P[0..3] t_2);
   
   (var int_P[0..4] u_0);
   
   (var int32 __retres_2);
   
   {  (C_41 : (t_2 = (C_40 : (new int_P[4]))));
      (C_43 : (u_0 = (C_42 : (new int_P[5]))));
      (C_45 : ((C_44 : (t_2 + 0).int_M) = 1));
      (C_47 : ((C_46 : (t_2 + 1).int_M) = 2));
      (C_49 : ((C_48 : (t_2 + 2).int_M) = 3));
      (C_51 : ((C_50 : (t_2 + 3).int_M) = 4));
      (C_53 : ((C_52 : (u_0 + 0).int_M) = 0));
      (C_55 : ((C_54 : (u_0 + 1).int_M) = 0));
      (C_58 : ((C_57 : (u_0 + 2).int_M) = (C_56 : (t_2 + 2).int_M)));
      (C_60 : ((C_59 : (u_0 + 3).int_M) = 0));
      (C_62 : ((C_61 : (u_0 + 4).int_M) = 0));
      (C_64 : (__retres_2 = (C_63 : (u_0 + 2).int_M)));
      
      {  (C_65 : (free(t_2)));
         (C_66 : (free(u_0)));
         
         (return __retres_2)
      }
   }
}

int32 two_local_arrays_not_alias()
behavior default:
  ensures (C_80 : (\result == 3));
{  
   (var int_P[0..4] t_3);
   
   (var int_P[0..5] v);
   
   (var int32 __retres_3);
   
   {  (C_69 : (t_3 = (C_68 : (new int_P[5]))));
      (C_71 : (v = (C_70 : (new int_P[6]))));
      (C_73 : ((C_72 : (t_3 + 4).int_M) = 3));
      (C_75 : ((C_74 : (v + 4).int_M) = 1));
      (C_77 : (__retres_3 = (C_76 : (t_3 + 4).int_M)));
      
      {  (C_78 : (free(t_3)));
         (C_79 : (free(v)));
         
         (return __retres_3)
      }
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs alloca.jessie/alloca.cloc alloca.jessie/alloca.jc
type char_P

type int32

type int8

type int_P

type padding

type u_1

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_int_P(p:int_P pointer,
 a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_int_P(p:int_P pointer,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic u:  -> int_P pointer

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_u(int_P_u_1_alloc_table:int_P alloc_table) =
 (le_int(offset_min(int_P_u_1_alloc_table, u), (0))
 and ge_int(offset_max(int_P_u_1_alloc_table, u), (3)))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter int_P_u_1_alloc_table : int_P alloc_table ref

parameter f :
 tt:unit ->
  { } int32 reads int_P_u_1_alloc_table
  { ((JC_13: valid_u(int_P_u_1_alloc_table))
    and (JC_11: eq_int(integer_of_int32(result), (3)))) }

parameter f_requires :
 tt:unit ->
  { (JC_6: valid_u(int_P_u_1_alloc_table))} int32 reads int_P_u_1_alloc_table
  { ((JC_13: valid_u(int_P_u_1_alloc_table))
    and (JC_11: eq_int(integer_of_int32(result), (3)))) }

parameter g :
 tt:unit ->
  { } int32 reads int_P_u_1_alloc_table
  { ((JC_24: valid_u(int_P_u_1_alloc_table))
    and (JC_22: eq_int(integer_of_int32(result), (3)))) }

parameter g_requires :
 tt:unit ->
  { (JC_17: valid_u(int_P_u_1_alloc_table))} int32
  reads int_P_u_1_alloc_table
  { ((JC_24: valid_u(int_P_u_1_alloc_table))
    and (JC_22: eq_int(integer_of_int32(result), (3)))) }

parameter int_P_int_M_u_1 : (int_P, int32) memory ref

parameter h :
 tt:unit ->
  { } int32 reads int_P_int_M_u_1,int_P_u_1_alloc_table
  { ((JC_39: valid_u(int_P_u_1_alloc_table))
    and (JC_37: eq_int(integer_of_int32(result), (12)))) }

parameter h_requires :
 tt:unit ->
  { (JC_30:
    ((JC_28:
     eq_int(integer_of_int32(select(int_P_int_M_u_1, shift(u, (2)))), (12)))
    and (JC_29: valid_u(int_P_u_1_alloc_table))))}
  int32 reads int_P_int_M_u_1,int_P_u_1_alloc_table
  { ((JC_39: valid_u(int_P_u_1_alloc_table))
    and (JC_37: eq_int(integer_of_int32(result), (12)))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter two_local_arrays :
 tt:unit ->
  { } int32 reads int_P_u_1_alloc_table
  { ((JC_50: valid_u(int_P_u_1_alloc_table))
    and (JC_48: eq_int(integer_of_int32(result), (3)))) }

parameter two_local_arrays_not_alias :
 tt:unit ->
  { } int32 reads int_P_u_1_alloc_table
  { ((JC_64: valid_u(int_P_u_1_alloc_table))
    and (JC_62: eq_int(integer_of_int32(result), (3)))) }

parameter two_local_arrays_not_alias_requires :
 tt:unit ->
  { (JC_57: valid_u(int_P_u_1_alloc_table))} int32
  reads int_P_u_1_alloc_table
  { ((JC_64: valid_u(int_P_u_1_alloc_table))
    and (JC_62: eq_int(integer_of_int32(result), (3)))) }

parameter two_local_arrays_requires :
 tt:unit ->
  { (JC_43: valid_u(int_P_u_1_alloc_table))} int32
  reads int_P_u_1_alloc_table
  { ((JC_50: valid_u(int_P_u_1_alloc_table))
    and (JC_48: eq_int(integer_of_int32(result), (3)))) }

let f_ensures_default =
 fun (tt : unit) ->
  { (JC_8: valid_u(int_P_u_1_alloc_table)) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_t_2 = ref (any_memory void) in
     (let int_P_t_2_tag_table = ref (any_tag_table void) in
     (let int_P_t_2_alloc_table = ref (any_alloc_table void) in
     (let t = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_25 = (t := (C_1:
                              (JC_16:
                              (((alloc_struct_int_P (3)) int_P_t_2_alloc_table) int_P_t_2_tag_table)))) in
       void);
      (C_4:
      begin
        (let jessie_31 = (let jessie_27 = (safe_int32_of_integer_ (1)) in
                         (let jessie_30 = ((shift !t) (0)) in
                         (((safe_upd_ int_P_int_M_t_2) jessie_30) jessie_27))) in
        void);
       (C_6:
       begin
         (let jessie_37 = (let jessie_33 = (safe_int32_of_integer_ (2)) in
                          (let jessie_36 = ((shift !t) (1)) in
                          (((safe_upd_ int_P_int_M_t_2) jessie_36) jessie_33))) in
         void);
        (C_8:
        begin
          (let jessie_43 = (let jessie_39 = (safe_int32_of_integer_ (3)) in
                           (let jessie_42 = ((shift !t) (2)) in
                           (((safe_upd_ int_P_int_M_t_2) jessie_42) jessie_39))) in
          void);
         (C_10:
         begin
           (let jessie_45 = (__retres := (C_9:
                                         ((safe_acc_ !int_P_int_M_t_2) 
                                          ((shift !t) (2))))) in
           void);
          (C_11:
          begin
            ((safe_free_parameter int_P_t_2_alloc_table) !t);
           (return := !__retres);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_10: eq_int(integer_of_int32(result), (3))) }

let f_safety =
 fun (tt : unit) ->
  { (JC_8: valid_u(int_P_u_1_alloc_table)) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_t_2 = ref (any_memory void) in
     (let int_P_t_2_tag_table = ref (any_tag_table void) in
     (let int_P_t_2_alloc_table = ref (any_alloc_table void) in
     (let t = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_2 = (t := (let jessie_1 = (C_1:
                                             (JC_14:
                                             (((alloc_struct_int_P_requires (3)) int_P_t_2_alloc_table) int_P_t_2_tag_table))) in
                             (JC_15:
                             (assert
                             { ge_int(offset_max(int_P_t_2_alloc_table,
                                      jessie_1),
                               (2)) };
                             jessie_1)))) in
       void);
      (C_4:
      begin
        (let jessie_8 = (let jessie_4 = (safe_int32_of_integer_ (1)) in
                        (let jessie_7 = ((shift !t) (0)) in
                        (((safe_upd_ int_P_int_M_t_2) jessie_7) jessie_4))) in
        void);
       (C_6:
       begin
         (let jessie_14 = (let jessie_10 = (safe_int32_of_integer_ (2)) in
                          (let jessie_13 = ((shift !t) (1)) in
                          (((safe_upd_ int_P_int_M_t_2) jessie_13) jessie_10))) in
         void);
        (C_8:
        begin
          (let jessie_20 = (let jessie_16 = (safe_int32_of_integer_ (3)) in
                           (let jessie_19 = ((shift !t) (2)) in
                           (((safe_upd_ int_P_int_M_t_2) jessie_19) jessie_16))) in
          void);
         (C_10:
         begin
           (let jessie_22 = (__retres := (C_9:
                                         ((safe_acc_ !int_P_int_M_t_2) 
                                          ((shift !t) (2))))) in
           void);
          (C_11:
          begin
            ((free_parameter int_P_t_2_alloc_table) !t);
           (return := !__retres);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_12: valid_u(int_P_u_1_alloc_table)) }

let g_ensures_default =
 fun (tt : unit) ->
  { (JC_19: valid_u(int_P_u_1_alloc_table)) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_t_0_4 = ref (any_memory void) in
     (let int_P_t_0_4_tag_table = ref (any_tag_table void) in
     (let int_P_t_0_4_alloc_table = ref (any_alloc_table void) in
     (let t_0 = ref (any_pointer void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_14:
     begin
       (let jessie_71 = (t_0 := (C_13:
                                (JC_27:
                                (((alloc_struct_int_P (3)) int_P_t_0_4_alloc_table) int_P_t_0_4_tag_table)))) in
       void);
      (C_16:
      begin
        (let jessie_77 = (let jessie_73 = (safe_int32_of_integer_ (1)) in
                         (let jessie_76 = ((shift !t_0) (0)) in
                         (((safe_upd_ int_P_int_M_t_0_4) jessie_76) jessie_73))) in
        void);
       (C_18:
       begin
         (let jessie_83 = (let jessie_79 = (safe_int32_of_integer_ (2)) in
                          (let jessie_82 = ((shift !t_0) (1)) in
                          (((safe_upd_ int_P_int_M_t_0_4) jessie_82) jessie_79))) in
         void);
        (C_20:
        begin
          (let jessie_89 = (let jessie_85 = (safe_int32_of_integer_ (3)) in
                           (let jessie_88 = ((shift !t_0) (2)) in
                           (((safe_upd_ int_P_int_M_t_0_4) jessie_88) jessie_85))) in
          void);
         (C_22:
         begin
           (let jessie_91 = (__retres_0 := (C_21:
                                           ((safe_acc_ !int_P_int_M_t_0_4) 
                                            ((shift !t_0) (2))))) in
           void);
          (C_23:
          begin
            ((safe_free_parameter int_P_t_0_4_alloc_table) !t_0);
           (return := !__retres_0);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_21: eq_int(integer_of_int32(result), (3))) }

let g_safety =
 fun (tt : unit) ->
  { (JC_19: valid_u(int_P_u_1_alloc_table)) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_t_0_4 = ref (any_memory void) in
     (let int_P_t_0_4_tag_table = ref (any_tag_table void) in
     (let int_P_t_0_4_alloc_table = ref (any_alloc_table void) in
     (let t_0 = ref (any_pointer void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_14:
     begin
       (let jessie_48 = (t_0 := (let jessie_47 = (C_13:
                                                 (JC_25:
                                                 (((alloc_struct_int_P_requires (3)) int_P_t_0_4_alloc_table) int_P_t_0_4_tag_table))) in
                                (JC_26:
                                (assert
                                { ge_int(offset_max(int_P_t_0_4_alloc_table,
                                         jessie_47),
                                  (2)) };
                                jessie_47)))) in
       void);
      (C_16:
      begin
        (let jessie_54 = (let jessie_50 = (safe_int32_of_integer_ (1)) in
                         (let jessie_53 = ((shift !t_0) (0)) in
                         (((safe_upd_ int_P_int_M_t_0_4) jessie_53) jessie_50))) in
        void);
       (C_18:
       begin
         (let jessie_60 = (let jessie_56 = (safe_int32_of_integer_ (2)) in
                          (let jessie_59 = ((shift !t_0) (1)) in
                          (((safe_upd_ int_P_int_M_t_0_4) jessie_59) jessie_56))) in
         void);
        (C_20:
        begin
          (let jessie_66 = (let jessie_62 = (safe_int32_of_integer_ (3)) in
                           (let jessie_65 = ((shift !t_0) (2)) in
                           (((safe_upd_ int_P_int_M_t_0_4) jessie_65) jessie_62))) in
          void);
         (C_22:
         begin
           (let jessie_68 = (__retres_0 := (C_21:
                                           ((safe_acc_ !int_P_int_M_t_0_4) 
                                            ((shift !t_0) (2))))) in
           void);
          (C_23:
          begin
            ((free_parameter int_P_t_0_4_alloc_table) !t_0);
           (return := !__retres_0);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_23: valid_u(int_P_u_1_alloc_table)) }

let h_ensures_default =
 fun (tt : unit) ->
  { (JC_34:
    ((JC_32:
     eq_int(integer_of_int32(select(int_P_int_M_u_1, shift(u, (2)))), (12)))
    and (JC_33: valid_u(int_P_u_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_t_1_6 = ref (any_memory void) in
     (let int_P_t_1_6_tag_table = ref (any_tag_table void) in
     (let int_P_t_1_6_alloc_table = ref (any_alloc_table void) in
     (let t_1 = ref (any_pointer void) in
     (let __retres_1 = ref (any_int32 void) in
     (C_26:
     begin
       (let jessie_123 = (t_1 := (C_25:
                                 (JC_42:
                                 (((alloc_struct_int_P (4)) int_P_t_1_6_alloc_table) int_P_t_1_6_tag_table)))) in
       void);
      (C_28:
      begin
        (let jessie_129 = (let jessie_125 = (safe_int32_of_integer_ (1)) in
                          (let jessie_128 = ((shift !t_1) (0)) in
                          (((safe_upd_ int_P_int_M_t_1_6) jessie_128) jessie_125))) in
        void);
       (C_30:
       begin
         (let jessie_135 = (let jessie_131 = (safe_int32_of_integer_ (2)) in
                           (let jessie_134 = ((shift !t_1) (1)) in
                           (((safe_upd_ int_P_int_M_t_1_6) jessie_134) jessie_131))) in
         void);
        (C_32:
        begin
          (let jessie_141 = (let jessie_137 = (safe_int32_of_integer_ (3)) in
                            (let jessie_140 = ((shift !t_1) (2)) in
                            (((safe_upd_ int_P_int_M_t_1_6) jessie_140) jessie_137))) in
          void);
         (C_34:
         begin
           (let jessie_147 = (let jessie_143 = (safe_int32_of_integer_ (4)) in
                             (let jessie_146 = ((shift !t_1) (3)) in
                             (((safe_upd_ int_P_int_M_t_1_6) jessie_146) jessie_143))) in
           void);
          (C_36:
          begin
            (let jessie_149 = (__retres_1 := (C_35:
                                             ((safe_acc_ !int_P_int_M_u_1) 
                                              ((shift u) (2))))) in
            void);
           (C_37:
           begin
             ((safe_free_parameter int_P_t_1_6_alloc_table) !t_1);
            (return := !__retres_1);
            (raise Return)
           end)
          end)
         end)
        end)
       end)
      end)
     end))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_36: eq_int(integer_of_int32(result), (12))) }

let h_safety =
 fun (tt : unit) ->
  { (JC_34:
    ((JC_32:
     eq_int(integer_of_int32(select(int_P_int_M_u_1, shift(u, (2)))), (12)))
    and (JC_33: valid_u(int_P_u_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_t_1_6 = ref (any_memory void) in
     (let int_P_t_1_6_tag_table = ref (any_tag_table void) in
     (let int_P_t_1_6_alloc_table = ref (any_alloc_table void) in
     (let t_1 = ref (any_pointer void) in
     (let __retres_1 = ref (any_int32 void) in
     (C_26:
     begin
       (let jessie_94 = (t_1 := (let jessie_93 = (C_25:
                                                 (JC_40:
                                                 (((alloc_struct_int_P_requires (4)) int_P_t_1_6_alloc_table) int_P_t_1_6_tag_table))) in
                                (JC_41:
                                (assert
                                { ge_int(offset_max(int_P_t_1_6_alloc_table,
                                         jessie_93),
                                  (3)) };
                                jessie_93)))) in
       void);
      (C_28:
      begin
        (let jessie_100 = (let jessie_96 = (safe_int32_of_integer_ (1)) in
                          (let jessie_99 = ((shift !t_1) (0)) in
                          (((safe_upd_ int_P_int_M_t_1_6) jessie_99) jessie_96))) in
        void);
       (C_30:
       begin
         (let jessie_106 = (let jessie_102 = (safe_int32_of_integer_ (2)) in
                           (let jessie_105 = ((shift !t_1) (1)) in
                           (((safe_upd_ int_P_int_M_t_1_6) jessie_105) jessie_102))) in
         void);
        (C_32:
        begin
          (let jessie_112 = (let jessie_108 = (safe_int32_of_integer_ (3)) in
                            (let jessie_111 = ((shift !t_1) (2)) in
                            (((safe_upd_ int_P_int_M_t_1_6) jessie_111) jessie_108))) in
          void);
         (C_34:
         begin
           (let jessie_118 = (let jessie_114 = (safe_int32_of_integer_ (4)) in
                             (let jessie_117 = ((shift !t_1) (3)) in
                             (((safe_upd_ int_P_int_M_t_1_6) jessie_117) jessie_114))) in
           void);
          (C_36:
          begin
            (let jessie_120 = (__retres_1 := (C_35:
                                             ((safe_acc_ !int_P_int_M_u_1) 
                                              ((shift u) (2))))) in
            void);
           (C_37:
           begin
             ((free_parameter int_P_t_1_6_alloc_table) !t_1);
            (return := !__retres_1);
            (raise Return)
           end)
          end)
         end)
        end)
       end)
      end)
     end))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_38: valid_u(int_P_u_1_alloc_table)) }

let two_local_arrays_ensures_default =
 fun (tt : unit) ->
  { (JC_45: valid_u(int_P_u_1_alloc_table)) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_u_0_9 = ref (any_memory void) in
     (let int_P_int_M_t_2_8 = ref (any_memory void) in
     (let int_P_t_2_8_tag_table = ref (any_tag_table void) in
     (let int_P_u_0_9_tag_table = ref (any_tag_table void) in
     (let int_P_u_0_9_alloc_table = ref (any_alloc_table void) in
     (let int_P_t_2_8_alloc_table = ref (any_alloc_table void) in
     (let t_2 = ref (any_pointer void) in
     (let u_0 = ref (any_pointer void) in
     (let __retres_2 = ref (any_int32 void) in
     (C_41:
     begin
       (let jessie_213 = (t_2 := (C_40:
                                 (JC_55:
                                 (((alloc_struct_int_P (4)) int_P_t_2_8_alloc_table) int_P_t_2_8_tag_table)))) in
       void);
      (C_43:
      begin
        (let jessie_215 = (u_0 := (C_42:
                                  (JC_56:
                                  (((alloc_struct_int_P (5)) int_P_u_0_9_alloc_table) int_P_u_0_9_tag_table)))) in
        void);
       (C_45:
       begin
         (let jessie_221 = (let jessie_217 = (safe_int32_of_integer_ (1)) in
                           (let jessie_220 = ((shift !t_2) (0)) in
                           (((safe_upd_ int_P_int_M_t_2_8) jessie_220) jessie_217))) in
         void);
        (C_47:
        begin
          (let jessie_227 = (let jessie_223 = (safe_int32_of_integer_ (2)) in
                            (let jessie_226 = ((shift !t_2) (1)) in
                            (((safe_upd_ int_P_int_M_t_2_8) jessie_226) jessie_223))) in
          void);
         (C_49:
         begin
           (let jessie_233 = (let jessie_229 = (safe_int32_of_integer_ (3)) in
                             (let jessie_232 = ((shift !t_2) (2)) in
                             (((safe_upd_ int_P_int_M_t_2_8) jessie_232) jessie_229))) in
           void);
          (C_51:
          begin
            (let jessie_239 = (let jessie_235 = (safe_int32_of_integer_ (4)) in
                              (let jessie_238 = ((shift !t_2) (3)) in
                              (((safe_upd_ int_P_int_M_t_2_8) jessie_238) jessie_235))) in
            void);
           (C_53:
           begin
             (let jessie_245 = (let jessie_241 = (safe_int32_of_integer_ (0)) in
                               (let jessie_244 = ((shift !u_0) (0)) in
                               (((safe_upd_ int_P_int_M_u_0_9) jessie_244) jessie_241))) in
             void);
            (C_55:
            begin
              (let jessie_251 = (let jessie_247 = (safe_int32_of_integer_ (0)) in
                                (let jessie_250 = ((shift !u_0) (1)) in
                                (((safe_upd_ int_P_int_M_u_0_9) jessie_250) jessie_247))) in
              void);
             (C_58:
             begin
               (let jessie_257 = (let jessie_253 = (C_56:
                                                   ((safe_acc_ !int_P_int_M_t_2_8) 
                                                    ((shift !t_2) (2)))) in
                                 (let jessie_256 = ((shift !u_0) (2)) in
                                 (((safe_upd_ int_P_int_M_u_0_9) jessie_256) jessie_253))) in
               void);
              (C_60:
              begin
                (let jessie_263 = (let jessie_259 = (safe_int32_of_integer_ (0)) in
                                  (let jessie_262 = ((shift !u_0) (3)) in
                                  (((safe_upd_ int_P_int_M_u_0_9) jessie_262) jessie_259))) in
                void);
               (C_62:
               begin
                 (let jessie_269 = (let jessie_265 = (safe_int32_of_integer_ (0)) in
                                   (let jessie_268 = ((shift !u_0) (4)) in
                                   (((safe_upd_ int_P_int_M_u_0_9) jessie_268) jessie_265))) in
                 void);
                (C_64:
                begin
                  (let jessie_271 = (__retres_2 := (C_63:
                                                   ((safe_acc_ !int_P_int_M_u_0_9) 
                                                    ((shift !u_0) (2))))) in
                  void);
                 (C_65:
                 begin
                   ((safe_free_parameter int_P_t_2_8_alloc_table) !t_2);
                  (C_66:
                  begin
                    ((safe_free_parameter int_P_u_0_9_alloc_table) !u_0);
                   (return := !__retres_2);
                   (raise Return)
                  end)
                 end)
                end)
               end)
              end)
             end)
            end)
           end)
          end)
         end)
        end)
       end)
      end)
     end))))))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_47: eq_int(integer_of_int32(result), (3))) }

let two_local_arrays_not_alias_ensures_default =
 fun (tt : unit) ->
  { (JC_59: valid_u(int_P_u_1_alloc_table)) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_v_13 = ref (any_memory void) in
     (let int_P_int_M_t_3_12 = ref (any_memory void) in
     (let int_P_t_3_12_tag_table = ref (any_tag_table void) in
     (let int_P_v_13_tag_table = ref (any_tag_table void) in
     (let int_P_v_13_alloc_table = ref (any_alloc_table void) in
     (let int_P_t_3_12_alloc_table = ref (any_alloc_table void) in
     (let t_3 = ref (any_pointer void) in
     (let v = ref (any_pointer void) in
     (let __retres_3 = ref (any_int32 void) in
     (C_69:
     begin
       (let jessie_293 = (t_3 := (C_68:
                                 (JC_69:
                                 (((alloc_struct_int_P (5)) int_P_t_3_12_alloc_table) int_P_t_3_12_tag_table)))) in
       void);
      (C_71:
      begin
        (let jessie_295 = (v := (C_70:
                                (JC_70:
                                (((alloc_struct_int_P (6)) int_P_v_13_alloc_table) int_P_v_13_tag_table)))) in
        void);
       (C_73:
       begin
         (let jessie_301 = (let jessie_297 = (safe_int32_of_integer_ (3)) in
                           (let jessie_300 = ((shift !t_3) (4)) in
                           (((safe_upd_ int_P_int_M_t_3_12) jessie_300) jessie_297))) in
         void);
        (C_75:
        begin
          (let jessie_307 = (let jessie_303 = (safe_int32_of_integer_ (1)) in
                            (let jessie_306 = ((shift !v) (4)) in
                            (((safe_upd_ int_P_int_M_v_13) jessie_306) jessie_303))) in
          void);
         (C_77:
         begin
           (let jessie_309 = (__retres_3 := (C_76:
                                            ((safe_acc_ !int_P_int_M_t_3_12) 
                                             ((shift !t_3) (4))))) in
           void);
          (C_78:
          begin
            ((safe_free_parameter int_P_t_3_12_alloc_table) !t_3);
           (C_79:
           begin
             ((safe_free_parameter int_P_v_13_alloc_table) !v);
            (return := !__retres_3);
            (raise Return)
           end)
          end)
         end)
        end)
       end)
      end)
     end))))))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_61: eq_int(integer_of_int32(result), (3))) }

let two_local_arrays_not_alias_safety =
 fun (tt : unit) ->
  { (JC_59: valid_u(int_P_u_1_alloc_table)) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_v_13 = ref (any_memory void) in
     (let int_P_int_M_t_3_12 = ref (any_memory void) in
     (let int_P_t_3_12_tag_table = ref (any_tag_table void) in
     (let int_P_v_13_tag_table = ref (any_tag_table void) in
     (let int_P_v_13_alloc_table = ref (any_alloc_table void) in
     (let int_P_t_3_12_alloc_table = ref (any_alloc_table void) in
     (let t_3 = ref (any_pointer void) in
     (let v = ref (any_pointer void) in
     (let __retres_3 = ref (any_int32 void) in
     (C_69:
     begin
       (let jessie_274 = (t_3 := (let jessie_273 = (C_68:
                                                   (JC_65:
                                                   (((alloc_struct_int_P_requires (5)) int_P_t_3_12_alloc_table) int_P_t_3_12_tag_table))) in
                                 (JC_66:
                                 (assert
                                 { ge_int(offset_max(int_P_t_3_12_alloc_table,
                                          jessie_273),
                                   (4)) };
                                 jessie_273)))) in
       void);
      (C_71:
      begin
        (let jessie_276 = (v := (let jessie_275 = (C_70:
                                                  (JC_67:
                                                  (((alloc_struct_int_P_requires (6)) int_P_v_13_alloc_table) int_P_v_13_tag_table))) in
                                (JC_68:
                                (assert
                                { ge_int(offset_max(int_P_v_13_alloc_table,
                                         jessie_275),
                                  (5)) };
                                jessie_275)))) in
        void);
       (C_73:
       begin
         (let jessie_282 = (let jessie_278 = (safe_int32_of_integer_ (3)) in
                           (let jessie_281 = ((shift !t_3) (4)) in
                           (((safe_upd_ int_P_int_M_t_3_12) jessie_281) jessie_278))) in
         void);
        (C_75:
        begin
          (let jessie_288 = (let jessie_284 = (safe_int32_of_integer_ (1)) in
                            (let jessie_287 = ((shift !v) (4)) in
                            (((safe_upd_ int_P_int_M_v_13) jessie_287) jessie_284))) in
          void);
         (C_77:
         begin
           (let jessie_290 = (__retres_3 := (C_76:
                                            ((safe_acc_ !int_P_int_M_t_3_12) 
                                             ((shift !t_3) (4))))) in
           void);
          (C_78:
          begin
            ((free_parameter int_P_t_3_12_alloc_table) !t_3);
           (C_79:
           begin
             ((free_parameter int_P_v_13_alloc_table) !v);
            (return := !__retres_3);
            (raise Return)
           end)
          end)
         end)
        end)
       end)
      end)
     end))))))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_63: valid_u(int_P_u_1_alloc_table)) }

let two_local_arrays_safety =
 fun (tt : unit) ->
  { (JC_45: valid_u(int_P_u_1_alloc_table)) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_u_0_9 = ref (any_memory void) in
     (let int_P_int_M_t_2_8 = ref (any_memory void) in
     (let int_P_t_2_8_tag_table = ref (any_tag_table void) in
     (let int_P_u_0_9_tag_table = ref (any_tag_table void) in
     (let int_P_u_0_9_alloc_table = ref (any_alloc_table void) in
     (let int_P_t_2_8_alloc_table = ref (any_alloc_table void) in
     (let t_2 = ref (any_pointer void) in
     (let u_0 = ref (any_pointer void) in
     (let __retres_2 = ref (any_int32 void) in
     (C_41:
     begin
       (let jessie_152 = (t_2 := (let jessie_151 = (C_40:
                                                   (JC_51:
                                                   (((alloc_struct_int_P_requires (4)) int_P_t_2_8_alloc_table) int_P_t_2_8_tag_table))) in
                                 (JC_52:
                                 (assert
                                 { ge_int(offset_max(int_P_t_2_8_alloc_table,
                                          jessie_151),
                                   (3)) };
                                 jessie_151)))) in
       void);
      (C_43:
      begin
        (let jessie_154 = (u_0 := (let jessie_153 = (C_42:
                                                    (JC_53:
                                                    (((alloc_struct_int_P_requires (5)) int_P_u_0_9_alloc_table) int_P_u_0_9_tag_table))) in
                                  (JC_54:
                                  (assert
                                  { ge_int(offset_max(int_P_u_0_9_alloc_table,
                                           jessie_153),
                                    (4)) };
                                  jessie_153)))) in
        void);
       (C_45:
       begin
         (let jessie_160 = (let jessie_156 = (safe_int32_of_integer_ (1)) in
                           (let jessie_159 = ((shift !t_2) (0)) in
                           (((safe_upd_ int_P_int_M_t_2_8) jessie_159) jessie_156))) in
         void);
        (C_47:
        begin
          (let jessie_166 = (let jessie_162 = (safe_int32_of_integer_ (2)) in
                            (let jessie_165 = ((shift !t_2) (1)) in
                            (((safe_upd_ int_P_int_M_t_2_8) jessie_165) jessie_162))) in
          void);
         (C_49:
         begin
           (let jessie_172 = (let jessie_168 = (safe_int32_of_integer_ (3)) in
                             (let jessie_171 = ((shift !t_2) (2)) in
                             (((safe_upd_ int_P_int_M_t_2_8) jessie_171) jessie_168))) in
           void);
          (C_51:
          begin
            (let jessie_178 = (let jessie_174 = (safe_int32_of_integer_ (4)) in
                              (let jessie_177 = ((shift !t_2) (3)) in
                              (((safe_upd_ int_P_int_M_t_2_8) jessie_177) jessie_174))) in
            void);
           (C_53:
           begin
             (let jessie_184 = (let jessie_180 = (safe_int32_of_integer_ (0)) in
                               (let jessie_183 = ((shift !u_0) (0)) in
                               (((safe_upd_ int_P_int_M_u_0_9) jessie_183) jessie_180))) in
             void);
            (C_55:
            begin
              (let jessie_190 = (let jessie_186 = (safe_int32_of_integer_ (0)) in
                                (let jessie_189 = ((shift !u_0) (1)) in
                                (((safe_upd_ int_P_int_M_u_0_9) jessie_189) jessie_186))) in
              void);
             (C_58:
             begin
               (let jessie_196 = (let jessie_192 = (C_56:
                                                   ((safe_acc_ !int_P_int_M_t_2_8) 
                                                    ((shift !t_2) (2)))) in
                                 (let jessie_195 = ((shift !u_0) (2)) in
                                 (((safe_upd_ int_P_int_M_u_0_9) jessie_195) jessie_192))) in
               void);
              (C_60:
              begin
                (let jessie_202 = (let jessie_198 = (safe_int32_of_integer_ (0)) in
                                  (let jessie_201 = ((shift !u_0) (3)) in
                                  (((safe_upd_ int_P_int_M_u_0_9) jessie_201) jessie_198))) in
                void);
               (C_62:
               begin
                 (let jessie_208 = (let jessie_204 = (safe_int32_of_integer_ (0)) in
                                   (let jessie_207 = ((shift !u_0) (4)) in
                                   (((safe_upd_ int_P_int_M_u_0_9) jessie_207) jessie_204))) in
                 void);
                (C_64:
                begin
                  (let jessie_210 = (__retres_2 := (C_63:
                                                   ((safe_acc_ !int_P_int_M_u_0_9) 
                                                    ((shift !u_0) (2))))) in
                  void);
                 (C_65:
                 begin
                   ((free_parameter int_P_t_2_8_alloc_table) !t_2);
                  (C_66:
                  begin
                    ((free_parameter int_P_u_0_9_alloc_table) !u_0);
                   (return := !__retres_2);
                   (raise Return)
                  end)
                 end)
                end)
               end)
              end)
             end)
            end)
           end)
          end)
         end)
        end)
       end)
      end)
     end))))))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_49: valid_u(int_P_u_1_alloc_table)) }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C alloca.jessie --quiet -f alloca.makefile project
why --project [...] why/alloca.why
<project name="alloca" context="why/alloca_ctx.why">
  <function name="Function two_local_arrays_not_alias">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/alloca_po15.why">
      <location file = "PPCHOME/tests/jessie/alloca.c" line = "56" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/alloca_po16.why">
      <location file = "why/alloca.why" line = "1089" begin = "35" end = "173"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/alloca_po17.why">
      <location file = "PPCHOME/tests/jessie/alloca.c" line = "57" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/alloca_po18.why">
      <location file = "why/alloca.why" line = "1101" begin = "34" end = "168"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/alloca_po19.why">
      <location file = "why/alloca.why" line = "1126" begin = "13" end = "59"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/alloca_po20.why">
      <location file = "why/alloca.why" line = "1129" begin = "14" end = "56"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/alloca_po14.why">
      <location file = "PPCHOME/tests/jessie/alloca.c" line = "54" begin = "12" end = "24"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function two_local_arrays">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/alloca_po21.why">
      <location file = "PPCHOME/tests/jessie/alloca.c" line = "49" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/alloca_po22.why">
      <location file = "why/alloca.why" line = "1169" begin = "35" end = "172"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/alloca_po23.why">
      <location file = "PPCHOME/tests/jessie/alloca.c" line = "50" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/alloca_po24.why">
      <location file = "why/alloca.why" line = "1181" begin = "36" end = "175"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/alloca_po25.why">
      <location file = "why/alloca.why" line = "1250" begin = "20" end = "65"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/alloca_po26.why">
      <location file = "why/alloca.why" line = "1253" begin = "21" end = "66"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/alloca_po13.why">
      <location file = "PPCHOME/tests/jessie/alloca.c" line = "47" begin = "12" end = "24"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function h">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/alloca_po10.why">
      <location file = "PPCHOME/tests/jessie/alloca.c" line = "43" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/alloca_po11.why">
      <location file = "why/alloca.why" line = "825" begin = "34" end = "168"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/alloca_po12.why">
      <location file = "why/alloca.why" line = "862" begin = "14" end = "59"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/alloca_po9.why">
      <location file = "PPCHOME/tests/jessie/alloca.c" line = "41" begin = "12" end = "25"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function g">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/alloca_po6.why">
      <location file = "PPCHOME/tests/jessie/alloca.c" line = "34" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/alloca_po7.why">
      <location file = "why/alloca.why" line = "686" begin = "34" end = "168"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/alloca_po8.why">
      <location file = "why/alloca.why" line = "717" begin = "13" end = "58"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/alloca_po5.why">
      <location file = "PPCHOME/tests/jessie/alloca.c" line = "32" begin = "12" end = "24"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function f">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/alloca_po2.why">
      <location file = "PPCHOME/tests/jessie/alloca.c" line = "28" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/alloca_po3.why">
      <location file = "why/alloca.why" line = "560" begin = "31" end = "156"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/alloca_po4.why">
      <location file = "why/alloca.why" line = "591" begin = "13" end = "54"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/alloca_po1.why">
      <location file = "PPCHOME/tests/jessie/alloca.c" line = "26" begin = "12" end = "24"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type char_P

type int32

type int8

type int_P

type padding

type u_1

type void_P

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic int_P_tag : int_P tag_id

axiom int_P_int: (int_of_tag(int_P_tag) = 1)

logic int_P_of_pointer_address : unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr:
  (forall p:int_P pointer.
    (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom: parenttag(int_P_tag, bottom_tag)

axiom int_P_tags:
  (forall x:int_P pointer.
    (forall int_P_tag_table:int_P tag_table. instanceof(int_P_tag_table, x,
      int_P_tag)))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_int_P(p: int_P pointer, a: int,
  int_P_alloc_table: int_P alloc_table) = (offset_min(int_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_int_P(p: int_P pointer, b: int,
  int_P_alloc_table: int_P alloc_table) = (offset_max(int_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

logic u : int_P pointer

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_u(int_P_u_1_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_u_1_alloc_table, u) <= 0) and
   (offset_max(int_P_u_1_alloc_table, u) >= 3))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

