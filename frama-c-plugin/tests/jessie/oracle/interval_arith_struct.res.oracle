Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only interval_arith_struct.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD interval_arith_struct.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir interval_arith_struct.jessie
[jessie] File interval_arith_struct.jessie/interval_arith_struct.jc written.
[jessie] File interval_arith_struct.jessie/interval_arith_struct.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol
# FloatModel = full
# FloatRoundingMode = down

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

tag __anonstruct_interval_1 = {
  double l: 64; 
  double u: 64;
}

type __anonstruct_interval_1 = [__anonstruct_interval_1]

double min(double x_0, double y_0)
  requires (C_8 : ((C_9 : (! \double_is_NaN(x_0))) &&
                    (C_10 : (! \double_is_NaN(y_0)))));
behavior default:
  ensures (C_3 : (((C_5 : \le_double(\result, \at(x_0,Old))) &&
                    (C_6 : \le_double(\result, \at(y_0,Old)))) &&
                   (C_7 : (\eq_double(\result, \at(x_0,Old)) ||
                            \eq_double(\result, \at(y_0,Old))))));
{  
   (var double tmp);
   
   {  (if (x_0 < y_0) then (C_2 : (tmp = x_0)) else (C_1 : (tmp = y_0)));
      
      (return tmp)
   }
}

double max(double x, double y)
  requires (C_18 : ((C_19 : (! \double_is_NaN(x))) &&
                     (C_20 : (! \double_is_NaN(y)))));
behavior default:
  ensures (C_13 : (((C_15 : \le_double(\at(x,Old), \result)) &&
                     (C_16 : \le_double(\at(y,Old), \result))) &&
                    (C_17 : (\eq_double(\result, \at(x,Old)) ||
                              \eq_double(\result, \at(y,Old))))));
{  
   (var double tmp_0);
   
   {  (if (x > y) then (C_12 : (tmp_0 = x)) else (C_11 : (tmp_0 = y)));
      
      (return tmp_0)
   }
}

predicate dif_sign(double x, double y) =
(\double_sign(x) != \double_sign(y))

predicate sam_sign(double x_0, double y_0) =
(\double_sign(x_0) == \double_sign(y_0))

predicate double_le_real(double x_1, real y_1) =
((\double_is_finite(x_1) && ((x_1 :> real) <= y_1)) ||
  \double_is_minus_infinity(x_1))

predicate real_le_double(real x_2, double y_2) =
((\double_is_finite(y_2) && (x_2 <= (y_2 :> real))) ||
  \double_is_plus_infinity(y_2))

double mul_dn(double x_3, double y_3)
  requires (C_24 : ((((C_27 : (! \double_is_NaN(x_3))) &&
                       (C_28 : (! \double_is_NaN(y_3)))) &&
                      (C_29 : (\double_is_infinite(x_3) ==>
                                (((y_3 :> real) != 0.0) &&
                                  dif_sign(x_3, y_3))))) &&
                     (C_30 : (\double_is_infinite(y_3) ==>
                               (((x_3 :> real) != 0.0) && dif_sign(x_3, y_3))))));
behavior default:
  assigns \nothing;
  ensures (C_23 : double_le_real(\result,
                                 ((\at(x_3,Old) :> real) *
                                   (\at(y_3,Old) :> real))));
{  
   (var double __retres);
   
   {  (C_22 : (__retres = (C_21 : (x_3 * y_3))));
      
      (return __retres)
   }
}

double mul_up(double x_2, double y_2)
  requires (C_36 : ((((((C_41 : (! \double_is_NaN(x_2))) &&
                         (C_42 : (! \double_is_NaN(y_2)))) &&
                        (C_43 : sam_sign(x_2, y_2))) &&
                       (C_44 : (\double_is_infinite(x_2) ==>
                                 (((y_2 :> real) != 0.0) &&
                                   (\real_abs((y_2 :> real)) >= 0x2.0p-1074))))) &&
                      (C_45 : (\double_is_infinite(y_2) ==>
                                ((x_2 :> real) != 0.0)))) &&
                     (C_46 : (((\double_is_finite(y_2) &&
                                 (! \no_overflow_double(\Down(),
                                                        (- (y_2 :> real))))) &&
                                (\double_sign(y_2) == \Positive())) ==>
                               ((x_2 :> real) != 0.0)))));
behavior default:
  ensures (C_35 : real_le_double(((\at(x_2,Old) :> real) *
                                   (\at(y_2,Old) :> real)),
                                 \result));
{  
   (var double __retres_0);
   
   {  (C_34 : (__retres_0 = (C_33 : (- (C_32 : (x_2 * (C_31 : (- y_2))))))));
      
      (return __retres_0)
   }
}

predicate is_interval{Here}(__anonstruct_interval_1[..] x_3) =
((\double_is_finite(x_3.l) || \double_is_minus_infinity(x_3.l)) &&
  (\double_is_finite(x_3.u) || \double_is_plus_infinity(x_3.u)))

predicate in_interval{L}(real a, __anonstruct_interval_1[..] x_4) =
(double_le_real(x_4.l, a) && real_le_double(a, x_4.u))

__anonstruct_interval_1[0] add(__anonstruct_interval_1[0] v_x_4,
                               __anonstruct_interval_1[0] v_y_4)
behavior default:
  ensures (C_88 : (\forall real a_0;
                    (\forall real b;
                      ((in_interval{Here}(a_0, v_x_4) &&
                         in_interval{Here}(b, v_y_4)) ==>
                        in_interval{Here}((a_0 + b), \result)))));
{  
   (var __anonstruct_interval_1[0] x_4);
   
   (var __anonstruct_interval_1[0] y_4);
   
   (var __anonstruct_interval_1[0] z);
   
   (var __anonstruct_interval_1[0] __cil_tmp);
   
   {  (C_48 : (x_4 = (C_47 : (new __anonstruct_interval_1[1]))));
      (C_50 : (y_4 = (C_49 : (new __anonstruct_interval_1[1]))));
      (C_52 : (z = (C_51 : (new __anonstruct_interval_1[1]))));
      (C_54 : (__cil_tmp = (C_53 : (new __anonstruct_interval_1[1]))));
      
      {  (C_57 : ((C_56 : x_4.l) = (C_55 : v_x_4.l)));
         (C_60 : ((C_59 : x_4.u) = (C_58 : v_x_4.u)))
      };
      
      {  (C_63 : ((C_62 : y_4.l) = (C_61 : v_y_4.l)));
         (C_66 : ((C_65 : y_4.u) = (C_64 : v_y_4.u)))
      };
      (C_71 : ((C_70 : z.l) = (C_69 : ((C_68 : x_4.l) + (C_67 : y_4.l)))));
      (C_78 : ((C_77 : z.u) = (C_76 : (- (C_75 : ((C_74 : (- (C_73 : x_4.u))) -
                                                   (C_72 : y_4.u)))))));
      
      {  (C_81 : ((C_80 : __cil_tmp.l) = (C_79 : z.l)));
         (C_84 : ((C_83 : __cil_tmp.u) = (C_82 : z.u)));
         
         {  (C_85 : (free(x_4)));
            (C_86 : (free(y_4)));
            (C_87 : (free(z)));
            
            (return __cil_tmp)
         }
      }
   }
}

__anonstruct_interval_1[0] mul(__anonstruct_interval_1[0] v_x_1,
                               __anonstruct_interval_1[0] v_y_1)
behavior default:
  ensures (C_248 : (\forall real a_1;
                     (\forall real b_0;
                       ((in_interval{Here}(a_1, v_x_1) &&
                          in_interval{Here}(b_0, v_y_1)) ==>
                         in_interval{Here}((a_1 * b_0), \result)))));
{  
   (var __anonstruct_interval_1[0] x_1);
   
   (var __anonstruct_interval_1[0] y_1);
   
   (var __anonstruct_interval_1[0] z_0);
   
   (var double tmp_1);
   
   (var double tmp_0_0);
   
   (var double tmp_1_0);
   
   (var double tmp_2);
   
   (var __anonstruct_interval_1[0] __cil_tmp);
   
   {  (C_90 : (x_1 = (C_89 : (new __anonstruct_interval_1[1]))));
      (C_92 : (y_1 = (C_91 : (new __anonstruct_interval_1[1]))));
      (C_94 : (z_0 = (C_93 : (new __anonstruct_interval_1[1]))));
      (C_96 : (__cil_tmp = (C_95 : (new __anonstruct_interval_1[1]))));
      
      {  (C_99 : ((C_98 : x_1.l) = (C_97 : v_x_1.l)));
         (C_102 : ((C_101 : x_1.u) = (C_100 : v_x_1.u)))
      };
      
      {  (C_105 : ((C_104 : y_1.l) = (C_103 : v_y_1.l)));
         (C_108 : ((C_107 : y_1.u) = (C_106 : v_y_1.u)))
      };
      (if ((C_238 : x_1.l) < (0.0 :> double)) then (if ((C_237 : x_1.u) >
                                                         (0.0 :> double)) then 
                                                   (if ((C_236 : y_1.l) <
                                                         (0.0 :> double)) then 
                                                   (if ((C_235 : y_1.u) >
                                                         (0.0 :> double)) then 
                                                   {  
                                                      {  (C_216 : (tmp_1 = 
                                                         (C_215 : mul_dn(
                                                         (C_213 : x_1.u),
                                                         (C_214 : y_1.l)))));
                                                         (C_220 : (tmp_0_0 = 
                                                         (C_219 : mul_dn(
                                                         (C_217 : x_1.l),
                                                         (C_218 : y_1.u)))))
                                                      };
                                                      (C_223 : ((C_222 : z_0.l) = 
                                                      (C_221 : min(tmp_0_0,
                                                                   tmp_1))));
                                                      
                                                      {  (C_227 : (tmp_1_0 = 
                                                         (C_226 : mul_up(
                                                         (C_224 : x_1.u),
                                                         (C_225 : y_1.u)))));
                                                         (C_231 : (tmp_2 = 
                                                         (C_230 : mul_up(
                                                         (C_228 : x_1.l),
                                                         (C_229 : y_1.l)))))
                                                      };
                                                      (C_234 : ((C_233 : z_0.u) = 
                                                      (C_232 : max(tmp_2,
                                                                   tmp_1_0))))
                                                   } else 
                                                   {  (C_207 : ((C_206 : z_0.l) = 
                                                      (C_205 : mul_dn(
                                                      (C_203 : x_1.u),
                                                      (C_204 : y_1.l)))));
                                                      (C_212 : ((C_211 : z_0.u) = 
                                                      (C_210 : mul_up(
                                                      (C_208 : x_1.l),
                                                      (C_209 : y_1.l)))))
                                                   }) else (if ((C_202 : y_1.u) >
                                                                 (0.0 :> double)) then 
                                                           {  (C_196 : (
                                                              (C_195 : z_0.l) = 
                                                              (C_194 : mul_dn(
                                                              (C_192 : x_1.l),
                                                              (C_193 : y_1.u)))));
                                                              (C_201 : (
                                                              (C_200 : z_0.u) = 
                                                              (C_199 : mul_up(
                                                              (C_197 : x_1.u),
                                                              (C_198 : y_1.u)))))
                                                           } else 
                                                           {  (C_189 : (
                                                              (C_188 : z_0.l) = (0.0 :> double)));
                                                              (C_191 : (
                                                              (C_190 : z_0.u) = (0.0 :> double)))
                                                           })) else (if 
                                                                    ((C_187 : y_1.l) <
                                                                    (0.0 :> double)) then 
                                                                    (if 
                                                                    ((C_186 : y_1.u) >
                                                                    (0.0 :> double)) then 
                                                                    {
                                                                      (C_180 : (
                                                                    (C_179 : z_0.l) = 
                                                                    (C_178 : mul_dn(
                                                                    (C_176 : x_1.l),
                                                                    (C_177 : y_1.u)))));
                                                                    (C_185 : (
                                                                    (C_184 : z_0.u) = 
                                                                    (C_183 : mul_up(
                                                                    (C_181 : x_1.l),
                                                                    (C_182 : y_1.l)))))
                                                                    } else 
                                                                    {
                                                                      (C_170 : (
                                                                    (C_169 : z_0.l) = 
                                                                    (C_168 : mul_dn(
                                                                    (C_166 : x_1.u),
                                                                    (C_167 : y_1.u)))));
                                                                    (C_175 : (
                                                                    (C_174 : z_0.u) = 
                                                                    (C_173 : mul_up(
                                                                    (C_171 : x_1.l),
                                                                    (C_172 : y_1.l)))))
                                                                    }) else 
                                                                    (if 
                                                                    ((C_165 : y_1.u) >
                                                                    (0.0 :> double)) then 
                                                                    {
                                                                      (C_159 : (
                                                                    (C_158 : z_0.l) = 
                                                                    (C_157 : mul_dn(
                                                                    (C_155 : x_1.l),
                                                                    (C_156 : y_1.u)))));
                                                                    (C_164 : (
                                                                    (C_163 : z_0.u) = 
                                                                    (C_162 : mul_up(
                                                                    (C_160 : x_1.u),
                                                                    (C_161 : y_1.l)))))
                                                                    } else 
                                                                    {
                                                                      (C_152 : (
                                                                    (C_151 : z_0.l) = (0.0 :> double)));
                                                                    (C_154 : (
                                                                    (C_153 : z_0.u) = (0.0 :> double)))
                                                                    }))) else 
      (if ((C_150 : x_1.u) > (0.0 :> double)) then (if ((C_149 : y_1.l) <
                                                         (0.0 :> double)) then 
                                                   (if ((C_148 : y_1.u) >
                                                         (0.0 :> double)) then 
                                                   {  (C_142 : ((C_141 : z_0.l) = 
                                                      (C_140 : mul_dn(
                                                      (C_138 : x_1.u),
                                                      (C_139 : y_1.l)))));
                                                      (C_147 : ((C_146 : z_0.u) = 
                                                      (C_145 : mul_up(
                                                      (C_143 : x_1.u),
                                                      (C_144 : y_1.u)))))
                                                   } else 
                                                   {  (C_132 : ((C_131 : z_0.l) = 
                                                      (C_130 : mul_dn(
                                                      (C_128 : x_1.u),
                                                      (C_129 : y_1.l)))));
                                                      (C_137 : ((C_136 : z_0.u) = 
                                                      (C_135 : mul_up(
                                                      (C_133 : x_1.l),
                                                      (C_134 : y_1.u)))))
                                                   }) else (if ((C_127 : y_1.u) >
                                                                 (0.0 :> double)) then 
                                                           {  (C_121 : (
                                                              (C_120 : z_0.l) = 
                                                              (C_119 : mul_dn(
                                                              (C_117 : x_1.l),
                                                              (C_118 : y_1.l)))));
                                                              (C_126 : (
                                                              (C_125 : z_0.u) = 
                                                              (C_124 : mul_up(
                                                              (C_122 : x_1.u),
                                                              (C_123 : y_1.u)))))
                                                           } else 
                                                           {  (C_114 : (
                                                              (C_113 : z_0.l) = (0.0 :> double)));
                                                              (C_116 : (
                                                              (C_115 : z_0.u) = (0.0 :> double)))
                                                           })) else 
      {  (C_110 : ((C_109 : z_0.l) = (0.0 :> double)));
         (C_112 : ((C_111 : z_0.u) = (0.0 :> double)))
      }));
      
      {  (C_241 : ((C_240 : __cil_tmp.l) = (C_239 : z_0.l)));
         (C_244 : ((C_243 : __cil_tmp.u) = (C_242 : z_0.u)));
         
         {  (C_245 : (free(x_1)));
            (C_246 : (free(y_1)));
            (C_247 : (free(z_0)));
            
            (return __cil_tmp)
         }
      }
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs interval_arith_struct.jessie/interval_arith_struct.cloc interval_arith_struct.jessie/interval_arith_struct.jc
type __anonstruct_interval_1

type char_P

type int8

type padding

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic __anonstruct_interval_1_tag:  -> __anonstruct_interval_1 tag_id

axiom __anonstruct_interval_1_int :
 (int_of_tag(__anonstruct_interval_1_tag) = (1))

logic __anonstruct_interval_1_of_pointer_address: unit pointer -> __anonstruct_interval_1 pointer

axiom __anonstruct_interval_1_of_pointer_address_of_pointer_addr :
 (forall p:__anonstruct_interval_1 pointer.
  (p = __anonstruct_interval_1_of_pointer_address(pointer_address(p))))

axiom __anonstruct_interval_1_parenttag_bottom :
 parenttag(__anonstruct_interval_1_tag, bottom_tag)

axiom __anonstruct_interval_1_tags :
 (forall x:__anonstruct_interval_1 pointer.
  (forall __anonstruct_interval_1_tag_table:__anonstruct_interval_1 tag_table
   .
   instanceof(__anonstruct_interval_1_tag_table, x,
   __anonstruct_interval_1_tag)))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate dif_sign(x_1:double, y_1:double) =
 (double_sign(x_1) <> double_sign(y_1))

predicate double_le_real(x_1_0:double, y_1_0:real) =
 ((double_is_finite(x_1_0) and le_real(double_value(x_1_0), y_1_0))
 or double_is_minus_infinity(x_1_0))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

predicate real_le_double(x_2:real, y_2:double) =
 ((double_is_finite(y_2) and le_real(x_2, double_value(y_2)))
 or double_is_plus_infinity(y_2))

predicate in_interval(a:real, x_4:__anonstruct_interval_1 pointer,
 __anonstruct_interval_1_u_x_4_2_at_L:(__anonstruct_interval_1, double) memory,
 __anonstruct_interval_1_l_x_4_2_at_L:(__anonstruct_interval_1, double) memory) =
 (double_le_real(select(__anonstruct_interval_1_l_x_4_2_at_L, x_4), a)
 and real_le_double(a, select(__anonstruct_interval_1_u_x_4_2_at_L, x_4)))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate is_interval(x_3_0:__anonstruct_interval_1 pointer,
 __anonstruct_interval_1_u_x_3_1:(__anonstruct_interval_1, double) memory,
 __anonstruct_interval_1_l_x_3_1:(__anonstruct_interval_1, double) memory) =
 ((double_is_finite(select(__anonstruct_interval_1_l_x_3_1, x_3_0))
  or double_is_minus_infinity(select(__anonstruct_interval_1_l_x_3_1, x_3_0)))
 and (double_is_finite(select(__anonstruct_interval_1_u_x_3_1, x_3_0))
     or double_is_plus_infinity(select(__anonstruct_interval_1_u_x_3_1,
                                x_3_0))))

predicate left_valid_struct___anonstruct_interval_1(p:__anonstruct_interval_1 pointer,
 a:int,
 __anonstruct_interval_1_alloc_table:__anonstruct_interval_1 alloc_table) =
 (offset_min(__anonstruct_interval_1_alloc_table, p) <= a)

predicate left_valid_struct_char_P(p:char_P pointer, a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer, a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of___anonstruct_interval_1_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(__anonstruct_interval_1_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct___anonstruct_interval_1(p:__anonstruct_interval_1 pointer,
 b:int,
 __anonstruct_interval_1_alloc_table:__anonstruct_interval_1 alloc_table) =
 (offset_max(__anonstruct_interval_1_alloc_table, p) >= b)

predicate right_valid_struct_char_P(p:char_P pointer, b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer, b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate sam_sign(x_0_0:double, y_0_0:double) =
 (double_sign(x_0_0) = double_sign(y_0_0))

predicate strict_valid_root___anonstruct_interval_1(p:__anonstruct_interval_1 pointer,
 a:int, b:int,
 __anonstruct_interval_1_alloc_table:__anonstruct_interval_1 alloc_table) =
 ((offset_min(__anonstruct_interval_1_alloc_table, p) = a)
 and (offset_max(__anonstruct_interval_1_alloc_table, p) = b))

predicate strict_valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_interval_1(p:__anonstruct_interval_1 pointer,
 a:int, b:int,
 __anonstruct_interval_1_alloc_table:__anonstruct_interval_1 alloc_table) =
 ((offset_min(__anonstruct_interval_1_alloc_table, p) = a)
 and (offset_max(__anonstruct_interval_1_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct___anonstruct_interval_1(p:unit pointer,
 a:int, b:int, bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root___anonstruct_interval_1(p:__anonstruct_interval_1 pointer,
 a:int, b:int,
 __anonstruct_interval_1_alloc_table:__anonstruct_interval_1 alloc_table) =
 ((offset_min(__anonstruct_interval_1_alloc_table, p) <= a)
 and (offset_max(__anonstruct_interval_1_alloc_table, p) >= b))

predicate valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct___anonstruct_interval_1(p:__anonstruct_interval_1 pointer,
 a:int, b:int,
 __anonstruct_interval_1_alloc_table:__anonstruct_interval_1 alloc_table) =
 ((offset_min(__anonstruct_interval_1_alloc_table, p) <= a)
 and (offset_max(__anonstruct_interval_1_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter __anonstruct_interval_1_alloc_table :
 __anonstruct_interval_1 alloc_table ref

parameter __anonstruct_interval_1_tag_table :
 __anonstruct_interval_1 tag_table ref

parameter add :
 v_x_4:__anonstruct_interval_1 pointer ->
  v_y_4:__anonstruct_interval_1 pointer ->
   __anonstruct_interval_1_result_5_alloc_table:__anonstruct_interval_1 alloc_table ref ->
    __anonstruct_interval_1_result_5_tag_table:__anonstruct_interval_1 tag_table ref ->
     __anonstruct_interval_1_u_result_5:(__anonstruct_interval_1, double) memory ref ->
      __anonstruct_interval_1_l_result_5:(__anonstruct_interval_1, double) memory ref ->
       __anonstruct_interval_1_v_y_4_4_alloc_table:__anonstruct_interval_1 alloc_table ->
        __anonstruct_interval_1_v_x_4_3_alloc_table:__anonstruct_interval_1 alloc_table ->
         __anonstruct_interval_1_u_v_y_4_4:(__anonstruct_interval_1, double) memory ->
          __anonstruct_interval_1_u_v_x_4_3:(__anonstruct_interval_1, double) memory ->
           __anonstruct_interval_1_l_v_y_4_4:(__anonstruct_interval_1, double) memory ->
            __anonstruct_interval_1_l_v_x_4_3:(__anonstruct_interval_1, double) memory ->
             { } __anonstruct_interval_1 pointer
             reads __anonstruct_interval_1_l_result_5,__anonstruct_interval_1_result_5_alloc_table,__anonstruct_interval_1_u_result_5
             writes __anonstruct_interval_1_l_result_5,__anonstruct_interval_1_result_5_alloc_table,__anonstruct_interval_1_result_5_tag_table,__anonstruct_interval_1_u_result_5
             { (JC_88:
               (forall a_0:real.
                (forall b:real.
                 ((in_interval(a_0, v_x_4, __anonstruct_interval_1_u_v_x_4_3,
                   __anonstruct_interval_1_l_v_x_4_3)
                  and in_interval(b, v_y_4,
                      __anonstruct_interval_1_u_v_y_4_4,
                      __anonstruct_interval_1_l_v_y_4_4)) ->
                  in_interval(add_real(a_0, b), result,
                  __anonstruct_interval_1_u_result_5,
                  __anonstruct_interval_1_l_result_5))))) }

parameter add_requires :
 v_x_4:__anonstruct_interval_1 pointer ->
  v_y_4:__anonstruct_interval_1 pointer ->
   __anonstruct_interval_1_result_5_alloc_table:__anonstruct_interval_1 alloc_table ref ->
    __anonstruct_interval_1_result_5_tag_table:__anonstruct_interval_1 tag_table ref ->
     __anonstruct_interval_1_u_result_5:(__anonstruct_interval_1, double) memory ref ->
      __anonstruct_interval_1_l_result_5:(__anonstruct_interval_1, double) memory ref ->
       __anonstruct_interval_1_v_y_4_4_alloc_table:__anonstruct_interval_1 alloc_table ->
        __anonstruct_interval_1_v_x_4_3_alloc_table:__anonstruct_interval_1 alloc_table ->
         __anonstruct_interval_1_u_v_y_4_4:(__anonstruct_interval_1, double) memory ->
          __anonstruct_interval_1_u_v_x_4_3:(__anonstruct_interval_1, double) memory ->
           __anonstruct_interval_1_l_v_y_4_4:(__anonstruct_interval_1, double) memory ->
            __anonstruct_interval_1_l_v_x_4_3:(__anonstruct_interval_1, double) memory ->
             { } __anonstruct_interval_1 pointer
             reads __anonstruct_interval_1_l_result_5,__anonstruct_interval_1_result_5_alloc_table,__anonstruct_interval_1_u_result_5
             writes __anonstruct_interval_1_l_result_5,__anonstruct_interval_1_result_5_alloc_table,__anonstruct_interval_1_result_5_tag_table,__anonstruct_interval_1_u_result_5
             { (JC_88:
               (forall a_0:real.
                (forall b:real.
                 ((in_interval(a_0, v_x_4, __anonstruct_interval_1_u_v_x_4_3,
                   __anonstruct_interval_1_l_v_x_4_3)
                  and in_interval(b, v_y_4,
                      __anonstruct_interval_1_u_v_y_4_4,
                      __anonstruct_interval_1_l_v_y_4_4)) ->
                  in_interval(add_real(a_0, b), result,
                  __anonstruct_interval_1_u_result_5,
                  __anonstruct_interval_1_l_result_5))))) }

parameter alloc_bitvector_struct___anonstruct_interval_1 :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct___anonstruct_interval_1(result, (0),
      sub_int(n, (1)), bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct___anonstruct_interval_1_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct___anonstruct_interval_1(result, (0),
      sub_int(n, (1)), bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_struct___anonstruct_interval_1 :
 n:int ->
  __anonstruct_interval_1_alloc_table:__anonstruct_interval_1 alloc_table ref ->
   __anonstruct_interval_1_tag_table:__anonstruct_interval_1 tag_table ref ->
    { } __anonstruct_interval_1 pointer
    writes __anonstruct_interval_1_alloc_table,__anonstruct_interval_1_tag_table
    { (strict_valid_struct___anonstruct_interval_1(result, (0),
       sub_int(n, (1)), __anonstruct_interval_1_alloc_table)
      and (alloc_extends(__anonstruct_interval_1_alloc_table@,
           __anonstruct_interval_1_alloc_table)
          and (alloc_fresh(__anonstruct_interval_1_alloc_table@, result, n)
              and instanceof(__anonstruct_interval_1_tag_table, result,
                  __anonstruct_interval_1_tag)))) }

parameter alloc_struct___anonstruct_interval_1_requires :
 n:int ->
  __anonstruct_interval_1_alloc_table:__anonstruct_interval_1 alloc_table ref ->
   __anonstruct_interval_1_tag_table:__anonstruct_interval_1 tag_table ref ->
    { ge_int(n, (0))} __anonstruct_interval_1 pointer
    writes __anonstruct_interval_1_alloc_table,__anonstruct_interval_1_tag_table
    { (strict_valid_struct___anonstruct_interval_1(result, (0),
       sub_int(n, (1)), __anonstruct_interval_1_alloc_table)
      and (alloc_extends(__anonstruct_interval_1_alloc_table@,
           __anonstruct_interval_1_alloc_table)
          and (alloc_fresh(__anonstruct_interval_1_alloc_table@, result, n)
              and instanceof(__anonstruct_interval_1_tag_table, result,
                  __anonstruct_interval_1_tag)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int8 : unit -> { } int8 { true }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter max :
 x:double ->
  y:double ->
   { } double
   { (JC_34:
     ((JC_31: le_double(x@, result))
     and ((JC_32: le_double(y@, result))
         and (JC_33: (eq_double(result, x@) or eq_double(result, y@)))))) }

parameter max_requires :
 x:double ->
  y:double ->
   { (JC_21:
     ((JC_19: (not double_is_NaN(x))) and (JC_20: (not double_is_NaN(y)))))}
   double
   { (JC_34:
     ((JC_31: le_double(x@, result))
     and ((JC_32: le_double(y@, result))
         and (JC_33: (eq_double(result, x@) or eq_double(result, y@)))))) }

parameter min :
 x_0:double ->
  y_0:double ->
   { } double
   { (JC_16:
     ((JC_13: le_double(result, x_0@))
     and ((JC_14: le_double(result, y_0@))
         and (JC_15: (eq_double(result, x_0@) or eq_double(result, y_0@)))))) }

parameter min_requires :
 x_0:double ->
  y_0:double ->
   { (JC_3:
     ((JC_1: (not double_is_NaN(x_0))) and (JC_2: (not double_is_NaN(y_0)))))}
   double
   { (JC_16:
     ((JC_13: le_double(result, x_0@))
     and ((JC_14: le_double(result, y_0@))
         and (JC_15: (eq_double(result, x_0@) or eq_double(result, y_0@)))))) }

parameter mul :
 v_x_1:__anonstruct_interval_1 pointer ->
  v_y_1:__anonstruct_interval_1 pointer ->
   __anonstruct_interval_1_result_9_alloc_table:__anonstruct_interval_1 alloc_table ref ->
    __anonstruct_interval_1_result_9_tag_table:__anonstruct_interval_1 tag_table ref ->
     __anonstruct_interval_1_u_result_9:(__anonstruct_interval_1, double) memory ref ->
      __anonstruct_interval_1_l_result_9:(__anonstruct_interval_1, double) memory ref ->
       __anonstruct_interval_1_v_y_1_8_alloc_table:__anonstruct_interval_1 alloc_table ->
        __anonstruct_interval_1_v_x_1_7_alloc_table:__anonstruct_interval_1 alloc_table ->
         __anonstruct_interval_1_u_v_y_1_8:(__anonstruct_interval_1, double) memory ->
          __anonstruct_interval_1_u_v_x_1_7:(__anonstruct_interval_1, double) memory ->
           __anonstruct_interval_1_l_v_y_1_8:(__anonstruct_interval_1, double) memory ->
            __anonstruct_interval_1_l_v_x_1_7:(__anonstruct_interval_1, double) memory ->
             { } __anonstruct_interval_1 pointer
             reads __anonstruct_interval_1_l_result_9,__anonstruct_interval_1_result_9_alloc_table,__anonstruct_interval_1_u_result_9
             writes __anonstruct_interval_1_l_result_9,__anonstruct_interval_1_result_9_alloc_table,__anonstruct_interval_1_result_9_tag_table,__anonstruct_interval_1_u_result_9
             { (JC_116:
               (forall a_1:real.
                (forall b_0:real.
                 ((in_interval(a_1, v_x_1, __anonstruct_interval_1_u_v_x_1_7,
                   __anonstruct_interval_1_l_v_x_1_7)
                  and in_interval(b_0, v_y_1,
                      __anonstruct_interval_1_u_v_y_1_8,
                      __anonstruct_interval_1_l_v_y_1_8)) ->
                  in_interval(mul_real(a_1, b_0), result,
                  __anonstruct_interval_1_u_result_9,
                  __anonstruct_interval_1_l_result_9))))) }

parameter mul_dn :
 x_3:double ->
  y_3:double ->
   { } double
   { (JC_51:
     double_le_real(result, mul_real(double_value(x_3@), double_value(y_3@)))) }

parameter mul_dn_requires :
 x_3:double ->
  y_3:double ->
   { (JC_41:
     ((JC_37: (not double_is_NaN(x_3)))
     and ((JC_38: (not double_is_NaN(y_3)))
         and ((JC_39:
              (double_is_infinite(x_3) ->
               (neq_real(double_value(y_3), 0.0) and dif_sign(x_3, y_3))))
             and (JC_40:
                 (double_is_infinite(y_3) ->
                  (neq_real(double_value(x_3), 0.0) and dif_sign(x_3, y_3))))))))}
   double
   { (JC_51:
     double_le_real(result, mul_real(double_value(x_3@), double_value(y_3@)))) }

parameter mul_requires :
 v_x_1:__anonstruct_interval_1 pointer ->
  v_y_1:__anonstruct_interval_1 pointer ->
   __anonstruct_interval_1_result_9_alloc_table:__anonstruct_interval_1 alloc_table ref ->
    __anonstruct_interval_1_result_9_tag_table:__anonstruct_interval_1 tag_table ref ->
     __anonstruct_interval_1_u_result_9:(__anonstruct_interval_1, double) memory ref ->
      __anonstruct_interval_1_l_result_9:(__anonstruct_interval_1, double) memory ref ->
       __anonstruct_interval_1_v_y_1_8_alloc_table:__anonstruct_interval_1 alloc_table ->
        __anonstruct_interval_1_v_x_1_7_alloc_table:__anonstruct_interval_1 alloc_table ->
         __anonstruct_interval_1_u_v_y_1_8:(__anonstruct_interval_1, double) memory ->
          __anonstruct_interval_1_u_v_x_1_7:(__anonstruct_interval_1, double) memory ->
           __anonstruct_interval_1_l_v_y_1_8:(__anonstruct_interval_1, double) memory ->
            __anonstruct_interval_1_l_v_x_1_7:(__anonstruct_interval_1, double) memory ->
             { } __anonstruct_interval_1 pointer
             reads __anonstruct_interval_1_l_result_9,__anonstruct_interval_1_result_9_alloc_table,__anonstruct_interval_1_u_result_9
             writes __anonstruct_interval_1_l_result_9,__anonstruct_interval_1_result_9_alloc_table,__anonstruct_interval_1_result_9_tag_table,__anonstruct_interval_1_u_result_9
             { (JC_116:
               (forall a_1:real.
                (forall b_0:real.
                 ((in_interval(a_1, v_x_1, __anonstruct_interval_1_u_v_x_1_7,
                   __anonstruct_interval_1_l_v_x_1_7)
                  and in_interval(b_0, v_y_1,
                      __anonstruct_interval_1_u_v_y_1_8,
                      __anonstruct_interval_1_l_v_y_1_8)) ->
                  in_interval(mul_real(a_1, b_0), result,
                  __anonstruct_interval_1_u_result_9,
                  __anonstruct_interval_1_l_result_9))))) }

parameter mul_up :
 x_2_0:double ->
  y_2_0:double ->
   { } double
   { (JC_74:
     real_le_double(mul_real(double_value(x_2_0@), double_value(y_2_0@)),
     result)) }

parameter mul_up_requires :
 x_2_0:double ->
  y_2_0:double ->
   { (JC_63:
     ((JC_57: (not double_is_NaN(x_2_0)))
     and ((JC_58: (not double_is_NaN(y_2_0)))
         and ((JC_59: sam_sign(x_2_0, y_2_0))
             and ((JC_60:
                  (double_is_infinite(x_2_0) ->
                   (neq_real(double_value(y_2_0), 0.0)
                   and ge_real(abs_real(double_value(y_2_0)), 0x2.0p-1074))))
                 and ((JC_61:
                      (double_is_infinite(y_2_0) ->
                       neq_real(double_value(x_2_0), 0.0)))
                     and (JC_62:
                         ((double_is_finite(y_2_0)
                          and ((not no_overflow_double(down,
                                    neg_real(double_value(y_2_0))))
                              and (double_sign(y_2_0) = Positive))) ->
                          neq_real(double_value(x_2_0), 0.0)))))))))}
   double
   { (JC_74:
     real_le_double(mul_real(double_value(x_2_0@), double_value(y_2_0@)),
     result)) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let add_ensures_default =
 fun (v_x_4 : __anonstruct_interval_1 pointer) (v_y_4 : __anonstruct_interval_1 pointer) (__anonstruct_interval_1_result_5_alloc_table : __anonstruct_interval_1 alloc_table ref) (__anonstruct_interval_1_result_5_tag_table : __anonstruct_interval_1 tag_table ref) (__anonstruct_interval_1_l_result_5 : (__anonstruct_interval_1, double) memory ref) (__anonstruct_interval_1_u_result_5 : (__anonstruct_interval_1, double) memory ref) (__anonstruct_interval_1_v_x_4_3_alloc_table : __anonstruct_interval_1 alloc_table) (__anonstruct_interval_1_v_y_4_4_alloc_table : __anonstruct_interval_1 alloc_table) (__anonstruct_interval_1_l_v_x_4_3 : (__anonstruct_interval_1, double) memory) (__anonstruct_interval_1_l_v_y_4_4 : (__anonstruct_interval_1, double) memory) (__anonstruct_interval_1_u_v_x_4_3 : (__anonstruct_interval_1, double) memory) (__anonstruct_interval_1_u_v_y_4_4 : (__anonstruct_interval_1, double) memory) ->
  { (valid_struct___anonstruct_interval_1(v_y_4, (0), (0),
     __anonstruct_interval_1_v_y_4_4_alloc_table)
    and valid_struct___anonstruct_interval_1(v_x_4, (0), (0),
        __anonstruct_interval_1_v_x_4_3_alloc_table)) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let __anonstruct_interval_1_u_z_13 = ref (any_memory void) in
     (let __anonstruct_interval_1_u_y_4_12 = ref (any_memory void) in
     (let __anonstruct_interval_1_u_x_4_11 = ref (any_memory void) in
     (let __anonstruct_interval_1_l_z_13 = ref (any_memory void) in
     (let __anonstruct_interval_1_l_y_4_12 = ref (any_memory void) in
     (let __anonstruct_interval_1_l_x_4_11 = ref (any_memory void) in
     (let __anonstruct_interval_1_x_4_11_tag_table =
     ref (any_tag_table void) in
     (let __anonstruct_interval_1_y_4_12_tag_table =
     ref (any_tag_table void) in
     (let __anonstruct_interval_1_z_13_tag_table =
     ref (any_tag_table void) in
     (let __anonstruct_interval_1_z_13_alloc_table =
     ref (any_alloc_table void) in
     (let __anonstruct_interval_1_y_4_12_alloc_table =
     ref (any_alloc_table void) in
     (let __anonstruct_interval_1_x_4_11_alloc_table =
     ref (any_alloc_table void) in
     (let x_4_0 = ref (any_pointer void) in
     (let y_4 = ref (any_pointer void) in
     (let z = ref (any_pointer void) in
     (let __cil_tmp = ref (any_pointer void) in
     (C_48:
     begin
       (let jessie_87 =
       (x_4_0 := (C_47:
                 (JC_103:
                 (((alloc_struct___anonstruct_interval_1 (1)) __anonstruct_interval_1_x_4_11_alloc_table) __anonstruct_interval_1_x_4_11_tag_table)))) in
       void);
      (C_50:
      begin
        (let jessie_89 =
        (y_4 := (C_49:
                (JC_104:
                (((alloc_struct___anonstruct_interval_1 (1)) __anonstruct_interval_1_y_4_12_alloc_table) __anonstruct_interval_1_y_4_12_tag_table)))) in
        void);
       (C_52:
       begin
         (let jessie_91 =
         (z := (C_51:
               (JC_105:
               (((alloc_struct___anonstruct_interval_1 (1)) __anonstruct_interval_1_z_13_alloc_table) __anonstruct_interval_1_z_13_tag_table)))) in
         void);
        (C_54:
        begin
          (let jessie_93 =
          (__cil_tmp := (C_53:
                        (JC_106:
                        (((alloc_struct___anonstruct_interval_1 (1)) __anonstruct_interval_1_result_5_alloc_table) __anonstruct_interval_1_result_5_tag_table)))) in
          void);
         (let jessie_105 =
         (C_57:
         begin
           (let jessie_99 =
           (let jessie_95 =
           (C_55: ((safe_acc_ __anonstruct_interval_1_l_v_x_4_3) v_x_4)) in
           (let jessie_98 = !x_4_0 in
           (((safe_upd_ __anonstruct_interval_1_l_x_4_11) jessie_98) jessie_95))) in
           void);
          (C_60:
          (let jessie_101 =
          (C_58: ((safe_acc_ __anonstruct_interval_1_u_v_x_4_3) v_x_4)) in
          (let jessie_104 = !x_4_0 in
          begin
            (((safe_upd_ __anonstruct_interval_1_u_x_4_11) jessie_104) jessie_101);
           jessie_101 end))) end) in void);
         (let jessie_117 =
         (C_63:
         begin
           (let jessie_111 =
           (let jessie_107 =
           (C_61: ((safe_acc_ __anonstruct_interval_1_l_v_y_4_4) v_y_4)) in
           (let jessie_110 = !y_4 in
           (((safe_upd_ __anonstruct_interval_1_l_y_4_12) jessie_110) jessie_107))) in
           void);
          (C_66:
          (let jessie_113 =
          (C_64: ((safe_acc_ __anonstruct_interval_1_u_v_y_4_4) v_y_4)) in
          (let jessie_116 = !y_4 in
          begin
            (((safe_upd_ __anonstruct_interval_1_u_y_4_12) jessie_116) jessie_113);
           jessie_113 end))) end) in void);
         (C_71:
         begin
           (let jessie_123 =
           (let jessie_119 =
           (C_69:
           (JC_107:
           (((add_double down) (C_68:
                               ((safe_acc_ !__anonstruct_interval_1_l_x_4_11) !x_4_0))) 
            (C_67: ((safe_acc_ !__anonstruct_interval_1_l_y_4_12) !y_4))))) in
           (let jessie_122 = !z in
           (((safe_upd_ __anonstruct_interval_1_l_z_13) jessie_122) jessie_119))) in
           void);
          (C_78:
          begin
            (let jessie_129 =
            (let jessie_125 =
            (C_76:
            (JC_110:
            (neg_double (C_75:
                        (JC_109:
                        (((sub_double down) (C_74:
                                            (JC_108:
                                            (neg_double (C_73:
                                                        ((safe_acc_ !__anonstruct_interval_1_u_x_4_11) !x_4_0)))))) 
                         (C_72:
                         ((safe_acc_ !__anonstruct_interval_1_u_y_4_12) !y_4)))))))) in
            (let jessie_128 = !z in
            (((safe_upd_ __anonstruct_interval_1_u_z_13) jessie_128) jessie_125))) in
            void);
           (C_81:
           begin
             (let jessie_135 =
             (let jessie_131 =
             (C_79: ((safe_acc_ !__anonstruct_interval_1_l_z_13) !z)) in
             (let jessie_134 = !__cil_tmp in
             (((safe_upd_ __anonstruct_interval_1_l_result_5) jessie_134) jessie_131))) in
             void);
            (C_84:
            begin
              (let jessie_141 =
              (let jessie_137 =
              (C_82: ((safe_acc_ !__anonstruct_interval_1_u_z_13) !z)) in
              (let jessie_140 = !__cil_tmp in
              (((safe_upd_ __anonstruct_interval_1_u_result_5) jessie_140) jessie_137))) in
              void);
             (C_85:
             begin
               ((safe_free_parameter __anonstruct_interval_1_x_4_11_alloc_table) !x_4_0);
              (C_86:
              begin
                ((safe_free_parameter __anonstruct_interval_1_y_4_12_alloc_table) !y_4);
               (C_87:
               begin
                 ((safe_free_parameter __anonstruct_interval_1_z_13_alloc_table) !z);
                (return := !__cil_tmp); (raise Return) end) end) end) end)
           end) end) end) end) end) end) end))))))))))))))))); absurd  end
   with Return -> !return end))
  { (JC_87:
    (forall a_0:real.
     (forall b:real.
      ((in_interval(a_0, v_x_4, __anonstruct_interval_1_u_v_x_4_3,
        __anonstruct_interval_1_l_v_x_4_3)
       and in_interval(b, v_y_4, __anonstruct_interval_1_u_v_y_4_4,
           __anonstruct_interval_1_l_v_y_4_4)) ->
       in_interval(add_real(a_0, b), result,
       __anonstruct_interval_1_u_result_5,
       __anonstruct_interval_1_l_result_5))))) }

let add_safety =
 fun (v_x_4 : __anonstruct_interval_1 pointer) (v_y_4 : __anonstruct_interval_1 pointer) (__anonstruct_interval_1_result_5_alloc_table : __anonstruct_interval_1 alloc_table ref) (__anonstruct_interval_1_result_5_tag_table : __anonstruct_interval_1 tag_table ref) (__anonstruct_interval_1_l_result_5 : (__anonstruct_interval_1, double) memory ref) (__anonstruct_interval_1_u_result_5 : (__anonstruct_interval_1, double) memory ref) (__anonstruct_interval_1_v_x_4_3_alloc_table : __anonstruct_interval_1 alloc_table) (__anonstruct_interval_1_v_y_4_4_alloc_table : __anonstruct_interval_1 alloc_table) (__anonstruct_interval_1_l_v_x_4_3 : (__anonstruct_interval_1, double) memory) (__anonstruct_interval_1_l_v_y_4_4 : (__anonstruct_interval_1, double) memory) (__anonstruct_interval_1_u_v_x_4_3 : (__anonstruct_interval_1, double) memory) (__anonstruct_interval_1_u_v_y_4_4 : (__anonstruct_interval_1, double) memory) ->
  { (valid_struct___anonstruct_interval_1(v_y_4, (0), (0),
     __anonstruct_interval_1_v_y_4_4_alloc_table)
    and valid_struct___anonstruct_interval_1(v_x_4, (0), (0),
        __anonstruct_interval_1_v_x_4_3_alloc_table)) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let __anonstruct_interval_1_u_z_13 = ref (any_memory void) in
     (let __anonstruct_interval_1_u_y_4_12 = ref (any_memory void) in
     (let __anonstruct_interval_1_u_x_4_11 = ref (any_memory void) in
     (let __anonstruct_interval_1_l_z_13 = ref (any_memory void) in
     (let __anonstruct_interval_1_l_y_4_12 = ref (any_memory void) in
     (let __anonstruct_interval_1_l_x_4_11 = ref (any_memory void) in
     (let __anonstruct_interval_1_x_4_11_tag_table =
     ref (any_tag_table void) in
     (let __anonstruct_interval_1_y_4_12_tag_table =
     ref (any_tag_table void) in
     (let __anonstruct_interval_1_z_13_tag_table =
     ref (any_tag_table void) in
     (let __anonstruct_interval_1_z_13_alloc_table =
     ref (any_alloc_table void) in
     (let __anonstruct_interval_1_y_4_12_alloc_table =
     ref (any_alloc_table void) in
     (let __anonstruct_interval_1_x_4_11_alloc_table =
     ref (any_alloc_table void) in
     (let x_4_0 = ref (any_pointer void) in
     (let y_4 = ref (any_pointer void) in
     (let z = ref (any_pointer void) in
     (let __cil_tmp = ref (any_pointer void) in
     (C_48:
     begin
       (let jessie_30 =
       (x_4_0 := (let jessie_29 =
                 (C_47:
                 (JC_91:
                 (((alloc_struct___anonstruct_interval_1_requires (1)) __anonstruct_interval_1_x_4_11_alloc_table) __anonstruct_interval_1_x_4_11_tag_table))) in
                 (JC_92:
                 (assert
                 { ge_int(offset_max(__anonstruct_interval_1_x_4_11_alloc_table,
                          jessie_29),
                   (0)) }; jessie_29)))) in void);
      (C_50:
      begin
        (let jessie_32 =
        (y_4 := (let jessie_31 =
                (C_49:
                (JC_93:
                (((alloc_struct___anonstruct_interval_1_requires (1)) __anonstruct_interval_1_y_4_12_alloc_table) __anonstruct_interval_1_y_4_12_tag_table))) in
                (JC_94:
                (assert
                { ge_int(offset_max(__anonstruct_interval_1_y_4_12_alloc_table,
                         jessie_31),
                  (0)) }; jessie_31)))) in void);
       (C_52:
       begin
         (let jessie_34 =
         (z := (let jessie_33 =
               (C_51:
               (JC_95:
               (((alloc_struct___anonstruct_interval_1_requires (1)) __anonstruct_interval_1_z_13_alloc_table) __anonstruct_interval_1_z_13_tag_table))) in
               (JC_96:
               (assert
               { ge_int(offset_max(__anonstruct_interval_1_z_13_alloc_table,
                        jessie_33),
                 (0)) }; jessie_33)))) in void);
        (C_54:
        begin
          (let jessie_36 =
          (__cil_tmp := (let jessie_35 =
                        (C_53:
                        (JC_97:
                        (((alloc_struct___anonstruct_interval_1_requires (1)) __anonstruct_interval_1_result_5_alloc_table) __anonstruct_interval_1_result_5_tag_table))) in
                        (JC_98:
                        (assert
                        { ge_int(offset_max(__anonstruct_interval_1_result_5_alloc_table,
                                 jessie_35),
                          (0)) }; jessie_35)))) in void);
         (let jessie_48 =
         (C_57:
         begin
           (let jessie_42 =
           (let jessie_38 =
           (C_55: ((safe_acc_ __anonstruct_interval_1_l_v_x_4_3) v_x_4)) in
           (let jessie_41 = !x_4_0 in
           (((safe_upd_ __anonstruct_interval_1_l_x_4_11) jessie_41) jessie_38))) in
           void);
          (C_60:
          (let jessie_44 =
          (C_58: ((safe_acc_ __anonstruct_interval_1_u_v_x_4_3) v_x_4)) in
          (let jessie_47 = !x_4_0 in
          begin
            (((safe_upd_ __anonstruct_interval_1_u_x_4_11) jessie_47) jessie_44);
           jessie_44 end))) end) in void);
         (let jessie_60 =
         (C_63:
         begin
           (let jessie_54 =
           (let jessie_50 =
           (C_61: ((safe_acc_ __anonstruct_interval_1_l_v_y_4_4) v_y_4)) in
           (let jessie_53 = !y_4 in
           (((safe_upd_ __anonstruct_interval_1_l_y_4_12) jessie_53) jessie_50))) in
           void);
          (C_66:
          (let jessie_56 =
          (C_64: ((safe_acc_ __anonstruct_interval_1_u_v_y_4_4) v_y_4)) in
          (let jessie_59 = !y_4 in
          begin
            (((safe_upd_ __anonstruct_interval_1_u_y_4_12) jessie_59) jessie_56);
           jessie_56 end))) end) in void);
         (C_71:
         begin
           (let jessie_66 =
           (let jessie_62 =
           (C_69:
           (JC_99:
           (((add_double down) (C_68:
                               ((safe_acc_ !__anonstruct_interval_1_l_x_4_11) !x_4_0))) 
            (C_67: ((safe_acc_ !__anonstruct_interval_1_l_y_4_12) !y_4))))) in
           (let jessie_65 = !z in
           (((safe_upd_ __anonstruct_interval_1_l_z_13) jessie_65) jessie_62))) in
           void);
          (C_78:
          begin
            (let jessie_72 =
            (let jessie_68 =
            (C_76:
            (JC_102:
            (neg_double (C_75:
                        (JC_101:
                        (((sub_double down) (C_74:
                                            (JC_100:
                                            (neg_double (C_73:
                                                        ((safe_acc_ !__anonstruct_interval_1_u_x_4_11) !x_4_0)))))) 
                         (C_72:
                         ((safe_acc_ !__anonstruct_interval_1_u_y_4_12) !y_4)))))))) in
            (let jessie_71 = !z in
            (((safe_upd_ __anonstruct_interval_1_u_z_13) jessie_71) jessie_68))) in
            void);
           (C_81:
           begin
             (let jessie_78 =
             (let jessie_74 =
             (C_79: ((safe_acc_ !__anonstruct_interval_1_l_z_13) !z)) in
             (let jessie_77 = !__cil_tmp in
             (((safe_upd_ __anonstruct_interval_1_l_result_5) jessie_77) jessie_74))) in
             void);
            (C_84:
            begin
              (let jessie_84 =
              (let jessie_80 =
              (C_82: ((safe_acc_ !__anonstruct_interval_1_u_z_13) !z)) in
              (let jessie_83 = !__cil_tmp in
              (((safe_upd_ __anonstruct_interval_1_u_result_5) jessie_83) jessie_80))) in
              void);
             (C_85:
             begin
               ((free_parameter __anonstruct_interval_1_x_4_11_alloc_table) !x_4_0);
              (C_86:
              begin
                ((free_parameter __anonstruct_interval_1_y_4_12_alloc_table) !y_4);
               (C_87:
               begin
                 ((free_parameter __anonstruct_interval_1_z_13_alloc_table) !z);
                (return := !__cil_tmp); (raise Return) end) end) end) end)
           end) end) end) end) end) end) end))))))))))))))))); absurd  end
   with Return -> !return end)) { true }

let max_ensures_default =
 fun (x : double) (y : double) ->
  { (JC_25:
    ((JC_23: (not double_is_NaN(x))) and (JC_24: (not double_is_NaN(y))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let tmp_0 = ref (any_double void) in
     begin
       (let jessie_15 =
       (if ((gt_double x) y) then (C_12: begin   (tmp_0 := x); !tmp_0 end)
       else (C_11: begin   (tmp_0 := y); !tmp_0 end)) in void);
      (return := !tmp_0); (raise Return) end); absurd  end with Return ->
   !return end))
  { (JC_30:
    ((JC_27: le_double(x@, result))
    and ((JC_28: le_double(y@, result))
        and (JC_29: (eq_double(result, x@) or eq_double(result, y@)))))) }

let max_safety =
 fun (x : double) (y : double) ->
  { (JC_25:
    ((JC_23: (not double_is_NaN(x))) and (JC_24: (not double_is_NaN(y))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let tmp_0 = ref (any_double void) in
     begin
       (let jessie_11 =
       (if ((gt_double x) y) then (C_12: begin   (tmp_0 := x); !tmp_0 end)
       else (C_11: begin   (tmp_0 := y); !tmp_0 end)) in void);
      (return := !tmp_0); (raise Return) end); absurd  end with Return ->
   !return end)) { true }

let min_ensures_default =
 fun (x_0 : double) (y_0 : double) ->
  { (JC_7:
    ((JC_5: (not double_is_NaN(x_0))) and (JC_6: (not double_is_NaN(y_0))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let tmp = ref (any_double void) in
     begin
       (let jessie_7 =
       (if ((lt_double x_0) y_0) then (C_2: begin   (tmp := x_0); !tmp end)
       else (C_1: begin   (tmp := y_0); !tmp end)) in void);
      (return := !tmp); (raise Return) end); absurd  end with Return ->
   !return end))
  { (JC_12:
    ((JC_9: le_double(result, x_0@))
    and ((JC_10: le_double(result, y_0@))
        and (JC_11: (eq_double(result, x_0@) or eq_double(result, y_0@)))))) }

let min_safety =
 fun (x_0 : double) (y_0 : double) ->
  { (JC_7:
    ((JC_5: (not double_is_NaN(x_0))) and (JC_6: (not double_is_NaN(y_0))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let tmp = ref (any_double void) in
     begin
       (let jessie_3 =
       (if ((lt_double x_0) y_0) then (C_2: begin   (tmp := x_0); !tmp end)
       else (C_1: begin   (tmp := y_0); !tmp end)) in void);
      (return := !tmp); (raise Return) end); absurd  end with Return ->
   !return end)) { true }

let mul_dn_ensures_default =
 fun (x_3 : double) (y_3 : double) ->
  { (JC_47:
    ((JC_43: (not double_is_NaN(x_3)))
    and ((JC_44: (not double_is_NaN(y_3)))
        and ((JC_45:
             (double_is_infinite(x_3) ->
              (neq_real(double_value(y_3), 0.0) and dif_sign(x_3, y_3))))
            and (JC_46:
                (double_is_infinite(y_3) ->
                 (neq_real(double_value(x_3), 0.0) and dif_sign(x_3, y_3)))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let __retres = ref (any_double void) in
     (C_22:
     begin
       (let jessie_21 =
       (__retres := (C_21: (JC_56: (((mul_double down) x_3) y_3)))) in void);
      (return := !__retres); (raise Return) end)); absurd  end with Return ->
   !return end))
  { (JC_49:
    double_le_real(result, mul_real(double_value(x_3@), double_value(y_3@)))) }

let mul_dn_safety =
 fun (x_3 : double) (y_3 : double) ->
  { (JC_47:
    ((JC_43: (not double_is_NaN(x_3)))
    and ((JC_44: (not double_is_NaN(y_3)))
        and ((JC_45:
             (double_is_infinite(x_3) ->
              (neq_real(double_value(y_3), 0.0) and dif_sign(x_3, y_3))))
            and (JC_46:
                (double_is_infinite(y_3) ->
                 (neq_real(double_value(x_3), 0.0) and dif_sign(x_3, y_3)))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let __retres = ref (any_double void) in
     (C_22:
     begin
       (let jessie_18 =
       (__retres := (C_21: (JC_55: (((mul_double down) x_3) y_3)))) in void);
      (return := !__retres); (raise Return) end)); absurd  end with Return ->
   !return end)) { true }

let mul_ensures_default =
 fun (v_x_1 : __anonstruct_interval_1 pointer) (v_y_1 : __anonstruct_interval_1 pointer) (__anonstruct_interval_1_result_9_alloc_table : __anonstruct_interval_1 alloc_table ref) (__anonstruct_interval_1_result_9_tag_table : __anonstruct_interval_1 tag_table ref) (__anonstruct_interval_1_l_result_9 : (__anonstruct_interval_1, double) memory ref) (__anonstruct_interval_1_u_result_9 : (__anonstruct_interval_1, double) memory ref) (__anonstruct_interval_1_v_x_1_7_alloc_table : __anonstruct_interval_1 alloc_table) (__anonstruct_interval_1_v_y_1_8_alloc_table : __anonstruct_interval_1 alloc_table) (__anonstruct_interval_1_l_v_x_1_7 : (__anonstruct_interval_1, double) memory) (__anonstruct_interval_1_l_v_y_1_8 : (__anonstruct_interval_1, double) memory) (__anonstruct_interval_1_u_v_x_1_7 : (__anonstruct_interval_1, double) memory) (__anonstruct_interval_1_u_v_y_1_8 : (__anonstruct_interval_1, double) memory) ->
  { (valid_struct___anonstruct_interval_1(v_y_1, (0), (0),
     __anonstruct_interval_1_v_y_1_8_alloc_table)
    and valid_struct___anonstruct_interval_1(v_x_1, (0), (0),
        __anonstruct_interval_1_v_x_1_7_alloc_table)) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let __anonstruct_interval_1_u_z_0_21 = ref (any_memory void) in
     (let __anonstruct_interval_1_u_y_1_20 = ref (any_memory void) in
     (let __anonstruct_interval_1_u_x_1_19 = ref (any_memory void) in
     (let __anonstruct_interval_1_l_z_0_21 = ref (any_memory void) in
     (let __anonstruct_interval_1_l_y_1_20 = ref (any_memory void) in
     (let __anonstruct_interval_1_l_x_1_19 = ref (any_memory void) in
     (let __anonstruct_interval_1_x_1_19_tag_table =
     ref (any_tag_table void) in
     (let __anonstruct_interval_1_y_1_20_tag_table =
     ref (any_tag_table void) in
     (let __anonstruct_interval_1_z_0_21_tag_table =
     ref (any_tag_table void) in
     (let __anonstruct_interval_1_z_0_21_alloc_table =
     ref (any_alloc_table void) in
     (let __anonstruct_interval_1_y_1_20_alloc_table =
     ref (any_alloc_table void) in
     (let __anonstruct_interval_1_x_1_19_alloc_table =
     ref (any_alloc_table void) in
     (let x_1_1 = ref (any_pointer void) in
     (let y_1_1 = ref (any_pointer void) in
     (let z_0 = ref (any_pointer void) in
     (let tmp_1 = ref (any_double void) in
     (let tmp_0_0 = ref (any_double void) in
     (let tmp_1_0 = ref (any_double void) in
     (let tmp_2 = ref (any_double void) in
     (let __cil_tmp_0 = ref (any_pointer void) in
     (C_90:
     begin
       (let jessie_385 =
       (x_1_1 := (C_89:
                 (JC_149:
                 (((alloc_struct___anonstruct_interval_1 (1)) __anonstruct_interval_1_x_1_19_alloc_table) __anonstruct_interval_1_x_1_19_tag_table)))) in
       void);
      (C_92:
      begin
        (let jessie_387 =
        (y_1_1 := (C_91:
                  (JC_150:
                  (((alloc_struct___anonstruct_interval_1 (1)) __anonstruct_interval_1_y_1_20_alloc_table) __anonstruct_interval_1_y_1_20_tag_table)))) in
        void);
       (C_94:
       begin
         (let jessie_389 =
         (z_0 := (C_93:
                 (JC_151:
                 (((alloc_struct___anonstruct_interval_1 (1)) __anonstruct_interval_1_z_0_21_alloc_table) __anonstruct_interval_1_z_0_21_tag_table)))) in
         void);
        (C_96:
        begin
          (let jessie_391 =
          (__cil_tmp_0 := (C_95:
                          (JC_152:
                          (((alloc_struct___anonstruct_interval_1 (1)) __anonstruct_interval_1_result_9_alloc_table) __anonstruct_interval_1_result_9_tag_table)))) in
          void);
         (let jessie_403 =
         (C_99:
         begin
           (let jessie_397 =
           (let jessie_393 =
           (C_97: ((safe_acc_ __anonstruct_interval_1_l_v_x_1_7) v_x_1)) in
           (let jessie_396 = !x_1_1 in
           (((safe_upd_ __anonstruct_interval_1_l_x_1_19) jessie_396) jessie_393))) in
           void);
          (C_102:
          (let jessie_399 =
          (C_100: ((safe_acc_ __anonstruct_interval_1_u_v_x_1_7) v_x_1)) in
          (let jessie_402 = !x_1_1 in
          begin
            (((safe_upd_ __anonstruct_interval_1_u_x_1_19) jessie_402) jessie_399);
           jessie_399 end))) end) in void);
         (let jessie_415 =
         (C_105:
         begin
           (let jessie_409 =
           (let jessie_405 =
           (C_103: ((safe_acc_ __anonstruct_interval_1_l_v_y_1_8) v_y_1)) in
           (let jessie_408 = !y_1_1 in
           (((safe_upd_ __anonstruct_interval_1_l_y_1_20) jessie_408) jessie_405))) in
           void);
          (C_108:
          (let jessie_411 =
          (C_106: ((safe_acc_ __anonstruct_interval_1_u_v_y_1_8) v_y_1)) in
          (let jessie_414 = !y_1_1 in
          begin
            (((safe_upd_ __anonstruct_interval_1_u_y_1_20) jessie_414) jessie_411);
           jessie_411 end))) end) in void);
         (let jessie_611 =
         (if ((lt_double (C_238:
                         ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1))) 
              (double_of_real_exact 0.0))
         then
          (if ((gt_double (C_237:
                          ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1))) 
               (double_of_real_exact 0.0))
          then
           (if ((lt_double (C_236:
                           ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1))) 
                (double_of_real_exact 0.0))
           then
            (if ((gt_double (C_235:
                            ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1))) 
                 (double_of_real_exact 0.0))
            then
             begin
               (let jessie_423 =
               (C_216:
               begin
                 (let jessie_419 =
                 (tmp_1 := (C_215:
                           (let jessie_418 =
                           (C_213:
                           ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
                           (let jessie_417 =
                           (C_214:
                           ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
                           (JC_153: ((mul_dn jessie_418) jessie_417)))))) in
                 void);
                (C_220:
                begin
                  (tmp_0_0 := (C_219:
                              (let jessie_422 =
                              (C_217:
                              ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
                              (let jessie_421 =
                              (C_218:
                              ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
                              (JC_154: ((mul_dn jessie_422) jessie_421))))));
                 !tmp_0_0 end) end) in void);
              (C_223:
              begin
                (let jessie_431 =
                (let jessie_427 =
                (C_221:
                (let jessie_426 = !tmp_0_0 in
                (let jessie_425 = !tmp_1 in
                (JC_155: ((min jessie_426) jessie_425))))) in
                (let jessie_430 = !z_0 in
                (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_430) jessie_427))) in
                void);
               (let jessie_439 =
               (C_227:
               begin
                 (let jessie_435 =
                 (tmp_1_0 := (C_226:
                             (let jessie_434 =
                             (C_224:
                             ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
                             (let jessie_433 =
                             (C_225:
                             ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
                             (JC_156: ((mul_up jessie_434) jessie_433)))))) in
                 void);
                (C_231:
                begin
                  (tmp_2 := (C_230:
                            (let jessie_438 =
                            (C_228:
                            ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
                            (let jessie_437 =
                            (C_229:
                            ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
                            (JC_157: ((mul_up jessie_438) jessie_437))))));
                 !tmp_2 end) end) in void);
               (C_234:
               (let jessie_443 =
               (C_232:
               (let jessie_442 = !tmp_2 in
               (let jessie_441 = !tmp_1_0 in
               (JC_158: ((max jessie_442) jessie_441))))) in
               (let jessie_446 = !z_0 in
               begin
                 (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_446) jessie_443);
                jessie_443 end))) end) end
            else
             (C_207:
             begin
               (let jessie_454 =
               (let jessie_450 =
               (C_205:
               (let jessie_449 =
               (C_203:
               ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
               (let jessie_448 =
               (C_204:
               ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
               (JC_159: ((mul_dn jessie_449) jessie_448))))) in
               (let jessie_453 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_453) jessie_450))) in
               void);
              (C_212:
              (let jessie_458 =
              (C_210:
              (let jessie_457 =
              (C_208: ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
              (let jessie_456 =
              (C_209: ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
              (JC_160: ((mul_up jessie_457) jessie_456))))) in
              (let jessie_461 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_461) jessie_458);
               jessie_458 end))) end))
           else
            (if ((gt_double (C_202:
                            ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1))) 
                 (double_of_real_exact 0.0))
            then
             (C_196:
             begin
               (let jessie_469 =
               (let jessie_465 =
               (C_194:
               (let jessie_464 =
               (C_192:
               ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
               (let jessie_463 =
               (C_193:
               ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
               (JC_161: ((mul_dn jessie_464) jessie_463))))) in
               (let jessie_468 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_468) jessie_465))) in
               void);
              (C_201:
              (let jessie_473 =
              (C_199:
              (let jessie_472 =
              (C_197: ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
              (let jessie_471 =
              (C_198: ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
              (JC_162: ((mul_up jessie_472) jessie_471))))) in
              (let jessie_476 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_476) jessie_473);
               jessie_473 end))) end)
            else
             (C_189:
             begin
               (let jessie_482 =
               (let jessie_478 = (double_of_real_exact 0.0) in
               (let jessie_481 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_481) jessie_478))) in
               void);
              (C_191:
              (let jessie_484 = (double_of_real_exact 0.0) in
              (let jessie_487 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_487) jessie_484);
               jessie_484 end))) end)))
          else
           (if ((lt_double (C_187:
                           ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1))) 
                (double_of_real_exact 0.0))
           then
            (if ((gt_double (C_186:
                            ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1))) 
                 (double_of_real_exact 0.0))
            then
             (C_180:
             begin
               (let jessie_495 =
               (let jessie_491 =
               (C_178:
               (let jessie_490 =
               (C_176:
               ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
               (let jessie_489 =
               (C_177:
               ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
               (JC_163: ((mul_dn jessie_490) jessie_489))))) in
               (let jessie_494 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_494) jessie_491))) in
               void);
              (C_185:
              (let jessie_499 =
              (C_183:
              (let jessie_498 =
              (C_181: ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
              (let jessie_497 =
              (C_182: ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
              (JC_164: ((mul_up jessie_498) jessie_497))))) in
              (let jessie_502 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_502) jessie_499);
               jessie_499 end))) end)
            else
             (C_170:
             begin
               (let jessie_510 =
               (let jessie_506 =
               (C_168:
               (let jessie_505 =
               (C_166:
               ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
               (let jessie_504 =
               (C_167:
               ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
               (JC_165: ((mul_dn jessie_505) jessie_504))))) in
               (let jessie_509 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_509) jessie_506))) in
               void);
              (C_175:
              (let jessie_514 =
              (C_173:
              (let jessie_513 =
              (C_171: ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
              (let jessie_512 =
              (C_172: ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
              (JC_166: ((mul_up jessie_513) jessie_512))))) in
              (let jessie_517 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_517) jessie_514);
               jessie_514 end))) end))
           else
            (if ((gt_double (C_165:
                            ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1))) 
                 (double_of_real_exact 0.0))
            then
             (C_159:
             begin
               (let jessie_525 =
               (let jessie_521 =
               (C_157:
               (let jessie_520 =
               (C_155:
               ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
               (let jessie_519 =
               (C_156:
               ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
               (JC_167: ((mul_dn jessie_520) jessie_519))))) in
               (let jessie_524 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_524) jessie_521))) in
               void);
              (C_164:
              (let jessie_529 =
              (C_162:
              (let jessie_528 =
              (C_160: ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
              (let jessie_527 =
              (C_161: ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
              (JC_168: ((mul_up jessie_528) jessie_527))))) in
              (let jessie_532 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_532) jessie_529);
               jessie_529 end))) end)
            else
             (C_152:
             begin
               (let jessie_538 =
               (let jessie_534 = (double_of_real_exact 0.0) in
               (let jessie_537 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_537) jessie_534))) in
               void);
              (C_154:
              (let jessie_540 = (double_of_real_exact 0.0) in
              (let jessie_543 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_543) jessie_540);
               jessie_540 end))) end))))
         else
          (if ((gt_double (C_150:
                          ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1))) 
               (double_of_real_exact 0.0))
          then
           (if ((lt_double (C_149:
                           ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1))) 
                (double_of_real_exact 0.0))
           then
            (if ((gt_double (C_148:
                            ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1))) 
                 (double_of_real_exact 0.0))
            then
             (C_142:
             begin
               (let jessie_551 =
               (let jessie_547 =
               (C_140:
               (let jessie_546 =
               (C_138:
               ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
               (let jessie_545 =
               (C_139:
               ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
               (JC_169: ((mul_dn jessie_546) jessie_545))))) in
               (let jessie_550 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_550) jessie_547))) in
               void);
              (C_147:
              (let jessie_555 =
              (C_145:
              (let jessie_554 =
              (C_143: ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
              (let jessie_553 =
              (C_144: ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
              (JC_170: ((mul_up jessie_554) jessie_553))))) in
              (let jessie_558 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_558) jessie_555);
               jessie_555 end))) end)
            else
             (C_132:
             begin
               (let jessie_566 =
               (let jessie_562 =
               (C_130:
               (let jessie_561 =
               (C_128:
               ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
               (let jessie_560 =
               (C_129:
               ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
               (JC_171: ((mul_dn jessie_561) jessie_560))))) in
               (let jessie_565 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_565) jessie_562))) in
               void);
              (C_137:
              (let jessie_570 =
              (C_135:
              (let jessie_569 =
              (C_133: ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
              (let jessie_568 =
              (C_134: ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
              (JC_172: ((mul_up jessie_569) jessie_568))))) in
              (let jessie_573 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_573) jessie_570);
               jessie_570 end))) end))
           else
            (if ((gt_double (C_127:
                            ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1))) 
                 (double_of_real_exact 0.0))
            then
             (C_121:
             begin
               (let jessie_581 =
               (let jessie_577 =
               (C_119:
               (let jessie_576 =
               (C_117:
               ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
               (let jessie_575 =
               (C_118:
               ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
               (JC_173: ((mul_dn jessie_576) jessie_575))))) in
               (let jessie_580 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_580) jessie_577))) in
               void);
              (C_126:
              (let jessie_585 =
              (C_124:
              (let jessie_584 =
              (C_122: ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
              (let jessie_583 =
              (C_123: ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
              (JC_174: ((mul_up jessie_584) jessie_583))))) in
              (let jessie_588 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_588) jessie_585);
               jessie_585 end))) end)
            else
             (C_114:
             begin
               (let jessie_594 =
               (let jessie_590 = (double_of_real_exact 0.0) in
               (let jessie_593 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_593) jessie_590))) in
               void);
              (C_116:
              (let jessie_596 = (double_of_real_exact 0.0) in
              (let jessie_599 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_599) jessie_596);
               jessie_596 end))) end)))
          else
           (C_110:
           begin
             (let jessie_605 =
             (let jessie_601 = (double_of_real_exact 0.0) in
             (let jessie_604 = !z_0 in
             (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_604) jessie_601))) in
             void);
            (C_112:
            (let jessie_607 = (double_of_real_exact 0.0) in
            (let jessie_610 = !z_0 in
            begin
              (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_610) jessie_607);
             jessie_607 end))) end))) in void);
         (C_241:
         begin
           (let jessie_617 =
           (let jessie_613 =
           (C_239: ((safe_acc_ !__anonstruct_interval_1_l_z_0_21) !z_0)) in
           (let jessie_616 = !__cil_tmp_0 in
           (((safe_upd_ __anonstruct_interval_1_l_result_9) jessie_616) jessie_613))) in
           void);
          (C_244:
          begin
            (let jessie_623 =
            (let jessie_619 =
            (C_242: ((safe_acc_ !__anonstruct_interval_1_u_z_0_21) !z_0)) in
            (let jessie_622 = !__cil_tmp_0 in
            (((safe_upd_ __anonstruct_interval_1_u_result_9) jessie_622) jessie_619))) in
            void);
           (C_245:
           begin
             ((safe_free_parameter __anonstruct_interval_1_x_1_19_alloc_table) !x_1_1);
            (C_246:
            begin
              ((safe_free_parameter __anonstruct_interval_1_y_1_20_alloc_table) !y_1_1);
             (C_247:
             begin
               ((safe_free_parameter __anonstruct_interval_1_z_0_21_alloc_table) !z_0);
              (return := !__cil_tmp_0); (raise Return) end) end) end) end)
         end) end) end) end) end))))))))))))))))))))); absurd  end with
   Return -> !return end))
  { (JC_115:
    (forall a_1:real.
     (forall b_0:real.
      ((in_interval(a_1, v_x_1, __anonstruct_interval_1_u_v_x_1_7,
        __anonstruct_interval_1_l_v_x_1_7)
       and in_interval(b_0, v_y_1, __anonstruct_interval_1_u_v_y_1_8,
           __anonstruct_interval_1_l_v_y_1_8)) ->
       in_interval(mul_real(a_1, b_0), result,
       __anonstruct_interval_1_u_result_9,
       __anonstruct_interval_1_l_result_9))))) }

let mul_safety =
 fun (v_x_1 : __anonstruct_interval_1 pointer) (v_y_1 : __anonstruct_interval_1 pointer) (__anonstruct_interval_1_result_9_alloc_table : __anonstruct_interval_1 alloc_table ref) (__anonstruct_interval_1_result_9_tag_table : __anonstruct_interval_1 tag_table ref) (__anonstruct_interval_1_l_result_9 : (__anonstruct_interval_1, double) memory ref) (__anonstruct_interval_1_u_result_9 : (__anonstruct_interval_1, double) memory ref) (__anonstruct_interval_1_v_x_1_7_alloc_table : __anonstruct_interval_1 alloc_table) (__anonstruct_interval_1_v_y_1_8_alloc_table : __anonstruct_interval_1 alloc_table) (__anonstruct_interval_1_l_v_x_1_7 : (__anonstruct_interval_1, double) memory) (__anonstruct_interval_1_l_v_y_1_8 : (__anonstruct_interval_1, double) memory) (__anonstruct_interval_1_u_v_x_1_7 : (__anonstruct_interval_1, double) memory) (__anonstruct_interval_1_u_v_y_1_8 : (__anonstruct_interval_1, double) memory) ->
  { (valid_struct___anonstruct_interval_1(v_y_1, (0), (0),
     __anonstruct_interval_1_v_y_1_8_alloc_table)
    and valid_struct___anonstruct_interval_1(v_x_1, (0), (0),
        __anonstruct_interval_1_v_x_1_7_alloc_table)) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let __anonstruct_interval_1_u_z_0_21 = ref (any_memory void) in
     (let __anonstruct_interval_1_u_y_1_20 = ref (any_memory void) in
     (let __anonstruct_interval_1_u_x_1_19 = ref (any_memory void) in
     (let __anonstruct_interval_1_l_z_0_21 = ref (any_memory void) in
     (let __anonstruct_interval_1_l_y_1_20 = ref (any_memory void) in
     (let __anonstruct_interval_1_l_x_1_19 = ref (any_memory void) in
     (let __anonstruct_interval_1_x_1_19_tag_table =
     ref (any_tag_table void) in
     (let __anonstruct_interval_1_y_1_20_tag_table =
     ref (any_tag_table void) in
     (let __anonstruct_interval_1_z_0_21_tag_table =
     ref (any_tag_table void) in
     (let __anonstruct_interval_1_z_0_21_alloc_table =
     ref (any_alloc_table void) in
     (let __anonstruct_interval_1_y_1_20_alloc_table =
     ref (any_alloc_table void) in
     (let __anonstruct_interval_1_x_1_19_alloc_table =
     ref (any_alloc_table void) in
     (let x_1_1 = ref (any_pointer void) in
     (let y_1_1 = ref (any_pointer void) in
     (let z_0 = ref (any_pointer void) in
     (let tmp_1 = ref (any_double void) in
     (let tmp_0_0 = ref (any_double void) in
     (let tmp_1_0 = ref (any_double void) in
     (let tmp_2 = ref (any_double void) in
     (let __cil_tmp_0 = ref (any_pointer void) in
     (C_90:
     begin
       (let jessie_144 =
       (x_1_1 := (let jessie_143 =
                 (C_89:
                 (JC_119:
                 (((alloc_struct___anonstruct_interval_1_requires (1)) __anonstruct_interval_1_x_1_19_alloc_table) __anonstruct_interval_1_x_1_19_tag_table))) in
                 (JC_120:
                 (assert
                 { ge_int(offset_max(__anonstruct_interval_1_x_1_19_alloc_table,
                          jessie_143),
                   (0)) }; jessie_143)))) in void);
      (C_92:
      begin
        (let jessie_146 =
        (y_1_1 := (let jessie_145 =
                  (C_91:
                  (JC_121:
                  (((alloc_struct___anonstruct_interval_1_requires (1)) __anonstruct_interval_1_y_1_20_alloc_table) __anonstruct_interval_1_y_1_20_tag_table))) in
                  (JC_122:
                  (assert
                  { ge_int(offset_max(__anonstruct_interval_1_y_1_20_alloc_table,
                           jessie_145),
                    (0)) }; jessie_145)))) in void);
       (C_94:
       begin
         (let jessie_148 =
         (z_0 := (let jessie_147 =
                 (C_93:
                 (JC_123:
                 (((alloc_struct___anonstruct_interval_1_requires (1)) __anonstruct_interval_1_z_0_21_alloc_table) __anonstruct_interval_1_z_0_21_tag_table))) in
                 (JC_124:
                 (assert
                 { ge_int(offset_max(__anonstruct_interval_1_z_0_21_alloc_table,
                          jessie_147),
                   (0)) }; jessie_147)))) in void);
        (C_96:
        begin
          (let jessie_150 =
          (__cil_tmp_0 := (let jessie_149 =
                          (C_95:
                          (JC_125:
                          (((alloc_struct___anonstruct_interval_1_requires (1)) __anonstruct_interval_1_result_9_alloc_table) __anonstruct_interval_1_result_9_tag_table))) in
                          (JC_126:
                          (assert
                          { ge_int(offset_max(__anonstruct_interval_1_result_9_alloc_table,
                                   jessie_149),
                            (0)) }; jessie_149)))) in void);
         (let jessie_162 =
         (C_99:
         begin
           (let jessie_156 =
           (let jessie_152 =
           (C_97: ((safe_acc_ __anonstruct_interval_1_l_v_x_1_7) v_x_1)) in
           (let jessie_155 = !x_1_1 in
           (((safe_upd_ __anonstruct_interval_1_l_x_1_19) jessie_155) jessie_152))) in
           void);
          (C_102:
          (let jessie_158 =
          (C_100: ((safe_acc_ __anonstruct_interval_1_u_v_x_1_7) v_x_1)) in
          (let jessie_161 = !x_1_1 in
          begin
            (((safe_upd_ __anonstruct_interval_1_u_x_1_19) jessie_161) jessie_158);
           jessie_158 end))) end) in void);
         (let jessie_174 =
         (C_105:
         begin
           (let jessie_168 =
           (let jessie_164 =
           (C_103: ((safe_acc_ __anonstruct_interval_1_l_v_y_1_8) v_y_1)) in
           (let jessie_167 = !y_1_1 in
           (((safe_upd_ __anonstruct_interval_1_l_y_1_20) jessie_167) jessie_164))) in
           void);
          (C_108:
          (let jessie_170 =
          (C_106: ((safe_acc_ __anonstruct_interval_1_u_v_y_1_8) v_y_1)) in
          (let jessie_173 = !y_1_1 in
          begin
            (((safe_upd_ __anonstruct_interval_1_u_y_1_20) jessie_173) jessie_170);
           jessie_170 end))) end) in void);
         (let jessie_370 =
         (if ((lt_double (C_238:
                         ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1))) 
              (double_of_real_exact 0.0))
         then
          (if ((gt_double (C_237:
                          ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1))) 
               (double_of_real_exact 0.0))
          then
           (if ((lt_double (C_236:
                           ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1))) 
                (double_of_real_exact 0.0))
           then
            (if ((gt_double (C_235:
                            ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1))) 
                 (double_of_real_exact 0.0))
            then
             begin
               (let jessie_182 =
               (C_216:
               begin
                 (let jessie_178 =
                 (tmp_1 := (C_215:
                           (let jessie_177 =
                           (C_213:
                           ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
                           (let jessie_176 =
                           (C_214:
                           ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
                           (JC_127:
                           ((mul_dn_requires jessie_177) jessie_176)))))) in
                 void);
                (C_220:
                begin
                  (tmp_0_0 := (C_219:
                              (let jessie_181 =
                              (C_217:
                              ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
                              (let jessie_180 =
                              (C_218:
                              ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
                              (JC_128:
                              ((mul_dn_requires jessie_181) jessie_180))))));
                 !tmp_0_0 end) end) in void);
              (C_223:
              begin
                (let jessie_190 =
                (let jessie_186 =
                (C_221:
                (let jessie_185 = !tmp_0_0 in
                (let jessie_184 = !tmp_1 in
                (JC_129: ((min_requires jessie_185) jessie_184))))) in
                (let jessie_189 = !z_0 in
                (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_189) jessie_186))) in
                void);
               (let jessie_198 =
               (C_227:
               begin
                 (let jessie_194 =
                 (tmp_1_0 := (C_226:
                             (let jessie_193 =
                             (C_224:
                             ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
                             (let jessie_192 =
                             (C_225:
                             ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
                             (JC_130:
                             ((mul_up_requires jessie_193) jessie_192)))))) in
                 void);
                (C_231:
                begin
                  (tmp_2 := (C_230:
                            (let jessie_197 =
                            (C_228:
                            ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
                            (let jessie_196 =
                            (C_229:
                            ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
                            (JC_131:
                            ((mul_up_requires jessie_197) jessie_196))))));
                 !tmp_2 end) end) in void);
               (C_234:
               (let jessie_202 =
               (C_232:
               (let jessie_201 = !tmp_2 in
               (let jessie_200 = !tmp_1_0 in
               (JC_132: ((max_requires jessie_201) jessie_200))))) in
               (let jessie_205 = !z_0 in
               begin
                 (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_205) jessie_202);
                jessie_202 end))) end) end
            else
             (C_207:
             begin
               (let jessie_213 =
               (let jessie_209 =
               (C_205:
               (let jessie_208 =
               (C_203:
               ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
               (let jessie_207 =
               (C_204:
               ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
               (JC_133: ((mul_dn_requires jessie_208) jessie_207))))) in
               (let jessie_212 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_212) jessie_209))) in
               void);
              (C_212:
              (let jessie_217 =
              (C_210:
              (let jessie_216 =
              (C_208: ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
              (let jessie_215 =
              (C_209: ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
              (JC_134: ((mul_up_requires jessie_216) jessie_215))))) in
              (let jessie_220 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_220) jessie_217);
               jessie_217 end))) end))
           else
            (if ((gt_double (C_202:
                            ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1))) 
                 (double_of_real_exact 0.0))
            then
             (C_196:
             begin
               (let jessie_228 =
               (let jessie_224 =
               (C_194:
               (let jessie_223 =
               (C_192:
               ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
               (let jessie_222 =
               (C_193:
               ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
               (JC_135: ((mul_dn_requires jessie_223) jessie_222))))) in
               (let jessie_227 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_227) jessie_224))) in
               void);
              (C_201:
              (let jessie_232 =
              (C_199:
              (let jessie_231 =
              (C_197: ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
              (let jessie_230 =
              (C_198: ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
              (JC_136: ((mul_up_requires jessie_231) jessie_230))))) in
              (let jessie_235 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_235) jessie_232);
               jessie_232 end))) end)
            else
             (C_189:
             begin
               (let jessie_241 =
               (let jessie_237 = (double_of_real_exact 0.0) in
               (let jessie_240 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_240) jessie_237))) in
               void);
              (C_191:
              (let jessie_243 = (double_of_real_exact 0.0) in
              (let jessie_246 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_246) jessie_243);
               jessie_243 end))) end)))
          else
           (if ((lt_double (C_187:
                           ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1))) 
                (double_of_real_exact 0.0))
           then
            (if ((gt_double (C_186:
                            ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1))) 
                 (double_of_real_exact 0.0))
            then
             (C_180:
             begin
               (let jessie_254 =
               (let jessie_250 =
               (C_178:
               (let jessie_249 =
               (C_176:
               ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
               (let jessie_248 =
               (C_177:
               ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
               (JC_137: ((mul_dn_requires jessie_249) jessie_248))))) in
               (let jessie_253 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_253) jessie_250))) in
               void);
              (C_185:
              (let jessie_258 =
              (C_183:
              (let jessie_257 =
              (C_181: ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
              (let jessie_256 =
              (C_182: ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
              (JC_138: ((mul_up_requires jessie_257) jessie_256))))) in
              (let jessie_261 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_261) jessie_258);
               jessie_258 end))) end)
            else
             (C_170:
             begin
               (let jessie_269 =
               (let jessie_265 =
               (C_168:
               (let jessie_264 =
               (C_166:
               ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
               (let jessie_263 =
               (C_167:
               ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
               (JC_139: ((mul_dn_requires jessie_264) jessie_263))))) in
               (let jessie_268 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_268) jessie_265))) in
               void);
              (C_175:
              (let jessie_273 =
              (C_173:
              (let jessie_272 =
              (C_171: ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
              (let jessie_271 =
              (C_172: ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
              (JC_140: ((mul_up_requires jessie_272) jessie_271))))) in
              (let jessie_276 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_276) jessie_273);
               jessie_273 end))) end))
           else
            (if ((gt_double (C_165:
                            ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1))) 
                 (double_of_real_exact 0.0))
            then
             (C_159:
             begin
               (let jessie_284 =
               (let jessie_280 =
               (C_157:
               (let jessie_279 =
               (C_155:
               ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
               (let jessie_278 =
               (C_156:
               ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
               (JC_141: ((mul_dn_requires jessie_279) jessie_278))))) in
               (let jessie_283 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_283) jessie_280))) in
               void);
              (C_164:
              (let jessie_288 =
              (C_162:
              (let jessie_287 =
              (C_160: ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
              (let jessie_286 =
              (C_161: ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
              (JC_142: ((mul_up_requires jessie_287) jessie_286))))) in
              (let jessie_291 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_291) jessie_288);
               jessie_288 end))) end)
            else
             (C_152:
             begin
               (let jessie_297 =
               (let jessie_293 = (double_of_real_exact 0.0) in
               (let jessie_296 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_296) jessie_293))) in
               void);
              (C_154:
              (let jessie_299 = (double_of_real_exact 0.0) in
              (let jessie_302 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_302) jessie_299);
               jessie_299 end))) end))))
         else
          (if ((gt_double (C_150:
                          ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1))) 
               (double_of_real_exact 0.0))
          then
           (if ((lt_double (C_149:
                           ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1))) 
                (double_of_real_exact 0.0))
           then
            (if ((gt_double (C_148:
                            ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1))) 
                 (double_of_real_exact 0.0))
            then
             (C_142:
             begin
               (let jessie_310 =
               (let jessie_306 =
               (C_140:
               (let jessie_305 =
               (C_138:
               ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
               (let jessie_304 =
               (C_139:
               ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
               (JC_143: ((mul_dn_requires jessie_305) jessie_304))))) in
               (let jessie_309 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_309) jessie_306))) in
               void);
              (C_147:
              (let jessie_314 =
              (C_145:
              (let jessie_313 =
              (C_143: ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
              (let jessie_312 =
              (C_144: ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
              (JC_144: ((mul_up_requires jessie_313) jessie_312))))) in
              (let jessie_317 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_317) jessie_314);
               jessie_314 end))) end)
            else
             (C_132:
             begin
               (let jessie_325 =
               (let jessie_321 =
               (C_130:
               (let jessie_320 =
               (C_128:
               ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
               (let jessie_319 =
               (C_129:
               ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
               (JC_145: ((mul_dn_requires jessie_320) jessie_319))))) in
               (let jessie_324 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_324) jessie_321))) in
               void);
              (C_137:
              (let jessie_329 =
              (C_135:
              (let jessie_328 =
              (C_133: ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
              (let jessie_327 =
              (C_134: ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
              (JC_146: ((mul_up_requires jessie_328) jessie_327))))) in
              (let jessie_332 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_332) jessie_329);
               jessie_329 end))) end))
           else
            (if ((gt_double (C_127:
                            ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1))) 
                 (double_of_real_exact 0.0))
            then
             (C_121:
             begin
               (let jessie_340 =
               (let jessie_336 =
               (C_119:
               (let jessie_335 =
               (C_117:
               ((safe_acc_ !__anonstruct_interval_1_l_x_1_19) !x_1_1)) in
               (let jessie_334 =
               (C_118:
               ((safe_acc_ !__anonstruct_interval_1_l_y_1_20) !y_1_1)) in
               (JC_147: ((mul_dn_requires jessie_335) jessie_334))))) in
               (let jessie_339 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_339) jessie_336))) in
               void);
              (C_126:
              (let jessie_344 =
              (C_124:
              (let jessie_343 =
              (C_122: ((safe_acc_ !__anonstruct_interval_1_u_x_1_19) !x_1_1)) in
              (let jessie_342 =
              (C_123: ((safe_acc_ !__anonstruct_interval_1_u_y_1_20) !y_1_1)) in
              (JC_148: ((mul_up_requires jessie_343) jessie_342))))) in
              (let jessie_347 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_347) jessie_344);
               jessie_344 end))) end)
            else
             (C_114:
             begin
               (let jessie_353 =
               (let jessie_349 = (double_of_real_exact 0.0) in
               (let jessie_352 = !z_0 in
               (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_352) jessie_349))) in
               void);
              (C_116:
              (let jessie_355 = (double_of_real_exact 0.0) in
              (let jessie_358 = !z_0 in
              begin
                (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_358) jessie_355);
               jessie_355 end))) end)))
          else
           (C_110:
           begin
             (let jessie_364 =
             (let jessie_360 = (double_of_real_exact 0.0) in
             (let jessie_363 = !z_0 in
             (((safe_upd_ __anonstruct_interval_1_l_z_0_21) jessie_363) jessie_360))) in
             void);
            (C_112:
            (let jessie_366 = (double_of_real_exact 0.0) in
            (let jessie_369 = !z_0 in
            begin
              (((safe_upd_ __anonstruct_interval_1_u_z_0_21) jessie_369) jessie_366);
             jessie_366 end))) end))) in void);
         (C_241:
         begin
           (let jessie_376 =
           (let jessie_372 =
           (C_239: ((safe_acc_ !__anonstruct_interval_1_l_z_0_21) !z_0)) in
           (let jessie_375 = !__cil_tmp_0 in
           (((safe_upd_ __anonstruct_interval_1_l_result_9) jessie_375) jessie_372))) in
           void);
          (C_244:
          begin
            (let jessie_382 =
            (let jessie_378 =
            (C_242: ((safe_acc_ !__anonstruct_interval_1_u_z_0_21) !z_0)) in
            (let jessie_381 = !__cil_tmp_0 in
            (((safe_upd_ __anonstruct_interval_1_u_result_9) jessie_381) jessie_378))) in
            void);
           (C_245:
           begin
             ((free_parameter __anonstruct_interval_1_x_1_19_alloc_table) !x_1_1);
            (C_246:
            begin
              ((free_parameter __anonstruct_interval_1_y_1_20_alloc_table) !y_1_1);
             (C_247:
             begin
               ((free_parameter __anonstruct_interval_1_z_0_21_alloc_table) !z_0);
              (return := !__cil_tmp_0); (raise Return) end) end) end) end)
         end) end) end) end) end))))))))))))))))))))); absurd  end with
   Return -> !return end)) { true }

let mul_up_ensures_default =
 fun (x_2_0 : double) (y_2_0 : double) ->
  { (JC_71:
    ((JC_65: (not double_is_NaN(x_2_0)))
    and ((JC_66: (not double_is_NaN(y_2_0)))
        and ((JC_67: sam_sign(x_2_0, y_2_0))
            and ((JC_68:
                 (double_is_infinite(x_2_0) ->
                  (neq_real(double_value(y_2_0), 0.0)
                  and ge_real(abs_real(double_value(y_2_0)), 0x2.0p-1074))))
                and ((JC_69:
                     (double_is_infinite(y_2_0) ->
                      neq_real(double_value(x_2_0), 0.0)))
                    and (JC_70:
                        ((double_is_finite(y_2_0)
                         and ((not no_overflow_double(down,
                                   neg_real(double_value(y_2_0))))
                             and (double_sign(y_2_0) = Positive))) ->
                         neq_real(double_value(x_2_0), 0.0))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let __retres_0 = ref (any_double void) in
     (C_34:
     begin
       (let jessie_27 =
       (__retres_0 := (C_33:
                      (JC_82:
                      (neg_double (C_32:
                                  (JC_81:
                                  (((mul_double down) x_2_0) (C_31:
                                                             (JC_80:
                                                             (neg_double y_2_0)))))))))) in
       void); (return := !__retres_0); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_73:
    real_le_double(mul_real(double_value(x_2_0@), double_value(y_2_0@)),
    result)) }

let mul_up_safety =
 fun (x_2_0 : double) (y_2_0 : double) ->
  { (JC_71:
    ((JC_65: (not double_is_NaN(x_2_0)))
    and ((JC_66: (not double_is_NaN(y_2_0)))
        and ((JC_67: sam_sign(x_2_0, y_2_0))
            and ((JC_68:
                 (double_is_infinite(x_2_0) ->
                  (neq_real(double_value(y_2_0), 0.0)
                  and ge_real(abs_real(double_value(y_2_0)), 0x2.0p-1074))))
                and ((JC_69:
                     (double_is_infinite(y_2_0) ->
                      neq_real(double_value(x_2_0), 0.0)))
                    and (JC_70:
                        ((double_is_finite(y_2_0)
                         and ((not no_overflow_double(down,
                                   neg_real(double_value(y_2_0))))
                             and (double_sign(y_2_0) = Positive))) ->
                         neq_real(double_value(x_2_0), 0.0))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let __retres_0 = ref (any_double void) in
     (C_34:
     begin
       (let jessie_24 =
       (__retres_0 := (C_33:
                      (JC_79:
                      (neg_double (C_32:
                                  (JC_78:
                                  (((mul_double down) x_2_0) (C_31:
                                                             (JC_77:
                                                             (neg_double y_2_0)))))))))) in
       void); (return := !__retres_0); (raise Return) end)); absurd  end with
   Return -> !return end)) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C interval_arith_struct.jessie --quiet -f interval_arith_struct.makefile project
why --project [...] why/interval_arith_struct.why
<project name="interval_arith_struct" context="why/interval_arith_struct_ctx.why">
  <function name="Function mul_up">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Default behavior">
    <goal why_file="why/interval_arith_struct_po166.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "64" begin = "12" end = "41"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function mul_dn">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Default behavior">
    <goal why_file="why/interval_arith_struct_po19.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "45" begin = "12" end = "39"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function mul">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/interval_arith_struct_po21.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "96" begin = "22" end = "23"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po22.why">
      <location file = "why/interval_arith_struct.why" line = "1621" begin = "19" end = "143"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po23.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "96" begin = "34" end = "35"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po24.why">
      <location file = "why/interval_arith_struct.why" line = "1633" begin = "20" end = "146"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po25.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "98" begin = "11" end = "12"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po26.why">
      <location file = "why/interval_arith_struct.why" line = "1645" begin = "19" end = "143"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po27.why">
      <location file = "PPCHOME/tests/jessie/" line = "0" begin = "-1" end = "-1"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po28.why">
      <location file = "why/interval_arith_struct.why" line = "1657" begin = "28" end = "172"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po29.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po30.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po31.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po32.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po33.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po34.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po35.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po36.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po37.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po38.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po39.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po40.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po41.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po42.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "103" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po43.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po44.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po45.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po46.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po47.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po48.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po49.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po50.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po51.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po52.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po53.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po54.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po55.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po56.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po57.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po58.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "104" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po59.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "106" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po60.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "106" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po61.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "106" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po62.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "106" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po63.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "106" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po64.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "106" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po65.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "107" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po66.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "107" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po67.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "107" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po68.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "107" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po69.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "107" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po70.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "107" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po71.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "107" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po72.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "110" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po73.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "110" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po74.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "110" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po75.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "110" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po76.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "110" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po77.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "110" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po78.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "111" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po79.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "111" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po80.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "111" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po81.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "111" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po82.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "111" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po83.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "111" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po84.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "111" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po85.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "118" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po86.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "118" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po87.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "118" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po88.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "118" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po89.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "118" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po90.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "118" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po91.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "119" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po92.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "119" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po93.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "119" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po94.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "119" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po95.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "119" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po96.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "119" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po97.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "119" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po98.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "121" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po99.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "121" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po100.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "121" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po101.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "121" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po102.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "121" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po103.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "121" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po104.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "122" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po105.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "122" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po106.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "122" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po107.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "122" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po108.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "122" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po109.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "122" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po110.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "122" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po111.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "125" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po112.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "125" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po113.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "125" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po114.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "125" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po115.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "125" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po116.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "125" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po117.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "126" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po118.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "126" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po119.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "126" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po120.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "126" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po121.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "126" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po122.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "126" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po123.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "126" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po124.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "134" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po125.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "134" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po126.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "134" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po127.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "134" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po128.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "134" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po129.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "134" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po130.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "135" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po131.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "135" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po132.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "135" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po133.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "135" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po134.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "135" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po135.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "135" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po136.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "135" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po137.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "137" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po138.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "137" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po139.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "137" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po140.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "137" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po141.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "137" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po142.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "137" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po143.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "138" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po144.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "138" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po145.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "138" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po146.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "138" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po147.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "138" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po148.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "138" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po149.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "138" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po150.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "141" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po151.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "141" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po152.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "141" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po153.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "141" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po154.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "141" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po155.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "141" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po156.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "142" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po157.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "142" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po158.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "142" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po159.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "142" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po160.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "142" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po161.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "142" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po162.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "142" begin = "12" end = "13"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po163.why">
      <location file = "why/interval_arith_struct.why" line = "2113" begin = "14" end = "80"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/interval_arith_struct_po164.why">
      <location file = "why/interval_arith_struct.why" line = "2116" begin = "15" end = "81"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/interval_arith_struct_po165.why">
      <location file = "why/interval_arith_struct.why" line = "2119" begin = "16" end = "80"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/interval_arith_struct_po20.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "94" begin = "6" end = "117"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function min">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Default behavior">
    <goal why_file="why/interval_arith_struct_po16.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "7" begin = "12" end = "32"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po17.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "7" begin = "36" end = "56"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po18.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "9" begin = "12" end = "56"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function max">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Default behavior">
    <goal why_file="why/interval_arith_struct_po13.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "17" begin = "12" end = "32"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po14.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "17" begin = "36" end = "56"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po15.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "19" begin = "12" end = "56"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function add">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/interval_arith_struct_po2.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "83" begin = "22" end = "23"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po3.why">
      <location file = "why/interval_arith_struct.why" line = "793" begin = "19" end = "142"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po4.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "83" begin = "34" end = "35"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po5.why">
      <location file = "why/interval_arith_struct.why" line = "805" begin = "18" end = "139"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po6.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "85" begin = "11" end = "12"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po7.why">
      <location file = "why/interval_arith_struct.why" line = "817" begin = "17" end = "134"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po8.why">
      <location file = "PPCHOME/tests/jessie/" line = "0" begin = "-1" end = "-1"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po9.why">
      <location file = "why/interval_arith_struct.why" line = "829" begin = "26" end = "165"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_struct_po10.why">
      <location file = "why/interval_arith_struct.why" line = "911" begin = "16" end = "82"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/interval_arith_struct_po11.why">
      <location file = "why/interval_arith_struct.why" line = "914" begin = "17" end = "81"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/interval_arith_struct_po12.why">
      <location file = "why/interval_arith_struct.why" line = "917" begin = "18" end = "78"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/interval_arith_struct_po1.why">
      <location file = "PPCHOME/tests/jessie/interval_arith_struct.c" line = "81" begin = "7" end = "106"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type mode =
  | nearest_even
  | to_zero
  | up
  | down
  | nearest_away

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

logic single_to_double : mode, single -> double

logic double_to_single : mode, double -> single

axiom double_to_single_val:
  (forall m:mode.
    (forall s:single. (double_value(single_to_double(m,
      s)) = single_value(s))))

axiom single_to_double_val:
  (forall m:mode.
    (forall d:double. (single_value(double_to_single(m, d)) = round_single(m,
      double_value(d)))))

function min_single() : real = 0x1.p-149

function min_double() : real = 0x1.p-1074

type Float_class =
  | Finite
  | Infinite
  | NaN

type sign =
  | Negative
  | Positive

logic single_class : single -> Float_class

logic double_class : double -> Float_class

logic single_sign : single -> sign

logic double_sign : double -> sign

inductive same_sign_real_bool: sign, real -> prop =
  | neg_case: (forall x:real.
                ((x < 0.0) -> same_sign_real_bool(Negative, x)))
  | pos_case: (forall x:real.
                ((x > 0.0) -> same_sign_real_bool(Positive, x)))



axiom same_sign_real_bool_zero1:
  (forall b:sign. (not same_sign_real_bool(b, 0.0)))

axiom same_sign_real_bool_zero2:
  (forall x:real.
    ((same_sign_real_bool(Negative, x) and same_sign_real_bool(Positive, x)) ->
     false))

axiom same_sign_real_bool_zero3:
  (forall b:sign. (forall x:real. (same_sign_real_bool(b, x) -> (x <> 0.0))))

axiom same_sign_real_bool_correct2:
  (forall b:sign.
    (forall x:real.
      (same_sign_real_bool(b, x) -> ((x < 0.0) <-> (b = Negative)))))

axiom same_sign_real_bool_correct3:
  (forall b:sign.
    (forall x:real.
      (same_sign_real_bool(b, x) -> ((x > 0.0) <-> (b = Positive)))))

predicate single_same_sign_real(x: single, y: real) =
  same_sign_real_bool(single_sign(x), y)

predicate single_same_sign(x: single, y: single) =
  (single_sign(x) = single_sign(y))

predicate single_diff_sign(x: single, y: single) =
  (single_sign(x) <> single_sign(y))

predicate single_product_sign(z: single, x: single, y: single) =
  ((single_same_sign(x, y) -> (single_sign(z) = Positive)) and
   (single_diff_sign(x, y) -> (single_sign(z) = Negative)))

predicate double_same_sign_real(x: double, y: real) =
  same_sign_real_bool(double_sign(x), y)

predicate double_same_sign(x: double, y: double) =
  (double_sign(x) = double_sign(y))

predicate double_diff_sign(x: double, y: double) =
  (double_sign(x) <> double_sign(y))

predicate double_product_sign(z: double, x: double, y: double) =
  ((double_same_sign(x, y) -> (double_sign(z) = Positive)) and
   (double_diff_sign(x, y) -> (double_sign(z) = Negative)))

predicate single_same_class(x: single, y: single) =
  (single_class(x) = single_class(y))

predicate singlediff_class(x: single, y: single) =
  (single_class(x) <> single_class(y))

predicate double_same_class(x: double, y: double) =
  (double_class(x) = double_class(y))

predicate doublediff_class(x: double, y: double) =
  (double_class(x) <> double_class(y))

axiom single_finite_sign:
  (forall x:single.
    (((single_class(x) = Finite) and (single_value(x) <> 0.0)) ->
     single_same_sign_real(x, single_value(x))))

axiom single_finite_sign_neg1:
  (forall x:single.
    (((single_class(x) = Finite) and (single_value(x) < 0.0)) ->
     (single_sign(x) = Negative)))

axiom single_finite_sign_neg2:
  (forall x:single.
    (((single_class(x) = Finite) and
      ((single_value(x) <> 0.0) and (single_sign(x) = Negative))) ->
     (single_value(x) < 0.0)))

axiom single_finite_sign_pos1:
  (forall x:single.
    (((single_class(x) = Finite) and (single_value(x) > 0.0)) ->
     (single_sign(x) = Positive)))

axiom single_finite_sign_pos2:
  (forall x:single.
    (((single_class(x) = Finite) and
      ((single_value(x) <> 0.0) and (single_sign(x) = Positive))) ->
     (single_value(x) > 0.0)))

axiom single_diff_sign_trans:
  (forall x:single.
    (forall y:single.
      (forall z:single.
        ((single_diff_sign(x, y) and single_diff_sign(y, z)) ->
         single_same_sign(x, z)))))

axiom single_same_sign_product:
  (forall x:single.
    (forall y:single.
      (((single_class(x) = Finite) and
        ((single_class(y) = Finite) and single_same_sign(x, y))) ->
       ((single_value(x) * single_value(y)) >= 0.0))))

axiom single_diff_sign_product:
  (forall x:single.
    (forall y:single.
      (((single_class(x) = Finite) and
        ((single_class(y) = Finite) and
         ((single_value(x) * single_value(y)) < 0.0))) ->
       single_diff_sign(x, y))))

axiom double_finite_sign:
  (forall x:double.
    (((double_class(x) = Finite) and (double_value(x) <> 0.0)) ->
     double_same_sign_real(x, double_value(x))))

axiom double_finite_sign_neg1:
  (forall x:double.
    (((double_class(x) = Finite) and (double_value(x) < 0.0)) ->
     (double_sign(x) = Negative)))

axiom double_finite_sign_neg2:
  (forall x:double.
    (((double_class(x) = Finite) and
      ((double_value(x) <> 0.0) and (double_sign(x) = Negative))) ->
     (double_value(x) < 0.0)))

axiom double_finite_sign_pos1:
  (forall x:double.
    (((double_class(x) = Finite) and (double_value(x) > 0.0)) ->
     (double_sign(x) = Positive)))

axiom double_finite_sign_pos2:
  (forall x:double.
    (((double_class(x) = Finite) and
      ((double_value(x) <> 0.0) and (double_sign(x) = Positive))) ->
     (double_value(x) > 0.0)))

axiom double_diff_sign_trans:
  (forall x:double.
    (forall y:double.
      (forall z:double.
        ((double_diff_sign(x, y) and double_diff_sign(y, z)) ->
         double_same_sign(x, z)))))

axiom double_same_sign_product:
  (forall x:double.
    (forall y:double.
      (((double_class(x) = Finite) and
        ((double_class(y) = Finite) and double_same_sign(x, y))) ->
       ((double_value(x) * double_value(y)) >= 0.0))))

axiom double_diff_sign_product:
  (forall x:double.
    (forall y:double.
      (((double_class(x) = Finite) and
        ((double_class(y) = Finite) and
         ((double_value(x) * double_value(y)) < 0.0))) ->
       double_diff_sign(x, y))))

predicate single_is_finite(x: single) = (single_class(x) = Finite)

predicate single_is_infinite(x: single) = (single_class(x) = Infinite)

predicate single_is_NaN(x: single) = (single_class(x) = NaN)

predicate single_is_not_NaN(x: single) =
  (single_is_finite(x) or single_is_infinite(x))

predicate single_is_minus_infinity(x: single) =
  (single_is_infinite(x) and (single_sign(x) = Negative))

predicate single_is_plus_infinity(x: single) =
  (single_is_infinite(x) and (single_sign(x) = Positive))

predicate single_is_gen_zero(x: single) =
  (single_is_finite(x) and (single_value(x) = 0.0))

predicate single_is_gen_zero_plus(x: single) =
  (single_is_gen_zero(x) and (single_sign(x) = Positive))

predicate single_is_gen_zero_minus(x: single) =
  (single_is_gen_zero(x) and (single_sign(x) = Negative))

predicate double_is_finite(x: double) = (double_class(x) = Finite)

predicate double_is_infinite(x: double) = (double_class(x) = Infinite)

predicate double_is_NaN(x: double) = (double_class(x) = NaN)

predicate double_is_not_NaN(x: double) =
  (double_is_finite(x) or double_is_infinite(x))

predicate double_is_minus_infinity(x: double) =
  (double_is_infinite(x) and (double_sign(x) = Negative))

predicate double_is_plus_infinity(x: double) =
  (double_is_infinite(x) and (double_sign(x) = Positive))

predicate double_is_gen_zero(x: double) =
  (double_is_finite(x) and (double_value(x) = 0.0))

predicate double_is_gen_zero_plus(x: double) =
  (double_is_gen_zero(x) and (double_sign(x) = Positive))

predicate double_is_gen_zero_minus(x: double) =
  (double_is_gen_zero(x) and (double_sign(x) = Negative))

predicate single_overflow_value(m: mode, x: single) =
  (((m = down) ->
    (((single_sign(x) = Negative) -> single_is_infinite(x)) and
     ((single_sign(x) = Positive) ->
      (single_is_finite(x) and (single_value(x) = max_single))))) and
   (((m = up) ->
     (((single_sign(x) = Negative) ->
       (single_is_finite(x) and (single_value(x) = (-max_single)))) and
      ((single_sign(x) = Positive) -> single_is_infinite(x)))) and
    (((m = to_zero) ->
      (single_is_finite(x) and
       (((single_sign(x) = Negative) -> (single_value(x) = (-max_single))) and
        ((single_sign(x) = Positive) -> (single_value(x) = max_single))))) and
     (((m = nearest_away) or (m = nearest_even)) -> single_is_infinite(x)))))

predicate double_overflow_value(m: mode, x: double) =
  (((m = down) ->
    (((double_sign(x) = Negative) -> double_is_infinite(x)) and
     ((double_sign(x) = Positive) ->
      (double_is_finite(x) and (double_value(x) = max_double))))) and
   (((m = up) ->
     (((double_sign(x) = Negative) ->
       (double_is_finite(x) and (double_value(x) = (-max_double)))) and
      ((double_sign(x) = Positive) -> double_is_infinite(x)))) and
    (((m = to_zero) ->
      (double_is_finite(x) and
       (((double_sign(x) = Negative) -> (double_value(x) = (-max_double))) and
        ((double_sign(x) = Positive) -> (double_value(x) = max_double))))) and
     (((m = nearest_away) or (m = nearest_even)) -> double_is_infinite(x)))))

predicate single_underflow_value(m: mode, x: single) =
  (single_is_finite(x) and
   (((single_sign(x) = Positive) ->
     ((((m = down) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (single_value(x) = 0.0)) and
      ((m = up) -> (single_value(x) = min_single)))) and
    ((single_sign(x) = Negative) ->
     ((((m = up) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (single_value(x) = 0.0)) and
      ((m = down) -> (single_value(x) = (-min_single)))))))

predicate double_underflow_value(m: mode, x: double) =
  (double_is_finite(x) and
   (((double_sign(x) = Positive) ->
     ((((m = down) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (double_value(x) = 0.0)) and
      ((m = up) -> (double_value(x) = min_double)))) and
    ((double_sign(x) = Negative) ->
     ((((m = up) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (double_value(x) = 0.0)) and
      ((m = down) -> (double_value(x) = (-min_double)))))))

predicate single_sign_zero_result(m: mode, x: single) =
  ((single_value(x) = 0.0) ->
   (((m = down) -> (single_sign(x) = Negative)) and
    ((m <> down) -> (single_sign(x) = Positive))))

predicate double_sign_zero_result(m: mode, x: double) =
  ((double_value(x) = 0.0) ->
   (((m = down) -> (double_sign(x) = Negative)) and
    ((m <> down) -> (double_sign(x) = Positive))))

predicate le_single(x: single, y: single) =
  ((single_is_finite(x) and
    (single_is_finite(y) and (single_value(x) <= single_value(y)))) or
   ((single_is_minus_infinity(x) and single_is_not_NaN(y)) or
    (single_is_not_NaN(x) and single_is_plus_infinity(y))))

predicate lt_single(x: single, y: single) =
  ((single_is_finite(x) and
    (single_is_finite(y) and (single_value(x) < single_value(y)))) or
   ((single_is_minus_infinity(x) and
     (single_is_not_NaN(y) and (not single_is_minus_infinity(y)))) or
    (single_is_not_NaN(x) and
     ((not single_is_plus_infinity(x)) and single_is_plus_infinity(y)))))

predicate ge_single(x: single, y: single) = le_single(y, x)

predicate gt_single(x: single, y: single) = lt_single(y, x)

predicate eq_single(x: single, y: single) =
  (single_is_not_NaN(x) and
   (single_is_not_NaN(y) and
    ((single_is_finite(x) and
      (single_is_finite(y) and (single_value(x) = single_value(y)))) or
     (single_is_infinite(x) and
      (single_is_infinite(y) and single_same_sign(x, y))))))

predicate ne_single(x: single, y: single) = (not eq_single(x, y))

predicate le_double(x: double, y: double) =
  ((double_is_finite(x) and
    (double_is_finite(y) and (double_value(x) <= double_value(y)))) or
   ((double_is_minus_infinity(x) and double_is_not_NaN(y)) or
    (double_is_not_NaN(x) and double_is_plus_infinity(y))))

predicate lt_double(x: double, y: double) =
  ((double_is_finite(x) and
    (double_is_finite(y) and (double_value(x) < double_value(y)))) or
   ((double_is_minus_infinity(x) and
     (double_is_not_NaN(y) and (not double_is_minus_infinity(y)))) or
    (double_is_not_NaN(x) and
     ((not double_is_plus_infinity(x)) and double_is_plus_infinity(y)))))

predicate ge_double(x: double, y: double) = le_double(y, x)

predicate gt_double(x: double, y: double) = lt_double(y, x)

predicate eq_double(x: double, y: double) =
  (double_is_not_NaN(x) and
   (double_is_not_NaN(y) and
    ((double_is_finite(x) and
      (double_is_finite(y) and (double_value(x) = double_value(y)))) or
     (double_is_infinite(x) and
      (double_is_infinite(y) and double_same_sign(x, y))))))

predicate ne_double(x: double, y: double) = (not eq_double(x, y))

axiom le_lt_double_trans:
  (forall x:double.
    (forall y:double.
      (forall z:double.
        ((le_double(x, y) and lt_double(y, z)) -> lt_double(x, z)))))

axiom lt_le_double_trans:
  (forall x:double.
    (forall y:double.
      (forall z:double.
        ((lt_double(x, y) and le_double(y, z)) -> lt_double(x, z)))))

axiom round_single1:
  (forall m:mode.
    (forall x:real.
      (no_overflow_single(m, x) ->
       (single_is_finite(round_single_logic(m, x)) and
        (single_value(round_single_logic(m, x)) = round_single(m, x))))))

axiom round_single2:
  (forall m:mode.
    (forall x:real.
      ((not no_overflow_single(m, x)) ->
       (single_same_sign_real(round_single_logic(m, x), x) and
        single_overflow_value(m, round_single_logic(m, x))))))

axiom round_single3:
  (forall m:mode.
    (forall x:real. (single_exact(round_single_logic(m, x)) = x)))

axiom round_single4:
  (forall m:mode.
    (forall x:real. (single_model(round_single_logic(m, x)) = x)))

axiom single_of_zero:
  (forall m:mode. single_is_gen_zero(round_single_logic(m, 0.0)))

axiom round_single_logic_le:
  (forall m:mode.
    (forall x:real.
      (single_is_finite(round_single_logic(m, x)) ->
       (abs_real(single_value(round_single_logic(m, x))) <= max_single))))

axiom round_single_no_overflow:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) ->
       (single_is_finite(round_single_logic(m, x)) and
        (single_value(round_single_logic(m, x)) = round_single(m, x))))))

axiom single_positive_constant:
  (forall m:mode.
    (forall x:real.
      (((min_single <= x) and (x <= max_single)) ->
       (single_is_finite(round_single_logic(m, x)) and
        ((single_value(round_single_logic(m, x)) > 0.0) and
         (single_sign(round_single_logic(m, x)) = Positive))))))

axiom single_negative_constant:
  (forall m:mode.
    (forall x:real.
      ((((-max_single) <= x) and (x <= (-min_single))) ->
       (single_is_finite(round_single_logic(m, x)) and
        ((single_value(round_single_logic(m, x)) < 0.0) and
         (single_sign(round_single_logic(m, x)) = Negative))))))

axiom round_double1:
  (forall m:mode.
    (forall x:real.
      (no_overflow_double(m, x) ->
       (double_is_finite(round_double_logic(m, x)) and
        (double_value(round_double_logic(m, x)) = round_double(m, x))))))

axiom round_double2:
  (forall m:mode.
    (forall x:real.
      ((not no_overflow_double(m, x)) ->
       (double_same_sign_real(round_double_logic(m, x), x) and
        double_overflow_value(m, round_double_logic(m, x))))))

axiom round_double3:
  (forall m:mode.
    (forall x:real. (double_exact(round_double_logic(m, x)) = x)))

axiom round_double4:
  (forall m:mode.
    (forall x:real. (double_model(round_double_logic(m, x)) = x)))

axiom double_of_zero:
  (forall m:mode. double_is_gen_zero(round_double_logic(m, 0.0)))

axiom round_double_logic_le:
  (forall m:mode.
    (forall x:real.
      (double_is_finite(round_double_logic(m, x)) ->
       (abs_real(double_value(round_double_logic(m, x))) <= max_double))))

axiom round_double_no_overflow:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) ->
       (double_is_finite(round_double_logic(m, x)) and
        (double_value(round_double_logic(m, x)) = round_double(m, x))))))

axiom double_positive_constant:
  (forall m:mode.
    (forall x:real.
      (((min_double <= x) and (x <= max_double)) ->
       (double_is_finite(round_double_logic(m, x)) and
        ((double_value(round_double_logic(m, x)) > 0.0) and
         (double_sign(round_double_logic(m, x)) = Positive))))))

axiom double_negative_constant:
  (forall m:mode.
    (forall x:real.
      ((((-max_double) <= x) and (x <= (-min_double))) ->
       (double_is_finite(round_double_logic(m, x)) and
        ((double_value(round_double_logic(m, x)) < 0.0) and
         (double_sign(round_double_logic(m, x)) = Negative))))))

axiom single_is_gen_zero_comp1:
  (forall x:single.
    (forall y:single.
      ((single_is_gen_zero(x) and
        ((single_value(x) = single_value(y)) and single_is_finite(y))) ->
       single_is_gen_zero(y))))

axiom single_is_gen_zero_comp2:
  (forall x:single.
    (forall y:single.
      ((single_is_finite(x) and
        ((not single_is_gen_zero(x)) and (single_value(x) = single_value(y)))) ->
       (not single_is_gen_zero(y)))))

axiom double_is_gen_zero_comp1:
  (forall x:double.
    (forall y:double.
      ((double_is_gen_zero(x) and
        ((double_value(x) = double_value(y)) and double_is_finite(y))) ->
       double_is_gen_zero(y))))

axiom double_is_gen_zero_comp2:
  (forall x:double.
    (forall y:double.
      ((double_is_finite(x) and
        ((not double_is_gen_zero(x)) and (double_value(x) = double_value(y)))) ->
       (not double_is_gen_zero(y)))))

type __anonstruct_interval_1

type char_P

type int8

type padding

type void_P

logic __anonstruct_interval_1_tag : __anonstruct_interval_1 tag_id

axiom __anonstruct_interval_1_int:
  (int_of_tag(__anonstruct_interval_1_tag) = 1)

logic __anonstruct_interval_1_of_pointer_address : unit pointer -> __anonstruct_interval_1 pointer

axiom __anonstruct_interval_1_of_pointer_address_of_pointer_addr:
  (forall p:__anonstruct_interval_1 pointer.
    (p = __anonstruct_interval_1_of_pointer_address(pointer_address(p))))

axiom __anonstruct_interval_1_parenttag_bottom:
  parenttag(__anonstruct_interval_1_tag, bottom_tag)

axiom __anonstruct_interval_1_tags:
  (forall x:__anonstruct_interval_1 pointer.
    (forall __anonstruct_interval_1_tag_table:__anonstruct_interval_1 tag_table.
      instanceof(__anonstruct_interval_1_tag_table, x,
      __anonstruct_interval_1_tag)))

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

predicate dif_sign(x_1: double, y_1: double) =
  (double_sign(x_1) <> double_sign(y_1))

predicate double_le_real(x_1_0: double, y_1_0: real) =
  ((double_is_finite(x_1_0) and (double_value(x_1_0) <= y_1_0)) or
   double_is_minus_infinity(x_1_0))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

predicate real_le_double(x_2: real, y_2: double) =
  ((double_is_finite(y_2) and (x_2 <= double_value(y_2))) or
   double_is_plus_infinity(y_2))

predicate in_interval(a: real, x_4: __anonstruct_interval_1 pointer,
  __anonstruct_interval_1_u_x_4_2_at_L: (__anonstruct_interval_1,
  double) memory,
  __anonstruct_interval_1_l_x_4_2_at_L: (__anonstruct_interval_1,
  double) memory) =
  (double_le_real(select(__anonstruct_interval_1_l_x_4_2_at_L, x_4), a) and
   real_le_double(a, select(__anonstruct_interval_1_u_x_4_2_at_L, x_4)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate is_interval(x_3_0: __anonstruct_interval_1 pointer,
  __anonstruct_interval_1_u_x_3_1: (__anonstruct_interval_1, double) memory,
  __anonstruct_interval_1_l_x_3_1: (__anonstruct_interval_1,
  double) memory) =
  ((double_is_finite(select(__anonstruct_interval_1_l_x_3_1, x_3_0)) or
    double_is_minus_infinity(select(__anonstruct_interval_1_l_x_3_1, x_3_0))) and
   (double_is_finite(select(__anonstruct_interval_1_u_x_3_1, x_3_0)) or
    double_is_plus_infinity(select(__anonstruct_interval_1_u_x_3_1, x_3_0))))

predicate left_valid_struct___anonstruct_interval_1(p: __anonstruct_interval_1 pointer,
  a: int,
  __anonstruct_interval_1_alloc_table: __anonstruct_interval_1 alloc_table) =
  (offset_min(__anonstruct_interval_1_alloc_table, p) <= a)

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of___anonstruct_interval_1_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(__anonstruct_interval_1_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct___anonstruct_interval_1(p: __anonstruct_interval_1 pointer,
  b: int,
  __anonstruct_interval_1_alloc_table: __anonstruct_interval_1 alloc_table) =
  (offset_max(__anonstruct_interval_1_alloc_table, p) >= b)

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate sam_sign(x_0_0: double, y_0_0: double) =
  (double_sign(x_0_0) = double_sign(y_0_0))

predicate strict_valid_root___anonstruct_interval_1(p: __anonstruct_interval_1 pointer,
  a: int, b: int,
  __anonstruct_interval_1_alloc_table: __anonstruct_interval_1 alloc_table) =
  ((offset_min(__anonstruct_interval_1_alloc_table, p) = a) and
   (offset_max(__anonstruct_interval_1_alloc_table, p) = b))

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_interval_1(p: __anonstruct_interval_1 pointer,
  a: int, b: int,
  __anonstruct_interval_1_alloc_table: __anonstruct_interval_1 alloc_table) =
  ((offset_min(__anonstruct_interval_1_alloc_table, p) = a) and
   (offset_max(__anonstruct_interval_1_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct___anonstruct_interval_1(p: unit pointer,
  a: int, b: int, bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root___anonstruct_interval_1(p: __anonstruct_interval_1 pointer,
  a: int, b: int,
  __anonstruct_interval_1_alloc_table: __anonstruct_interval_1 alloc_table) =
  ((offset_min(__anonstruct_interval_1_alloc_table, p) <= a) and
   (offset_max(__anonstruct_interval_1_alloc_table, p) >= b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct___anonstruct_interval_1(p: __anonstruct_interval_1 pointer,
  a: int, b: int,
  __anonstruct_interval_1_alloc_table: __anonstruct_interval_1 alloc_table) =
  ((offset_min(__anonstruct_interval_1_alloc_table, p) <= a) and
   (offset_max(__anonstruct_interval_1_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

