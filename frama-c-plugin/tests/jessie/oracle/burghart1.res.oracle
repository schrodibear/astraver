Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only burghart1.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD burghart1.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir burghart1.jessie
[jessie] File burghart1.jessie/burghart1.jc written.
[jessie] File burghart1.jessie/burghart1.cloc written.
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

tag int_P = {
  integer int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  integer char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

axiomatic cnt_axioms {

  logic integer cnt{L}(int_P[..] a, integer n, integer val)
  reads (a + [0..(n - 1)]).int_M;
   
  axiom cnt_empty{L} :
  (\forall int_P[..] a_0;
    (\forall integer n_0;
      (\forall integer val_0;
        ((n_0 <= 0) ==> (cnt{L}(a_0, n_0, val_0) == 0)))))
   
  axiom cnt_hit{L} :
  (\forall int_P[..] a_1;
    (\forall integer n_1;
      (\forall integer val_1;
        (((n_1 >= 0) && ((a_1 + n_1).int_M == val_1)) ==>
          (cnt{L}(a_1, (n_1 + 1), val_1) == (cnt{L}(a_1, n_1, val_1) + 1))))))
   
  axiom cnt_miss{L} :
  (\forall int_P[..] a_2;
    (\forall integer n_2;
      (\forall integer val_2;
        (((n_2 >= 0) && ((a_2 + n_2).int_M != val_2)) ==>
          (cnt{L}(a_2, (n_2 + 1), val_2) == cnt{L}(a_2, n_2, val_2))))))
  
}

integer remove_copy(int_P[..] a, integer n, int_P[..] b, integer val)
  requires (C_24 : (n >= 0));
  requires (C_25 : ((C_26 : (\offset_min(a) <= 0)) &&
                     (C_27 : (\offset_max(a) >= (n - 1)))));
  requires (C_28 : ((C_29 : (\offset_min(b) <= 0)) &&
                     (C_30 : (\offset_max(b) >= (n - 1)))));
behavior default:
  assigns (b + [0..(n - 1)]).int_M;
  ensures (C_31 : ((C_32 : (\forall integer k_1;
                             (((\result <= k_1) && (k_1 < n)) ==>
                               ((b + k_1).int_M == \old((b + k_1).int_M))))) &&
                    ((C_34 : (\forall integer k_2;
                               (((0 <= k_2) && (k_2 < \result)) ==>
                                 ((b + k_2).int_M != val)))) &&
                      ((C_36 : (\forall integer x_0;
                                 ((x_0 != val) ==>
                                   (cnt{Here}(a, n, x_0) ==
                                     cnt{Here}(b, \result, x_0))))) &&
                        ((C_38 : (\result == (n - cnt{Here}(a, n, val)))) &&
                          ((C_40 : (0 <= \result)) &&
                            (C_41 : (\result <= n))))))));
{  
   (var integer i);
   
   (var integer j);
   
   {  (C_1 : (j = 0));
      (C_2 : (i = 0));
      
      {  
         loop 
         behavior default:
           invariant (C_7 : ((C_8 : (0 <= j)) &&
                              ((C_10 : (j <= i)) && (C_11 : (i <= n)))));
         behavior default:
           invariant (C_6 : (\forall integer k;
                              (((j <= k) && (k < n)) ==>
                                ((b + k).int_M == \at((b + k).int_M,Pre)))));
         behavior default:
           invariant (C_5 : (\forall integer k_0;
                              (((0 <= k_0) && (k_0 < j)) ==>
                                ((b + k_0).int_M != val))));
         behavior default:
           invariant (C_4 : (\forall integer x;
                              ((x != val) ==>
                                (cnt{Here}(a, i, x) == cnt{Here}(b, j, x)))));
         behavior default:
           invariant (C_3 : (j == (i - cnt{Here}(a, i, val))));
         behavior default:
           
           assigns (b + [0..(j - 1)]).int_M;
         variant (C_12 : (n - i));
         while (true)
         {  
            {  (if (i < n) then () else 
               (goto while_0_break));
               (if ((C_21 : (C_20 : (a + i)).int_M) != val) then 
               {  (C_17 : ((C_16 : (C_15 : (b + j)).int_M) = (C_14 : 
                                                             (C_13 : 
                                                             (a + i)).int_M)));
                  (C_19 : (j = (C_18 : (j + 1))))
               } else ());
               (C_23 : (i = (C_22 : (i + 1))))
            }
         };
         (while_0_break : ())
      };
      
      (return j)
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs burghart1.jessie/burghart1.cloc burghart1.jessie/burghart1.jc
type char_P

type int_P

type padding

type void_P

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic cnt: int_P pointer, int, int, (int_P, int) memory -> int

axiom cnt_empty :
 (forall int_P_int_M_a_1_at_L:(int_P, int) memory.
  (forall a_0_0:int_P pointer.
   (forall n_0_0:int.
    (forall val_0_0:int.
     (le_int(n_0_0, (0)) ->
      eq_int(cnt(a_0_0, n_0_0, val_0_0, int_P_int_M_a_1_at_L), (0)))))))

axiom cnt_hit :
 (forall int_P_int_M_a_1_at_L:(int_P, int) memory.
  (forall a_1:int_P pointer.
   (forall n_1:int.
    (forall val_1:int.
     ((ge_int(n_1, (0))
      and eq_int(select(int_P_int_M_a_1_at_L, shift(a_1, n_1)), val_1)) ->
      eq_int(cnt(a_1, add_int(n_1, (1)), val_1, int_P_int_M_a_1_at_L),
      add_int(cnt(a_1, n_1, val_1, int_P_int_M_a_1_at_L), (1))))))))

axiom cnt_miss :
 (forall int_P_int_M_a_1_at_L:(int_P, int) memory.
  (forall a_2:int_P pointer.
   (forall n_2:int.
    (forall val_2:int.
     ((ge_int(n_2, (0))
      and neq_int(select(int_P_int_M_a_1_at_L, shift(a_2, n_2)), val_2)) ->
      eq_int(cnt(a_2, add_int(n_2, (1)), val_2, int_P_int_M_a_1_at_L),
      cnt(a_2, n_2, val_2, int_P_int_M_a_1_at_L)))))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_int_P(p:int_P pointer,
 a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom no_assign_cnt_0 :
 (forall tmp:int_P pset.
  (forall tmpmem:(int_P, int) memory.
   (forall tmpalloc:int_P alloc_table.
    (forall int_P_int_M_a_1_at_L:(int_P, int) memory.
     (forall val:int.
      (forall n:int.
       (forall a:int_P pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(a), (0), sub_int(n, (1))))
         and not_assigns(tmpalloc, int_P_int_M_a_1_at_L, tmpmem, tmp)) ->
         (cnt(a, n, val, int_P_int_M_a_1_at_L) = cnt(a, n, val, tmpmem))))))))))

axiom no_update_cnt_0 :
 (forall tmp:int_P pointer.
  (forall tmpval:int.
   (forall int_P_int_M_a_1_at_L:(int_P, int) memory.
    (forall val:int.
     (forall n:int.
      (forall a:int_P pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(a), (0), sub_int(n, (1))))) ->
        (cnt(a, n, val, int_P_int_M_a_1_at_L) = cnt(a, n, val,
                                                store(int_P_int_M_a_1_at_L,
                                                tmp, tmpval))))))))))

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_int_P(p:int_P pointer,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter remove_copy :
 a_0:int_P pointer ->
  n_0:int ->
   b:int_P pointer ->
    val_0:int ->
     int_P_int_M_b_3:(int_P, int) memory ref ->
      int_P_b_3_alloc_table:int_P alloc_table ->
       int_P_a_2_alloc_table:int_P alloc_table ->
        int_P_int_M_a_2:(int_P, int) memory ->
         { } int reads int_P_int_M_b_3 writes int_P_int_M_b_3
         { (JC_32:
           ((JC_30:
            ((JC_24:
             (forall k_1:int.
              ((le_int(result, k_1) and lt_int(k_1, n_0)) ->
               eq_int(select(int_P_int_M_b_3, shift(b, k_1)),
               select(int_P_int_M_b_3@, shift(b@, k_1@))))))
            and ((JC_25:
                 (forall k_2:int.
                  ((le_int((0), k_2) and lt_int(k_2, result)) ->
                   neq_int(select(int_P_int_M_b_3, shift(b, k_2)), val_0))))
                and ((JC_26:
                     (forall x_0:int.
                      (neq_int(x_0, val_0) ->
                       eq_int(cnt(a_0, n_0, x_0, int_P_int_M_a_2),
                       cnt(b, result, x_0, int_P_int_M_b_3)))))
                    and ((JC_27:
                         eq_int(result,
                         sub_int(n_0, cnt(a_0, n_0, val_0, int_P_int_M_a_2))))
                        and ((JC_28: le_int((0), result))
                            and (JC_29: le_int(result, n_0))))))))
           and (JC_31:
               not_assigns(int_P_b_3_alloc_table@, int_P_int_M_b_3@,
               int_P_int_M_b_3,
               pset_range(pset_singleton(b@), (0), sub_int(n_0@, (1))))))) }

parameter remove_copy_requires :
 a_0:int_P pointer ->
  n_0:int ->
   b:int_P pointer ->
    val_0:int ->
     int_P_int_M_b_3:(int_P, int) memory ref ->
      int_P_b_3_alloc_table:int_P alloc_table ->
       int_P_a_2_alloc_table:int_P alloc_table ->
        int_P_int_M_a_2:(int_P, int) memory ->
         { (JC_6:
           ((JC_1: ge_int(n_0, (0)))
           and ((JC_2: le_int(offset_min(int_P_a_2_alloc_table, a_0), (0)))
               and ((JC_3:
                    ge_int(offset_max(int_P_a_2_alloc_table, a_0),
                    sub_int(n_0, (1))))
                   and ((JC_4:
                        le_int(offset_min(int_P_b_3_alloc_table, b), (0)))
                       and (JC_5:
                           ge_int(offset_max(int_P_b_3_alloc_table, b),
                           sub_int(n_0, (1)))))))))}
         int reads int_P_int_M_b_3 writes int_P_int_M_b_3
         { (JC_32:
           ((JC_30:
            ((JC_24:
             (forall k_1:int.
              ((le_int(result, k_1) and lt_int(k_1, n_0)) ->
               eq_int(select(int_P_int_M_b_3, shift(b, k_1)),
               select(int_P_int_M_b_3@, shift(b@, k_1@))))))
            and ((JC_25:
                 (forall k_2:int.
                  ((le_int((0), k_2) and lt_int(k_2, result)) ->
                   neq_int(select(int_P_int_M_b_3, shift(b, k_2)), val_0))))
                and ((JC_26:
                     (forall x_0:int.
                      (neq_int(x_0, val_0) ->
                       eq_int(cnt(a_0, n_0, x_0, int_P_int_M_a_2),
                       cnt(b, result, x_0, int_P_int_M_b_3)))))
                    and ((JC_27:
                         eq_int(result,
                         sub_int(n_0, cnt(a_0, n_0, val_0, int_P_int_M_a_2))))
                        and ((JC_28: le_int((0), result))
                            and (JC_29: le_int(result, n_0))))))))
           and (JC_31:
               not_assigns(int_P_b_3_alloc_table@, int_P_int_M_b_3@,
               int_P_int_M_b_3,
               pset_range(pset_singleton(b@), (0), sub_int(n_0@, (1))))))) }

let remove_copy_ensures_default =
 fun (a_0 : int_P pointer) (n_0 : int) (b : int_P pointer) (val_0 : int) (int_P_int_M_b_3 : (int_P, int) memory ref) (int_P_a_2_alloc_table : int_P alloc_table) (int_P_b_3_alloc_table : int_P alloc_table) (int_P_int_M_a_2 : (int_P, int) memory) ->
  { (JC_13:
    ((JC_8: ge_int(n_0, (0)))
    and ((JC_9: le_int(offset_min(int_P_a_2_alloc_table, a_0), (0)))
        and ((JC_10:
             ge_int(offset_max(int_P_a_2_alloc_table, a_0),
             sub_int(n_0, (1))))
            and ((JC_11: le_int(offset_min(int_P_b_3_alloc_table, b), (0)))
                and (JC_12:
                    ge_int(offset_max(int_P_b_3_alloc_table, b),
                    sub_int(n_0, (1))))))))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let i = ref (any_int void) in
     (let j = ref (any_int void) in
     (C_1:
     begin
       (let jessie_23 = (j := (0)) in void);
      (C_2:
      begin
        (let jessie_25 = (i := (0)) in void);
       try
        (let jessie_38 = begin
                           (loop_2:
                           while true do
                           { invariant
                               (((JC_50:
                                 eq_int(j,
                                 sub_int(i,
                                 cnt(a_0, i, val_0, int_P_int_M_a_2))))
                                and ((JC_51:
                                     (forall x:int.
                                      (neq_int(x, val_0) ->
                                       eq_int(cnt(a_0, i, x, int_P_int_M_a_2),
                                       cnt(b, j, x, int_P_int_M_b_3)))))
                                    and ((JC_52:
                                         (forall k_0:int.
                                          ((le_int((0), k_0)
                                           and lt_int(k_0, j)) ->
                                           neq_int(select(int_P_int_M_b_3,
                                                   shift(b, k_0)),
                                           val_0))))
                                        and ((JC_53:
                                             (forall k:int.
                                              ((le_int(j, k)
                                               and lt_int(k, n_0)) ->
                                               eq_int(select(int_P_int_M_b_3,
                                                      shift(b, k)),
                                               select(int_P_int_M_b_3@init,
                                               shift(b@init, k@init))))))
                                            and (JC_57:
                                                ((JC_54: le_int((0), j))
                                                and ((JC_55: le_int(j, i))
                                                    and (JC_56:
                                                        le_int(i, n_0)))))))))
                               and ((JC_59:
                                    not_assigns(int_P_b_3_alloc_table@loop_2,
                                    int_P_int_M_b_3@loop_2, int_P_int_M_b_3,
                                    pset_range(pset_singleton(b), (0),
                                    sub_int(j, (1)))))
                                   and (JC_60:
                                       not_assigns(int_P_b_3_alloc_table@init,
                                       int_P_int_M_b_3@init, int_P_int_M_b_3,
                                       pset_range(pset_singleton(b@init),
                                       (0), sub_int(n_0@init, (1)))))))
                              }
                            begin
                              [ { } unit { true } ];
                             try
                              (let jessie_37 = begin
                                                 (let jessie_36 = begin
                                                                    (if 
                                                                    ((lt_int_ !i) n_0)
                                                                    then void
                                                                    else
                                                                    (let jessie_26 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                   (if 
                                                                   ((neq_int_ 
                                                                    (C_21:
                                                                    ((safe_acc_ int_P_int_M_a_2) 
                                                                    (C_20:
                                                                    ((shift a_0) !i))))) val_0)
                                                                   then
                                                                    (let jessie_34 = 
                                                                    (C_17:
                                                                    begin
                                                                      
                                                                    (let jessie_32 = 
                                                                    (let jessie_28 = 
                                                                    (C_14:
                                                                    ((safe_acc_ int_P_int_M_a_2) 
                                                                    (C_13:
                                                                    ((shift a_0) !i)))) in
                                                                    (let jessie_31 = 
                                                                    (C_15:
                                                                    ((shift b) !j)) in
                                                                    (((safe_upd_ int_P_int_M_b_3) jessie_31) jessie_28))) in
                                                                    void);
                                                                    (C_19:
                                                                    begin
                                                                      
                                                                    (j := 
                                                                    (C_18:
                                                                    ((add_int !j) (1))));
                                                                    !j
                                                                    end)
                                                                    end) in
                                                                    void)
                                                                   else void);
                                                                   (C_23:
                                                                   begin
                                                                     
                                                                    (i := 
                                                                    (C_22:
                                                                    ((add_int !i) (1))));
                                                                    !i
                                                                   end)
                                                                  end in
                                                 void);
                                                (raise
                                                 (Loop_continue_exc
                                                 void))
                                               end in
                              void)
                              with
                              Loop_continue_exc jessie_3 ->
                              void end
                            end
                           done);
                          (raise (Goto_while_0_break_exc void))
                         end in
        void)
        with
        Goto_while_0_break_exc jessie_1 ->
        (while_0_break: void) end;
       (return := !j);
       (raise Return)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_23:
    ((JC_21:
     ((JC_15:
      (forall k_1:int.
       ((le_int(result, k_1) and lt_int(k_1, n_0)) ->
        eq_int(select(int_P_int_M_b_3, shift(b, k_1)),
        select(int_P_int_M_b_3@, shift(b@, k_1@))))))
     and ((JC_16:
          (forall k_2:int.
           ((le_int((0), k_2) and lt_int(k_2, result)) ->
            neq_int(select(int_P_int_M_b_3, shift(b, k_2)), val_0))))
         and ((JC_17:
              (forall x_0:int.
               (neq_int(x_0, val_0) ->
                eq_int(cnt(a_0, n_0, x_0, int_P_int_M_a_2),
                cnt(b, result, x_0, int_P_int_M_b_3)))))
             and ((JC_18:
                  eq_int(result,
                  sub_int(n_0, cnt(a_0, n_0, val_0, int_P_int_M_a_2))))
                 and ((JC_19: le_int((0), result))
                     and (JC_20: le_int(result, n_0))))))))
    and (JC_22:
        not_assigns(int_P_b_3_alloc_table@, int_P_int_M_b_3@,
        int_P_int_M_b_3,
        pset_range(pset_singleton(b@), (0), sub_int(n_0@, (1))))))) }

let remove_copy_safety =
 fun (a_0 : int_P pointer) (n_0 : int) (b : int_P pointer) (val_0 : int) (int_P_int_M_b_3 : (int_P, int) memory ref) (int_P_a_2_alloc_table : int_P alloc_table) (int_P_b_3_alloc_table : int_P alloc_table) (int_P_int_M_a_2 : (int_P, int) memory) ->
  { (JC_13:
    ((JC_8: ge_int(n_0, (0)))
    and ((JC_9: le_int(offset_min(int_P_a_2_alloc_table, a_0), (0)))
        and ((JC_10:
             ge_int(offset_max(int_P_a_2_alloc_table, a_0),
             sub_int(n_0, (1))))
            and ((JC_11: le_int(offset_min(int_P_b_3_alloc_table, b), (0)))
                and (JC_12:
                    ge_int(offset_max(int_P_b_3_alloc_table, b),
                    sub_int(n_0, (1))))))))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let i = ref (any_int void) in
     (let j = ref (any_int void) in
     (C_1:
     begin
       (let jessie_5 = (j := (0)) in void);
      (C_2:
      begin
        (let jessie_7 = (i := (0)) in void);
       try
        (let jessie_20 = begin
                           (loop_1:
                           while true do
                           { invariant (JC_44: true)
                             variant (JC_49 : sub_int(n_0, i)) }
                            begin
                              [ { } unit reads i,int_P_int_M_b_3,j
                                { ((JC_35:
                                   eq_int(j,
                                   sub_int(i,
                                   cnt(a_0, i, val_0, int_P_int_M_a_2))))
                                  and ((JC_36:
                                       (forall x:int.
                                        (neq_int(x, val_0) ->
                                         eq_int(cnt(a_0, i, x,
                                                int_P_int_M_a_2),
                                         cnt(b, j, x, int_P_int_M_b_3)))))
                                      and ((JC_37:
                                           (forall k_0:int.
                                            ((le_int((0), k_0)
                                             and lt_int(k_0, j)) ->
                                             neq_int(select(int_P_int_M_b_3,
                                                     shift(b, k_0)),
                                             val_0))))
                                          and ((JC_38:
                                               (forall k:int.
                                                ((le_int(j, k)
                                                 and lt_int(k, n_0)) ->
                                                 eq_int(select(int_P_int_M_b_3,
                                                        shift(b, k)),
                                                 select(int_P_int_M_b_3@init,
                                                 shift(b@init, k@init))))))
                                              and (JC_42:
                                                  ((JC_39: le_int((0), j))
                                                  and ((JC_40: le_int(j, i))
                                                      and (JC_41:
                                                          le_int(i, n_0))))))))) } ];
                             try
                              (let jessie_19 = begin
                                                 (let jessie_18 = begin
                                                                    (if 
                                                                    ((lt_int_ !i) n_0)
                                                                    then void
                                                                    else
                                                                    (let jessie_8 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                   (if 
                                                                   ((neq_int_ 
                                                                    (C_21:
                                                                    (JC_46:
                                                                    ((((offset_acc_ int_P_a_2_alloc_table) int_P_int_M_a_2) a_0) !i)))) val_0)
                                                                   then
                                                                    (let jessie_16 = 
                                                                    (C_17:
                                                                    begin
                                                                      
                                                                    (let jessie_14 = 
                                                                    (let jessie_10 = 
                                                                    (C_14:
                                                                    (JC_47:
                                                                    ((((offset_acc_ int_P_a_2_alloc_table) int_P_int_M_a_2) a_0) !i))) in
                                                                    (let jessie_11 = b in
                                                                    (let jessie_12 = !j in
                                                                    (let jessie_13 = 
                                                                    ((shift jessie_11) jessie_12) in
                                                                    (JC_48:
                                                                    (((((offset_upd_ int_P_b_3_alloc_table) int_P_int_M_b_3) jessie_11) jessie_12) jessie_10)))))) in
                                                                    void);
                                                                    (C_19:
                                                                    begin
                                                                      
                                                                    (j := 
                                                                    (C_18:
                                                                    ((add_int !j) (1))));
                                                                    !j
                                                                    end)
                                                                    end) in
                                                                    void)
                                                                   else void);
                                                                   (C_23:
                                                                   begin
                                                                     
                                                                    (i := 
                                                                    (C_22:
                                                                    ((add_int !i) (1))));
                                                                    !i
                                                                   end)
                                                                  end in
                                                 void);
                                                (raise
                                                 (Loop_continue_exc
                                                 void))
                                               end in
                              void)
                              with
                              Loop_continue_exc jessie_3 ->
                              void end
                            end
                           done);
                          (raise (Goto_while_0_break_exc void))
                         end in
        void)
        with
        Goto_while_0_break_exc jessie_1 ->
        (while_0_break: void) end;
       (return := !j);
       (raise Return)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C burghart1.jessie --quiet -f burghart1.makefile project
why --project [...] why/burghart1.why
<project name="burghart1" context="why/burghart1_ctx.why">
  <function name="Function remove_copy">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/burghart1_po25.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "77" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/burghart1_po26.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "77" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/burghart1_po27.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "80" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/burghart1_po28.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "80" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/burghart1_po29.why">
      <location file = "PPCHOME/tests/jessie/burghart1.jessie/burghart1.jc" line = "113" begin = "27" end = "216"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/burghart1_po30.why">
      <location file = "PPCHOME/tests/jessie/burghart1.jessie/burghart1.jc" line = "113" begin = "27" end = "216"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/burghart1_po31.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "67" begin = "17" end = "20"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/burghart1_po32.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "67" begin = "17" end = "20"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/burghart1_po1.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "73" begin = "19" end = "46"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/burghart1_po2.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "71" begin = "19" end = "91"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/burghart1_po3.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "70" begin = "19" end = "60"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/burghart1_po4.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "66" begin = "19" end = "25"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/burghart1_po5.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "66" begin = "24" end = "30"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/burghart1_po6.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "66" begin = "29" end = "35"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/burghart1_po7.why">
      <location file = "PPCHOME/tests/jessie/burghart1.jessie/burghart1.jc" line = "86" begin = "9" end = "1532"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/burghart1_po8.why">
      <location file = "PPCHOME/tests/jessie/burghart1.jessie/burghart1.jc" line = "86" begin = "9" end = "1532"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/burghart1_po9.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "73" begin = "19" end = "46"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/burghart1_po10.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "71" begin = "19" end = "91"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/burghart1_po11.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "70" begin = "19" end = "60"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/burghart1_po12.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "69" begin = "19" end = "70"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/burghart1_po13.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "66" begin = "19" end = "25"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/burghart1_po14.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "66" begin = "24" end = "30"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/burghart1_po15.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "66" begin = "29" end = "35"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/burghart1_po16.why">
      <location file = "PPCHOME/tests/jessie/burghart1.jessie/burghart1.jc" line = "86" begin = "9" end = "1532"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/burghart1_po17.why">
      <location file = "PPCHOME/tests/jessie/burghart1.jessie/burghart1.jc" line = "86" begin = "9" end = "1532"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/burghart1_po18.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "40" begin = "10" end = "64"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/burghart1_po19.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "43" begin = "10" end = "57"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/burghart1_po20.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "46" begin = "10" end = "68"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/burghart1_po21.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "49" begin = "10" end = "37"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/burghart1_po22.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "51" begin = "10" end = "22"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/burghart1_po23.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "51" begin = "15" end = "27"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/burghart1_po24.why">
      <location file = "PPCHOME/tests/jessie/burghart1.c" line = "58" begin = "4" end = "15"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type char_P

type int_P

type padding

type void_P

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic cnt : int_P pointer, int, int, (int_P, int) memory -> int

axiom cnt_empty:
  (forall int_P_int_M_a_1_at_L:(int_P, int) memory.
    (forall a_0_0:int_P pointer.
      (forall n_0_0:int.
        (forall val_0_0:int.
          ((n_0_0 <= 0) -> (cnt(a_0_0, n_0_0, val_0_0,
           int_P_int_M_a_1_at_L) = 0))))))

axiom cnt_hit:
  (forall int_P_int_M_a_1_at_L:(int_P, int) memory.
    (forall a_1:int_P pointer.
      (forall n_1:int.
        (forall val_1:int.
          (((n_1 >= 0) and (select(int_P_int_M_a_1_at_L, shift(a_1,
            n_1)) = val_1)) ->
           (cnt(a_1, (n_1 + 1), val_1, int_P_int_M_a_1_at_L) = (cnt(a_1, n_1,
           val_1, int_P_int_M_a_1_at_L) + 1)))))))

axiom cnt_miss:
  (forall int_P_int_M_a_1_at_L:(int_P, int) memory.
    (forall a_2:int_P pointer.
      (forall n_2:int.
        (forall val_2:int.
          (((n_2 >= 0) and (select(int_P_int_M_a_1_at_L, shift(a_2,
            n_2)) <> val_2)) ->
           (cnt(a_2, (n_2 + 1), val_2, int_P_int_M_a_1_at_L) = cnt(a_2, n_2,
           val_2, int_P_int_M_a_1_at_L)))))))

logic int_P_tag : int_P tag_id

axiom int_P_int: (int_of_tag(int_P_tag) = 1)

logic int_P_of_pointer_address : unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr:
  (forall p:int_P pointer.
    (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom: parenttag(int_P_tag, bottom_tag)

axiom int_P_tags:
  (forall x:int_P pointer.
    (forall int_P_tag_table:int_P tag_table. instanceof(int_P_tag_table, x,
      int_P_tag)))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_int_P(p: int_P pointer, a: int,
  int_P_alloc_table: int_P alloc_table) = (offset_min(int_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom no_assign_cnt_0:
  (forall tmp:int_P pset.
    (forall tmpmem:(int_P, int) memory.
      (forall tmpalloc:int_P alloc_table.
        (forall int_P_int_M_a_1_at_L:(int_P, int) memory.
          (forall val:int.
            (forall n:int.
              (forall a:int_P pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(a), 0,
                  (n - 1))) and not_assigns(tmpalloc, int_P_int_M_a_1_at_L,
                  tmpmem, tmp)) ->
                 (cnt(a, n, val, int_P_int_M_a_1_at_L) = cnt(a, n, val,
                 tmpmem))))))))))

axiom no_update_cnt_0:
  (forall tmp:int_P pointer.
    (forall tmpval:int.
      (forall int_P_int_M_a_1_at_L:(int_P, int) memory.
        (forall val:int.
          (forall n:int.
            (forall a:int_P pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(a), 0,
               (n - 1)))) -> (cnt(a, n, val, int_P_int_M_a_1_at_L) = cnt(a,
               n, val, store(int_P_int_M_a_1_at_L, tmp, tmpval))))))))))

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_int_P(p: int_P pointer, b: int,
  int_P_alloc_table: int_P alloc_table) = (offset_max(int_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

