Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only dillon3.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD dillon3.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir dillon3.jessie
[jessie] File dillon3.jessie/dillon3.jc written.
[jessie] File dillon3.jessie/dillon3.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

tag doubleP = {
  double doubleM: 64;
}

type doubleP = [doubleP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

double g4(doubleP[..] t)
  requires (C_8 : (((C_10 : (\offset_min(t) <= 0)) &&
                     (C_11 : (\offset_max(t) >= 0))) &&
                    ((C_13 : (\offset_min(t) <= 0)) &&
                      (C_14 : (\offset_max(t) >= 1)))));
behavior default:
  assigns \nothing;
  ensures (C_7 : ((\result :> real) ==
                   (((\at(t,Old) + 0).doubleM :> real) +
                     ((\at(t,Old) + 1).doubleM :> real))));
{  
   (var double y);
   
   {  (C_6 : (y = (C_5 : ((C_4 : (C_3 : (t + 0)).doubleM) +
                           (C_2 : (C_1 : (t + 1)).doubleM)))));
      
      (return y)
   }
}

double f4()
behavior default:
  assigns \nothing;
  ensures (C_24 : true);
{  
   (var doubleP[0..1] tab);
   
   (var double r);
   
   {  (C_16 : (tab = (C_15 : (new doubleP[2]))));
      (C_18 : ((C_17 : (tab + 0).doubleM) = (1.0 :> double)));
      (C_20 : ((C_19 : (tab + 1).doubleM) = (2.0 :> double)));
      (C_22 : (r = (C_21 : g4(tab))));
      
      {  (C_23 : (free(tab)));
         
         (return r)
      }
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs dillon3.jessie/dillon3.cloc dillon3.jessie/dillon3.jc
type charP

type doubleP

type int8

type padding

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic doubleP_tag:  -> doubleP tag_id

axiom doubleP_int : (int_of_tag(doubleP_tag) = (1))

logic doubleP_of_pointer_address: unit pointer -> doubleP pointer

axiom doubleP_of_pointer_address_of_pointer_addr :
 (forall p:doubleP pointer.
  (p = doubleP_of_pointer_address(pointer_address(p))))

axiom doubleP_parenttag_bottom : parenttag(doubleP_tag, bottom_tag)

axiom doubleP_tags :
 (forall x:doubleP pointer.
  (forall doubleP_tag_table:doubleP tag_table.
   instanceof(doubleP_tag_table, x, doubleP_tag)))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8.
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_doubleP(p:doubleP pointer, a:int,
 doubleP_alloc_table:doubleP alloc_table) =
 (offset_min(doubleP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_doubleP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(doubleP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_doubleP(p:doubleP pointer, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 (offset_max(doubleP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_doubleP(p:doubleP pointer, a:int, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 ((offset_min(doubleP_alloc_table, p) = a)
 and (offset_max(doubleP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_doubleP(p:doubleP pointer, a:int, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 ((offset_min(doubleP_alloc_table, p) = a)
 and (offset_max(doubleP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_doubleP(p:doubleP pointer, a:int, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 ((offset_min(doubleP_alloc_table, p) <= a)
 and (offset_max(doubleP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_doubleP(p:doubleP pointer, a:int, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 ((offset_min(doubleP_alloc_table, p) <= a)
 and (offset_max(doubleP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter doubleP_alloc_table : doubleP alloc_table ref

parameter doubleP_tag_table : doubleP tag_table ref

parameter alloc_struct_doubleP :
 n:int ->
  doubleP_alloc_table:doubleP alloc_table ref ->
   doubleP_tag_table:doubleP tag_table ref ->
    { } doubleP pointer writes doubleP_alloc_table,doubleP_tag_table
    { (strict_valid_struct_doubleP(result, (0), sub_int(n, (1)),
       doubleP_alloc_table)
      and (alloc_extends(doubleP_alloc_table@, doubleP_alloc_table)
          and (alloc_fresh(doubleP_alloc_table@, result, n)
              and instanceof(doubleP_tag_table, result, doubleP_tag)))) }

parameter alloc_struct_doubleP_requires :
 n:int ->
  doubleP_alloc_table:doubleP alloc_table ref ->
   doubleP_tag_table:doubleP tag_table ref ->
    { ge_int(n, (0))} doubleP pointer
    writes doubleP_alloc_table,doubleP_tag_table
    { (strict_valid_struct_doubleP(result, (0), sub_int(n, (1)),
       doubleP_alloc_table)
      and (alloc_extends(doubleP_alloc_table@, doubleP_alloc_table)
          and (alloc_fresh(doubleP_alloc_table@, result, n)
              and instanceof(doubleP_tag_table, result, doubleP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int8 : unit -> { } int8 { true }

parameter f4 :
 tt:unit ->
  { } double
  { (JC_<somenum>:
    not_assigns(doubleP_tab_2_alloc_table@, doubleP_doubleM_tab_2@,
    doubleP_doubleM_tab_2, pset_empty)) }

parameter f4_requires :
 tt:unit ->
  { } double
  { (JC_<somenum>:
    not_assigns(doubleP_tab_2_alloc_table@, doubleP_doubleM_tab_2@,
    doubleP_doubleM_tab_2, pset_empty)) }

parameter g4 :
 t:doubleP pointer ->
  doubleP_t_1_alloc_table:doubleP alloc_table ->
   doubleP_doubleM_t_1:(doubleP, double) memory ->
    { } double
    { (JC_<somenum>:
      (double_value(result) = add_real(double_value(select(doubleP_doubleM_t_1,
                                                    shift(t, (0)))),
                              double_value(select(doubleP_doubleM_t_1,
                                           shift(t, (1))))))) }

parameter g4_requires :
 t:doubleP pointer ->
  doubleP_t_1_alloc_table:doubleP alloc_table ->
   doubleP_doubleM_t_1:(doubleP, double) memory ->
    { (JC_<somenum>:
      ((JC_<somenum>: le_int(offset_min(doubleP_t_1_alloc_table, t), (0)))
      and ((JC_<somenum>: ge_int(offset_max(doubleP_t_1_alloc_table, t), (0)))
          and ((JC_<somenum>: le_int(offset_min(doubleP_t_1_alloc_table, t), (0)))
              and (JC_<somenum>: ge_int(offset_max(doubleP_t_1_alloc_table, t), (1)))))))}
    double
    { (JC_<somenum>:
      (double_value(result) = add_real(double_value(select(doubleP_doubleM_t_1,
                                                    shift(t, (0)))),
                              double_value(select(doubleP_doubleM_t_1,
                                           shift(t, (1))))))) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let f4_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let doubleP_doubleM_tab_2 = ref (any_memory void) in
     (let doubleP_tab_2_tag_table = ref (any_tag_table void) in
     (let doubleP_tab_2_alloc_table = ref (any_alloc_table void) in
     (let tab = ref (any_pointer void) in
     (let r = ref (any_double void) in
     (C_16:
     (C_18:
     (C_20:
     (C_22:
     (C_23:
     begin
       (let jessie_<somenum> =
       (tab := (C_15:
               (JC_<somenum>:
               (((alloc_struct_doubleP (2)) doubleP_tab_2_alloc_table) doubleP_tab_2_tag_table)))) in
       void);
      (let jessie_<somenum> = (double_of_real_exact 1.0) in
      (let jessie_<somenum> = !tab in
      (let jessie_<somenum> = (double_of_real_exact 2.0) in
      (let jessie_<somenum> = !tab in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit reads doubleP_doubleM_tab_2,doubleP_tab_2_alloc_table
        writes doubleP_doubleM_tab_2
        { (not_assigns(doubleP_tab_2_alloc_table, doubleP_doubleM_tab_2@,
           doubleP_doubleM_tab_2,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(doubleP_doubleM_tab_2, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(doubleP_doubleM_tab_2, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (r := (C_21:
            (let jessie_<somenum> = !tab in
            (JC_<somenum>:
            (((g4 jessie_<somenum>) !doubleP_tab_2_alloc_table) !doubleP_doubleM_tab_2))))) in
      void); ((safe_free_parameter doubleP_tab_2_alloc_table) !tab);
      (return := !r); (raise Return) end)))))))))); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    not_assigns(doubleP_tab_2_alloc_table@, doubleP_doubleM_tab_2@,
    doubleP_doubleM_tab_2, pset_empty)) }

let f4_safety =
 fun (tt : unit) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let doubleP_doubleM_tab_2 = ref (any_memory void) in
     (let doubleP_tab_2_tag_table = ref (any_tag_table void) in
     (let doubleP_tab_2_alloc_table = ref (any_alloc_table void) in
     (let tab = ref (any_pointer void) in
     (let r = ref (any_double void) in
     (C_16:
     (C_18:
     (C_20:
     (C_22:
     (C_23:
     begin
       (let jessie_<somenum> =
       (tab := (let jessie_<somenum> =
               (C_15:
               (JC_<somenum>:
               (((alloc_struct_doubleP_requires (2)) doubleP_tab_2_alloc_table) doubleP_tab_2_tag_table))) in
               (JC_<somenum>:
               (assert
               { ge_int(offset_max(doubleP_tab_2_alloc_table, jessie_<somenum>), (1)) };
               jessie_<somenum>)))) in void);
      (let jessie_<somenum> = (double_of_real_exact 1.0) in
      (let jessie_<somenum> = !tab in
      (let jessie_<somenum> = (double_of_real_exact 2.0) in
      (let jessie_<somenum> = !tab in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit reads doubleP_doubleM_tab_2,doubleP_tab_2_alloc_table
        writes doubleP_doubleM_tab_2
        { (not_assigns(doubleP_tab_2_alloc_table, doubleP_doubleM_tab_2@,
           doubleP_doubleM_tab_2,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(doubleP_doubleM_tab_2, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(doubleP_doubleM_tab_2, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (r := (C_21:
            (let jessie_<somenum> = !tab in
            (JC_<somenum>:
            (((g4_requires jessie_<somenum>) !doubleP_tab_2_alloc_table) !doubleP_doubleM_tab_2))))) in
      void); ((free_parameter doubleP_tab_2_alloc_table) !tab);
      (return := !r); (raise Return) end)))))))))); absurd  end with
   Return -> !return end)) { true }

let g4_ensures_default =
 fun (t : doubleP pointer) (doubleP_t_1_alloc_table : doubleP alloc_table) (doubleP_doubleM_t_1 : (doubleP, double) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(doubleP_t_1_alloc_table, t), (0)))
    and ((JC_<somenum>: ge_int(offset_max(doubleP_t_1_alloc_table, t), (0)))
        and ((JC_<somenum>: le_int(offset_min(doubleP_t_1_alloc_table, t), (0)))
            and (JC_<somenum>: ge_int(offset_max(doubleP_t_1_alloc_table, t), (1))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let y = ref (any_double void) in
     (C_6:
     begin
       (let jessie_<somenum> =
       (y := (C_5:
             (JC_<somenum>:
             (((add_double_safe nearest_even) (C_4:
                                              ((safe_acc_ doubleP_doubleM_t_1) 
                                               (C_3: ((shift t) (0)))))) 
              (C_2: ((safe_acc_ doubleP_doubleM_t_1) (C_1: ((shift t) (1))))))))) in
       void); (return := !y); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    (double_value(result) = add_real(double_value(select(doubleP_doubleM_t_1,
                                                  shift(t, (0)))),
                            double_value(select(doubleP_doubleM_t_1,
                                         shift(t, (1))))))) }

let g4_safety =
 fun (t : doubleP pointer) (doubleP_t_1_alloc_table : doubleP alloc_table) (doubleP_doubleM_t_1 : (doubleP, double) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(doubleP_t_1_alloc_table, t), (0)))
    and ((JC_<somenum>: ge_int(offset_max(doubleP_t_1_alloc_table, t), (0)))
        and ((JC_<somenum>: le_int(offset_min(doubleP_t_1_alloc_table, t), (0)))
            and (JC_<somenum>: ge_int(offset_max(doubleP_t_1_alloc_table, t), (1))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let y = ref (any_double void) in
     (C_6:
     begin
       (let jessie_<somenum> =
       (y := (C_5:
             (JC_<somenum>:
             (((add_double nearest_even) (C_4:
                                         (JC_<somenum>:
                                         (((acc_ doubleP_t_1_alloc_table) doubleP_doubleM_t_1) t)))) 
              (C_2:
              (JC_<somenum>:
              ((((offset_acc_ doubleP_t_1_alloc_table) doubleP_doubleM_t_1) t) (1)))))))) in
       void); (return := !y); (raise Return) end)); absurd  end with
   Return -> !return end)) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C dillon3.jessie --quiet -f dillon3.makefile project
why --project [...] why/dillon3.why
