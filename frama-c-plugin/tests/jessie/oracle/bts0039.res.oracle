Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -add-symbolic-path PPCHOME:PPCHOME -jessie -jessie-gen-only bts0039.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -dD PPCHOME/tests/jessie/bts0039.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir bts0039.jessie
[jessie] File bts0039.jessie/bts0039.jc written.
[jessie] File bts0039.jessie/bts0039.cloc written.
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

tag unsigned_charP = {
  integer unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag intP = {
  integer intM: 32;
}

type intP = [intP]

tag charP = {
  integer charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

tag __anonstruct_las_1 = {
  intP[0] i: 32; 
  intP[0] j: 32;
}

type __anonstruct_las_1 = [__anonstruct_las_1]

unit g(intP[..] a, intP[..] b)
  requires (C_6 : (((C_8 : (\offset_min(a) <= 0)) &&
                     (C_9 : (\offset_max(a) >= 0))) &&
                    ((C_11 : (\offset_min(b) <= 0)) &&
                      (C_12 : (\offset_max(b) >= 0)))));
behavior default:
  assigns a.intM,
  b.intM;
  ensures (C_5 : true);
{  
   {  (C_2 : ((C_1 : a.intM) = 11));
      (C_4 : ((C_3 : b.intM) = 15));
      
      (return ())
   }
}

unit f(__anonstruct_las_1[..] p)
  requires (C_17 : ((C_18 : (\offset_min(p) <= 0)) &&
                     (C_19 : (\offset_max(p) >= 0))));
behavior default:
  assigns p.i.intM,
  p.j.intM;
  ensures (C_16 : true);
{  
   {  (C_15 : g((C_13 : p.i), (C_14 : p.j)));
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs bts0039.jessie/bts0039.cloc bts0039.jessie/bts0039.jc
type __anonstruct_las_1

type charP

type intP

type padding

type unsigned_charP

type voidP

logic __anonstruct_las_1_tag:  -> __anonstruct_las_1 tag_id

axiom __anonstruct_las_1_int : (int_of_tag(__anonstruct_las_1_tag) = (1))

logic __anonstruct_las_1_of_pointer_address: unit pointer -> __anonstruct_las_1 pointer

axiom __anonstruct_las_1_of_pointer_address_of_pointer_addr :
 (forall p:__anonstruct_las_1 pointer.
  (p = __anonstruct_las_1_of_pointer_address(pointer_address(p))))

axiom __anonstruct_las_1_parenttag_bottom :
 parenttag(__anonstruct_las_1_tag, bottom_tag)

axiom __anonstruct_las_1_tags :
 (forall x:__anonstruct_las_1 pointer.
  (forall __anonstruct_las_1_tag_table:__anonstruct_las_1 tag_table.
   instanceof(__anonstruct_las_1_tag_table, x, __anonstruct_las_1_tag)))

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_las_1(p:__anonstruct_las_1 pointer,
 a:int, __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table,
 intP_alloc_table:intP alloc_table,
 __anonstruct_las_1_i:(__anonstruct_las_1, intP pointer) memory,
 __anonstruct_las_1_j:(__anonstruct_las_1, intP pointer) memory) =
 ((offset_min(__anonstruct_las_1_alloc_table, p) <= a)
 and (left_valid_struct_intP(select(__anonstruct_las_1_i, p), (0),
      intP_alloc_table)
     and left_valid_struct_intP(select(__anonstruct_las_1_j, p), (0),
         intP_alloc_table)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of___anonstruct_las_1_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(__anonstruct_las_1_of_pointer_address(p))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_las_1(p:__anonstruct_las_1 pointer,
 b:int, __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table,
 intP_alloc_table:intP alloc_table,
 __anonstruct_las_1_i:(__anonstruct_las_1, intP pointer) memory,
 __anonstruct_las_1_j:(__anonstruct_las_1, intP pointer) memory) =
 ((offset_max(__anonstruct_las_1_alloc_table, p) >= b)
 and (right_valid_struct_intP(select(__anonstruct_las_1_i, p), (0),
      intP_alloc_table)
     and right_valid_struct_intP(select(__anonstruct_las_1_j, p), (0),
         intP_alloc_table)))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root___anonstruct_las_1(p:__anonstruct_las_1 pointer,
 a:int, b:int,
 __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table) =
 ((offset_min(__anonstruct_las_1_alloc_table, p) = a)
 and (offset_max(__anonstruct_las_1_alloc_table, p) = b))

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_las_1(p:__anonstruct_las_1 pointer,
 a:int, b:int, __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table,
 intP_alloc_table:intP alloc_table,
 __anonstruct_las_1_i:(__anonstruct_las_1, intP pointer) memory,
 __anonstruct_las_1_j:(__anonstruct_las_1, intP pointer) memory) =
 ((offset_min(__anonstruct_las_1_alloc_table, p) = a)
 and ((offset_max(__anonstruct_las_1_alloc_table, p) = b)
     and (strict_valid_struct_intP(select(__anonstruct_las_1_i, p), (0), (0),
          intP_alloc_table)
         and strict_valid_struct_intP(select(__anonstruct_las_1_j, p), (0),
             (0), intP_alloc_table))))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root___anonstruct_las_1(p:__anonstruct_las_1 pointer, a:int,
 b:int, __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table) =
 ((offset_min(__anonstruct_las_1_alloc_table, p) <= a)
 and (offset_max(__anonstruct_las_1_alloc_table, p) >= b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct___anonstruct_las_1(p:__anonstruct_las_1 pointer,
 a:int, b:int, __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table,
 intP_alloc_table:intP alloc_table,
 __anonstruct_las_1_i:(__anonstruct_las_1, intP pointer) memory,
 __anonstruct_las_1_j:(__anonstruct_las_1, intP pointer) memory) =
 ((offset_min(__anonstruct_las_1_alloc_table, p) <= a)
 and ((offset_max(__anonstruct_las_1_alloc_table, p) >= b)
     and (valid_struct_intP(select(__anonstruct_las_1_i, p), (0), (0),
          intP_alloc_table)
         and valid_struct_intP(select(__anonstruct_las_1_j, p), (0), (0),
             intP_alloc_table))))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter __anonstruct_las_1_alloc_table : __anonstruct_las_1 alloc_table ref

parameter __anonstruct_las_1_tag_table : __anonstruct_las_1 tag_table ref

parameter intP_alloc_table : intP alloc_table ref

parameter alloc_struct___anonstruct_las_1 :
 n:int ->
  __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table ref ->
   intP_alloc_table:intP alloc_table ref ->
    __anonstruct_las_1_tag_table:__anonstruct_las_1 tag_table ref ->
     __anonstruct_las_1_i:(__anonstruct_las_1, intP pointer) memory ->
      __anonstruct_las_1_j:(__anonstruct_las_1, intP pointer) memory ->
       { } __anonstruct_las_1 pointer
       writes __anonstruct_las_1_alloc_table,__anonstruct_las_1_tag_table,intP_alloc_table
       { (strict_valid_struct___anonstruct_las_1(result, (0),
          sub_int(n, (1)), __anonstruct_las_1_alloc_table, intP_alloc_table,
          __anonstruct_las_1_i, __anonstruct_las_1_j)
         and (alloc_extends(__anonstruct_las_1_alloc_table@,
              __anonstruct_las_1_alloc_table)
             and (alloc_fresh(__anonstruct_las_1_alloc_table@, result, n)
                 and instanceof(__anonstruct_las_1_tag_table, result,
                     __anonstruct_las_1_tag)))) }

parameter alloc_struct___anonstruct_las_1_requires :
 n:int ->
  __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table ref ->
   intP_alloc_table:intP alloc_table ref ->
    __anonstruct_las_1_tag_table:__anonstruct_las_1 tag_table ref ->
     __anonstruct_las_1_i:(__anonstruct_las_1, intP pointer) memory ->
      __anonstruct_las_1_j:(__anonstruct_las_1, intP pointer) memory ->
       { ge_int(n, (0))} __anonstruct_las_1 pointer
       writes __anonstruct_las_1_alloc_table,__anonstruct_las_1_tag_table,intP_alloc_table
       { (strict_valid_struct___anonstruct_las_1(result, (0),
          sub_int(n, (1)), __anonstruct_las_1_alloc_table, intP_alloc_table,
          __anonstruct_las_1_i, __anonstruct_las_1_j)
         and (alloc_extends(__anonstruct_las_1_alloc_table@,
              __anonstruct_las_1_alloc_table)
             and (alloc_fresh(__anonstruct_las_1_alloc_table@, result, n)
                 and instanceof(__anonstruct_las_1_tag_table, result,
                     __anonstruct_las_1_tag)))) }

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter f :
 p:__anonstruct_las_1 pointer ->
  intP_intM_p_3:(intP, int) memory ref ->
   intP_p_3_alloc_table:intP alloc_table ->
    __anonstruct_las_1_p_3_alloc_table:__anonstruct_las_1 alloc_table ->
     __anonstruct_las_1_j_p_3:(__anonstruct_las_1, intP pointer) memory ->
      __anonstruct_las_1_i_p_3:(__anonstruct_las_1, intP pointer) memory ->
       { } unit writes intP_intM_p_3
       { (JC_<somenum>:
         not_assigns(intP_p_3_alloc_table, intP_intM_p_3@, intP_intM_p_3,
         pset_union(pset_deref(__anonstruct_las_1_j_p_3, pset_singleton(p)),
         pset_deref(__anonstruct_las_1_i_p_3, pset_singleton(p))))) }

parameter f_requires :
 p:__anonstruct_las_1 pointer ->
  intP_intM_p_3:(intP, int) memory ref ->
   intP_p_3_alloc_table:intP alloc_table ->
    __anonstruct_las_1_p_3_alloc_table:__anonstruct_las_1 alloc_table ->
     __anonstruct_las_1_j_p_3:(__anonstruct_las_1, intP pointer) memory ->
      __anonstruct_las_1_i_p_3:(__anonstruct_las_1, intP pointer) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          le_int(offset_min(__anonstruct_las_1_p_3_alloc_table, p), (0)))
         and (JC_<somenum>:
             ge_int(offset_max(__anonstruct_las_1_p_3_alloc_table, p), (0)))))}
       unit writes intP_intM_p_3
       { (JC_<somenum>:
         not_assigns(intP_p_3_alloc_table, intP_intM_p_3@, intP_intM_p_3,
         pset_union(pset_deref(__anonstruct_las_1_j_p_3, pset_singleton(p)),
         pset_deref(__anonstruct_las_1_i_p_3, pset_singleton(p))))) }

parameter g :
 a:intP pointer ->
  b:intP pointer ->
   intP_intM_b_2:(intP, int) memory ref ->
    intP_intM_a_1:(intP, int) memory ref ->
     intP_b_2_alloc_table:intP alloc_table ->
      intP_a_1_alloc_table:intP alloc_table ->
       { } unit writes intP_intM_a_1,intP_intM_b_2
       { (JC_<somenum>:
         ((JC_<somenum>:
          not_assigns(intP_a_1_alloc_table, intP_intM_a_1@, intP_intM_a_1,
          pset_singleton(a)))
         and (JC_<somenum>:
             not_assigns(intP_b_2_alloc_table, intP_intM_b_2@, intP_intM_b_2,
             pset_singleton(b))))) }

parameter g_requires :
 a:intP pointer ->
  b:intP pointer ->
   intP_intM_b_2:(intP, int) memory ref ->
    intP_intM_a_1:(intP, int) memory ref ->
     intP_b_2_alloc_table:intP alloc_table ->
      intP_a_1_alloc_table:intP alloc_table ->
       { (JC_<somenum>:
         ((JC_<somenum>: le_int(offset_min(intP_a_1_alloc_table, a), (0)))
         and ((JC_<somenum>: ge_int(offset_max(intP_a_1_alloc_table, a), (0)))
             and ((JC_<somenum>: le_int(offset_min(intP_b_2_alloc_table, b), (0)))
                 and (JC_<somenum>: ge_int(offset_max(intP_b_2_alloc_table, b), (0)))))))}
       unit writes intP_intM_a_1,intP_intM_b_2
       { (JC_<somenum>:
         ((JC_<somenum>:
          not_assigns(intP_a_1_alloc_table, intP_intM_a_1@, intP_intM_a_1,
          pset_singleton(a)))
         and (JC_<somenum>:
             not_assigns(intP_b_2_alloc_table, intP_intM_b_2@, intP_intM_b_2,
             pset_singleton(b))))) }

let f_ensures_default =
 fun (p : __anonstruct_las_1 pointer) (intP_intM_p_3 : (intP, int) memory ref) (__anonstruct_las_1_p_3_alloc_table : __anonstruct_las_1 alloc_table) (intP_p_3_alloc_table : intP alloc_table) (__anonstruct_las_1_i_p_3 : (__anonstruct_las_1, intP pointer) memory) (__anonstruct_las_1_j_p_3 : (__anonstruct_las_1, intP pointer) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(__anonstruct_las_1_p_3_alloc_table, p), (0)))
    and (JC_<somenum>:
        ge_int(offset_max(__anonstruct_las_1_p_3_alloc_table, p), (0))))) }
  (init:
  try
   (C_15:
   begin
     (let jessie_<somenum> = (C_13: ((safe_acc_ __anonstruct_las_1_i_p_3) p)) in
     (let jessie_<somenum> = (C_14: ((safe_acc_ __anonstruct_las_1_j_p_3) p)) in
     (JC_<somenum>:
     ((((((g jessie_<somenum>) jessie_<somenum>) intP_intM_p_3) intP_intM_p_3) intP_p_3_alloc_table) intP_p_3_alloc_table))));
    (raise Return); (raise Return) end) with Return -> void end)
  { (JC_<somenum>:
    not_assigns(intP_p_3_alloc_table, intP_intM_p_3@, intP_intM_p_3,
    pset_union(pset_deref(__anonstruct_las_1_j_p_3, pset_singleton(p)),
    pset_deref(__anonstruct_las_1_i_p_3, pset_singleton(p))))) }

let f_safety =
 fun (p : __anonstruct_las_1 pointer) (intP_intM_p_3 : (intP, int) memory ref) (__anonstruct_las_1_p_3_alloc_table : __anonstruct_las_1 alloc_table) (intP_p_3_alloc_table : intP alloc_table) (__anonstruct_las_1_i_p_3 : (__anonstruct_las_1, intP pointer) memory) (__anonstruct_las_1_j_p_3 : (__anonstruct_las_1, intP pointer) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(__anonstruct_las_1_p_3_alloc_table, p), (0)))
    and (JC_<somenum>:
        ge_int(offset_max(__anonstruct_las_1_p_3_alloc_table, p), (0))))) }
  (init:
  try
   (C_15:
   begin
     (let jessie_<somenum> =
     (C_13:
     (JC_<somenum>:
     (((acc_ __anonstruct_las_1_p_3_alloc_table) __anonstruct_las_1_i_p_3) p))) in
     (let jessie_<somenum> =
     (C_14:
     (JC_<somenum>:
     (((acc_ __anonstruct_las_1_p_3_alloc_table) __anonstruct_las_1_j_p_3) p))) in
     (JC_<somenum>:
     ((((((g_requires jessie_<somenum>) jessie_<somenum>) intP_intM_p_3) intP_intM_p_3) intP_p_3_alloc_table) intP_p_3_alloc_table))));
    (raise Return); (raise Return) end) with Return -> void end) { true }

let g_ensures_default =
 fun (a : intP pointer) (b : intP pointer) (intP_intM_a_1 : (intP, int) memory ref) (intP_intM_b_2 : (intP, int) memory ref) (intP_a_1_alloc_table : intP alloc_table) (intP_b_2_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(intP_a_1_alloc_table, a), (0)))
    and ((JC_<somenum>: ge_int(offset_max(intP_a_1_alloc_table, a), (0)))
        and ((JC_<somenum>: le_int(offset_min(intP_b_2_alloc_table, b), (0)))
            and (JC_<somenum>: ge_int(offset_max(intP_b_2_alloc_table, b), (0))))))) }
  (init:
  try
   (C_2:
   (C_4:
   begin
     (let jessie_<somenum> = (11) in
     (let jessie_<somenum> = a in (((safe_upd_ intP_intM_a_1) jessie_<somenum>) jessie_<somenum>)));
    (let jessie_<somenum> = (15) in
    (let jessie_<somenum> = b in (((safe_upd_ intP_intM_b_2) jessie_<somenum>) jessie_<somenum>)));
    (raise Return); (raise Return) end)) with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>:
     not_assigns(intP_a_1_alloc_table, intP_intM_a_1@, intP_intM_a_1,
     pset_singleton(a)))
    and (JC_<somenum>:
        not_assigns(intP_b_2_alloc_table, intP_intM_b_2@, intP_intM_b_2,
        pset_singleton(b))))) }

let g_safety =
 fun (a : intP pointer) (b : intP pointer) (intP_intM_a_1 : (intP, int) memory ref) (intP_intM_b_2 : (intP, int) memory ref) (intP_a_1_alloc_table : intP alloc_table) (intP_b_2_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(intP_a_1_alloc_table, a), (0)))
    and ((JC_<somenum>: ge_int(offset_max(intP_a_1_alloc_table, a), (0)))
        and ((JC_<somenum>: le_int(offset_min(intP_b_2_alloc_table, b), (0)))
            and (JC_<somenum>: ge_int(offset_max(intP_b_2_alloc_table, b), (0))))))) }
  (init:
  try
   (C_2:
   (C_4:
   begin
     (let jessie_<somenum> = (11) in
     (let jessie_<somenum> = a in
     (JC_<somenum>:
     ((((upd_ intP_a_1_alloc_table) intP_intM_a_1) jessie_<somenum>) jessie_<somenum>))));
    (let jessie_<somenum> = (15) in
    (let jessie_<somenum> = b in
    (JC_<somenum>:
    ((((upd_ intP_b_2_alloc_table) intP_intM_b_2) jessie_<somenum>) jessie_<somenum>))));
    (raise Return); (raise Return) end)) with Return -> void end) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C bts0039.jessie --quiet -f bts0039.makefile project
why --project [...] why/bts0039.why
