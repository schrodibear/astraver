Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only bts0039.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD bts0039.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir bts0039.jessie
[jessie] File bts0039.jessie/bts0039.jc written.
[jessie] File bts0039.jessie/bts0039.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag int_P = {
  int32 int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

tag __anonstruct_las_1 = {
  int_P[0] i: 32; 
  int_P[0] j: 32;
}

type __anonstruct_las_1 = [__anonstruct_las_1]

unit g(int_P[..] a, int_P[..] b)
  requires (C_5 : (((C_7 : (\offset_min(a) <= 0)) &&
                     (C_8 : (\offset_max(a) >= 0))) &&
                    ((C_10 : (\offset_min(b) <= 0)) &&
                      (C_11 : (\offset_max(b) >= 0)))));
behavior default:
  assumes true;
  assigns a.int_M,
  b.int_M;
  ensures (C_12 : true);
{  
   {  (C_2 : ((C_1 : a.int_M) = 11));
      (C_4 : ((C_3 : b.int_M) = 15));
      
      (return ())
   }
}

unit f(__anonstruct_las_1[..] p)
  requires (C_16 : ((C_17 : (\offset_min(p) <= 0)) &&
                     (C_18 : (\offset_max(p) >= 0))));
behavior default:
  assumes true;
  assigns p.i.int_M,
  p.j.int_M;
  ensures (C_19 : true);
{  
   {  (C_15 : g((C_13 : p.i), (C_14 : p.j)));
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs bts0039.jessie/bts0039.cloc bts0039.jessie/bts0039.jc
type __anonstruct_las_1

type char_P

type int32

type int8

type int_P

type padding

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic __anonstruct_las_1_tag:  -> __anonstruct_las_1 tag_id

axiom __anonstruct_las_1_int : (int_of_tag(__anonstruct_las_1_tag) = (1))

logic __anonstruct_las_1_of_bitvector: bitvector -> __anonstruct_las_1 pointer

logic bitvector_of___anonstruct_las_1: __anonstruct_las_1 pointer -> bitvector

axiom __anonstruct_las_1_of_bitvector_of_bitvector_of___anonstruct_las_1 :
 (forall x:__anonstruct_las_1 pointer.
  (__anonstruct_las_1_of_bitvector(bitvector_of___anonstruct_las_1(x)) = x))

logic __anonstruct_las_1_of_pointer_address: unit pointer -> __anonstruct_las_1 pointer

axiom __anonstruct_las_1_of_pointer_address_of_pointer_addr :
 (forall p:__anonstruct_las_1 pointer.
  (p = __anonstruct_las_1_of_pointer_address(pointer_address(p))))

axiom __anonstruct_las_1_parenttag_bottom :
 parenttag(__anonstruct_las_1_tag, bottom_tag)

axiom __anonstruct_las_1_tags :
 (forall x:__anonstruct_las_1 pointer.
  (forall __anonstruct_las_1_tag_table:__anonstruct_las_1 tag_table.
   instanceof(__anonstruct_las_1_tag_table, x, __anonstruct_las_1_tag)))

axiom bitvector_of___anonstruct_las_1_of___anonstruct_las_1_of_bitvector :
 (forall x:bitvector.
  (bitvector_of___anonstruct_las_1(__anonstruct_las_1_of_bitvector(x)) = x))

logic bitvector_of_char_P: char_P pointer -> bitvector

logic char_P_of_bitvector: bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_int32: int32 -> bitvector

logic int32_of_bitvector: bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector :
 (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_int8: int8 -> bitvector

logic int8_of_bitvector: bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector :
 (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_int_P: int_P pointer -> bitvector

logic int_P_of_bitvector: bitvector -> int_P pointer

axiom bitvector_of_int_P_of_int_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_int_P(int_P_of_bitvector(x)) = x))

logic bitvector_of_void_P: void_P pointer -> bitvector

logic void_P_of_bitvector: bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_of_bitvector_of_bitvector_of_char_P :
 (forall x:char_P pointer. (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_of_bitvector_of_bitvector_of_int32 :
 (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_of_bitvector_of_bitvector_of_int8 :
 (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_of_bitvector_of_bitvector_of_int_P :
 (forall x:int_P pointer. (int_P_of_bitvector(bitvector_of_int_P(x)) = x))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

predicate left_valid_struct_int_P(p:int_P pointer,
 a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_las_1(p:__anonstruct_las_1 pointer,
 a:int,
 __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 __anonstruct_las_1_i:(__anonstruct_las_1, int_P pointer) memory,
 __anonstruct_las_1_j:(__anonstruct_las_1, int_P pointer) memory) =
 ((offset_min(__anonstruct_las_1_alloc_table, p) <= a)
 and (left_valid_struct_int_P(select(__anonstruct_las_1_i, p), (0),
      int_P_alloc_table)
     and left_valid_struct_int_P(select(__anonstruct_las_1_j, p), (0),
         int_P_alloc_table)))

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of___anonstruct_las_1_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(__anonstruct_las_1_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_int_P(p:int_P pointer,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_las_1(p:__anonstruct_las_1 pointer,
 b:int,
 __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 __anonstruct_las_1_i:(__anonstruct_las_1, int_P pointer) memory,
 __anonstruct_las_1_j:(__anonstruct_las_1, int_P pointer) memory) =
 ((offset_max(__anonstruct_las_1_alloc_table, p) >= b)
 and (right_valid_struct_int_P(select(__anonstruct_las_1_i, p), (0),
      int_P_alloc_table)
     and right_valid_struct_int_P(select(__anonstruct_las_1_j, p), (0),
         int_P_alloc_table)))

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root___anonstruct_las_1(p:__anonstruct_las_1 pointer,
 a:int,
 b:int,
 __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table) =
 ((offset_min(__anonstruct_las_1_alloc_table, p) = a)
 and (offset_max(__anonstruct_las_1_alloc_table, p) = b))

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_las_1(p:__anonstruct_las_1 pointer,
 a:int,
 b:int,
 __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 __anonstruct_las_1_i:(__anonstruct_las_1, int_P pointer) memory,
 __anonstruct_las_1_j:(__anonstruct_las_1, int_P pointer) memory) =
 ((offset_min(__anonstruct_las_1_alloc_table, p) = a)
 and ((offset_max(__anonstruct_las_1_alloc_table, p) = b)
     and (strict_valid_struct_int_P(select(__anonstruct_las_1_i, p), (0),
          (0), int_P_alloc_table)
         and strict_valid_struct_int_P(select(__anonstruct_las_1_j, p), (0),
             (0), int_P_alloc_table))))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct___anonstruct_las_1(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root___anonstruct_las_1(p:__anonstruct_las_1 pointer,
 a:int,
 b:int,
 __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table) =
 ((offset_min(__anonstruct_las_1_alloc_table, p) <= a)
 and (offset_max(__anonstruct_las_1_alloc_table, p) >= b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct___anonstruct_las_1(p:__anonstruct_las_1 pointer,
 a:int,
 b:int,
 __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 __anonstruct_las_1_i:(__anonstruct_las_1, int_P pointer) memory,
 __anonstruct_las_1_j:(__anonstruct_las_1, int_P pointer) memory) =
 ((offset_min(__anonstruct_las_1_alloc_table, p) <= a)
 and ((offset_max(__anonstruct_las_1_alloc_table, p) >= b)
     and (valid_struct_int_P(select(__anonstruct_las_1_i, p), (0), (0),
          int_P_alloc_table)
         and valid_struct_int_P(select(__anonstruct_las_1_j, p), (0), (0),
             int_P_alloc_table))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_bitvector_of_bitvector_of_void_P :
 (forall x:void_P pointer. (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter __anonstruct_las_1_alloc_table : __anonstruct_las_1 alloc_table ref

parameter __anonstruct_las_1_tag_table : __anonstruct_las_1 tag_table ref

parameter alloc_bitvector_struct___anonstruct_las_1 :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct___anonstruct_las_1(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct___anonstruct_las_1_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct___anonstruct_las_1(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter alloc_struct___anonstruct_las_1 :
 n:int ->
  __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    __anonstruct_las_1_tag_table:__anonstruct_las_1 tag_table ref ->
     __anonstruct_las_1_i:(__anonstruct_las_1, int_P pointer) memory ->
      __anonstruct_las_1_j:(__anonstruct_las_1, int_P pointer) memory ->
       { } __anonstruct_las_1 pointer
       writes __anonstruct_las_1_alloc_table,__anonstruct_las_1_tag_table,int_P_alloc_table
       { (strict_valid_struct___anonstruct_las_1(result, (0),
          sub_int(n, (1)), __anonstruct_las_1_alloc_table, int_P_alloc_table,
          __anonstruct_las_1_i, __anonstruct_las_1_j)
         and (alloc_extends(__anonstruct_las_1_alloc_table@,
              __anonstruct_las_1_alloc_table)
             and (alloc_fresh(__anonstruct_las_1_alloc_table@, result, n)
                 and instanceof(__anonstruct_las_1_tag_table, result,
                     __anonstruct_las_1_tag)))) }

parameter alloc_struct___anonstruct_las_1_requires :
 n:int ->
  __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    __anonstruct_las_1_tag_table:__anonstruct_las_1 tag_table ref ->
     __anonstruct_las_1_i:(__anonstruct_las_1, int_P pointer) memory ->
      __anonstruct_las_1_j:(__anonstruct_las_1, int_P pointer) memory ->
       { ge_int(n, (0))} __anonstruct_las_1 pointer
       writes __anonstruct_las_1_alloc_table,__anonstruct_las_1_tag_table,int_P_alloc_table
       { (strict_valid_struct___anonstruct_las_1(result, (0),
          sub_int(n, (1)), __anonstruct_las_1_alloc_table, int_P_alloc_table,
          __anonstruct_las_1_i, __anonstruct_las_1_j)
         and (alloc_extends(__anonstruct_las_1_alloc_table@,
              __anonstruct_las_1_alloc_table)
             and (alloc_fresh(__anonstruct_las_1_alloc_table@, result, n)
                 and instanceof(__anonstruct_las_1_tag_table, result,
                     __anonstruct_las_1_tag)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter f :
 p:__anonstruct_las_1 pointer ->
  int_P_int_M_p_3:(int_P, int32) memory ref ->
   int_P_p_3_alloc_table:int_P alloc_table ->
    __anonstruct_las_1_p_3_alloc_table:__anonstruct_las_1 alloc_table ->
     __anonstruct_las_1_j_p_3:(__anonstruct_las_1, int_P pointer) memory ->
      __anonstruct_las_1_i_p_3:(__anonstruct_las_1, int_P pointer) memory ->
       { } unit writes int_P_int_M_p_3
       { ((true = true) ->
          (JC_36:
          not_assigns(int_P_p_3_alloc_table@, int_P_int_M_p_3@,
          int_P_int_M_p_3,
          pset_union(pset_deref(__anonstruct_las_1_j_p_3@,
                     pset_singleton(p@)),
          pset_deref(__anonstruct_las_1_i_p_3@, pset_singleton(p@)))))) }

parameter f_requires :
 p:__anonstruct_las_1 pointer ->
  int_P_int_M_p_3:(int_P, int32) memory ref ->
   int_P_p_3_alloc_table:int_P alloc_table ->
    __anonstruct_las_1_p_3_alloc_table:__anonstruct_las_1 alloc_table ->
     __anonstruct_las_1_j_p_3:(__anonstruct_las_1, int_P pointer) memory ->
      __anonstruct_las_1_i_p_3:(__anonstruct_las_1, int_P pointer) memory ->
       { (JC_27:
         ((JC_25:
          le_int(offset_min(__anonstruct_las_1_p_3_alloc_table, p), (0)))
         and (JC_26:
             ge_int(offset_max(__anonstruct_las_1_p_3_alloc_table, p), (0)))))}
       unit writes int_P_int_M_p_3
       { ((true = true) ->
          (JC_36:
          not_assigns(int_P_p_3_alloc_table@, int_P_int_M_p_3@,
          int_P_int_M_p_3,
          pset_union(pset_deref(__anonstruct_las_1_j_p_3@,
                     pset_singleton(p@)),
          pset_deref(__anonstruct_las_1_i_p_3@, pset_singleton(p@)))))) }

parameter g :
 a:int_P pointer ->
  b:int_P pointer ->
   int_P_int_M_b_2:(int_P, int32) memory ref ->
    int_P_int_M_a_1:(int_P, int32) memory ref ->
     int_P_b_2_alloc_table:int_P alloc_table ->
      int_P_a_1_alloc_table:int_P alloc_table ->
       { } unit writes int_P_int_M_a_1,int_P_int_M_b_2
       { ((true = true) ->
          (JC_20:
          ((JC_18:
           not_assigns(int_P_a_1_alloc_table@, int_P_int_M_a_1@,
           int_P_int_M_a_1, pset_singleton(a@)))
          and (JC_19:
              not_assigns(int_P_b_2_alloc_table@, int_P_int_M_b_2@,
              int_P_int_M_b_2, pset_singleton(b@)))))) }

parameter g_requires :
 a:int_P pointer ->
  b:int_P pointer ->
   int_P_int_M_b_2:(int_P, int32) memory ref ->
    int_P_int_M_a_1:(int_P, int32) memory ref ->
     int_P_b_2_alloc_table:int_P alloc_table ->
      int_P_a_1_alloc_table:int_P alloc_table ->
       { (JC_5:
         ((JC_1: le_int(offset_min(int_P_a_1_alloc_table, a), (0)))
         and ((JC_2: ge_int(offset_max(int_P_a_1_alloc_table, a), (0)))
             and ((JC_3: le_int(offset_min(int_P_b_2_alloc_table, b), (0)))
                 and (JC_4:
                     ge_int(offset_max(int_P_b_2_alloc_table, b), (0)))))))}
       unit writes int_P_int_M_a_1,int_P_int_M_b_2
       { ((true = true) ->
          (JC_20:
          ((JC_18:
           not_assigns(int_P_a_1_alloc_table@, int_P_int_M_a_1@,
           int_P_int_M_a_1, pset_singleton(a@)))
          and (JC_19:
              not_assigns(int_P_b_2_alloc_table@, int_P_int_M_b_2@,
              int_P_int_M_b_2, pset_singleton(b@)))))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let f_ensures_default =
 fun (p : __anonstruct_las_1 pointer) (int_P_int_M_p_3 : (int_P, int32) memory ref) (__anonstruct_las_1_p_3_alloc_table : __anonstruct_las_1 alloc_table) (int_P_p_3_alloc_table : int_P alloc_table) (__anonstruct_las_1_i_p_3 : (__anonstruct_las_1, int_P pointer) memory) (__anonstruct_las_1_j_p_3 : (__anonstruct_las_1, int_P pointer) memory) ->
  { ((true = true)
    and (JC_31:
        ((JC_29:
         le_int(offset_min(__anonstruct_las_1_p_3_alloc_table, p), (0)))
        and (JC_30:
            ge_int(offset_max(__anonstruct_las_1_p_3_alloc_table, p), (0)))))) }
  (init:
  try
   begin
     (C_15:
     begin
       (let jessie_28 = (C_13: ((safe_acc_ __anonstruct_las_1_i_p_3) p)) in
       (let jessie_27 = (C_14: ((safe_acc_ __anonstruct_las_1_j_p_3) p)) in
       (JC_42:
       ((((((g jessie_28) jessie_27) int_P_int_M_p_3) int_P_int_M_p_3) int_P_p_3_alloc_table) int_P_p_3_alloc_table))));
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_34:
    not_assigns(int_P_p_3_alloc_table@, int_P_int_M_p_3@, int_P_int_M_p_3,
    pset_union(pset_deref(__anonstruct_las_1_j_p_3@, pset_singleton(p@)),
    pset_deref(__anonstruct_las_1_i_p_3@, pset_singleton(p@))))) }

let f_safety =
 fun (p : __anonstruct_las_1 pointer) (int_P_int_M_p_3 : (int_P, int32) memory ref) (__anonstruct_las_1_p_3_alloc_table : __anonstruct_las_1 alloc_table) (int_P_p_3_alloc_table : int_P alloc_table) (__anonstruct_las_1_i_p_3 : (__anonstruct_las_1, int_P pointer) memory) (__anonstruct_las_1_j_p_3 : (__anonstruct_las_1, int_P pointer) memory) ->
  { (JC_31:
    ((JC_29: le_int(offset_min(__anonstruct_las_1_p_3_alloc_table, p), (0)))
    and (JC_30:
        ge_int(offset_max(__anonstruct_las_1_p_3_alloc_table, p), (0))))) }
  (init:
  try
   begin
     (C_15:
     begin
       (let jessie_26 = (C_13:
                        (JC_40:
                        (((acc_ __anonstruct_las_1_p_3_alloc_table) __anonstruct_las_1_i_p_3) p))) in
       (let jessie_25 = (C_14:
                        (JC_39:
                        (((acc_ __anonstruct_las_1_p_3_alloc_table) __anonstruct_las_1_j_p_3) p))) in
       (JC_41:
       ((((((g_requires jessie_26) jessie_25) int_P_int_M_p_3) int_P_int_M_p_3) int_P_p_3_alloc_table) int_P_p_3_alloc_table))));
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let g_ensures_default =
 fun (a : int_P pointer) (b : int_P pointer) (int_P_int_M_a_1 : (int_P, int32) memory ref) (int_P_int_M_b_2 : (int_P, int32) memory ref) (int_P_a_1_alloc_table : int_P alloc_table) (int_P_b_2_alloc_table : int_P alloc_table) ->
  { ((true = true)
    and (JC_11:
        ((JC_7: le_int(offset_min(int_P_a_1_alloc_table, a), (0)))
        and ((JC_8: ge_int(offset_max(int_P_a_1_alloc_table, a), (0)))
            and ((JC_9: le_int(offset_min(int_P_b_2_alloc_table, b), (0)))
                and (JC_10:
                    ge_int(offset_max(int_P_b_2_alloc_table, b), (0)))))))) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_18 = (let jessie_14 = (safe_int32_of_integer_ (11)) in
                        (let jessie_17 = a in
                        (((safe_upd_ int_P_int_M_a_1) jessie_17) jessie_14))) in
       void);
      (C_4:
      begin
        (let jessie_24 = (let jessie_20 = (safe_int32_of_integer_ (15)) in
                         (let jessie_23 = b in
                         (((safe_upd_ int_P_int_M_b_2) jessie_23) jessie_20))) in
        void);
       (raise Return)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_16:
    ((JC_14:
     not_assigns(int_P_a_1_alloc_table@, int_P_int_M_a_1@, int_P_int_M_a_1,
     pset_singleton(a@)))
    and (JC_15:
        not_assigns(int_P_b_2_alloc_table@, int_P_int_M_b_2@,
        int_P_int_M_b_2, pset_singleton(b@))))) }

let g_safety =
 fun (a : int_P pointer) (b : int_P pointer) (int_P_int_M_a_1 : (int_P, int32) memory ref) (int_P_int_M_b_2 : (int_P, int32) memory ref) (int_P_a_1_alloc_table : int_P alloc_table) (int_P_b_2_alloc_table : int_P alloc_table) ->
  { (JC_11:
    ((JC_7: le_int(offset_min(int_P_a_1_alloc_table, a), (0)))
    and ((JC_8: ge_int(offset_max(int_P_a_1_alloc_table, a), (0)))
        and ((JC_9: le_int(offset_min(int_P_b_2_alloc_table, b), (0)))
            and (JC_10: ge_int(offset_max(int_P_b_2_alloc_table, b), (0))))))) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_6 = (let jessie_2 = (safe_int32_of_integer_ (11)) in
                       (let jessie_5 = a in
                       (JC_23:
                       ((((upd_ int_P_a_1_alloc_table) int_P_int_M_a_1) jessie_5) jessie_2)))) in
       void);
      (C_4:
      begin
        (let jessie_12 = (let jessie_8 = (safe_int32_of_integer_ (15)) in
                         (let jessie_11 = b in
                         (JC_24:
                         ((((upd_ int_P_b_2_alloc_table) int_P_int_M_b_2) jessie_11) jessie_8)))) in
        void);
       (raise Return)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C bts0039.jessie --quiet -f bts0039.makefile project
why --project [...] why/bts0039.why
