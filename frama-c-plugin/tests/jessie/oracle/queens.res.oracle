Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only queens.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD queens.c"
[kernel] warning: ignoring status of global predicate `in_'
[kernel] warning: ignoring status of global predicate `included'
[kernel] warning: ignoring status of global predicate `eq_prefix'
[kernel] warning: ignoring status of global predicate `eq_sol'
[kernel] warning: ignoring status of global predicate `partial_solution'
[kernel] warning: ignoring status of global predicate `solution'
[kernel] warning: ignoring status of global predicate `lt_sol'
[kernel] warning: ignoring status of global predicate `sorted'
[jessie] Starting Jessie translation
[kernel] warning: ignoring status of global predicate `sorted'
[kernel] warning: ignoring status of global predicate `lt_sol'
[kernel] warning: ignoring status of global predicate `solution'
[kernel] warning: ignoring status of global predicate `partial_solution'
[kernel] warning: ignoring status of global predicate `eq_sol'
[kernel] warning: ignoring status of global predicate `eq_prefix'
[kernel] warning: ignoring status of global predicate `in_'
[kernel] warning: ignoring status of global predicate `included'
[kernel] warning: No code for function min_elt, default assigns generated for default behavior
queens.c:297:[jessie] warning: skipping all arguments of implicit prototype store_solution
[jessie] Producing Jessie files in subdir queens.jessie
[jessie] File queens.jessie/queens.jc written.
[jessie] File queens.jessie/queens.cloc written.
# InvariantPolicy = Arguments
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

tag int_xP = {
  intP[..] int_xM: 32;
}

type int_xP = [int_xP]

tag intP = {
  integer intM: 32;
}

type intP = [intP]

tag charP = {
  integer charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

axiomatic integer_sets {

  logic type int_set
   
  predicate in_(integer x, int_set s)
   
  predicate included(int_set a, int_set b) =
  (\forall integer i;
    (in_(i, a) ==> in_(i, b)))
   
  logic integer card(int_set s_0)
   
  axiom card_nonneg :
  (\forall int_set s_1;
    (card(s_1) >= 0))
   
  logic int_set empty 
   
  axiom empty_def :
  (\forall integer i_0;
    (! in_(i_0, empty)))
   
  axiom empty_card :
  (\forall int_set s_2;
    ((card(s_2) == 0) <==> (s_2 == empty)))
   
  logic int_set diff(int_set a_0, int_set b_0)
   
  axiom diff_def :
  (\forall int_set a_1;
    (\forall int_set b_1;
      (\forall integer i_1;
        (in_(i_1, diff(a_1, b_1)) <==> (in_(i_1, a_1) && (! in_(i_1, b_1)))))))
   
  logic int_set add(integer x_0, int_set a_2)
   
  axiom add_def :
  (\forall int_set s_3;
    (\forall integer x_1;
      (\forall integer i_2;
        (in_(i_2, add(x_1, s_3)) <==> ((i_2 == x_1) || in_(i_2, s_3))))))
   
  logic int_set remove(integer x_2, int_set s_4)
   
  axiom remove_def :
  (\forall int_set s_5;
    (\forall integer x_3;
      (\forall integer i_3;
        (in_(i_3, remove(x_3, s_5)) <==> (in_(i_3, s_5) && (i_3 != x_3))))))
   
  axiom remove_card :
  (\forall int_set s_6;
    (\forall integer i_4;
      (in_(i_4, s_6) ==> (card(remove(i_4, s_6)) == (card(s_6) - 1)))))
   
  logic integer min_elt(int_set s_7)
   
  axiom min_elt_def :
  (\forall int_set s_8;
    ((card(s_8) > 0) ==>
      (in_(min_elt(s_8), s_8) &&
        (\forall integer i_5;
          (in_(i_5, s_8) ==> (min_elt(s_8) <= i_5))))))
   
  logic int_set singleton(integer x_4)
   
  axiom singleton_def :
  (\forall integer i_6;
    (\forall integer j;
      (in_(j, singleton(i_6)) <==> (j == i_6))))
   
  logic int_set succ(int_set s_9)
   
  axiom succ_def_1 :
  (\forall int_set s_10;
    (\forall integer i_7;
      (in_(i_7, s_10) ==> in_((i_7 + 1), succ(s_10)))))
   
  axiom succ_def_2 :
  (\forall int_set s_11;
    (\forall integer i_8;
      (in_(i_8, succ(s_11)) ==> ((i_8 >= 1) && in_((i_8 - 1), s_11)))))
   
  logic int_set pred(int_set s_12)
   
  axiom pred_def_1 :
  (\forall int_set s_13;
    (\forall integer i_9;
      ((i_9 >= 1) ==> (in_(i_9, s_13) ==> in_((i_9 - 1), pred(s_13))))))
   
  axiom pred_def_2 :
  (\forall int_set s_14;
    (\forall integer i_10;
      (in_(i_10, pred(s_14)) ==> in_((i_10 + 1), s_14))))
   
  logic int_set below(integer n)
   
  axiom below_def :
  (\forall integer n_0;
    (\forall integer i_11;
      (in_(i_11, below(n_0)) <==> ((0 <= i_11) && (i_11 < n_0)))))
   
  axiom below_card :
  (\forall integer n_1;
    (card(below(n_1)) == n_1))
  
}

axiomatic C_ints_as_sets {

  logic int_set iset(integer x_5)
   
  axiom iset_c_zero :
  (\forall integer x_6;
    ((iset(x_6) == empty) <==> (x_6 == 0)))
   
  axiom iset_c_remove :
  (\forall integer x_7;
    (\forall integer a_3;
      (\forall integer b_2;
        ((iset(b_2) == singleton(x_7)) ==>
          (in_(x_7, iset(a_3)) ==>
            (iset((a_3 - b_2)) == remove(x_7, iset(a_3))))))))
   
  axiom iset_c_min_elt :
  (\forall integer x_8;
    ((x_8 != 0) ==> (iset((x_8 & (- x_8))) == singleton(min_elt(iset(x_8))))))
   
  axiom iset_c_diff :
  (\forall integer a_4;
    (\forall integer b_3;
      (iset((a_4 & (~ b_3))) == diff(iset(a_4), iset(b_3)))))
   
  axiom iset_c_add :
  (\forall integer x_9;
    (\forall integer a_5;
      (\forall integer b_4;
        ((iset(b_4) == singleton(x_9)) ==>
          ((! in_(x_9, iset(a_5))) ==>
            (iset((a_5 + b_4)) == add(x_9, iset(a_5))))))))
   
  axiom iset_c_below :
  (\forall integer n_2;
    (iset((~ ((~ 0) << n_2))) == below(n_2)))
  
}

lemma iset_c_min_elt_help :
(\forall integer x_10;
  ((x_10 != 0) <==> ((x_10 & (- x_10)) != 0)))

integer t1(integer a, integer b, integer c)
  decreases (C_26 : card(iset(a)));
behavior default:
  ensures (C_25 : true);
{  
   (var integer d);
   
   (var integer e);
   
   (var integer f);
   
   (var integer tmp);
   
   {  (C_5 : (e = (C_4 : ((C_3 : (a & (C_2 : (~ b)))) & (C_1 : (~ c))))));
      (C_6 : (f = 1));
      (L : ());
      (if (a != 0) then 
      {  (C_7 : (f = 0));
         
         loop 
         behavior default:
           invariant (C_9 : included(iset(e), \at(iset(e),L)));
         variant (C_8 : card(iset(e)));
         while (true)
         {  
            {  (C_12 : (d = (C_11 : (e & (C_10 : (- e))))));
               (if (d != 0) then () else 
               (goto while_0_break));
               
               {  
                  {  
                     (assert for default: (C_13 : (\exists integer x_11;
                                                    ((iset(d) ==
                                                       singleton(x_11)) &&
                                                      in_(x_11, iset(e))))));
                     ()
                  };
                  
                  {  (C_20 : (tmp = (C_19 : t1((C_14 : (a - d)),
                                               (C_16 : ((C_15 : (b + d)) * 2)),
                                               (C_18 : ((C_17 : (c + d)) / 2))))));
                     (C_22 : (f = (C_21 : (f + tmp))))
                  }
               };
               (C_24 : (e = (C_23 : (e - d))))
            }
         };
         (while_0_break : ())
      } else ());
      
      (return f)
   }
}

axiomatic N_queens {

  logic integer N 
   
  axiom N_positive :
  (N > 0)
  
}

predicate eq_prefix{L}(intP[..] t, intP[..] u, integer i_12) =
(\forall integer k;
  (((0 <= k) && (k < i_12)) ==> ((t + k).intM == (u + k).intM)))

predicate eq_sol{L}(intP[..] t_0, intP[..] u_0) =
eq_prefix{L}(t_0, u_0, N)

int_xP[..] sol;

integer s;

intP[..] col;

integer k;

lemma dont_bother_me_I_am_a_ghost_1{L} :
(\forall integer i_13;
  ((\offset_min(sol) <= i_13) && (\offset_max(sol) >= i_13)))

lemma dont_bother_me_I_am_a_ghost_2{L} :
(\forall integer i_14;
  (\forall integer j_0;
    ((\offset_min((sol + i_14).int_xM) <= j_0) &&
      (\offset_max((sol + i_14).int_xM) >= j_0))))

lemma dont_bother_me_I_am_a_ghost_3{L} :
(\forall integer i_15;
  ((\offset_min(col) <= i_15) && (\offset_max(col) >= i_15)))

predicate partial_solution{L}(integer k_0, intP[..] s_15) =
(\forall integer i_16;
  (((0 <= i_16) && (i_16 < k_0)) ==>
    (((0 <= (s_15 + i_16).intM) && ((s_15 + i_16).intM < N)) &&
      (\forall integer j_1;
        (((0 <= j_1) && (j_1 < i_16)) ==>
          ((((s_15 + i_16).intM != (s_15 + j_1).intM) &&
             (((s_15 + i_16).intM - (s_15 + j_1).intM) != (i_16 - j_1))) &&
            (((s_15 + i_16).intM - (s_15 + j_1).intM) != (j_1 - i_16))))))))

predicate solution{L}(intP[..] s_16) =
partial_solution{L}(N, s_16)

lemma partial_solution_eq_prefix{L} :
(\forall intP[..] t_1;
  (\forall intP[..] u_1;
    (\forall integer k_1;
      (partial_solution{L}(k_1, t_1) ==>
        (eq_prefix{L}(t_1, u_1, k_1) ==> partial_solution{L}(k_1, u_1))))))

predicate lt_sol{L}(intP[..] s1, intP[..] s2) =
(\exists integer i_17;
  ((((0 <= i_17) && (i_17 < N)) && eq_prefix{L}(s1, s2, i_17)) &&
    ((s1 + i_17).intM < (s2 + i_17).intM)))

predicate sorted{L}(int_xP[..] s_17, integer a_6, integer b_5) =
(\forall integer i_18;
  (\forall integer j_2;
    (((a_6 <= i_18) && ((i_18 < j_2) && (j_2 < b_5))) ==>
      lt_sol{L}((s_17 + i_18).int_xM, (s_17 + j_2).int_xM))))

integer min_elt(integer x)
  requires (C_28 : (x != 0));
behavior default:
  assigns \nothing;
  ensures (C_27 : (\result == min_elt(iset(\at(x,Old)))));
;

unit store_solution()
  requires (C_32 : solution{Here}(col));
behavior default:
  assigns s,
  ((sol + s).int_xM + [0..(N - 1)]).intM;
  ensures (C_29 : ((C_30 : (s == (\at(s,Old) + 1))) &&
                    (C_31 : eq_sol{Here}((sol + \at(s,Old)).int_xM, col))));
;

integer t3(integer a_0, integer b_0, integer c_0)
  requires (C_87 : ((((C_90 : (0 <= k)) &&
                       (C_91 : ((k + card(iset(a_0))) == N))) &&
                      (C_92 : (0 <= s))) &&
                     ((C_94 : (\forall integer i_20;
                                (in_(i_20, iset(a_0)) <==>
                                  (((0 <= i_20) && (i_20 < N)) &&
                                    (\forall integer j_3;
                                      (((0 <= j_3) && (j_3 < k)) ==>
                                        (i_20 != (col + j_3).intM))))))) &&
                       ((C_96 : (\forall integer i_21;
                                  ((i_21 >= 0) ==>
                                    (in_(i_21, iset(b_0)) <==>
                                      (\exists integer j_4;
                                        (((0 <= j_4) && (j_4 < k)) &&
                                          ((col + j_4).intM ==
                                            ((i_21 + j_4) - k)))))))) &&
                         ((C_98 : (\forall integer i_22;
                                    ((i_22 >= 0) ==>
                                      (in_(i_22, iset(c_0)) <==>
                                        (\exists integer j_5;
                                          (((0 <= j_5) && (j_5 < k)) &&
                                            ((col + j_5).intM ==
                                              ((i_22 + k) - j_5)))))))) &&
                           (C_99 : partial_solution{Here}(k, col)))))));
  decreases (C_100 : card(iset(a_0)));
behavior default:
  assigns (col + [k..]).intM,
  s,
  k,
  ((sol + [s..]).int_xM + [..]).intM;
  ensures (C_78 : (((((C_82 : (\result == (s - \at(s,Old)))) &&
                       (C_83 : (\result >= 0))) &&
                      (C_84 : (k == \at(k,Old)))) &&
                     (C_85 : sorted{Here}(sol, \at(s,Old), s))) &&
                    (C_86 : (\forall intP[..] t_3;
                              ((solution{Here}(t_3) &&
                                 eq_prefix{Here}(col, t_3, k)) <==>
                                (\exists integer i_23;
                                  (((\at(s,Old) <= i_23) && (i_23 < s)) &&
                                    eq_sol{Here}(t_3, (sol + i_23).int_xM))))))));
{  
   (var integer d_0);
   
   (var integer e_0);
   
   (var integer f_0);
   
   (var integer tmp_0);
   
   {  (C_37 : (e_0 = (C_36 : ((C_35 : (a_0 & (C_34 : (~ b_0)))) &
                               (C_33 : (~ c_0))))));
      (C_38 : (f_0 = 1));
      (L : ());
      (if (a_0 != 0) then 
      {  (C_40 : (f_0 = 0));
         
         loop 
         behavior default:
           invariant (C_42 : (((((((C_48 : included(iset(e_0),
                                                    \at(iset(e_0),L))) &&
                                    (C_49 : (f_0 == (s - \at(s,L))))) &&
                                   (C_50 : (f_0 >= 0))) &&
                                  (C_51 : (k == \at(k,L)))) &&
                                 (C_52 : partial_solution{Here}(k, col))) &&
                                (C_53 : sorted{Here}(sol, \at(s,L), s))) &&
                               (C_54 : (\forall intP[..] t_2;
                                         ((solution{Here}(t_2) &&
                                            (\exists integer di;
                                              ((in_(di,
                                                    diff(\at(iset(e_0),L),
                                                         iset(e_0))) &&
                                                 eq_prefix{Here}(col, t_2, k)) &&
                                                ((t_2 + k).intM == di)))) <==>
                                           (\exists integer i_19;
                                             (((\at(s,L) <= i_19) &&
                                                (i_19 < s)) &&
                                               eq_sol{Here}(t_2,
                                                            (sol + i_19).int_xM))))))));
         behavior default:
           
           assigns (col + [k..]).intM,
           s,
           k,
           ((sol + [s..]).int_xM + [..]).intM;
         variant (C_41 : card(iset(e_0)));
         while (true)
         {  
            {  (C_57 : (d_0 = (C_56 : (e_0 & (C_55 : (- e_0))))));
               (if (d_0 != 0) then () else 
               (goto while_0_break));
               
               {  
                  {  
                     (assert for default: (C_58 : (\exists integer x_12;
                                                    ((iset(d_0) ==
                                                       singleton(x_12)) &&
                                                      in_(x_12, iset(a_0))))));
                     ()
                  };
                  (C_62 : ((C_61 : (C_60 : (col + k)).intM) = (C_59 : min_elt(
                                                              d_0))));
                  (C_64 : (k = (C_63 : (k + 1))));
                  
                  {  (C_71 : (tmp_0 = (C_70 : t3((C_65 : (a_0 - d_0)),
                                                 (C_67 : ((C_66 : (b_0 + d_0)) *
                                                           2)),
                                                 (C_69 : ((C_68 : (c_0 + d_0)) /
                                                           2))))));
                     (C_73 : (f_0 = (C_72 : (f_0 + tmp_0))))
                  };
                  (C_75 : (k = (C_74 : (k - 1))))
               };
               (C_77 : (e_0 = (C_76 : (e_0 - d_0))))
            }
         };
         (while_0_break : ())
      } else (C_39 : store_solution()));
      
      (return f_0)
   }
}

integer queens(integer n)
  requires (C_114 : (((C_116 : (n == N)) && (C_117 : (s == 0))) &&
                      (C_118 : (k == 0))));
behavior default:
  ensures (C_109 : (((C_111 : (\result == s)) &&
                      (C_112 : sorted{Here}(sol, 0, s))) &&
                     (C_113 : (\forall intP[..] t_4;
                                (solution{Here}(t_4) <==>
                                  (\exists integer i_24;
                                    (((0 <= i_24) && (i_24 < \result)) &&
                                      eq_sol{Here}(t_4, (sol + i_24).int_xM))))))));
{  
   (var integer tmp_1);
   
   {  
      {  
         (assert for default: (C_104 : (-1 <= (2147483647 >>> n))));
         
         (assert for default: (C_103 : (-1 >= 0)));
         
         (assert for default: (C_102 : (n < 32)));
         
         (assert for default: (C_101 : (n >= 0)));
         (C_108 : (tmp_1 = (C_107 : t3((C_106 : (~ (C_105 : (-1 << n)))), 0,
                                       0))))
      };
      
      (return tmp_1)
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs queens.jessie/queens.cloc queens.jessie/queens.jc
type charP

type intP

type int_set

type int_xP

type padding

type voidP

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic N:  -> int

exception Return_label_exc of unit

logic add: int, int_set -> int_set

logic below: int -> int_set

logic card: int_set -> int

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic col:  -> intP pointer

logic diff: int_set, int_set -> int_set

logic empty:  -> int_set

predicate eq_prefix(t:intP pointer, u:intP pointer, i_12:int,
 intP_intM_at_L:(intP, int) memory) =
 (forall k_1:int.
  ((le_int((0), k_1) and lt_int(k_1, i_12)) ->
   eq_int(select(intP_intM_at_L, shift(t, k_1)),
   select(intP_intM_at_L, shift(u, k_1)))))

predicate eq_sol(t_0:intP pointer, u_0:intP pointer,
 intP_intM_at_L:(intP, int) memory) = eq_prefix(t_0, u_0, N, intP_intM_at_L)

logic in_: int, int_set -> prop

predicate included(a:int_set, b:int_set) =
 (forall i:int. (in_(i, a) -> in_(i, b)))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

logic int_xP_tag:  -> int_xP tag_id

axiom int_xP_int : (int_of_tag(int_xP_tag) = (1))

logic int_xP_of_pointer_address: unit pointer -> int_xP pointer

axiom int_xP_of_pointer_address_of_pointer_addr :
 (forall p:int_xP pointer.
  (p = int_xP_of_pointer_address(pointer_address(p))))

axiom int_xP_parenttag_bottom : parenttag(int_xP_tag, bottom_tag)

axiom int_xP_tags :
 (forall x:int_xP pointer.
  (forall int_xP_tag_table:int_xP tag_table.
   instanceof(int_xP_tag_table, x, int_xP_tag)))

logic iset: int -> int_set

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_int_xP(p:int_xP pointer, a:int,
 int_xP_alloc_table:int_xP alloc_table) =
 (offset_min(int_xP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

predicate lt_sol(s1_1:intP pointer, s2_1:intP pointer,
 intP_intM_at_L:(intP, int) memory) =
 (exists i_17:int.
  (le_int((0), i_17)
  and (lt_int(i_17, N)
      and (eq_prefix(s1_1, s2_1, i_17, intP_intM_at_L)
          and lt_int(select(intP_intM_at_L, shift(s1_1, i_17)),
              select(intP_intM_at_L, shift(s2_1, i_17)))))))

logic min_elt: int_set -> int

predicate partial_solution(k_0:int, s_15:intP pointer,
 intP_intM_at_L:(intP, int) memory) =
 (forall i_16:int.
  ((le_int((0), i_16) and lt_int(i_16, k_0)) ->
   (le_int((0), select(intP_intM_at_L, shift(s_15, i_16)))
   and (lt_int(select(intP_intM_at_L, shift(s_15, i_16)), N)
       and (forall j_1:int.
            ((le_int((0), j_1) and lt_int(j_1, i_16)) ->
             (neq_int(select(intP_intM_at_L, shift(s_15, i_16)),
              select(intP_intM_at_L, shift(s_15, j_1)))
             and (neq_int(sub_int(select(intP_intM_at_L, shift(s_15, i_16)),
                          select(intP_intM_at_L, shift(s_15, j_1))),
                  sub_int(i_16, j_1))
                 and neq_int(sub_int(select(intP_intM_at_L,
                                     shift(s_15, i_16)),
                             select(intP_intM_at_L, shift(s_15, j_1))),
                     sub_int(j_1, i_16))))))))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

axiom pointer_addr_of_int_xP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_xP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

logic pred: int_set -> int_set

logic remove: int, int_set -> int_set

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_int_xP(p:int_xP pointer, b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 (offset_max(int_xP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

logic singleton: int -> int_set

logic sol:  -> int_xP pointer

predicate solution(s_16:intP pointer, intP_intM_at_L:(intP, int) memory) =
 partial_solution(N, s_16, intP_intM_at_L)

predicate sorted(s_17:int_xP pointer, a_6:int, b_5:int,
 intP_intM_at_L:(intP, int) memory,
 int_xP_int_xM_at_L:(int_xP, intP pointer) memory) =
 (forall i_18:int.
  (forall j_2:int.
   ((le_int(a_6, i_18) and (lt_int(i_18, j_2) and lt_int(j_2, b_5))) ->
    lt_sol(select(int_xP_int_xM_at_L, shift(s_17, i_18)),
    select(int_xP_int_xM_at_L, shift(s_17, j_2)), intP_intM_at_L))))

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_int_xP(p:int_xP pointer, a:int, b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) = a)
 and (offset_max(int_xP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_int_xP(p:int_xP pointer, a:int, b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) = a)
 and (offset_max(int_xP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic succ: int_set -> int_set

predicate valid_bitvector_struct_charP(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_intP(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_xP(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_voidP(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_int_xP(p:int_xP pointer, a:int, b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) <= a)
 and (offset_max(int_xP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_int_xP(p:int_xP pointer, a:int, b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) <= a)
 and (offset_max(int_xP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

axiom card_nonneg : (forall s_1_0:int_set. ge_int(card(s_1_0), (0)))

axiom empty_def : (forall i_0:int. (not in_(i_0, empty)))

axiom empty_card :
 (forall s_2:int_set. (eq_int(card(s_2), (0)) <-> (s_2 = empty)))

axiom diff_def :
 (forall a_1_0:int_set.
  (forall b_1_0:int_set.
   (forall i_1:int.
    (in_(i_1, diff(a_1_0, b_1_0))
    <-> (in_(i_1, a_1_0) and (not in_(i_1, b_1_0)))))))

axiom add_def :
 (forall s_3:int_set.
  (forall x_1_0:int.
   (forall i_2:int.
    (in_(i_2, add(x_1_0, s_3)) <-> (eq_int(i_2, x_1_0) or in_(i_2, s_3))))))

axiom remove_def :
 (forall s_5:int_set.
  (forall x_3:int.
   (forall i_3:int.
    (in_(i_3, remove(x_3, s_5)) <-> (in_(i_3, s_5) and neq_int(i_3, x_3))))))

axiom remove_card :
 (forall s_6:int_set.
  (forall i_4:int.
   (in_(i_4, s_6) -> eq_int(card(remove(i_4, s_6)), sub_int(card(s_6), (1))))))

axiom min_elt_def :
 (forall s_8:int_set.
  (gt_int(card(s_8), (0)) ->
   (in_(min_elt(s_8), s_8)
   and (forall i_5:int. (in_(i_5, s_8) -> le_int(min_elt(s_8), i_5))))))

axiom singleton_def :
 (forall i_6:int.
  (forall j:int. (in_(j, singleton(i_6)) <-> eq_int(j, i_6))))

axiom succ_def_1 :
 (forall s_10:int_set.
  (forall i_7:int. (in_(i_7, s_10) -> in_(add_int(i_7, (1)), succ(s_10)))))

axiom succ_def_2 :
 (forall s_11:int_set.
  (forall i_8:int.
   (in_(i_8, succ(s_11)) ->
    (ge_int(i_8, (1)) and in_(sub_int(i_8, (1)), s_11)))))

axiom pred_def_1 :
 (forall s_13:int_set.
  (forall i_9:int.
   (ge_int(i_9, (1)) ->
    (in_(i_9, s_13) -> in_(sub_int(i_9, (1)), pred(s_13))))))

axiom pred_def_2 :
 (forall s_14:int_set.
  (forall i_10:int. (in_(i_10, pred(s_14)) -> in_(add_int(i_10, (1)), s_14))))

axiom below_def :
 (forall n_0_0:int.
  (forall i_11:int.
   (in_(i_11, below(n_0_0)) <-> (le_int((0), i_11) and lt_int(i_11, n_0_0)))))

axiom below_card : (forall n_1:int. eq_int(card(below(n_1)), n_1))

axiom iset_c_zero :
 (forall x_6:int. ((iset(x_6) = empty) <-> eq_int(x_6, (0))))

axiom iset_c_remove :
 (forall x_7:int.
  (forall a_3:int.
   (forall b_2:int.
    ((iset(b_2) = singleton(x_7)) ->
     (in_(x_7, iset(a_3)) ->
      (iset(sub_int(a_3, b_2)) = remove(x_7, iset(a_3))))))))

axiom iset_c_min_elt :
 (forall x_8:int.
  (neq_int(x_8, (0)) ->
   (iset(bw_and(x_8, neg_int(x_8))) = singleton(min_elt(iset(x_8))))))

axiom iset_c_diff :
 (forall a_4:int.
  (forall b_3:int.
   (iset(bw_and(a_4, bw_compl(b_3))) = diff(iset(a_4), iset(b_3)))))

axiom iset_c_add :
 (forall x_9:int.
  (forall a_5:int.
   (forall b_4:int.
    ((iset(b_4) = singleton(x_9)) ->
     ((not in_(x_9, iset(a_5))) ->
      (iset(add_int(a_5, b_4)) = add(x_9, iset(a_5))))))))

axiom iset_c_below :
 (forall n_2:int. (iset(bw_compl(lsl(bw_compl((0)), n_2))) = below(n_2)))

lemma iset_c_min_elt_help :
 (forall x_10:int.
  (neq_int(x_10, (0)) <-> neq_int(bw_and(x_10, neg_int(x_10)), (0))))

axiom N_positive : gt_int(N, (0))

lemma dont_bother_me_I_am_a_ghost_1 :
 (forall int_xP_alloc_table_at_L:int_xP alloc_table.
  (forall i_13:int.
   (le_int(offset_min(int_xP_alloc_table_at_L, sol), i_13)
   and ge_int(offset_max(int_xP_alloc_table_at_L, sol), i_13))))

lemma dont_bother_me_I_am_a_ghost_2 :
 (forall intP_alloc_table_at_L:intP alloc_table.
  (forall int_xP_int_xM_at_L:(int_xP, intP pointer) memory.
   (forall i_14:int.
    (forall j_0:int.
     (le_int(offset_min(intP_alloc_table_at_L,
             select(int_xP_int_xM_at_L, shift(sol, i_14))),
      j_0)
     and ge_int(offset_max(intP_alloc_table_at_L,
                select(int_xP_int_xM_at_L, shift(sol, i_14))),
         j_0))))))

lemma dont_bother_me_I_am_a_ghost_3 :
 (forall intP_alloc_table_at_L:intP alloc_table.
  (forall i_15:int.
   (le_int(offset_min(intP_alloc_table_at_L, col), i_15)
   and ge_int(offset_max(intP_alloc_table_at_L, col), i_15))))

lemma partial_solution_eq_prefix :
 (forall intP_intM_at_L:(intP, int) memory.
  (forall t_1:intP pointer.
   (forall u_1:intP pointer.
    (forall k_1_0:int.
     (partial_solution(k_1_0, t_1, intP_intM_at_L) ->
      (eq_prefix(t_1, u_1, k_1_0, intP_intM_at_L) ->
       partial_solution(k_1_0, u_1, intP_intM_at_L)))))))

parameter alloc_bitvector_struct_charP :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_charP(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_charP_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_charP(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_intP :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_intP(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_intP_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_intP(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_xP :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_xP(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_xP_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_xP(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_voidP :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_voidP(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_voidP_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_voidP(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter int_xP_alloc_table : int_xP alloc_table ref

parameter int_xP_tag_table : int_xP tag_table ref

parameter alloc_struct_int_xP :
 n:int ->
  int_xP_alloc_table:int_xP alloc_table ref ->
   int_xP_tag_table:int_xP tag_table ref ->
    { } int_xP pointer writes int_xP_alloc_table,int_xP_tag_table
    { (strict_valid_struct_int_xP(result, (0), sub_int(n, (1)),
       int_xP_alloc_table)
      and (alloc_extends(int_xP_alloc_table@, int_xP_alloc_table)
          and (alloc_fresh(int_xP_alloc_table@, result, n)
              and instanceof(int_xP_tag_table, result, int_xP_tag)))) }

parameter alloc_struct_int_xP_requires :
 n:int ->
  int_xP_alloc_table:int_xP alloc_table ref ->
   int_xP_tag_table:int_xP tag_table ref ->
    { ge_int(n, (0))} int_xP pointer
    writes int_xP_alloc_table,int_xP_tag_table
    { (strict_valid_struct_int_xP(result, (0), sub_int(n, (1)),
       int_xP_alloc_table)
      and (alloc_extends(int_xP_alloc_table@, int_xP_alloc_table)
          and (alloc_fresh(int_xP_alloc_table@, result, n)
              and instanceof(int_xP_tag_table, result, int_xP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter charP_charM : (charP, int) memory ref

parameter intP_intM : (intP, int) memory ref

parameter int_xP_int_xM : (int_xP, intP pointer) memory ref

parameter k : int ref

parameter min_elt_0 :
 x_1:int -> { } int { (JC_<somenum>: eq_int(result, min_elt(iset(x_1@)))) }

parameter min_elt_0_requires :
 x_1:int ->
  { (JC_<somenum>: neq_int(x_1, (0)))} int
  { (JC_<somenum>: eq_int(result, min_elt(iset(x_1@)))) }

parameter s_0 : int ref

parameter queens :
 n_0:int ->
  { } int reads intP_alloc_table,intP_intM,int_xP_int_xM,k,s_0
  writes intP_intM,k,s_0
  { (JC_<somenum>:
    ((JC_<somenum>: eq_int(result, s_0))
    and ((JC_<somenum>: sorted(sol, (0), s_0, intP_intM, int_xP_int_xM))
        and (JC_<somenum>:
            (forall t_4:intP pointer.
             (solution(t_4, intP_intM)
             <-> (exists i_24:int.
                  (le_int((0), i_24)
                  and (lt_int(i_24, result)
                      and eq_sol(t_4,
                          select(int_xP_int_xM, shift(sol, i_24)), intP_intM)))))))))) }

parameter queens_requires :
 n_0:int ->
  { (JC_<somenum>:
    ((JC_<somenum>: eq_int(n_0, N))
    and ((JC_<somenum>: eq_int(s_0, (0))) and (JC_<somenum>: eq_int(k, (0))))))}
  int reads intP_alloc_table,intP_intM,int_xP_int_xM,k,s_0
  writes intP_intM,k,s_0
  { (JC_<somenum>:
    ((JC_<somenum>: eq_int(result, s_0))
    and ((JC_<somenum>: sorted(sol, (0), s_0, intP_intM, int_xP_int_xM))
        and (JC_<somenum>:
            (forall t_4:intP pointer.
             (solution(t_4, intP_intM)
             <-> (exists i_24:int.
                  (le_int((0), i_24)
                  and (lt_int(i_24, result)
                      and eq_sol(t_4,
                          select(int_xP_int_xM, shift(sol, i_24)), intP_intM)))))))))) }

parameter store_solution :
 tt:unit ->
  { } unit reads intP_alloc_table,intP_intM,int_xP_int_xM,s_0
  writes intP_intM,s_0
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>: eq_int(s_0, add_int(s_0@, (1))))
     and (JC_<somenum>:
         eq_sol(select(int_xP_int_xM, shift(sol, s_0@)), col, intP_intM))))
    and (JC_<somenum>:
        not_assigns(intP_alloc_table@, intP_intM@, intP_intM,
        pset_range(pset_deref(int_xP_int_xM@,
                   pset_range(pset_singleton(sol@), s_0@, s_0@)),
        (0), sub_int(N, (1))))))) }

parameter store_solution_requires :
 tt:unit ->
  { (JC_<somenum>: solution(col, intP_intM))} unit
  reads intP_alloc_table,intP_intM,int_xP_int_xM,s_0 writes intP_intM,s_0
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>: eq_int(s_0, add_int(s_0@, (1))))
     and (JC_<somenum>:
         eq_sol(select(int_xP_int_xM, shift(sol, s_0@)), col, intP_intM))))
    and (JC_<somenum>:
        not_assigns(intP_alloc_table@, intP_intM@, intP_intM,
        pset_range(pset_deref(int_xP_int_xM@,
                   pset_range(pset_singleton(sol@), s_0@, s_0@)),
        (0), sub_int(N, (1))))))) }

parameter t1 : a_1:int -> b_1:int -> c:int -> { } int { true }

parameter t1_requires : a_1:int -> b_1:int -> c:int -> { } int { true }

parameter t3 :
 a_0_0:int ->
  b_0_0:int ->
   c_0:int ->
    { } int reads intP_alloc_table,intP_intM,int_xP_int_xM,k,s_0
    writes intP_intM,k,s_0
    { (JC_<somenum>:
      ((JC_<somenum>:
       ((JC_<somenum>: eq_int(result, sub_int(s_0, s_0@)))
       and ((JC_<somenum>: ge_int(result, (0)))
           and ((JC_<somenum>: eq_int(k, k@))
               and ((JC_<somenum>: sorted(sol, s_0@, s_0, intP_intM, int_xP_int_xM))
                   and (JC_<somenum>:
                       (forall t_3:intP pointer.
                        ((solution(t_3, intP_intM)
                         and eq_prefix(col, t_3, k, intP_intM))
                        <-> (exists i_23:int.
                             (le_int(s_0@, i_23)
                             and (lt_int(i_23, s_0)
                                 and eq_sol(t_3,
                                     select(int_xP_int_xM, shift(sol, i_23)),
                                     intP_intM))))))))))))
      and (JC_<somenum>:
          not_assigns(intP_alloc_table@, intP_intM@, intP_intM,
          pset_union(pset_all(pset_deref(int_xP_int_xM@,
                              pset_range_right(pset_singleton(sol@), s_0@))),
          pset_range_right(pset_singleton(col@), k@)))))) }

parameter t3_requires :
 a_0_0:int ->
  b_0_0:int ->
   c_0:int ->
    { (JC_<somenum>:
      ((JC_<somenum>: le_int((0), k))
      and ((JC_<somenum>: eq_int(add_int(k, card(iset(a_0_0))), N))
          and ((JC_<somenum>: le_int((0), s_0))
              and ((JC_<somenum>:
                   (forall i_20:int.
                    (in_(i_20, iset(a_0_0))
                    <-> (le_int((0), i_20)
                        and (lt_int(i_20, N)
                            and (forall j_3:int.
                                 ((le_int((0), j_3) and lt_int(j_3, k)) ->
                                  neq_int(i_20,
                                  select(intP_intM, shift(col, j_3))))))))))
                  and ((JC_<somenum>:
                       (forall i_21:int.
                        (ge_int(i_21, (0)) ->
                         (in_(i_21, iset(b_0_0))
                         <-> (exists j_4:int.
                              (le_int((0), j_4)
                              and (lt_int(j_4, k)
                                  and eq_int(select(intP_intM,
                                             shift(col, j_4)),
                                      sub_int(add_int(i_21, j_4), k)))))))))
                      and ((JC_<somenum>:
                           (forall i_22:int.
                            (ge_int(i_22, (0)) ->
                             (in_(i_22, iset(c_0))
                             <-> (exists j_5:int.
                                  (le_int((0), j_5)
                                  and (lt_int(j_5, k)
                                      and eq_int(select(intP_intM,
                                                 shift(col, j_5)),
                                          sub_int(add_int(i_22, k), j_5)))))))))
                          and (JC_<somenum>: partial_solution(k, col, intP_intM)))))))))}
    int reads intP_alloc_table,intP_intM,int_xP_int_xM,k,s_0
    writes intP_intM,k,s_0
    { (JC_<somenum>:
      ((JC_<somenum>:
       ((JC_<somenum>: eq_int(result, sub_int(s_0, s_0@)))
       and ((JC_<somenum>: ge_int(result, (0)))
           and ((JC_<somenum>: eq_int(k, k@))
               and ((JC_<somenum>: sorted(sol, s_0@, s_0, intP_intM, int_xP_int_xM))
                   and (JC_<somenum>:
                       (forall t_3:intP pointer.
                        ((solution(t_3, intP_intM)
                         and eq_prefix(col, t_3, k, intP_intM))
                        <-> (exists i_23:int.
                             (le_int(s_0@, i_23)
                             and (lt_int(i_23, s_0)
                                 and eq_sol(t_3,
                                     select(int_xP_int_xM, shift(sol, i_23)),
                                     intP_intM))))))))))))
      and (JC_<somenum>:
          not_assigns(intP_alloc_table@, intP_intM@, intP_intM,
          pset_union(pset_all(pset_deref(int_xP_int_xM@,
                              pset_range_right(pset_singleton(sol@), s_0@))),
          pset_range_right(pset_singleton(col@), k@)))))) }

let queens_ensures_default =
 fun (n_0 : int) ->
  { (JC_<somenum>:
    ((JC_<somenum>: eq_int(n_0, N))
    and ((JC_<somenum>: eq_int(s_0, (0))) and (JC_<somenum>: eq_int(k, (0)))))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let tmp_1 = ref (any_int void) in
     begin
       (let jessie_<somenum> =
       (C_108:
       begin
         (assert { (JC_<somenum>: le_int(neg_int((1)), asr((2147483647), n_0))) };
         void); (assert { (JC_<somenum>: ge_int(neg_int((1)), (0))) }; void);
        (assert { (JC_<somenum>: lt_int(n_0, (32))) }; void);
        (assert { (JC_<somenum>: ge_int(n_0, (0))) }; void);
        (tmp_1 := (C_107:
                  (let jessie_<somenum> =
                  (C_106: (bw_compl (C_105: ((lsl (neg_int (1))) n_0)))) in
                  (let jessie_<somenum> = (0) in
                  (let jessie_<somenum> = (0) in
                  (JC_<somenum>: (((t3 jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))));
        !tmp_1 end) in void); (return := !tmp_1); (raise Return) end); 
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: eq_int(result, s_0))
    and ((JC_<somenum>: sorted(sol, (0), s_0, intP_intM, int_xP_int_xM))
        and (JC_<somenum>:
            (forall t_4:intP pointer.
             (solution(t_4, intP_intM)
             <-> (exists i_24:int.
                  (le_int((0), i_24)
                  and (lt_int(i_24, result)
                      and eq_sol(t_4,
                          select(int_xP_int_xM, shift(sol, i_24)), intP_intM)))))))))) }

let queens_safety =
 fun (n_0 : int) ->
  { (JC_<somenum>:
    ((JC_<somenum>: eq_int(n_0, N))
    and ((JC_<somenum>: eq_int(s_0, (0))) and (JC_<somenum>: eq_int(k, (0)))))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let tmp_1 = ref (any_int void) in
     begin
       (let jessie_<somenum> =
       (C_108:
       begin
         [ { } unit
           { (JC_<somenum>: le_int(neg_int((1)), asr((2147483647), n_0))) } ];
        [ { } unit { (JC_<somenum>: ge_int(neg_int((1)), (0))) } ];
        [ { } unit { (JC_<somenum>: lt_int(n_0, (32))) } ];
        [ { } unit { (JC_<somenum>: ge_int(n_0, (0))) } ];
        (tmp_1 := (C_107:
                  (let jessie_<somenum> =
                  (C_106: (bw_compl (C_105: ((lsl (neg_int (1))) n_0)))) in
                  (let jessie_<somenum> = (0) in
                  (let jessie_<somenum> = (0) in
                  (JC_<somenum>:
                  (((t3_requires jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))));
        !tmp_1 end) in void); (return := !tmp_1); (raise Return) end); 
    absurd  end with Return -> !return end)) { true }

let t1_ensures_default =
 fun (a_1 : int) (b_1 : int) (c : int) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let d = ref (any_int void) in
     (let e = ref (any_int void) in
     (let f = ref (any_int void) in
     (let tmp = ref (any_int void) in
     (C_5:
     (C_6:
     (L:
     begin
       (let jessie_<somenum> =
       (e := (C_4:
             ((bw_and (C_3: ((bw_and a_1) (C_2: (bw_compl b_1))))) (C_1:
                                                                   (bw_compl c))))) in
       void); (let jessie_<somenum> = (f := (1)) in void); void;
      (if ((neq_int_ a_1) (0))
      then
       try
        (let jessie_<somenum> =
        (C_7:
        begin
          (let jessie_<somenum> = (f := (0)) in void);
         (loop_2:
         while true do
         { invariant (JC_<somenum>: included(iset(e), iset(e@L)))  }
          begin
            [ { } unit { true } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_12:
              (C_24:
              begin
                (let jessie_<somenum> =
                (d := (C_11: ((bw_and !e) (C_10: (neg_int !e))))) in void);
               (if ((neq_int_ !d) (0)) then void
               else
                (let jessie_<somenum> = (raise (Goto_while_0_break_exc void)) in
                void));
               (let jessie_<somenum> =
               (C_20:
               (C_22:
               begin
                 (assert
                 { (JC_<somenum>:
                   (exists x_11:int.
                    ((iset(d) = singleton(x_11)) and in_(x_11, iset(e))))) };
                 void); void;
                (let jessie_<somenum> =
                (tmp := (C_19:
                        (let jessie_<somenum> = (C_14: ((sub_int a_1) !d)) in
                        (let jessie_<somenum> =
                        (C_16: ((mul_int (C_15: ((add_int b_1) !d))) (2))) in
                        (let jessie_<somenum> =
                        (C_18:
                        (JC_<somenum>:
                        ((computer_div (C_17: ((add_int c) !d))) (2)))) in
                        (JC_<somenum>: (((t1 jessie_<somenum>) jessie_<somenum>) jessie_<somenum>))))))) in
                void); (f := (C_21: ((add_int !f) !tmp))); !f end)) in void);
               (e := (C_23: ((sub_int !e) !d))); !e end)) in void);
             (raise (Loop_continue_exc void)) end in void) with
            Loop_continue_exc jessie_<somenum> -> void end end done);
         (raise (Goto_while_0_break_exc void)) end) in void) with
        Goto_while_0_break_exc jessie_<somenum> -> (while_0_break: void) end
      else void); (return := !f); (raise Return) end))))))); absurd  end with
   Return -> !return end)) { (JC_<somenum>: true) }

let t1_safety =
 fun (a_1 : int) (b_1 : int) (c : int) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let d = ref (any_int void) in
     (let e = ref (any_int void) in
     (let f = ref (any_int void) in
     (let tmp = ref (any_int void) in
     (C_5:
     (C_6:
     (L:
     begin
       (let jessie_<somenum> =
       (e := (C_4:
             ((bw_and (C_3: ((bw_and a_1) (C_2: (bw_compl b_1))))) (C_1:
                                                                   (bw_compl c))))) in
       void); (let jessie_<somenum> = (f := (1)) in void); void;
      (if ((neq_int_ a_1) (0))
      then
       try
        (let jessie_<somenum> =
        (C_7:
        begin
          (let jessie_<somenum> = (f := (0)) in void);
         (loop_1:
         while true do
         { invariant (JC_<somenum>: true) variant (JC_<somenum> : card(iset(e))) }
          begin
            [ { } unit reads e { (JC_<somenum>: included(iset(e), iset(e@L))) } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_12:
              (C_24:
              begin
                (let jessie_<somenum> =
                (d := (C_11: ((bw_and !e) (C_10: (neg_int !e))))) in void);
               (if ((neq_int_ !d) (0)) then void
               else
                (let jessie_<somenum> = (raise (Goto_while_0_break_exc void)) in
                void));
               (let jessie_<somenum> =
               (C_20:
               (C_22:
               begin
                 [ { } unit reads d,e
                   { (JC_<somenum>:
                     (exists x_11:int.
                      ((iset(d) = singleton(x_11)) and in_(x_11, iset(e))))) } ];
                void;
                (let jessie_<somenum> =
                (tmp := (C_19:
                        (let jessie_<somenum> = (C_14: ((sub_int a_1) !d)) in
                        (let jessie_<somenum> =
                        (C_16: ((mul_int (C_15: ((add_int b_1) !d))) (2))) in
                        (let jessie_<somenum> =
                        (C_18:
                        (JC_<somenum>:
                        ((computer_div_ (C_17: ((add_int c) !d))) (2)))) in
                        (JC_<somenum>:
                        (check
                        { zwf_zero((JC_<somenum> : card(iset(jessie_<somenum>))),
                          (JC_<somenum> : card(iset(a_1)))) };
                        (JC_<somenum>:
                        (((t1_requires jessie_<somenum>) jessie_<somenum>) jessie_<somenum>))))))))) in
                void); (f := (C_21: ((add_int !f) !tmp))); !f end)) in void);
               (e := (C_23: ((sub_int !e) !d))); !e end)) in void);
             (raise (Loop_continue_exc void)) end in void) with
            Loop_continue_exc jessie_<somenum> -> void end end done);
         (raise (Goto_while_0_break_exc void)) end) in void) with
        Goto_while_0_break_exc jessie_<somenum> -> (while_0_break: void) end
      else void); (return := !f); (raise Return) end))))))); absurd  end with
   Return -> !return end)) { true }

let t3_ensures_default =
 fun (a_0_0 : int) (b_0_0 : int) (c_0 : int) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int((0), k))
    and ((JC_<somenum>: eq_int(add_int(k, card(iset(a_0_0))), N))
        and ((JC_<somenum>: le_int((0), s_0))
            and ((JC_<somenum>:
                 (forall i_20:int.
                  (in_(i_20, iset(a_0_0))
                  <-> (le_int((0), i_20)
                      and (lt_int(i_20, N)
                          and (forall j_3:int.
                               ((le_int((0), j_3) and lt_int(j_3, k)) ->
                                neq_int(i_20,
                                select(intP_intM, shift(col, j_3))))))))))
                and ((JC_<somenum>:
                     (forall i_21:int.
                      (ge_int(i_21, (0)) ->
                       (in_(i_21, iset(b_0_0))
                       <-> (exists j_4:int.
                            (le_int((0), j_4)
                            and (lt_int(j_4, k)
                                and eq_int(select(intP_intM, shift(col, j_4)),
                                    sub_int(add_int(i_21, j_4), k)))))))))
                    and ((JC_<somenum>:
                         (forall i_22:int.
                          (ge_int(i_22, (0)) ->
                           (in_(i_22, iset(c_0))
                           <-> (exists j_5:int.
                                (le_int((0), j_5)
                                and (lt_int(j_5, k)
                                    and eq_int(select(intP_intM,
                                               shift(col, j_5)),
                                        sub_int(add_int(i_22, k), j_5)))))))))
                        and (JC_<somenum>: partial_solution(k, col, intP_intM))))))))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let d_0 = ref (any_int void) in
     (let e_0 = ref (any_int void) in
     (let f_0 = ref (any_int void) in
     (let tmp_0 = ref (any_int void) in
     (C_37:
     (C_38:
     (L:
     begin
       (let jessie_<somenum> =
       (e_0 := (C_36:
               ((bw_and (C_35: ((bw_and a_0_0) (C_34: (bw_compl b_0_0))))) 
                (C_33: (bw_compl c_0))))) in void);
      (let jessie_<somenum> = (f_0 := (1)) in void); void;
      (if ((neq_int_ a_0_0) (0))
      then
       try
        (let jessie_<somenum> =
        (C_40:
        begin
          (let jessie_<somenum> = (f_0 := (0)) in void);
         (loop_4:
         while true do
         { invariant
             ((JC_<somenum>:
              ((JC_<somenum>: included(iset(e_0), iset(e_0@L)))
              and ((JC_<somenum>: eq_int(f_0, sub_int(s_0, s_0@L)))
                  and ((JC_<somenum>: ge_int(f_0, (0)))
                      and ((JC_<somenum>: eq_int(k, k@L))
                          and ((JC_<somenum>: partial_solution(k, col, intP_intM))
                              and ((JC_<somenum>:
                                   sorted(sol, s_0@L, s_0, intP_intM,
                                   int_xP_int_xM))
                                  and (JC_<somenum>:
                                      (forall t_2:intP pointer.
                                       ((solution(t_2, intP_intM)
                                        and (exists di:int.
                                             (in_(di,
                                              diff(iset(e_0@L), iset(e_0)))
                                             and (eq_prefix(col, t_2, k,
                                                  intP_intM)
                                                 and eq_int(select(intP_intM,
                                                            shift(t_2, k)),
                                                     di)))))
                                       <-> (exists i_19:int.
                                            (le_int(s_0@L, i_19)
                                            and (lt_int(i_19, s_0)
                                                and eq_sol(t_2,
                                                    select(int_xP_int_xM,
                                                    shift(sol, i_19)),
                                                    intP_intM))))))))))))))
             and ((JC_<somenum>:
                  not_assigns(intP_alloc_table@loop_4, intP_intM@loop_4,
                  intP_intM,
                  pset_union(pset_all(pset_deref(int_xP_int_xM,
                                      pset_range_right(pset_singleton(sol),
                                      s_0))),
                  pset_range_right(pset_singleton(col), k))))
                 and (JC_<somenum>:
                     not_assigns(intP_alloc_table@init, intP_intM@init,
                     intP_intM,
                     pset_union(pset_all(pset_deref(int_xP_int_xM@init,
                                         pset_range_right(pset_singleton(sol@init),
                                         s_0@init))),
                     pset_range_right(pset_singleton(col@init), k@init))))))
            }
          begin
            [ { } unit { true } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_57:
              (C_77:
              begin
                (let jessie_<somenum> =
                (d_0 := (C_56: ((bw_and !e_0) (C_55: (neg_int !e_0))))) in
                void);
               (if ((neq_int_ !d_0) (0)) then void
               else
                (let jessie_<somenum> = (raise (Goto_while_0_break_exc void)) in
                void));
               (let jessie_<somenum> =
               (C_62:
               (C_64:
               (C_75:
               begin
                 (assert
                 { (JC_<somenum>:
                   (exists x_12:int.
                    ((iset(d_0) = singleton(x_12))
                    and in_(x_12, iset(a_0_0))))) }; void); void;
                (let jessie_<somenum> =
                (let jessie_<somenum> =
                (C_59:
                (let jessie_<somenum> = !d_0 in (JC_<somenum>: (min_elt_0 jessie_<somenum>)))) in
                (let jessie_<somenum> = col in
                (let jessie_<somenum> = !k in
                (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
                (((safe_upd_ intP_intM) jessie_<somenum>) jessie_<somenum>))))) in void);
                (let jessie_<somenum> = (k := (C_63: ((add_int !k) (1)))) in void);
                (let jessie_<somenum> =
                (C_71:
                (C_73:
                begin
                  (let jessie_<somenum> =
                  (tmp_0 := (C_70:
                            (let jessie_<somenum> =
                            (C_65: ((sub_int a_0_0) !d_0)) in
                            (let jessie_<somenum> =
                            (C_67:
                            ((mul_int (C_66: ((add_int b_0_0) !d_0))) (2))) in
                            (let jessie_<somenum> =
                            (C_69:
                            (JC_<somenum>:
                            ((computer_div (C_68: ((add_int c_0) !d_0))) (2)))) in
                            (JC_<somenum>:
                            (((t3 jessie_<somenum>) jessie_<somenum>) jessie_<somenum>))))))) in
                  void); (f_0 := (C_72: ((add_int !f_0) !tmp_0))); !f_0 end)) in
                void); (k := (C_74: ((sub_int !k) (1)))); !k end))) in void);
               (e_0 := (C_76: ((sub_int !e_0) !d_0))); !e_0 end)) in void);
             (raise (Loop_continue_exc void)) end in void) with
            Loop_continue_exc jessie_<somenum> -> void end end done);
         (raise (Goto_while_0_break_exc void)) end) in void) with
        Goto_while_0_break_exc jessie_<somenum> -> (while_0_break: void) end
      else (C_39: (JC_<somenum>: (store_solution void)))); (return := !f_0);
      (raise Return) end))))))); absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>: eq_int(result, sub_int(s_0, s_0@)))
     and ((JC_<somenum>: ge_int(result, (0)))
         and ((JC_<somenum>: eq_int(k, k@))
             and ((JC_<somenum>: sorted(sol, s_0@, s_0, intP_intM, int_xP_int_xM))
                 and (JC_<somenum>:
                     (forall t_3:intP pointer.
                      ((solution(t_3, intP_intM)
                       and eq_prefix(col, t_3, k, intP_intM))
                      <-> (exists i_23:int.
                           (le_int(s_0@, i_23)
                           and (lt_int(i_23, s_0)
                               and eq_sol(t_3,
                                   select(int_xP_int_xM, shift(sol, i_23)),
                                   intP_intM))))))))))))
    and (JC_<somenum>:
        not_assigns(intP_alloc_table@, intP_intM@, intP_intM,
        pset_union(pset_all(pset_deref(int_xP_int_xM@,
                            pset_range_right(pset_singleton(sol@), s_0@))),
        pset_range_right(pset_singleton(col@), k@)))))) }

let t3_safety =
 fun (a_0_0 : int) (b_0_0 : int) (c_0 : int) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int((0), k))
    and ((JC_<somenum>: eq_int(add_int(k, card(iset(a_0_0))), N))
        and ((JC_<somenum>: le_int((0), s_0))
            and ((JC_<somenum>:
                 (forall i_20:int.
                  (in_(i_20, iset(a_0_0))
                  <-> (le_int((0), i_20)
                      and (lt_int(i_20, N)
                          and (forall j_3:int.
                               ((le_int((0), j_3) and lt_int(j_3, k)) ->
                                neq_int(i_20,
                                select(intP_intM, shift(col, j_3))))))))))
                and ((JC_<somenum>:
                     (forall i_21:int.
                      (ge_int(i_21, (0)) ->
                       (in_(i_21, iset(b_0_0))
                       <-> (exists j_4:int.
                            (le_int((0), j_4)
                            and (lt_int(j_4, k)
                                and eq_int(select(intP_intM, shift(col, j_4)),
                                    sub_int(add_int(i_21, j_4), k)))))))))
                    and ((JC_<somenum>:
                         (forall i_22:int.
                          (ge_int(i_22, (0)) ->
                           (in_(i_22, iset(c_0))
                           <-> (exists j_5:int.
                                (le_int((0), j_5)
                                and (lt_int(j_5, k)
                                    and eq_int(select(intP_intM,
                                               shift(col, j_5)),
                                        sub_int(add_int(i_22, k), j_5)))))))))
                        and (JC_<somenum>: partial_solution(k, col, intP_intM))))))))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let d_0 = ref (any_int void) in
     (let e_0 = ref (any_int void) in
     (let f_0 = ref (any_int void) in
     (let tmp_0 = ref (any_int void) in
     (C_37:
     (C_38:
     (L:
     begin
       (let jessie_<somenum> =
       (e_0 := (C_36:
               ((bw_and (C_35: ((bw_and a_0_0) (C_34: (bw_compl b_0_0))))) 
                (C_33: (bw_compl c_0))))) in void);
      (let jessie_<somenum> = (f_0 := (1)) in void); void;
      (if ((neq_int_ a_0_0) (0))
      then
       try
        (let jessie_<somenum> =
        (C_40:
        begin
          (let jessie_<somenum> = (f_0 := (0)) in void);
         (loop_3:
         while true do
         { invariant (JC_<somenum>: true) variant (JC_<somenum> : card(iset(e_0))) }
          begin
            [ { } unit reads e_0,f_0,intP_intM,int_xP_int_xM,k,s_0
              { (JC_<somenum>:
                ((JC_<somenum>: included(iset(e_0), iset(e_0@L)))
                and ((JC_<somenum>: eq_int(f_0, sub_int(s_0, s_0@L)))
                    and ((JC_<somenum>: ge_int(f_0, (0)))
                        and ((JC_<somenum>: eq_int(k, k@L))
                            and ((JC_<somenum>: partial_solution(k, col, intP_intM))
                                and ((JC_<somenum>:
                                     sorted(sol, s_0@L, s_0, intP_intM,
                                     int_xP_int_xM))
                                    and (JC_<somenum>:
                                        (forall t_2:intP pointer.
                                         ((solution(t_2, intP_intM)
                                          and (exists di:int.
                                               (in_(di,
                                                diff(iset(e_0@L), iset(e_0)))
                                               and (eq_prefix(col, t_2, k,
                                                    intP_intM)
                                                   and eq_int(select(intP_intM,
                                                              shift(t_2, k)),
                                                       di)))))
                                         <-> (exists i_19:int.
                                              (le_int(s_0@L, i_19)
                                              and (lt_int(i_19, s_0)
                                                  and eq_sol(t_2,
                                                      select(int_xP_int_xM,
                                                      shift(sol, i_19)),
                                                      intP_intM)))))))))))))) } ];
           try
            (let jessie_<somenum> =
            begin
              (let jessie_<somenum> =
              (C_57:
              (C_77:
              begin
                (let jessie_<somenum> =
                (d_0 := (C_56: ((bw_and !e_0) (C_55: (neg_int !e_0))))) in
                void);
               (if ((neq_int_ !d_0) (0)) then void
               else
                (let jessie_<somenum> = (raise (Goto_while_0_break_exc void)) in
                void));
               (let jessie_<somenum> =
               (C_62:
               (C_64:
               (C_75:
               begin
                 [ { } unit reads d_0
                   { (JC_<somenum>:
                     (exists x_12:int.
                      ((iset(d_0) = singleton(x_12))
                      and in_(x_12, iset(a_0_0))))) } ]; void;
                (let jessie_<somenum> =
                (let jessie_<somenum> =
                (C_59:
                (let jessie_<somenum> = !d_0 in
                (JC_<somenum>: (min_elt_0_requires jessie_<somenum>)))) in
                (let jessie_<somenum> = col in
                (let jessie_<somenum> = !k in
                (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
                (JC_<somenum>:
                (((((offset_upd_ !intP_alloc_table) intP_intM) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
                void);
                (let jessie_<somenum> = (k := (C_63: ((add_int !k) (1)))) in void);
                (let jessie_<somenum> =
                (C_71:
                (C_73:
                begin
                  (let jessie_<somenum> =
                  (tmp_0 := (C_70:
                            (let jessie_<somenum> =
                            (C_65: ((sub_int a_0_0) !d_0)) in
                            (let jessie_<somenum> =
                            (C_67:
                            ((mul_int (C_66: ((add_int b_0_0) !d_0))) (2))) in
                            (let jessie_<somenum> =
                            (C_69:
                            (JC_<somenum>:
                            ((computer_div_ (C_68: ((add_int c_0) !d_0))) (2)))) in
                            (JC_<somenum>:
                            (check
                            { zwf_zero((JC_<somenum> : card(iset(jessie_<somenum>))),
                              (JC_<somenum> : card(iset(a_0_0)))) };
                            (JC_<somenum>:
                            (((t3_requires jessie_<somenum>) jessie_<somenum>) jessie_<somenum>))))))))) in
                  void); (f_0 := (C_72: ((add_int !f_0) !tmp_0))); !f_0 end)) in
                void); (k := (C_74: ((sub_int !k) (1)))); !k end))) in void);
               (e_0 := (C_76: ((sub_int !e_0) !d_0))); !e_0 end)) in void);
             (raise (Loop_continue_exc void)) end in void) with
            Loop_continue_exc jessie_<somenum> -> void end end done);
         (raise (Goto_while_0_break_exc void)) end) in void) with
        Goto_while_0_break_exc jessie_<somenum> -> (while_0_break: void) end
      else (C_39: (JC_<somenum>: (store_solution_requires void))));
      (return := !f_0); (raise Return) end))))))); absurd  end with Return ->
   !return end)) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C queens.jessie --quiet -f queens.makefile project
why --project [...] why/queens.why
<project name="queens" context="why/queens_ctx.why">
  <lemma name="iset_c_min_elt_help">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/queens_po1.why">
      <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "182" begin = "0" end = "97"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="dont_bother_me_I_am_a_ghost_1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/queens_po2.why">
      <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "264" begin = "0" end = "125"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="dont_bother_me_I_am_a_ghost_2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/queens_po3.why">
      <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "268" begin = "0" end = "188"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="dont_bother_me_I_am_a_ghost_3">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/queens_po4.why">
      <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "274" begin = "0" end = "125"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="partial_solution_eq_prefix">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/queens_po5.why">
      <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "291" begin = "0" end = "228"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <function name="partial_solution_eq_prefix">
    <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "291" begin = "0" end = "228"/>
  </function>
  <function name="iset_c_min_elt_help">
    <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "182" begin = "0" end = "97"/>
  </function>
  <function name="dont_bother_me_I_am_a_ghost_3">
    <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "274" begin = "0" end = "125"/>
  </function>
  <function name="dont_bother_me_I_am_a_ghost_2">
    <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "268" begin = "0" end = "188"/>
  </function>
  <function name="dont_bother_me_I_am_a_ghost_1">
    <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "264" begin = "0" end = "125"/>
  </function>
  <function name="Function t3">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/queens_po64.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "291" begin = "25" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po65.why">
      <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "425" begin = "27" end = "146"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/queens_po66.why">
      <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "425" begin = "27" end = "146"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/queens_po67.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "293" begin = "28" end = "35"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/queens_po68.why">
      <location file = "why/queens.why" line = "1352" begin = "30" end = "132"/>
      <explain kind = "Check"/>
    </goal>
    <goal why_file="why/queens_po69.why">
      <location file = "why/queens.why" line = "1352" begin = "30" end = "132"/>
      <explain kind = "Check"/>
    </goal>
    <goal why_file="why/queens_po70.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "293" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po71.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "293" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po72.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "293" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po73.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "293" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po74.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "293" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po75.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "293" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po76.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "293" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po77.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "293" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po78.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "293" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po79.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "293" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po80.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "293" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po81.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "293" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po82.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "287" begin = "10" end = "23"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/queens_po83.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "287" begin = "10" end = "23"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/queens_po84.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "297" begin = "4" end = "20"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/queens_po34.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "275" begin = "10" end = "42"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/queens_po35.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "276" begin = "10" end = "27"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/queens_po36.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "276" begin = "31" end = "37"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/queens_po37.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "277" begin = "10" end = "34"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/queens_po38.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "278" begin = "10" end = "34"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/queens_po39.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "279" begin = "10" end = "242"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/queens_po40.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "279" begin = "10" end = "242"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/queens_po41.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "279" begin = "10" end = "242"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/queens_po42.why">
      <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "382" begin = "9" end = "3025"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/queens_po43.why">
      <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "382" begin = "9" end = "3025"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/queens_po44.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "290" begin = "17" end = "73"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/queens_po45.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "275" begin = "10" end = "42"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/queens_po46.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "276" begin = "10" end = "27"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/queens_po47.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "276" begin = "31" end = "37"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/queens_po48.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "276" begin = "41" end = "54"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/queens_po49.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "277" begin = "10" end = "34"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/queens_po50.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "278" begin = "10" end = "34"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/queens_po51.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "279" begin = "10" end = "242"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/queens_po52.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "279" begin = "10" end = "242"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/queens_po53.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "279" begin = "10" end = "242"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/queens_po54.why">
      <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "382" begin = "9" end = "3025"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/queens_po55.why">
      <location file = "PPCHOME/tests/jessie/queens.jessie/queens.jc" line = "382" begin = "9" end = "3025"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/queens_po56.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "265" begin = "6" end = "28"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/queens_po57.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "265" begin = "32" end = "44"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/queens_po58.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "265" begin = "48" end = "60"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/queens_po59.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "266" begin = "6" end = "29"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/queens_po60.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "267" begin = "6" end = "138"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/queens_po61.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "267" begin = "6" end = "138"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/queens_po62.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "267" begin = "6" end = "138"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/queens_po63.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "270" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function t1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/queens_po29.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "170" begin = "24" end = "31"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/queens_po30.why">
      <location file = "why/queens.why" line = "1008" begin = "26" end = "120"/>
      <explain kind = "Check"/>
    </goal>
    <goal why_file="why/queens_po31.why">
      <location file = "why/queens.why" line = "1008" begin = "26" end = "120"/>
      <explain kind = "Check"/>
    </goal>
    <goal why_file="why/queens_po32.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "167" begin = "21" end = "34"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/queens_po33.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "167" begin = "21" end = "34"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/queens_po26.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "166" begin = "23" end = "55"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/queens_po27.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "169" begin = "17" end = "77"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/queens_po28.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "166" begin = "23" end = "55"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    </behavior>
  </function>
  <function name="Function queens">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/queens_po14.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "9" end = "25"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po15.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "9" end = "25"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po16.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "9" end = "25"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po17.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "9" end = "25"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po18.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "9" end = "25"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po19.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "9" end = "25"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po20.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "9" end = "25"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po21.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "9" end = "25"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po22.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "9" end = "25"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po23.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "9" end = "25"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po24.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "9" end = "25"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/queens_po25.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "9" end = "25"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/queens_po6.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "14" end = "19"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/queens_po7.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "14" end = "19"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/queens_po8.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "14" end = "19"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/queens_po9.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "310" begin = "14" end = "19"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/queens_po10.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "304" begin = "6" end = "18"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/queens_po11.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "305" begin = "6" end = "23"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/queens_po12.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "306" begin = "6" end = "97"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/queens_po13.why">
      <location file = "PPCHOME/tests/jessie/queens.c" line = "306" begin = "6" end = "97"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s2) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s3))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type charP

type intP

type int_set

type int_xP

type padding

type voidP

logic N : int

logic add : int, int_set -> int_set

logic below : int -> int_set

logic card : int_set -> int

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic col : intP pointer

logic diff : int_set, int_set -> int_set

logic empty : int_set

predicate eq_prefix(t: intP pointer, u: intP pointer, i_12: int,
  intP_intM_at_L: (intP, int) memory) =
  (forall k_1:int.
    (((0 <= k_1) and (k_1 < i_12)) -> (select(intP_intM_at_L, shift(t,
     k_1)) = select(intP_intM_at_L, shift(u, k_1)))))

predicate eq_sol(t_0: intP pointer, u_0: intP pointer, intP_intM_at_L: (intP,
  int) memory) = eq_prefix(t_0, u_0, N, intP_intM_at_L)

logic in_ : int, int_set -> prop

predicate included(a: int_set, b: int_set) =
  (forall i:int. (in_(i, a) -> in_(i, b)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

logic int_xP_tag : int_xP tag_id

axiom int_xP_int: (int_of_tag(int_xP_tag) = 1)

logic int_xP_of_pointer_address : unit pointer -> int_xP pointer

axiom int_xP_of_pointer_address_of_pointer_addr:
  (forall p:int_xP pointer.
    (p = int_xP_of_pointer_address(pointer_address(p))))

axiom int_xP_parenttag_bottom: parenttag(int_xP_tag, bottom_tag)

axiom int_xP_tags:
  (forall x:int_xP pointer.
    (forall int_xP_tag_table:int_xP tag_table. instanceof(int_xP_tag_table,
      x, int_xP_tag)))

logic iset : int -> int_set

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_int_xP(p: int_xP pointer, a: int,
  int_xP_alloc_table: int_xP alloc_table) = (offset_min(int_xP_alloc_table,
  p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

predicate lt_sol(s1_1: intP pointer, s2_1: intP pointer,
  intP_intM_at_L: (intP, int) memory) =
  (exists i_17:int.
    ((0 <= i_17) and
     ((i_17 < N) and
      (eq_prefix(s1_1, s2_1, i_17, intP_intM_at_L) and
       (select(intP_intM_at_L, shift(s1_1, i_17)) < select(intP_intM_at_L,
       shift(s2_1, i_17)))))))

logic min_elt : int_set -> int

predicate partial_solution(k_0: int, s_15: intP pointer,
  intP_intM_at_L: (intP, int) memory) =
  (forall i_16:int.
    (((0 <= i_16) and (i_16 < k_0)) ->
     ((0 <= select(intP_intM_at_L, shift(s_15, i_16))) and
      ((select(intP_intM_at_L, shift(s_15, i_16)) < N) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_16)) ->
          ((select(intP_intM_at_L, shift(s_15,
           i_16)) <> select(intP_intM_at_L, shift(s_15, j_1))) and
           (((select(intP_intM_at_L, shift(s_15,
            i_16)) - select(intP_intM_at_L, shift(s_15,
            j_1))) <> (i_16 - j_1)) and ((select(intP_intM_at_L, shift(s_15,
            i_16)) - select(intP_intM_at_L, shift(s_15,
            j_1))) <> (j_1 - i_16))))))))))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

axiom pointer_addr_of_int_xP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(int_xP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

logic pred : int_set -> int_set

logic remove : int, int_set -> int_set

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_int_xP(p: int_xP pointer, b: int,
  int_xP_alloc_table: int_xP alloc_table) = (offset_max(int_xP_alloc_table,
  p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

logic singleton : int -> int_set

logic sol : int_xP pointer

predicate solution(s_16: intP pointer, intP_intM_at_L: (intP, int) memory) =
  partial_solution(N, s_16, intP_intM_at_L)

predicate sorted(s_17: int_xP pointer, a_6: int, b_5: int,
  intP_intM_at_L: (intP, int) memory, int_xP_int_xM_at_L: (int_xP,
  intP pointer) memory) =
  (forall i_18:int.
    (forall j_2:int.
      (((a_6 <= i_18) and ((i_18 < j_2) and (j_2 < b_5))) ->
       lt_sol(select(int_xP_int_xM_at_L, shift(s_17, i_18)),
       select(int_xP_int_xM_at_L, shift(s_17, j_2)), intP_intM_at_L))))

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_int_xP(p: int_xP pointer, a: int, b: int,
  int_xP_alloc_table: int_xP alloc_table) =
  ((offset_min(int_xP_alloc_table, p) = a) and
   (offset_max(int_xP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_int_xP(p: int_xP pointer, a: int, b: int,
  int_xP_alloc_table: int_xP alloc_table) =
  ((offset_min(int_xP_alloc_table, p) = a) and
   (offset_max(int_xP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic succ : int_set -> int_set

predicate valid_bitvector_struct_charP(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_intP(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_xP(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_voidP(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_int_xP(p: int_xP pointer, a: int, b: int,
  int_xP_alloc_table: int_xP alloc_table) =
  ((offset_min(int_xP_alloc_table, p) <= a) and
   (offset_max(int_xP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_int_xP(p: int_xP pointer, a: int, b: int,
  int_xP_alloc_table: int_xP alloc_table) =
  ((offset_min(int_xP_alloc_table, p) <= a) and
   (offset_max(int_xP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

axiom card_nonneg: (forall s_1_0:int_set. (card(s_1_0) >= 0))

axiom empty_def: (forall i_0:int. (not in_(i_0, empty)))

axiom empty_card: (forall s_2:int_set. ((card(s_2) = 0) <-> (s_2 = empty)))

axiom diff_def:
  (forall a_1_0:int_set.
    (forall b_1_0:int_set.
      (forall i_1:int.
        (in_(i_1, diff(a_1_0, b_1_0)) <->
         (in_(i_1, a_1_0) and (not in_(i_1, b_1_0)))))))

axiom add_def:
  (forall s_3:int_set.
    (forall x_1_0:int.
      (forall i_2:int.
        (in_(i_2, add(x_1_0, s_3)) <-> ((i_2 = x_1_0) or in_(i_2, s_3))))))

axiom remove_def:
  (forall s_5:int_set.
    (forall x_3:int.
      (forall i_3:int.
        (in_(i_3, remove(x_3, s_5)) <-> (in_(i_3, s_5) and (i_3 <> x_3))))))

axiom remove_card:
  (forall s_6:int_set.
    (forall i_4:int.
      (in_(i_4, s_6) -> (card(remove(i_4, s_6)) = (card(s_6) - 1)))))

axiom min_elt_def:
  (forall s_8:int_set.
    ((card(s_8) > 0) ->
     (in_(min_elt(s_8), s_8) and
      (forall i_5:int. (in_(i_5, s_8) -> (min_elt(s_8) <= i_5))))))

axiom singleton_def:
  (forall i_6:int. (forall j:int. (in_(j, singleton(i_6)) <-> (j = i_6))))

axiom succ_def_1:
  (forall s_10:int_set.
    (forall i_7:int. (in_(i_7, s_10) -> in_((i_7 + 1), succ(s_10)))))

axiom succ_def_2:
  (forall s_11:int_set.
    (forall i_8:int.
      (in_(i_8, succ(s_11)) -> ((i_8 >= 1) and in_((i_8 - 1), s_11)))))

axiom pred_def_1:
  (forall s_13:int_set.
    (forall i_9:int.
      ((i_9 >= 1) -> (in_(i_9, s_13) -> in_((i_9 - 1), pred(s_13))))))

axiom pred_def_2:
  (forall s_14:int_set.
    (forall i_10:int. (in_(i_10, pred(s_14)) -> in_((i_10 + 1), s_14))))

axiom below_def:
  (forall n_0_0:int.
    (forall i_11:int.
      (in_(i_11, below(n_0_0)) <-> ((0 <= i_11) and (i_11 < n_0_0)))))

axiom below_card: (forall n_1:int. (card(below(n_1)) = n_1))

axiom iset_c_zero: (forall x_6:int. ((iset(x_6) = empty) <-> (x_6 = 0)))

axiom iset_c_remove:
  (forall x_7:int.
    (forall a_3:int.
      (forall b_2:int.
        ((iset(b_2) = singleton(x_7)) ->
         (in_(x_7, iset(a_3)) -> (iset((a_3 - b_2)) = remove(x_7, iset(a_3))))))))

axiom iset_c_min_elt:
  (forall x_8:int.
    ((x_8 <> 0) -> (iset(bw_and(x_8,
     (-x_8))) = singleton(min_elt(iset(x_8))))))

axiom iset_c_diff:
  (forall a_4:int.
    (forall b_3:int. (iset(bw_and(a_4, bw_compl(b_3))) = diff(iset(a_4),
      iset(b_3)))))

axiom iset_c_add:
  (forall x_9:int.
    (forall a_5:int.
      (forall b_4:int.
        ((iset(b_4) = singleton(x_9)) ->
         ((not in_(x_9, iset(a_5))) -> (iset((a_5 + b_4)) = add(x_9,
          iset(a_5))))))))

axiom iset_c_below:
  (forall n_2:int. (iset(bw_compl(lsl(bw_compl(0), n_2))) = below(n_2)))

axiom N_positive: (N > 0)

