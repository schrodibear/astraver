Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only heapsort.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD heapsort.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir heapsort.jessie
[jessie] File heapsort.jessie/heapsort.jc written.
[jessie] File heapsort.jessie/heapsort.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint32 = 0..4294967295

type int32 = -2147483648..2147483647

type int8 = -128..127

tag int_P = {
  int32 int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

axiomatic IntArray {

  logic type int_array
   
  logic int32 access(int_array a, integer i)
   
  logic int_array update(int_array a_0, integer i_0, int32 v)
   
  axiom access_update_eq :
  (\forall int_array a_1;
    (\forall integer i_1;
      (\forall int32 v_0;
        (access(update(a_1, i_1, v_0), i_1) == v_0))))
   
  axiom access_update_neq :
  (\forall int_array a_2;
    (\forall integer i_2;
      (\forall integer j;
        (\forall int32 v_1;
          ((i_2 != j) ==>
            (access(update(a_2, i_2, v_1), j) == access(a_2, j)))))))
  
}

predicate Swap(int_array a1, int_array a2, integer i_3, integer j_0) =
(((access(a1, i_3) == access(a2, j_0)) &&
   (access(a1, j_0) == access(a2, i_3))) &&
  (\forall integer k;
    ((k != i_3) ==> ((k != j_0) ==> (access(a1, k) == access(a2, k))))))

axiomatic Permut {

  predicate Permut(int_array a1_0, int_array a2_0, integer l, integer h)
   
  axiom Permut_refl :
  (\forall int_array a_3;
    (\forall integer l_0;
      (\forall integer h_0;
        Permut(a_3, a_3, l_0, h_0))))
   
  axiom Permut_sym :
  (\forall int_array a1_1;
    (\forall int_array a2_1;
      (\forall integer l_1;
        (\forall integer h_1;
          (Permut(a1_1, a2_1, l_1, h_1) ==> Permut(a2_1, a1_1, l_1, h_1))))))
   
  axiom Permut_trans :
  (\forall int_array a1_2;
    (\forall int_array a2_2;
      (\forall int_array a3;
        (\forall integer l_2;
          (\forall integer h_2;
            (Permut(a1_2, a2_2, l_2, h_2) ==>
              (Permut(a2_2, a3, l_2, h_2) ==> Permut(a1_2, a3, l_2, h_2))))))))
   
  axiom Permut_swap :
  (\forall int_array a1_3;
    (\forall int_array a2_3;
      (\forall integer l_3;
        (\forall integer h_3;
          (\forall integer i_4;
            (\forall integer j_1;
              (((l_3 <= i_4) && (i_4 <= h_3)) ==>
                (((l_3 <= j_1) && (j_1 <= h_3)) ==>
                  (Swap(a1_3, a2_3, i_4, j_1) ==>
                    Permut(a1_3, a2_3, l_3, h_3))))))))))
   
  axiom Permut_extend :
  (\forall int_array a1_4;
    (\forall int_array a2_4;
      (\forall integer l_4;
        (\forall integer h_4;
          (\forall integer ll;
            (\forall integer hh;
              (Permut(a1_4, a2_4, l_4, h_4) ==>
                ((ll <= l_4) ==>
                  ((h_4 <= hh) ==> Permut(a1_4, a2_4, ll, hh))))))))))
  
}

axiomatic ArrayContents {

  logic int_array contents{L}(int_P[..] a_4) reads (a_4 + [..]).int_M;
   
  axiom access_contents{L} :
  (\forall int_P[..] a_5;
    (\forall integer i_5;
      (access(contents{L}(a_5), i_5) == (a_5 + i_5).int_M)))
  
}

predicate Sorted{L}(int_P[..] a_6, integer l_5, integer h_5) =
(\forall integer i_6;
  (((l_5 <= i_6) && (i_6 < h_5)) ==>
    ((a_6 + i_6).int_M <= (a_6 + (i_6 + 1)).int_M)))

predicate Hnode{L}(int_P[..] a_7, integer i_7, integer h_6) =
(((((2 * i_7) + 1) <= h_6) ==>
   ((a_7 + i_7).int_M >= (a_7 + ((2 * i_7) + 1)).int_M)) &&
  ((((2 * i_7) + 2) <= h_6) ==>
    ((a_7 + i_7).int_M >= (a_7 + ((2 * i_7) + 2)).int_M)))

predicate H{L}(int_P[..] a_8, integer l_6, integer h_7) =
(\forall integer i_8;
  (((l_6 <= i_8) && (i_8 <= h_7)) ==> Hnode{L}(a_8, i_8, h_7)))

lemma H_init{L} :
(\forall int_P[..] a_9;
  (\forall integer l_7;
    (\forall integer h_8;
      (((l_7 <= h_8) && (h_8 < ((2 * l_7) + 1))) ==> H{L}(a_9, l_7, h_8)))))

lemma H_reduce{L} :
(\forall int_P[..] a_10;
  (\forall integer h_9;
    ((0 < h_9) ==> (H{L}(a_10, 0, h_9) ==> H{L}(a_10, 1, (h_9 - 1))))))

lemma H_max{L} :
(\forall int_P[..] a_11;
  (\forall integer h_10;
    (H{L}(a_11, 0, h_10) ==>
      (\forall integer i_9;
        (((0 <= i_9) && (i_9 <= h_10)) ==>
          ((a_11 + 0).int_M >= (a_11 + i_9).int_M))))))

lemma div2_1 :
(\forall int32 i_10;
  ((0 <= i_10) ==> ((0 <= (i_10 / 2)) && ((i_10 / 2) <= i_10))))

lemma div2_2 :
(\forall int32 i_11;
  ((0 < i_11) ==> ((0 <= (i_11 / 2)) && ((i_11 / 2) < i_11))))

lemma div2_3 :
(\forall int32 i_12;
  ((0 <= i_12) ==> ((i_12 - 1) < ((2 * (i_12 / 2)) + 1))))

lemma div2_4 :
(\forall int32 i_13;
  (\forall int32 k_0;
    ((0 <= i_13) ==>
      ((0 <= k_0) ==>
        ((k_0 != ((i_13 - 1) / 2)) ==> (((2 * k_0) + 1) != i_13))))))

lemma div2_5 :
(\forall int32 i_14;
  (\forall int32 k_1;
    ((0 <= i_14) ==>
      ((0 <= k_1) ==>
        ((k_1 != ((i_14 - 1) / 2)) ==> (((2 * k_1) + 2) != i_14))))))

unit sift_down(int_P[..] a_0, uint32 low, uint32 high, int32 v)
  requires (C_45 : ((((C_48 : (0 <= low)) && (C_49 : (low <= high))) &&
                      ((C_51 : (\offset_min(a_0) <= low)) &&
                        (C_52 : (\offset_max(a_0) >= high)))) &&
                     (C_53 : H{Here}(a_0, (low + 1), high))));
behavior default:
  assigns (a_0 + [low..high]).int_M;
  ensures (C_42 : ((C_43 : Permut(contents{Here}(\at(a_0,Old)),
                                  \old(update(contents{Old}(a_0), low, v)),
                                  \at(low,Old), \at(high,Old))) &&
                    (C_44 : H{Here}(\at(a_0,Old), \at(low,Old), \at(high,Old)))));
{  
   (var uint32 i);
   
   (var uint32 child);
   
   {  (C_1 : (i = low));
      
      {  
         loop 
         behavior default:
           
           assigns (a_0 + [low..high]).int_M;
         behavior default:
           invariant (C_3 : ((((((C_8 : (low <= i)) && (C_9 : (i <= high))) &&
                                 (C_10 : Permut(contents{Here}(a_0),
                                                \at(contents{Pre}(a_0),Pre),
                                                low, high))) &&
                                (C_11 : (\forall int32 k_2;
                                          (((low < k_2) && (k_2 <= high)) ==>
                                            Hnode{Here}(a_0, k_2, high))))) &&
                               (C_12 : ((low < i) ==>
                                         Hnode{Here}(a_0, low, high)))) &&
                              (C_13 : ((low <= ((i - 1) / 2)) ==>
                                        ((a_0 + ((i - 1) / 2)).int_M >= v)))));
         variant (C_2 : (high - i));
         while (true)
         {  
            {  
               {  (C_18 : (child = (C_17 : ((C_16 : ((C_15 : ((C_14 : 
                                                              (2 * i)) :> uint32)) +
                                                      1)) :> uint32))));
                  ()
               };
               (if (child <= high) then () else 
               (goto while_0_break));
               (if ((C_29 : ((C_28 : (child + 1)) :> uint32)) <= high) then 
               (if ((C_27 : (C_26 : (a_0 +
                                      (C_25 : ((C_24 : (child + 1)) :> uint32)))).int_M) >=
                     (C_23 : (C_22 : (a_0 + child)).int_M)) then (C_21 : (child = 
                                                                 (C_20 : (
                                                                 (C_19 : 
                                                                 (child +
                                                                   1)) :> uint32)))) else ()) else ());
               (if (v >= (C_31 : (C_30 : (a_0 + child)).int_M)) then 
               (goto while_0_break) else ());
               (C_36 : ((C_35 : (C_34 : (a_0 + i)).int_M) = (C_33 : (C_32 : 
                                                                    (a_0 +
                                                                    child)).int_M)));
               
               {  
                  (assert for default: (C_37 : Hnode{Here}(a_0, i, high)));
                  ()
               };
               (C_38 : (i = child))
            }
         };
         (while_0_break : ())
      };
      (C_41 : ((C_40 : (C_39 : (a_0 + i)).int_M) = v));
      
      (return ())
   }
}

unit heapsort(int_P[..] a, uint32 n)
  requires (C_109 : ((C_110 : (0 <= n)) &&
                      ((C_112 : (\offset_min(a) <= 0)) &&
                        (C_113 : (\offset_max(a) >= (n - 1))))));
behavior default:
  ensures (C_106 : ((C_107 : Permut(contents{Here}(\at(a,Old)),
                                    \old(contents{Old}(a)), 0,
                                    (\at(n,Old) - 1))) &&
                     (C_108 : Sorted{Here}(\at(a,Old), 0, (\at(n,Old) - 1)))));
{  
   (var uint32 i_0);
   
   (var int32 tmp);
   
   {  (if (n <= 1) then 
      (goto return_label) else ());
      (C_56 : (i_0 = (C_55 : ((C_54 : (n / 2)) :> uint32))));
      
      {  
         loop 
         behavior default:
           invariant (C_57 : ((((C_60 : (0 <= i_0)) && (C_61 : (i_0 < n))) &&
                                (C_62 : Permut(contents{Here}(a),
                                               \at(contents{Pre}(a),Pre), 0,
                                               (n - 1)))) &&
                               (C_63 : H{Here}(a, i_0, (n - 1)))));
         variant (C_64 : i_0);
         while (true)
         {  
            {  (if (i_0 >= 1) then () else 
               (goto while_1_break));
               (C_73 : sift_down(a, (C_66 : ((C_65 : (i_0 - 1)) :> uint32)),
                                 (C_68 : ((C_67 : (n - 1)) :> uint32)),
                                 (C_72 : (C_71 : (a +
                                                   (C_70 : ((C_69 : (i_0 - 1)) :> uint32)))).int_M)));
               (C_76 : (i_0 = (C_75 : ((C_74 : (i_0 - 1)) :> uint32))))
            }
         };
         (while_1_break : ())
      };
      (C_79 : (i_0 = (C_78 : ((C_77 : (n - 1)) :> uint32))));
      
      {  
         loop 
         behavior default:
           invariant (C_80 : ((((((C_85 : (0 <= i_0)) && (C_86 : (i_0 < n))) &&
                                  (C_87 : Permut(contents{Here}(a),
                                                 \at(contents{Pre}(a),Pre),
                                                 0, (n - 1)))) &&
                                 (C_88 : H{Here}(a, 0, i_0))) &&
                                (C_89 : Sorted{Here}(a, (i_0 + 1), (n - 1)))) &&
                               (C_90 : (\forall int32 k1;
                                         (\forall int32 k2;
                                           (((0 <= k1) && (k1 <= i_0)) ==>
                                             (((i_0 < k2) && (k2 < n)) ==>
                                               ((a + k1).int_M <=
                                                 (a + k2).int_M))))))));
         variant (C_91 : i_0);
         while (true)
         {  
            {  (if (i_0 >= 1) then () else 
               (goto while_2_break));
               
               {  (C_94 : (tmp = (C_93 : (C_92 : (a + i_0)).int_M)));
                  (C_99 : ((C_98 : (C_97 : (a + i_0)).int_M) = (C_96 : 
                                                               (C_95 : 
                                                               (a +
                                                                 0)).int_M)));
                  (C_102 : sift_down(a, 0,
                                     (C_101 : ((C_100 : (i_0 - 1)) :> uint32)),
                                     tmp))
               };
               (C_105 : (i_0 = (C_104 : ((C_103 : (i_0 - 1)) :> uint32))))
            }
         };
         (while_2_break : ())
      };
      (return_label : 
      (return ()))
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs heapsort.jessie/heapsort.cloc heapsort.jessie/heapsort.jc
type char_P

type int32

type int8

type int_P

type int_array

type padding

type uint32

type void_P

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Goto_while_2_break_exc of unit

logic integer_of_int32: int32 -> int

predicate Hnode(a_7:int_P pointer, i_7:int, h_6:int,
 int_P_int_M_a_7_3_at_L:(int_P, int32) memory) =
 ((le_int(add_int(mul_int((2), i_7), (1)), h_6) ->
   ge_int(integer_of_int32(select(int_P_int_M_a_7_3_at_L, shift(a_7, i_7))),
   integer_of_int32(select(int_P_int_M_a_7_3_at_L,
                    shift(a_7, add_int(mul_int((2), i_7), (1)))))))
 and (le_int(add_int(mul_int((2), i_7), (2)), h_6) ->
      ge_int(integer_of_int32(select(int_P_int_M_a_7_3_at_L, shift(a_7, i_7))),
      integer_of_int32(select(int_P_int_M_a_7_3_at_L,
                       shift(a_7, add_int(mul_int((2), i_7), (2))))))))

predicate H(a_8:int_P pointer, l_6:int, h_7:int,
 int_P_int_M_a_8_4_at_L:(int_P, int32) memory) =
 (forall i_8:int.
  ((le_int(l_6, i_8) and le_int(i_8, h_7)) ->
   Hnode(a_8, i_8, h_7, int_P_int_M_a_8_4_at_L)))

goal H_init :
 (forall int_P_int_M_a_9_8_at_L:(int_P, int32) memory.
  (forall a_9:int_P pointer.
   (forall l_7:int.
    (forall h_8:int.
     ((le_int(l_7, h_8) and lt_int(h_8, add_int(mul_int((2), l_7), (1)))) ->
      H(a_9, l_7, h_8, int_P_int_M_a_9_8_at_L))))))

axiom H_init_as_axiom :
 (forall int_P_int_M_a_9_8_at_L:(int_P, int32) memory.
  (forall a_9:int_P pointer.
   (forall l_7:int.
    (forall h_8:int.
     ((le_int(l_7, h_8) and lt_int(h_8, add_int(mul_int((2), l_7), (1)))) ->
      H(a_9, l_7, h_8, int_P_int_M_a_9_8_at_L))))))

goal H_max :
 (forall int_P_int_M_a_11_10_at_L:(int_P, int32) memory.
  (forall a_11:int_P pointer.
   (forall h_10:int.
    (H(a_11, (0), h_10, int_P_int_M_a_11_10_at_L) ->
     (forall i_9:int.
      ((le_int((0), i_9) and le_int(i_9, h_10)) ->
       ge_int(integer_of_int32(select(int_P_int_M_a_11_10_at_L,
                               shift(a_11, (0)))),
       integer_of_int32(select(int_P_int_M_a_11_10_at_L, shift(a_11, i_9))))))))))

axiom H_max_as_axiom :
 (forall int_P_int_M_a_11_10_at_L:(int_P, int32) memory.
  (forall a_11:int_P pointer.
   (forall h_10:int.
    (H(a_11, (0), h_10, int_P_int_M_a_11_10_at_L) ->
     (forall i_9:int.
      ((le_int((0), i_9) and le_int(i_9, h_10)) ->
       ge_int(integer_of_int32(select(int_P_int_M_a_11_10_at_L,
                               shift(a_11, (0)))),
       integer_of_int32(select(int_P_int_M_a_11_10_at_L, shift(a_11, i_9))))))))))

goal H_reduce :
 (forall int_P_int_M_a_10_9_at_L:(int_P, int32) memory.
  (forall a_10:int_P pointer.
   (forall h_9:int.
    (lt_int((0), h_9) ->
     (H(a_10, (0), h_9, int_P_int_M_a_10_9_at_L) ->
      H(a_10, (1), sub_int(h_9, (1)), int_P_int_M_a_10_9_at_L))))))

axiom H_reduce_as_axiom :
 (forall int_P_int_M_a_10_9_at_L:(int_P, int32) memory.
  (forall a_10:int_P pointer.
   (forall h_9:int.
    (lt_int((0), h_9) ->
     (H(a_10, (0), h_9, int_P_int_M_a_10_9_at_L) ->
      H(a_10, (1), sub_int(h_9, (1)), int_P_int_M_a_10_9_at_L))))))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic Permut: int_array, int_array, int, int -> prop

axiom Permut_extend :
 (forall a1_4:int_array.
  (forall a2_4:int_array.
   (forall l_4:int.
    (forall h_4:int.
     (forall ll:int.
      (forall hh:int.
       (Permut(a1_4, a2_4, l_4, h_4) ->
        (le_int(ll, l_4) -> (le_int(h_4, hh) -> Permut(a1_4, a2_4, ll, hh))))))))))

axiom Permut_refl :
 (forall a_3:int_array.
  (forall l_0:int. (forall h_0:int. Permut(a_3, a_3, l_0, h_0))))

logic access: int_array, int -> int32

predicate Swap(a1:int_array, a2:int_array, i_3:int, j_0:int) =
 (eq_int(integer_of_int32(access(a1, i_3)),
  integer_of_int32(access(a2, j_0)))
 and (eq_int(integer_of_int32(access(a1, j_0)),
      integer_of_int32(access(a2, i_3)))
     and (forall k:int.
          (neq_int(k, i_3) ->
           (neq_int(k, j_0) ->
            eq_int(integer_of_int32(access(a1, k)),
            integer_of_int32(access(a2, k))))))))

axiom Permut_swap :
 (forall a1_3:int_array.
  (forall a2_3:int_array.
   (forall l_3:int.
    (forall h_3:int.
     (forall i_4:int.
      (forall j_1:int.
       ((le_int(l_3, i_4) and le_int(i_4, h_3)) ->
        ((le_int(l_3, j_1) and le_int(j_1, h_3)) ->
         (Swap(a1_3, a2_3, i_4, j_1) -> Permut(a1_3, a2_3, l_3, h_3))))))))))

axiom Permut_sym :
 (forall a1_1:int_array.
  (forall a2_1:int_array.
   (forall l_1:int.
    (forall h_1:int.
     (Permut(a1_1, a2_1, l_1, h_1) -> Permut(a2_1, a1_1, l_1, h_1))))))

axiom Permut_trans :
 (forall a1_2:int_array.
  (forall a2_2:int_array.
   (forall a3:int_array.
    (forall l_2:int.
     (forall h_2:int.
      (Permut(a1_2, a2_2, l_2, h_2) ->
       (Permut(a2_2, a3, l_2, h_2) -> Permut(a1_2, a3, l_2, h_2))))))))

exception Return_label_exc of unit

predicate Sorted(a_6:int_P pointer, l_5:int, h_5:int,
 int_P_int_M_a_6_2_at_L:(int_P, int32) memory) =
 (forall i_6:int.
  ((le_int(l_5, i_6) and lt_int(i_6, h_5)) ->
   le_int(integer_of_int32(select(int_P_int_M_a_6_2_at_L, shift(a_6, i_6))),
   integer_of_int32(select(int_P_int_M_a_6_2_at_L,
                    shift(a_6, add_int(i_6, (1))))))))

logic contents: int_P pointer, (int_P, int32) memory -> int_array

axiom access_contents :
 (forall int_P_int_M_a_4_1_at_L:(int_P, int32) memory.
  (forall a_5:int_P pointer.
   (forall i_5:int.
    eq_int(integer_of_int32(access(contents(a_5, int_P_int_M_a_4_1_at_L),
                            i_5)),
    integer_of_int32(select(int_P_int_M_a_4_1_at_L, shift(a_5, i_5)))))))

logic update: int_array, int, int32 -> int_array

axiom access_update_eq :
 (forall a_1_0:int_array.
  (forall i_1:int.
   (forall v_0_0:int32.
    eq_int(integer_of_int32(access(update(a_1_0, i_1, v_0_0), i_1)),
    integer_of_int32(v_0_0)))))

axiom access_update_neq :
 (forall a_2:int_array.
  (forall i_2:int.
   (forall j:int.
    (forall v_1:int32.
     (neq_int(i_2, j) ->
      eq_int(integer_of_int32(access(update(a_2, i_2, v_1), j)),
      integer_of_int32(access(a_2, j))))))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

goal div2_1 :
 (forall i_10:int32.
  (le_int((0), integer_of_int32(i_10)) ->
   (le_int((0), div_int(integer_of_int32(i_10), (2)))
   and le_int(div_int(integer_of_int32(i_10), (2)), integer_of_int32(i_10)))))

axiom div2_1_as_axiom :
 (forall i_10:int32.
  (le_int((0), integer_of_int32(i_10)) ->
   (le_int((0), div_int(integer_of_int32(i_10), (2)))
   and le_int(div_int(integer_of_int32(i_10), (2)), integer_of_int32(i_10)))))

goal div2_2 :
 (forall i_11:int32.
  (lt_int((0), integer_of_int32(i_11)) ->
   (le_int((0), div_int(integer_of_int32(i_11), (2)))
   and lt_int(div_int(integer_of_int32(i_11), (2)), integer_of_int32(i_11)))))

axiom div2_2_as_axiom :
 (forall i_11:int32.
  (lt_int((0), integer_of_int32(i_11)) ->
   (le_int((0), div_int(integer_of_int32(i_11), (2)))
   and lt_int(div_int(integer_of_int32(i_11), (2)), integer_of_int32(i_11)))))

goal div2_3 :
 (forall i_12:int32.
  (le_int((0), integer_of_int32(i_12)) ->
   lt_int(sub_int(integer_of_int32(i_12), (1)),
   add_int(mul_int((2), div_int(integer_of_int32(i_12), (2))), (1)))))

axiom div2_3_as_axiom :
 (forall i_12:int32.
  (le_int((0), integer_of_int32(i_12)) ->
   lt_int(sub_int(integer_of_int32(i_12), (1)),
   add_int(mul_int((2), div_int(integer_of_int32(i_12), (2))), (1)))))

goal div2_4 :
 (forall i_13:int32.
  (forall k_0:int32.
   (le_int((0), integer_of_int32(i_13)) ->
    (le_int((0), integer_of_int32(k_0)) ->
     (neq_int(integer_of_int32(k_0),
      div_int(sub_int(integer_of_int32(i_13), (1)), (2))) ->
      neq_int(add_int(mul_int((2), integer_of_int32(k_0)), (1)),
      integer_of_int32(i_13)))))))

axiom div2_4_as_axiom :
 (forall i_13:int32.
  (forall k_0:int32.
   (le_int((0), integer_of_int32(i_13)) ->
    (le_int((0), integer_of_int32(k_0)) ->
     (neq_int(integer_of_int32(k_0),
      div_int(sub_int(integer_of_int32(i_13), (1)), (2))) ->
      neq_int(add_int(mul_int((2), integer_of_int32(k_0)), (1)),
      integer_of_int32(i_13)))))))

goal div2_5 :
 (forall i_14:int32.
  (forall k_1:int32.
   (le_int((0), integer_of_int32(i_14)) ->
    (le_int((0), integer_of_int32(k_1)) ->
     (neq_int(integer_of_int32(k_1),
      div_int(sub_int(integer_of_int32(i_14), (1)), (2))) ->
      neq_int(add_int(mul_int((2), integer_of_int32(k_1)), (2)),
      integer_of_int32(i_14)))))))

axiom div2_5_as_axiom :
 (forall i_14:int32.
  (forall k_1:int32.
   (le_int((0), integer_of_int32(i_14)) ->
    (le_int((0), integer_of_int32(k_1)) ->
     (neq_int(integer_of_int32(k_1),
      div_int(sub_int(integer_of_int32(i_14), (1)), (2))) ->
      neq_int(add_int(mul_int((2), integer_of_int32(k_1)), (2)),
      integer_of_int32(i_14)))))))

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32, y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

predicate left_valid_struct_char_P(p:char_P pointer, a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_int_P(p:int_P pointer, a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer, a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom no_assign_contents_0 :
 (forall tmp:int_P pset.
  (forall tmpmem:(int_P, int32) memory.
   (forall tmpalloc:int_P alloc_table.
    (forall int_P_int_M_a_4_1_at_L:(int_P, int32) memory.
     (forall a_4:int_P pointer.
      ((pset_disjoint(tmp, pset_all(pset_singleton(a_4)))
       and not_assigns(tmpalloc, int_P_int_M_a_4_1_at_L, tmpmem, tmp)) ->
       (contents(a_4, int_P_int_M_a_4_1_at_L) = contents(a_4, tmpmem))))))))

axiom no_update_contents_0 :
 (forall tmp:int_P pointer.
  (forall tmpval:int32.
   (forall int_P_int_M_a_4_1_at_L:(int_P, int32) memory.
    (forall a_4:int_P pointer.
     ((not in_pset(tmp, pset_all(pset_singleton(a_4)))) ->
      (contents(a_4, int_P_int_M_a_4_1_at_L) = contents(a_4,
                                               store(int_P_int_M_a_4_1_at_L,
                                               tmp, tmpval))))))))

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer, b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_int_P(p:int_P pointer, b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer, b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

predicate valid_bitvector_struct_char_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter heapsort :
 a_1:int_P pointer ->
  n:uint32 ->
   int_P_int_M_a_6:(int_P, int32) memory ref ->
    int_P_a_6_alloc_table:int_P alloc_table ->
     { } unit reads int_P_int_M_a_6 writes int_P_int_M_a_6
     { (JC_76:
       ((JC_74:
        Permut(contents(a_1@, int_P_int_M_a_6),
        contents(a_1@, int_P_int_M_a_6@), (0),
        sub_int(integer_of_uint32(n@), (1))))
       and (JC_75:
           Sorted(a_1@, (0), sub_int(integer_of_uint32(n@), (1)),
           int_P_int_M_a_6)))) }

parameter heapsort_requires :
 a_1:int_P pointer ->
  n:uint32 ->
   int_P_int_M_a_6:(int_P, int32) memory ref ->
    int_P_a_6_alloc_table:int_P alloc_table ->
     { (JC_64:
       ((JC_61: le_int((0), integer_of_uint32(n)))
       and ((JC_62: le_int(offset_min(int_P_a_6_alloc_table, a_1), (0)))
           and (JC_63:
               ge_int(offset_max(int_P_a_6_alloc_table, a_1),
               sub_int(integer_of_uint32(n), (1)))))))}
     unit reads int_P_int_M_a_6 writes int_P_int_M_a_6
     { (JC_76:
       ((JC_74:
        Permut(contents(a_1@, int_P_int_M_a_6),
        contents(a_1@, int_P_int_M_a_6@), (0),
        sub_int(integer_of_uint32(n@), (1))))
       and (JC_75:
           Sorted(a_1@, (0), sub_int(integer_of_uint32(n@), (1)),
           int_P_int_M_a_6)))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter sift_down :
 a_0_0:int_P pointer ->
  low:uint32 ->
   high:uint32 ->
    v_0:int32 ->
     int_P_int_M_a_0_5:(int_P, int32) memory ref ->
      int_P_a_0_5_alloc_table:int_P alloc_table ->
       { } unit reads int_P_int_M_a_0_5 writes int_P_int_M_a_0_5
       { (JC_24:
         ((JC_22:
          ((JC_20:
           Permut(contents(a_0_0@, int_P_int_M_a_0_5),
           update(contents(a_0_0@, int_P_int_M_a_0_5@),
           integer_of_uint32(low@), v_0@), integer_of_uint32(low@),
           integer_of_uint32(high@)))
          and (JC_21:
              H(a_0_0@, integer_of_uint32(low@), integer_of_uint32(high@),
              int_P_int_M_a_0_5))))
         and (JC_23:
             not_assigns(int_P_a_0_5_alloc_table@, int_P_int_M_a_0_5@,
             int_P_int_M_a_0_5,
             pset_range(pset_singleton(a_0_0@), integer_of_uint32(low@),
             integer_of_uint32(high@)))))) }

parameter sift_down_requires :
 a_0_0:int_P pointer ->
  low:uint32 ->
   high:uint32 ->
    v_0:int32 ->
     int_P_int_M_a_0_5:(int_P, int32) memory ref ->
      int_P_a_0_5_alloc_table:int_P alloc_table ->
       { (JC_6:
         ((JC_1: le_int((0), integer_of_uint32(low)))
         and ((JC_2: le_int(integer_of_uint32(low), integer_of_uint32(high)))
             and ((JC_3:
                  le_int(offset_min(int_P_a_0_5_alloc_table, a_0_0),
                  integer_of_uint32(low)))
                 and ((JC_4:
                      ge_int(offset_max(int_P_a_0_5_alloc_table, a_0_0),
                      integer_of_uint32(high)))
                     and (JC_5:
                         H(a_0_0, add_int(integer_of_uint32(low), (1)),
                         integer_of_uint32(high), int_P_int_M_a_0_5)))))))}
       unit reads int_P_int_M_a_0_5 writes int_P_int_M_a_0_5
       { (JC_24:
         ((JC_22:
          ((JC_20:
           Permut(contents(a_0_0@, int_P_int_M_a_0_5),
           update(contents(a_0_0@, int_P_int_M_a_0_5@),
           integer_of_uint32(low@), v_0@), integer_of_uint32(low@),
           integer_of_uint32(high@)))
          and (JC_21:
              H(a_0_0@, integer_of_uint32(low@), integer_of_uint32(high@),
              int_P_int_M_a_0_5))))
         and (JC_23:
             not_assigns(int_P_a_0_5_alloc_table@, int_P_int_M_a_0_5@,
             int_P_int_M_a_0_5,
             pset_range(pset_singleton(a_0_0@), integer_of_uint32(low@),
             integer_of_uint32(high@)))))) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

let heapsort_ensures_default =
 fun (a_1 : int_P pointer) (n : uint32) (int_P_int_M_a_6 : (int_P, int32) memory ref) (int_P_a_6_alloc_table : int_P alloc_table) ->
  { (JC_69:
    ((JC_66: le_int((0), integer_of_uint32(n)))
    and ((JC_67: le_int(offset_min(int_P_a_6_alloc_table, a_1), (0)))
        and (JC_68:
            ge_int(offset_max(int_P_a_6_alloc_table, a_1),
            sub_int(integer_of_uint32(n), (1))))))) }
  (init:
  try
   begin
     (let i_0_0 = ref (any_uint32 void) in
     (let tmp = ref (any_int32 void) in
     try
      (let jessie_122 =
      begin
        (if ((le_int_ (integer_of_uint32 n)) (1))
        then (let jessie_91 = (raise (Return_label_exc void)) in void)
        else void);
       (C_56:
       begin
         (let jessie_93 =
         (i_0_0 := (C_55:
                   (safe_uint32_of_integer_ (C_54:
                                            (JC_114:
                                            ((div_int (integer_of_uint32 n)) (2))))))) in
         void);
        try
         (let jessie_102 =
         begin
           (loop_5:
           while true do
           { invariant
               (JC_119:
               ((JC_115: le_int((0), integer_of_uint32(i_0_0)))
               and ((JC_116:
                    lt_int(integer_of_uint32(i_0_0), integer_of_uint32(n)))
                   and ((JC_117:
                        Permut(contents(a_1, int_P_int_M_a_6),
                        contents(a_1@init, int_P_int_M_a_6@init), (0),
                        sub_int(integer_of_uint32(n), (1))))
                       and (JC_118:
                           H(a_1, integer_of_uint32(i_0_0),
                           sub_int(integer_of_uint32(n), (1)),
                           int_P_int_M_a_6))))))  }
            begin
              [ { } unit { true } ];
             try
              (let jessie_101 =
              begin
                (let jessie_100 =
                begin
                  (if ((ge_int_ (integer_of_uint32 !i_0_0)) (1)) then void
                  else
                   (let jessie_94 = (raise (Goto_while_1_break_exc void)) in
                   void));
                 (C_73:
                 begin
                   (let jessie_98 = a_1 in
                   (let jessie_97 =
                   (C_66:
                   (safe_uint32_of_integer_ (C_65:
                                            ((sub_int (integer_of_uint32 !i_0_0)) (1))))) in
                   (let jessie_96 =
                   (C_68:
                   (safe_uint32_of_integer_ (C_67:
                                            ((sub_int (integer_of_uint32 n)) (1))))) in
                   (let jessie_95 =
                   (C_72:
                   ((safe_acc_ !int_P_int_M_a_6) (C_71:
                                                 ((shift a_1) (integer_of_uint32 
                                                               (C_70:
                                                               (safe_uint32_of_integer_ 
                                                                (C_69:
                                                                ((sub_int 
                                                                  (integer_of_uint32 !i_0_0)) (1)))))))))) in
                   (JC_123:
                   ((((((sift_down jessie_98) jessie_97) jessie_96) jessie_95) int_P_int_M_a_6) int_P_a_6_alloc_table))))));
                  (C_76:
                  begin
                    (i_0_0 := (C_75:
                              (safe_uint32_of_integer_ (C_74:
                                                       ((sub_int (integer_of_uint32 !i_0_0)) (1))))));
                   !i_0_0 end) end) end in void);
               (raise (Loop_continue_exc void)) end in void) with
              Loop_continue_exc jessie_8 -> void end end done);
          (raise (Goto_while_1_break_exc void)) end in void) with
         Goto_while_1_break_exc jessie_4 -> (while_1_break: void) end;
        (C_79:
        begin
          (let jessie_104 =
          (i_0_0 := (C_78:
                    (safe_uint32_of_integer_ (C_77:
                                             ((sub_int (integer_of_uint32 n)) (1)))))) in
          void);
         try
          (let jessie_121 =
          begin
            (loop_6:
            while true do
            { invariant
                (JC_130:
                ((JC_124: le_int((0), integer_of_uint32(i_0_0)))
                and ((JC_125:
                     lt_int(integer_of_uint32(i_0_0), integer_of_uint32(n)))
                    and ((JC_126:
                         Permut(contents(a_1, int_P_int_M_a_6),
                         contents(a_1@init, int_P_int_M_a_6@init), (0),
                         sub_int(integer_of_uint32(n), (1))))
                        and ((JC_127:
                             H(a_1, (0), integer_of_uint32(i_0_0),
                             int_P_int_M_a_6))
                            and ((JC_128:
                                 Sorted(a_1,
                                 add_int(integer_of_uint32(i_0_0), (1)),
                                 sub_int(integer_of_uint32(n), (1)),
                                 int_P_int_M_a_6))
                                and (JC_129:
                                    (forall k1:int32.
                                     (forall k2:int32.
                                      ((le_int((0), integer_of_int32(k1))
                                       and le_int(integer_of_int32(k1),
                                           integer_of_uint32(i_0_0))) ->
                                       ((lt_int(integer_of_uint32(i_0_0),
                                         integer_of_int32(k2))
                                        and lt_int(integer_of_int32(k2),
                                            integer_of_uint32(n))) ->
                                        le_int(integer_of_int32(select(int_P_int_M_a_6,
                                                                shift(a_1,
                                                                integer_of_int32(k1)))),
                                        integer_of_int32(select(int_P_int_M_a_6,
                                                         shift(a_1,
                                                         integer_of_int32(k2))))))))))))))))
               }
             begin
               [ { } unit { true } ];
              try
               (let jessie_120 =
               begin
                 (let jessie_119 =
                 begin
                   (if ((ge_int_ (integer_of_uint32 !i_0_0)) (1)) then void
                   else
                    (let jessie_105 =
                    (raise (Goto_while_2_break_exc void)) in void));
                  (C_94:
                  begin
                    (let jessie_107 =
                    (tmp := (C_93:
                            ((safe_acc_ !int_P_int_M_a_6) (C_92:
                                                          ((shift a_1) 
                                                           (integer_of_uint32 !i_0_0)))))) in
                    void);
                   (C_99:
                   begin
                     (let jessie_113 =
                     (let jessie_109 =
                     (C_96:
                     ((safe_acc_ !int_P_int_M_a_6) (C_95: ((shift a_1) (0))))) in
                     (let jessie_112 =
                     (C_97: ((shift a_1) (integer_of_uint32 !i_0_0))) in
                     (((safe_upd_ int_P_int_M_a_6) jessie_112) jessie_109))) in
                     void);
                    (C_102:
                    (let jessie_117 = a_1 in
                    (let jessie_116 = (safe_uint32_of_integer_ (0)) in
                    (let jessie_115 =
                    (C_101:
                    (safe_uint32_of_integer_ (C_100:
                                             ((sub_int (integer_of_uint32 !i_0_0)) (1))))) in
                    (let jessie_114 = !tmp in
                    (JC_134:
                    ((((((sift_down jessie_117) jessie_116) jessie_115) jessie_114) int_P_int_M_a_6) int_P_a_6_alloc_table)))))))
                   end) end);
                  (C_105:
                  begin
                    (i_0_0 := (C_104:
                              (safe_uint32_of_integer_ (C_103:
                                                       ((sub_int (integer_of_uint32 !i_0_0)) (1))))));
                   !i_0_0 end) end in void); (raise (Loop_continue_exc void))
               end in void) with Loop_continue_exc jessie_10 -> void end end
            done); (raise (Goto_while_2_break_exc void)) end in void) with
          Goto_while_2_break_exc jessie_5 -> (while_2_break: void) end;
         (raise (Return_label_exc void)) end) end) end in void) with
      Return_label_exc jessie_6 -> (return_label: (raise Return)) end));
    (raise Return) end with Return -> void end)
  { (JC_73:
    ((JC_71:
     Permut(contents(a_1@, int_P_int_M_a_6),
     contents(a_1@, int_P_int_M_a_6@), (0),
     sub_int(integer_of_uint32(n@), (1))))
    and (JC_72:
        Sorted(a_1@, (0), sub_int(integer_of_uint32(n@), (1)),
        int_P_int_M_a_6)))) }

let heapsort_safety =
 fun (a_1 : int_P pointer) (n : uint32) (int_P_int_M_a_6 : (int_P, int32) memory ref) (int_P_a_6_alloc_table : int_P alloc_table) ->
  { (JC_69:
    ((JC_66: le_int((0), integer_of_uint32(n)))
    and ((JC_67: le_int(offset_min(int_P_a_6_alloc_table, a_1), (0)))
        and (JC_68:
            ge_int(offset_max(int_P_a_6_alloc_table, a_1),
            sub_int(integer_of_uint32(n), (1))))))) }
  (init:
  try
   begin
     (let i_0_0 = ref (any_uint32 void) in
     (let tmp = ref (any_int32 void) in
     try
      (let jessie_90 =
      begin
        (if ((le_int_ (integer_of_uint32 n)) (1))
        then (let jessie_59 = (raise (Return_label_exc void)) in void)
        else void);
       (C_56:
       begin
         (let jessie_61 =
         (i_0_0 := (C_55:
                   (JC_80:
                   (uint32_of_integer_ (C_54:
                                       (JC_79:
                                       ((div_int_ (integer_of_uint32 n)) (2)))))))) in
         void);
        try
         (let jessie_70 =
         begin
           (loop_3:
           while true do
           { invariant (JC_87: true)
             variant integer_of_uint32((JC_95 : i_0_0)) }
            begin
              [ { } unit reads i_0_0,int_P_int_M_a_6
                { (JC_85:
                  ((JC_81: le_int((0), integer_of_uint32(i_0_0)))
                  and ((JC_82:
                       lt_int(integer_of_uint32(i_0_0), integer_of_uint32(n)))
                      and ((JC_83:
                           Permut(contents(a_1, int_P_int_M_a_6),
                           contents(a_1@init, int_P_int_M_a_6@init), (0),
                           sub_int(integer_of_uint32(n), (1))))
                          and (JC_84:
                              H(a_1, integer_of_uint32(i_0_0),
                              sub_int(integer_of_uint32(n), (1)),
                              int_P_int_M_a_6)))))) } ];
             try
              (let jessie_69 =
              begin
                (let jessie_68 =
                begin
                  (if ((ge_int_ (integer_of_uint32 !i_0_0)) (1)) then void
                  else
                   (let jessie_62 = (raise (Goto_while_1_break_exc void)) in
                   void));
                 (C_73:
                 begin
                   (let jessie_66 = a_1 in
                   (let jessie_65 =
                   (C_66:
                   (JC_92:
                   (uint32_of_integer_ (C_65:
                                       ((sub_int (integer_of_uint32 !i_0_0)) (1)))))) in
                   (let jessie_64 =
                   (C_68:
                   (JC_91:
                   (uint32_of_integer_ (C_67:
                                       ((sub_int (integer_of_uint32 n)) (1)))))) in
                   (let jessie_63 =
                   (C_72:
                   (JC_90:
                   ((((offset_acc_ int_P_a_6_alloc_table) !int_P_int_M_a_6) a_1) 
                    (integer_of_uint32 (C_70:
                                       (JC_89:
                                       (uint32_of_integer_ (C_69:
                                                           ((sub_int 
                                                             (integer_of_uint32 !i_0_0)) (1)))))))))) in
                   (JC_93:
                   ((((((sift_down_requires jessie_66) jessie_65) jessie_64) jessie_63) int_P_int_M_a_6) int_P_a_6_alloc_table))))));
                  (C_76:
                  begin
                    (i_0_0 := (C_75:
                              (JC_94:
                              (uint32_of_integer_ (C_74:
                                                  ((sub_int (integer_of_uint32 !i_0_0)) (1)))))));
                   !i_0_0 end) end) end in void);
               (raise (Loop_continue_exc void)) end in void) with
              Loop_continue_exc jessie_8 -> void end end done);
          (raise (Goto_while_1_break_exc void)) end in void) with
         Goto_while_1_break_exc jessie_4 -> (while_1_break: void) end;
        (C_79:
        begin
          (let jessie_72 =
          (i_0_0 := (C_78:
                    (JC_96:
                    (uint32_of_integer_ (C_77:
                                        ((sub_int (integer_of_uint32 n)) (1))))))) in
          void);
         try
          (let jessie_89 =
          begin
            (loop_4:
            while true do
            { invariant (JC_105: true)
              variant integer_of_uint32((JC_113 : i_0_0)) }
             begin
               [ { } unit reads i_0_0,int_P_int_M_a_6
                 { (JC_103:
                   ((JC_97: le_int((0), integer_of_uint32(i_0_0)))
                   and ((JC_98:
                        lt_int(integer_of_uint32(i_0_0),
                        integer_of_uint32(n)))
                       and ((JC_99:
                            Permut(contents(a_1, int_P_int_M_a_6),
                            contents(a_1@init, int_P_int_M_a_6@init), (0),
                            sub_int(integer_of_uint32(n), (1))))
                           and ((JC_100:
                                H(a_1, (0), integer_of_uint32(i_0_0),
                                int_P_int_M_a_6))
                               and ((JC_101:
                                    Sorted(a_1,
                                    add_int(integer_of_uint32(i_0_0), (1)),
                                    sub_int(integer_of_uint32(n), (1)),
                                    int_P_int_M_a_6))
                                   and (JC_102:
                                       (forall k1:int32.
                                        (forall k2:int32.
                                         ((le_int((0), integer_of_int32(k1))
                                          and le_int(integer_of_int32(k1),
                                              integer_of_uint32(i_0_0))) ->
                                          ((lt_int(integer_of_uint32(i_0_0),
                                            integer_of_int32(k2))
                                           and lt_int(integer_of_int32(k2),
                                               integer_of_uint32(n))) ->
                                           le_int(integer_of_int32(select(int_P_int_M_a_6,
                                                                   shift(a_1,
                                                                   integer_of_int32(k1)))),
                                           integer_of_int32(select(int_P_int_M_a_6,
                                                            shift(a_1,
                                                            integer_of_int32(k2)))))))))))))))) } ];
              try
               (let jessie_88 =
               begin
                 (let jessie_87 =
                 begin
                   (if ((ge_int_ (integer_of_uint32 !i_0_0)) (1)) then void
                   else
                    (let jessie_73 = (raise (Goto_while_2_break_exc void)) in
                    void));
                  (C_94:
                  begin
                    (let jessie_75 =
                    (tmp := (C_93:
                            (JC_107:
                            ((((offset_acc_ int_P_a_6_alloc_table) !int_P_int_M_a_6) a_1) 
                             (integer_of_uint32 !i_0_0))))) in void);
                   (C_99:
                   begin
                     (let jessie_81 =
                     (let jessie_77 =
                     (C_96:
                     (JC_108:
                     (((acc_ int_P_a_6_alloc_table) !int_P_int_M_a_6) a_1))) in
                     (let jessie_78 = a_1 in
                     (let jessie_79 = (integer_of_uint32 !i_0_0) in
                     (let jessie_80 = ((shift jessie_78) jessie_79) in
                     (JC_109:
                     (((((offset_upd_ int_P_a_6_alloc_table) int_P_int_M_a_6) jessie_78) jessie_79) jessie_77)))))) in
                     void);
                    (C_102:
                    (let jessie_85 = a_1 in
                    (let jessie_84 = (safe_uint32_of_integer_ (0)) in
                    (let jessie_83 =
                    (C_101:
                    (JC_110:
                    (uint32_of_integer_ (C_100:
                                        ((sub_int (integer_of_uint32 !i_0_0)) (1)))))) in
                    (let jessie_82 = !tmp in
                    (JC_111:
                    ((((((sift_down_requires jessie_85) jessie_84) jessie_83) jessie_82) int_P_int_M_a_6) int_P_a_6_alloc_table)))))))
                   end) end);
                  (C_105:
                  begin
                    (i_0_0 := (C_104:
                              (JC_112:
                              (uint32_of_integer_ (C_103:
                                                  ((sub_int (integer_of_uint32 !i_0_0)) (1)))))));
                   !i_0_0 end) end in void); (raise (Loop_continue_exc void))
               end in void) with Loop_continue_exc jessie_10 -> void end end
            done); (raise (Goto_while_2_break_exc void)) end in void) with
          Goto_while_2_break_exc jessie_5 -> (while_2_break: void) end;
         (raise (Return_label_exc void)) end) end) end in void) with
      Return_label_exc jessie_6 -> (return_label: (raise Return)) end));
    (raise Return) end with Return -> void end) { true }

let sift_down_ensures_default =
 fun (a_0_0 : int_P pointer) (low : uint32) (high : uint32) (v_0 : int32) (int_P_int_M_a_0_5 : (int_P, int32) memory ref) (int_P_a_0_5_alloc_table : int_P alloc_table) ->
  { (JC_13:
    ((JC_8: le_int((0), integer_of_uint32(low)))
    and ((JC_9: le_int(integer_of_uint32(low), integer_of_uint32(high)))
        and ((JC_10:
             le_int(offset_min(int_P_a_0_5_alloc_table, a_0_0),
             integer_of_uint32(low)))
            and ((JC_11:
                 ge_int(offset_max(int_P_a_0_5_alloc_table, a_0_0),
                 integer_of_uint32(high)))
                and (JC_12:
                    H(a_0_0, add_int(integer_of_uint32(low), (1)),
                    integer_of_uint32(high), int_P_int_M_a_0_5))))))) }
  (init:
  try
   begin
     (let i_15 = ref (any_uint32 void) in
     (let child = ref (any_uint32 void) in
     (C_1:
     begin
       (let jessie_36 = (i_15 := low) in void);
      try
       (let jessie_52 =
       begin
         (loop_2:
         while true do
         { invariant
             ((JC_56:
              ((JC_50:
               le_int(integer_of_uint32(low), integer_of_uint32(i_15)))
              and ((JC_51:
                   le_int(integer_of_uint32(i_15), integer_of_uint32(high)))
                  and ((JC_52:
                       Permut(contents(a_0_0, int_P_int_M_a_0_5),
                       contents(a_0_0@init, int_P_int_M_a_0_5@init),
                       integer_of_uint32(low), integer_of_uint32(high)))
                      and ((JC_53:
                           (forall k_2:int32.
                            ((lt_int(integer_of_uint32(low),
                              integer_of_int32(k_2))
                             and le_int(integer_of_int32(k_2),
                                 integer_of_uint32(high))) ->
                             Hnode(a_0_0, integer_of_int32(k_2),
                             integer_of_uint32(high), int_P_int_M_a_0_5))))
                          and ((JC_54:
                               (lt_int(integer_of_uint32(low),
                                integer_of_uint32(i_15)) ->
                                Hnode(a_0_0, integer_of_uint32(low),
                                integer_of_uint32(high), int_P_int_M_a_0_5)))
                              and (JC_55:
                                  (le_int(integer_of_uint32(low),
                                   div_int(sub_int(integer_of_uint32(i_15),
                                           (1)),
                                   (2))) ->
                                   ge_int(integer_of_int32(select(int_P_int_M_a_0_5,
                                                           shift(a_0_0,
                                                           div_int(sub_int(
                                                                   integer_of_uint32(i_15),
                                                                   (1)),
                                                           (2))))),
                                   integer_of_int32(v_0))))))))))
             and ((JC_58:
                  not_assigns(int_P_a_0_5_alloc_table@loop_2,
                  int_P_int_M_a_0_5@loop_2, int_P_int_M_a_0_5,
                  pset_range(pset_singleton(a_0_0), integer_of_uint32(low),
                  integer_of_uint32(high))))
                 and (JC_59:
                     not_assigns(int_P_a_0_5_alloc_table@init,
                     int_P_int_M_a_0_5@init, int_P_int_M_a_0_5,
                     pset_range(pset_singleton(a_0_0@init),
                     integer_of_uint32(low@init),
                     integer_of_uint32(high@init))))))  }
          begin
            [ { } unit { true } ];
           try
            (let jessie_51 =
            begin
              (let jessie_50 =
              begin
                (C_18:
                begin
                  (let jessie_38 =
                  (child := (C_17:
                            (safe_uint32_of_integer_ (C_16:
                                                     ((add_int (integer_of_uint32 
                                                                (C_15:
                                                                (safe_uint32_of_integer_ 
                                                                 (C_14:
                                                                 ((mul_int (2)) 
                                                                  (integer_of_uint32 !i_15))))))) (1)))))) in
                  void); void end);
               (if ((le_int_ (integer_of_uint32 !child)) (integer_of_uint32 high))
               then void
               else
                (let jessie_39 = (raise (Goto_while_0_break_exc void)) in
                void));
               (if ((le_int_ (integer_of_uint32 (C_29:
                                                (safe_uint32_of_integer_ 
                                                 (C_28:
                                                 ((add_int (integer_of_uint32 !child)) (1))))))) 
                    (integer_of_uint32 high))
               then
                (if ((ge_int_ (integer_of_int32 (C_27:
                                                ((safe_acc_ !int_P_int_M_a_0_5) 
                                                 (C_26:
                                                 ((shift a_0_0) (integer_of_uint32 
                                                                 (C_25:
                                                                 (safe_uint32_of_integer_ 
                                                                  (C_24:
                                                                  ((add_int 
                                                                    (integer_of_uint32 !child)) (1)))))))))))) 
                     (integer_of_int32 (C_23:
                                       ((safe_acc_ !int_P_int_M_a_0_5) 
                                        (C_22:
                                        ((shift a_0_0) (integer_of_uint32 !child)))))))
                then
                 (C_21:
                 (let jessie_41 =
                 (child := (C_20:
                           (safe_uint32_of_integer_ (C_19:
                                                    ((add_int (integer_of_uint32 !child)) (1)))))) in
                 void)) else void) else void);
               (if ((ge_int_ (integer_of_int32 v_0)) (integer_of_int32 
                                                      (C_31:
                                                      ((safe_acc_ !int_P_int_M_a_0_5) 
                                                       (C_30:
                                                       ((shift a_0_0) 
                                                        (integer_of_uint32 !child)))))))
               then
                (let jessie_42 = (raise (Goto_while_0_break_exc void)) in
                void) else void);
               (C_36:
               begin
                 (let jessie_48 =
                 (let jessie_44 =
                 (C_33:
                 ((safe_acc_ !int_P_int_M_a_0_5) (C_32:
                                                 ((shift a_0_0) (integer_of_uint32 !child))))) in
                 (let jessie_47 =
                 (C_34: ((shift a_0_0) (integer_of_uint32 !i_15))) in
                 (((safe_upd_ int_P_int_M_a_0_5) jessie_47) jessie_44))) in
                 void);
                (assert
                { (JC_60:
                  Hnode(a_0_0, integer_of_uint32(i_15),
                  integer_of_uint32(high), int_P_int_M_a_0_5)) }; void);
                void; (C_38: begin   (i_15 := !child); !i_15 end) end) end in
              void); (raise (Loop_continue_exc void)) end in void) with
            Loop_continue_exc jessie_3 -> void end end done);
        (raise (Goto_while_0_break_exc void)) end in void) with
       Goto_while_0_break_exc jessie_1 -> (while_0_break: void) end;
      (C_41:
      begin
        (let jessie_58 =
        (let jessie_54 = v_0 in
        (let jessie_57 = (C_39: ((shift a_0_0) (integer_of_uint32 !i_15))) in
        (((safe_upd_ int_P_int_M_a_0_5) jessie_57) jessie_54))) in void);
       (raise Return) end) end))); (raise Return) end with Return -> void end)
  { (JC_19:
    ((JC_17:
     ((JC_15:
      Permut(contents(a_0_0@, int_P_int_M_a_0_5),
      update(contents(a_0_0@, int_P_int_M_a_0_5@), integer_of_uint32(low@),
      v_0@), integer_of_uint32(low@), integer_of_uint32(high@)))
     and (JC_16:
         H(a_0_0@, integer_of_uint32(low@), integer_of_uint32(high@),
         int_P_int_M_a_0_5))))
    and (JC_18:
        not_assigns(int_P_a_0_5_alloc_table@, int_P_int_M_a_0_5@,
        int_P_int_M_a_0_5,
        pset_range(pset_singleton(a_0_0@), integer_of_uint32(low@),
        integer_of_uint32(high@)))))) }

let sift_down_safety =
 fun (a_0_0 : int_P pointer) (low : uint32) (high : uint32) (v_0 : int32) (int_P_int_M_a_0_5 : (int_P, int32) memory ref) (int_P_a_0_5_alloc_table : int_P alloc_table) ->
  { (JC_13:
    ((JC_8: le_int((0), integer_of_uint32(low)))
    and ((JC_9: le_int(integer_of_uint32(low), integer_of_uint32(high)))
        and ((JC_10:
             le_int(offset_min(int_P_a_0_5_alloc_table, a_0_0),
             integer_of_uint32(low)))
            and ((JC_11:
                 ge_int(offset_max(int_P_a_0_5_alloc_table, a_0_0),
                 integer_of_uint32(high)))
                and (JC_12:
                    H(a_0_0, add_int(integer_of_uint32(low), (1)),
                    integer_of_uint32(high), int_P_int_M_a_0_5))))))) }
  (init:
  try
   begin
     (let i_15 = ref (any_uint32 void) in
     (let child = ref (any_uint32 void) in
     (C_1:
     begin
       (let jessie_12 = (i_15 := low) in void);
      try
       (let jessie_28 =
       begin
         (loop_1:
         while true do
         { invariant (JC_35: true)
           variant (JC_48 : sub_int(integer_of_uint32(high),
                            integer_of_uint32(i_15))) }
          begin
            [ { } unit reads i_15,int_P_int_M_a_0_5
              { (JC_33:
                ((JC_27:
                 le_int(integer_of_uint32(low), integer_of_uint32(i_15)))
                and ((JC_28:
                     le_int(integer_of_uint32(i_15), integer_of_uint32(high)))
                    and ((JC_29:
                         Permut(contents(a_0_0, int_P_int_M_a_0_5),
                         contents(a_0_0@init, int_P_int_M_a_0_5@init),
                         integer_of_uint32(low), integer_of_uint32(high)))
                        and ((JC_30:
                             (forall k_2:int32.
                              ((lt_int(integer_of_uint32(low),
                                integer_of_int32(k_2))
                               and le_int(integer_of_int32(k_2),
                                   integer_of_uint32(high))) ->
                               Hnode(a_0_0, integer_of_int32(k_2),
                               integer_of_uint32(high), int_P_int_M_a_0_5))))
                            and ((JC_31:
                                 (lt_int(integer_of_uint32(low),
                                  integer_of_uint32(i_15)) ->
                                  Hnode(a_0_0, integer_of_uint32(low),
                                  integer_of_uint32(high), int_P_int_M_a_0_5)))
                                and (JC_32:
                                    (le_int(integer_of_uint32(low),
                                     div_int(sub_int(integer_of_uint32(i_15),
                                             (1)),
                                     (2))) ->
                                     ge_int(integer_of_int32(select(int_P_int_M_a_0_5,
                                                             shift(a_0_0,
                                                             div_int(
                                                             sub_int(
                                                             integer_of_uint32(i_15),
                                                             (1)), (2))))),
                                     integer_of_int32(v_0)))))))))) } ];
           try
            (let jessie_27 =
            begin
              (let jessie_26 =
              begin
                (C_18:
                begin
                  (let jessie_14 =
                  (child := (C_17:
                            (JC_38:
                            (uint32_of_integer_ (C_16:
                                                ((add_int (integer_of_uint32 
                                                           (C_15:
                                                           (JC_37:
                                                           (uint32_of_integer_ 
                                                            (C_14:
                                                            ((mul_int (2)) 
                                                             (integer_of_uint32 !i_15)))))))) (1))))))) in
                  void); void end);
               (if ((le_int_ (integer_of_uint32 !child)) (integer_of_uint32 high))
               then void
               else
                (let jessie_15 = (raise (Goto_while_0_break_exc void)) in
                void));
               (if ((le_int_ (integer_of_uint32 (C_29:
                                                (JC_39:
                                                (uint32_of_integer_ (C_28:
                                                                    ((add_int 
                                                                    (integer_of_uint32 !child)) (1)))))))) 
                    (integer_of_uint32 high))
               then
                (if ((ge_int_ (integer_of_int32 (C_27:
                                                (JC_41:
                                                ((((offset_acc_ int_P_a_0_5_alloc_table) !int_P_int_M_a_0_5) a_0_0) 
                                                 (integer_of_uint32 (C_25:
                                                                    (JC_40:
                                                                    (uint32_of_integer_ 
                                                                    (C_24:
                                                                    ((add_int 
                                                                    (integer_of_uint32 !child)) (1)))))))))))) 
                     (integer_of_int32 (C_23:
                                       (JC_42:
                                       ((((offset_acc_ int_P_a_0_5_alloc_table) !int_P_int_M_a_0_5) a_0_0) 
                                        (integer_of_uint32 !child))))))
                then
                 (C_21:
                 (let jessie_17 =
                 (child := (C_20:
                           (JC_43:
                           (uint32_of_integer_ (C_19:
                                               ((add_int (integer_of_uint32 !child)) (1))))))) in
                 void)) else void) else void);
               (if ((ge_int_ (integer_of_int32 v_0)) (integer_of_int32 
                                                      (C_31:
                                                      (JC_44:
                                                      ((((offset_acc_ int_P_a_0_5_alloc_table) !int_P_int_M_a_0_5) a_0_0) 
                                                       (integer_of_uint32 !child))))))
               then
                (let jessie_18 = (raise (Goto_while_0_break_exc void)) in
                void) else void);
               (C_36:
               begin
                 (let jessie_24 =
                 (let jessie_20 =
                 (C_33:
                 (JC_45:
                 ((((offset_acc_ int_P_a_0_5_alloc_table) !int_P_int_M_a_0_5) a_0_0) 
                  (integer_of_uint32 !child)))) in
                 (let jessie_21 = a_0_0 in
                 (let jessie_22 = (integer_of_uint32 !i_15) in
                 (let jessie_23 = ((shift jessie_21) jessie_22) in
                 (JC_46:
                 (((((offset_upd_ int_P_a_0_5_alloc_table) int_P_int_M_a_0_5) jessie_21) jessie_22) jessie_20)))))) in
                 void);
                [ { } unit reads i_15,int_P_int_M_a_0_5
                  { (JC_47:
                    Hnode(a_0_0, integer_of_uint32(i_15),
                    integer_of_uint32(high), int_P_int_M_a_0_5)) } ]; void;
                (C_38: begin   (i_15 := !child); !i_15 end) end) end in void);
             (raise (Loop_continue_exc void)) end in void) with
            Loop_continue_exc jessie_3 -> void end end done);
        (raise (Goto_while_0_break_exc void)) end in void) with
       Goto_while_0_break_exc jessie_1 -> (while_0_break: void) end;
      (C_41:
      begin
        (let jessie_34 =
        (let jessie_30 = v_0 in
        (let jessie_31 = a_0_0 in
        (let jessie_32 = (integer_of_uint32 !i_15) in
        (let jessie_33 = ((shift jessie_31) jessie_32) in
        (JC_49:
        (((((offset_upd_ int_P_a_0_5_alloc_table) int_P_int_M_a_0_5) jessie_31) jessie_32) jessie_30)))))) in
        void); (raise Return) end) end))); (raise Return) end with Return ->
   void end) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C heapsort.jessie --quiet -f heapsort.makefile project
why --project [...] why/heapsort.why
<project name="heapsort" context="why/heapsort_ctx.why">
  <lemma name="H_init">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/heapsort_po1.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "143" begin = "0" end = "168"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="H_max">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/heapsort_po2.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "154" begin = "0" end = "222"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="H_reduce">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/heapsort_po3.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "149" begin = "0" end = "140"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="div2_1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/heapsort_po4.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "162" begin = "0" end = "100"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="div2_2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/heapsort_po5.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "166" begin = "0" end = "98"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="div2_3">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/heapsort_po6.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "170" begin = "0" end = "94"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="div2_4">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/heapsort_po7.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "174" begin = "0" end = "170"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="div2_5">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/heapsort_po8.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "181" begin = "0" end = "170"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <function name="div2_5">
    <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "181" begin = "0" end = "170"/>
  </function>
  <function name="div2_4">
    <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "174" begin = "0" end = "170"/>
  </function>
  <function name="div2_3">
    <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "170" begin = "0" end = "94"/>
  </function>
  <function name="div2_2">
    <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "166" begin = "0" end = "98"/>
  </function>
  <function name="div2_1">
    <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "162" begin = "0" end = "100"/>
  </function>
  <function name="H_reduce">
    <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "149" begin = "0" end = "140"/>
  </function>
  <function name="H_max">
    <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "154" begin = "0" end = "222"/>
  </function>
  <function name="H_init">
    <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "143" begin = "0" end = "168"/>
  </function>
  <function name="Function sift_down">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/heapsort_po90.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "124" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po91.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "124" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po92.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "124" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po93.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "124" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po94.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "125" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po95.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "125" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po96.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "125" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po97.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "125" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po98.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "125" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po99.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "125" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po100.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "125" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po101.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "125" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po102.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "125" begin = "51" end = "56"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po103.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "125" begin = "51" end = "56"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po104.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "126" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po105.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "126" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po106.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "127" begin = "4" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po107.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "127" begin = "4" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po108.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "244" begin = "24" end = "234"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po109.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "244" begin = "24" end = "234"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po110.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "122" begin = "8" end = "16"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/heapsort_po111.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "122" begin = "8" end = "16"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/heapsort_po112.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "257" begin = "15" end = "52"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po113.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "257" begin = "15" end = "52"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/heapsort_po70.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "114" begin = "8" end = "16"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po71.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "114" begin = "15" end = "24"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po72.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "115" begin = "8" end = "61"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po73.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "116" begin = "8" end = "62"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po74.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "117" begin = "8" end = "41"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po75.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "118" begin = "8" end = "44"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po76.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "207" begin = "9" end = "2537"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po77.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "207" begin = "9" end = "2537"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po78.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "128" begin = "15" end = "32"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/heapsort_po79.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "114" begin = "8" end = "16"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po80.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "114" begin = "15" end = "24"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po81.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "115" begin = "8" end = "61"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po82.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "116" begin = "8" end = "62"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po83.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "117" begin = "8" end = "41"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po84.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "118" begin = "8" end = "44"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po85.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "207" begin = "9" end = "2537"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po86.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "207" begin = "9" end = "2537"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po87.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "108" begin = "6" end = "71"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heapsort_po88.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "109" begin = "6" end = "21"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heapsort_po89.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "111" begin = "5" end = "14"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function heapsort">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/heapsort_po31.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "149" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/heapsort_po32.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "149" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po33.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "149" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po34.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "149" begin = "29" end = "38"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po35.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "149" begin = "29" end = "38"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po36.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "149" begin = "29" end = "38"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po37.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "149" begin = "29" end = "38"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po38.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "149" begin = "29" end = "38"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po39.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "149" begin = "29" end = "38"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po40.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "149" begin = "29" end = "38"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po41.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "149" begin = "29" end = "38"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po42.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "294" begin = "23" end = "303"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/heapsort_po43.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "294" begin = "23" end = "303"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/heapsort_po44.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "294" begin = "23" end = "303"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/heapsort_po45.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "294" begin = "23" end = "303"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/heapsort_po46.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "294" begin = "23" end = "303"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/heapsort_po47.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "149" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po48.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "149" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po49.why">
      <location file = "why/heapsort.why" line = "985" begin = "21" end = "55"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/heapsort_po50.why">
      <location file = "why/heapsort.why" line = "985" begin = "21" end = "55"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/heapsort_po51.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "157" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po52.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "157" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po53.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "158" begin = "4" end = "7"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po54.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "158" begin = "4" end = "7"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po55.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "159" begin = "4" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po56.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "159" begin = "4" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po57.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "327" begin = "27" end = "287"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po58.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "327" begin = "27" end = "287"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/heapsort_po59.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "160" begin = "4" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po60.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "160" begin = "4" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po61.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "331" begin = "27" end = "164"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/heapsort_po62.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "331" begin = "27" end = "164"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/heapsort_po63.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "331" begin = "27" end = "164"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/heapsort_po64.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "331" begin = "27" end = "164"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/heapsort_po65.why">
      <location file = "PPCHOME/tests/jessie/heapsort.jessie/heapsort.jc" line = "331" begin = "27" end = "164"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/heapsort_po66.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "157" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po67.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "157" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/heapsort_po68.why">
      <location file = "why/heapsort.why" line = "1058" begin = "22" end = "57"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/heapsort_po69.why">
      <location file = "why/heapsort.why" line = "1058" begin = "22" end = "57"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/heapsort_po9.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "144" begin = "8" end = "14"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po10.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "144" begin = "13" end = "18"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po11.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "145" begin = "8" end = "58"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po12.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "146" begin = "8" end = "20"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po13.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "144" begin = "8" end = "14"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po14.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "144" begin = "13" end = "18"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po15.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "145" begin = "8" end = "58"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po16.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "146" begin = "8" end = "20"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po17.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "151" begin = "8" end = "14"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po18.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "151" begin = "13" end = "18"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po19.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "152" begin = "8" end = "58"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po20.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "153" begin = "8" end = "18"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po21.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "153" begin = "22" end = "41"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po22.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "154" begin = "8" end = "78"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/heapsort_po23.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "151" begin = "8" end = "14"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po24.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "151" begin = "13" end = "18"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po25.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "152" begin = "8" end = "58"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po26.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "153" begin = "8" end = "18"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po27.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "153" begin = "22" end = "41"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po28.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "154" begin = "8" end = "78"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/heapsort_po29.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "137" begin = "6" end = "52"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/heapsort_po30.why">
      <location file = "PPCHOME/tests/jessie/heapsort.c" line = "138" begin = "6" end = "23"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type char_P

type int32

type int8

type int_P

type int_array

type padding

type uint32

type void_P

logic integer_of_int32 : int32 -> int

predicate Hnode(a_7: int_P pointer, i_7: int, h_6: int,
  int_P_int_M_a_7_3_at_L: (int_P, int32) memory) =
  (((((2 * i_7) + 1) <= h_6) ->
    (integer_of_int32(select(int_P_int_M_a_7_3_at_L, shift(a_7,
    i_7))) >= integer_of_int32(select(int_P_int_M_a_7_3_at_L, shift(a_7,
    ((2 * i_7) + 1)))))) and
   ((((2 * i_7) + 2) <= h_6) ->
    (integer_of_int32(select(int_P_int_M_a_7_3_at_L, shift(a_7,
    i_7))) >= integer_of_int32(select(int_P_int_M_a_7_3_at_L, shift(a_7,
    ((2 * i_7) + 2)))))))

predicate H(a_8: int_P pointer, l_6: int, h_7: int,
  int_P_int_M_a_8_4_at_L: (int_P, int32) memory) =
  (forall i_8:int.
    (((l_6 <= i_8) and (i_8 <= h_7)) -> Hnode(a_8, i_8, h_7,
     int_P_int_M_a_8_4_at_L)))

axiom H_init_as_axiom:
  (forall int_P_int_M_a_9_8_at_L:(int_P, int32) memory.
    (forall a_9:int_P pointer.
      (forall l_7:int.
        (forall h_8:int.
          (((l_7 <= h_8) and (h_8 < ((2 * l_7) + 1))) -> H(a_9, l_7, h_8,
           int_P_int_M_a_9_8_at_L))))))

axiom H_max_as_axiom:
  (forall int_P_int_M_a_11_10_at_L:(int_P, int32) memory.
    (forall a_11:int_P pointer.
      (forall h_10:int.
        (H(a_11, 0, h_10, int_P_int_M_a_11_10_at_L) ->
         (forall i_9:int.
           (((0 <= i_9) and (i_9 <= h_10)) ->
            (integer_of_int32(select(int_P_int_M_a_11_10_at_L, shift(a_11,
            0))) >= integer_of_int32(select(int_P_int_M_a_11_10_at_L,
            shift(a_11, i_9))))))))))

axiom H_reduce_as_axiom:
  (forall int_P_int_M_a_10_9_at_L:(int_P, int32) memory.
    (forall a_10:int_P pointer.
      (forall h_9:int.
        ((0 < h_9) ->
         (H(a_10, 0, h_9, int_P_int_M_a_10_9_at_L) -> H(a_10, 1, (h_9 - 1),
          int_P_int_M_a_10_9_at_L))))))

logic Permut : int_array, int_array, int, int -> prop

axiom Permut_extend:
  (forall a1_4:int_array.
    (forall a2_4:int_array.
      (forall l_4:int.
        (forall h_4:int.
          (forall ll:int.
            (forall hh:int.
              (Permut(a1_4, a2_4, l_4, h_4) ->
               ((ll <= l_4) -> ((h_4 <= hh) -> Permut(a1_4, a2_4, ll, hh))))))))))

axiom Permut_refl:
  (forall a_3:int_array.
    (forall l_0:int. (forall h_0:int. Permut(a_3, a_3, l_0, h_0))))

logic access : int_array, int -> int32

predicate Swap(a1: int_array, a2: int_array, i_3: int, j_0: int) =
  ((integer_of_int32(access(a1, i_3)) = integer_of_int32(access(a2,
   j_0))) and
   ((integer_of_int32(access(a1, j_0)) = integer_of_int32(access(a2,
    i_3))) and
    (forall k:int.
      ((k <> i_3) ->
       ((k <> j_0) -> (integer_of_int32(access(a1,
        k)) = integer_of_int32(access(a2, k))))))))

axiom Permut_swap:
  (forall a1_3:int_array.
    (forall a2_3:int_array.
      (forall l_3:int.
        (forall h_3:int.
          (forall i_4:int.
            (forall j_1:int.
              (((l_3 <= i_4) and (i_4 <= h_3)) ->
               (((l_3 <= j_1) and (j_1 <= h_3)) ->
                (Swap(a1_3, a2_3, i_4, j_1) -> Permut(a1_3, a2_3, l_3, h_3))))))))))

axiom Permut_sym:
  (forall a1_1:int_array.
    (forall a2_1:int_array.
      (forall l_1:int.
        (forall h_1:int.
          (Permut(a1_1, a2_1, l_1, h_1) -> Permut(a2_1, a1_1, l_1, h_1))))))

axiom Permut_trans:
  (forall a1_2:int_array.
    (forall a2_2:int_array.
      (forall a3:int_array.
        (forall l_2:int.
          (forall h_2:int.
            (Permut(a1_2, a2_2, l_2, h_2) ->
             (Permut(a2_2, a3, l_2, h_2) -> Permut(a1_2, a3, l_2, h_2))))))))

predicate Sorted(a_6: int_P pointer, l_5: int, h_5: int,
  int_P_int_M_a_6_2_at_L: (int_P, int32) memory) =
  (forall i_6:int.
    (((l_5 <= i_6) and (i_6 < h_5)) ->
     (integer_of_int32(select(int_P_int_M_a_6_2_at_L, shift(a_6,
     i_6))) <= integer_of_int32(select(int_P_int_M_a_6_2_at_L, shift(a_6,
     (i_6 + 1)))))))

logic contents : int_P pointer, (int_P, int32) memory -> int_array

axiom access_contents:
  (forall int_P_int_M_a_4_1_at_L:(int_P, int32) memory.
    (forall a_5:int_P pointer.
      (forall i_5:int. (integer_of_int32(access(contents(a_5,
        int_P_int_M_a_4_1_at_L),
        i_5)) = integer_of_int32(select(int_P_int_M_a_4_1_at_L, shift(a_5,
        i_5)))))))

logic update : int_array, int, int32 -> int_array

axiom access_update_eq:
  (forall a_1_0:int_array.
    (forall i_1:int.
      (forall v_0_0:int32. (integer_of_int32(access(update(a_1_0, i_1,
        v_0_0), i_1)) = integer_of_int32(v_0_0)))))

axiom access_update_neq:
  (forall a_2:int_array.
    (forall i_2:int.
      (forall j:int.
        (forall v_1:int32.
          ((i_2 <> j) -> (integer_of_int32(access(update(a_2, i_2, v_1),
           j)) = integer_of_int32(access(a_2, j))))))))

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

axiom div2_1_as_axiom:
  (forall i_10:int32.
    ((0 <= integer_of_int32(i_10)) ->
     ((0 <= (integer_of_int32(i_10) / 2)) and
      ((integer_of_int32(i_10) / 2) <= integer_of_int32(i_10)))))

axiom div2_2_as_axiom:
  (forall i_11:int32.
    ((0 < integer_of_int32(i_11)) ->
     ((0 <= (integer_of_int32(i_11) / 2)) and
      ((integer_of_int32(i_11) / 2) < integer_of_int32(i_11)))))

axiom div2_3_as_axiom:
  (forall i_12:int32.
    ((0 <= integer_of_int32(i_12)) ->
     ((integer_of_int32(i_12) - 1) < ((2 * (integer_of_int32(i_12) / 2)) + 1))))

axiom div2_4_as_axiom:
  (forall i_13:int32.
    (forall k_0:int32.
      ((0 <= integer_of_int32(i_13)) ->
       ((0 <= integer_of_int32(k_0)) ->
        ((integer_of_int32(k_0) <> ((integer_of_int32(i_13) - 1) / 2)) ->
         (((2 * integer_of_int32(k_0)) + 1) <> integer_of_int32(i_13)))))))

axiom div2_5_as_axiom:
  (forall i_14:int32.
    (forall k_1:int32.
      ((0 <= integer_of_int32(i_14)) ->
       ((0 <= integer_of_int32(k_1)) ->
        ((integer_of_int32(k_1) <> ((integer_of_int32(i_14) - 1) / 2)) ->
         (((2 * integer_of_int32(k_1)) + 2) <> integer_of_int32(i_14)))))))

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint32 : uint32 -> int

predicate eq_uint32(x: uint32, y: uint32) =
  (integer_of_uint32(x) = integer_of_uint32(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic int_P_tag : int_P tag_id

axiom int_P_int: (int_of_tag(int_P_tag) = 1)

logic int_P_of_pointer_address : unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr:
  (forall p:int_P pointer.
    (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom: parenttag(int_P_tag, bottom_tag)

axiom int_P_tags:
  (forall x:int_P pointer.
    (forall int_P_tag_table:int_P tag_table. instanceof(int_P_tag_table, x,
      int_P_tag)))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_int_P(p: int_P pointer, a: int,
  int_P_alloc_table: int_P alloc_table) = (offset_min(int_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom no_assign_contents_0:
  (forall tmp:int_P pset.
    (forall tmpmem:(int_P, int32) memory.
      (forall tmpalloc:int_P alloc_table.
        (forall int_P_int_M_a_4_1_at_L:(int_P, int32) memory.
          (forall a_4:int_P pointer.
            ((pset_disjoint(tmp, pset_all(pset_singleton(a_4))) and
              not_assigns(tmpalloc, int_P_int_M_a_4_1_at_L, tmpmem, tmp)) ->
             (contents(a_4, int_P_int_M_a_4_1_at_L) = contents(a_4, tmpmem))))))))

axiom no_update_contents_0:
  (forall tmp:int_P pointer.
    (forall tmpval:int32.
      (forall int_P_int_M_a_4_1_at_L:(int_P, int32) memory.
        (forall a_4:int_P pointer.
          ((not in_pset(tmp, pset_all(pset_singleton(a_4)))) ->
           (contents(a_4, int_P_int_M_a_4_1_at_L) = contents(a_4,
           store(int_P_int_M_a_4_1_at_L, tmp, tmpval))))))))

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_int_P(p: int_P pointer, b: int,
  int_P_alloc_table: int_P alloc_table) = (offset_max(int_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

logic uint32_of_integer : int -> uint32

axiom uint32_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 4294967295)) ->
     (integer_of_uint32(uint32_of_integer(x)) = x)))

axiom uint32_range:
  (forall x:uint32.
    ((0 <= integer_of_uint32(x)) and (integer_of_uint32(x) <= 4294967295)))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

