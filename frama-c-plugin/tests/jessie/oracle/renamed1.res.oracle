Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only renamed1.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD renamed1.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir renamed1.jessie
[jessie] File renamed1.jessie/renamed1.jc written.
[jessie] File renamed1.jessie/renamed1.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag floatP = {
  float floatM: 32;
}

type floatP = [floatP]

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

int32 Frama_C_entropy_source;

int32 Frama_C_interval(int32 min_0, int32 max_0)
behavior default:
  assigns Frama_C_entropy_source;
  ensures (C_1 : true);
;

float Frama_C_float_interval(float min, float max)
behavior default:
  assigns Frama_C_entropy_source;
  ensures (C_2 : true);
;

int32 F2(int32 V2)
behavior default:
  ensures (C_5 : true);
{  
   (var int32 V1);
   
   {  (C_4 : (V1 = (C_3 : Frama_C_interval(0, 63))));
      
      (return V1)
   }
}

int32 F3(int32 V4)
behavior default:
  ensures (C_8 : true);
{  
   (var int32 V3);
   
   {  (C_7 : (V3 = (C_6 : Frama_C_interval(0, 63))));
      
      (return V3)
   }
}

int32 F4(int32 V6)
behavior default:
  ensures (C_11 : true);
{  
   (var int32 V5);
   
   {  (C_10 : (V5 = (C_9 : Frama_C_interval(0, 31))));
      
      (return V5)
   }
}

int32 G1;

int32 G2;

intP[0..63] G3;

invariant valid_G3 :
((\offset_min(G3) <= 0) && (\offset_max(G3) >= 63))

int32 G4;

int32 G5;

int32 G6;

int32 F5(int32 V8)
behavior default:
  ensures (C_18 : true);
{  
   (var int32 V7);
   
   {  
      {  
         (assert for default: (C_14 : (1 <= (2147483647 >>> V8))));
         
         (assert for default: (C_13 : (V8 < 32)));
         
         (assert for default: (C_12 : (V8 >= 0)));
         (C_17 : (V7 = (C_16 : ((C_15 : (1 << V8)) :> int32))))
      };
      
      (return V7)
   }
}

int32 G7;

floatP[0..63] G8;

invariant valid_G8 :
((\offset_min(G8) <= 0) && (\offset_max(G8) >= 63))

floatP[0..63] G9;

invariant valid_G9 :
((\offset_min(G9) <= 0) && (\offset_max(G9) >= 63))

floatP[0..63] G10;

invariant valid_G10 :
((\offset_min(G10) <= 0) && (\offset_max(G10) >= 63))

floatP[0..31] G11;

invariant valid_G11 :
((\offset_min(G11) <= 0) && (\offset_max(G11) >= 31))

int32 G12;

intP[0..1999] G13;

invariant valid_G13 :
((\offset_min(G13) <= 0) && (\offset_max(G13) >= 1999))

intP[..] ptr_bas_loc_ram;

int32 G15;

float G16;

float G17;

float G18;

float G19;

float G20;

float G21;

float G22;

int32 G23;

float G24;

float G25;

float G26;

float G27;

float G28;

float G29;

float G30;

float G31;

float G32;

intP[..] G33;

intP[..] G34;

unit F6()
behavior default:
  ensures (C_103 : true);
{  
   (var float V9);
   
   (var float V10);
   
   (var float V11);
   
   (var float V12);
   
   (var float V13);
   
   (var float V14);
   
   (var float V15);
   
   (var float V16);
   
   (var float V17);
   
   (var int32 V18);
   
   (var intP[..] ptr_bas_loc);
   
   (var int32 V20);
   
   (var int32 V21);
   
   (var int32 V22);
   
   (var int32 V23);
   
   {  (C_22 : (let __cil_tmp = (C_19 : Frama_C_interval(2, 2000))
              in (C_21 : (V18 = (C_20 : (__cil_tmp :> int32))))));
      (C_26 : (let __cil_tmp_18 = (C_23 : Frama_C_interval(0, 11))
              in (C_25 : (G15 = (C_24 : (__cil_tmp_18 :> int32))))));
      (C_27 : (ptr_bas_loc = G13));
      (C_28 : (G33 = ptr_bas_loc));
      (if (V18 >= 2) then 
      {  (C_38 : (G4 = (C_37 : ((C_36 : ((C_35 : ((C_34 : (V18 /
                                                            (C_33 : (
                                                            (C_32 : (G5 + 1)) :> int32)))) :> int32)) +
                                          1)) :> int32))));
         (C_40 : (V9 = (C_39 : ((0.0 :> double) :> float))));
         (C_44 : (V10 = (C_43 : ((C_42 : ((511.5 :> double) *
                                           (C_41 : (G20 :> double)))) :> float))));
         (C_48 : (V11 = (C_47 : ((C_46 : ((511.5 :> double) *
                                           (C_45 : (G20 :> double)))) :> float))));
         (C_50 : (V12 = (C_49 : ((0.0 :> double) :> float))));
         (C_52 : (V13 = (C_51 : ((0.0 :> double) :> float))));
         (C_54 : (V14 = (C_53 : ((0.0 :> double) :> float))));
         (C_56 : (V15 = (C_55 : ((0.0 :> double) :> float))));
         (C_58 : (V20 = (C_57 : F2(G15))));
         (C_60 : (G18 = (C_59 : (G8 + V20).floatM)));
         (C_62 : (V21 = (C_61 : F3(G15))));
         (C_66 : (G16 = (C_65 : ((C_64 : (G9 + V21).floatM) /
                                  (C_63 : (G1 :> float))))));
         (C_68 : (V22 = (C_67 : F3(G15))));
         (C_70 : (G17 = (C_69 : (G10 + V22).floatM)));
         (C_72 : (V23 = (C_71 : F4(G15))));
         (C_74 : (G19 = (C_73 : (G11 + V23).floatM)));
         (C_79 : (G21 = (C_78 : ((C_77 : ((1.0 :> double) /
                                           (C_76 : ((C_75 : (G16 :> double)) +
                                                     (1.0 :> double))))) :> float))));
         (C_81 : (V16 = (C_80 : (G17 * G21))));
         (C_87 : (V17 = (C_86 : ((C_85 : ((C_84 : ((C_83 : (G16 :> double)) -
                                                    (1.0 :> double))) *
                                           (C_82 : (G21 :> double)))) :> float))));
         (C_90 : (G22 = (C_89 : ((C_88 : (G18 * G16)) * G21))));
         (C_91 : (G23 = 0));
         (C_92 : (G24 = V9));
         (C_93 : (G25 = V10));
         (C_94 : (G26 = V11));
         (C_95 : (G27 = V12));
         (C_96 : (G28 = V13));
         (C_97 : (G29 = V14));
         (C_98 : (G30 = V15));
         (C_99 : (G31 = V16));
         (C_100 : (G32 = V17));
         (C_101 : (G12 = V18));
         (C_102 : (ptr_bas_loc_ram = ptr_bas_loc))
      } else 
      {  (C_30 : ((C_29 : (G3 + G15).intM) = 0));
         (C_31 : (G4 = 0))
      });
      
      (return ())
   }
}

unit F7()
behavior default:
  ensures (C_210 : true);
{  
   (var float V24);
   
   (var float V25);
   
   (var float V26);
   
   (var float V27);
   
   (var float V28);
   
   (var float V29);
   
   (var float V30);
   
   (var float V31);
   
   (var float V32);
   
   (var int32 V33);
   
   (var int32 V34);
   
   (var int32 V35);
   
   (var intP[..] ptr_bas_loc_0);
   
   (var int32 V37);
   
   {  (if (G12 >= 2) then 
      {  (C_104 : (V24 = G24));
         (C_105 : (V25 = G25));
         (C_106 : (V26 = G26));
         (C_107 : (V27 = G27));
         (C_108 : (V28 = G28));
         (C_109 : (V29 = G29));
         (C_110 : (V30 = G30));
         (C_111 : (V31 = G31));
         (C_112 : (V32 = G32));
         (C_113 : (V33 = G12));
         (C_114 : (ptr_bas_loc_0 = ptr_bas_loc_ram));
         (C_119 : (V35 = (C_118 : ((C_117 : ((C_116 : ((C_115 : (G23 + G5)) :> int32)) -
                                              2)) :> int32))));
         (if (V35 >= (C_124 : ((C_123 : (V33 - 2)) :> int32))) then (C_122 : (V35 = 
                                                                    (C_121 : (
                                                                    (C_120 : 
                                                                    (V33 -
                                                                    2)) :> int32)))) else ());
         (C_125 : (V34 = G23));
         
         {  
            loop 
            while (true)
            {  
               {  (if (V34 <= V35) then () else 
                  (goto while_0_break));
                  
                  {  (C_128 : (V24 = (C_127 : ((C_126 : ptr_bas_loc_0.intM) :> float))));
                     (C_130 : (ptr_bas_loc_0 = (C_129 : (ptr_bas_loc_0 + 1))));
                     (C_136 : (V27 = (C_135 : ((C_134 : ((C_133 : (V24 - V26)) +
                                                          (C_132 : (V31 *
                                                                    V28)))) +
                                                (C_131 : (V32 * V29))))));
                     (if ((C_141 : (V27 :> double)) >= (0.0 :> double)) then 
                     (C_140 : (V30 = (C_139 : (V30 + V27)))) else (C_138 : (V30 = 
                                                                  (C_137 : 
                                                                  (V30 -
                                                                    V27)))));
                     (C_142 : (V26 = V25));
                     (C_143 : (V25 = V24));
                     (C_144 : (V29 = V28));
                     (C_145 : (V28 = V27));
                     (C_148 : (V34 = (C_147 : ((C_146 : (V34 + 1)) :> int32))))
                  }
               }
            };
            (while_0_break : ())
         };
         (if (V35 >= (C_209 : ((C_208 : (V33 - 2)) :> int32))) then 
         {  (C_165 : (V24 = (C_164 : ((C_163 : ptr_bas_loc_0.intM) :> float))));
            (C_171 : (V27 = (C_170 : ((C_169 : ((C_168 : (V24 - V26)) +
                                                 (C_167 : (V31 * V28)))) +
                                       (C_166 : (V32 * V29))))));
            (if ((C_184 : (V27 :> double)) >= (0.0 :> double)) then (C_183 : (V30 = 
                                                                    (C_182 : (
                                                                    (C_181 : 
                                                                    ((C_180 : 
                                                                    ((2.0 :> double) *
                                                                    (C_179 : (V30 :> double)))) +
                                                                    (C_178 : (V27 :> double)))) :> float)))) else 
            (C_177 : (V30 = (C_176 : ((C_175 : ((C_174 : ((2.0 :> double) *
                                                           (C_173 : (V30 :> double)))) -
                                                 (C_172 : (V27 :> double)))) :> float)))));
            (C_188 : (V30 = (C_187 : ((C_186 : ((C_185 : (G22 * G19)) * V30)) /
                                       G20))));
            (C_192 : (V30 = (C_191 : ((C_190 : ((C_189 : (V30 :> double)) *
                                                 (64.0 :> double))) :> float))));
            (if ((C_199 : (V30 :> double)) <= (65535.0 :> double)) then 
            (C_198 : ((C_197 : (G3 + G15).intM) = (C_196 : \truncate_real_to_int(
                                                  (C_195 : (V30 :> real)))))) else 
            (C_194 : ((C_193 : (G3 + G15).intM) = 65535)));
            (C_201 : (V37 = (C_200 : F5(G15))));
            (C_204 : (G6 = (C_203 : ((C_202 : (G6 | V37)) :> int32))));
            (if (G6 != 0) then (C_206 : (G7 = 1)) else (C_205 : (G7 = 0)));
            (C_207 : (G34 = ptr_bas_loc_0))
         } else 
         {  (C_151 : (G23 = (C_150 : ((C_149 : (V35 + 1)) :> int32))));
            (C_152 : (G24 = V24));
            (C_153 : (G25 = V25));
            (C_154 : (G26 = V26));
            (C_155 : (G27 = V27));
            (C_156 : (G28 = V28));
            (C_157 : (G29 = V29));
            (C_158 : (G30 = V30));
            (C_159 : (G31 = V31));
            (C_160 : (G32 = V32));
            (C_161 : (G12 = V33));
            (C_162 : (ptr_bas_loc_ram = ptr_bas_loc_0))
         })
      } else ());
      
      (return ())
   }
}

unit main()
behavior default:
  ensures (C_225 : true);
{  
   (var int32 V38);
   
   {  (C_216 : (let __cil_tmp =
               (C_213 : Frama_C_float_interval((C_211 : ((1.0 :> double) :> float)),
                                               (C_212 : ((1000.0 :> double) :> float))))
               in (C_215 : (G20 = (C_214 : (__cil_tmp :> float))))));
      (C_218 : (G5 = (C_217 : Frama_C_interval(10, 2000))));
      (C_219 : F6());
      (C_220 : (V38 = 0));
      
      {  
         loop 
         while (true)
         {  
            {  (if (V38 < G4) then () else 
               (goto while_0_break));
               
               {  (C_221 : F7());
                  (C_224 : (V38 = (C_223 : ((C_222 : (V38 + 1)) :> int32))))
               }
            }
         };
         (while_0_break : ())
      };
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs renamed1.jessie/renamed1.cloc renamed1.jessie/renamed1.jc
type G10_4

type G11_5

type G13_6

type G3_1

type G8_2

type G9_3

type charP

type floatP

type int32

type int8

type intP

type padding

type voidP

logic G1:  -> int32

logic G10:  -> floatP pointer

logic G11:  -> floatP pointer

logic G13:  -> intP pointer

logic G2:  -> int32

logic G3:  -> intP pointer

logic G8:  -> floatP pointer

logic G9:  -> floatP pointer

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic floatP_tag:  -> floatP tag_id

axiom floatP_int : (int_of_tag(floatP_tag) = (1))

logic floatP_of_pointer_address: unit pointer -> floatP pointer

axiom floatP_of_pointer_address_of_pointer_addr :
 (forall p:floatP pointer.
  (p = floatP_of_pointer_address(pointer_address(p))))

axiom floatP_parenttag_bottom : parenttag(floatP_tag, bottom_tag)

axiom floatP_tags :
 (forall x:floatP pointer.
  (forall floatP_tag_table:floatP tag_table.
   instanceof(floatP_tag_table, x, floatP_tag)))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_floatP(p:floatP pointer, a:int,
 floatP_alloc_table:floatP alloc_table) =
 (offset_min(floatP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_floatP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(floatP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_floatP(p:floatP pointer, b:int,
 floatP_alloc_table:floatP alloc_table) =
 (offset_max(floatP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_floatP(p:floatP pointer, a:int, b:int,
 floatP_alloc_table:floatP alloc_table) =
 ((offset_min(floatP_alloc_table, p) = a)
 and (offset_max(floatP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_floatP(p:floatP pointer, a:int, b:int,
 floatP_alloc_table:floatP alloc_table) =
 ((offset_min(floatP_alloc_table, p) = a)
 and (offset_max(floatP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate valid_G10(floatP_G10_4_alloc_table:floatP alloc_table) =
 (le_int(offset_min(floatP_G10_4_alloc_table, G10), (0))
 and ge_int(offset_max(floatP_G10_4_alloc_table, G10), (63)))

predicate valid_G11(floatP_G11_5_alloc_table:floatP alloc_table) =
 (le_int(offset_min(floatP_G11_5_alloc_table, G11), (0))
 and ge_int(offset_max(floatP_G11_5_alloc_table, G11), (31)))

predicate valid_G13(intP_G13_6_alloc_table:intP alloc_table) =
 (le_int(offset_min(intP_G13_6_alloc_table, G13), (0))
 and ge_int(offset_max(intP_G13_6_alloc_table, G13), (1999)))

predicate valid_G3(intP_G3_1_alloc_table:intP alloc_table) =
 (le_int(offset_min(intP_G3_1_alloc_table, G3), (0))
 and ge_int(offset_max(intP_G3_1_alloc_table, G3), (63)))

predicate valid_G8(floatP_G8_2_alloc_table:floatP alloc_table) =
 (le_int(offset_min(floatP_G8_2_alloc_table, G8), (0))
 and ge_int(offset_max(floatP_G8_2_alloc_table, G8), (63)))

predicate valid_G9(floatP_G9_3_alloc_table:floatP alloc_table) =
 (le_int(offset_min(floatP_G9_3_alloc_table, G9), (0))
 and ge_int(offset_max(floatP_G9_3_alloc_table, G9), (63)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_floatP(p:floatP pointer, a:int, b:int,
 floatP_alloc_table:floatP alloc_table) =
 ((offset_min(floatP_alloc_table, p) <= a)
 and (offset_max(floatP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_floatP(p:floatP pointer, a:int, b:int,
 floatP_alloc_table:floatP alloc_table) =
 ((offset_min(floatP_alloc_table, p) <= a)
 and (offset_max(floatP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

parameter intP_G13_6_alloc_table : intP alloc_table ref

parameter intP_G3_1_alloc_table : intP alloc_table ref

parameter floatP_G11_5_alloc_table : floatP alloc_table ref

parameter floatP_G10_4_alloc_table : floatP alloc_table ref

parameter floatP_G9_3_alloc_table : floatP alloc_table ref

parameter floatP_G8_2_alloc_table : floatP alloc_table ref

parameter Frama_C_entropy_source : int32 ref

parameter F2 :
 V2:int32 ->
  { } int32
  reads floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table
  writes Frama_C_entropy_source
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter F2_requires :
 V2:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table))))))))}
  int32
  reads floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table
  writes Frama_C_entropy_source
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter F3 :
 V4:int32 ->
  { } int32
  reads floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table
  writes Frama_C_entropy_source
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter F3_requires :
 V4:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table))))))))}
  int32
  reads floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table
  writes Frama_C_entropy_source
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter F4 :
 V6:int32 ->
  { } int32
  reads floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table
  writes Frama_C_entropy_source
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter F4_requires :
 V6:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table))))))))}
  int32
  reads floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table
  writes Frama_C_entropy_source
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter F5 :
 V8:int32 ->
  { } int32
  reads floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter F5_requires :
 V8:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table))))))))}
  int32
  reads floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter floatP_floatM_G11_5 : (floatP, single) memory ref

parameter floatP_floatM_G10_4 : (floatP, single) memory ref

parameter floatP_floatM_G9_3 : (floatP, single) memory ref

parameter floatP_floatM_G8_2 : (floatP, single) memory ref

parameter G21 : single ref

parameter G20 : single ref

parameter G18 : single ref

parameter G17 : single ref

parameter G16 : single ref

parameter G15 : int32 ref

parameter G5 : int32 ref

parameter intP_intM_G3_1 : (intP, int32) memory ref

parameter G33 : intP pointer ref

parameter G32 : single ref

parameter G31 : single ref

parameter G30 : single ref

parameter G29 : single ref

parameter G28 : single ref

parameter G27 : single ref

parameter G26 : single ref

parameter G25 : single ref

parameter G24 : single ref

parameter G23 : int32 ref

parameter G22 : single ref

parameter G19 : single ref

parameter ptr_bas_loc_ram : intP pointer ref

parameter G12 : int32 ref

parameter G4 : int32 ref

parameter F6 :
 tt:unit ->
  { } unit
  reads G15,G16,G17,G18,G20,G21,G5,floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,floatP_floatM_G10_4,floatP_floatM_G11_5,floatP_floatM_G8_2,floatP_floatM_G9_3,intP_G13_6_alloc_table,intP_G3_1_alloc_table
  writes Frama_C_entropy_source,G12,G15,G16,G17,G18,G19,G21,G22,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G33,G4,intP_intM_G3_1,ptr_bas_loc_ram
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter F6_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table))))))))}
  unit
  reads G15,G16,G17,G18,G20,G21,G5,floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,floatP_floatM_G10_4,floatP_floatM_G11_5,floatP_floatM_G8_2,floatP_floatM_G9_3,intP_G13_6_alloc_table,intP_G3_1_alloc_table
  writes Frama_C_entropy_source,G12,G15,G16,G17,G18,G19,G21,G22,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G33,G4,intP_intM_G3_1,ptr_bas_loc_ram
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter intP_intM_G13_6 : (intP, int32) memory ref

parameter G6 : int32 ref

parameter G34 : intP pointer ref

parameter G7 : int32 ref

parameter F7 :
 tt:unit ->
  { } unit
  reads G12,G15,G19,G20,G22,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G5,G6,floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table,intP_intM_G13_6,ptr_bas_loc_ram
  writes G12,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G34,G6,G7,intP_intM_G3_1,ptr_bas_loc_ram
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter F7_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table))))))))}
  unit
  reads G12,G15,G19,G20,G22,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G5,G6,floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table,intP_intM_G13_6,ptr_bas_loc_ram
  writes G12,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G34,G6,G7,intP_intM_G3_1,ptr_bas_loc_ram
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter Frama_C_float_interval :
 min:single ->
  max:single ->
   { } single
   reads floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table
   writes Frama_C_entropy_source
   { (JC_<somenum>:
     ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
     and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
         and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
             and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                 and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                     and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter Frama_C_float_interval_requires :
 min:single ->
  max:single ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
     and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
         and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
             and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                 and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                     and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table))))))))}
   single
   reads floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table
   writes Frama_C_entropy_source
   { (JC_<somenum>:
     ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
     and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
         and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
             and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                 and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                     and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter Frama_C_interval :
 min_0:int32 ->
  max_0:int32 ->
   { } int32
   reads floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table
   writes Frama_C_entropy_source
   { (JC_<somenum>:
     ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
     and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
         and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
             and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                 and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                     and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter Frama_C_interval_requires :
 min_0:int32 ->
  max_0:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
     and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
         and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
             and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                 and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                     and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table))))))))}
   int32
   reads floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,intP_G13_6_alloc_table,intP_G3_1_alloc_table
   writes Frama_C_entropy_source
   { (JC_<somenum>:
     ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
     and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
         and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
             and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                 and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                     and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter floatP_alloc_table : floatP alloc_table ref

parameter floatP_tag_table : floatP tag_table ref

parameter alloc_struct_floatP :
 n:int ->
  floatP_alloc_table:floatP alloc_table ref ->
   floatP_tag_table:floatP tag_table ref ->
    { } floatP pointer writes floatP_alloc_table,floatP_tag_table
    { (strict_valid_struct_floatP(result, (0), sub_int(n, (1)),
       floatP_alloc_table)
      and (alloc_extends(floatP_alloc_table@, floatP_alloc_table)
          and (alloc_fresh(floatP_alloc_table@, result, n)
              and instanceof(floatP_tag_table, result, floatP_tag)))) }

parameter alloc_struct_floatP_requires :
 n:int ->
  floatP_alloc_table:floatP alloc_table ref ->
   floatP_tag_table:floatP tag_table ref ->
    { ge_int(n, (0))} floatP pointer
    writes floatP_alloc_table,floatP_tag_table
    { (strict_valid_struct_floatP(result, (0), sub_int(n, (1)),
       floatP_alloc_table)
      and (alloc_extends(floatP_alloc_table@, floatP_alloc_table)
          and (alloc_fresh(floatP_alloc_table@, result, n)
              and instanceof(floatP_tag_table, result, floatP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter main :
 tt:unit ->
  { } unit
  reads G12,G15,G16,G17,G18,G19,G20,G21,G22,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G4,G5,G6,floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,floatP_floatM_G10_4,floatP_floatM_G11_5,floatP_floatM_G8_2,floatP_floatM_G9_3,intP_G13_6_alloc_table,intP_G3_1_alloc_table,intP_intM_G13_6,ptr_bas_loc_ram
  writes Frama_C_entropy_source,G12,G15,G16,G17,G18,G19,G20,G21,G22,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G33,G34,G4,G5,G6,G7,intP_intM_G3_1,ptr_bas_loc_ram
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter main_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table))))))))}
  unit
  reads G12,G15,G16,G17,G18,G19,G20,G21,G22,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G4,G5,G6,floatP_G10_4_alloc_table,floatP_G11_5_alloc_table,floatP_G8_2_alloc_table,floatP_G9_3_alloc_table,floatP_floatM_G10_4,floatP_floatM_G11_5,floatP_floatM_G8_2,floatP_floatM_G9_3,intP_G13_6_alloc_table,intP_G3_1_alloc_table,intP_intM_G13_6,ptr_bas_loc_ram
  writes Frama_C_entropy_source,G12,G15,G16,G17,G18,G19,G20,G21,G22,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G33,G34,G4,G5,G6,G7,intP_intM_G3_1,ptr_bas_loc_ram
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let F2_ensures_default =
 fun (V2 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let V1 = ref (any_int32 void) in
     (C_4:
     begin
       (let jessie_<somenum> =
       (V1 := (C_3:
              (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
              (let jessie_<somenum> = (safe_int32_of_integer_ (63)) in
              (JC_<somenum>: ((Frama_C_interval jessie_<somenum>) jessie_<somenum>)))))) in void);
      (return := !V1); (raise Return) end)); absurd  end with Return ->
   !return end)) { (JC_<somenum>: true) }

let F2_safety =
 fun (V2 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let V1 = ref (any_int32 void) in
     (C_4:
     begin
       (let jessie_<somenum> =
       (V1 := (C_3:
              (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
              (let jessie_<somenum> = (safe_int32_of_integer_ (63)) in
              (JC_<somenum>: ((Frama_C_interval_requires jessie_<somenum>) jessie_<somenum>)))))) in
       void); (return := !V1); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

let F3_ensures_default =
 fun (V4 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let V3 = ref (any_int32 void) in
     (C_7:
     begin
       (let jessie_<somenum> =
       (V3 := (C_6:
              (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
              (let jessie_<somenum> = (safe_int32_of_integer_ (63)) in
              (JC_<somenum>: ((Frama_C_interval jessie_<somenum>) jessie_<somenum>)))))) in void);
      (return := !V3); (raise Return) end)); absurd  end with Return ->
   !return end)) { (JC_<somenum>: true) }

let F3_safety =
 fun (V4 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let V3 = ref (any_int32 void) in
     (C_7:
     begin
       (let jessie_<somenum> =
       (V3 := (C_6:
              (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
              (let jessie_<somenum> = (safe_int32_of_integer_ (63)) in
              (JC_<somenum>: ((Frama_C_interval_requires jessie_<somenum>) jessie_<somenum>)))))) in
       void); (return := !V3); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

let F4_ensures_default =
 fun (V6 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let V5 = ref (any_int32 void) in
     (C_10:
     begin
       (let jessie_<somenum> =
       (V5 := (C_9:
              (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
              (let jessie_<somenum> = (safe_int32_of_integer_ (31)) in
              (JC_<somenum>: ((Frama_C_interval jessie_<somenum>) jessie_<somenum>)))))) in void);
      (return := !V5); (raise Return) end)); absurd  end with Return ->
   !return end)) { (JC_<somenum>: true) }

let F4_safety =
 fun (V6 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let V5 = ref (any_int32 void) in
     (C_10:
     begin
       (let jessie_<somenum> =
       (V5 := (C_9:
              (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
              (let jessie_<somenum> = (safe_int32_of_integer_ (31)) in
              (JC_<somenum>: ((Frama_C_interval_requires jessie_<somenum>) jessie_<somenum>)))))) in
       void); (return := !V5); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

let F5_ensures_default =
 fun (V8 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let V7 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_17:
       begin
         (assert
         { (JC_<somenum>: le_int((1), asr((2147483647), integer_of_int32(V8)))) };
         void);
        (assert { (JC_<somenum>: lt_int(integer_of_int32(V8), (32))) }; void);
        (assert { (JC_<somenum>: ge_int(integer_of_int32(V8), (0))) }; void);
        (V7 := (C_16:
               (safe_int32_of_integer_ (C_15:
                                       ((lsl (1)) (integer_of_int32 V8))))));
        !V7 end) in void); (return := !V7); (raise Return) end); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let F5_safety =
 fun (V8 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let V7 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_17:
       begin
         [ { } unit
           { (JC_<somenum>: le_int((1), asr((2147483647), integer_of_int32(V8)))) } ];
        [ { } unit { (JC_<somenum>: lt_int(integer_of_int32(V8), (32))) } ];
        [ { } unit { (JC_<somenum>: ge_int(integer_of_int32(V8), (0))) } ];
        (V7 := (C_16:
               (JC_<somenum>:
               (int32_of_integer_ (C_15: ((lsl (1)) (integer_of_int32 V8)))))));
        !V7 end) in void); (return := !V7); (raise Return) end); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

let F6_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  try
   begin
     (let V9 = ref (any_single void) in
     (let V10 = ref (any_single void) in
     (let V11 = ref (any_single void) in
     (let V12 = ref (any_single void) in
     (let V13 = ref (any_single void) in
     (let V14 = ref (any_single void) in
     (let V15 = ref (any_single void) in
     (let V16 = ref (any_single void) in
     (let V17 = ref (any_single void) in
     (let V18 = ref (any_int32 void) in
     (let ptr_bas_loc = ref (any_pointer void) in
     (let V20 = ref (any_int32 void) in
     (let V21 = ref (any_int32 void) in
     (let V22 = ref (any_int32 void) in
     (let V23 = ref (any_int32 void) in
     (C_22:
     (C_26:
     (C_27:
     (C_28:
     begin
       (let jessie_<somenum> =
       (let __cil_tmp =
       (C_19:
       (let jessie_<somenum> = (safe_int32_of_integer_ (2)) in
       (let jessie_<somenum> = (safe_int32_of_integer_ (2000)) in
       (JC_<somenum>: ((Frama_C_interval jessie_<somenum>) jessie_<somenum>))))) in
       (C_21: begin   (V18 := (C_20: __cil_tmp)); !V18 end)) in void);
      (let jessie_<somenum> =
      (let __cil_tmp_18 =
      (C_23:
      (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
      (let jessie_<somenum> = (safe_int32_of_integer_ (11)) in
      (JC_<somenum>: ((Frama_C_interval jessie_<somenum>) jessie_<somenum>))))) in
      (C_25: begin   (G15 := (C_24: __cil_tmp_18)); !G15 end)) in void);
      (let jessie_<somenum> = (ptr_bas_loc := G13) in void);
      (let jessie_<somenum> = (G33 := !ptr_bas_loc) in void);
      (if ((ge_int_ (integer_of_int32 !V18)) (2))
      then
       (let jessie_<somenum> =
       (C_38:
       (C_40:
       (C_44:
       (C_48:
       (C_50:
       (C_52:
       (C_54:
       (C_56:
       (C_58:
       (C_60:
       (C_62:
       (C_66:
       (C_68:
       (C_70:
       (C_72:
       (C_74:
       (C_79:
       (C_81:
       (C_87:
       (C_90:
       (C_91:
       (C_92:
       (C_93:
       (C_94:
       (C_95:
       (C_96:
       (C_97:
       (C_98:
       (C_99:
       (C_100:
       (C_101:
       (C_102:
       begin
         (let jessie_<somenum> =
         (G4 := (C_37:
                (safe_int32_of_integer_ (C_36:
                                        ((add_int (integer_of_int32 (C_35:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_34:
                                                                    (JC_<somenum>:
                                                                    ((computer_div 
                                                                    (integer_of_int32 !V18)) 
                                                                    (integer_of_int32 
                                                                    (C_33:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_32:
                                                                    ((add_int 
                                                                    (integer_of_int32 !G5)) (1))))))))))))) (1)))))) in
         void);
        (let jessie_<somenum> =
        (V9 := (C_39:
               ((single_of_double_safe nearest_even) (double_of_real_exact 0.0)))) in
        void);
        (let jessie_<somenum> =
        (V10 := (C_43:
                ((single_of_double_safe nearest_even) (C_42:
                                                      (JC_<somenum>:
                                                      (((mul_double_safe nearest_even) 
                                                        ((double_of_real_safe nearest_even) 511.5)) 
                                                       (C_41:
                                                       (double_of_single !G20)))))))) in
        void);
        (let jessie_<somenum> =
        (V11 := (C_47:
                ((single_of_double_safe nearest_even) (C_46:
                                                      (JC_<somenum>:
                                                      (((mul_double_safe nearest_even) 
                                                        ((double_of_real_safe nearest_even) 511.5)) 
                                                       (C_45:
                                                       (double_of_single !G20)))))))) in
        void);
        (let jessie_<somenum> =
        (V12 := (C_49:
                ((single_of_double_safe nearest_even) (double_of_real_exact 0.0)))) in
        void);
        (let jessie_<somenum> =
        (V13 := (C_51:
                ((single_of_double_safe nearest_even) (double_of_real_exact 0.0)))) in
        void);
        (let jessie_<somenum> =
        (V14 := (C_53:
                ((single_of_double_safe nearest_even) (double_of_real_exact 0.0)))) in
        void);
        (let jessie_<somenum> =
        (V15 := (C_55:
                ((single_of_double_safe nearest_even) (double_of_real_exact 0.0)))) in
        void);
        (let jessie_<somenum> =
        (V20 := (C_57: (let jessie_<somenum> = !G15 in (JC_<somenum>: (F2 jessie_<somenum>))))) in
        void);
        (let jessie_<somenum> =
        (G18 := (C_59:
                ((safe_acc_ !floatP_floatM_G8_2) ((shift G8) (integer_of_int32 !V20))))) in
        void);
        (let jessie_<somenum> =
        (V21 := (C_61: (let jessie_<somenum> = !G15 in (JC_<somenum>: (F3 jessie_<somenum>))))) in
        void);
        (let jessie_<somenum> =
        (G16 := (C_65:
                (JC_<somenum>:
                (((div_single_safe nearest_even) (C_64:
                                                 ((safe_acc_ !floatP_floatM_G9_3) 
                                                  ((shift G9) (integer_of_int32 !V21))))) 
                 (C_63:
                 ((single_of_real_safe nearest_even) (real_of_int (integer_of_int32 G1)))))))) in
        void);
        (let jessie_<somenum> =
        (V22 := (C_67: (let jessie_<somenum> = !G15 in (JC_<somenum>: (F3 jessie_<somenum>))))) in
        void);
        (let jessie_<somenum> =
        (G17 := (C_69:
                ((safe_acc_ !floatP_floatM_G10_4) ((shift G10) (integer_of_int32 !V22))))) in
        void);
        (let jessie_<somenum> =
        (V23 := (C_71: (let jessie_<somenum> = !G15 in (JC_<somenum>: (F4 jessie_<somenum>))))) in
        void);
        (let jessie_<somenum> =
        (G19 := (C_73:
                ((safe_acc_ !floatP_floatM_G11_5) ((shift G11) (integer_of_int32 !V23))))) in
        void);
        (let jessie_<somenum> =
        (G21 := (C_78:
                ((single_of_double_safe nearest_even) (C_77:
                                                      (JC_<somenum>:
                                                      (((div_double_safe nearest_even) 
                                                        (double_of_real_exact 1.0)) 
                                                       (C_76:
                                                       (JC_<somenum>:
                                                       (((add_double_safe nearest_even) 
                                                         (C_75:
                                                         (double_of_single !G16))) 
                                                        (double_of_real_exact 1.0)))))))))) in
        void);
        (let jessie_<somenum> =
        (V16 := (C_80:
                (JC_<somenum>: (((mul_single_safe nearest_even) !G17) !G21)))) in
        void);
        (let jessie_<somenum> =
        (V17 := (C_86:
                ((single_of_double_safe nearest_even) (C_85:
                                                      (JC_<somenum>:
                                                      (((mul_double_safe nearest_even) 
                                                        (C_84:
                                                        (JC_<somenum>:
                                                        (((sub_double_safe nearest_even) 
                                                          (C_83:
                                                          (double_of_single !G16))) 
                                                         (double_of_real_exact 1.0))))) 
                                                       (C_82:
                                                       (double_of_single !G21)))))))) in
        void);
        (let jessie_<somenum> =
        (G22 := (C_89:
                (JC_<somenum>:
                (((mul_single_safe nearest_even) (C_88:
                                                 (JC_<somenum>:
                                                 (((mul_single_safe nearest_even) !G18) !G16)))) !G21)))) in
        void);
        (let jessie_<somenum> = (G23 := (safe_int32_of_integer_ (0))) in void);
        (let jessie_<somenum> = (G24 := !V9) in void);
        (let jessie_<somenum> = (G25 := !V10) in void);
        (let jessie_<somenum> = (G26 := !V11) in void);
        (let jessie_<somenum> = (G27 := !V12) in void);
        (let jessie_<somenum> = (G28 := !V13) in void);
        (let jessie_<somenum> = (G29 := !V14) in void);
        (let jessie_<somenum> = (G30 := !V15) in void);
        (let jessie_<somenum> = (G31 := !V16) in void);
        (let jessie_<somenum> = (G32 := !V17) in void);
        (let jessie_<somenum> = (G12 := !V18) in void);
        (ptr_bas_loc_ram := !ptr_bas_loc); !ptr_bas_loc_ram end)))))))))))))))))))))))))))))))) in
       void)
      else
       (let jessie_<somenum> =
       (C_30:
       (C_31:
       begin
         (let jessie_<somenum> =
         (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
         (let jessie_<somenum> = G3 in
         (let jessie_<somenum> = (integer_of_int32 !G15) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
         (((safe_upd_ intP_intM_G3_1) jessie_<somenum>) jessie_<somenum>))))) in void);
        (G4 := (safe_int32_of_integer_ (0))); !G4 end)) in void));
      (raise Return) end))))))))))))))))))); (raise Return) end with
   Return -> void end) { (JC_<somenum>: true) }

let F6_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  try
   begin
     (let V9 = ref (any_single void) in
     (let V10 = ref (any_single void) in
     (let V11 = ref (any_single void) in
     (let V12 = ref (any_single void) in
     (let V13 = ref (any_single void) in
     (let V14 = ref (any_single void) in
     (let V15 = ref (any_single void) in
     (let V16 = ref (any_single void) in
     (let V17 = ref (any_single void) in
     (let V18 = ref (any_int32 void) in
     (let ptr_bas_loc = ref (any_pointer void) in
     (let V20 = ref (any_int32 void) in
     (let V21 = ref (any_int32 void) in
     (let V22 = ref (any_int32 void) in
     (let V23 = ref (any_int32 void) in
     (C_22:
     (C_26:
     (C_27:
     (C_28:
     begin
       (let jessie_<somenum> =
       (let __cil_tmp =
       (C_19:
       (let jessie_<somenum> = (safe_int32_of_integer_ (2)) in
       (let jessie_<somenum> = (safe_int32_of_integer_ (2000)) in
       (JC_<somenum>: ((Frama_C_interval_requires jessie_<somenum>) jessie_<somenum>))))) in
       (C_21: begin   (V18 := (C_20: __cil_tmp)); !V18 end)) in void);
      (let jessie_<somenum> =
      (let __cil_tmp_18 =
      (C_23:
      (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
      (let jessie_<somenum> = (safe_int32_of_integer_ (11)) in
      (JC_<somenum>: ((Frama_C_interval_requires jessie_<somenum>) jessie_<somenum>))))) in
      (C_25: begin   (G15 := (C_24: __cil_tmp_18)); !G15 end)) in void);
      (let jessie_<somenum> = (ptr_bas_loc := G13) in void);
      (let jessie_<somenum> = (G33 := !ptr_bas_loc) in void);
      (if ((ge_int_ (integer_of_int32 !V18)) (2))
      then
       (let jessie_<somenum> =
       (C_38:
       (C_40:
       (C_44:
       (C_48:
       (C_50:
       (C_52:
       (C_54:
       (C_56:
       (C_58:
       (C_60:
       (C_62:
       (C_66:
       (C_68:
       (C_70:
       (C_72:
       (C_74:
       (C_79:
       (C_81:
       (C_87:
       (C_90:
       (C_91:
       (C_92:
       (C_93:
       (C_94:
       (C_95:
       (C_96:
       (C_97:
       (C_98:
       (C_99:
       (C_100:
       (C_101:
       (C_102:
       begin
         (let jessie_<somenum> =
         (G4 := (C_37:
                (JC_<somenum>:
                (int32_of_integer_ (C_36:
                                   ((add_int (integer_of_int32 (C_35:
                                                               (JC_<somenum>:
                                                               (int32_of_integer_ 
                                                                (C_34:
                                                                (JC_<somenum>:
                                                                ((computer_div_ 
                                                                  (integer_of_int32 !V18)) 
                                                                 (integer_of_int32 
                                                                  (C_33:
                                                                  (JC_<somenum>:
                                                                  (int32_of_integer_ 
                                                                   (C_32:
                                                                   ((add_int 
                                                                    (integer_of_int32 !G5)) (1))))))))))))))) (1))))))) in
         void);
        (let jessie_<somenum> =
        (V9 := (C_39:
               (JC_<somenum>:
               ((single_of_double nearest_even) (double_of_real_exact 0.0))))) in
        void);
        (let jessie_<somenum> =
        (V10 := (C_43:
                (JC_<somenum>:
                ((single_of_double nearest_even) (C_42:
                                                 (JC_<somenum>:
                                                 (((mul_double nearest_even) 
                                                   (JC_<somenum>:
                                                   ((double_of_real nearest_even) 511.5))) 
                                                  (C_41:
                                                  (double_of_single !G20))))))))) in
        void);
        (let jessie_<somenum> =
        (V11 := (C_47:
                (JC_<somenum>:
                ((single_of_double nearest_even) (C_46:
                                                 (JC_<somenum>:
                                                 (((mul_double nearest_even) 
                                                   (JC_<somenum>:
                                                   ((double_of_real nearest_even) 511.5))) 
                                                  (C_45:
                                                  (double_of_single !G20))))))))) in
        void);
        (let jessie_<somenum> =
        (V12 := (C_49:
                (JC_<somenum>:
                ((single_of_double nearest_even) (double_of_real_exact 0.0))))) in
        void);
        (let jessie_<somenum> =
        (V13 := (C_51:
                (JC_<somenum>:
                ((single_of_double nearest_even) (double_of_real_exact 0.0))))) in
        void);
        (let jessie_<somenum> =
        (V14 := (C_53:
                (JC_<somenum>:
                ((single_of_double nearest_even) (double_of_real_exact 0.0))))) in
        void);
        (let jessie_<somenum> =
        (V15 := (C_55:
                (JC_<somenum>:
                ((single_of_double nearest_even) (double_of_real_exact 0.0))))) in
        void);
        (let jessie_<somenum> =
        (V20 := (C_57:
                (let jessie_<somenum> = !G15 in (JC_<somenum>: (F2_requires jessie_<somenum>))))) in
        void);
        (let jessie_<somenum> =
        (G18 := (C_59:
                (JC_<somenum>:
                ((((offset_acc_ !floatP_G8_2_alloc_table) !floatP_floatM_G8_2) G8) 
                 (integer_of_int32 !V20))))) in void);
        (let jessie_<somenum> =
        (V21 := (C_61:
                (let jessie_<somenum> = !G15 in (JC_<somenum>: (F3_requires jessie_<somenum>))))) in
        void);
        (let jessie_<somenum> =
        (G16 := (C_65:
                (JC_<somenum>:
                (((div_single nearest_even) (C_64:
                                            (JC_<somenum>:
                                            ((((offset_acc_ !floatP_G9_3_alloc_table) !floatP_floatM_G9_3) G9) 
                                             (integer_of_int32 !V21))))) 
                 (C_63:
                 (JC_<somenum>:
                 ((single_of_real nearest_even) (real_of_int (integer_of_int32 G1))))))))) in
        void);
        (let jessie_<somenum> =
        (V22 := (C_67:
                (let jessie_<somenum> = !G15 in (JC_<somenum>: (F3_requires jessie_<somenum>))))) in
        void);
        (let jessie_<somenum> =
        (G17 := (C_69:
                (JC_<somenum>:
                ((((offset_acc_ !floatP_G10_4_alloc_table) !floatP_floatM_G10_4) G10) 
                 (integer_of_int32 !V22))))) in void);
        (let jessie_<somenum> =
        (V23 := (C_71:
                (let jessie_<somenum> = !G15 in (JC_<somenum>: (F4_requires jessie_<somenum>))))) in
        void);
        (let jessie_<somenum> =
        (G19 := (C_73:
                (JC_<somenum>:
                ((((offset_acc_ !floatP_G11_5_alloc_table) !floatP_floatM_G11_5) G11) 
                 (integer_of_int32 !V23))))) in void);
        (let jessie_<somenum> =
        (G21 := (C_78:
                (JC_<somenum>:
                ((single_of_double nearest_even) (C_77:
                                                 (JC_<somenum>:
                                                 (((div_double nearest_even) 
                                                   (double_of_real_exact 1.0)) 
                                                  (C_76:
                                                  (JC_<somenum>:
                                                  (((add_double nearest_even) 
                                                    (C_75:
                                                    (double_of_single !G16))) 
                                                   (double_of_real_exact 1.0))))))))))) in
        void);
        (let jessie_<somenum> =
        (V16 := (C_80: (JC_<somenum>: (((mul_single nearest_even) !G17) !G21)))) in
        void);
        (let jessie_<somenum> =
        (V17 := (C_86:
                (JC_<somenum>:
                ((single_of_double nearest_even) (C_85:
                                                 (JC_<somenum>:
                                                 (((mul_double nearest_even) 
                                                   (C_84:
                                                   (JC_<somenum>:
                                                   (((sub_double nearest_even) 
                                                     (C_83:
                                                     (double_of_single !G16))) 
                                                    (double_of_real_exact 1.0))))) 
                                                  (C_82:
                                                  (double_of_single !G21))))))))) in
        void);
        (let jessie_<somenum> =
        (G22 := (C_89:
                (JC_<somenum>:
                (((mul_single nearest_even) (C_88:
                                            (JC_<somenum>:
                                            (((mul_single nearest_even) !G18) !G16)))) !G21)))) in
        void);
        (let jessie_<somenum> = (G23 := (safe_int32_of_integer_ (0))) in void);
        (let jessie_<somenum> = (G24 := !V9) in void);
        (let jessie_<somenum> = (G25 := !V10) in void);
        (let jessie_<somenum> = (G26 := !V11) in void);
        (let jessie_<somenum> = (G27 := !V12) in void);
        (let jessie_<somenum> = (G28 := !V13) in void);
        (let jessie_<somenum> = (G29 := !V14) in void);
        (let jessie_<somenum> = (G30 := !V15) in void);
        (let jessie_<somenum> = (G31 := !V16) in void);
        (let jessie_<somenum> = (G32 := !V17) in void);
        (let jessie_<somenum> = (G12 := !V18) in void);
        (ptr_bas_loc_ram := !ptr_bas_loc); !ptr_bas_loc_ram end)))))))))))))))))))))))))))))))) in
       void)
      else
       (let jessie_<somenum> =
       (C_30:
       (C_31:
       begin
         (let jessie_<somenum> =
         (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
         (let jessie_<somenum> = G3 in
         (let jessie_<somenum> = (integer_of_int32 !G15) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
         (JC_<somenum>:
         (((((offset_upd_ !intP_G3_1_alloc_table) intP_intM_G3_1) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
         void); (G4 := (safe_int32_of_integer_ (0))); !G4 end)) in void));
      (raise Return) end))))))))))))))))))); (raise Return) end with
   Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

let F7_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  try
   begin
     (let V24 = ref (any_single void) in
     (let V25 = ref (any_single void) in
     (let V26 = ref (any_single void) in
     (let V27 = ref (any_single void) in
     (let V28 = ref (any_single void) in
     (let V29 = ref (any_single void) in
     (let V30 = ref (any_single void) in
     (let V31 = ref (any_single void) in
     (let V32 = ref (any_single void) in
     (let V33 = ref (any_int32 void) in
     (let V34 = ref (any_int32 void) in
     (let V35 = ref (any_int32 void) in
     (let ptr_bas_loc_0 = ref (any_pointer void) in
     (let V37 = ref (any_int32 void) in
     begin
       (if ((ge_int_ (integer_of_int32 !G12)) (2))
       then
        (let jessie_<somenum> =
        (C_104:
        (C_105:
        (C_106:
        (C_107:
        (C_108:
        (C_109:
        (C_110:
        (C_111:
        (C_112:
        (C_113:
        (C_114:
        (C_119:
        (C_125:
        begin
          (let jessie_<somenum> = (V24 := !G24) in void);
         (let jessie_<somenum> = (V25 := !G25) in void);
         (let jessie_<somenum> = (V26 := !G26) in void);
         (let jessie_<somenum> = (V27 := !G27) in void);
         (let jessie_<somenum> = (V28 := !G28) in void);
         (let jessie_<somenum> = (V29 := !G29) in void);
         (let jessie_<somenum> = (V30 := !G30) in void);
         (let jessie_<somenum> = (V31 := !G31) in void);
         (let jessie_<somenum> = (V32 := !G32) in void);
         (let jessie_<somenum> = (V33 := !G12) in void);
         (let jessie_<somenum> = (ptr_bas_loc_0 := !ptr_bas_loc_ram) in void);
         (let jessie_<somenum> =
         (V35 := (C_118:
                 (safe_int32_of_integer_ (C_117:
                                         ((sub_int (integer_of_int32 
                                                    (C_116:
                                                    (safe_int32_of_integer_ 
                                                     (C_115:
                                                     ((add_int (integer_of_int32 !G23)) 
                                                      (integer_of_int32 !G5))))))) (2)))))) in
         void);
         (if ((ge_int_ (integer_of_int32 !V35)) (integer_of_int32 (C_124:
                                                                  (safe_int32_of_integer_ 
                                                                   (C_123:
                                                                   ((sub_int 
                                                                    (integer_of_int32 !V33)) (2)))))))
         then
          (let jessie_<somenum> =
          (C_122:
          (V35 := (C_121:
                  (safe_int32_of_integer_ (C_120:
                                          ((sub_int (integer_of_int32 !V33)) (2))))))) in
          void) else void); (let jessie_<somenum> = (V34 := !G23) in void);
         try
          begin
            (loop_2:
            while true do
            { invariant (JC_<somenum>: true)  }
             begin
               [ { } unit { true } ];
              try
               begin
                 (let jessie_<somenum> =
                 (C_128:
                 (C_130:
                 (C_136:
                 (C_142:
                 (C_143:
                 (C_144:
                 (C_145:
                 (C_148:
                 begin
                   (if ((le_int_ (integer_of_int32 !V34)) (integer_of_int32 !V35))
                   then void else (raise (Goto_while_0_break_exc void)));
                  (let jessie_<somenum> =
                  (V24 := (C_127:
                          ((single_of_real_safe nearest_even) (real_of_int 
                                                               (integer_of_int32 
                                                                (C_126:
                                                                ((safe_acc_ !intP_intM_G13_6) !ptr_bas_loc_0))))))) in
                  void);
                  (let jessie_<somenum> =
                  (ptr_bas_loc_0 := (C_129: ((shift !ptr_bas_loc_0) (1)))) in
                  void);
                  (let jessie_<somenum> =
                  (V27 := (C_135:
                          (JC_<somenum>:
                          (((add_single_safe nearest_even) (C_134:
                                                           (JC_<somenum>:
                                                           (((add_single_safe nearest_even) 
                                                             (C_133:
                                                             (JC_<somenum>:
                                                             (((sub_single_safe nearest_even) !V24) !V26)))) 
                                                            (C_132:
                                                            (JC_<somenum>:
                                                            (((mul_single_safe nearest_even) !V31) !V28))))))) 
                           (C_131:
                           (JC_<somenum>:
                           (((mul_single_safe nearest_even) !V32) !V29))))))) in
                  void);
                  (let jessie_<somenum> =
                  (if ((ge_double_ (C_141: (double_of_single !V27))) 
                       (double_of_real_exact 0.0))
                  then
                   (C_140:
                   begin
                     (V30 := (C_139:
                             (JC_<somenum>:
                             (((add_single_safe nearest_even) !V30) !V27))));
                    !V30 end)
                  else
                   (C_138:
                   begin
                     (V30 := (C_137:
                             (JC_<somenum>:
                             (((sub_single_safe nearest_even) !V30) !V27))));
                    !V30 end)) in void);
                  (let jessie_<somenum> = (V26 := !V25) in void);
                  (let jessie_<somenum> = (V25 := !V24) in void);
                  (let jessie_<somenum> = (V29 := !V28) in void);
                  (let jessie_<somenum> = (V28 := !V27) in void);
                  (V34 := (C_147:
                          (safe_int32_of_integer_ (C_146:
                                                  ((add_int (integer_of_int32 !V34)) (1))))));
                  !V34 end)))))))) in void); (raise (Loop_continue_exc void))
               end with Loop_continue_exc jessie_<somenum> -> void end end done);
           (raise (Goto_while_0_break_exc void)) end with
          Goto_while_0_break_exc jessie_<somenum> -> (while_0_break: void) end;
         (if ((ge_int_ (integer_of_int32 !V35)) (integer_of_int32 (C_209:
                                                                  (safe_int32_of_integer_ 
                                                                   (C_208:
                                                                   ((sub_int 
                                                                    (integer_of_int32 !V33)) (2)))))))
         then
          (C_165:
          (C_171:
          (C_188:
          (C_192:
          (C_201:
          (C_204:
          (C_207:
          begin
            (let jessie_<somenum> =
            (V24 := (C_164:
                    ((single_of_real_safe nearest_even) (real_of_int 
                                                         (integer_of_int32 
                                                          (C_163:
                                                          ((safe_acc_ !intP_intM_G13_6) !ptr_bas_loc_0))))))) in
            void);
           (let jessie_<somenum> =
           (V27 := (C_170:
                   (JC_<somenum>:
                   (((add_single_safe nearest_even) (C_169:
                                                    (JC_<somenum>:
                                                    (((add_single_safe nearest_even) 
                                                      (C_168:
                                                      (JC_<somenum>:
                                                      (((sub_single_safe nearest_even) !V24) !V26)))) 
                                                     (C_167:
                                                     (JC_<somenum>:
                                                     (((mul_single_safe nearest_even) !V31) !V28))))))) 
                    (C_166:
                    (JC_<somenum>: (((mul_single_safe nearest_even) !V32) !V29))))))) in
           void);
           (let jessie_<somenum> =
           (if ((ge_double_ (C_184: (double_of_single !V27))) (double_of_real_exact 0.0))
           then
            (C_183:
            begin
              (V30 := (C_182:
                      ((single_of_double_safe nearest_even) (C_181:
                                                            (JC_<somenum>:
                                                            (((add_double_safe nearest_even) 
                                                              (C_180:
                                                              (JC_<somenum>:
                                                              (((mul_double_safe nearest_even) 
                                                                (double_of_real_exact 2.0)) 
                                                               (C_179:
                                                               (double_of_single !V30)))))) 
                                                             (C_178:
                                                             (double_of_single !V27))))))));
             !V30 end)
           else
            (C_177:
            begin
              (V30 := (C_176:
                      ((single_of_double_safe nearest_even) (C_175:
                                                            (JC_<somenum>:
                                                            (((sub_double_safe nearest_even) 
                                                              (C_174:
                                                              (JC_<somenum>:
                                                              (((mul_double_safe nearest_even) 
                                                                (double_of_real_exact 2.0)) 
                                                               (C_173:
                                                               (double_of_single !V30)))))) 
                                                             (C_172:
                                                             (double_of_single !V27))))))));
             !V30 end)) in void);
           (let jessie_<somenum> =
           (V30 := (C_187:
                   (JC_<somenum>:
                   (((div_single_safe nearest_even) (C_186:
                                                    (JC_<somenum>:
                                                    (((mul_single_safe nearest_even) 
                                                      (C_185:
                                                      (JC_<somenum>:
                                                      (((mul_single_safe nearest_even) !G22) !G19)))) !V30)))) !G20)))) in
           void);
           (let jessie_<somenum> =
           (V30 := (C_191:
                   ((single_of_double_safe nearest_even) (C_190:
                                                         (JC_<somenum>:
                                                         (((mul_double_safe nearest_even) 
                                                           (C_189:
                                                           (double_of_single !V30))) 
                                                          (double_of_real_exact 64.0))))))) in
           void);
           (let jessie_<somenum> =
           (if ((le_double_ (C_199: (double_of_single !V30))) (double_of_real_exact 65535.0))
           then
            (C_198:
            (let jessie_<somenum> =
            (safe_int32_of_integer_ (C_196:
                                    (let jessie_<somenum> =
                                    (C_195: (single_value !V30)) in
                                    (truncate_real_to_int jessie_<somenum>)))) in
            (let jessie_<somenum> = G3 in
            (let jessie_<somenum> = (integer_of_int32 !G15) in
            (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
            begin
              (((safe_upd_ intP_intM_G3_1) jessie_<somenum>) jessie_<somenum>);
             jessie_<somenum> end)))))
           else
            (C_194:
            (let jessie_<somenum> = (safe_int32_of_integer_ (65535)) in
            (let jessie_<somenum> = G3 in
            (let jessie_<somenum> = (integer_of_int32 !G15) in
            (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
            begin
              (((safe_upd_ intP_intM_G3_1) jessie_<somenum>) jessie_<somenum>);
             jessie_<somenum> end)))))) in void);
           (let jessie_<somenum> =
           (V37 := (C_200:
                   (let jessie_<somenum> = !G15 in (JC_<somenum>: (F5 jessie_<somenum>))))) in
           void);
           (let jessie_<somenum> =
           (G6 := (C_203:
                  (safe_int32_of_integer_ (C_202:
                                          ((bw_or (integer_of_int32 !G6)) 
                                           (integer_of_int32 !V37)))))) in
           void);
           (let jessie_<somenum> =
           (if ((neq_int_ (integer_of_int32 !G6)) (0))
           then
            (C_206: begin   (G7 := (safe_int32_of_integer_ (1))); !G7 end)
           else
            (C_205: begin   (G7 := (safe_int32_of_integer_ (0))); !G7 end)) in
           void); (G34 := !ptr_bas_loc_0); !G34 end)))))))
         else
          (C_151:
          (C_152:
          (C_153:
          (C_154:
          (C_155:
          (C_156:
          (C_157:
          (C_158:
          (C_159:
          (C_160:
          (C_161:
          (C_162:
          begin
            (let jessie_<somenum> =
            (G23 := (C_150:
                    (safe_int32_of_integer_ (C_149:
                                            ((add_int (integer_of_int32 !V35)) (1)))))) in
            void); (let jessie_<somenum> = (G24 := !V24) in void);
           (let jessie_<somenum> = (G25 := !V25) in void);
           (let jessie_<somenum> = (G26 := !V26) in void);
           (let jessie_<somenum> = (G27 := !V27) in void);
           (let jessie_<somenum> = (G28 := !V28) in void);
           (let jessie_<somenum> = (G29 := !V29) in void);
           (let jessie_<somenum> = (G30 := !V30) in void);
           (let jessie_<somenum> = (G31 := !V31) in void);
           (let jessie_<somenum> = (G32 := !V32) in void);
           (let jessie_<somenum> = (G12 := !V33) in void);
           (ptr_bas_loc_ram := !ptr_bas_loc_0); !ptr_bas_loc_ram end)))))))))))))
        end))))))))))))) in void) else void); (raise Return) end))))))))))))));
    (raise Return) end with Return -> void end) { (JC_<somenum>: true) }

let F7_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  try
   begin
     (let V24 = ref (any_single void) in
     (let V25 = ref (any_single void) in
     (let V26 = ref (any_single void) in
     (let V27 = ref (any_single void) in
     (let V28 = ref (any_single void) in
     (let V29 = ref (any_single void) in
     (let V30 = ref (any_single void) in
     (let V31 = ref (any_single void) in
     (let V32 = ref (any_single void) in
     (let V33 = ref (any_int32 void) in
     (let V34 = ref (any_int32 void) in
     (let V35 = ref (any_int32 void) in
     (let ptr_bas_loc_0 = ref (any_pointer void) in
     (let V37 = ref (any_int32 void) in
     begin
       (if ((ge_int_ (integer_of_int32 !G12)) (2))
       then
        (let jessie_<somenum> =
        (C_104:
        (C_105:
        (C_106:
        (C_107:
        (C_108:
        (C_109:
        (C_110:
        (C_111:
        (C_112:
        (C_113:
        (C_114:
        (C_119:
        (C_125:
        begin
          (let jessie_<somenum> = (V24 := !G24) in void);
         (let jessie_<somenum> = (V25 := !G25) in void);
         (let jessie_<somenum> = (V26 := !G26) in void);
         (let jessie_<somenum> = (V27 := !G27) in void);
         (let jessie_<somenum> = (V28 := !G28) in void);
         (let jessie_<somenum> = (V29 := !G29) in void);
         (let jessie_<somenum> = (V30 := !G30) in void);
         (let jessie_<somenum> = (V31 := !G31) in void);
         (let jessie_<somenum> = (V32 := !G32) in void);
         (let jessie_<somenum> = (V33 := !G12) in void);
         (let jessie_<somenum> = (ptr_bas_loc_0 := !ptr_bas_loc_ram) in void);
         (let jessie_<somenum> =
         (V35 := (C_118:
                 (JC_<somenum>:
                 (int32_of_integer_ (C_117:
                                    ((sub_int (integer_of_int32 (C_116:
                                                                (JC_<somenum>:
                                                                (int32_of_integer_ 
                                                                 (C_115:
                                                                 ((add_int 
                                                                   (integer_of_int32 !G23)) 
                                                                  (integer_of_int32 !G5)))))))) (2))))))) in
         void);
         (if ((ge_int_ (integer_of_int32 !V35)) (integer_of_int32 (C_124:
                                                                  (JC_<somenum>:
                                                                  (int32_of_integer_ 
                                                                   (C_123:
                                                                   ((sub_int 
                                                                    (integer_of_int32 !V33)) (2))))))))
         then
          (let jessie_<somenum> =
          (C_122:
          (V35 := (C_121:
                  (JC_<somenum>:
                  (int32_of_integer_ (C_120:
                                     ((sub_int (integer_of_int32 !V33)) (2)))))))) in
          void) else void); (let jessie_<somenum> = (V34 := !G23) in void);
         try
          begin
            (loop_1:
            while true do
            { invariant (JC_<somenum>: true) variant (0) }
             begin
               [ { } unit { true } ];
              try
               begin
                 (let jessie_<somenum> =
                 (C_128:
                 (C_130:
                 (C_136:
                 (C_142:
                 (C_143:
                 (C_144:
                 (C_145:
                 (C_148:
                 begin
                   (if ((le_int_ (integer_of_int32 !V34)) (integer_of_int32 !V35))
                   then void else (raise (Goto_while_0_break_exc void)));
                  (let jessie_<somenum> =
                  (V24 := (C_127:
                          (JC_<somenum>:
                          ((single_of_real nearest_even) (real_of_int 
                                                          (integer_of_int32 
                                                           (C_126:
                                                           (JC_<somenum>:
                                                           (((acc_ !intP_G13_6_alloc_table) !intP_intM_G13_6) !ptr_bas_loc_0))))))))) in
                  void);
                  (let jessie_<somenum> =
                  (ptr_bas_loc_0 := (C_129: ((shift !ptr_bas_loc_0) (1)))) in
                  void);
                  (let jessie_<somenum> =
                  (V27 := (C_135:
                          (JC_<somenum>:
                          (((add_single nearest_even) (C_134:
                                                      (JC_<somenum>:
                                                      (((add_single nearest_even) 
                                                        (C_133:
                                                        (JC_<somenum>:
                                                        (((sub_single nearest_even) !V24) !V26)))) 
                                                       (C_132:
                                                       (JC_<somenum>:
                                                       (((mul_single nearest_even) !V31) !V28))))))) 
                           (C_131:
                           (JC_<somenum>: (((mul_single nearest_even) !V32) !V29))))))) in
                  void);
                  (let jessie_<somenum> =
                  (if ((ge_double_ (C_141: (double_of_single !V27))) 
                       (double_of_real_exact 0.0))
                  then
                   (C_140:
                   begin
                     (V30 := (C_139:
                             (JC_<somenum>:
                             (((add_single nearest_even) !V30) !V27)))); !V30
                   end)
                  else
                   (C_138:
                   begin
                     (V30 := (C_137:
                             (JC_<somenum>:
                             (((sub_single nearest_even) !V30) !V27)))); !V30
                   end)) in void); (let jessie_<somenum> = (V26 := !V25) in void);
                  (let jessie_<somenum> = (V25 := !V24) in void);
                  (let jessie_<somenum> = (V29 := !V28) in void);
                  (let jessie_<somenum> = (V28 := !V27) in void);
                  (V34 := (C_147:
                          (JC_<somenum>:
                          (int32_of_integer_ (C_146:
                                             ((add_int (integer_of_int32 !V34)) (1)))))));
                  !V34 end)))))))) in void); (raise (Loop_continue_exc void))
               end with Loop_continue_exc jessie_<somenum> -> void end end done);
           (raise (Goto_while_0_break_exc void)) end with
          Goto_while_0_break_exc jessie_<somenum> -> (while_0_break: void) end;
         (if ((ge_int_ (integer_of_int32 !V35)) (integer_of_int32 (C_209:
                                                                  (JC_<somenum>:
                                                                  (int32_of_integer_ 
                                                                   (C_208:
                                                                   ((sub_int 
                                                                    (integer_of_int32 !V33)) (2))))))))
         then
          (C_165:
          (C_171:
          (C_188:
          (C_192:
          (C_201:
          (C_204:
          (C_207:
          begin
            (let jessie_<somenum> =
            (V24 := (C_164:
                    (JC_<somenum>:
                    ((single_of_real nearest_even) (real_of_int (integer_of_int32 
                                                                 (C_163:
                                                                 (JC_<somenum>:
                                                                 (((acc_ !intP_G13_6_alloc_table) !intP_intM_G13_6) !ptr_bas_loc_0))))))))) in
            void);
           (let jessie_<somenum> =
           (V27 := (C_170:
                   (JC_<somenum>:
                   (((add_single nearest_even) (C_169:
                                               (JC_<somenum>:
                                               (((add_single nearest_even) 
                                                 (C_168:
                                                 (JC_<somenum>:
                                                 (((sub_single nearest_even) !V24) !V26)))) 
                                                (C_167:
                                                (JC_<somenum>:
                                                (((mul_single nearest_even) !V31) !V28))))))) 
                    (C_166:
                    (JC_<somenum>: (((mul_single nearest_even) !V32) !V29))))))) in
           void);
           (let jessie_<somenum> =
           (if ((ge_double_ (C_184: (double_of_single !V27))) (double_of_real_exact 0.0))
           then
            (C_183:
            begin
              (V30 := (C_182:
                      (JC_<somenum>:
                      ((single_of_double nearest_even) (C_181:
                                                       (JC_<somenum>:
                                                       (((add_double nearest_even) 
                                                         (C_180:
                                                         (JC_<somenum>:
                                                         (((mul_double nearest_even) 
                                                           (double_of_real_exact 2.0)) 
                                                          (C_179:
                                                          (double_of_single !V30)))))) 
                                                        (C_178:
                                                        (double_of_single !V27)))))))));
             !V30 end)
           else
            (C_177:
            begin
              (V30 := (C_176:
                      (JC_<somenum>:
                      ((single_of_double nearest_even) (C_175:
                                                       (JC_<somenum>:
                                                       (((sub_double nearest_even) 
                                                         (C_174:
                                                         (JC_<somenum>:
                                                         (((mul_double nearest_even) 
                                                           (double_of_real_exact 2.0)) 
                                                          (C_173:
                                                          (double_of_single !V30)))))) 
                                                        (C_172:
                                                        (double_of_single !V27)))))))));
             !V30 end)) in void);
           (let jessie_<somenum> =
           (V30 := (C_187:
                   (JC_<somenum>:
                   (((div_single nearest_even) (C_186:
                                               (JC_<somenum>:
                                               (((mul_single nearest_even) 
                                                 (C_185:
                                                 (JC_<somenum>:
                                                 (((mul_single nearest_even) !G22) !G19)))) !V30)))) !G20)))) in
           void);
           (let jessie_<somenum> =
           (V30 := (C_191:
                   (JC_<somenum>:
                   ((single_of_double nearest_even) (C_190:
                                                    (JC_<somenum>:
                                                    (((mul_double nearest_even) 
                                                      (C_189:
                                                      (double_of_single !V30))) 
                                                     (double_of_real_exact 64.0)))))))) in
           void);
           (let jessie_<somenum> =
           (if ((le_double_ (C_199: (double_of_single !V30))) (double_of_real_exact 65535.0))
           then
            (C_198:
            (let jessie_<somenum> =
            (JC_<somenum>:
            (int32_of_integer_ (C_196:
                               (let jessie_<somenum> =
                               (C_195: (single_value !V30)) in
                               (truncate_real_to_int jessie_<somenum>))))) in
            (let jessie_<somenum> = G3 in
            (let jessie_<somenum> = (integer_of_int32 !G15) in
            (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
            begin
              (JC_<somenum>:
              (((((offset_upd_ !intP_G3_1_alloc_table) intP_intM_G3_1) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>));
             jessie_<somenum> end)))))
           else
            (C_194:
            (let jessie_<somenum> = (safe_int32_of_integer_ (65535)) in
            (let jessie_<somenum> = G3 in
            (let jessie_<somenum> = (integer_of_int32 !G15) in
            (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
            begin
              (JC_<somenum>:
              (((((offset_upd_ !intP_G3_1_alloc_table) intP_intM_G3_1) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>));
             jessie_<somenum> end)))))) in void);
           (let jessie_<somenum> =
           (V37 := (C_200:
                   (let jessie_<somenum> = !G15 in
                   (JC_<somenum>: (F5_requires jessie_<somenum>))))) in void);
           (let jessie_<somenum> =
           (G6 := (C_203:
                  (JC_<somenum>:
                  (int32_of_integer_ (C_202:
                                     ((bw_or (integer_of_int32 !G6)) 
                                      (integer_of_int32 !V37))))))) in void);
           (let jessie_<somenum> =
           (if ((neq_int_ (integer_of_int32 !G6)) (0))
           then
            (C_206: begin   (G7 := (safe_int32_of_integer_ (1))); !G7 end)
           else
            (C_205: begin   (G7 := (safe_int32_of_integer_ (0))); !G7 end)) in
           void); (G34 := !ptr_bas_loc_0); !G34 end)))))))
         else
          (C_151:
          (C_152:
          (C_153:
          (C_154:
          (C_155:
          (C_156:
          (C_157:
          (C_158:
          (C_159:
          (C_160:
          (C_161:
          (C_162:
          begin
            (let jessie_<somenum> =
            (G23 := (C_150:
                    (JC_<somenum>:
                    (int32_of_integer_ (C_149:
                                       ((add_int (integer_of_int32 !V35)) (1))))))) in
            void); (let jessie_<somenum> = (G24 := !V24) in void);
           (let jessie_<somenum> = (G25 := !V25) in void);
           (let jessie_<somenum> = (G26 := !V26) in void);
           (let jessie_<somenum> = (G27 := !V27) in void);
           (let jessie_<somenum> = (G28 := !V28) in void);
           (let jessie_<somenum> = (G29 := !V29) in void);
           (let jessie_<somenum> = (G30 := !V30) in void);
           (let jessie_<somenum> = (G31 := !V31) in void);
           (let jessie_<somenum> = (G32 := !V32) in void);
           (let jessie_<somenum> = (G12 := !V33) in void);
           (ptr_bas_loc_ram := !ptr_bas_loc_0); !ptr_bas_loc_ram end)))))))))))))
        end))))))))))))) in void) else void); (raise Return) end))))))))))))));
    (raise Return) end with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }

let main_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  try
   begin
     (let V38 = ref (any_int32 void) in
     (C_216:
     (C_218:
     (C_219:
     (C_220:
     begin
       (let jessie_<somenum> =
       (let __cil_tmp_0 =
       (C_213:
       (let jessie_<somenum> =
       (C_211:
       ((single_of_double_safe nearest_even) (double_of_real_exact 1.0))) in
       (let jessie_<somenum> =
       (C_212:
       ((single_of_double_safe nearest_even) (double_of_real_exact 1000.0))) in
       (JC_<somenum>: ((Frama_C_float_interval jessie_<somenum>) jessie_<somenum>))))) in
       (C_215: begin   (G20 := (C_214: __cil_tmp_0)); !G20 end)) in void);
      (let jessie_<somenum> =
      (G5 := (C_217:
             (let jessie_<somenum> = (safe_int32_of_integer_ (10)) in
             (let jessie_<somenum> = (safe_int32_of_integer_ (2000)) in
             (JC_<somenum>: ((Frama_C_interval jessie_<somenum>) jessie_<somenum>)))))) in
      void); (JC_<somenum>: (F6 void));
      (let jessie_<somenum> = (V38 := (safe_int32_of_integer_ (0))) in void);
      try
       begin
         (loop_4:
         while true do
         { invariant (JC_<somenum>: true)  }
          begin
            [ { } unit { true } ];
           try
            begin
              (let jessie_<somenum> =
              (C_221:
              (C_224:
              begin
                (if ((lt_int_ (integer_of_int32 !V38)) (integer_of_int32 !G4))
                then void else (raise (Goto_while_0_break_exc void)));
               (JC_<somenum>: (F7 void));
               (V38 := (C_223:
                       (safe_int32_of_integer_ (C_222:
                                               ((add_int (integer_of_int32 !V38)) (1))))));
               !V38 end)) in void); (raise (Loop_continue_exc void)) end with
            Loop_continue_exc jessie_<somenum> -> void end end done);
        (raise (Goto_while_0_break_exc void)) end with
       Goto_while_0_break_exc jessie_<somenum> -> (while_0_break: void) end;
      (raise Return) end))))); (raise Return) end with Return -> void end)
  { (JC_<somenum>: true) }

let main_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }
  (init:
  try
   begin
     (let V38 = ref (any_int32 void) in
     (C_216:
     (C_218:
     (C_219:
     (C_220:
     begin
       (let jessie_<somenum> =
       (let __cil_tmp_0 =
       (C_213:
       (let jessie_<somenum> =
       (C_211:
       (JC_<somenum>: ((single_of_double nearest_even) (double_of_real_exact 1.0)))) in
       (let jessie_<somenum> =
       (C_212:
       (JC_<somenum>:
       ((single_of_double nearest_even) (double_of_real_exact 1000.0)))) in
       (JC_<somenum>: ((Frama_C_float_interval_requires jessie_<somenum>) jessie_<somenum>))))) in
       (C_215: begin   (G20 := (C_214: __cil_tmp_0)); !G20 end)) in void);
      (let jessie_<somenum> =
      (G5 := (C_217:
             (let jessie_<somenum> = (safe_int32_of_integer_ (10)) in
             (let jessie_<somenum> = (safe_int32_of_integer_ (2000)) in
             (JC_<somenum>: ((Frama_C_interval_requires jessie_<somenum>) jessie_<somenum>)))))) in
      void); (JC_<somenum>: (F6_requires void));
      (let jessie_<somenum> = (V38 := (safe_int32_of_integer_ (0))) in void);
      try
       begin
         (loop_3:
         while true do
         { invariant (JC_<somenum>: true) variant (0) }
          begin
            [ { } unit { true } ];
           try
            begin
              (let jessie_<somenum> =
              (C_221:
              (C_224:
              begin
                (if ((lt_int_ (integer_of_int32 !V38)) (integer_of_int32 !G4))
                then void else (raise (Goto_while_0_break_exc void)));
               (JC_<somenum>: (F7_requires void));
               (V38 := (C_223:
                       (JC_<somenum>:
                       (int32_of_integer_ (C_222:
                                          ((add_int (integer_of_int32 !V38)) (1)))))));
               !V38 end)) in void); (raise (Loop_continue_exc void)) end with
            Loop_continue_exc jessie_<somenum> -> void end end done);
        (raise (Goto_while_0_break_exc void)) end with
       Goto_while_0_break_exc jessie_<somenum> -> (while_0_break: void) end;
      (raise Return) end))))); (raise Return) end with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>: valid_G3(intP_G3_1_alloc_table))
    and ((JC_<somenum>: valid_G8(floatP_G8_2_alloc_table))
        and ((JC_<somenum>: valid_G9(floatP_G9_3_alloc_table))
            and ((JC_<somenum>: valid_G10(floatP_G10_4_alloc_table))
                and ((JC_<somenum>: valid_G11(floatP_G11_5_alloc_table))
                    and (JC_<somenum>: valid_G13(intP_G13_6_alloc_table)))))))) }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C renamed1.jessie --quiet -f renamed1.makefile project
why --project [...] why/renamed1.why
<project name="renamed1" context="why/renamed1_ctx.why">
  <function name="Function main">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/renamed1_po181.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "442" begin = "37" end = "40"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po182.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "442" begin = "42" end = "48"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po183.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "442" begin = "14" end = "49"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po184.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "442" begin = "14" end = "49"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po185.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "442" begin = "14" end = "49"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po186.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "442" begin = "14" end = "49"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po187.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "442" begin = "14" end = "49"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po188.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "443" begin = "7" end = "33"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po189.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "443" begin = "7" end = "33"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po190.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "443" begin = "7" end = "33"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po191.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "443" begin = "7" end = "33"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po192.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "443" begin = "7" end = "33"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po193.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "427" begin = "15" end = "19"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po194.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "427" begin = "15" end = "19"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po195.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "427" begin = "15" end = "19"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po196.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "427" begin = "15" end = "19"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po197.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "427" begin = "15" end = "19"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po198.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "437" begin = "27" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po199.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "437" begin = "27" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po200.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "437" begin = "27" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po201.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "437" begin = "27" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po202.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "437" begin = "27" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po203.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "448" begin = "4" end = "10"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po204.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "448" begin = "4" end = "10"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po205.why">
      <location file = "why/renamed1.why" line = "2292" begin = "45" end = "46"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/renamed1_po206.why">
      <location file = "why/renamed1.why" line = "2292" begin = "45" end = "46"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/renamed1_po207.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "439" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po208.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "439" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po209.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "439" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po210.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "439" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po211.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "439" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function F7">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/renamed1_po117.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "366" begin = "12" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po118.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "366" begin = "12" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po119.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "366" begin = "11" end = "25"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po120.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "366" begin = "11" end = "25"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po121.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "367" begin = "16" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po122.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "367" begin = "16" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po123.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "367" begin = "32" end = "39"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po124.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "367" begin = "32" end = "39"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po125.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "384" begin = "39" end = "51"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po126.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "384" begin = "39" end = "51"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po127.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "384" begin = "39" end = "51"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po128.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "386" begin = "15" end = "24"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po129.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "386" begin = "28" end = "37"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po130.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "386" begin = "14" end = "37"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po131.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "386" begin = "41" end = "50"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po132.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "386" begin = "13" end = "50"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po133.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "387" begin = "33" end = "43"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po134.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "388" begin = "13" end = "23"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po135.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "394" begin = "7" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po136.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "394" begin = "7" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po137.why">
      <location file = "why/renamed1.why" line = "1939" begin = "48" end = "49"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/renamed1_po138.why">
      <location file = "why/renamed1.why" line = "1939" begin = "48" end = "49"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/renamed1_po139.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "403" begin = "16" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po140.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "403" begin = "16" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po141.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "404" begin = "20" end = "32"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po142.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "404" begin = "20" end = "32"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po143.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "404" begin = "20" end = "32"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po144.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "405" begin = "13" end = "22"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po145.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "405" begin = "26" end = "35"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po146.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "405" begin = "12" end = "35"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po147.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "405" begin = "39" end = "48"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po148.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "405" begin = "11" end = "48"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po149.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "407" begin = "21" end = "39"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po150.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "407" begin = "21" end = "54"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po151.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "407" begin = "21" end = "54"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po152.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "408" begin = "26" end = "44"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po153.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "408" begin = "26" end = "59"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po154.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "408" begin = "26" end = "59"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po155.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "410" begin = "13" end = "22"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po156.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "410" begin = "12" end = "29"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po157.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "410" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po158.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "410" begin = "11" end = "36"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po159.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "411" begin = "20" end = "39"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po160.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "411" begin = "20" end = "39"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po161.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "412" begin = "51" end = "54"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po162.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "412" begin = "51" end = "54"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po163.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "412" begin = "45" end = "54"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po164.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "412" begin = "45" end = "54"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po165.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "413" begin = "21" end = "26"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po166.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "413" begin = "21" end = "26"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po167.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "415" begin = "11" end = "18"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po168.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "415" begin = "11" end = "18"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po169.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "415" begin = "11" end = "18"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po170.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "415" begin = "11" end = "18"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po171.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "415" begin = "11" end = "18"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po172.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "416" begin = "5" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po173.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "416" begin = "5" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po174.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "421" begin = "17" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po175.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "421" begin = "17" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po176.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "339" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po177.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "339" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po178.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "339" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po179.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "339" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po180.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "339" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function F6">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/renamed1_po41.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "295" begin = "9" end = "34"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po42.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "295" begin = "9" end = "34"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po43.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "295" begin = "9" end = "34"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po44.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "295" begin = "9" end = "34"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po45.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "295" begin = "9" end = "34"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po46.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "296" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po47.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "296" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po48.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "296" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po49.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "296" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po50.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "296" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po51.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "300" begin = "15" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po52.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "300" begin = "15" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po53.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "300" begin = "8" end = "22"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/renamed1_po54.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "300" begin = "8" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po55.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "300" begin = "8" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po56.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "300" begin = "8" end = "26"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po57.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "300" begin = "8" end = "26"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po58.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "301" begin = "15" end = "18"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po59.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "242" begin = "42" end = "59"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po60.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "302" begin = "17" end = "37"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po61.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "302" begin = "17" end = "37"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po62.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "244" begin = "42" end = "59"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po63.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "303" begin = "17" end = "37"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po64.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "303" begin = "17" end = "37"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po65.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "304" begin = "16" end = "19"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po66.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "305" begin = "16" end = "19"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po67.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "306" begin = "16" end = "19"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po68.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "307" begin = "16" end = "19"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po69.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "308" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po70.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "308" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po71.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "308" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po72.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "308" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po73.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "308" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po74.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "309" begin = "16" end = "23"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po75.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "309" begin = "16" end = "23"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po76.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "310" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po77.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "310" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po78.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "310" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po79.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "310" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po80.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "310" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po81.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "311" begin = "17" end = "24"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po82.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "311" begin = "17" end = "24"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po83.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "311" begin = "38" end = "40"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po84.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "311" begin = "17" end = "40"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po85.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "311" begin = "17" end = "40"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po86.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "312" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po87.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "312" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po88.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "312" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po89.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "312" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po90.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "312" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po91.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "313" begin = "16" end = "24"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po92.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "313" begin = "16" end = "24"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po93.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "314" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po94.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "314" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po95.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "314" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po96.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "314" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po97.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "314" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po98.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "315" begin = "16" end = "24"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po99.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "315" begin = "16" end = "24"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po100.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "316" begin = "24" end = "42"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po101.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "316" begin = "17" end = "43"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po102.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "316" begin = "17" end = "43"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po103.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "316" begin = "17" end = "43"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po104.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "317" begin = "8" end = "17"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po105.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "318" begin = "18" end = "36"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po106.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "318" begin = "17" end = "52"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po107.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "318" begin = "17" end = "52"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po108.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "319" begin = "9" end = "18"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po109.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "319" begin = "8" end = "25"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po110.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "280" begin = "18" end = "46"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po111.why">
      <location file = "PPCHOME/tests/jessie/renamed1.jessie/renamed1.jc" line = "280" begin = "18" end = "46"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/renamed1_po112.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "278" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po113.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "278" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po114.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "278" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po115.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "278" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po116.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "278" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function F5">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/renamed1_po31.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "54" begin = "8" end = "15"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/renamed1_po32.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "54" begin = "8" end = "15"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/renamed1_po33.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "54" begin = "8" end = "15"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/renamed1_po34.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "54" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po35.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "54" begin = "8" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/renamed1_po36.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "51" begin = "3" end = "5"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po37.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "51" begin = "3" end = "5"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po38.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "51" begin = "3" end = "5"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po39.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "51" begin = "3" end = "5"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po40.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "51" begin = "3" end = "5"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function F4">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/renamed1_po21.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "41" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po22.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "41" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po23.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "41" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po24.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "41" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po25.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "41" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po26.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "38" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po27.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "38" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po28.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "38" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po29.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "38" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po30.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "38" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function F3">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/renamed1_po11.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "34" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po12.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "34" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po13.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "34" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po14.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "34" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po15.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "34" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po16.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "31" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po17.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "31" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po18.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "31" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po19.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "31" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po20.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "31" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function F2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/renamed1_po1.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "27" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po2.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "27" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po3.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "27" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po4.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "27" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po5.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "27" begin = "8" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/renamed1_po6.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "24" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po7.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "24" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po8.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "24" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po9.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "24" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/renamed1_po10.why">
      <location file = "PPCHOME/tests/jessie/renamed1.c" line = "24" begin = "4" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type mode =
  | nearest_even
  | to_zero
  | up
  | down
  | nearest_away

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom exact_round_double_for_doubles:
  (forall x:double.
    (forall m:mode. (round_double(m, double_value(x)) = double_value(x))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom exact_round_single_for_singles:
  (forall x:single.
    (forall m:mode. (round_single(m, single_value(x)) = single_value(x))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

axiom single_value_is_bounded:
  (forall x:single. (abs_real(single_value(x)) <= max_single))

axiom double_value_is_bounded:
  (forall x:double. (abs_real(double_value(x)) <= max_double))

predicate single_of_real_post(m: mode, x: real, res: single) =
  ((single_value(res) = round_single(m, x)) and
   ((single_exact(res) = x) and (single_model(res) = x)))

predicate single_of_double_post(m: mode, x: double, res: single) =
  ((single_value(res) = round_single(m, double_value(x))) and
   ((single_exact(res) = double_exact(x)) and
    (single_model(res) = double_model(x))))

predicate add_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) + single_value(y)))) and
   ((single_exact(res) = (single_exact(x) + single_exact(y))) and
    (single_model(res) = (single_model(x) + single_model(y)))))

predicate sub_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) - single_value(y)))) and
   ((single_exact(res) = (single_exact(x) - single_exact(y))) and
    (single_model(res) = (single_model(x) - single_model(y)))))

predicate mul_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) * single_value(y)))) and
   ((single_exact(res) = (single_exact(x) * single_exact(y))) and
    (single_model(res) = (single_model(x) * single_model(y)))))

predicate div_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m, div_real(single_value(x),
   single_value(y)))) and
   ((single_exact(res) = div_real(single_exact(x), single_exact(y))) and
    (single_model(res) = div_real(single_model(x), single_model(y)))))

predicate sqrt_single_post(m: mode, x: single, res: single) =
  ((single_value(res) = round_single(m, sqrt_real(single_value(x)))) and
   ((single_exact(res) = sqrt_real(single_exact(x))) and
    (single_model(res) = sqrt_real(single_model(x)))))

predicate neg_single_post(x: single, res: single) =
  ((single_value(res) = (-single_value(x))) and
   ((single_exact(res) = (-single_exact(x))) and
    (single_model(res) = (-single_model(x)))))

predicate abs_single_post(x: single, res: single) =
  ((single_value(res) = abs_real(single_value(x))) and
   ((single_exact(res) = abs_real(single_exact(x))) and
    (single_model(res) = abs_real(single_model(x)))))

predicate double_of_real_post(m: mode, x: real, res: double) =
  ((double_value(res) = round_double(m, x)) and
   ((double_exact(res) = x) and (double_model(res) = x)))

predicate double_of_single_post(x: single, res: double) =
  ((double_value(res) = single_value(x)) and
   ((double_exact(res) = single_exact(x)) and
    (double_model(res) = single_model(x))))

predicate add_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) + double_value(y)))) and
   ((double_exact(res) = (double_exact(x) + double_exact(y))) and
    (double_model(res) = (double_model(x) + double_model(y)))))

predicate sub_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) - double_value(y)))) and
   ((double_exact(res) = (double_exact(x) - double_exact(y))) and
    (double_model(res) = (double_model(x) - double_model(y)))))

predicate mul_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) * double_value(y)))) and
   ((double_exact(res) = (double_exact(x) * double_exact(y))) and
    (double_model(res) = (double_model(x) * double_model(y)))))

predicate div_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m, div_real(double_value(x),
   double_value(y)))) and
   ((double_exact(res) = div_real(double_exact(x), double_exact(y))) and
    (double_model(res) = div_real(double_model(x), double_model(y)))))

predicate sqrt_double_post(m: mode, x: double, res: double) =
  ((double_value(res) = round_double(m, sqrt_real(double_value(x)))) and
   ((double_exact(res) = sqrt_real(double_exact(x))) and
    (double_model(res) = sqrt_real(double_model(x)))))

predicate neg_double_post(x: double, res: double) =
  ((double_value(res) = (-double_value(x))) and
   ((double_exact(res) = (-double_exact(x))) and
    (double_model(res) = (-double_model(x)))))

predicate abs_double_post(x: double, res: double) =
  ((double_value(res) = abs_real(double_value(x))) and
   ((double_exact(res) = abs_real(double_exact(x))) and
    (double_model(res) = abs_real(double_model(x)))))

type G10_4

type G11_5

type G13_6

type G3_1

type G8_2

type G9_3

type charP

type floatP

type int32

type int8

type intP

type padding

type voidP

logic G1 : int32

logic G10 : floatP pointer

logic G11 : floatP pointer

logic G13 : intP pointer

logic G2 : int32

logic G3 : intP pointer

logic G8 : floatP pointer

logic G9 : floatP pointer

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic floatP_tag : floatP tag_id

axiom floatP_int: (int_of_tag(floatP_tag) = 1)

logic floatP_of_pointer_address : unit pointer -> floatP pointer

axiom floatP_of_pointer_address_of_pointer_addr:
  (forall p:floatP pointer.
    (p = floatP_of_pointer_address(pointer_address(p))))

axiom floatP_parenttag_bottom: parenttag(floatP_tag, bottom_tag)

axiom floatP_tags:
  (forall x:floatP pointer.
    (forall floatP_tag_table:floatP tag_table. instanceof(floatP_tag_table,
      x, floatP_tag)))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32 [(integer_of_int32(x) = integer_of_int32(y))].
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8 [(integer_of_int8(x) = integer_of_int8(y))].
      ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_floatP(p: floatP pointer, a: int,
  floatP_alloc_table: floatP alloc_table) = (offset_min(floatP_alloc_table,
  p) <= a)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_floatP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(floatP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_floatP(p: floatP pointer, b: int,
  floatP_alloc_table: floatP alloc_table) = (offset_max(floatP_alloc_table,
  p) >= b)

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_floatP(p: floatP pointer, a: int, b: int,
  floatP_alloc_table: floatP alloc_table) =
  ((offset_min(floatP_alloc_table, p) = a) and
   (offset_max(floatP_alloc_table, p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_floatP(p: floatP pointer, a: int, b: int,
  floatP_alloc_table: floatP alloc_table) =
  ((offset_min(floatP_alloc_table, p) = a) and
   (offset_max(floatP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate valid_G10(floatP_G10_4_alloc_table: floatP alloc_table) =
  ((offset_min(floatP_G10_4_alloc_table, G10) <= 0) and
   (offset_max(floatP_G10_4_alloc_table, G10) >= 63))

predicate valid_G11(floatP_G11_5_alloc_table: floatP alloc_table) =
  ((offset_min(floatP_G11_5_alloc_table, G11) <= 0) and
   (offset_max(floatP_G11_5_alloc_table, G11) >= 31))

predicate valid_G13(intP_G13_6_alloc_table: intP alloc_table) =
  ((offset_min(intP_G13_6_alloc_table, G13) <= 0) and
   (offset_max(intP_G13_6_alloc_table, G13) >= 1999))

predicate valid_G3(intP_G3_1_alloc_table: intP alloc_table) =
  ((offset_min(intP_G3_1_alloc_table, G3) <= 0) and
   (offset_max(intP_G3_1_alloc_table, G3) >= 63))

predicate valid_G8(floatP_G8_2_alloc_table: floatP alloc_table) =
  ((offset_min(floatP_G8_2_alloc_table, G8) <= 0) and
   (offset_max(floatP_G8_2_alloc_table, G8) >= 63))

predicate valid_G9(floatP_G9_3_alloc_table: floatP alloc_table) =
  ((offset_min(floatP_G9_3_alloc_table, G9) <= 0) and
   (offset_max(floatP_G9_3_alloc_table, G9) >= 63))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_floatP(p: floatP pointer, a: int, b: int,
  floatP_alloc_table: floatP alloc_table) =
  ((offset_min(floatP_alloc_table, p) <= a) and
   (offset_max(floatP_alloc_table, p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_floatP(p: floatP pointer, a: int, b: int,
  floatP_alloc_table: floatP alloc_table) =
  ((offset_min(floatP_alloc_table, p) <= a) and
   (offset_max(floatP_alloc_table, p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

