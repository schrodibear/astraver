Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -add-symbolic-path PPCHOME:PPCHOME -jessie -jessie-gen-only bts0080.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -dD PPCHOME/tests/jessie/bts0080.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir bts0080.jessie
[jessie] File bts0080.jessie/bts0080.jc written.
[jessie] File bts0080.jessie/bts0080.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

unit Swap(intP[..] p, intP[..] q)
  requires (C_11 : (((C_13 : (\offset_min(p) <= 0)) &&
                      (C_14 : (\offset_max(p) >= 0))) &&
                     ((C_16 : (\offset_min(q) <= 0)) &&
                       (C_17 : (\offset_max(q) >= 0)))));
behavior default:
  assigns p.intM,
  q.intM;
  ensures (C_8 : ((C_9 : (\at(p,Old).intM == \at(q.intM,Old))) &&
                   (C_10 : (\at(q,Old).intM == \at(p.intM,Old)))));
{  
   (var int32 temp);
   
   {  (C_2 : (temp = (C_1 : p.intM)));
      (C_5 : ((C_4 : p.intM) = (C_3 : q.intM)));
      (C_7 : ((C_6 : q.intM) = temp));
      
      (return ())
   }
}

unit foo(intP[..] a, int32 k)
  requires (C_22 : ((C_23 : (\offset_min(a) <= 0)) &&
                     (C_24 : (\offset_max(a) >= k))));
behavior default:
  ensures (C_21 : true);
{  
   {  (C_20 : Swap((C_18 : (a + 0)), (C_19 : (a + k))));
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs bts0080.jessie/bts0080.cloc bts0080.jessie/bts0080.jc
type charP

type int32

type int8

type intP

type padding

type uint8

type unsigned_charP

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter Swap :
 p:intP pointer ->
  q:intP pointer ->
   intP_intM_q_2:(intP, int32) memory ref ->
    intP_intM_p_1:(intP, int32) memory ref ->
     intP_q_2_alloc_table:intP alloc_table ->
      intP_p_1_alloc_table:intP alloc_table ->
       { } unit reads intP_intM_p_1,intP_intM_q_2
       writes intP_intM_p_1,intP_intM_q_2
       { (JC_<somenum>:
         ((JC_<somenum>:
          ((JC_<somenum>:
           (integer_of_int32(select(intP_intM_p_1, p)) = integer_of_int32(
                                                         select(intP_intM_q_2@,
                                                         q))))
          and (JC_<somenum>:
              (integer_of_int32(select(intP_intM_q_2, q)) = integer_of_int32(
                                                            select(intP_intM_p_1@,
                                                            p))))))
         and (JC_<somenum>:
             ((JC_<somenum>:
              not_assigns(intP_p_1_alloc_table, intP_intM_p_1@,
              intP_intM_p_1, pset_singleton(p)))
             and (JC_<somenum>:
                 not_assigns(intP_q_2_alloc_table, intP_intM_q_2@,
                 intP_intM_q_2, pset_singleton(q))))))) }

parameter Swap_requires :
 p:intP pointer ->
  q:intP pointer ->
   intP_intM_q_2:(intP, int32) memory ref ->
    intP_intM_p_1:(intP, int32) memory ref ->
     intP_q_2_alloc_table:intP alloc_table ->
      intP_p_1_alloc_table:intP alloc_table ->
       { (JC_<somenum>:
         ((JC_<somenum>: le_int(offset_min(intP_p_1_alloc_table, p), (0)))
         and ((JC_<somenum>: ge_int(offset_max(intP_p_1_alloc_table, p), (0)))
             and ((JC_<somenum>: le_int(offset_min(intP_q_2_alloc_table, q), (0)))
                 and (JC_<somenum>: ge_int(offset_max(intP_q_2_alloc_table, q), (0)))))))}
       unit reads intP_intM_p_1,intP_intM_q_2
       writes intP_intM_p_1,intP_intM_q_2
       { (JC_<somenum>:
         ((JC_<somenum>:
          ((JC_<somenum>:
           (integer_of_int32(select(intP_intM_p_1, p)) = integer_of_int32(
                                                         select(intP_intM_q_2@,
                                                         q))))
          and (JC_<somenum>:
              (integer_of_int32(select(intP_intM_q_2, q)) = integer_of_int32(
                                                            select(intP_intM_p_1@,
                                                            p))))))
         and (JC_<somenum>:
             ((JC_<somenum>:
              not_assigns(intP_p_1_alloc_table, intP_intM_p_1@,
              intP_intM_p_1, pset_singleton(p)))
             and (JC_<somenum>:
                 not_assigns(intP_q_2_alloc_table, intP_intM_q_2@,
                 intP_intM_q_2, pset_singleton(q))))))) }

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter foo :
 a:intP pointer ->
  k:int32 ->
   intP_intM_a_3:(intP, int32) memory ref ->
    intP_a_3_alloc_table:intP alloc_table ->
     { } unit reads intP_intM_a_3 writes intP_intM_a_3 { true }

parameter foo_requires :
 a:intP pointer ->
  k:int32 ->
   intP_intM_a_3:(intP, int32) memory ref ->
    intP_a_3_alloc_table:intP alloc_table ->
     { (JC_<somenum>:
       ((JC_<somenum>: le_int(offset_min(intP_a_3_alloc_table, a), (0)))
       and (JC_<somenum>:
           ge_int(offset_max(intP_a_3_alloc_table, a), integer_of_int32(k)))))}
     unit reads intP_intM_a_3 writes intP_intM_a_3 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let Swap_ensures_default =
 fun (p : intP pointer) (q : intP pointer) (intP_intM_p_1 : (intP, int32) memory ref) (intP_intM_q_2 : (intP, int32) memory ref) (intP_p_1_alloc_table : intP alloc_table) (intP_q_2_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(intP_p_1_alloc_table, p), (0)))
    and ((JC_<somenum>: ge_int(offset_max(intP_p_1_alloc_table, p), (0)))
        and ((JC_<somenum>: le_int(offset_min(intP_q_2_alloc_table, q), (0)))
            and (JC_<somenum>: ge_int(offset_max(intP_q_2_alloc_table, q), (0))))))) }
  (init:
  try
   begin
     (let temp = ref (any_int32 void) in
     (C_2:
     begin
       (let _jessie_<somenum> = (temp := (C_1: ((safe_acc_ !intP_intM_p_1) p))) in
       void);
      (C_5:
      begin
        (let _jessie_<somenum> = (C_3: ((safe_acc_ !intP_intM_q_2) q)) in
        (let _jessie_<somenum> = p in
        (((safe_upd_ intP_intM_p_1) _jessie_<somenum>) _jessie_<somenum>)));
       (C_7:
       begin
         (let _jessie_<somenum> = !temp in
         (let _jessie_<somenum> = q in
         (((safe_upd_ intP_intM_q_2) _jessie_<somenum>) _jessie_<somenum>)));
        (raise Return) end) end) end)); (raise Return) end with Return ->
   void end)
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>:
      (integer_of_int32(select(intP_intM_p_1, p)) = integer_of_int32(
                                                    select(intP_intM_q_2@, q))))
     and (JC_<somenum>:
         (integer_of_int32(select(intP_intM_q_2, q)) = integer_of_int32(
                                                       select(intP_intM_p_1@,
                                                       p))))))
    and (JC_<somenum>:
        ((JC_<somenum>:
         not_assigns(intP_p_1_alloc_table, intP_intM_p_1@, intP_intM_p_1,
         pset_singleton(p)))
        and (JC_<somenum>:
            not_assigns(intP_q_2_alloc_table, intP_intM_q_2@, intP_intM_q_2,
            pset_singleton(q))))))) }

let Swap_safety =
 fun (p : intP pointer) (q : intP pointer) (intP_intM_p_1 : (intP, int32) memory ref) (intP_intM_q_2 : (intP, int32) memory ref) (intP_p_1_alloc_table : intP alloc_table) (intP_q_2_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(intP_p_1_alloc_table, p), (0)))
    and ((JC_<somenum>: ge_int(offset_max(intP_p_1_alloc_table, p), (0)))
        and ((JC_<somenum>: le_int(offset_min(intP_q_2_alloc_table, q), (0)))
            and (JC_<somenum>: ge_int(offset_max(intP_q_2_alloc_table, q), (0))))))) }
  (init:
  try
   begin
     (let temp = ref (any_int32 void) in
     (C_2:
     begin
       (let _jessie_<somenum> =
       (temp := (C_1:
                (JC_<somenum>: (((acc_ intP_p_1_alloc_table) !intP_intM_p_1) p)))) in
       void);
      (C_5:
      begin
        (let _jessie_<somenum> =
        (C_3: (JC_<somenum>: (((acc_ intP_q_2_alloc_table) !intP_intM_q_2) q))) in
        (let _jessie_<somenum> = p in
        (JC_<somenum>:
        ((((upd_ intP_p_1_alloc_table) intP_intM_p_1) _jessie_<somenum>) _jessie_<somenum>))));
       (C_7:
       begin
         (let _jessie_<somenum> = !temp in
         (let _jessie_<somenum> = q in
         (JC_<somenum>:
         ((((upd_ intP_q_2_alloc_table) intP_intM_q_2) _jessie_<somenum>) _jessie_<somenum>))));
        (raise Return) end) end) end)); (raise Return) end with Return ->
   void end) { true }

let foo_ensures_default =
 fun (a : intP pointer) (k : int32) (intP_intM_a_3 : (intP, int32) memory ref) (intP_a_3_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(intP_a_3_alloc_table, a), (0)))
    and (JC_<somenum>:
        ge_int(offset_max(intP_a_3_alloc_table, a), integer_of_int32(k))))) }
  (init:
  try
   (C_20:
   begin
     (let _jessie_<somenum> = (C_18: ((shift a) (0))) in
     (let _jessie_<somenum> = (C_19: ((shift a) (integer_of_int32 k))) in
     (JC_<somenum>:
     ((((((Swap _jessie_<somenum>) _jessie_<somenum>) intP_intM_a_3) intP_intM_a_3) intP_a_3_alloc_table) intP_a_3_alloc_table))));
    (raise Return); (raise Return) end) with Return -> void end)
  { (JC_<somenum>: true) }

let foo_safety =
 fun (a : intP pointer) (k : int32) (intP_intM_a_3 : (intP, int32) memory ref) (intP_a_3_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(intP_a_3_alloc_table, a), (0)))
    and (JC_<somenum>:
        ge_int(offset_max(intP_a_3_alloc_table, a), integer_of_int32(k))))) }
  (init:
  try
   (C_20:
   begin
     (let _jessie_<somenum> = (C_18: ((shift a) (0))) in
     (let _jessie_<somenum> = (C_19: ((shift a) (integer_of_int32 k))) in
     (JC_<somenum>:
     ((((((Swap_requires _jessie_<somenum>) _jessie_<somenum>) intP_intM_a_3) intP_intM_a_3) intP_a_3_alloc_table) intP_a_3_alloc_table))));
    (raise Return); (raise Return) end) with Return -> void end) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C bts0080.jessie --quiet -f bts0080.makefile project
why --project [...] why/bts0080.why
