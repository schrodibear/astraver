Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only bts0080.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD bts0080.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir bts0080.jessie
[jessie] File bts0080.jessie/bts0080.jc written.
[jessie] File bts0080.jessie/bts0080.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag int_P = {
  int32 int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

unit Swap(int_P[..] p, int_P[..] q)
  requires (C_8 : (((C_10 : (\offset_min(p) <= 0)) &&
                     (C_11 : (\offset_max(p) >= 0))) &&
                    ((C_13 : (\offset_min(q) <= 0)) &&
                      (C_14 : (\offset_max(q) >= 0)))));
behavior default:
  assigns p.int_M,
  q.int_M;
  ensures (C_15 : ((C_16 : (p.int_M == \old(q.int_M))) &&
                    (C_17 : (q.int_M == \old(p.int_M)))));
{  
   (var int32 temp);
   
   {  (C_2 : (temp = (C_1 : p.int_M)));
      (C_5 : ((C_4 : p.int_M) = (C_3 : q.int_M)));
      (C_7 : ((C_6 : q.int_M) = temp));
      
      (return ())
   }
}

unit foo(int_P[..] a, int32 k)
  requires (C_21 : ((C_22 : (\offset_min(a) <= 0)) &&
                     (C_23 : (\offset_max(a) >= k))));
behavior default:
  ensures (C_24 : true);
{  
   {  (C_20 : Swap((C_18 : (a + 0)), (C_19 : (a + k))));
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs bts0080.jessie/bts0080.cloc bts0080.jessie/bts0080.jc
type char_P

type int32

type int8

type int_P

type padding

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

predicate left_valid_struct_char_P(p:char_P pointer, a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_int_P(p:int_P pointer, a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer, a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer, b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_int_P(p:int_P pointer, b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer, b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter Swap :
 p:int_P pointer ->
  q:int_P pointer ->
   int_P_int_M_q_2:(int_P, int32) memory ref ->
    int_P_int_M_p_1:(int_P, int32) memory ref ->
     int_P_q_2_alloc_table:int_P alloc_table ->
      int_P_p_1_alloc_table:int_P alloc_table ->
       { } unit reads int_P_int_M_p_1,int_P_int_M_q_2
       writes int_P_int_M_p_1,int_P_int_M_q_2
       { (JC_26:
         ((JC_22:
          ((JC_20:
           eq_int(integer_of_int32(select(int_P_int_M_p_1, p)),
           integer_of_int32(select(int_P_int_M_q_2@, q@))))
          and (JC_21:
              eq_int(integer_of_int32(select(int_P_int_M_q_2, q)),
              integer_of_int32(select(int_P_int_M_p_1@, p@))))))
         and (JC_25:
             ((JC_23:
              not_assigns(int_P_p_1_alloc_table@, int_P_int_M_p_1@,
              int_P_int_M_p_1, pset_singleton(p@)))
             and (JC_24:
                 not_assigns(int_P_q_2_alloc_table@, int_P_int_M_q_2@,
                 int_P_int_M_q_2, pset_singleton(q@))))))) }

parameter Swap_requires :
 p:int_P pointer ->
  q:int_P pointer ->
   int_P_int_M_q_2:(int_P, int32) memory ref ->
    int_P_int_M_p_1:(int_P, int32) memory ref ->
     int_P_q_2_alloc_table:int_P alloc_table ->
      int_P_p_1_alloc_table:int_P alloc_table ->
       { (JC_5:
         ((JC_1: le_int(offset_min(int_P_p_1_alloc_table, p), (0)))
         and ((JC_2: ge_int(offset_max(int_P_p_1_alloc_table, p), (0)))
             and ((JC_3: le_int(offset_min(int_P_q_2_alloc_table, q), (0)))
                 and (JC_4:
                     ge_int(offset_max(int_P_q_2_alloc_table, q), (0)))))))}
       unit reads int_P_int_M_p_1,int_P_int_M_q_2
       writes int_P_int_M_p_1,int_P_int_M_q_2
       { (JC_26:
         ((JC_22:
          ((JC_20:
           eq_int(integer_of_int32(select(int_P_int_M_p_1, p)),
           integer_of_int32(select(int_P_int_M_q_2@, q@))))
          and (JC_21:
              eq_int(integer_of_int32(select(int_P_int_M_q_2, q)),
              integer_of_int32(select(int_P_int_M_p_1@, p@))))))
         and (JC_25:
             ((JC_23:
              not_assigns(int_P_p_1_alloc_table@, int_P_int_M_p_1@,
              int_P_int_M_p_1, pset_singleton(p@)))
             and (JC_24:
                 not_assigns(int_P_q_2_alloc_table@, int_P_int_M_q_2@,
                 int_P_int_M_q_2, pset_singleton(q@))))))) }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter foo :
 a:int_P pointer ->
  k:int32 ->
   int_P_int_M_a_3:(int_P, int32) memory ref ->
    int_P_a_3_alloc_table:int_P alloc_table ->
     { } unit reads int_P_int_M_a_3 writes int_P_int_M_a_3 { true }

parameter foo_requires :
 a:int_P pointer ->
  k:int32 ->
   int_P_int_M_a_3:(int_P, int32) memory ref ->
    int_P_a_3_alloc_table:int_P alloc_table ->
     { (JC_35:
       ((JC_33: le_int(offset_min(int_P_a_3_alloc_table, a), (0)))
       and (JC_34:
           ge_int(offset_max(int_P_a_3_alloc_table, a), integer_of_int32(k)))))}
     unit reads int_P_int_M_a_3 writes int_P_int_M_a_3 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let Swap_ensures_default =
 fun (p : int_P pointer) (q : int_P pointer) (int_P_int_M_p_1 : (int_P, int32) memory ref) (int_P_int_M_q_2 : (int_P, int32) memory ref) (int_P_p_1_alloc_table : int_P alloc_table) (int_P_q_2_alloc_table : int_P alloc_table) ->
  { (JC_11:
    ((JC_7: le_int(offset_min(int_P_p_1_alloc_table, p), (0)))
    and ((JC_8: ge_int(offset_max(int_P_p_1_alloc_table, p), (0)))
        and ((JC_9: le_int(offset_min(int_P_q_2_alloc_table, q), (0)))
            and (JC_10: ge_int(offset_max(int_P_q_2_alloc_table, q), (0))))))) }
  (init:
  try
   begin
     (let temp = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_16 = (temp := (C_1: ((safe_acc_ !int_P_int_M_p_1) p))) in
       void);
      (C_5:
      begin
        (let jessie_22 =
        (let jessie_18 = (C_3: ((safe_acc_ !int_P_int_M_q_2) q)) in
        (let jessie_21 = p in
        (((safe_upd_ int_P_int_M_p_1) jessie_21) jessie_18))) in void);
       (C_7:
       begin
         (let jessie_28 =
         (let jessie_24 = !temp in
         (let jessie_27 = q in
         (((safe_upd_ int_P_int_M_q_2) jessie_27) jessie_24))) in void);
        (raise Return) end) end) end)); (raise Return) end with Return ->
   void end)
  { (JC_19:
    ((JC_15:
     ((JC_13:
      eq_int(integer_of_int32(select(int_P_int_M_p_1, p)),
      integer_of_int32(select(int_P_int_M_q_2@, q@))))
     and (JC_14:
         eq_int(integer_of_int32(select(int_P_int_M_q_2, q)),
         integer_of_int32(select(int_P_int_M_p_1@, p@))))))
    and (JC_18:
        ((JC_16:
         not_assigns(int_P_p_1_alloc_table@, int_P_int_M_p_1@,
         int_P_int_M_p_1, pset_singleton(p@)))
        and (JC_17:
            not_assigns(int_P_q_2_alloc_table@, int_P_int_M_q_2@,
            int_P_int_M_q_2, pset_singleton(q@))))))) }

let Swap_safety =
 fun (p : int_P pointer) (q : int_P pointer) (int_P_int_M_p_1 : (int_P, int32) memory ref) (int_P_int_M_q_2 : (int_P, int32) memory ref) (int_P_p_1_alloc_table : int_P alloc_table) (int_P_q_2_alloc_table : int_P alloc_table) ->
  { (JC_11:
    ((JC_7: le_int(offset_min(int_P_p_1_alloc_table, p), (0)))
    and ((JC_8: ge_int(offset_max(int_P_p_1_alloc_table, p), (0)))
        and ((JC_9: le_int(offset_min(int_P_q_2_alloc_table, q), (0)))
            and (JC_10: ge_int(offset_max(int_P_q_2_alloc_table, q), (0))))))) }
  (init:
  try
   begin
     (let temp = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_2 =
       (temp := (C_1:
                (JC_29: (((acc_ int_P_p_1_alloc_table) !int_P_int_M_p_1) p)))) in
       void);
      (C_5:
      begin
        (let jessie_8 =
        (let jessie_4 =
        (C_3: (JC_30: (((acc_ int_P_q_2_alloc_table) !int_P_int_M_q_2) q))) in
        (let jessie_7 = p in
        (JC_31:
        ((((upd_ int_P_p_1_alloc_table) int_P_int_M_p_1) jessie_7) jessie_4)))) in
        void);
       (C_7:
       begin
         (let jessie_14 =
         (let jessie_10 = !temp in
         (let jessie_13 = q in
         (JC_32:
         ((((upd_ int_P_q_2_alloc_table) int_P_int_M_q_2) jessie_13) jessie_10)))) in
         void); (raise Return) end) end) end)); (raise Return) end with
   Return -> void end) { true }

let foo_ensures_default =
 fun (a : int_P pointer) (k : int32) (int_P_int_M_a_3 : (int_P, int32) memory ref) (int_P_a_3_alloc_table : int_P alloc_table) ->
  { (JC_39:
    ((JC_37: le_int(offset_min(int_P_a_3_alloc_table, a), (0)))
    and (JC_38:
        ge_int(offset_max(int_P_a_3_alloc_table, a), integer_of_int32(k))))) }
  (init:
  try
   begin
     (C_20:
     begin
       (let jessie_32 = (C_18: ((shift a) (0))) in
       (let jessie_31 = (C_19: ((shift a) (integer_of_int32 k))) in
       (JC_46:
       ((((((Swap jessie_32) jessie_31) int_P_int_M_a_3) int_P_int_M_a_3) int_P_a_3_alloc_table) int_P_a_3_alloc_table))));
      (raise Return) end); (raise Return) end with Return -> void end)
  { (JC_41: true) }

let foo_safety =
 fun (a : int_P pointer) (k : int32) (int_P_int_M_a_3 : (int_P, int32) memory ref) (int_P_a_3_alloc_table : int_P alloc_table) ->
  { (JC_39:
    ((JC_37: le_int(offset_min(int_P_a_3_alloc_table, a), (0)))
    and (JC_38:
        ge_int(offset_max(int_P_a_3_alloc_table, a), integer_of_int32(k))))) }
  (init:
  try
   begin
     (C_20:
     begin
       (let jessie_30 = (C_18: ((shift a) (0))) in
       (let jessie_29 = (C_19: ((shift a) (integer_of_int32 k))) in
       (JC_45:
       ((((((Swap_requires jessie_30) jessie_29) int_P_int_M_a_3) int_P_int_M_a_3) int_P_a_3_alloc_table) int_P_a_3_alloc_table))));
      (raise Return) end); (raise Return) end with Return -> void end)
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C bts0080.jessie --quiet -f bts0080.makefile project
why --project [...] why/bts0080.why
