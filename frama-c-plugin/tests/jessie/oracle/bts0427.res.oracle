Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only bts0427.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD bts0427.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir bts0427.jessie
[jessie] File bts0427.jessie/bts0427.jc written.
[jessie] File bts0427.jessie/bts0427.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint32 = 0..4294967295

type int32 = -2147483648..2147483647

type int8 = -128..127

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

tag stack_t = {
  intP[..] data_0: 32; 
  uint32 size_1: 32; 
  uint32 used: 32;
}

type stack_t = [stack_t]

predicate stack_initialized{L}(stack_t[..] s) =
(((0 < s.size_1) &&
   ((\offset_min(s.data_0) <= 0) && (\offset_max(s.data_0) >= 0))) &&
  ((\offset_min(s.data_0) <= 0) && (\offset_max(s.data_0) >= s.size_1)))

predicate stack_full{L}(stack_t[..] s_0) =
(stack_initialized{L}(s_0) && (s_0.used == s_0.size_1))

predicate stack_empty{L}(stack_t[..] s_1) =
(stack_initialized{L}(s_1) && (s_1.used == 0))

int32 stack_valid(stack_t[..] stack_2)
  requires (C_11 : ((C_12 : (\offset_min(stack_2) <= 0)) &&
                     (C_13 : (\offset_max(stack_2) >= 0))));
behavior default:
  ensures (C_6 : (((C_8 : (0 <= \result)) && (C_9 : (\result <= 1))) &&
                   (C_10 : (stack_initialized{Here}(\at(stack_2,Old)) ==>
                             (\result == 1)))));
{  
   (var int32 tmp);
   
   {  (if ((C_5 : stack_2.data_0) != null) then (if ((C_4 : stack_2.size_1) !=
                                                      0) then (C_3 : (tmp = 1)) else 
                                                (C_2 : (tmp = 0))) else 
      (C_1 : (tmp = 0)));
      
      (return tmp)
   }
}

unit stack_init(stack_t[..] stack, intP[..] data, uint32 size_0)
  requires (C_30 : ((C_31 : (\offset_min(stack) <= 0)) &&
                     (C_32 : (\offset_max(stack) >= 0))));
  requires (C_27 : ((C_28 : (\offset_min(data) <= 0)) &&
                     (C_29 : (\offset_max(data) >= 0))));
  requires (C_24 : ((C_25 : (\offset_min(data) <= 0)) &&
                     (C_26 : (\offset_max(data) >= size_0))));
  requires (C_23 : (0 < size_0));
behavior default:
  ensures (C_20 : ((C_21 : stack_initialized{Here}(\at(stack,Old))) &&
                    (C_22 : (\at(stack,Old).used == 0))));
{  
   {  (C_15 : ((C_14 : stack.data_0) = data));
      (C_17 : ((C_16 : stack.size_1) = size_0));
      (C_19 : ((C_18 : stack.used) = 0));
      
      (return ())
   }
}

int32 stack_push(stack_t[..] stack_1, int32 item_0)
  requires (C_49 : ((C_50 : (\offset_min(stack_1) <= 0)) &&
                     (C_51 : (\offset_max(stack_1) >= 0))));
  requires (C_48 : stack_initialized{Here}(stack_1));
behavior default:
  ensures (C_47 : ((! stack_full{Here}(\at(stack_1,Old))) ==>
                    (\at(stack_1.used,Old) < \at(stack_1,Old).used)));
{  
   (var int32 __retres);
   
   {  (if ((C_46 : stack_1.used) < (C_45 : stack_1.size_1)) then 
      {  (C_38 : ((C_37 : stack_1.used) = (C_36 : ((C_35 : ((C_34 : stack_1.used) +
                                                             1)) :> uint32))));
         (C_43 : ((C_42 : (C_41 : ((C_40 : stack_1.data_0) +
                                    (C_39 : stack_1.used))).intM) = item_0));
         (C_44 : (__retres = 1));
         
         (goto return_label)
      } else 
      {  (C_33 : (__retres = 0));
         
         (goto return_label)
      });
      (return_label : 
      (return __retres))
   }
}

int32 stack_pop(stack_t[..] stack_0, intP[..] item)
  requires (C_71 : ((C_72 : (\offset_min(stack_0) <= 0)) &&
                     (C_73 : (\offset_max(stack_0) >= 0))));
  requires (C_70 : stack_initialized{Here}(stack_0));
  requires (C_67 : ((C_68 : (\offset_min(item) <= 0)) &&
                     (C_69 : (\offset_max(item) >= 0))));
behavior default:
  ensures (C_66 : true);
{  
   (var int32 __retres_0);
   
   {  (if ((C_65 : stack_0.used) > 0) then 
      {  (C_58 : ((C_57 : item.intM) = (C_56 : (C_55 : ((C_54 : stack_0.data_0) +
                                                         (C_53 : stack_0.used))).intM)));
         (C_63 : ((C_62 : stack_0.used) = (C_61 : ((C_60 : ((C_59 : stack_0.used) -
                                                             1)) :> uint32))));
         (C_64 : (__retres_0 = 1));
         
         (goto return_label)
      } else 
      {  (C_52 : (__retres_0 = 0));
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_0))
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs bts0427.jessie/bts0427.cloc bts0427.jessie/bts0427.jc
type charP

type int32

type int8

type intP

type padding

type stack_t

type uint32

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32, y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_stack_t(p:stack_t pointer, a:int,
 stack_t_alloc_table:stack_t alloc_table) =
 (offset_min(stack_t_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic stack_t_of_pointer_address: unit pointer -> stack_t pointer

axiom pointer_addr_of_stack_t_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(stack_t_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_stack_t(p:stack_t pointer, b:int,
 stack_t_alloc_table:stack_t alloc_table) =
 (offset_max(stack_t_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate stack_initialized(s_0:stack_t pointer,
 intP_data_0_10_alloc_table_at_L:intP alloc_table,
 stack_t_size_1_s_1_at_L:(stack_t, uint32) memory,
 stack_t_data_0_s_1_at_L:(stack_t, intP pointer) memory) =
 (lt_int((0), integer_of_uint32(select(stack_t_size_1_s_1_at_L, s_0)))
 and (le_int(offset_min(intP_data_0_10_alloc_table_at_L,
             select(stack_t_data_0_s_1_at_L, s_0)),
      (0))
     and (ge_int(offset_max(intP_data_0_10_alloc_table_at_L,
                 select(stack_t_data_0_s_1_at_L, s_0)),
          (0))
         and (le_int(offset_min(intP_data_0_10_alloc_table_at_L,
                     select(stack_t_data_0_s_1_at_L, s_0)),
              (0))
             and ge_int(offset_max(intP_data_0_10_alloc_table_at_L,
                        select(stack_t_data_0_s_1_at_L, s_0)),
                 integer_of_uint32(select(stack_t_size_1_s_1_at_L, s_0)))))))

predicate stack_empty(s_1:stack_t pointer,
 intP_data_0_20_alloc_table_at_L:intP alloc_table,
 stack_t_used_s_1_3_at_L:(stack_t, uint32) memory,
 stack_t_size_1_s_1_3_at_L:(stack_t, uint32) memory,
 stack_t_data_0_s_1_3_at_L:(stack_t, intP pointer) memory) =
 (stack_initialized(s_1, intP_data_0_20_alloc_table_at_L,
  stack_t_size_1_s_1_3_at_L, stack_t_data_0_s_1_3_at_L)
 and (integer_of_uint32(select(stack_t_used_s_1_3_at_L, s_1)) = (0)))

predicate stack_full(s_0_0:stack_t pointer,
 intP_data_0_16_alloc_table_at_L:intP alloc_table,
 stack_t_used_s_0_2_at_L:(stack_t, uint32) memory,
 stack_t_size_1_s_0_2_at_L:(stack_t, uint32) memory,
 stack_t_data_0_s_0_2_at_L:(stack_t, intP pointer) memory) =
 (stack_initialized(s_0_0, intP_data_0_16_alloc_table_at_L,
  stack_t_size_1_s_0_2_at_L, stack_t_data_0_s_0_2_at_L)
 and (integer_of_uint32(select(stack_t_used_s_0_2_at_L, s_0_0)) = integer_of_uint32(
                                                                  select(stack_t_size_1_s_0_2_at_L,
                                                                  s_0_0))))

logic stack_t_tag:  -> stack_t tag_id

axiom stack_t_int : (int_of_tag(stack_t_tag) = (1))

axiom stack_t_of_pointer_address_of_pointer_addr :
 (forall p:stack_t pointer.
  (p = stack_t_of_pointer_address(pointer_address(p))))

axiom stack_t_parenttag_bottom : parenttag(stack_t_tag, bottom_tag)

axiom stack_t_tags :
 (forall x:stack_t pointer.
  (forall stack_t_tag_table:stack_t tag_table.
   instanceof(stack_t_tag_table, x, stack_t_tag)))

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_stack_t(p:stack_t pointer, a:int, b:int,
 stack_t_alloc_table:stack_t alloc_table) =
 ((offset_min(stack_t_alloc_table, p) = a)
 and (offset_max(stack_t_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_stack_t(p:stack_t pointer, a:int, b:int,
 stack_t_alloc_table:stack_t alloc_table) =
 ((offset_min(stack_t_alloc_table, p) = a)
 and (offset_max(stack_t_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_extensionality :
 (forall x:uint32.
  (forall y:uint32[eq_int(integer_of_uint32(x), integer_of_uint32(y))].
   (eq_int(integer_of_uint32(x), integer_of_uint32(y)) -> (x = y))))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_stack_t(p:stack_t pointer, a:int, b:int,
 stack_t_alloc_table:stack_t alloc_table) =
 ((offset_min(stack_t_alloc_table, p) <= a)
 and (offset_max(stack_t_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_stack_t(p:stack_t pointer, a:int, b:int,
 stack_t_alloc_table:stack_t alloc_table) =
 ((offset_min(stack_t_alloc_table, p) <= a)
 and (offset_max(stack_t_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter stack_t_alloc_table : stack_t alloc_table ref

parameter stack_t_tag_table : stack_t tag_table ref

parameter alloc_struct_stack_t :
 n:int ->
  stack_t_alloc_table:stack_t alloc_table ref ->
   stack_t_tag_table:stack_t tag_table ref ->
    { } stack_t pointer writes stack_t_alloc_table,stack_t_tag_table
    { (strict_valid_struct_stack_t(result, (0), sub_int(n, (1)),
       stack_t_alloc_table)
      and (alloc_extends(stack_t_alloc_table@, stack_t_alloc_table)
          and (alloc_fresh(stack_t_alloc_table@, result, n)
              and instanceof(stack_t_tag_table, result, stack_t_tag)))) }

parameter alloc_struct_stack_t_requires :
 n:int ->
  stack_t_alloc_table:stack_t alloc_table ref ->
   stack_t_tag_table:stack_t tag_table ref ->
    { ge_int(n, (0))} stack_t pointer
    writes stack_t_alloc_table,stack_t_tag_table
    { (strict_valid_struct_stack_t(result, (0), sub_int(n, (1)),
       stack_t_alloc_table)
      and (alloc_extends(stack_t_alloc_table@, stack_t_alloc_table)
          and (alloc_fresh(stack_t_alloc_table@, result, n)
              and instanceof(stack_t_tag_table, result, stack_t_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter stack_init :
 stack:stack_t pointer ->
  data:intP pointer ->
   size_0:uint32 ->
    stack_t_used_stack_5:(stack_t, uint32) memory ref ->
     stack_t_size_1_stack_5:(stack_t, uint32) memory ref ->
      stack_t_data_0_stack_5:(stack_t, intP pointer) memory ref ->
       stack_t_stack_5_alloc_table:stack_t alloc_table ->
        intP_data_6_alloc_table:intP alloc_table ->
         { } unit
         reads stack_t_data_0_stack_5,stack_t_size_1_stack_5,stack_t_used_stack_5
         writes stack_t_data_0_stack_5,stack_t_size_1_stack_5,stack_t_used_stack_5
         { (JC_<somenum>:
           ((JC_<somenum>:
            stack_initialized(stack, intP_data_6_alloc_table,
            stack_t_size_1_stack_5, stack_t_data_0_stack_5))
           and (JC_<somenum>:
               (integer_of_uint32(select(stack_t_used_stack_5, stack)) = (0))))) }

parameter stack_init_requires :
 stack:stack_t pointer ->
  data:intP pointer ->
   size_0:uint32 ->
    stack_t_used_stack_5:(stack_t, uint32) memory ref ->
     stack_t_size_1_stack_5:(stack_t, uint32) memory ref ->
      stack_t_data_0_stack_5:(stack_t, intP pointer) memory ref ->
       stack_t_stack_5_alloc_table:stack_t alloc_table ->
        intP_data_6_alloc_table:intP alloc_table ->
         { (JC_<somenum>:
           ((JC_<somenum>:
            le_int(offset_min(stack_t_stack_5_alloc_table, stack), (0)))
           and ((JC_<somenum>:
                ge_int(offset_max(stack_t_stack_5_alloc_table, stack), (0)))
               and ((JC_<somenum>:
                    le_int(offset_min(intP_data_6_alloc_table, data), (0)))
                   and ((JC_<somenum>:
                        ge_int(offset_max(intP_data_6_alloc_table, data),
                        (0)))
                       and ((JC_<somenum>:
                            le_int(offset_min(intP_data_6_alloc_table, data),
                            (0)))
                           and ((JC_<somenum>:
                                ge_int(offset_max(intP_data_6_alloc_table,
                                       data),
                                integer_of_uint32(size_0)))
                               and (JC_<somenum>:
                                   lt_int((0), integer_of_uint32(size_0))))))))))}
         unit
         reads stack_t_data_0_stack_5,stack_t_size_1_stack_5,stack_t_used_stack_5
         writes stack_t_data_0_stack_5,stack_t_size_1_stack_5,stack_t_used_stack_5
         { (JC_<somenum>:
           ((JC_<somenum>:
            stack_initialized(stack, intP_data_6_alloc_table,
            stack_t_size_1_stack_5, stack_t_data_0_stack_5))
           and (JC_<somenum>:
               (integer_of_uint32(select(stack_t_used_stack_5, stack)) = (0))))) }

parameter stack_pop :
 stack_0:stack_t pointer ->
  item:intP pointer ->
   stack_t_used_stack_0_8:(stack_t, uint32) memory ref ->
    intP_intM_item_9:(intP, int32) memory ref ->
     stack_t_stack_0_8_alloc_table:stack_t alloc_table ->
      intP_data_0_15_alloc_table:intP alloc_table ->
       intP_item_9_alloc_table:intP alloc_table ->
        stack_t_size_1_stack_0_8:(stack_t, uint32) memory ->
         stack_t_data_0_stack_0_8:(stack_t, intP pointer) memory ->
          intP_intM_data_0_15:(intP, int32) memory ->
           { } int32 reads stack_t_used_stack_0_8
           writes intP_intM_item_9,stack_t_used_stack_0_8 { true }

parameter stack_pop_requires :
 stack_0:stack_t pointer ->
  item:intP pointer ->
   stack_t_used_stack_0_8:(stack_t, uint32) memory ref ->
    intP_intM_item_9:(intP, int32) memory ref ->
     stack_t_stack_0_8_alloc_table:stack_t alloc_table ->
      intP_data_0_15_alloc_table:intP alloc_table ->
       intP_item_9_alloc_table:intP alloc_table ->
        stack_t_size_1_stack_0_8:(stack_t, uint32) memory ->
         stack_t_data_0_stack_0_8:(stack_t, intP pointer) memory ->
          intP_intM_data_0_15:(intP, int32) memory ->
           { (JC_<somenum>:
             ((JC_<somenum>:
              le_int(offset_min(stack_t_stack_0_8_alloc_table, stack_0), (0)))
             and ((JC_<somenum>:
                  ge_int(offset_max(stack_t_stack_0_8_alloc_table, stack_0),
                  (0)))
                 and ((JC_<somenum>:
                      stack_initialized(stack_0, intP_data_0_15_alloc_table,
                      stack_t_size_1_stack_0_8, stack_t_data_0_stack_0_8))
                     and ((JC_<somenum>:
                          le_int(offset_min(intP_item_9_alloc_table, item),
                          (0)))
                         and (JC_<somenum>:
                             ge_int(offset_max(intP_item_9_alloc_table, item),
                             (0))))))))}
           int32 reads stack_t_used_stack_0_8
           writes intP_intM_item_9,stack_t_used_stack_0_8 { true }

parameter stack_push :
 stack_1:stack_t pointer ->
  item_0:int32 ->
   stack_t_used_stack_1_7:(stack_t, uint32) memory ref ->
    intP_intM_data_0_14:(intP, int32) memory ref ->
     stack_t_stack_1_7_alloc_table:stack_t alloc_table ->
      intP_data_0_14_alloc_table:intP alloc_table ->
       stack_t_size_1_stack_1_7:(stack_t, uint32) memory ->
        stack_t_data_0_stack_1_7:(stack_t, intP pointer) memory ->
         { } int32 reads stack_t_used_stack_1_7
         writes intP_intM_data_0_14,stack_t_used_stack_1_7
         { (JC_<somenum>:
           ((not stack_full(stack_1, intP_data_0_14_alloc_table,
                 stack_t_used_stack_1_7, stack_t_size_1_stack_1_7,
                 stack_t_data_0_stack_1_7)) ->
            lt_int(integer_of_uint32(select(stack_t_used_stack_1_7@, stack_1)),
            integer_of_uint32(select(stack_t_used_stack_1_7, stack_1))))) }

parameter stack_push_requires :
 stack_1:stack_t pointer ->
  item_0:int32 ->
   stack_t_used_stack_1_7:(stack_t, uint32) memory ref ->
    intP_intM_data_0_14:(intP, int32) memory ref ->
     stack_t_stack_1_7_alloc_table:stack_t alloc_table ->
      intP_data_0_14_alloc_table:intP alloc_table ->
       stack_t_size_1_stack_1_7:(stack_t, uint32) memory ->
        stack_t_data_0_stack_1_7:(stack_t, intP pointer) memory ->
         { (JC_<somenum>:
           ((JC_<somenum>:
            le_int(offset_min(stack_t_stack_1_7_alloc_table, stack_1), (0)))
           and ((JC_<somenum>:
                ge_int(offset_max(stack_t_stack_1_7_alloc_table, stack_1),
                (0)))
               and (JC_<somenum>:
                   stack_initialized(stack_1, intP_data_0_14_alloc_table,
                   stack_t_size_1_stack_1_7, stack_t_data_0_stack_1_7)))))}
         int32 reads stack_t_used_stack_1_7
         writes intP_intM_data_0_14,stack_t_used_stack_1_7
         { (JC_<somenum>:
           ((not stack_full(stack_1, intP_data_0_14_alloc_table,
                 stack_t_used_stack_1_7, stack_t_size_1_stack_1_7,
                 stack_t_data_0_stack_1_7)) ->
            lt_int(integer_of_uint32(select(stack_t_used_stack_1_7@, stack_1)),
            integer_of_uint32(select(stack_t_used_stack_1_7, stack_1))))) }

parameter stack_valid :
 stack_2:stack_t pointer ->
  stack_t_stack_2_4_alloc_table:stack_t alloc_table ->
   intP_null_11_alloc_table:intP alloc_table ->
    stack_t_size_1_stack_2_4:(stack_t, uint32) memory ->
     stack_t_data_0_stack_2_4:(stack_t, intP pointer) memory ->
      { } int32
      { (JC_<somenum>:
        ((JC_<somenum>: le_int((0), integer_of_int32(result)))
        and ((JC_<somenum>: le_int(integer_of_int32(result), (1)))
            and (JC_<somenum>:
                (stack_initialized(stack_2, intP_null_11_alloc_table,
                 stack_t_size_1_stack_2_4, stack_t_data_0_stack_2_4) ->
                 (integer_of_int32(result) = (1))))))) }

parameter stack_valid_requires :
 stack_2:stack_t pointer ->
  stack_t_stack_2_4_alloc_table:stack_t alloc_table ->
   intP_null_11_alloc_table:intP alloc_table ->
    stack_t_size_1_stack_2_4:(stack_t, uint32) memory ->
     stack_t_data_0_stack_2_4:(stack_t, intP pointer) memory ->
      { (JC_<somenum>:
        ((JC_<somenum>:
         le_int(offset_min(stack_t_stack_2_4_alloc_table, stack_2), (0)))
        and (JC_<somenum>:
            ge_int(offset_max(stack_t_stack_2_4_alloc_table, stack_2), (0)))))}
      int32
      { (JC_<somenum>:
        ((JC_<somenum>: le_int((0), integer_of_int32(result)))
        and ((JC_<somenum>: le_int(integer_of_int32(result), (1)))
            and (JC_<somenum>:
                (stack_initialized(stack_2, intP_null_11_alloc_table,
                 stack_t_size_1_stack_2_4, stack_t_data_0_stack_2_4) ->
                 (integer_of_int32(result) = (1))))))) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

let stack_init_ensures_default =
 fun (stack : stack_t pointer) (data : intP pointer) (size_0 : uint32) (stack_t_data_0_stack_5 : (stack_t, intP pointer) memory ref) (stack_t_size_1_stack_5 : (stack_t, uint32) memory ref) (stack_t_used_stack_5 : (stack_t, uint32) memory ref) (intP_data_6_alloc_table : intP alloc_table) (stack_t_stack_5_alloc_table : stack_t alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(stack_t_stack_5_alloc_table, stack), (0)))
    and ((JC_<somenum>: ge_int(offset_max(stack_t_stack_5_alloc_table, stack), (0)))
        and ((JC_<somenum>: le_int(offset_min(intP_data_6_alloc_table, data), (0)))
            and ((JC_<somenum>:
                 ge_int(offset_max(intP_data_6_alloc_table, data), (0)))
                and ((JC_<somenum>:
                     le_int(offset_min(intP_data_6_alloc_table, data), (0)))
                    and ((JC_<somenum>:
                         ge_int(offset_max(intP_data_6_alloc_table, data),
                         integer_of_uint32(size_0)))
                        and (JC_<somenum>: lt_int((0), integer_of_uint32(size_0)))))))))) }
  (init:
  try
   (C_15:
   (C_17:
   (C_19:
   begin
     (let jessie_<somenum> = data in
     (let jessie_<somenum> = stack in
     (((safe_upd_ stack_t_data_0_stack_5) jessie_<somenum>) jessie_<somenum>)));
    (let jessie_<somenum> = size_0 in
    (let jessie_<somenum> = stack in
    (((safe_upd_ stack_t_size_1_stack_5) jessie_<somenum>) jessie_<somenum>)));
    (let jessie_<somenum> = (safe_uint32_of_integer_ (0)) in
    (let jessie_<somenum> = stack in
    (((safe_upd_ stack_t_used_stack_5) jessie_<somenum>) jessie_<somenum>)));
    (raise Return); (raise Return) end))) with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>:
     stack_initialized(stack, intP_data_6_alloc_table,
     stack_t_size_1_stack_5, stack_t_data_0_stack_5))
    and (JC_<somenum>:
        (integer_of_uint32(select(stack_t_used_stack_5, stack)) = (0))))) }

let stack_init_safety =
 fun (stack : stack_t pointer) (data : intP pointer) (size_0 : uint32) (stack_t_data_0_stack_5 : (stack_t, intP pointer) memory ref) (stack_t_size_1_stack_5 : (stack_t, uint32) memory ref) (stack_t_used_stack_5 : (stack_t, uint32) memory ref) (intP_data_6_alloc_table : intP alloc_table) (stack_t_stack_5_alloc_table : stack_t alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(stack_t_stack_5_alloc_table, stack), (0)))
    and ((JC_<somenum>: ge_int(offset_max(stack_t_stack_5_alloc_table, stack), (0)))
        and ((JC_<somenum>: le_int(offset_min(intP_data_6_alloc_table, data), (0)))
            and ((JC_<somenum>:
                 ge_int(offset_max(intP_data_6_alloc_table, data), (0)))
                and ((JC_<somenum>:
                     le_int(offset_min(intP_data_6_alloc_table, data), (0)))
                    and ((JC_<somenum>:
                         ge_int(offset_max(intP_data_6_alloc_table, data),
                         integer_of_uint32(size_0)))
                        and (JC_<somenum>: lt_int((0), integer_of_uint32(size_0)))))))))) }
  (init:
  try
   (C_15:
   (C_17:
   (C_19:
   begin
     (let jessie_<somenum> = data in
     (let jessie_<somenum> = stack in
     (JC_<somenum>:
     ((((upd_ stack_t_stack_5_alloc_table) stack_t_data_0_stack_5) jessie_<somenum>) jessie_<somenum>))));
    (let jessie_<somenum> = size_0 in
    (let jessie_<somenum> = stack in
    (JC_<somenum>:
    ((((upd_ stack_t_stack_5_alloc_table) stack_t_size_1_stack_5) jessie_<somenum>) jessie_<somenum>))));
    (let jessie_<somenum> = (safe_uint32_of_integer_ (0)) in
    (let jessie_<somenum> = stack in
    (JC_<somenum>:
    ((((upd_ stack_t_stack_5_alloc_table) stack_t_used_stack_5) jessie_<somenum>) jessie_<somenum>))));
    (raise Return); (raise Return) end))) with Return -> void end) { true }

let stack_pop_ensures_default =
 fun (stack_0 : stack_t pointer) (item : intP pointer) (intP_intM_item_9 : (intP, int32) memory ref) (stack_t_used_stack_0_8 : (stack_t, uint32) memory ref) (intP_item_9_alloc_table : intP alloc_table) (intP_data_0_15_alloc_table : intP alloc_table) (stack_t_stack_0_8_alloc_table : stack_t alloc_table) (intP_intM_data_0_15 : (intP, int32) memory) (stack_t_data_0_stack_0_8 : (stack_t, intP pointer) memory) (stack_t_size_1_stack_0_8 : (stack_t, uint32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(stack_t_stack_0_8_alloc_table, stack_0), (0)))
    and ((JC_<somenum>:
         ge_int(offset_max(stack_t_stack_0_8_alloc_table, stack_0), (0)))
        and ((JC_<somenum>:
             stack_initialized(stack_0, intP_data_0_15_alloc_table,
             stack_t_size_1_stack_0_8, stack_t_data_0_stack_0_8))
            and ((JC_<somenum>:
                 le_int(offset_min(intP_item_9_alloc_table, item), (0)))
                and (JC_<somenum>:
                    ge_int(offset_max(intP_item_9_alloc_table, item), (0)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_0 = ref (any_int32 void) in
     try
      begin
        (if ((gt_int_ (integer_of_uint32 (C_65:
                                         ((safe_acc_ !stack_t_used_stack_0_8) stack_0)))) (0))
        then
         (C_58:
         (C_63:
         (C_64:
         begin
           (let jessie_<somenum> =
           (C_56:
           ((safe_acc_ intP_intM_data_0_15) (C_55:
                                            ((shift (C_54:
                                                    ((safe_acc_ stack_t_data_0_stack_0_8) stack_0))) 
                                             (integer_of_uint32 (C_53:
                                                                ((safe_acc_ !stack_t_used_stack_0_8) stack_0))))))) in
           (let jessie_<somenum> = item in
           (((safe_upd_ intP_intM_item_9) jessie_<somenum>) jessie_<somenum>)));
          (let jessie_<somenum> =
          (C_61:
          (safe_uint32_of_integer_ (C_60:
                                   ((sub_int (integer_of_uint32 (C_59:
                                                                ((safe_acc_ !stack_t_used_stack_0_8) stack_0)))) (1))))) in
          (let jessie_<somenum> = stack_0 in
          (((safe_upd_ stack_t_used_stack_0_8) jessie_<somenum>) jessie_<somenum>)));
          (let jessie_<somenum> = (__retres_0 := (safe_int32_of_integer_ (1))) in
          void); (raise (Return_label_exc void)) end)))
        else
         (C_52:
         begin
           (let jessie_<somenum> = (__retres_0 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_0); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let stack_pop_safety =
 fun (stack_0 : stack_t pointer) (item : intP pointer) (intP_intM_item_9 : (intP, int32) memory ref) (stack_t_used_stack_0_8 : (stack_t, uint32) memory ref) (intP_item_9_alloc_table : intP alloc_table) (intP_data_0_15_alloc_table : intP alloc_table) (stack_t_stack_0_8_alloc_table : stack_t alloc_table) (intP_intM_data_0_15 : (intP, int32) memory) (stack_t_data_0_stack_0_8 : (stack_t, intP pointer) memory) (stack_t_size_1_stack_0_8 : (stack_t, uint32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(stack_t_stack_0_8_alloc_table, stack_0), (0)))
    and ((JC_<somenum>:
         ge_int(offset_max(stack_t_stack_0_8_alloc_table, stack_0), (0)))
        and ((JC_<somenum>:
             stack_initialized(stack_0, intP_data_0_15_alloc_table,
             stack_t_size_1_stack_0_8, stack_t_data_0_stack_0_8))
            and ((JC_<somenum>:
                 le_int(offset_min(intP_item_9_alloc_table, item), (0)))
                and (JC_<somenum>:
                    ge_int(offset_max(intP_item_9_alloc_table, item), (0)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_0 = ref (any_int32 void) in
     try
      begin
        (if ((gt_int_ (integer_of_uint32 (C_65:
                                         (JC_<somenum>:
                                         (((acc_ stack_t_stack_0_8_alloc_table) !stack_t_used_stack_0_8) stack_0))))) (0))
        then
         (C_58:
         (C_63:
         (C_64:
         begin
           (let jessie_<somenum> =
           (C_56:
           (JC_<somenum>:
           ((((offset_acc_ intP_data_0_15_alloc_table) intP_intM_data_0_15) 
             (C_54:
             (JC_<somenum>:
             (((acc_ stack_t_stack_0_8_alloc_table) stack_t_data_0_stack_0_8) stack_0)))) 
            (integer_of_uint32 (C_53:
                               (JC_<somenum>:
                               (((acc_ stack_t_stack_0_8_alloc_table) !stack_t_used_stack_0_8) stack_0))))))) in
           (let jessie_<somenum> = item in
           (JC_<somenum>:
           ((((upd_ intP_item_9_alloc_table) intP_intM_item_9) jessie_<somenum>) jessie_<somenum>))));
          (let jessie_<somenum> =
          (C_61:
          (JC_<somenum>:
          (uint32_of_integer_ (C_60:
                              ((sub_int (integer_of_uint32 (C_59:
                                                           (JC_<somenum>:
                                                           (((acc_ stack_t_stack_0_8_alloc_table) !stack_t_used_stack_0_8) stack_0))))) (1)))))) in
          (let jessie_<somenum> = stack_0 in
          (JC_<somenum>:
          ((((upd_ stack_t_stack_0_8_alloc_table) stack_t_used_stack_0_8) jessie_<somenum>) jessie_<somenum>))));
          (let jessie_<somenum> = (__retres_0 := (safe_int32_of_integer_ (1))) in
          void); (raise (Return_label_exc void)) end)))
        else
         (C_52:
         begin
           (let jessie_<somenum> = (__retres_0 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_0); (raise Return) end) end);
    absurd  end with Return -> !return end)) { true }

let stack_push_ensures_default =
 fun (stack_1 : stack_t pointer) (item_0 : int32) (intP_intM_data_0_14 : (intP, int32) memory ref) (stack_t_used_stack_1_7 : (stack_t, uint32) memory ref) (intP_data_0_14_alloc_table : intP alloc_table) (stack_t_stack_1_7_alloc_table : stack_t alloc_table) (stack_t_data_0_stack_1_7 : (stack_t, intP pointer) memory) (stack_t_size_1_stack_1_7 : (stack_t, uint32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(stack_t_stack_1_7_alloc_table, stack_1), (0)))
    and ((JC_<somenum>:
         ge_int(offset_max(stack_t_stack_1_7_alloc_table, stack_1), (0)))
        and (JC_<somenum>:
            stack_initialized(stack_1, intP_data_0_14_alloc_table,
            stack_t_size_1_stack_1_7, stack_t_data_0_stack_1_7))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      begin
        (if ((lt_int_ (integer_of_uint32 (C_46:
                                         ((safe_acc_ !stack_t_used_stack_1_7) stack_1)))) 
             (integer_of_uint32 (C_45:
                                ((safe_acc_ stack_t_size_1_stack_1_7) stack_1))))
        then
         (C_38:
         (C_43:
         (C_44:
         begin
           (let jessie_<somenum> =
           (C_36:
           (safe_uint32_of_integer_ (C_35:
                                    ((add_int (integer_of_uint32 (C_34:
                                                                 ((safe_acc_ !stack_t_used_stack_1_7) stack_1)))) (1))))) in
           (let jessie_<somenum> = stack_1 in
           (((safe_upd_ stack_t_used_stack_1_7) jessie_<somenum>) jessie_<somenum>)));
          (let jessie_<somenum> =
          (let jessie_<somenum> = item_0 in
          (let jessie_<somenum> =
          (C_40: ((safe_acc_ stack_t_data_0_stack_1_7) stack_1)) in
          (let jessie_<somenum> =
          (integer_of_uint32 (C_39:
                             ((safe_acc_ !stack_t_used_stack_1_7) stack_1))) in
          (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
          (((safe_upd_ intP_intM_data_0_14) jessie_<somenum>) jessie_<somenum>))))) in
          void);
          (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (1))) in
          void); (raise (Return_label_exc void)) end)))
        else
         (C_33:
         begin
           (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((not stack_full(stack_1, intP_data_0_14_alloc_table,
          stack_t_used_stack_1_7, stack_t_size_1_stack_1_7,
          stack_t_data_0_stack_1_7)) ->
     lt_int(integer_of_uint32(select(stack_t_used_stack_1_7@, stack_1)),
     integer_of_uint32(select(stack_t_used_stack_1_7, stack_1))))) }

let stack_push_safety =
 fun (stack_1 : stack_t pointer) (item_0 : int32) (intP_intM_data_0_14 : (intP, int32) memory ref) (stack_t_used_stack_1_7 : (stack_t, uint32) memory ref) (intP_data_0_14_alloc_table : intP alloc_table) (stack_t_stack_1_7_alloc_table : stack_t alloc_table) (stack_t_data_0_stack_1_7 : (stack_t, intP pointer) memory) (stack_t_size_1_stack_1_7 : (stack_t, uint32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(stack_t_stack_1_7_alloc_table, stack_1), (0)))
    and ((JC_<somenum>:
         ge_int(offset_max(stack_t_stack_1_7_alloc_table, stack_1), (0)))
        and (JC_<somenum>:
            stack_initialized(stack_1, intP_data_0_14_alloc_table,
            stack_t_size_1_stack_1_7, stack_t_data_0_stack_1_7))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      begin
        (if ((lt_int_ (integer_of_uint32 (C_46:
                                         (JC_<somenum>:
                                         (((acc_ stack_t_stack_1_7_alloc_table) !stack_t_used_stack_1_7) stack_1))))) 
             (integer_of_uint32 (C_45:
                                (JC_<somenum>:
                                (((acc_ stack_t_stack_1_7_alloc_table) stack_t_size_1_stack_1_7) stack_1)))))
        then
         (C_38:
         (C_43:
         (C_44:
         begin
           (let jessie_<somenum> =
           (C_36:
           (JC_<somenum>:
           (uint32_of_integer_ (C_35:
                               ((add_int (integer_of_uint32 (C_34:
                                                            (JC_<somenum>:
                                                            (((acc_ stack_t_stack_1_7_alloc_table) !stack_t_used_stack_1_7) stack_1))))) (1)))))) in
           (let jessie_<somenum> = stack_1 in
           (JC_<somenum>:
           ((((upd_ stack_t_stack_1_7_alloc_table) stack_t_used_stack_1_7) jessie_<somenum>) jessie_<somenum>))));
          (let jessie_<somenum> =
          (let jessie_<somenum> = item_0 in
          (let jessie_<somenum> =
          (C_40:
          (JC_<somenum>:
          (((acc_ stack_t_stack_1_7_alloc_table) stack_t_data_0_stack_1_7) stack_1))) in
          (let jessie_<somenum> =
          (integer_of_uint32 (C_39:
                             (JC_<somenum>:
                             (((acc_ stack_t_stack_1_7_alloc_table) !stack_t_used_stack_1_7) stack_1)))) in
          (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
          (JC_<somenum>:
          (((((offset_upd_ intP_data_0_14_alloc_table) intP_intM_data_0_14) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
          void);
          (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (1))) in
          void); (raise (Return_label_exc void)) end)))
        else
         (C_33:
         begin
           (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end)) { true }

let stack_valid_ensures_default =
 fun (stack_2 : stack_t pointer) (intP_null_11_alloc_table : intP alloc_table) (stack_t_stack_2_4_alloc_table : stack_t alloc_table) (stack_t_data_0_stack_2_4 : (stack_t, intP pointer) memory) (stack_t_size_1_stack_2_4 : (stack_t, uint32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(stack_t_stack_2_4_alloc_table, stack_2), (0)))
    and (JC_<somenum>:
        ge_int(offset_max(stack_t_stack_2_4_alloc_table, stack_2), (0))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (if ((safe_neq_pointer (C_5:
                              ((safe_acc_ stack_t_data_0_stack_2_4) stack_2))) null)
       then
        (if ((neq_int_ (integer_of_uint32 (C_4:
                                          ((safe_acc_ stack_t_size_1_stack_2_4) stack_2)))) (0))
        then (C_3: begin   (tmp := (safe_int32_of_integer_ (1))); !tmp end)
        else (C_2: begin   (tmp := (safe_int32_of_integer_ (0))); !tmp end))
       else (C_1: begin   (tmp := (safe_int32_of_integer_ (0))); !tmp end)) in
       void); (return := !tmp); (raise Return) end); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: le_int((0), integer_of_int32(result)))
    and ((JC_<somenum>: le_int(integer_of_int32(result), (1)))
        and (JC_<somenum>:
            (stack_initialized(stack_2, intP_null_11_alloc_table,
             stack_t_size_1_stack_2_4, stack_t_data_0_stack_2_4) ->
             (integer_of_int32(result) = (1))))))) }

let stack_valid_safety =
 fun (stack_2 : stack_t pointer) (intP_null_11_alloc_table : intP alloc_table) (stack_t_stack_2_4_alloc_table : stack_t alloc_table) (stack_t_data_0_stack_2_4 : (stack_t, intP pointer) memory) (stack_t_size_1_stack_2_4 : (stack_t, uint32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(stack_t_stack_2_4_alloc_table, stack_2), (0)))
    and (JC_<somenum>:
        ge_int(offset_max(stack_t_stack_2_4_alloc_table, stack_2), (0))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (if ((neq_pointer (C_5:
                         (JC_<somenum>:
                         (((acc_ stack_t_stack_2_4_alloc_table) stack_t_data_0_stack_2_4) stack_2)))) null)
       then
        (if ((neq_int_ (integer_of_uint32 (C_4:
                                          (JC_<somenum>:
                                          (((acc_ stack_t_stack_2_4_alloc_table) stack_t_size_1_stack_2_4) stack_2))))) (0))
        then (C_3: begin   (tmp := (safe_int32_of_integer_ (1))); !tmp end)
        else (C_2: begin   (tmp := (safe_int32_of_integer_ (0))); !tmp end))
       else (C_1: begin   (tmp := (safe_int32_of_integer_ (0))); !tmp end)) in
       void); (return := !tmp); (raise Return) end); absurd  end with
   Return -> !return end)) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C bts0427.jessie --quiet -f bts0427.makefile project
why --project [...] why/bts0427.why
<project name="bts0427" context="why/bts0427_ctx.why">
  <function name="Function stack_valid">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/bts0427_po42.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "26" begin = "12" end = "24"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/bts0427_po43.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "26" begin = "17" end = "29"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/bts0427_po44.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "27" begin = "12" end = "54"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/bts0427_po45.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "33" begin = "11" end = "22"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po46.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "33" begin = "11" end = "22"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po47.why">
      <location file = "why/bts0427.why" line = "981" begin = "12" end = "170"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/bts0427_po48.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "33" begin = "42" end = "53"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po49.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "33" begin = "42" end = "53"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
  <function name="Function stack_push">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/bts0427_po25.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "54" begin = "12" end = "74"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/bts0427_po26.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "60" begin = "6" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po27.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "60" begin = "6" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po28.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "60" begin = "20" end = "31"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po29.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "60" begin = "20" end = "31"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po30.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "61" begin = "4" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po31.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "61" begin = "4" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po32.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "61" begin = "4" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0427_po33.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "61" begin = "4" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0427_po34.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "105" begin = "18" end = "160"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po35.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "105" begin = "18" end = "160"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po36.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "62" begin = "4" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po37.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "62" begin = "4" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po38.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "62" begin = "17" end = "28"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po39.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "62" begin = "17" end = "28"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po40.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "107" begin = "18" end = "135"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po41.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "107" begin = "18" end = "135"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
  <function name="Function stack_pop">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/bts0427_po9.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "75" begin = "6" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po10.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "75" begin = "6" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po11.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "76" begin = "12" end = "23"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po12.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "76" begin = "12" end = "23"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po13.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "76" begin = "25" end = "36"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po14.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "76" begin = "25" end = "36"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po15.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "76" begin = "12" end = "37"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po16.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "76" begin = "12" end = "37"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po17.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "134" begin = "18" end = "168"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po18.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "134" begin = "18" end = "168"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po19.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "77" begin = "4" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po20.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "77" begin = "4" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po21.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "77" begin = "4" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0427_po22.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "77" begin = "4" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/bts0427_po23.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "136" begin = "18" end = "160"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po24.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "136" begin = "18" end = "160"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
  <function name="Function stack_init">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/bts0427_po1.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "40" begin = "12" end = "37"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/bts0427_po2.why">
      <location file = "PPCHOME/tests/jessie/bts0427.c" line = "41" begin = "12" end = "28"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/bts0427_po3.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "86" begin = "15" end = "43"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po4.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "86" begin = "15" end = "43"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po5.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "87" begin = "15" end = "45"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po6.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "87" begin = "15" end = "45"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po7.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "88" begin = "15" end = "38"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/bts0427_po8.why">
      <location file = "PPCHOME/tests/jessie/bts0427.jessie/bts0427.jc" line = "88" begin = "15" end = "38"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type charP

type int32

type int8

type intP

type padding

type stack_t

type uint32

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint32 : uint32 -> int

predicate eq_uint32(x: uint32, y: uint32) =
  (integer_of_uint32(x) = integer_of_uint32(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32 [(integer_of_int32(x) = integer_of_int32(y))].
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8 [(integer_of_int8(x) = integer_of_int8(y))].
      ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_stack_t(p: stack_t pointer, a: int,
  stack_t_alloc_table: stack_t alloc_table) =
  (offset_min(stack_t_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic stack_t_of_pointer_address : unit pointer -> stack_t pointer

axiom pointer_addr_of_stack_t_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(stack_t_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_stack_t(p: stack_t pointer, b: int,
  stack_t_alloc_table: stack_t alloc_table) =
  (offset_max(stack_t_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate stack_initialized(s_0: stack_t pointer,
  intP_data_0_10_alloc_table_at_L: intP alloc_table,
  stack_t_size_1_s_1_at_L: (stack_t, uint32) memory,
  stack_t_data_0_s_1_at_L: (stack_t, intP pointer) memory) =
  ((0 < integer_of_uint32(select(stack_t_size_1_s_1_at_L, s_0))) and
   ((offset_min(intP_data_0_10_alloc_table_at_L,
    select(stack_t_data_0_s_1_at_L, s_0)) <= 0) and
    ((offset_max(intP_data_0_10_alloc_table_at_L,
     select(stack_t_data_0_s_1_at_L, s_0)) >= 0) and
     ((offset_min(intP_data_0_10_alloc_table_at_L,
      select(stack_t_data_0_s_1_at_L, s_0)) <= 0) and
      (offset_max(intP_data_0_10_alloc_table_at_L,
      select(stack_t_data_0_s_1_at_L,
      s_0)) >= integer_of_uint32(select(stack_t_size_1_s_1_at_L, s_0)))))))

predicate stack_empty(s_1: stack_t pointer,
  intP_data_0_20_alloc_table_at_L: intP alloc_table,
  stack_t_used_s_1_3_at_L: (stack_t, uint32) memory,
  stack_t_size_1_s_1_3_at_L: (stack_t, uint32) memory,
  stack_t_data_0_s_1_3_at_L: (stack_t, intP pointer) memory) =
  (stack_initialized(s_1, intP_data_0_20_alloc_table_at_L,
   stack_t_size_1_s_1_3_at_L, stack_t_data_0_s_1_3_at_L) and
   (integer_of_uint32(select(stack_t_used_s_1_3_at_L, s_1)) = 0))

predicate stack_full(s_0_0: stack_t pointer,
  intP_data_0_16_alloc_table_at_L: intP alloc_table,
  stack_t_used_s_0_2_at_L: (stack_t, uint32) memory,
  stack_t_size_1_s_0_2_at_L: (stack_t, uint32) memory,
  stack_t_data_0_s_0_2_at_L: (stack_t, intP pointer) memory) =
  (stack_initialized(s_0_0, intP_data_0_16_alloc_table_at_L,
   stack_t_size_1_s_0_2_at_L, stack_t_data_0_s_0_2_at_L) and
   (integer_of_uint32(select(stack_t_used_s_0_2_at_L,
   s_0_0)) = integer_of_uint32(select(stack_t_size_1_s_0_2_at_L, s_0_0))))

logic stack_t_tag : stack_t tag_id

axiom stack_t_int: (int_of_tag(stack_t_tag) = 1)

axiom stack_t_of_pointer_address_of_pointer_addr:
  (forall p:stack_t pointer.
    (p = stack_t_of_pointer_address(pointer_address(p))))

axiom stack_t_parenttag_bottom: parenttag(stack_t_tag, bottom_tag)

axiom stack_t_tags:
  (forall x:stack_t pointer.
    (forall stack_t_tag_table:stack_t tag_table.
      instanceof(stack_t_tag_table, x, stack_t_tag)))

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_stack_t(p: stack_t pointer, a: int, b: int,
  stack_t_alloc_table: stack_t alloc_table) =
  ((offset_min(stack_t_alloc_table, p) = a) and
   (offset_max(stack_t_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_stack_t(p: stack_t pointer, a: int, b: int,
  stack_t_alloc_table: stack_t alloc_table) =
  ((offset_min(stack_t_alloc_table, p) = a) and
   (offset_max(stack_t_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint32_of_integer : int -> uint32

axiom uint32_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 4294967295)) ->
     (integer_of_uint32(uint32_of_integer(x)) = x)))

axiom uint32_extensionality:
  (forall x:uint32.
    (forall y:uint32 [(integer_of_uint32(x) = integer_of_uint32(y))].
      ((integer_of_uint32(x) = integer_of_uint32(y)) -> (x = y))))

axiom uint32_range:
  (forall x:uint32.
    ((0 <= integer_of_uint32(x)) and (integer_of_uint32(x) <= 4294967295)))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_stack_t(p: stack_t pointer, a: int, b: int,
  stack_t_alloc_table: stack_t alloc_table) =
  ((offset_min(stack_t_alloc_table, p) <= a) and
   (offset_max(stack_t_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_stack_t(p: stack_t pointer, a: int, b: int,
  stack_t_alloc_table: stack_t alloc_table) =
  ((offset_min(stack_t_alloc_table, p) <= a) and
   (offset_max(stack_t_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

