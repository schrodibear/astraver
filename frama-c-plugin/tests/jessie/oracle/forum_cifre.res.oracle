Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only forum_cifre.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD forum_cifre.c"
[kernel] warning: ignoring status of type invariant `paquet_bien_forme'
[jessie] Starting Jessie translation
[kernel] warning: ignoring status of type invariant `paquet_bien_forme'
[jessie] Producing Jessie files in subdir forum_cifre.jessie
[jessie] File forum_cifre.jessie/forum_cifre.jc written.
[jessie] File forum_cifre.jessie/forum_cifre.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol
# TerminationPolicy = user

axiomatic Padding {

  logic type padding
  
}

type uint16 = 0..65535

type uint32 = 0..4294967295

type int8 = -128..127

type int32 = -2147483648..2147483647

tag unsigned_shortP = {
  uint16 unsigned_shortM: 16;
}

type unsigned_shortP = [unsigned_shortP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

tag __anonstruct_paquet_t_1 = {
  uint32 longueur: 32; 
  charP[..] message: 32;
}

type __anonstruct_paquet_t_1 = [__anonstruct_paquet_t_1]

axiomatic MemCmp {

  logic integer memcmp{L}(charP[..] s1, charP[..] s2, integer n)
  reads (s1 + [0..(n - 1)]).charM, (s2 + [0..(n - 1)]).charM;
   
  axiom memcmp_range{L} :
  (\forall charP[..] s1_0;
    (\forall charP[..] s2_0;
      (\forall integer n_0;
        ((((- 2147483647) - 1) <= memcmp{L}(s1_0, s2_0, n_0)) &&
          (memcmp{L}(s1_0, s2_0, n_0) <= 2147483647)))))
   
  axiom memcmp_zero{L} :
  (\forall charP[..] s1_1;
    (\forall charP[..] s2_1;
      (\forall integer n_1;
        ((memcmp{L}(s1_1, s2_1, n_1) == 0) <==>
          (\forall integer i;
            (((0 <= i) && (i < n_1)) ==>
              ((s1_1 + i).charM == (s2_1 + i).charM)))))))
  
}

axiomatic MemChr {

  logic boolean memchr{L}(charP[..] s, integer c, integer n_2)
  reads (s + [0..(n_2 - 1)]).charM;
   
  axiom memchr_def{L} :
  (\forall charP[..] s_0;
    (\forall integer c_0;
      (\forall integer n_3;
        ((memchr{L}(s_0, c_0, n_3) == true) <==>
          (\exists int32 i_0;
            (((0 <= i_0) && (i_0 < n_3)) && ((s_0 + i_0).charM == c_0)))))))
  
}

axiomatic MemSet {

  logic boolean memset{L}(charP[..] s_1, integer c_1, integer n_4)
  reads (s_1 + [0..(n_4 - 1)]).charM;
   
  axiom memset_def{L} :
  (\forall charP[..] s_2;
    (\forall integer c_2;
      (\forall integer n_5;
        ((memset{L}(s_2, c_2, n_5) == true) <==>
          (\forall integer i_1;
            (((0 <= i_1) && (i_1 < n_5)) ==> ((s_2 + i_1).charM == c_2)))))))
  
}

axiomatic StrLen {

  logic integer strlen{L}(charP[..] s_3) reads (s_3 + [0..]).charM;
   
  axiom strlen_pos_or_null{L} :
  (\forall charP[..] s_4;
    (\forall integer i_2;
      (((((0 <= i_2) && (i_2 <= 2147483647)) &&
          (\forall integer j;
            (((0 <= j) && (j < i_2)) ==> ((s_4 + j).charM != 0)))) &&
         ((s_4 + i_2).charM == 0)) ==>
        (strlen{L}(s_4) == i_2))))
   
  axiom strlen_neg{L} :
  (\forall charP[..] s_5;
    ((\forall integer i_3;
       (((0 <= i_3) && (i_3 <= 2147483647)) ==> ((s_5 + i_3).charM != 0))) ==>
      (strlen{L}(s_5) < 0)))
   
  axiom strlen_range{L} :
  (\forall charP[..] s_6;
    (strlen{L}(s_6) <= 2147483647))
   
  axiom strlen_before_null{L} :
  (\forall charP[..] s_7;
    (\forall integer i_4;
      (((0 <= i_4) && (i_4 < strlen{L}(s_7))) ==> ((s_7 + i_4).charM != 0))))
   
  axiom strlen_at_null{L} :
  (\forall charP[..] s_8;
    ((0 <= strlen{L}(s_8)) ==> ((s_8 + strlen{L}(s_8)).charM == 0)))
   
  axiom strlen_not_zero{L} :
  (\forall charP[..] s_9;
    (\forall integer i_5;
      ((((0 <= i_5) && (i_5 <= strlen{L}(s_9))) && ((s_9 + i_5).charM != 0)) ==>
        (i_5 < strlen{L}(s_9)))))
   
  axiom strlen_zero{L} :
  (\forall charP[..] s_10;
    (\forall integer i_6;
      ((((0 <= i_6) && (i_6 <= strlen{L}(s_10))) &&
         ((s_10 + i_6).charM == 0)) ==>
        (i_6 == strlen{L}(s_10)))))
   
  axiom strlen_sup{L} :
  (\forall charP[..] s_11;
    (\forall integer i_7;
      (((0 <= i_7) && ((s_11 + i_7).charM == 0)) ==>
        ((0 <= strlen{L}(s_11)) && (strlen{L}(s_11) <= i_7)))))
   
  axiom strlen_shift{L} :
  (\forall charP[..] s_12;
    (\forall integer i_8;
      (((0 <= i_8) && (i_8 <= strlen{L}(s_12))) ==>
        (strlen{L}((s_12 + i_8)) == (strlen{L}(s_12) - i_8)))))
   
  axiom strlen_create{L} :
  (\forall charP[..] s_13;
    (\forall integer i_9;
      ((((0 <= i_9) && (i_9 <= 2147483647)) && ((s_13 + i_9).charM == 0)) ==>
        ((0 <= strlen{L}(s_13)) && (strlen{L}(s_13) <= i_9)))))
   
  axiom strlen_create_shift{L} :
  (\forall charP[..] s_14;
    (\forall integer i_10;
      (\forall integer k;
        ((((0 <= k) && ((k <= i_10) && (i_10 <= 2147483647))) &&
           ((s_14 + i_10).charM == 0)) ==>
          ((0 <= strlen{L}((s_14 + k))) &&
            (strlen{L}((s_14 + k)) <= (i_10 - k)))))))
   
  axiom memcmp_strlen_left{L} :
  (\forall charP[..] s1_2;
    (\forall charP[..] s2_2;
      (\forall integer n_6;
        (((memcmp{L}(s1_2, s2_2, n_6) == 0) && (strlen{L}(s1_2) < n_6)) ==>
          (strlen{L}(s1_2) == strlen{L}(s2_2))))))
   
  axiom memcmp_strlen_right{L} :
  (\forall charP[..] s1_3;
    (\forall charP[..] s2_3;
      (\forall integer n_7;
        (((memcmp{L}(s1_3, s2_3, n_7) == 0) && (strlen{L}(s2_3) < n_7)) ==>
          (strlen{L}(s1_3) == strlen{L}(s2_3))))))
   
  axiom memcmp_strlen_shift_left{L} :
  (\forall charP[..] s1_4;
    (\forall charP[..] s2_4;
      (\forall integer k_0;
        (\forall integer n_8;
          ((((memcmp{L}(s1_4, (s2_4 + k_0), n_8) == 0) && (0 <= k_0)) &&
             (strlen{L}(s1_4) < n_8)) ==>
            ((0 <= strlen{L}(s2_4)) &&
              (strlen{L}(s2_4) <= (k_0 + strlen{L}(s1_4)))))))))
   
  axiom memcmp_strlen_shift_right{L} :
  (\forall charP[..] s1_5;
    (\forall charP[..] s2_5;
      (\forall integer k_1;
        (\forall integer n_9;
          ((((memcmp{L}((s1_5 + k_1), s2_5, n_9) == 0) && (0 <= k_1)) &&
             (strlen{L}(s2_5) < n_9)) ==>
            ((0 <= strlen{L}(s1_5)) &&
              (strlen{L}(s1_5) <= (k_1 + strlen{L}(s2_5)))))))))
  
}

axiomatic StrCmp {

  logic integer strcmp{L}(charP[..] s1_6, charP[..] s2_6)
  reads (s1_6 + [0..strlen{L}(s1_6)]).charM,
  (s2_6 + [0..strlen{L}(s2_6)]).charM;
   
  axiom strcmp_range{L} :
  (\forall charP[..] s1_7;
    (\forall charP[..] s2_7;
      ((((- 2147483647) - 1) <= strcmp{L}(s1_7, s2_7)) &&
        (strcmp{L}(s1_7, s2_7) <= 2147483647))))
   
  axiom strcmp_zero{L} :
  (\forall charP[..] s1_8;
    (\forall charP[..] s2_8;
      ((strcmp{L}(s1_8, s2_8) == 0) <==>
        ((strlen{L}(s1_8) == strlen{L}(s2_8)) &&
          (\forall integer i_11;
            (((0 <= i_11) && (i_11 <= strlen{L}(s1_8))) ==>
              ((s1_8 + i_11).charM == (s2_8 + i_11).charM)))))))
  
}

axiomatic StrNCmp {

  logic integer strncmp{L}(charP[..] s1_9, charP[..] s2_9, integer n_10)
  reads (s1_9 + [0..(n_10 - 1)]).charM, (s2_9 + [0..(n_10 - 1)]).charM;
   
  axiom strncmp_zero{L} :
  (\forall charP[..] s1_10;
    (\forall charP[..] s2_10;
      (\forall integer n_11;
        ((strncmp{L}(s1_10, s2_10, n_11) == 0) <==>
          (((strlen{L}(s1_10) < n_11) && (strcmp{L}(s1_10, s2_10) == 0)) ||
            (\forall integer i_12;
              (((0 <= i_12) && (i_12 < n_11)) ==>
                ((s1_10 + i_12).charM == (s2_10 + i_12).charM))))))))
  
}

axiomatic StrChr {

  logic boolean strchr{L}(charP[..] s_15, integer c_3)
  reads (s_15 + [0..strlen{L}(s_15)]).charM;
   
  axiom strchr_def{L} :
  (\forall charP[..] s_16;
    (\forall integer c_4;
      ((strchr{L}(s_16, c_4) == true) <==>
        (\exists integer i_13;
          (((0 <= i_13) && (i_13 <= strlen{L}(s_16))) &&
            ((s_16 + i_13).charM == c_4))))))
  
}

axiomatic WcsLen {

  logic integer wcslen{L}(unsigned_shortP[..] s_17)
  reads (s_17 + [0..]).unsigned_shortM;
   
  axiom wcslen_pos_or_null{L} :
  (\forall unsigned_shortP[..] s_18;
    (\forall integer i_14;
      ((((0 <= i_14) &&
          (\forall integer j_0;
            (((0 <= j_0) && (j_0 < i_14)) ==>
              ((s_18 + j_0).unsigned_shortM != 0)))) &&
         ((s_18 + i_14).unsigned_shortM == 0)) ==>
        (wcslen{L}(s_18) == i_14))))
   
  axiom wcslen_neg{L} :
  (\forall unsigned_shortP[..] s_19;
    ((\forall integer i_15;
       ((0 <= i_15) ==> ((s_19 + i_15).unsigned_shortM != 0))) ==>
      (wcslen{L}(s_19) < 0)))
   
  axiom wcslen_before_null{L} :
  (\forall unsigned_shortP[..] s_20;
    (\forall int32 i_16;
      (((0 <= i_16) && (i_16 < wcslen{L}(s_20))) ==>
        ((s_20 + i_16).unsigned_shortM != 0))))
   
  axiom wcslen_at_null{L} :
  (\forall unsigned_shortP[..] s_21;
    ((0 <= wcslen{L}(s_21)) ==>
      ((s_21 + wcslen{L}(s_21)).unsigned_shortM == 0)))
   
  axiom wcslen_not_zero{L} :
  (\forall unsigned_shortP[..] s_22;
    (\forall int32 i_17;
      ((((0 <= i_17) && (i_17 <= wcslen{L}(s_22))) &&
         ((s_22 + i_17).unsigned_shortM != 0)) ==>
        (i_17 < wcslen{L}(s_22)))))
   
  axiom wcslen_zero{L} :
  (\forall unsigned_shortP[..] s_23;
    (\forall int32 i_18;
      ((((0 <= i_18) && (i_18 <= wcslen{L}(s_23))) &&
         ((s_23 + i_18).unsigned_shortM == 0)) ==>
        (i_18 == wcslen{L}(s_23)))))
   
  axiom wcslen_sup{L} :
  (\forall unsigned_shortP[..] s_24;
    (\forall int32 i_19;
      (((0 <= i_19) && ((s_24 + i_19).unsigned_shortM == 0)) ==>
        ((0 <= wcslen{L}(s_24)) && (wcslen{L}(s_24) <= i_19)))))
   
  axiom wcslen_shift{L} :
  (\forall unsigned_shortP[..] s_25;
    (\forall int32 i_20;
      (((0 <= i_20) && (i_20 <= wcslen{L}(s_25))) ==>
        (wcslen{L}((s_25 + i_20)) == (wcslen{L}(s_25) - i_20)))))
   
  axiom wcslen_create{L} :
  (\forall unsigned_shortP[..] s_26;
    (\forall int32 i_21;
      (((0 <= i_21) && ((s_26 + i_21).unsigned_shortM == 0)) ==>
        ((0 <= wcslen{L}(s_26)) && (wcslen{L}(s_26) <= i_21)))))
   
  axiom wcslen_create_shift{L} :
  (\forall unsigned_shortP[..] s_27;
    (\forall int32 i_22;
      (\forall int32 k_2;
        ((((0 <= k_2) && (k_2 <= i_22)) &&
           ((s_27 + i_22).unsigned_shortM == 0)) ==>
          ((0 <= wcslen{L}((s_27 + k_2))) &&
            (wcslen{L}((s_27 + k_2)) <= (i_22 - k_2)))))))
  
}

axiomatic WcsCmp {

  logic integer wcscmp{L}(unsigned_shortP[..] s1_11, unsigned_shortP[..] s2_11)
  reads (s1_11 + [0..wcslen{L}(s1_11)]).unsigned_shortM,
  (s2_11 + [0..wcslen{L}(s2_11)]).unsigned_shortM;
   
  axiom wcscmp_zero{L} :
  (\forall unsigned_shortP[..] s1_12;
    (\forall unsigned_shortP[..] s2_12;
      ((wcscmp{L}(s1_12, s2_12) == 0) <==>
        ((wcslen{L}(s1_12) == wcslen{L}(s2_12)) &&
          (\forall integer i_23;
            (((0 <= i_23) && (i_23 <= wcslen{L}(s1_12))) ==>
              ((s1_12 + i_23).unsigned_shortM ==
                (s2_12 + i_23).unsigned_shortM)))))))
  
}

axiomatic WcsNCmp {

  logic integer wcsncmp{L}(unsigned_shortP[..] s1_13,
                           unsigned_shortP[..] s2_13, integer n_12)
  reads (s1_13 + [0..(n_12 - 1)]).unsigned_shortM,
  (s2_13 + [0..(n_12 - 1)]).unsigned_shortM;
   
  axiom wcsncmp_zero{L} :
  (\forall unsigned_shortP[..] s1_14;
    (\forall unsigned_shortP[..] s2_14;
      (\forall integer n_13;
        ((wcsncmp{L}(s1_14, s2_14, n_13) == 0) <==>
          (((wcslen{L}(s1_14) < n_13) && (wcscmp{L}(s1_14, s2_14) == 0)) ||
            (\forall integer i_24;
              (((0 <= i_24) && (i_24 < n_13)) ==>
                ((s1_14 + i_24).unsigned_shortM ==
                  (s2_14 + i_24).unsigned_shortM))))))))
  
}

logic integer minimum(integer i_25, integer j_1) =
(if (i_25 < j_1) then i_25 else j_1)

logic integer maximum(integer i_26, integer j_2) =
(if (i_26 < j_2) then j_2 else i_26)

predicate valid_string{L}(charP[..] s_28) =
((0 <= strlen{L}(s_28)) &&
  ((\offset_min(s_28) <= 0) && (\offset_max(s_28) >= strlen{L}(s_28))))

predicate valid_string_or_null{L}(charP[..] s_29) =
((s_29 == null) || valid_string{L}(s_29))

predicate valid_wstring{L}(unsigned_shortP[..] s_30) =
((0 <= wcslen{L}(s_30)) &&
  ((\offset_min(s_30) <= 0) && (\offset_max(s_30) >= wcslen{L}(s_30))))

predicate valid_wstring_or_null{L}(unsigned_shortP[..] s_31) =
((s_31 == null) || valid_wstring{L}(s_31))

predicate paquet_bien_forme{Here}(__anonstruct_paquet_t_1[..] paquet) =
(((\offset_min(paquet.message) <= 0) &&
   (\offset_max(paquet.message) >= (paquet.longueur - 1))) &&
  valid_string{Here}(paquet.message))

charP[..] strncpy(charP[..] destination_0, charP[..] source, uint32 taille_0)
  requires (C_31 : (taille_0 < 1000000));
behavior default:
  ensures (C_30 : true);
{  
   (var charP[..] curseur);
   
   (var charP[..] tmp);
   
   (var int8 tmp_0);
   
   (var charP[..] tmp_1);
   
   (var charP[..] tmp_2);
   
   {  (C_1 : (curseur = destination_0));
      (if (taille_0 > 0) then 
      {  
         loop 
         while (true)
         {  
            {  
               {  (C_2 : (tmp = curseur));
                  (C_4 : (curseur = (C_3 : (curseur + 1))));
                  (C_5 : (tmp_1 = source));
                  (C_7 : (source = (C_6 : (source + 1))));
                  (C_9 : (tmp_0 = (C_8 : tmp_1.charM)));
                  (C_11 : ((C_10 : tmp.charM) = tmp_0))
               };
               (if (tmp_0 != 0) then 
               {  (C_14 : (taille_0 = (C_13 : ((C_12 : (taille_0 - 1)) :> uint32))));
                  (if (taille_0 > 0) then () else 
                  (goto while_0_break))
               } else 
               (goto while_0_break))
            }
         };
         (while_0_break : ());
         
         {  (C_16 : (source = (C_15 : (source - 1))));
            ()
         };
         (if ((C_29 : ((C_28 : source.charM) :> int32)) == 0) then 
         {  (C_19 : (taille_0 = (C_18 : ((C_17 : (taille_0 - 1)) :> uint32))));
            (if (taille_0 > 0) then 
            {  
               loop 
               while (true)
               {  
                  {  
                     {  
                        {  (C_20 : (tmp_2 = destination_0));
                           (C_22 : (destination_0 = (C_21 : (destination_0 +
                                                              1))));
                           (C_24 : ((C_23 : tmp_2.charM) = 0))
                        }
                     };
                     (C_27 : (taille_0 = (C_26 : ((C_25 : (taille_0 - 1)) :> uint32))));
                     (if (taille_0 > 0) then () else 
                     (goto while_1_break))
                  }
               };
               (while_1_break : ())
            } else ())
         } else ())
      } else ());
      
      (return destination_0)
   }
}

int32 recevoir_un_paquet(charP[..] destination, uint32 taille,
                         __anonstruct_paquet_t_1[..] paquet)
  requires (C_40 : (((C_42 : (\offset_min(paquet) <= 0)) &&
                      (C_43 : (\offset_max(paquet) >= 0))) &&
                     ((C_45 : (\offset_min(destination) <= 0)) &&
                       (C_46 : (\offset_max(destination) >= (taille - 1))))));
behavior default:
  ensures (C_37 : true);
behavior echec:
  assumes (taille < paquet.longueur);
  assigns \nothing;
  ensures (C_38 : (\result == 0));
behavior succes:
  assumes (taille >= paquet.longueur);
  assigns (destination + [0..(taille - 1)]).charM;
  ensures (C_39 : (\result == 1));
{  
   (var int32 __retres);
   
   {  (if (taille < (C_33 : paquet.longueur)) then 
      {  (C_32 : (__retres = 0));
         
         (goto return_label)
      } else ());
      (C_35 : strncpy(destination, (C_34 : paquet.message), taille));
      (C_36 : (__retres = 1));
      (return_label : 
      (return __retres))
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs forum_cifre.jessie/forum_cifre.cloc forum_cifre.jessie/forum_cifre.jc
type __anonstruct_paquet_t_1

type charP

type int32

type int8

type padding

type uint16

type uint32

type unsigned_shortP

type voidP

logic __anonstruct_paquet_t_1_tag:  -> __anonstruct_paquet_t_1 tag_id

axiom __anonstruct_paquet_t_1_int :
 (int_of_tag(__anonstruct_paquet_t_1_tag) = (1))

logic __anonstruct_paquet_t_1_of_pointer_address: unit pointer -> __anonstruct_paquet_t_1 pointer

axiom __anonstruct_paquet_t_1_of_pointer_address_of_pointer_addr :
 (forall p:__anonstruct_paquet_t_1 pointer.
  (p = __anonstruct_paquet_t_1_of_pointer_address(pointer_address(p))))

axiom __anonstruct_paquet_t_1_parenttag_bottom :
 parenttag(__anonstruct_paquet_t_1_tag, bottom_tag)

axiom __anonstruct_paquet_t_1_tags :
 (forall x:__anonstruct_paquet_t_1 pointer.
  (forall __anonstruct_paquet_t_1_tag_table:__anonstruct_paquet_t_1 tag_table
   .
   instanceof(__anonstruct_paquet_t_1_tag_table, x,
   __anonstruct_paquet_t_1_tag)))

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16, y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32, y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32.
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8.
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct___anonstruct_paquet_t_1(p:__anonstruct_paquet_t_1 pointer,
 a:int,
 __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table) =
 (offset_min(__anonstruct_paquet_t_1_alloc_table, p) <= a)

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_shortP(p:unsigned_shortP pointer, a:int,
 unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 (offset_min(unsigned_shortP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

function maximum(i_26:int, j_2:int) : int =
 (if lt_int_bool(i_26, j_2) then j_2 else i_26)

logic memchr: charP pointer, int, int, (charP, int8) memory -> bool

logic memcmp: charP pointer, charP pointer, int, (charP, int8) memory,
 (charP, int8) memory -> int

logic memset: charP pointer, int, int, (charP, int8) memory -> bool

function minimum(i_25:int, j_1:int) : int =
 (if lt_int_bool(i_25, j_1) then i_25 else j_1)

axiom no_assign_memchr_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s_3_at_L:(charP, int8) memory.
     (forall n_2:int.
      (forall c:int.
       (forall s_0:charP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s_0), (0), sub_int(n_2, (1))))
         and not_assigns(tmpalloc, charP_charM_s_3_at_L, tmpmem, tmp)) ->
         (memchr(s_0, c, n_2, charP_charM_s_3_at_L) = memchr(s_0, c, n_2,
                                                      tmpmem))))))))))

axiom no_assign_memcmp_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_1_at_L:(charP, int8) memory.
     (forall charP_charM_s2_2_at_L:(charP, int8) memory.
      (forall n:int.
       (forall s2_1:charP pointer.
        (forall s1_1:charP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s2_1), (0), sub_int(n, (1))))
          and not_assigns(tmpalloc, charP_charM_s2_2_at_L, tmpmem, tmp)) ->
          (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
           charP_charM_s1_1_at_L) = memcmp(s1_1, s2_1, n, tmpmem,
                                    charP_charM_s1_1_at_L)))))))))))

axiom no_assign_memcmp_1 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_1_at_L:(charP, int8) memory.
     (forall charP_charM_s2_2_at_L:(charP, int8) memory.
      (forall n:int.
       (forall s2_1:charP pointer.
        (forall s1_1:charP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s1_1), (0), sub_int(n, (1))))
          and not_assigns(tmpalloc, charP_charM_s1_1_at_L, tmpmem, tmp)) ->
          (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
           charP_charM_s1_1_at_L) = memcmp(s1_1, s2_1, n,
                                    charP_charM_s2_2_at_L, tmpmem)))))))))))

axiom no_assign_memset_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s_1_4_at_L:(charP, int8) memory.
     (forall n_4:int.
      (forall c_1:int.
       (forall s_1:charP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s_1), (0), sub_int(n_4, (1))))
         and not_assigns(tmpalloc, charP_charM_s_1_4_at_L, tmpmem, tmp)) ->
         (memset(s_1, c_1, n_4, charP_charM_s_1_4_at_L) = memset(s_1, c_1,
                                                          n_4, tmpmem))))))))))

logic strlen: charP pointer, (charP, int8) memory -> int

logic strchr: charP pointer, int, (charP, int8) memory -> bool

axiom no_assign_strchr_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s_15_10_at_L:(charP, int8) memory.
     (forall c_3:int.
      (forall s_15:charP pointer.
       ((pset_disjoint(tmp,
         pset_range(pset_singleton(s_15), (0),
         strlen(s_15, charP_charM_s_15_10_at_L)))
        and not_assigns(tmpalloc, charP_charM_s_15_10_at_L, tmpmem, tmp)) ->
        (strchr(s_15, c_3, charP_charM_s_15_10_at_L) = strchr(s_15, c_3,
                                                       tmpmem)))))))))

logic strcmp: charP pointer, charP pointer, (charP, int8) memory,
 (charP, int8) memory -> int

axiom no_assign_strcmp_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
     (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
      (forall s2_6:charP pointer.
       (forall s1_6:charP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s2_6), (0),
          strlen(s2_6, charP_charM_s2_6_7_at_L)))
         and not_assigns(tmpalloc, charP_charM_s2_6_7_at_L, tmpmem, tmp)) ->
         (strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L,
          charP_charM_s1_6_6_at_L) = strcmp(s1_6, s2_6, tmpmem,
                                     charP_charM_s1_6_6_at_L))))))))))

axiom no_assign_strcmp_1 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
     (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
      (forall s2_6:charP pointer.
       (forall s1_6:charP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s1_6), (0),
          strlen(s1_6, charP_charM_s1_6_6_at_L)))
         and not_assigns(tmpalloc, charP_charM_s1_6_6_at_L, tmpmem, tmp)) ->
         (strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L,
          charP_charM_s1_6_6_at_L) = strcmp(s1_6, s2_6,
                                     charP_charM_s2_6_7_at_L, tmpmem))))))))))

axiom no_assign_strlen_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
     (forall s_3:charP pointer.
      ((pset_disjoint(tmp, pset_range_right(pset_singleton(s_3), (0)))
       and not_assigns(tmpalloc, charP_charM_s_3_5_at_L, tmpmem, tmp)) ->
       (strlen(s_3, charP_charM_s_3_5_at_L) = strlen(s_3, tmpmem))))))))

logic strncmp: charP pointer, charP pointer, int, (charP, int8) memory,
 (charP, int8) memory -> int

axiom no_assign_strncmp_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
     (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
      (forall n_10:int.
       (forall s2_9:charP pointer.
        (forall s1_9:charP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s2_9), (0), sub_int(n_10, (1))))
          and not_assigns(tmpalloc, charP_charM_s2_9_9_at_L, tmpmem, tmp)) ->
          (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_9_at_L,
           charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10, tmpmem,
                                      charP_charM_s1_9_8_at_L)))))))))))

axiom no_assign_strncmp_1 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
     (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
      (forall n_10:int.
       (forall s2_9:charP pointer.
        (forall s1_9:charP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s1_9), (0), sub_int(n_10, (1))))
          and not_assigns(tmpalloc, charP_charM_s1_9_8_at_L, tmpmem, tmp)) ->
          (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_9_at_L,
           charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                                      charP_charM_s2_9_9_at_L, tmpmem)))))))))))

logic wcslen: unsigned_shortP pointer,
 (unsigned_shortP, uint16) memory -> int

logic wcscmp: unsigned_shortP pointer, unsigned_shortP pointer,
 (unsigned_shortP, uint16) memory, (unsigned_shortP, uint16) memory -> int

axiom no_assign_wcscmp_0 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:
     (unsigned_shortP, uint16) memory.
     (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:
      (unsigned_shortP, uint16) memory.
      (forall s2_11:unsigned_shortP pointer.
       (forall s1_11:unsigned_shortP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s2_11), (0),
          wcslen(s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L)))
         and not_assigns(tmpalloc,
             unsigned_shortP_unsigned_shortM_s2_11_13_at_L, tmpmem, tmp)) ->
         (wcscmp(s1_11, s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
          unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
                                                           s2_11, tmpmem,
                                                           unsigned_shortP_unsigned_shortM_s1_11_12_at_L))))))))))

axiom no_assign_wcscmp_1 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:
     (unsigned_shortP, uint16) memory.
     (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:
      (unsigned_shortP, uint16) memory.
      (forall s2_11:unsigned_shortP pointer.
       (forall s1_11:unsigned_shortP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s1_11), (0),
          wcslen(s1_11, unsigned_shortP_unsigned_shortM_s1_11_12_at_L)))
         and not_assigns(tmpalloc,
             unsigned_shortP_unsigned_shortM_s1_11_12_at_L, tmpmem, tmp)) ->
         (wcscmp(s1_11, s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
          unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
                                                           s2_11,
                                                           unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                                                           tmpmem))))))))))

axiom no_assign_wcslen_0 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
     (unsigned_shortP, uint16) memory.
     (forall s_17:unsigned_shortP pointer.
      ((pset_disjoint(tmp, pset_range_right(pset_singleton(s_17), (0)))
       and not_assigns(tmpalloc,
           unsigned_shortP_unsigned_shortM_s_17_11_at_L, tmpmem, tmp)) ->
       (wcslen(s_17, unsigned_shortP_unsigned_shortM_s_17_11_at_L) = 
       wcslen(s_17, tmpmem))))))))

logic wcsncmp: unsigned_shortP pointer, unsigned_shortP pointer, int,
 (unsigned_shortP, uint16) memory, (unsigned_shortP, uint16) memory -> int

axiom no_assign_wcsncmp_0 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:
     (unsigned_shortP, uint16) memory.
     (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:
      (unsigned_shortP, uint16) memory.
      (forall n_12:int.
       (forall s2_13:unsigned_shortP pointer.
        (forall s1_13:unsigned_shortP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s2_13), (0), sub_int(n_12, (1))))
          and not_assigns(tmpalloc,
              unsigned_shortP_unsigned_shortM_s2_13_15_at_L, tmpmem, tmp)) ->
          (wcsncmp(s1_13, s2_13, n_12,
           unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
           unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                                                            s2_13, n_12,
                                                            tmpmem,
                                                            unsigned_shortP_unsigned_shortM_s1_13_14_at_L)))))))))))

axiom no_assign_wcsncmp_1 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:
     (unsigned_shortP, uint16) memory.
     (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:
      (unsigned_shortP, uint16) memory.
      (forall n_12:int.
       (forall s2_13:unsigned_shortP pointer.
        (forall s1_13:unsigned_shortP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s1_13), (0), sub_int(n_12, (1))))
          and not_assigns(tmpalloc,
              unsigned_shortP_unsigned_shortM_s1_13_14_at_L, tmpmem, tmp)) ->
          (wcsncmp(s1_13, s2_13, n_12,
           unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
           unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                                                            s2_13, n_12,
                                                            unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                                                            tmpmem)))))))))))

axiom no_update_memchr_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s_3_at_L:(charP, int8) memory.
    (forall n_2:int.
     (forall c:int.
      (forall s_0:charP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s_0), (0), sub_int(n_2, (1))))) ->
        (memchr(s_0, c, n_2, charP_charM_s_3_at_L) = memchr(s_0, c, n_2,
                                                     store(charP_charM_s_3_at_L,
                                                     tmp, tmpval))))))))))

axiom no_update_memcmp_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_1_at_L:(charP, int8) memory.
    (forall charP_charM_s2_2_at_L:(charP, int8) memory.
     (forall n:int.
      (forall s2_1:charP pointer.
       (forall s1_1:charP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s2_1), (0), sub_int(n, (1))))) ->
         (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L, charP_charM_s1_1_at_L) = 
         memcmp(s1_1, s2_1, n, store(charP_charM_s2_2_at_L, tmp, tmpval),
         charP_charM_s1_1_at_L))))))))))

axiom no_update_memcmp_1 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_1_at_L:(charP, int8) memory.
    (forall charP_charM_s2_2_at_L:(charP, int8) memory.
     (forall n:int.
      (forall s2_1:charP pointer.
       (forall s1_1:charP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s1_1), (0), sub_int(n, (1))))) ->
         (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L, charP_charM_s1_1_at_L) = 
         memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
         store(charP_charM_s1_1_at_L, tmp, tmpval)))))))))))

axiom no_update_memset_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s_1_4_at_L:(charP, int8) memory.
    (forall n_4:int.
     (forall c_1:int.
      (forall s_1:charP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s_1), (0), sub_int(n_4, (1))))) ->
        (memset(s_1, c_1, n_4, charP_charM_s_1_4_at_L) = memset(s_1, c_1,
                                                         n_4,
                                                         store(charP_charM_s_1_4_at_L,
                                                         tmp, tmpval))))))))))

axiom no_update_strchr_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s_15_10_at_L:(charP, int8) memory.
    (forall c_3:int.
     (forall s_15:charP pointer.
      ((not in_pset(tmp,
            pset_range(pset_singleton(s_15), (0),
            strlen(s_15, charP_charM_s_15_10_at_L)))) ->
       (strchr(s_15, c_3, charP_charM_s_15_10_at_L) = strchr(s_15, c_3,
                                                      store(charP_charM_s_15_10_at_L,
                                                      tmp, tmpval)))))))))

axiom no_update_strcmp_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
    (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
     (forall s2_6:charP pointer.
      (forall s1_6:charP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s2_6), (0),
             strlen(s2_6, charP_charM_s2_6_7_at_L)))) ->
        (strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L, charP_charM_s1_6_6_at_L) = 
        strcmp(s1_6, s2_6, store(charP_charM_s2_6_7_at_L, tmp, tmpval),
        charP_charM_s1_6_6_at_L)))))))))

axiom no_update_strcmp_1 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
    (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
     (forall s2_6:charP pointer.
      (forall s1_6:charP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s1_6), (0),
             strlen(s1_6, charP_charM_s1_6_6_at_L)))) ->
        (strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L, charP_charM_s1_6_6_at_L) = 
        strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L,
        store(charP_charM_s1_6_6_at_L, tmp, tmpval))))))))))

axiom no_update_strlen_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_3:charP pointer.
     ((not in_pset(tmp, pset_range_right(pset_singleton(s_3), (0)))) ->
      (strlen(s_3, charP_charM_s_3_5_at_L) = strlen(s_3,
                                             store(charP_charM_s_3_5_at_L,
                                             tmp, tmpval))))))))

axiom no_update_strncmp_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
    (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
     (forall n_10:int.
      (forall s2_9:charP pointer.
       (forall s1_9:charP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s2_9), (0), sub_int(n_10, (1))))) ->
         (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_9_at_L,
          charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                                     store(charP_charM_s2_9_9_at_L, tmp,
                                     tmpval), charP_charM_s1_9_8_at_L))))))))))

axiom no_update_strncmp_1 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
    (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
     (forall n_10:int.
      (forall s2_9:charP pointer.
       (forall s1_9:charP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s1_9), (0), sub_int(n_10, (1))))) ->
         (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_9_at_L,
          charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                                     charP_charM_s2_9_9_at_L,
                                     store(charP_charM_s1_9_8_at_L, tmp,
                                     tmpval)))))))))))

axiom no_update_wcscmp_0 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:
    (unsigned_shortP, uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:
     (unsigned_shortP, uint16) memory.
     (forall s2_11:unsigned_shortP pointer.
      (forall s1_11:unsigned_shortP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s2_11), (0),
             wcslen(s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L)))) ->
        (wcscmp(s1_11, s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
         unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
                                                          s2_11,
                                                          store(unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                                                          tmp, tmpval),
                                                          unsigned_shortP_unsigned_shortM_s1_11_12_at_L)))))))))

axiom no_update_wcscmp_1 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:
    (unsigned_shortP, uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:
     (unsigned_shortP, uint16) memory.
     (forall s2_11:unsigned_shortP pointer.
      (forall s1_11:unsigned_shortP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s1_11), (0),
             wcslen(s1_11, unsigned_shortP_unsigned_shortM_s1_11_12_at_L)))) ->
        (wcscmp(s1_11, s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
         unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
                                                          s2_11,
                                                          unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                                                          store(unsigned_shortP_unsigned_shortM_s1_11_12_at_L,
                                                          tmp, tmpval))))))))))

axiom no_update_wcslen_0 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
    (unsigned_shortP, uint16) memory.
    (forall s_17:unsigned_shortP pointer.
     ((not in_pset(tmp, pset_range_right(pset_singleton(s_17), (0)))) ->
      (wcslen(s_17, unsigned_shortP_unsigned_shortM_s_17_11_at_L) = wcslen(s_17,
                                                                    store(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                                                                    tmp,
                                                                    tmpval))))))))

axiom no_update_wcsncmp_0 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:
    (unsigned_shortP, uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:
     (unsigned_shortP, uint16) memory.
     (forall n_12:int.
      (forall s2_13:unsigned_shortP pointer.
       (forall s1_13:unsigned_shortP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s2_13), (0), sub_int(n_12, (1))))) ->
         (wcsncmp(s1_13, s2_13, n_12,
          unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
          unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                                                           s2_13, n_12,
                                                           store(unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                                                           tmp, tmpval),
                                                           unsigned_shortP_unsigned_shortM_s1_13_14_at_L))))))))))

axiom no_update_wcsncmp_1 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:
    (unsigned_shortP, uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:
     (unsigned_shortP, uint16) memory.
     (forall n_12:int.
      (forall s2_13:unsigned_shortP pointer.
       (forall s1_13:unsigned_shortP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s1_13), (0), sub_int(n_12, (1))))) ->
         (wcsncmp(s1_13, s2_13, n_12,
          unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
          unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                                                           s2_13, n_12,
                                                           unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                                                           store(unsigned_shortP_unsigned_shortM_s1_13_14_at_L,
                                                           tmp, tmpval)))))))))))

predicate valid_string(s_28:charP pointer,
 charP_s_28_16_alloc_table_at_L:charP alloc_table,
 charP_charM_s_28_16_at_L:(charP, int8) memory) =
 (le_int((0), strlen(s_28, charP_charM_s_28_16_at_L))
 and (le_int(offset_min(charP_s_28_16_alloc_table_at_L, s_28), (0))
     and ge_int(offset_max(charP_s_28_16_alloc_table_at_L, s_28),
         strlen(s_28, charP_charM_s_28_16_at_L))))

predicate paquet_bien_forme(paquet:__anonstruct_paquet_t_1 pointer,
 charP_message_75_alloc_table:charP alloc_table,
 __anonstruct_paquet_t_1_message_paquet_20:(__anonstruct_paquet_t_1, charP pointer) memory,
 __anonstruct_paquet_t_1_longueur_paquet_20:(__anonstruct_paquet_t_1, uint32) memory,
 charP_charM_message_75:(charP, int8) memory) =
 (le_int(offset_min(charP_message_75_alloc_table,
         select(__anonstruct_paquet_t_1_message_paquet_20, paquet)),
  (0))
 and (ge_int(offset_max(charP_message_75_alloc_table,
             select(__anonstruct_paquet_t_1_message_paquet_20, paquet)),
      sub_int(integer_of_uint32(select(__anonstruct_paquet_t_1_longueur_paquet_20,
                                paquet)),
      (1)))
     and valid_string(select(__anonstruct_paquet_t_1_message_paquet_20,
                      paquet),
         charP_message_75_alloc_table, charP_charM_message_75)))

axiom pointer_addr_of___anonstruct_paquet_t_1_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(__anonstruct_paquet_t_1_of_pointer_address(p))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic unsigned_shortP_of_pointer_address: unit pointer -> unsigned_shortP pointer

axiom pointer_addr_of_unsigned_shortP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_shortP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct___anonstruct_paquet_t_1(p:__anonstruct_paquet_t_1 pointer,
 b:int,
 __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table) =
 (offset_max(__anonstruct_paquet_t_1_alloc_table, p) >= b)

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_shortP(p:unsigned_shortP pointer,
 b:int, unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 (offset_max(unsigned_shortP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root___anonstruct_paquet_t_1(p:__anonstruct_paquet_t_1 pointer,
 a:int, b:int,
 __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table) =
 ((offset_min(__anonstruct_paquet_t_1_alloc_table, p) = a)
 and (offset_max(__anonstruct_paquet_t_1_alloc_table, p) = b))

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_shortP(p:unsigned_shortP pointer, a:int,
 b:int, unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 ((offset_min(unsigned_shortP_alloc_table, p) = a)
 and (offset_max(unsigned_shortP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_paquet_t_1(p:__anonstruct_paquet_t_1 pointer,
 a:int, b:int,
 __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table) =
 ((offset_min(__anonstruct_paquet_t_1_alloc_table, p) = a)
 and (offset_max(__anonstruct_paquet_t_1_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_shortP(p:unsigned_shortP pointer,
 a:int, b:int, unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 ((offset_min(unsigned_shortP_alloc_table, p) = a)
 and (offset_max(unsigned_shortP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_extensionality :
 (forall x:uint16.
  (forall y:uint16.
   (eq_int(integer_of_uint16(x), integer_of_uint16(y)) -> (x = y))))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_extensionality :
 (forall x:uint32.
  (forall y:uint32.
   (eq_int(integer_of_uint32(x), integer_of_uint32(y)) -> (x = y))))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic unsigned_shortP_tag:  -> unsigned_shortP tag_id

axiom unsigned_shortP_int : (int_of_tag(unsigned_shortP_tag) = (1))

axiom unsigned_shortP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_shortP pointer.
  (p = unsigned_shortP_of_pointer_address(pointer_address(p))))

axiom unsigned_shortP_parenttag_bottom :
 parenttag(unsigned_shortP_tag, bottom_tag)

axiom unsigned_shortP_tags :
 (forall x:unsigned_shortP pointer.
  (forall unsigned_shortP_tag_table:unsigned_shortP tag_table.
   instanceof(unsigned_shortP_tag_table, x, unsigned_shortP_tag)))

predicate valid_root___anonstruct_paquet_t_1(p:__anonstruct_paquet_t_1 pointer,
 a:int, b:int,
 __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table) =
 ((offset_min(__anonstruct_paquet_t_1_alloc_table, p) <= a)
 and (offset_max(__anonstruct_paquet_t_1_alloc_table, p) >= b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_unsigned_shortP(p:unsigned_shortP pointer, a:int, b:int,
 unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 ((offset_min(unsigned_shortP_alloc_table, p) <= a)
 and (offset_max(unsigned_shortP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_string_or_null(s_29:charP pointer,
 charP_s_29_17_alloc_table_at_L:charP alloc_table,
 charP_charM_s_29_17_at_L:(charP, int8) memory) =
 ((s_29 = null)
 or valid_string(s_29, charP_s_29_17_alloc_table_at_L,
    charP_charM_s_29_17_at_L))

predicate valid_struct___anonstruct_paquet_t_1(p:__anonstruct_paquet_t_1 pointer,
 a:int, b:int,
 __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table) =
 ((offset_min(__anonstruct_paquet_t_1_alloc_table, p) <= a)
 and (offset_max(__anonstruct_paquet_t_1_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_unsigned_shortP(p:unsigned_shortP pointer, a:int,
 b:int, unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 ((offset_min(unsigned_shortP_alloc_table, p) <= a)
 and (offset_max(unsigned_shortP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_wstring(s_30:unsigned_shortP pointer,
 unsigned_shortP_s_30_18_alloc_table_at_L:unsigned_shortP alloc_table,
 unsigned_shortP_unsigned_shortM_s_30_18_at_L:(unsigned_shortP, uint16) memory) =
 (le_int((0), wcslen(s_30, unsigned_shortP_unsigned_shortM_s_30_18_at_L))
 and (le_int(offset_min(unsigned_shortP_s_30_18_alloc_table_at_L, s_30), (0))
     and ge_int(offset_max(unsigned_shortP_s_30_18_alloc_table_at_L, s_30),
         wcslen(s_30, unsigned_shortP_unsigned_shortM_s_30_18_at_L))))

predicate valid_wstring_or_null(s_31:unsigned_shortP pointer,
 unsigned_shortP_s_31_19_alloc_table_at_L:unsigned_shortP alloc_table,
 unsigned_shortP_unsigned_shortM_s_31_19_at_L:(unsigned_shortP, uint16) memory) =
 ((s_31 = null)
 or valid_wstring(s_31, unsigned_shortP_s_31_19_alloc_table_at_L,
    unsigned_shortP_unsigned_shortM_s_31_19_at_L))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

axiom memcmp_range :
 (forall charP_charM_s2_2_at_L:(charP, int8) memory.
  (forall charP_charM_s1_1_at_L:(charP, int8) memory.
   (forall s1_0_0:charP pointer.
    (forall s2_0_0:charP pointer.
     (forall n_0:int.
      (le_int(sub_int(neg_int((2147483647)), (1)),
       memcmp(s1_0_0, s2_0_0, n_0, charP_charM_s2_2_at_L,
       charP_charM_s1_1_at_L))
      and le_int(memcmp(s1_0_0, s2_0_0, n_0, charP_charM_s2_2_at_L,
                 charP_charM_s1_1_at_L),
          (2147483647))))))))

axiom memcmp_zero :
 (forall charP_charM_s2_2_at_L:(charP, int8) memory.
  (forall charP_charM_s1_1_at_L:(charP, int8) memory.
   (forall s1_1_0:charP pointer.
    (forall s2_1_0:charP pointer.
     (forall n_1:int.
      ((memcmp(s1_1_0, s2_1_0, n_1, charP_charM_s2_2_at_L,
        charP_charM_s1_1_at_L) = (0))
      <-> (forall i:int.
           ((le_int((0), i) and lt_int(i, n_1)) ->
            (integer_of_int8(select(charP_charM_s1_1_at_L, shift(s1_1_0, i))) = 
            integer_of_int8(select(charP_charM_s2_2_at_L, shift(s2_1_0, i))))))))))))

axiom memchr_def :
 (forall charP_charM_s_3_at_L:(charP, int8) memory.
  (forall s_0_0:charP pointer.
   (forall c_0:int.
    (forall n_3:int.
     ((memchr(s_0_0, c_0, n_3, charP_charM_s_3_at_L) = true)
     <-> (exists i_0:int32.
          (le_int((0), integer_of_int32(i_0))
          and (lt_int(integer_of_int32(i_0), n_3)
              and (integer_of_int8(select(charP_charM_s_3_at_L,
                                   shift(s_0_0, integer_of_int32(i_0)))) = c_0)))))))))

axiom memset_def :
 (forall charP_charM_s_1_4_at_L:(charP, int8) memory.
  (forall s_2:charP pointer.
   (forall c_2:int.
    (forall n_5:int.
     ((memset(s_2, c_2, n_5, charP_charM_s_1_4_at_L) = true)
     <-> (forall i_1:int.
          ((le_int((0), i_1) and lt_int(i_1, n_5)) ->
           (integer_of_int8(select(charP_charM_s_1_4_at_L, shift(s_2, i_1))) = c_2))))))))

axiom strlen_pos_or_null :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_4:charP pointer.
   (forall i_2:int.
    ((le_int((0), i_2)
     and (le_int(i_2, (2147483647))
         and ((forall j:int.
               ((le_int((0), j) and lt_int(j, i_2)) ->
                (integer_of_int8(select(charP_charM_s_3_5_at_L,
                                 shift(s_4, j))) <> (0))))
             and (integer_of_int8(select(charP_charM_s_3_5_at_L,
                                  shift(s_4, i_2))) = (0))))) ->
     (strlen(s_4, charP_charM_s_3_5_at_L) = i_2)))))

axiom strlen_neg :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_5:charP pointer.
   ((forall i_3:int.
     ((le_int((0), i_3) and le_int(i_3, (2147483647))) ->
      (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_5, i_3))) <> (0)))) ->
    lt_int(strlen(s_5, charP_charM_s_3_5_at_L), (0)))))

axiom strlen_range :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_6:charP pointer.
   le_int(strlen(s_6, charP_charM_s_3_5_at_L), (2147483647))))

axiom strlen_before_null :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_7:charP pointer.
   (forall i_4:int.
    ((le_int((0), i_4) and lt_int(i_4, strlen(s_7, charP_charM_s_3_5_at_L))) ->
     (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_7, i_4))) <> (0))))))

axiom strlen_at_null :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_8:charP pointer.
   (le_int((0), strlen(s_8, charP_charM_s_3_5_at_L)) ->
    (integer_of_int8(select(charP_charM_s_3_5_at_L,
                     shift(s_8, strlen(s_8, charP_charM_s_3_5_at_L)))) = (0)))))

axiom strlen_not_zero :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_9:charP pointer.
   (forall i_5:int.
    ((le_int((0), i_5)
     and (le_int(i_5, strlen(s_9, charP_charM_s_3_5_at_L))
         and (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_9, i_5))) <> (0)))) ->
     lt_int(i_5, strlen(s_9, charP_charM_s_3_5_at_L))))))

axiom strlen_zero :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_10:charP pointer.
   (forall i_6:int.
    ((le_int((0), i_6)
     and (le_int(i_6, strlen(s_10, charP_charM_s_3_5_at_L))
         and (integer_of_int8(select(charP_charM_s_3_5_at_L,
                              shift(s_10, i_6))) = (0)))) ->
     (i_6 = strlen(s_10, charP_charM_s_3_5_at_L))))))

axiom strlen_sup :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_11:charP pointer.
   (forall i_7:int.
    ((le_int((0), i_7)
     and (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_11, i_7))) = (0))) ->
     (le_int((0), strlen(s_11, charP_charM_s_3_5_at_L))
     and le_int(strlen(s_11, charP_charM_s_3_5_at_L), i_7))))))

axiom strlen_shift :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_12:charP pointer.
   (forall i_8:int.
    ((le_int((0), i_8) and le_int(i_8, strlen(s_12, charP_charM_s_3_5_at_L))) ->
     (strlen(shift(s_12, i_8), charP_charM_s_3_5_at_L) = sub_int(strlen(s_12,
                                                                 charP_charM_s_3_5_at_L),
                                                         i_8))))))

axiom strlen_create :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_13:charP pointer.
   (forall i_9:int.
    ((le_int((0), i_9)
     and (le_int(i_9, (2147483647))
         and (integer_of_int8(select(charP_charM_s_3_5_at_L,
                              shift(s_13, i_9))) = (0)))) ->
     (le_int((0), strlen(s_13, charP_charM_s_3_5_at_L))
     and le_int(strlen(s_13, charP_charM_s_3_5_at_L), i_9))))))

axiom strlen_create_shift :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_14:charP pointer.
   (forall i_10:int.
    (forall k:int.
     ((le_int((0), k)
      and (le_int(k, i_10)
          and (le_int(i_10, (2147483647))
              and (integer_of_int8(select(charP_charM_s_3_5_at_L,
                                   shift(s_14, i_10))) = (0))))) ->
      (le_int((0), strlen(shift(s_14, k), charP_charM_s_3_5_at_L))
      and le_int(strlen(shift(s_14, k), charP_charM_s_3_5_at_L),
          sub_int(i_10, k))))))))

axiom memcmp_strlen_left :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s1_2:charP pointer.
   (forall s2_2:charP pointer.
    (forall n_6:int.
     (((memcmp(s1_2, s2_2, n_6, charP_charM_s_3_5_at_L,
        charP_charM_s_3_5_at_L) = (0))
      and lt_int(strlen(s1_2, charP_charM_s_3_5_at_L), n_6)) ->
      (strlen(s1_2, charP_charM_s_3_5_at_L) = strlen(s2_2,
                                              charP_charM_s_3_5_at_L)))))))

axiom memcmp_strlen_right :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s1_3:charP pointer.
   (forall s2_3:charP pointer.
    (forall n_7:int.
     (((memcmp(s1_3, s2_3, n_7, charP_charM_s_3_5_at_L,
        charP_charM_s_3_5_at_L) = (0))
      and lt_int(strlen(s2_3, charP_charM_s_3_5_at_L), n_7)) ->
      (strlen(s1_3, charP_charM_s_3_5_at_L) = strlen(s2_3,
                                              charP_charM_s_3_5_at_L)))))))

axiom memcmp_strlen_shift_left :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s1_4:charP pointer.
   (forall s2_4:charP pointer.
    (forall k_0:int.
     (forall n_8:int.
      (((memcmp(s1_4, shift(s2_4, k_0), n_8, charP_charM_s_3_5_at_L,
         charP_charM_s_3_5_at_L) = (0))
       and (le_int((0), k_0)
           and lt_int(strlen(s1_4, charP_charM_s_3_5_at_L), n_8))) ->
       (le_int((0), strlen(s2_4, charP_charM_s_3_5_at_L))
       and le_int(strlen(s2_4, charP_charM_s_3_5_at_L),
           add_int(k_0, strlen(s1_4, charP_charM_s_3_5_at_L))))))))))

axiom memcmp_strlen_shift_right :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s1_5:charP pointer.
   (forall s2_5:charP pointer.
    (forall k_1:int.
     (forall n_9:int.
      (((memcmp(shift(s1_5, k_1), s2_5, n_9, charP_charM_s_3_5_at_L,
         charP_charM_s_3_5_at_L) = (0))
       and (le_int((0), k_1)
           and lt_int(strlen(s2_5, charP_charM_s_3_5_at_L), n_9))) ->
       (le_int((0), strlen(s1_5, charP_charM_s_3_5_at_L))
       and le_int(strlen(s1_5, charP_charM_s_3_5_at_L),
           add_int(k_1, strlen(s2_5, charP_charM_s_3_5_at_L))))))))))

axiom strcmp_range :
 (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
  (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
   (forall s1_7:charP pointer.
    (forall s2_7:charP pointer.
     (le_int(sub_int(neg_int((2147483647)), (1)),
      strcmp(s1_7, s2_7, charP_charM_s2_6_7_at_L, charP_charM_s1_6_6_at_L))
     and le_int(strcmp(s1_7, s2_7, charP_charM_s2_6_7_at_L,
                charP_charM_s1_6_6_at_L),
         (2147483647)))))))

axiom strcmp_zero :
 (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
  (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
   (forall s1_8:charP pointer.
    (forall s2_8:charP pointer.
     ((strcmp(s1_8, s2_8, charP_charM_s2_6_7_at_L, charP_charM_s1_6_6_at_L) = (0))
     <-> ((strlen(s1_8, charP_charM_s1_6_6_at_L) = strlen(s2_8,
                                                   charP_charM_s2_6_7_at_L))
         and (forall i_11:int.
              ((le_int((0), i_11)
               and le_int(i_11, strlen(s1_8, charP_charM_s1_6_6_at_L))) ->
               (integer_of_int8(select(charP_charM_s1_6_6_at_L,
                                shift(s1_8, i_11))) = integer_of_int8(
                                                      select(charP_charM_s2_6_7_at_L,
                                                      shift(s2_8, i_11))))))))))))

axiom strncmp_zero :
 (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
  (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
   (forall s1_10:charP pointer.
    (forall s2_10:charP pointer.
     (forall n_11:int.
      ((strncmp(s1_10, s2_10, n_11, charP_charM_s2_9_9_at_L,
        charP_charM_s1_9_8_at_L) = (0))
      <-> ((lt_int(strlen(s1_10, charP_charM_s1_9_8_at_L), n_11)
           and (strcmp(s1_10, s2_10, charP_charM_s2_9_9_at_L,
                charP_charM_s1_9_8_at_L) = (0)))
          or (forall i_12:int.
              ((le_int((0), i_12) and lt_int(i_12, n_11)) ->
               (integer_of_int8(select(charP_charM_s1_9_8_at_L,
                                shift(s1_10, i_12))) = integer_of_int8(
                                                       select(charP_charM_s2_9_9_at_L,
                                                       shift(s2_10, i_12)))))))))))))

axiom strchr_def :
 (forall charP_charM_s_15_10_at_L:(charP, int8) memory.
  (forall s_16:charP pointer.
   (forall c_4:int.
    ((strchr(s_16, c_4, charP_charM_s_15_10_at_L) = true)
    <-> (exists i_13:int.
         (le_int((0), i_13)
         and (le_int(i_13, strlen(s_16, charP_charM_s_15_10_at_L))
             and (integer_of_int8(select(charP_charM_s_15_10_at_L,
                                  shift(s_16, i_13))) = c_4))))))))

axiom wcslen_pos_or_null :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_18:unsigned_shortP pointer.
   (forall i_14:int.
    ((le_int((0), i_14)
     and ((forall j_0:int.
           ((le_int((0), j_0) and lt_int(j_0, i_14)) ->
            (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                               shift(s_18, j_0))) <> (0))))
         and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                                shift(s_18, i_14))) = (0)))) ->
     (wcslen(s_18, unsigned_shortP_unsigned_shortM_s_17_11_at_L) = i_14)))))

axiom wcslen_neg :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_19:unsigned_shortP pointer.
   ((forall i_15:int.
     (le_int((0), i_15) ->
      (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                         shift(s_19, i_15))) <> (0)))) ->
    lt_int(wcslen(s_19, unsigned_shortP_unsigned_shortM_s_17_11_at_L), (0)))))

axiom wcslen_before_null :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_20:unsigned_shortP pointer.
   (forall i_16:int32.
    ((le_int((0), integer_of_int32(i_16))
     and lt_int(integer_of_int32(i_16),
         wcslen(s_20, unsigned_shortP_unsigned_shortM_s_17_11_at_L))) ->
     (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                        shift(s_20, integer_of_int32(i_16)))) <> (0))))))

axiom wcslen_at_null :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_21:unsigned_shortP pointer.
   (le_int((0), wcslen(s_21, unsigned_shortP_unsigned_shortM_s_17_11_at_L)) ->
    (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                       shift(s_21,
                       wcslen(s_21,
                       unsigned_shortP_unsigned_shortM_s_17_11_at_L)))) = (0)))))

axiom wcslen_not_zero :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_22:unsigned_shortP pointer.
   (forall i_17:int32.
    ((le_int((0), integer_of_int32(i_17))
     and (le_int(integer_of_int32(i_17),
          wcslen(s_22, unsigned_shortP_unsigned_shortM_s_17_11_at_L))
         and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                                shift(s_22, integer_of_int32(i_17)))) <> (0)))) ->
     lt_int(integer_of_int32(i_17),
     wcslen(s_22, unsigned_shortP_unsigned_shortM_s_17_11_at_L))))))

axiom wcslen_zero :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_23:unsigned_shortP pointer.
   (forall i_18:int32.
    ((le_int((0), integer_of_int32(i_18))
     and (le_int(integer_of_int32(i_18),
          wcslen(s_23, unsigned_shortP_unsigned_shortM_s_17_11_at_L))
         and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                                shift(s_23, integer_of_int32(i_18)))) = (0)))) ->
     (integer_of_int32(i_18) = wcslen(s_23,
                               unsigned_shortP_unsigned_shortM_s_17_11_at_L))))))

axiom wcslen_sup :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_24:unsigned_shortP pointer.
   (forall i_19:int32.
    ((le_int((0), integer_of_int32(i_19))
     and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                            shift(s_24, integer_of_int32(i_19)))) = (0))) ->
     (le_int((0), wcslen(s_24, unsigned_shortP_unsigned_shortM_s_17_11_at_L))
     and le_int(wcslen(s_24, unsigned_shortP_unsigned_shortM_s_17_11_at_L),
         integer_of_int32(i_19)))))))

axiom wcslen_shift :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_25:unsigned_shortP pointer.
   (forall i_20:int32.
    ((le_int((0), integer_of_int32(i_20))
     and le_int(integer_of_int32(i_20),
         wcslen(s_25, unsigned_shortP_unsigned_shortM_s_17_11_at_L))) ->
     (wcslen(shift(s_25, integer_of_int32(i_20)),
      unsigned_shortP_unsigned_shortM_s_17_11_at_L) = sub_int(wcslen(s_25,
                                                              unsigned_shortP_unsigned_shortM_s_17_11_at_L),
                                                      integer_of_int32(i_20)))))))

axiom wcslen_create :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_26:unsigned_shortP pointer.
   (forall i_21:int32.
    ((le_int((0), integer_of_int32(i_21))
     and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                            shift(s_26, integer_of_int32(i_21)))) = (0))) ->
     (le_int((0), wcslen(s_26, unsigned_shortP_unsigned_shortM_s_17_11_at_L))
     and le_int(wcslen(s_26, unsigned_shortP_unsigned_shortM_s_17_11_at_L),
         integer_of_int32(i_21)))))))

axiom wcslen_create_shift :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_27:unsigned_shortP pointer.
   (forall i_22:int32.
    (forall k_2:int32.
     ((le_int((0), integer_of_int32(k_2))
      and (le_int(integer_of_int32(k_2), integer_of_int32(i_22))
          and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                                 shift(s_27, integer_of_int32(i_22)))) = (0)))) ->
      (le_int((0),
       wcslen(shift(s_27, integer_of_int32(k_2)),
       unsigned_shortP_unsigned_shortM_s_17_11_at_L))
      and le_int(wcslen(shift(s_27, integer_of_int32(k_2)),
                 unsigned_shortP_unsigned_shortM_s_17_11_at_L),
          sub_int(integer_of_int32(i_22), integer_of_int32(k_2)))))))))

axiom wcscmp_zero :
 (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:
  (unsigned_shortP, uint16) memory.
  (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:
   (unsigned_shortP, uint16) memory.
   (forall s1_12:unsigned_shortP pointer.
    (forall s2_12:unsigned_shortP pointer.
     ((wcscmp(s1_12, s2_12, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
       unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = (0))
     <-> ((wcslen(s1_12, unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = 
          wcslen(s2_12, unsigned_shortP_unsigned_shortM_s2_11_13_at_L))
         and (forall i_23:int.
              ((le_int((0), i_23)
               and le_int(i_23,
                   wcslen(s1_12,
                   unsigned_shortP_unsigned_shortM_s1_11_12_at_L))) ->
               (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s1_11_12_at_L,
                                  shift(s1_12, i_23))) = integer_of_uint16(
                                                         select(unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                                                         shift(s2_12, i_23))))))))))))

axiom wcsncmp_zero :
 (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:
  (unsigned_shortP, uint16) memory.
  (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:
   (unsigned_shortP, uint16) memory.
   (forall s1_14:unsigned_shortP pointer.
    (forall s2_14:unsigned_shortP pointer.
     (forall n_13:int.
      ((wcsncmp(s1_14, s2_14, n_13,
        unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
        unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = (0))
      <-> ((lt_int(wcslen(s1_14,
                   unsigned_shortP_unsigned_shortM_s1_13_14_at_L),
            n_13)
           and (wcscmp(s1_14, s2_14,
                unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = (0)))
          or (forall i_24:int.
              ((le_int((0), i_24) and lt_int(i_24, n_13)) ->
               (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s1_13_14_at_L,
                                  shift(s1_14, i_24))) = integer_of_uint16(
                                                         select(unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                                                         shift(s2_14, i_24)))))))))))))

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter __anonstruct_paquet_t_1_alloc_table :
 __anonstruct_paquet_t_1 alloc_table ref

parameter __anonstruct_paquet_t_1_tag_table :
 __anonstruct_paquet_t_1 tag_table ref

parameter alloc_struct___anonstruct_paquet_t_1 :
 n:int ->
  __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table ref ->
   __anonstruct_paquet_t_1_tag_table:__anonstruct_paquet_t_1 tag_table ref ->
    { } __anonstruct_paquet_t_1 pointer
    writes __anonstruct_paquet_t_1_alloc_table,__anonstruct_paquet_t_1_tag_table
    { (strict_valid_struct___anonstruct_paquet_t_1(result, (0),
       sub_int(n, (1)), __anonstruct_paquet_t_1_alloc_table)
      and (alloc_extends(__anonstruct_paquet_t_1_alloc_table@,
           __anonstruct_paquet_t_1_alloc_table)
          and (alloc_fresh(__anonstruct_paquet_t_1_alloc_table@, result, n)
              and instanceof(__anonstruct_paquet_t_1_tag_table, result,
                  __anonstruct_paquet_t_1_tag)))) }

parameter alloc_struct___anonstruct_paquet_t_1_requires :
 n:int ->
  __anonstruct_paquet_t_1_alloc_table:__anonstruct_paquet_t_1 alloc_table ref ->
   __anonstruct_paquet_t_1_tag_table:__anonstruct_paquet_t_1 tag_table ref ->
    { ge_int(n, (0))} __anonstruct_paquet_t_1 pointer
    writes __anonstruct_paquet_t_1_alloc_table,__anonstruct_paquet_t_1_tag_table
    { (strict_valid_struct___anonstruct_paquet_t_1(result, (0),
       sub_int(n, (1)), __anonstruct_paquet_t_1_alloc_table)
      and (alloc_extends(__anonstruct_paquet_t_1_alloc_table@,
           __anonstruct_paquet_t_1_alloc_table)
          and (alloc_fresh(__anonstruct_paquet_t_1_alloc_table@, result, n)
              and instanceof(__anonstruct_paquet_t_1_tag_table, result,
                  __anonstruct_paquet_t_1_tag)))) }

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter unsigned_shortP_alloc_table : unsigned_shortP alloc_table ref

parameter unsigned_shortP_tag_table : unsigned_shortP tag_table ref

parameter alloc_struct_unsigned_shortP :
 n:int ->
  unsigned_shortP_alloc_table:unsigned_shortP alloc_table ref ->
   unsigned_shortP_tag_table:unsigned_shortP tag_table ref ->
    { } unsigned_shortP pointer
    writes unsigned_shortP_alloc_table,unsigned_shortP_tag_table
    { (strict_valid_struct_unsigned_shortP(result, (0), sub_int(n, (1)),
       unsigned_shortP_alloc_table)
      and (alloc_extends(unsigned_shortP_alloc_table@,
           unsigned_shortP_alloc_table)
          and (alloc_fresh(unsigned_shortP_alloc_table@, result, n)
              and instanceof(unsigned_shortP_tag_table, result,
                  unsigned_shortP_tag)))) }

parameter alloc_struct_unsigned_shortP_requires :
 n:int ->
  unsigned_shortP_alloc_table:unsigned_shortP alloc_table ref ->
   unsigned_shortP_tag_table:unsigned_shortP tag_table ref ->
    { ge_int(n, (0))} unsigned_shortP pointer
    writes unsigned_shortP_alloc_table,unsigned_shortP_tag_table
    { (strict_valid_struct_unsigned_shortP(result, (0), sub_int(n, (1)),
       unsigned_shortP_alloc_table)
      and (alloc_extends(unsigned_shortP_alloc_table@,
           unsigned_shortP_alloc_table)
          and (alloc_fresh(unsigned_shortP_alloc_table@, result, n)
              and instanceof(unsigned_shortP_tag_table, result,
                  unsigned_shortP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter recevoir_un_paquet :
 destination:charP pointer ->
  taille:uint32 ->
   paquet_0:__anonstruct_paquet_t_1 pointer ->
    charP_charM_destination_25:(charP, int8) memory ref ->
     charP_message_80_alloc_table:charP alloc_table ->
      charP_destination_25_alloc_table:charP alloc_table ->
       __anonstruct_paquet_t_1_paquet_26_alloc_table:__anonstruct_paquet_t_1 alloc_table ->
        __anonstruct_paquet_t_1_message_paquet_26:(__anonstruct_paquet_t_1, charP pointer) memory ->
         __anonstruct_paquet_t_1_longueur_paquet_26:(__anonstruct_paquet_t_1, uint32) memory ->
          charP_charM_message_80:(charP, int8) memory ->
           { } int32 writes charP_charM_destination_25
           { ((ge_int(integer_of_uint32(taille),
               integer_of_uint32(select(__anonstruct_paquet_t_1_longueur_paquet_26,
                                 paquet_0))) ->
               (JC_<somenum>:
               ((JC_<somenum>: (integer_of_int32(result) = (1)))
               and (JC_<somenum>:
                   not_assigns(charP_destination_25_alloc_table,
                   charP_charM_destination_25@, charP_charM_destination_25,
                   pset_range(pset_singleton(destination), (0),
                   sub_int(integer_of_uint32(taille), (1))))))))
             and (lt_int(integer_of_uint32(taille),
                  integer_of_uint32(select(__anonstruct_paquet_t_1_longueur_paquet_26,
                                    paquet_0))) ->
                  (JC_<somenum>:
                  ((JC_<somenum>: (integer_of_int32(result) = (0)))
                  and (JC_<somenum>:
                      not_assigns(charP_destination_25_alloc_table,
                      charP_charM_destination_25@,
                      charP_charM_destination_25, pset_empty)))))) }

parameter recevoir_un_paquet_requires :
 destination:charP pointer ->
  taille:uint32 ->
   paquet_0:__anonstruct_paquet_t_1 pointer ->
    charP_charM_destination_25:(charP, int8) memory ref ->
     charP_message_80_alloc_table:charP alloc_table ->
      charP_destination_25_alloc_table:charP alloc_table ->
       __anonstruct_paquet_t_1_paquet_26_alloc_table:__anonstruct_paquet_t_1 alloc_table ->
        __anonstruct_paquet_t_1_message_paquet_26:(__anonstruct_paquet_t_1, charP pointer) memory ->
         __anonstruct_paquet_t_1_longueur_paquet_26:(__anonstruct_paquet_t_1, uint32) memory ->
          charP_charM_message_80:(charP, int8) memory ->
           { (JC_<somenum>:
             ((JC_<somenum>:
              le_int(offset_min(__anonstruct_paquet_t_1_paquet_26_alloc_table,
                     paquet_0),
              (0)))
             and ((JC_<somenum>:
                  ge_int(offset_max(__anonstruct_paquet_t_1_paquet_26_alloc_table,
                         paquet_0),
                  (0)))
                 and ((JC_<somenum>:
                      le_int(offset_min(charP_destination_25_alloc_table,
                             destination),
                      (0)))
                     and (JC_<somenum>:
                         ge_int(offset_max(charP_destination_25_alloc_table,
                                destination),
                         sub_int(integer_of_uint32(taille), (1))))))))}
           int32 writes charP_charM_destination_25
           { ((ge_int(integer_of_uint32(taille),
               integer_of_uint32(select(__anonstruct_paquet_t_1_longueur_paquet_26,
                                 paquet_0))) ->
               (JC_<somenum>:
               ((JC_<somenum>: (integer_of_int32(result) = (1)))
               and (JC_<somenum>:
                   not_assigns(charP_destination_25_alloc_table,
                   charP_charM_destination_25@, charP_charM_destination_25,
                   pset_range(pset_singleton(destination), (0),
                   sub_int(integer_of_uint32(taille), (1))))))))
             and (lt_int(integer_of_uint32(taille),
                  integer_of_uint32(select(__anonstruct_paquet_t_1_longueur_paquet_26,
                                    paquet_0))) ->
                  (JC_<somenum>:
                  ((JC_<somenum>: (integer_of_int32(result) = (0)))
                  and (JC_<somenum>:
                      not_assigns(charP_destination_25_alloc_table,
                      charP_charM_destination_25@,
                      charP_charM_destination_25, pset_empty)))))) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter strncpy :
 destination_0:charP pointer ->
  source:charP pointer ->
   taille_0:uint32 ->
    charP_charM_destination_0_21:(charP, int8) memory ref ->
     charP_source_22_alloc_table:charP alloc_table ->
      charP_destination_0_21_alloc_table:charP alloc_table ->
       charP_charM_source_22:(charP, int8) memory ->
        { } charP pointer writes charP_charM_destination_0_21 { true }

parameter strncpy_requires :
 destination_0:charP pointer ->
  source:charP pointer ->
   taille_0:uint32 ->
    charP_charM_destination_0_21:(charP, int8) memory ref ->
     charP_source_22_alloc_table:charP alloc_table ->
      charP_destination_0_21_alloc_table:charP alloc_table ->
       charP_charM_source_22:(charP, int8) memory ->
        { (JC_<somenum>: lt_int(integer_of_uint32(taille_0), (1000000)))}
        charP pointer writes charP_charM_destination_0_21 { true }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

let recevoir_un_paquet_ensures_default =
 fun (destination : charP pointer) (taille : uint32) (paquet_0 : __anonstruct_paquet_t_1 pointer) (charP_charM_destination_25 : (charP, int8) memory ref) (__anonstruct_paquet_t_1_paquet_26_alloc_table : __anonstruct_paquet_t_1 alloc_table) (charP_destination_25_alloc_table : charP alloc_table) (charP_message_80_alloc_table : charP alloc_table) (charP_charM_message_80 : (charP, int8) memory) (__anonstruct_paquet_t_1_longueur_paquet_26 : (__anonstruct_paquet_t_1, uint32) memory) (__anonstruct_paquet_t_1_message_paquet_26 : (__anonstruct_paquet_t_1, charP pointer) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>:
     le_int(offset_min(__anonstruct_paquet_t_1_paquet_26_alloc_table,
            paquet_0),
     (0)))
    and ((JC_<somenum>:
         ge_int(offset_max(__anonstruct_paquet_t_1_paquet_26_alloc_table,
                paquet_0),
         (0)))
        and ((JC_<somenum>:
             le_int(offset_min(charP_destination_25_alloc_table, destination),
             (0)))
            and (JC_<somenum>:
                ge_int(offset_max(charP_destination_25_alloc_table,
                       destination),
                sub_int(integer_of_uint32(taille), (1)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (C_35:
      (C_36:
      begin
        (if ((lt_int_ (integer_of_uint32 taille)) (integer_of_uint32 
                                                   (C_33:
                                                   ((safe_acc_ __anonstruct_paquet_t_1_longueur_paquet_26) paquet_0))))
        then
         (C_32:
         begin
           (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> =
       (let jessie_<somenum> = destination in
       (let jessie_<somenum> =
       (C_34:
       ((safe_acc_ __anonstruct_paquet_t_1_message_paquet_26) paquet_0)) in
       (let jessie_<somenum> = taille in
       (JC_<somenum>:
       (((((((strncpy jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) charP_charM_destination_25) charP_message_80_alloc_table) charP_destination_25_alloc_table) charP_charM_message_80))))) in
       void);
       (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (1))) in void);
       (raise (Return_label_exc void)) end)) with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let recevoir_un_paquet_ensures_echec =
 fun (destination : charP pointer) (taille : uint32) (paquet_0 : __anonstruct_paquet_t_1 pointer) (charP_charM_destination_25 : (charP, int8) memory ref) (__anonstruct_paquet_t_1_paquet_26_alloc_table : __anonstruct_paquet_t_1 alloc_table) (charP_destination_25_alloc_table : charP alloc_table) (charP_message_80_alloc_table : charP alloc_table) (charP_charM_message_80 : (charP, int8) memory) (__anonstruct_paquet_t_1_longueur_paquet_26 : (__anonstruct_paquet_t_1, uint32) memory) (__anonstruct_paquet_t_1_message_paquet_26 : (__anonstruct_paquet_t_1, charP pointer) memory) ->
  { (lt_int(integer_of_uint32(taille),
     integer_of_uint32(select(__anonstruct_paquet_t_1_longueur_paquet_26,
                       paquet_0)))
    and (JC_<somenum>:
        ((JC_<somenum>:
         le_int(offset_min(__anonstruct_paquet_t_1_paquet_26_alloc_table,
                paquet_0),
         (0)))
        and ((JC_<somenum>:
             ge_int(offset_max(__anonstruct_paquet_t_1_paquet_26_alloc_table,
                    paquet_0),
             (0)))
            and ((JC_<somenum>:
                 le_int(offset_min(charP_destination_25_alloc_table,
                        destination),
                 (0)))
                and (JC_<somenum>:
                    ge_int(offset_max(charP_destination_25_alloc_table,
                           destination),
                    sub_int(integer_of_uint32(taille), (1))))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (C_35:
      (C_36:
      begin
        (if ((lt_int_ (integer_of_uint32 taille)) (integer_of_uint32 
                                                   (C_33:
                                                   ((safe_acc_ __anonstruct_paquet_t_1_longueur_paquet_26) paquet_0))))
        then
         (C_32:
         begin
           (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> =
       (let jessie_<somenum> = destination in
       (let jessie_<somenum> =
       (C_34:
       ((safe_acc_ __anonstruct_paquet_t_1_message_paquet_26) paquet_0)) in
       (let jessie_<somenum> = taille in
       (JC_<somenum>:
       (((((((strncpy jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) charP_charM_destination_25) charP_message_80_alloc_table) charP_destination_25_alloc_table) charP_charM_message_80))))) in
       void);
       (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (1))) in void);
       (raise (Return_label_exc void)) end)) with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: (integer_of_int32(result) = (0)))
    and (JC_<somenum>:
        not_assigns(charP_destination_25_alloc_table,
        charP_charM_destination_25@, charP_charM_destination_25, pset_empty)))) }

let recevoir_un_paquet_ensures_succes =
 fun (destination : charP pointer) (taille : uint32) (paquet_0 : __anonstruct_paquet_t_1 pointer) (charP_charM_destination_25 : (charP, int8) memory ref) (__anonstruct_paquet_t_1_paquet_26_alloc_table : __anonstruct_paquet_t_1 alloc_table) (charP_destination_25_alloc_table : charP alloc_table) (charP_message_80_alloc_table : charP alloc_table) (charP_charM_message_80 : (charP, int8) memory) (__anonstruct_paquet_t_1_longueur_paquet_26 : (__anonstruct_paquet_t_1, uint32) memory) (__anonstruct_paquet_t_1_message_paquet_26 : (__anonstruct_paquet_t_1, charP pointer) memory) ->
  { (ge_int(integer_of_uint32(taille),
     integer_of_uint32(select(__anonstruct_paquet_t_1_longueur_paquet_26,
                       paquet_0)))
    and (JC_<somenum>:
        ((JC_<somenum>:
         le_int(offset_min(__anonstruct_paquet_t_1_paquet_26_alloc_table,
                paquet_0),
         (0)))
        and ((JC_<somenum>:
             ge_int(offset_max(__anonstruct_paquet_t_1_paquet_26_alloc_table,
                    paquet_0),
             (0)))
            and ((JC_<somenum>:
                 le_int(offset_min(charP_destination_25_alloc_table,
                        destination),
                 (0)))
                and (JC_<somenum>:
                    ge_int(offset_max(charP_destination_25_alloc_table,
                           destination),
                    sub_int(integer_of_uint32(taille), (1))))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (C_35:
      (C_36:
      begin
        (if ((lt_int_ (integer_of_uint32 taille)) (integer_of_uint32 
                                                   (C_33:
                                                   ((safe_acc_ __anonstruct_paquet_t_1_longueur_paquet_26) paquet_0))))
        then
         (C_32:
         begin
           (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> =
       (let jessie_<somenum> = destination in
       (let jessie_<somenum> =
       (C_34:
       ((safe_acc_ __anonstruct_paquet_t_1_message_paquet_26) paquet_0)) in
       (let jessie_<somenum> = taille in
       (JC_<somenum>:
       (((((((strncpy jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) charP_charM_destination_25) charP_message_80_alloc_table) charP_destination_25_alloc_table) charP_charM_message_80))))) in
       void);
       (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (1))) in void);
       (raise (Return_label_exc void)) end)) with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: (integer_of_int32(result) = (1)))
    and (JC_<somenum>:
        not_assigns(charP_destination_25_alloc_table,
        charP_charM_destination_25@, charP_charM_destination_25,
        pset_range(pset_singleton(destination), (0),
        sub_int(integer_of_uint32(taille), (1))))))) }

let recevoir_un_paquet_safety =
 fun (destination : charP pointer) (taille : uint32) (paquet_0 : __anonstruct_paquet_t_1 pointer) (charP_charM_destination_25 : (charP, int8) memory ref) (__anonstruct_paquet_t_1_paquet_26_alloc_table : __anonstruct_paquet_t_1 alloc_table) (charP_destination_25_alloc_table : charP alloc_table) (charP_message_80_alloc_table : charP alloc_table) (charP_charM_message_80 : (charP, int8) memory) (__anonstruct_paquet_t_1_longueur_paquet_26 : (__anonstruct_paquet_t_1, uint32) memory) (__anonstruct_paquet_t_1_message_paquet_26 : (__anonstruct_paquet_t_1, charP pointer) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>:
     le_int(offset_min(__anonstruct_paquet_t_1_paquet_26_alloc_table,
            paquet_0),
     (0)))
    and ((JC_<somenum>:
         ge_int(offset_max(__anonstruct_paquet_t_1_paquet_26_alloc_table,
                paquet_0),
         (0)))
        and ((JC_<somenum>:
             le_int(offset_min(charP_destination_25_alloc_table, destination),
             (0)))
            and (JC_<somenum>:
                ge_int(offset_max(charP_destination_25_alloc_table,
                       destination),
                sub_int(integer_of_uint32(taille), (1)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (C_35:
      (C_36:
      begin
        (if ((lt_int_ (integer_of_uint32 taille)) (integer_of_uint32 
                                                   (C_33:
                                                   (JC_<somenum>:
                                                   (((acc_ __anonstruct_paquet_t_1_paquet_26_alloc_table) __anonstruct_paquet_t_1_longueur_paquet_26) paquet_0)))))
        then
         (C_32:
         begin
           (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> =
       (let jessie_<somenum> = destination in
       (let jessie_<somenum> =
       (C_34:
       (JC_<somenum>:
       (((acc_ __anonstruct_paquet_t_1_paquet_26_alloc_table) __anonstruct_paquet_t_1_message_paquet_26) paquet_0))) in
       (let jessie_<somenum> = taille in
       (JC_<somenum>:
       (((((((strncpy_requires jessie_<somenum>) jessie_<somenum>) jessie_<somenum>) charP_charM_destination_25) charP_message_80_alloc_table) charP_destination_25_alloc_table) charP_charM_message_80))))) in
       void);
       (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (1))) in void);
       (raise (Return_label_exc void)) end)) with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end)) { true }

let strncpy_ensures_default =
 fun (destination_0 : charP pointer) (source : charP pointer) (taille_0 : uint32) (charP_charM_destination_0_21 : (charP, int8) memory ref) (charP_destination_0_21_alloc_table : charP alloc_table) (charP_source_22_alloc_table : charP alloc_table) (charP_charM_source_22 : (charP, int8) memory) ->
  { (JC_<somenum>: lt_int(integer_of_uint32(taille_0), (1000000))) }
  (let mutable_destination_0 = ref destination_0 in
  (let mutable_source = ref source in
  (let mutable_taille_0 = ref taille_0 in
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let curseur = ref (any_pointer void) in
     (let tmp = ref (any_pointer void) in
     (let tmp_0 = ref (any_int8 void) in
     (let tmp_1 = ref (any_pointer void) in
     (let tmp_2 = ref (any_pointer void) in
     (C_1:
     begin
       (let jessie_<somenum> = (curseur := !mutable_destination_0) in void);
      (if ((gt_int_ (integer_of_uint32 !mutable_taille_0)) (0))
      then
       try
        begin
          (loop_3:
          while true do
          { invariant (JC_<somenum>: true)  }
           begin
             [ { } unit { true } ];
            try
             begin
               (let jessie_<somenum> =
               (C_2:
               (C_4:
               (C_5:
               (C_7:
               (C_9:
               begin
                 (let jessie_<somenum> = (tmp := !curseur) in void);
                (let jessie_<somenum> =
                (curseur := (C_3: ((shift !curseur) (1)))) in void);
                (let jessie_<somenum> = (tmp_1 := !mutable_source) in void);
                (let jessie_<somenum> =
                (mutable_source := (C_6: ((shift !mutable_source) (1)))) in
                void);
                (let jessie_<somenum> =
                (tmp_0 := (C_8: ((safe_acc_ charP_charM_source_22) !tmp_1))) in
                void);
                (C_11:
                (let jessie_<somenum> = !tmp_0 in
                begin
                  (let jessie_<somenum> = !tmp in
                  (((safe_upd_ charP_charM_destination_0_21) jessie_<somenum>) jessie_<somenum>));
                 jessie_<somenum> end)) end))))) in void);
              (if ((neq_int_ (integer_of_int8 !tmp_0)) (0))
              then
               (C_14:
               begin
                 (let jessie_<somenum> =
                 (mutable_taille_0 := (C_13:
                                      (safe_uint32_of_integer_ (C_12:
                                                               ((sub_int 
                                                                 (integer_of_uint32 !mutable_taille_0)) (1)))))) in
                 void);
                (if ((gt_int_ (integer_of_uint32 !mutable_taille_0)) (0))
                then void else (raise (Goto_while_0_break_exc void))) end)
              else (raise (Goto_while_0_break_exc void)));
              (raise (Loop_continue_exc void)) end with
             Loop_continue_exc jessie_<somenum> -> void end end done);
         (raise (Goto_while_0_break_exc void)) end with
        Goto_while_0_break_exc jessie_<somenum> ->
        (while_0_break:
        (C_16:
        begin
          void;
         (let jessie_<somenum> =
         (mutable_source := (C_15: ((shift !mutable_source) (neg_int (1))))) in
         void); void;
         (if ((eq_int_ (integer_of_int32 (C_29:
                                         (safe_int32_of_integer_ (integer_of_int8 
                                                                  (C_28:
                                                                  ((safe_acc_ charP_charM_source_22) !mutable_source))))))) (0))
         then
          (C_19:
          begin
            (let jessie_<somenum> =
            (mutable_taille_0 := (C_18:
                                 (safe_uint32_of_integer_ (C_17:
                                                          ((sub_int (integer_of_uint32 !mutable_taille_0)) (1)))))) in
            void);
           (if ((gt_int_ (integer_of_uint32 !mutable_taille_0)) (0))
           then
            try
             begin
               (loop_4:
               while true do
               { invariant (JC_<somenum>: true)  }
                begin
                  [ { } unit { true } ];
                 try
                  (C_27:
                  begin
                    (let jessie_<somenum> =
                    (C_20:
                    (C_22:
                    begin
                      (let jessie_<somenum> = (tmp_2 := !mutable_destination_0) in
                      void);
                     (let jessie_<somenum> =
                     (mutable_destination_0 := (C_21:
                                               ((shift !mutable_destination_0) (1)))) in
                     void);
                     (C_24:
                     (let jessie_<somenum> = (safe_int8_of_integer_ (0)) in
                     begin
                       (let jessie_<somenum> = !tmp_2 in
                       (((safe_upd_ charP_charM_destination_0_21) jessie_<somenum>) jessie_<somenum>));
                      jessie_<somenum> end)) end)) in void);
                   (let jessie_<somenum> =
                   (mutable_taille_0 := (C_26:
                                        (safe_uint32_of_integer_ (C_25:
                                                                 ((sub_int 
                                                                   (integer_of_uint32 !mutable_taille_0)) (1)))))) in
                   void);
                   (if ((gt_int_ (integer_of_uint32 !mutable_taille_0)) (0))
                   then void else (raise (Goto_while_1_break_exc void)));
                   (raise (Loop_continue_exc void)) end) with
                  Loop_continue_exc jessie_<somenum> -> void end end done);
              (raise (Goto_while_1_break_exc void)) end with
             Goto_while_1_break_exc jessie_<somenum> -> (while_1_break: void) end
           else void) end) else void) end)) end else void);
      (return := !mutable_destination_0); (raise Return) end)))))); absurd 
   end with Return -> !return end))))) { (JC_<somenum>: true) }

let strncpy_safety =
 fun (destination_0 : charP pointer) (source : charP pointer) (taille_0 : uint32) (charP_charM_destination_0_21 : (charP, int8) memory ref) (charP_destination_0_21_alloc_table : charP alloc_table) (charP_source_22_alloc_table : charP alloc_table) (charP_charM_source_22 : (charP, int8) memory) ->
  { (JC_<somenum>: lt_int(integer_of_uint32(taille_0), (1000000))) }
  (let mutable_destination_0 = ref destination_0 in
  (let mutable_source = ref source in
  (let mutable_taille_0 = ref taille_0 in
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let curseur = ref (any_pointer void) in
     (let tmp = ref (any_pointer void) in
     (let tmp_0 = ref (any_int8 void) in
     (let tmp_1 = ref (any_pointer void) in
     (let tmp_2 = ref (any_pointer void) in
     (C_1:
     begin
       (let jessie_<somenum> = (curseur := !mutable_destination_0) in void);
      (if ((gt_int_ (integer_of_uint32 !mutable_taille_0)) (0))
      then
       try
        begin
          (loop_1:
          while true do
          { invariant (JC_<somenum>: true)  }
           begin
             [ { } unit { true } ];
            try
             begin
               (let jessie_<somenum> =
               (C_2:
               (C_4:
               (C_5:
               (C_7:
               (C_9:
               begin
                 (let jessie_<somenum> = (tmp := !curseur) in void);
                (let jessie_<somenum> =
                (curseur := (C_3: ((shift !curseur) (1)))) in void);
                (let jessie_<somenum> = (tmp_1 := !mutable_source) in void);
                (let jessie_<somenum> =
                (mutable_source := (C_6: ((shift !mutable_source) (1)))) in
                void);
                (let jessie_<somenum> =
                (tmp_0 := (C_8:
                          (JC_<somenum>:
                          (((acc_ charP_source_22_alloc_table) charP_charM_source_22) !tmp_1)))) in
                void);
                (C_11:
                (let jessie_<somenum> = !tmp_0 in
                begin
                  (let jessie_<somenum> = !tmp in
                  (JC_<somenum>:
                  ((((upd_ charP_destination_0_21_alloc_table) charP_charM_destination_0_21) jessie_<somenum>) jessie_<somenum>)));
                 jessie_<somenum> end)) end))))) in void);
              (if ((neq_int_ (integer_of_int8 !tmp_0)) (0))
              then
               (C_14:
               begin
                 (let jessie_<somenum> =
                 (mutable_taille_0 := (C_13:
                                      (JC_<somenum>:
                                      (uint32_of_integer_ (C_12:
                                                          ((sub_int (integer_of_uint32 !mutable_taille_0)) (1))))))) in
                 void);
                (if ((gt_int_ (integer_of_uint32 !mutable_taille_0)) (0))
                then void else (raise (Goto_while_0_break_exc void))) end)
              else (raise (Goto_while_0_break_exc void)));
              (raise (Loop_continue_exc void)) end with
             Loop_continue_exc jessie_<somenum> -> void end end done);
         (raise (Goto_while_0_break_exc void)) end with
        Goto_while_0_break_exc jessie_<somenum> ->
        (while_0_break:
        (C_16:
        begin
          void;
         (let jessie_<somenum> =
         (mutable_source := (C_15: ((shift !mutable_source) (neg_int (1))))) in
         void); void;
         (if ((eq_int_ (integer_of_int32 (C_29:
                                         (JC_<somenum>:
                                         (int32_of_integer_ (integer_of_int8 
                                                             (C_28:
                                                             (JC_<somenum>:
                                                             (((acc_ charP_source_22_alloc_table) charP_charM_source_22) !mutable_source))))))))) (0))
         then
          (C_19:
          begin
            (let jessie_<somenum> =
            (mutable_taille_0 := (C_18:
                                 (JC_<somenum>:
                                 (uint32_of_integer_ (C_17:
                                                     ((sub_int (integer_of_uint32 !mutable_taille_0)) (1))))))) in
            void);
           (if ((gt_int_ (integer_of_uint32 !mutable_taille_0)) (0))
           then
            try
             begin
               (loop_2:
               while true do
               { invariant (JC_<somenum>: true)  }
                begin
                  [ { } unit { true } ];
                 try
                  (C_27:
                  begin
                    (let jessie_<somenum> =
                    (C_20:
                    (C_22:
                    begin
                      (let jessie_<somenum> = (tmp_2 := !mutable_destination_0) in
                      void);
                     (let jessie_<somenum> =
                     (mutable_destination_0 := (C_21:
                                               ((shift !mutable_destination_0) (1)))) in
                     void);
                     (C_24:
                     (let jessie_<somenum> = (safe_int8_of_integer_ (0)) in
                     begin
                       (let jessie_<somenum> = !tmp_2 in
                       (JC_<somenum>:
                       ((((upd_ charP_destination_0_21_alloc_table) charP_charM_destination_0_21) jessie_<somenum>) jessie_<somenum>)));
                      jessie_<somenum> end)) end)) in void);
                   (let jessie_<somenum> =
                   (mutable_taille_0 := (C_26:
                                        (JC_<somenum>:
                                        (uint32_of_integer_ (C_25:
                                                            ((sub_int 
                                                              (integer_of_uint32 !mutable_taille_0)) (1))))))) in
                   void);
                   (if ((gt_int_ (integer_of_uint32 !mutable_taille_0)) (0))
                   then void else (raise (Goto_while_1_break_exc void)));
                   (raise (Loop_continue_exc void)) end) with
                  Loop_continue_exc jessie_<somenum> -> void end end done);
              (raise (Goto_while_1_break_exc void)) end with
             Goto_while_1_break_exc jessie_<somenum> -> (while_1_break: void) end
           else void) end) else void) end)) end else void);
      (return := !mutable_destination_0); (raise Return) end)))))); absurd 
   end with Return -> !return end))))) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C forum_cifre.jessie --quiet -f forum_cifre.makefile project
why --project [...] why/forum_cifre.why
<project name="forum_cifre" context="why/forum_cifre_ctx.why">
  <function name="Function strncpy">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/forum_cifre_po10.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "36" begin = "24" end = "33"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/forum_cifre_po11.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "36" begin = "24" end = "33"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/forum_cifre_po12.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.jessie/forum_cifre.jc" line = "427" begin = "27" end = "53"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/forum_cifre_po13.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.jessie/forum_cifre.jc" line = "427" begin = "27" end = "53"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/forum_cifre_po14.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "36" begin = "38" end = "46"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/forum_cifre_po15.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "36" begin = "38" end = "46"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/forum_cifre_po16.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "38" begin = "9" end = "18"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/forum_cifre_po17.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "38" begin = "9" end = "18"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/forum_cifre_po18.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "38" begin = "9" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/forum_cifre_po19.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "38" begin = "9" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/forum_cifre_po20.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "38" begin = "31" end = "39"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/forum_cifre_po21.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "38" begin = "31" end = "39"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/forum_cifre_po22.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.jessie/forum_cifre.jc" line = "454" begin = "36" end = "60"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/forum_cifre_po23.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.jessie/forum_cifre.jc" line = "454" begin = "36" end = "60"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/forum_cifre_po24.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "41" begin = "14" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/forum_cifre_po25.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "41" begin = "14" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function recevoir_un_paquet">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/forum_cifre_po5.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "59" begin = "16" end = "32"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/forum_cifre_po6.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "59" begin = "16" end = "32"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/forum_cifre_po7.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "60" begin = "24" end = "39"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/forum_cifre_po8.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "60" begin = "24" end = "39"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/forum_cifre_po9.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.jessie/forum_cifre.jc" line = "495" begin = "14" end = "67"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    </behavior>
    <behavior name="Behavior `succes'">
    <goal why_file="why/forum_cifre_po3.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "55" begin = "14" end = "26"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/forum_cifre_po4.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "57" begin = "11" end = "29"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Behavior `echec'">
    <goal why_file="why/forum_cifre_po1.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "51" begin = "14" end = "26"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/forum_cifre_po2.why">
      <location file = "PPCHOME/tests/jessie/forum_cifre.c" line = "57" begin = "11" end = "29"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s2) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s3))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type __anonstruct_paquet_t_1

type charP

type int32

type int8

type padding

type uint16

type uint32

type unsigned_shortP

type voidP

logic __anonstruct_paquet_t_1_tag : __anonstruct_paquet_t_1 tag_id

axiom __anonstruct_paquet_t_1_int:
  (int_of_tag(__anonstruct_paquet_t_1_tag) = 1)

logic __anonstruct_paquet_t_1_of_pointer_address : unit pointer -> __anonstruct_paquet_t_1 pointer

axiom __anonstruct_paquet_t_1_of_pointer_address_of_pointer_addr:
  (forall p:__anonstruct_paquet_t_1 pointer.
    (p = __anonstruct_paquet_t_1_of_pointer_address(pointer_address(p))))

axiom __anonstruct_paquet_t_1_parenttag_bottom:
  parenttag(__anonstruct_paquet_t_1_tag, bottom_tag)

axiom __anonstruct_paquet_t_1_tags:
  (forall x:__anonstruct_paquet_t_1 pointer.
    (forall __anonstruct_paquet_t_1_tag_table:__anonstruct_paquet_t_1 tag_table.
      instanceof(__anonstruct_paquet_t_1_tag_table, x,
      __anonstruct_paquet_t_1_tag)))

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint16 : uint16 -> int

predicate eq_uint16(x: uint16, y: uint16) =
  (integer_of_uint16(x) = integer_of_uint16(y))

logic integer_of_uint32 : uint32 -> int

predicate eq_uint32(x: uint32, y: uint32) =
  (integer_of_uint32(x) = integer_of_uint32(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32.
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8. ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct___anonstruct_paquet_t_1(p: __anonstruct_paquet_t_1 pointer,
  a: int,
  __anonstruct_paquet_t_1_alloc_table: __anonstruct_paquet_t_1 alloc_table) =
  (offset_min(__anonstruct_paquet_t_1_alloc_table, p) <= a)

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_unsigned_shortP(p: unsigned_shortP pointer,
  a: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  (offset_min(unsigned_shortP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

function maximum(i_26: int, j_2: int) : int = ite(lt_int_bool(i_26, j_2),
  j_2, i_26)

logic memchr : charP pointer, int, int, (charP, int8) memory -> bool

logic memcmp : charP pointer, charP pointer, int, (charP, int8) memory,
(charP, int8) memory -> int

logic memset : charP pointer, int, int, (charP, int8) memory -> bool

function minimum(i_25: int, j_1: int) : int = ite(lt_int_bool(i_25, j_1),
  i_25, j_1)

axiom no_assign_memchr_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s_3_at_L:(charP, int8) memory.
          (forall n_2:int.
            (forall c:int.
              (forall s_0:charP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s_0), 0,
                  (n_2 - 1))) and not_assigns(tmpalloc, charP_charM_s_3_at_L,
                  tmpmem, tmp)) ->
                 (memchr(s_0, c, n_2, charP_charM_s_3_at_L) = memchr(s_0, c,
                 n_2, tmpmem))))))))))

axiom no_assign_memcmp_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_1_at_L:(charP, int8) memory.
          (forall charP_charM_s2_2_at_L:(charP, int8) memory.
            (forall n:int.
              (forall s2_1:charP pointer.
                (forall s1_1:charP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s2_1), 0,
                    (n - 1))) and not_assigns(tmpalloc,
                    charP_charM_s2_2_at_L, tmpmem, tmp)) ->
                   (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
                   charP_charM_s1_1_at_L) = memcmp(s1_1, s2_1, n, tmpmem,
                   charP_charM_s1_1_at_L)))))))))))

axiom no_assign_memcmp_1:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_1_at_L:(charP, int8) memory.
          (forall charP_charM_s2_2_at_L:(charP, int8) memory.
            (forall n:int.
              (forall s2_1:charP pointer.
                (forall s1_1:charP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s1_1), 0,
                    (n - 1))) and not_assigns(tmpalloc,
                    charP_charM_s1_1_at_L, tmpmem, tmp)) ->
                   (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
                   charP_charM_s1_1_at_L) = memcmp(s1_1, s2_1, n,
                   charP_charM_s2_2_at_L, tmpmem)))))))))))

axiom no_assign_memset_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s_1_4_at_L:(charP, int8) memory.
          (forall n_4:int.
            (forall c_1:int.
              (forall s_1:charP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s_1), 0,
                  (n_4 - 1))) and not_assigns(tmpalloc,
                  charP_charM_s_1_4_at_L, tmpmem, tmp)) ->
                 (memset(s_1, c_1, n_4, charP_charM_s_1_4_at_L) = memset(s_1,
                 c_1, n_4, tmpmem))))))))))

logic strlen : charP pointer, (charP, int8) memory -> int

logic strchr : charP pointer, int, (charP, int8) memory -> bool

axiom no_assign_strchr_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s_15_10_at_L:(charP, int8) memory.
          (forall c_3:int.
            (forall s_15:charP pointer.
              ((pset_disjoint(tmp, pset_range(pset_singleton(s_15), 0,
                strlen(s_15, charP_charM_s_15_10_at_L))) and
                not_assigns(tmpalloc, charP_charM_s_15_10_at_L, tmpmem, tmp)) ->
               (strchr(s_15, c_3, charP_charM_s_15_10_at_L) = strchr(s_15,
               c_3, tmpmem)))))))))

logic strcmp : charP pointer, charP pointer, (charP, int8) memory, (charP,
int8) memory -> int

axiom no_assign_strcmp_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
          (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
            (forall s2_6:charP pointer.
              (forall s1_6:charP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s2_6), 0,
                  strlen(s2_6, charP_charM_s2_6_7_at_L))) and
                  not_assigns(tmpalloc, charP_charM_s2_6_7_at_L, tmpmem, tmp)) ->
                 (strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L,
                 charP_charM_s1_6_6_at_L) = strcmp(s1_6, s2_6, tmpmem,
                 charP_charM_s1_6_6_at_L))))))))))

axiom no_assign_strcmp_1:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
          (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
            (forall s2_6:charP pointer.
              (forall s1_6:charP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s1_6), 0,
                  strlen(s1_6, charP_charM_s1_6_6_at_L))) and
                  not_assigns(tmpalloc, charP_charM_s1_6_6_at_L, tmpmem, tmp)) ->
                 (strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L,
                 charP_charM_s1_6_6_at_L) = strcmp(s1_6, s2_6,
                 charP_charM_s2_6_7_at_L, tmpmem))))))))))

axiom no_assign_strlen_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
          (forall s_3:charP pointer.
            ((pset_disjoint(tmp, pset_range_right(pset_singleton(s_3),
              0)) and not_assigns(tmpalloc, charP_charM_s_3_5_at_L, tmpmem,
              tmp)) ->
             (strlen(s_3, charP_charM_s_3_5_at_L) = strlen(s_3, tmpmem))))))))

logic strncmp : charP pointer, charP pointer, int, (charP, int8) memory,
(charP, int8) memory -> int

axiom no_assign_strncmp_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
          (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
            (forall n_10:int.
              (forall s2_9:charP pointer.
                (forall s1_9:charP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s2_9), 0,
                    (n_10 - 1))) and not_assigns(tmpalloc,
                    charP_charM_s2_9_9_at_L, tmpmem, tmp)) ->
                   (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_9_at_L,
                   charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                   tmpmem, charP_charM_s1_9_8_at_L)))))))))))

axiom no_assign_strncmp_1:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
          (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
            (forall n_10:int.
              (forall s2_9:charP pointer.
                (forall s1_9:charP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s1_9), 0,
                    (n_10 - 1))) and not_assigns(tmpalloc,
                    charP_charM_s1_9_8_at_L, tmpmem, tmp)) ->
                   (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_9_at_L,
                   charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                   charP_charM_s2_9_9_at_L, tmpmem)))))))))))

logic wcslen : unsigned_shortP pointer, (unsigned_shortP,
uint16) memory -> int

logic wcscmp : unsigned_shortP pointer, unsigned_shortP pointer,
(unsigned_shortP, uint16) memory, (unsigned_shortP, uint16) memory -> int

axiom no_assign_wcscmp_0:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:(unsigned_shortP,
          uint16) memory.
          (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:(unsigned_shortP,
            uint16) memory.
            (forall s2_11:unsigned_shortP pointer.
              (forall s1_11:unsigned_shortP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s2_11), 0,
                  wcslen(s2_11,
                  unsigned_shortP_unsigned_shortM_s2_11_13_at_L))) and
                  not_assigns(tmpalloc,
                  unsigned_shortP_unsigned_shortM_s2_11_13_at_L, tmpmem, tmp)) ->
                 (wcscmp(s1_11, s2_11,
                 unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                 unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
                 s2_11, tmpmem,
                 unsigned_shortP_unsigned_shortM_s1_11_12_at_L))))))))))

axiom no_assign_wcscmp_1:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:(unsigned_shortP,
          uint16) memory.
          (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:(unsigned_shortP,
            uint16) memory.
            (forall s2_11:unsigned_shortP pointer.
              (forall s1_11:unsigned_shortP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s1_11), 0,
                  wcslen(s1_11,
                  unsigned_shortP_unsigned_shortM_s1_11_12_at_L))) and
                  not_assigns(tmpalloc,
                  unsigned_shortP_unsigned_shortM_s1_11_12_at_L, tmpmem, tmp)) ->
                 (wcscmp(s1_11, s2_11,
                 unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                 unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
                 s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                 tmpmem))))))))))

axiom no_assign_wcslen_0:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
          uint16) memory.
          (forall s_17:unsigned_shortP pointer.
            ((pset_disjoint(tmp, pset_range_right(pset_singleton(s_17),
              0)) and not_assigns(tmpalloc,
              unsigned_shortP_unsigned_shortM_s_17_11_at_L, tmpmem, tmp)) ->
             (wcslen(s_17,
             unsigned_shortP_unsigned_shortM_s_17_11_at_L) = wcslen(s_17,
             tmpmem))))))))

logic wcsncmp : unsigned_shortP pointer, unsigned_shortP pointer, int,
(unsigned_shortP, uint16) memory, (unsigned_shortP, uint16) memory -> int

axiom no_assign_wcsncmp_0:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:(unsigned_shortP,
          uint16) memory.
          (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:(unsigned_shortP,
            uint16) memory.
            (forall n_12:int.
              (forall s2_13:unsigned_shortP pointer.
                (forall s1_13:unsigned_shortP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s2_13), 0,
                    (n_12 - 1))) and not_assigns(tmpalloc,
                    unsigned_shortP_unsigned_shortM_s2_13_15_at_L, tmpmem,
                    tmp)) ->
                   (wcsncmp(s1_13, s2_13, n_12,
                   unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                   unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                   s2_13, n_12, tmpmem,
                   unsigned_shortP_unsigned_shortM_s1_13_14_at_L)))))))))))

axiom no_assign_wcsncmp_1:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:(unsigned_shortP,
          uint16) memory.
          (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:(unsigned_shortP,
            uint16) memory.
            (forall n_12:int.
              (forall s2_13:unsigned_shortP pointer.
                (forall s1_13:unsigned_shortP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s1_13), 0,
                    (n_12 - 1))) and not_assigns(tmpalloc,
                    unsigned_shortP_unsigned_shortM_s1_13_14_at_L, tmpmem,
                    tmp)) ->
                   (wcsncmp(s1_13, s2_13, n_12,
                   unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                   unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                   s2_13, n_12,
                   unsigned_shortP_unsigned_shortM_s2_13_15_at_L, tmpmem)))))))))))

axiom no_update_memchr_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s_3_at_L:(charP, int8) memory.
        (forall n_2:int.
          (forall c:int.
            (forall s_0:charP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s_0), 0,
               (n_2 - 1)))) -> (memchr(s_0, c, n_2,
               charP_charM_s_3_at_L) = memchr(s_0, c, n_2,
               store(charP_charM_s_3_at_L, tmp, tmpval))))))))))

axiom no_update_memcmp_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_1_at_L:(charP, int8) memory.
        (forall charP_charM_s2_2_at_L:(charP, int8) memory.
          (forall n:int.
            (forall s2_1:charP pointer.
              (forall s1_1:charP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s2_1), 0,
                 (n - 1)))) -> (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
                 charP_charM_s1_1_at_L) = memcmp(s1_1, s2_1, n,
                 store(charP_charM_s2_2_at_L, tmp, tmpval),
                 charP_charM_s1_1_at_L))))))))))

axiom no_update_memcmp_1:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_1_at_L:(charP, int8) memory.
        (forall charP_charM_s2_2_at_L:(charP, int8) memory.
          (forall n:int.
            (forall s2_1:charP pointer.
              (forall s1_1:charP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s1_1), 0,
                 (n - 1)))) -> (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
                 charP_charM_s1_1_at_L) = memcmp(s1_1, s2_1, n,
                 charP_charM_s2_2_at_L, store(charP_charM_s1_1_at_L, tmp,
                 tmpval)))))))))))

axiom no_update_memset_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s_1_4_at_L:(charP, int8) memory.
        (forall n_4:int.
          (forall c_1:int.
            (forall s_1:charP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s_1), 0,
               (n_4 - 1)))) -> (memset(s_1, c_1, n_4,
               charP_charM_s_1_4_at_L) = memset(s_1, c_1, n_4,
               store(charP_charM_s_1_4_at_L, tmp, tmpval))))))))))

axiom no_update_strchr_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s_15_10_at_L:(charP, int8) memory.
        (forall c_3:int.
          (forall s_15:charP pointer.
            ((not in_pset(tmp, pset_range(pset_singleton(s_15), 0,
             strlen(s_15, charP_charM_s_15_10_at_L)))) -> (strchr(s_15, c_3,
             charP_charM_s_15_10_at_L) = strchr(s_15, c_3,
             store(charP_charM_s_15_10_at_L, tmp, tmpval)))))))))

axiom no_update_strcmp_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
        (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
          (forall s2_6:charP pointer.
            (forall s1_6:charP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s2_6), 0,
               strlen(s2_6, charP_charM_s2_6_7_at_L)))) -> (strcmp(s1_6,
               s2_6, charP_charM_s2_6_7_at_L,
               charP_charM_s1_6_6_at_L) = strcmp(s1_6, s2_6,
               store(charP_charM_s2_6_7_at_L, tmp, tmpval),
               charP_charM_s1_6_6_at_L)))))))))

axiom no_update_strcmp_1:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
        (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
          (forall s2_6:charP pointer.
            (forall s1_6:charP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s1_6), 0,
               strlen(s1_6, charP_charM_s1_6_6_at_L)))) -> (strcmp(s1_6,
               s2_6, charP_charM_s2_6_7_at_L,
               charP_charM_s1_6_6_at_L) = strcmp(s1_6, s2_6,
               charP_charM_s2_6_7_at_L, store(charP_charM_s1_6_6_at_L, tmp,
               tmpval))))))))))

axiom no_update_strlen_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
        (forall s_3:charP pointer.
          ((not in_pset(tmp, pset_range_right(pset_singleton(s_3), 0))) ->
           (strlen(s_3, charP_charM_s_3_5_at_L) = strlen(s_3,
           store(charP_charM_s_3_5_at_L, tmp, tmpval))))))))

axiom no_update_strncmp_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
        (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
          (forall n_10:int.
            (forall s2_9:charP pointer.
              (forall s1_9:charP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s2_9), 0,
                 (n_10 - 1)))) -> (strncmp(s1_9, s2_9, n_10,
                 charP_charM_s2_9_9_at_L,
                 charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                 store(charP_charM_s2_9_9_at_L, tmp, tmpval),
                 charP_charM_s1_9_8_at_L))))))))))

axiom no_update_strncmp_1:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
        (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
          (forall n_10:int.
            (forall s2_9:charP pointer.
              (forall s1_9:charP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s1_9), 0,
                 (n_10 - 1)))) -> (strncmp(s1_9, s2_9, n_10,
                 charP_charM_s2_9_9_at_L,
                 charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                 charP_charM_s2_9_9_at_L, store(charP_charM_s1_9_8_at_L, tmp,
                 tmpval)))))))))))

axiom no_update_wcscmp_0:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:(unsigned_shortP,
        uint16) memory.
        (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:(unsigned_shortP,
          uint16) memory.
          (forall s2_11:unsigned_shortP pointer.
            (forall s1_11:unsigned_shortP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s2_11), 0,
               wcslen(s2_11,
               unsigned_shortP_unsigned_shortM_s2_11_13_at_L)))) ->
               (wcscmp(s1_11, s2_11,
               unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
               unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
               s2_11, store(unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
               tmp, tmpval), unsigned_shortP_unsigned_shortM_s1_11_12_at_L)))))))))

axiom no_update_wcscmp_1:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:(unsigned_shortP,
        uint16) memory.
        (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:(unsigned_shortP,
          uint16) memory.
          (forall s2_11:unsigned_shortP pointer.
            (forall s1_11:unsigned_shortP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s1_11), 0,
               wcslen(s1_11,
               unsigned_shortP_unsigned_shortM_s1_11_12_at_L)))) ->
               (wcscmp(s1_11, s2_11,
               unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
               unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
               s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
               store(unsigned_shortP_unsigned_shortM_s1_11_12_at_L, tmp,
               tmpval))))))))))

axiom no_update_wcslen_0:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
        uint16) memory.
        (forall s_17:unsigned_shortP pointer.
          ((not in_pset(tmp, pset_range_right(pset_singleton(s_17), 0))) ->
           (wcslen(s_17,
           unsigned_shortP_unsigned_shortM_s_17_11_at_L) = wcslen(s_17,
           store(unsigned_shortP_unsigned_shortM_s_17_11_at_L, tmp, tmpval))))))))

axiom no_update_wcsncmp_0:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:(unsigned_shortP,
        uint16) memory.
        (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:(unsigned_shortP,
          uint16) memory.
          (forall n_12:int.
            (forall s2_13:unsigned_shortP pointer.
              (forall s1_13:unsigned_shortP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s2_13), 0,
                 (n_12 - 1)))) -> (wcsncmp(s1_13, s2_13, n_12,
                 unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                 unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                 s2_13, n_12,
                 store(unsigned_shortP_unsigned_shortM_s2_13_15_at_L, tmp,
                 tmpval), unsigned_shortP_unsigned_shortM_s1_13_14_at_L))))))))))

axiom no_update_wcsncmp_1:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:(unsigned_shortP,
        uint16) memory.
        (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:(unsigned_shortP,
          uint16) memory.
          (forall n_12:int.
            (forall s2_13:unsigned_shortP pointer.
              (forall s1_13:unsigned_shortP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s1_13), 0,
                 (n_12 - 1)))) -> (wcsncmp(s1_13, s2_13, n_12,
                 unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                 unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                 s2_13, n_12, unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                 store(unsigned_shortP_unsigned_shortM_s1_13_14_at_L, tmp,
                 tmpval)))))))))))

predicate valid_string(s_28: charP pointer,
  charP_s_28_16_alloc_table_at_L: charP alloc_table,
  charP_charM_s_28_16_at_L: (charP, int8) memory) =
  ((0 <= strlen(s_28, charP_charM_s_28_16_at_L)) and
   ((offset_min(charP_s_28_16_alloc_table_at_L, s_28) <= 0) and
    (offset_max(charP_s_28_16_alloc_table_at_L, s_28) >= strlen(s_28,
    charP_charM_s_28_16_at_L))))

predicate paquet_bien_forme(paquet: __anonstruct_paquet_t_1 pointer,
  charP_message_75_alloc_table: charP alloc_table,
  __anonstruct_paquet_t_1_message_paquet_20: (__anonstruct_paquet_t_1,
  charP pointer) memory,
  __anonstruct_paquet_t_1_longueur_paquet_20: (__anonstruct_paquet_t_1,
  uint32) memory, charP_charM_message_75: (charP, int8) memory) =
  ((offset_min(charP_message_75_alloc_table,
   select(__anonstruct_paquet_t_1_message_paquet_20, paquet)) <= 0) and
   ((offset_max(charP_message_75_alloc_table,
    select(__anonstruct_paquet_t_1_message_paquet_20,
    paquet)) >= (integer_of_uint32(select(__anonstruct_paquet_t_1_longueur_paquet_20,
    paquet)) - 1)) and
    valid_string(select(__anonstruct_paquet_t_1_message_paquet_20, paquet),
    charP_message_75_alloc_table, charP_charM_message_75)))

axiom pointer_addr_of___anonstruct_paquet_t_1_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(__anonstruct_paquet_t_1_of_pointer_address(p))))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic unsigned_shortP_of_pointer_address : unit pointer -> unsigned_shortP pointer

axiom pointer_addr_of_unsigned_shortP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_shortP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct___anonstruct_paquet_t_1(p: __anonstruct_paquet_t_1 pointer,
  b: int,
  __anonstruct_paquet_t_1_alloc_table: __anonstruct_paquet_t_1 alloc_table) =
  (offset_max(__anonstruct_paquet_t_1_alloc_table, p) >= b)

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_unsigned_shortP(p: unsigned_shortP pointer,
  b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  (offset_max(unsigned_shortP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root___anonstruct_paquet_t_1(p: __anonstruct_paquet_t_1 pointer,
  a: int, b: int,
  __anonstruct_paquet_t_1_alloc_table: __anonstruct_paquet_t_1 alloc_table) =
  ((offset_min(__anonstruct_paquet_t_1_alloc_table, p) = a) and
   (offset_max(__anonstruct_paquet_t_1_alloc_table, p) = b))

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_unsigned_shortP(p: unsigned_shortP pointer,
  a: int, b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  ((offset_min(unsigned_shortP_alloc_table, p) = a) and
   (offset_max(unsigned_shortP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct___anonstruct_paquet_t_1(p: __anonstruct_paquet_t_1 pointer,
  a: int, b: int,
  __anonstruct_paquet_t_1_alloc_table: __anonstruct_paquet_t_1 alloc_table) =
  ((offset_min(__anonstruct_paquet_t_1_alloc_table, p) = a) and
   (offset_max(__anonstruct_paquet_t_1_alloc_table, p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_unsigned_shortP(p: unsigned_shortP pointer,
  a: int, b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  ((offset_min(unsigned_shortP_alloc_table, p) = a) and
   (offset_max(unsigned_shortP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint16_of_integer : int -> uint16

axiom uint16_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 65535)) ->
     (integer_of_uint16(uint16_of_integer(x)) = x)))

axiom uint16_extensionality:
  (forall x:uint16.
    (forall y:uint16.
      ((integer_of_uint16(x) = integer_of_uint16(y)) -> (x = y))))

axiom uint16_range:
  (forall x:uint16.
    ((0 <= integer_of_uint16(x)) and (integer_of_uint16(x) <= 65535)))

logic uint32_of_integer : int -> uint32

axiom uint32_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 4294967295)) ->
     (integer_of_uint32(uint32_of_integer(x)) = x)))

axiom uint32_extensionality:
  (forall x:uint32.
    (forall y:uint32.
      ((integer_of_uint32(x) = integer_of_uint32(y)) -> (x = y))))

axiom uint32_range:
  (forall x:uint32.
    ((0 <= integer_of_uint32(x)) and (integer_of_uint32(x) <= 4294967295)))

logic unsigned_shortP_tag : unsigned_shortP tag_id

axiom unsigned_shortP_int: (int_of_tag(unsigned_shortP_tag) = 1)

axiom unsigned_shortP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_shortP pointer.
    (p = unsigned_shortP_of_pointer_address(pointer_address(p))))

axiom unsigned_shortP_parenttag_bottom: parenttag(unsigned_shortP_tag,
  bottom_tag)

axiom unsigned_shortP_tags:
  (forall x:unsigned_shortP pointer.
    (forall unsigned_shortP_tag_table:unsigned_shortP tag_table.
      instanceof(unsigned_shortP_tag_table, x, unsigned_shortP_tag)))

predicate valid_root___anonstruct_paquet_t_1(p: __anonstruct_paquet_t_1 pointer,
  a: int, b: int,
  __anonstruct_paquet_t_1_alloc_table: __anonstruct_paquet_t_1 alloc_table) =
  ((offset_min(__anonstruct_paquet_t_1_alloc_table, p) <= a) and
   (offset_max(__anonstruct_paquet_t_1_alloc_table, p) >= b))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_unsigned_shortP(p: unsigned_shortP pointer, a: int,
  b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  ((offset_min(unsigned_shortP_alloc_table, p) <= a) and
   (offset_max(unsigned_shortP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_string_or_null(s_29: charP pointer,
  charP_s_29_17_alloc_table_at_L: charP alloc_table,
  charP_charM_s_29_17_at_L: (charP, int8) memory) =
  ((s_29 = null) or valid_string(s_29, charP_s_29_17_alloc_table_at_L,
   charP_charM_s_29_17_at_L))

predicate valid_struct___anonstruct_paquet_t_1(p: __anonstruct_paquet_t_1 pointer,
  a: int, b: int,
  __anonstruct_paquet_t_1_alloc_table: __anonstruct_paquet_t_1 alloc_table) =
  ((offset_min(__anonstruct_paquet_t_1_alloc_table, p) <= a) and
   (offset_max(__anonstruct_paquet_t_1_alloc_table, p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_unsigned_shortP(p: unsigned_shortP pointer, a: int,
  b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  ((offset_min(unsigned_shortP_alloc_table, p) <= a) and
   (offset_max(unsigned_shortP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_wstring(s_30: unsigned_shortP pointer,
  unsigned_shortP_s_30_18_alloc_table_at_L: unsigned_shortP alloc_table,
  unsigned_shortP_unsigned_shortM_s_30_18_at_L: (unsigned_shortP,
  uint16) memory) =
  ((0 <= wcslen(s_30, unsigned_shortP_unsigned_shortM_s_30_18_at_L)) and
   ((offset_min(unsigned_shortP_s_30_18_alloc_table_at_L, s_30) <= 0) and
    (offset_max(unsigned_shortP_s_30_18_alloc_table_at_L,
    s_30) >= wcslen(s_30, unsigned_shortP_unsigned_shortM_s_30_18_at_L))))

predicate valid_wstring_or_null(s_31: unsigned_shortP pointer,
  unsigned_shortP_s_31_19_alloc_table_at_L: unsigned_shortP alloc_table,
  unsigned_shortP_unsigned_shortM_s_31_19_at_L: (unsigned_shortP,
  uint16) memory) =
  ((s_31 = null) or valid_wstring(s_31,
   unsigned_shortP_s_31_19_alloc_table_at_L,
   unsigned_shortP_unsigned_shortM_s_31_19_at_L))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

axiom memcmp_range:
  (forall charP_charM_s2_2_at_L:(charP, int8) memory.
    (forall charP_charM_s1_1_at_L:(charP, int8) memory.
      (forall s1_0_0:charP pointer.
        (forall s2_0_0:charP pointer.
          (forall n_0:int.
            ((((-2147483647) - 1) <= memcmp(s1_0_0, s2_0_0, n_0,
             charP_charM_s2_2_at_L, charP_charM_s1_1_at_L)) and
             (memcmp(s1_0_0, s2_0_0, n_0, charP_charM_s2_2_at_L,
             charP_charM_s1_1_at_L) <= 2147483647)))))))

axiom memcmp_zero:
  (forall charP_charM_s2_2_at_L:(charP, int8) memory.
    (forall charP_charM_s1_1_at_L:(charP, int8) memory.
      (forall s1_1_0:charP pointer.
        (forall s2_1_0:charP pointer.
          (forall n_1:int.
            ((memcmp(s1_1_0, s2_1_0, n_1, charP_charM_s2_2_at_L,
             charP_charM_s1_1_at_L) = 0) <->
             (forall i:int.
               (((0 <= i) and (i < n_1)) ->
                (integer_of_int8(select(charP_charM_s1_1_at_L, shift(s1_1_0,
                i))) = integer_of_int8(select(charP_charM_s2_2_at_L,
                shift(s2_1_0, i))))))))))))

axiom memchr_def:
  (forall charP_charM_s_3_at_L:(charP, int8) memory.
    (forall s_0_0:charP pointer.
      (forall c_0:int.
        (forall n_3:int.
          ((memchr(s_0_0, c_0, n_3, charP_charM_s_3_at_L) = true) <->
           (exists i_0:int32.
             ((0 <= integer_of_int32(i_0)) and
              ((integer_of_int32(i_0) < n_3) and
               (integer_of_int8(select(charP_charM_s_3_at_L, shift(s_0_0,
               integer_of_int32(i_0)))) = c_0)))))))))

axiom memset_def:
  (forall charP_charM_s_1_4_at_L:(charP, int8) memory.
    (forall s_2:charP pointer.
      (forall c_2:int.
        (forall n_5:int.
          ((memset(s_2, c_2, n_5, charP_charM_s_1_4_at_L) = true) <->
           (forall i_1:int.
             (((0 <= i_1) and (i_1 < n_5)) ->
              (integer_of_int8(select(charP_charM_s_1_4_at_L, shift(s_2,
              i_1))) = c_2))))))))

axiom strlen_pos_or_null:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_4:charP pointer.
      (forall i_2:int.
        (((0 <= i_2) and
          ((i_2 <= 2147483647) and
           ((forall j:int.
              (((0 <= j) and (j < i_2)) ->
               (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_4,
               j))) <> 0))) and
            (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_4,
            i_2))) = 0)))) ->
         (strlen(s_4, charP_charM_s_3_5_at_L) = i_2)))))

axiom strlen_neg:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_5:charP pointer.
      ((forall i_3:int.
         (((0 <= i_3) and (i_3 <= 2147483647)) ->
          (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_5,
          i_3))) <> 0))) ->
       (strlen(s_5, charP_charM_s_3_5_at_L) < 0))))

axiom strlen_range:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_6:charP pointer. (strlen(s_6,
      charP_charM_s_3_5_at_L) <= 2147483647)))

axiom strlen_before_null:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_7:charP pointer.
      (forall i_4:int.
        (((0 <= i_4) and (i_4 < strlen(s_7, charP_charM_s_3_5_at_L))) ->
         (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_7,
         i_4))) <> 0)))))

axiom strlen_at_null:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_8:charP pointer.
      ((0 <= strlen(s_8, charP_charM_s_3_5_at_L)) ->
       (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_8, strlen(s_8,
       charP_charM_s_3_5_at_L)))) = 0))))

axiom strlen_not_zero:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_9:charP pointer.
      (forall i_5:int.
        (((0 <= i_5) and
          ((i_5 <= strlen(s_9, charP_charM_s_3_5_at_L)) and
           (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_9,
           i_5))) <> 0))) ->
         (i_5 < strlen(s_9, charP_charM_s_3_5_at_L))))))

axiom strlen_zero:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_10:charP pointer.
      (forall i_6:int.
        (((0 <= i_6) and
          ((i_6 <= strlen(s_10, charP_charM_s_3_5_at_L)) and
           (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_10,
           i_6))) = 0))) ->
         (i_6 = strlen(s_10, charP_charM_s_3_5_at_L))))))

axiom strlen_sup:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_11:charP pointer.
      (forall i_7:int.
        (((0 <= i_7) and (integer_of_int8(select(charP_charM_s_3_5_at_L,
          shift(s_11, i_7))) = 0)) ->
         ((0 <= strlen(s_11, charP_charM_s_3_5_at_L)) and (strlen(s_11,
          charP_charM_s_3_5_at_L) <= i_7))))))

axiom strlen_shift:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_12:charP pointer.
      (forall i_8:int.
        (((0 <= i_8) and (i_8 <= strlen(s_12, charP_charM_s_3_5_at_L))) ->
         (strlen(shift(s_12, i_8), charP_charM_s_3_5_at_L) = (strlen(s_12,
         charP_charM_s_3_5_at_L) - i_8))))))

axiom strlen_create:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_13:charP pointer.
      (forall i_9:int.
        (((0 <= i_9) and
          ((i_9 <= 2147483647) and
           (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_13,
           i_9))) = 0))) ->
         ((0 <= strlen(s_13, charP_charM_s_3_5_at_L)) and (strlen(s_13,
          charP_charM_s_3_5_at_L) <= i_9))))))

axiom strlen_create_shift:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_14:charP pointer.
      (forall i_10:int.
        (forall k:int.
          (((0 <= k) and
            ((k <= i_10) and
             ((i_10 <= 2147483647) and
              (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_14,
              i_10))) = 0)))) ->
           ((0 <= strlen(shift(s_14, k), charP_charM_s_3_5_at_L)) and
            (strlen(shift(s_14, k), charP_charM_s_3_5_at_L) <= (i_10 - k))))))))

axiom memcmp_strlen_left:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s1_2:charP pointer.
      (forall s2_2:charP pointer.
        (forall n_6:int.
          (((memcmp(s1_2, s2_2, n_6, charP_charM_s_3_5_at_L,
            charP_charM_s_3_5_at_L) = 0) and (strlen(s1_2,
            charP_charM_s_3_5_at_L) < n_6)) ->
           (strlen(s1_2, charP_charM_s_3_5_at_L) = strlen(s2_2,
           charP_charM_s_3_5_at_L)))))))

axiom memcmp_strlen_right:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s1_3:charP pointer.
      (forall s2_3:charP pointer.
        (forall n_7:int.
          (((memcmp(s1_3, s2_3, n_7, charP_charM_s_3_5_at_L,
            charP_charM_s_3_5_at_L) = 0) and (strlen(s2_3,
            charP_charM_s_3_5_at_L) < n_7)) ->
           (strlen(s1_3, charP_charM_s_3_5_at_L) = strlen(s2_3,
           charP_charM_s_3_5_at_L)))))))

axiom memcmp_strlen_shift_left:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s1_4:charP pointer.
      (forall s2_4:charP pointer.
        (forall k_0:int.
          (forall n_8:int.
            (((memcmp(s1_4, shift(s2_4, k_0), n_8, charP_charM_s_3_5_at_L,
              charP_charM_s_3_5_at_L) = 0) and
              ((0 <= k_0) and (strlen(s1_4, charP_charM_s_3_5_at_L) < n_8))) ->
             ((0 <= strlen(s2_4, charP_charM_s_3_5_at_L)) and (strlen(s2_4,
              charP_charM_s_3_5_at_L) <= (k_0 + strlen(s1_4,
              charP_charM_s_3_5_at_L))))))))))

axiom memcmp_strlen_shift_right:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s1_5:charP pointer.
      (forall s2_5:charP pointer.
        (forall k_1:int.
          (forall n_9:int.
            (((memcmp(shift(s1_5, k_1), s2_5, n_9, charP_charM_s_3_5_at_L,
              charP_charM_s_3_5_at_L) = 0) and
              ((0 <= k_1) and (strlen(s2_5, charP_charM_s_3_5_at_L) < n_9))) ->
             ((0 <= strlen(s1_5, charP_charM_s_3_5_at_L)) and (strlen(s1_5,
              charP_charM_s_3_5_at_L) <= (k_1 + strlen(s2_5,
              charP_charM_s_3_5_at_L))))))))))

axiom strcmp_range:
  (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
    (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
      (forall s1_7:charP pointer.
        (forall s2_7:charP pointer.
          ((((-2147483647) - 1) <= strcmp(s1_7, s2_7,
           charP_charM_s2_6_7_at_L, charP_charM_s1_6_6_at_L)) and
           (strcmp(s1_7, s2_7, charP_charM_s2_6_7_at_L,
           charP_charM_s1_6_6_at_L) <= 2147483647))))))

axiom strcmp_zero:
  (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
    (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
      (forall s1_8:charP pointer.
        (forall s2_8:charP pointer.
          ((strcmp(s1_8, s2_8, charP_charM_s2_6_7_at_L,
           charP_charM_s1_6_6_at_L) = 0) <->
           ((strlen(s1_8, charP_charM_s1_6_6_at_L) = strlen(s2_8,
            charP_charM_s2_6_7_at_L)) and
            (forall i_11:int.
              (((0 <= i_11) and (i_11 <= strlen(s1_8,
                charP_charM_s1_6_6_at_L))) ->
               (integer_of_int8(select(charP_charM_s1_6_6_at_L, shift(s1_8,
               i_11))) = integer_of_int8(select(charP_charM_s2_6_7_at_L,
               shift(s2_8, i_11))))))))))))

axiom strncmp_zero:
  (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
    (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
      (forall s1_10:charP pointer.
        (forall s2_10:charP pointer.
          (forall n_11:int.
            ((strncmp(s1_10, s2_10, n_11, charP_charM_s2_9_9_at_L,
             charP_charM_s1_9_8_at_L) = 0) <->
             (((strlen(s1_10, charP_charM_s1_9_8_at_L) < n_11) and
               (strcmp(s1_10, s2_10, charP_charM_s2_9_9_at_L,
               charP_charM_s1_9_8_at_L) = 0)) or
              (forall i_12:int.
                (((0 <= i_12) and (i_12 < n_11)) ->
                 (integer_of_int8(select(charP_charM_s1_9_8_at_L,
                 shift(s1_10,
                 i_12))) = integer_of_int8(select(charP_charM_s2_9_9_at_L,
                 shift(s2_10, i_12)))))))))))))

axiom strchr_def:
  (forall charP_charM_s_15_10_at_L:(charP, int8) memory.
    (forall s_16:charP pointer.
      (forall c_4:int.
        ((strchr(s_16, c_4, charP_charM_s_15_10_at_L) = true) <->
         (exists i_13:int.
           ((0 <= i_13) and
            ((i_13 <= strlen(s_16, charP_charM_s_15_10_at_L)) and
             (integer_of_int8(select(charP_charM_s_15_10_at_L, shift(s_16,
             i_13))) = c_4))))))))

axiom wcslen_pos_or_null:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_18:unsigned_shortP pointer.
      (forall i_14:int.
        (((0 <= i_14) and
          ((forall j_0:int.
             (((0 <= j_0) and (j_0 < i_14)) ->
              (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
              shift(s_18, j_0))) <> 0))) and
           (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
           shift(s_18, i_14))) = 0))) ->
         (wcslen(s_18, unsigned_shortP_unsigned_shortM_s_17_11_at_L) = i_14)))))

axiom wcslen_neg:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_19:unsigned_shortP pointer.
      ((forall i_15:int.
         ((0 <= i_15) ->
          (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
          shift(s_19, i_15))) <> 0))) ->
       (wcslen(s_19, unsigned_shortP_unsigned_shortM_s_17_11_at_L) < 0))))

axiom wcslen_before_null:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_20:unsigned_shortP pointer.
      (forall i_16:int32.
        (((0 <= integer_of_int32(i_16)) and
          (integer_of_int32(i_16) < wcslen(s_20,
          unsigned_shortP_unsigned_shortM_s_17_11_at_L))) ->
         (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
         shift(s_20, integer_of_int32(i_16)))) <> 0)))))

axiom wcslen_at_null:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_21:unsigned_shortP pointer.
      ((0 <= wcslen(s_21, unsigned_shortP_unsigned_shortM_s_17_11_at_L)) ->
       (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
       shift(s_21, wcslen(s_21,
       unsigned_shortP_unsigned_shortM_s_17_11_at_L)))) = 0))))

axiom wcslen_not_zero:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_22:unsigned_shortP pointer.
      (forall i_17:int32.
        (((0 <= integer_of_int32(i_17)) and
          ((integer_of_int32(i_17) <= wcslen(s_22,
           unsigned_shortP_unsigned_shortM_s_17_11_at_L)) and
           (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
           shift(s_22, integer_of_int32(i_17)))) <> 0))) ->
         (integer_of_int32(i_17) < wcslen(s_22,
         unsigned_shortP_unsigned_shortM_s_17_11_at_L))))))

axiom wcslen_zero:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_23:unsigned_shortP pointer.
      (forall i_18:int32.
        (((0 <= integer_of_int32(i_18)) and
          ((integer_of_int32(i_18) <= wcslen(s_23,
           unsigned_shortP_unsigned_shortM_s_17_11_at_L)) and
           (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
           shift(s_23, integer_of_int32(i_18)))) = 0))) ->
         (integer_of_int32(i_18) = wcslen(s_23,
         unsigned_shortP_unsigned_shortM_s_17_11_at_L))))))

axiom wcslen_sup:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_24:unsigned_shortP pointer.
      (forall i_19:int32.
        (((0 <= integer_of_int32(i_19)) and
          (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
          shift(s_24, integer_of_int32(i_19)))) = 0)) ->
         ((0 <= wcslen(s_24,
          unsigned_shortP_unsigned_shortM_s_17_11_at_L)) and (wcslen(s_24,
          unsigned_shortP_unsigned_shortM_s_17_11_at_L) <= integer_of_int32(i_19)))))))

axiom wcslen_shift:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_25:unsigned_shortP pointer.
      (forall i_20:int32.
        (((0 <= integer_of_int32(i_20)) and
          (integer_of_int32(i_20) <= wcslen(s_25,
          unsigned_shortP_unsigned_shortM_s_17_11_at_L))) ->
         (wcslen(shift(s_25, integer_of_int32(i_20)),
         unsigned_shortP_unsigned_shortM_s_17_11_at_L) = (wcslen(s_25,
         unsigned_shortP_unsigned_shortM_s_17_11_at_L) - integer_of_int32(i_20)))))))

axiom wcslen_create:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_26:unsigned_shortP pointer.
      (forall i_21:int32.
        (((0 <= integer_of_int32(i_21)) and
          (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
          shift(s_26, integer_of_int32(i_21)))) = 0)) ->
         ((0 <= wcslen(s_26,
          unsigned_shortP_unsigned_shortM_s_17_11_at_L)) and (wcslen(s_26,
          unsigned_shortP_unsigned_shortM_s_17_11_at_L) <= integer_of_int32(i_21)))))))

axiom wcslen_create_shift:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_27:unsigned_shortP pointer.
      (forall i_22:int32.
        (forall k_2:int32.
          (((0 <= integer_of_int32(k_2)) and
            ((integer_of_int32(k_2) <= integer_of_int32(i_22)) and
             (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
             shift(s_27, integer_of_int32(i_22)))) = 0))) ->
           ((0 <= wcslen(shift(s_27, integer_of_int32(k_2)),
            unsigned_shortP_unsigned_shortM_s_17_11_at_L)) and
            (wcslen(shift(s_27, integer_of_int32(k_2)),
            unsigned_shortP_unsigned_shortM_s_17_11_at_L) <= (integer_of_int32(i_22) - integer_of_int32(k_2)))))))))

axiom wcscmp_zero:
  (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:(unsigned_shortP,
    uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:(unsigned_shortP,
      uint16) memory.
      (forall s1_12:unsigned_shortP pointer.
        (forall s2_12:unsigned_shortP pointer.
          ((wcscmp(s1_12, s2_12,
           unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
           unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = 0) <->
           ((wcslen(s1_12,
            unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcslen(s2_12,
            unsigned_shortP_unsigned_shortM_s2_11_13_at_L)) and
            (forall i_23:int.
              (((0 <= i_23) and (i_23 <= wcslen(s1_12,
                unsigned_shortP_unsigned_shortM_s1_11_12_at_L))) ->
               (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s1_11_12_at_L,
               shift(s1_12,
               i_23))) = integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
               shift(s2_12, i_23))))))))))))

axiom wcsncmp_zero:
  (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:(unsigned_shortP,
    uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:(unsigned_shortP,
      uint16) memory.
      (forall s1_14:unsigned_shortP pointer.
        (forall s2_14:unsigned_shortP pointer.
          (forall n_13:int.
            ((wcsncmp(s1_14, s2_14, n_13,
             unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
             unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = 0) <->
             (((wcslen(s1_14,
               unsigned_shortP_unsigned_shortM_s1_13_14_at_L) < n_13) and
               (wcscmp(s1_14, s2_14,
               unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
               unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = 0)) or
              (forall i_24:int.
                (((0 <= i_24) and (i_24 < n_13)) ->
                 (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s1_13_14_at_L,
                 shift(s1_14,
                 i_24))) = integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                 shift(s2_14, i_24)))))))))))))

