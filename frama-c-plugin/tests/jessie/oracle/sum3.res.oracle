Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -add-symbolic-path PPCHOME:PPCHOME -jessie -jessie-gen-only sum3.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -dD PPCHOME/tests/jessie/sum3.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir sum3.jessie
[jessie] File sum3.jessie/sum3.jc written.
[jessie] File sum3.jessie/sum3.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

type int32 = -2147483648..2147483647

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

tag __anonstruct_S_1 = {
  unsigned_charP[0..2] a: 24; 
  unsigned_charP[0..2] Sum: 24; 
  unsigned_charP[0..2] b: 24;
}

type __anonstruct_S_1 = [__anonstruct_S_1]

__anonstruct_S_1[0] vect;

invariant valid_vect :
((\offset_min(vect) <= 0) && (\offset_max(vect) >= 0))

unit f()
  requires (C_47 : ((((C_50 : (\offset_min(vect.a) <= 0)) &&
                       (C_51 : (\offset_max(vect.a) >= 2))) &&
                      ((C_53 : (\offset_min(vect.Sum) <= 0)) &&
                        (C_54 : (\offset_max(vect.Sum) >= 2)))) &&
                     ((C_56 : (\offset_min(vect.b) <= 0)) &&
                       (C_57 : (\offset_max(vect.b) >= 2)))));
  requires (C_46 : (\forall integer i_1;
                     (\forall integer j_0;
                       ((((0 <= i_1) && (i_1 <= 2)) &&
                          ((0 <= j_0) && (j_0 <= 2))) ==>
                         ((((vect.a + i_1) != (vect.b + j_0)) &&
                            ((vect.a + i_1) != (vect.Sum + j_0))) &&
                           ((vect.b + i_1) != (vect.Sum + j_0)))))));
behavior default:
  assigns (vect.a + [0..2]).unsigned_charM,
  (vect.Sum + [0..2]).unsigned_charM,
  (vect.b + [0..2]).unsigned_charM;
  ensures (C_45 : (\forall integer m_3;
                    (((0 <= m_3) && (m_3 < 3)) ==>
                      ((vect.Sum + m_3).unsigned_charM ==
                        ((vect.a + m_3).unsigned_charM +
                          (vect.b + m_3).unsigned_charM)))));
{  
   (var uint8 i);
   
   {  
      ( 
        behavior default:
          assigns (vect.a + [0..2]).unsigned_charM,
          (vect.b + [0..2]).unsigned_charM;
          ensures (C_19 : true);
        { 
        {  (C_3 : ((C_2 : ((C_1 : vect.a) + 0).unsigned_charM) = 1));
           (C_6 : ((C_5 : ((C_4 : vect.a) + 1).unsigned_charM) = 2));
           (C_9 : ((C_8 : ((C_7 : vect.a) + 2).unsigned_charM) = 3));
           (C_12 : ((C_11 : ((C_10 : vect.b) + 0).unsigned_charM) = 4));
           (C_15 : ((C_14 : ((C_13 : vect.b) + 1).unsigned_charM) = 5));
           (C_18 : ((C_17 : ((C_16 : vect.b) + 2).unsigned_charM) = 6))
        }
        });
      
      {  
         (assert for default: (C_20 : (jessie : (\forall integer m;
                                                  (((0 <= m) && (m < 3)) ==>
                                                    ((vect.Sum + m).unsigned_charM ==
                                                      \at((vect.Sum + m).unsigned_charM,Pre)))))));
         ()
      };
      
      {  (C_21 : (i = 0));
         
         loop 
         behavior default:
           invariant (C_26 : ((C_27 : (0 <= i)) && (C_28 : (i <= 3))));
         behavior default:
           invariant (C_25 : (\forall integer m_0;
                               (((0 <= m_0) && (m_0 < 3)) ==>
                                 (((vect.a + m_0).unsigned_charM ==
                                    \at((vect.a + m_0).unsigned_charM,Here)) &&
                                   ((vect.b + m_0).unsigned_charM ==
                                     \at((vect.b + m_0).unsigned_charM,Here))))));
         behavior default:
           invariant (C_24 : (\forall integer m_1;
                               (((i <= m_1) && (m_1 < 3)) ==>
                                 ((vect.Sum + m_1).unsigned_charM ==
                                   \at((vect.Sum + m_1).unsigned_charM,Pre)))));
         behavior default:
           invariant (C_23 : (\forall integer m_2;
                               (((0 <= m_2) && (m_2 < i)) ==>
                                 ((vect.Sum + m_2).unsigned_charM ==
                                   ((vect.a + m_2).unsigned_charM +
                                     (vect.b + m_2).unsigned_charM)))));
         variant (C_22 : (3 - i));
         while (true)
         {  
            {  (if ((C_29 : (i :> int32)) < 3) then () else 
               (goto while_0_break));
               
               {  (C_40 : ((C_39 : ((C_38 : vect.Sum) + i).unsigned_charM) = 
                  (C_37 : ((C_36 : ((C_35 : ((C_34 : ((C_33 : vect.a) + i).unsigned_charM) :> int32)) +
                                     (C_32 : ((C_31 : ((C_30 : vect.b) + i).unsigned_charM) :> int32)))) :> uint8))))
               };
               (C_44 : (i = (C_43 : ((C_42 : ((C_41 : (i :> int32)) + 1)) :> uint8))))
            }
         };
         (while_0_break : ())
      };
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs sum3.jessie/sum3.cloc sum3.jessie/sum3.jc
type __anonstruct_S_1

type charP

type int32

type int8

type padding

type uint8

type unsigned_charP

type vect_1

type voidP

logic __anonstruct_S_1_tag:  -> __anonstruct_S_1 tag_id

axiom __anonstruct_S_1_int : (int_of_tag(__anonstruct_S_1_tag) = (1))

logic __anonstruct_S_1_of_pointer_address: unit pointer -> __anonstruct_S_1 pointer

axiom __anonstruct_S_1_of_pointer_address_of_pointer_addr :
 (forall p:__anonstruct_S_1 pointer.
  (p = __anonstruct_S_1_of_pointer_address(pointer_address(p))))

axiom __anonstruct_S_1_parenttag_bottom :
 parenttag(__anonstruct_S_1_tag, bottom_tag)

axiom __anonstruct_S_1_tags :
 (forall x:__anonstruct_S_1 pointer.
  (forall __anonstruct_S_1_tag_table:__anonstruct_S_1 tag_table.
   instanceof(__anonstruct_S_1_tag_table, x, __anonstruct_S_1_tag)))

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_S_1(p:__anonstruct_S_1 pointer,
 a:int, __anonstruct_S_1_alloc_table:__anonstruct_S_1 alloc_table,
 unsigned_charP_alloc_table:unsigned_charP alloc_table,
 __anonstruct_S_1_Sum:(__anonstruct_S_1, unsigned_charP pointer) memory,
 __anonstruct_S_1_a:(__anonstruct_S_1, unsigned_charP pointer) memory,
 __anonstruct_S_1_b:(__anonstruct_S_1, unsigned_charP pointer) memory) =
 ((offset_min(__anonstruct_S_1_alloc_table, p) <= a)
 and (left_valid_struct_unsigned_charP(select(__anonstruct_S_1_a, p), (0),
      unsigned_charP_alloc_table)
     and (left_valid_struct_unsigned_charP(select(__anonstruct_S_1_Sum, p),
          (0), unsigned_charP_alloc_table)
         and left_valid_struct_unsigned_charP(select(__anonstruct_S_1_b, p),
             (0), unsigned_charP_alloc_table))))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of___anonstruct_S_1_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(__anonstruct_S_1_of_pointer_address(p))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_S_1(p:__anonstruct_S_1 pointer,
 b:int, __anonstruct_S_1_alloc_table:__anonstruct_S_1 alloc_table,
 unsigned_charP_alloc_table:unsigned_charP alloc_table,
 __anonstruct_S_1_Sum:(__anonstruct_S_1, unsigned_charP pointer) memory,
 __anonstruct_S_1_a:(__anonstruct_S_1, unsigned_charP pointer) memory,
 __anonstruct_S_1_b:(__anonstruct_S_1, unsigned_charP pointer) memory) =
 ((offset_max(__anonstruct_S_1_alloc_table, p) >= b)
 and (right_valid_struct_unsigned_charP(select(__anonstruct_S_1_a, p), (2),
      unsigned_charP_alloc_table)
     and (right_valid_struct_unsigned_charP(select(__anonstruct_S_1_Sum, p),
          (2), unsigned_charP_alloc_table)
         and right_valid_struct_unsigned_charP(select(__anonstruct_S_1_b, p),
             (2), unsigned_charP_alloc_table))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root___anonstruct_S_1(p:__anonstruct_S_1 pointer,
 a:int, b:int, __anonstruct_S_1_alloc_table:__anonstruct_S_1 alloc_table) =
 ((offset_min(__anonstruct_S_1_alloc_table, p) = a)
 and (offset_max(__anonstruct_S_1_alloc_table, p) = b))

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_S_1(p:__anonstruct_S_1 pointer,
 a:int, b:int, __anonstruct_S_1_alloc_table:__anonstruct_S_1 alloc_table,
 unsigned_charP_alloc_table:unsigned_charP alloc_table,
 __anonstruct_S_1_Sum:(__anonstruct_S_1, unsigned_charP pointer) memory,
 __anonstruct_S_1_a:(__anonstruct_S_1, unsigned_charP pointer) memory,
 __anonstruct_S_1_b:(__anonstruct_S_1, unsigned_charP pointer) memory) =
 ((offset_min(__anonstruct_S_1_alloc_table, p) = a)
 and ((offset_max(__anonstruct_S_1_alloc_table, p) = b)
     and (strict_valid_struct_unsigned_charP(select(__anonstruct_S_1_a, p),
          (0), (2), unsigned_charP_alloc_table)
         and (strict_valid_struct_unsigned_charP(select(__anonstruct_S_1_Sum,
                                                 p),
              (0), (2), unsigned_charP_alloc_table)
             and strict_valid_struct_unsigned_charP(select(__anonstruct_S_1_b,
                                                    p),
                 (0), (2), unsigned_charP_alloc_table)))))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root___anonstruct_S_1(p:__anonstruct_S_1 pointer, a:int,
 b:int, __anonstruct_S_1_alloc_table:__anonstruct_S_1 alloc_table) =
 ((offset_min(__anonstruct_S_1_alloc_table, p) <= a)
 and (offset_max(__anonstruct_S_1_alloc_table, p) >= b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct___anonstruct_S_1(p:__anonstruct_S_1 pointer, a:int,
 b:int, __anonstruct_S_1_alloc_table:__anonstruct_S_1 alloc_table,
 unsigned_charP_alloc_table:unsigned_charP alloc_table,
 __anonstruct_S_1_Sum:(__anonstruct_S_1, unsigned_charP pointer) memory,
 __anonstruct_S_1_a:(__anonstruct_S_1, unsigned_charP pointer) memory,
 __anonstruct_S_1_b:(__anonstruct_S_1, unsigned_charP pointer) memory) =
 ((offset_min(__anonstruct_S_1_alloc_table, p) <= a)
 and ((offset_max(__anonstruct_S_1_alloc_table, p) >= b)
     and (valid_struct_unsigned_charP(select(__anonstruct_S_1_a, p), (0),
          (2), unsigned_charP_alloc_table)
         and (valid_struct_unsigned_charP(select(__anonstruct_S_1_Sum, p),
              (0), (2), unsigned_charP_alloc_table)
             and valid_struct_unsigned_charP(select(__anonstruct_S_1_b, p),
                 (0), (2), unsigned_charP_alloc_table)))))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic vect:  -> __anonstruct_S_1 pointer

predicate valid_vect(__anonstruct_S_1_vect_1_alloc_table:__anonstruct_S_1 alloc_table) =
 (le_int(offset_min(__anonstruct_S_1_vect_1_alloc_table, vect), (0))
 and ge_int(offset_max(__anonstruct_S_1_vect_1_alloc_table, vect), (0)))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter __anonstruct_S_1_Sum_vect_1 :
 (__anonstruct_S_1, unsigned_charP pointer) memory ref

parameter __anonstruct_S_1_a_vect_1 :
 (__anonstruct_S_1, unsigned_charP pointer) memory ref

parameter __anonstruct_S_1_alloc_table : __anonstruct_S_1 alloc_table ref

parameter __anonstruct_S_1_b_vect_1 :
 (__anonstruct_S_1, unsigned_charP pointer) memory ref

parameter __anonstruct_S_1_tag_table : __anonstruct_S_1 tag_table ref

parameter __anonstruct_S_1_vect_1_alloc_table :
 __anonstruct_S_1 alloc_table ref

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter alloc_struct___anonstruct_S_1 :
 n:int ->
  __anonstruct_S_1_alloc_table:__anonstruct_S_1 alloc_table ref ->
   unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
    __anonstruct_S_1_tag_table:__anonstruct_S_1 tag_table ref ->
     __anonstruct_S_1_Sum:(__anonstruct_S_1, unsigned_charP pointer) memory ->
      __anonstruct_S_1_a:(__anonstruct_S_1, unsigned_charP pointer) memory ->
       __anonstruct_S_1_b:(__anonstruct_S_1, unsigned_charP pointer) memory ->
        { } __anonstruct_S_1 pointer
        writes __anonstruct_S_1_alloc_table,__anonstruct_S_1_tag_table,unsigned_charP_alloc_table
        { (strict_valid_struct___anonstruct_S_1(result, (0), sub_int(n, (1)),
           __anonstruct_S_1_alloc_table, unsigned_charP_alloc_table,
           __anonstruct_S_1_Sum, __anonstruct_S_1_a, __anonstruct_S_1_b)
          and (alloc_extends(__anonstruct_S_1_alloc_table@,
               __anonstruct_S_1_alloc_table)
              and (alloc_fresh(__anonstruct_S_1_alloc_table@, result, n)
                  and instanceof(__anonstruct_S_1_tag_table, result,
                      __anonstruct_S_1_tag)))) }

parameter alloc_struct___anonstruct_S_1_requires :
 n:int ->
  __anonstruct_S_1_alloc_table:__anonstruct_S_1 alloc_table ref ->
   unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
    __anonstruct_S_1_tag_table:__anonstruct_S_1 tag_table ref ->
     __anonstruct_S_1_Sum:(__anonstruct_S_1, unsigned_charP pointer) memory ->
      __anonstruct_S_1_a:(__anonstruct_S_1, unsigned_charP pointer) memory ->
       __anonstruct_S_1_b:(__anonstruct_S_1, unsigned_charP pointer) memory ->
        { ge_int(n, (0))} __anonstruct_S_1 pointer
        writes __anonstruct_S_1_alloc_table,__anonstruct_S_1_tag_table,unsigned_charP_alloc_table
        { (strict_valid_struct___anonstruct_S_1(result, (0), sub_int(n, (1)),
           __anonstruct_S_1_alloc_table, unsigned_charP_alloc_table,
           __anonstruct_S_1_Sum, __anonstruct_S_1_a, __anonstruct_S_1_b)
          and (alloc_extends(__anonstruct_S_1_alloc_table@,
               __anonstruct_S_1_alloc_table)
              and (alloc_fresh(__anonstruct_S_1_alloc_table@, result, n)
                  and instanceof(__anonstruct_S_1_tag_table, result,
                      __anonstruct_S_1_tag)))) }

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter unsigned_charP_vect_1_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_unsigned_charM_vect_1 :
 (unsigned_charP, uint8) memory ref

parameter f :
 tt:unit ->
  { } unit
  reads __anonstruct_S_1_Sum_vect_1,__anonstruct_S_1_a_vect_1,__anonstruct_S_1_b_vect_1,__anonstruct_S_1_vect_1_alloc_table,unsigned_charP_unsigned_charM_vect_1,unsigned_charP_vect_1_alloc_table
  writes unsigned_charP_unsigned_charM_vect_1
  { ((JC_<somenum>: valid_vect(__anonstruct_S_1_vect_1_alloc_table))
    and (JC_<somenum>:
        ((JC_<somenum>:
         (forall m_3:int.
          ((le_int((0), m_3) and lt_int(m_3, (3))) ->
           (integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                             shift(select(__anonstruct_S_1_Sum_vect_1, vect),
                             m_3))) = add_int(integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                                               shift(
                                                               select(__anonstruct_S_1_a_vect_1,
                                                               vect), m_3))),
                                      integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                                       shift(select(__anonstruct_S_1_b_vect_1,
                                                             vect),
                                                       m_3))))))))
        and (JC_<somenum>:
            not_assigns(unsigned_charP_vect_1_alloc_table@,
            unsigned_charP_unsigned_charM_vect_1@,
            unsigned_charP_unsigned_charM_vect_1,
            pset_union(pset_range(pset_deref(__anonstruct_S_1_b_vect_1@,
                                  pset_singleton(vect)),
                       (0), (2)),
            pset_union(pset_range(pset_deref(__anonstruct_S_1_Sum_vect_1@,
                                  pset_singleton(vect)),
                       (0), (2)),
            pset_range(pset_deref(__anonstruct_S_1_a_vect_1@,
                       pset_singleton(vect)),
            (0), (2))))))))) }

parameter f_requires :
 tt:unit ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      le_int(offset_min(unsigned_charP_vect_1_alloc_table,
             select(__anonstruct_S_1_a_vect_1, vect)),
      (0)))
     and ((JC_<somenum>:
          ge_int(offset_max(unsigned_charP_vect_1_alloc_table,
                 select(__anonstruct_S_1_a_vect_1, vect)),
          (2)))
         and ((JC_<somenum>:
              le_int(offset_min(unsigned_charP_vect_1_alloc_table,
                     select(__anonstruct_S_1_Sum_vect_1, vect)),
              (0)))
             and ((JC_<somenum>:
                  ge_int(offset_max(unsigned_charP_vect_1_alloc_table,
                         select(__anonstruct_S_1_Sum_vect_1, vect)),
                  (2)))
                 and ((JC_<somenum>:
                      le_int(offset_min(unsigned_charP_vect_1_alloc_table,
                             select(__anonstruct_S_1_b_vect_1, vect)),
                      (0)))
                     and ((JC_<somenum>:
                          ge_int(offset_max(unsigned_charP_vect_1_alloc_table,
                                 select(__anonstruct_S_1_b_vect_1, vect)),
                          (2)))
                         and (JC_<somenum>:
                             (forall i_1:int.
                              (forall j_0:int.
                               ((le_int((0), i_1)
                                and (le_int(i_1, (2))
                                    and (le_int((0), j_0)
                                        and le_int(j_0, (2))))) ->
                                ((shift(select(__anonstruct_S_1_a_vect_1,
                                        vect),
                                  i_1) <> shift(select(__anonstruct_S_1_b_vect_1,
                                                vect),
                                          j_0))
                                and ((shift(select(__anonstruct_S_1_a_vect_1,
                                            vect),
                                      i_1) <> shift(select(__anonstruct_S_1_Sum_vect_1,
                                                    vect),
                                              j_0))
                                    and (shift(select(__anonstruct_S_1_b_vect_1,
                                               vect),
                                         i_1) <> shift(select(__anonstruct_S_1_Sum_vect_1,
                                                       vect),
                                                 j_0))))))))))))))
    and (JC_<somenum>: valid_vect(__anonstruct_S_1_vect_1_alloc_table))))}
  unit
  reads __anonstruct_S_1_Sum_vect_1,__anonstruct_S_1_a_vect_1,__anonstruct_S_1_b_vect_1,__anonstruct_S_1_vect_1_alloc_table,unsigned_charP_unsigned_charM_vect_1,unsigned_charP_vect_1_alloc_table
  writes unsigned_charP_unsigned_charM_vect_1
  { ((JC_<somenum>: valid_vect(__anonstruct_S_1_vect_1_alloc_table))
    and (JC_<somenum>:
        ((JC_<somenum>:
         (forall m_3:int.
          ((le_int((0), m_3) and lt_int(m_3, (3))) ->
           (integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                             shift(select(__anonstruct_S_1_Sum_vect_1, vect),
                             m_3))) = add_int(integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                                               shift(
                                                               select(__anonstruct_S_1_a_vect_1,
                                                               vect), m_3))),
                                      integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                                       shift(select(__anonstruct_S_1_b_vect_1,
                                                             vect),
                                                       m_3))))))))
        and (JC_<somenum>:
            not_assigns(unsigned_charP_vect_1_alloc_table@,
            unsigned_charP_unsigned_charM_vect_1@,
            unsigned_charP_unsigned_charM_vect_1,
            pset_union(pset_range(pset_deref(__anonstruct_S_1_b_vect_1@,
                                  pset_singleton(vect)),
                       (0), (2)),
            pset_union(pset_range(pset_deref(__anonstruct_S_1_Sum_vect_1@,
                                  pset_singleton(vect)),
                       (0), (2)),
            pset_range(pset_deref(__anonstruct_S_1_a_vect_1@,
                       pset_singleton(vect)),
            (0), (2))))))))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      le_int(offset_min(unsigned_charP_vect_1_alloc_table,
             select(__anonstruct_S_1_a_vect_1, vect)),
      (0)))
     and ((JC_<somenum>:
          ge_int(offset_max(unsigned_charP_vect_1_alloc_table,
                 select(__anonstruct_S_1_a_vect_1, vect)),
          (2)))
         and ((JC_<somenum>:
              le_int(offset_min(unsigned_charP_vect_1_alloc_table,
                     select(__anonstruct_S_1_Sum_vect_1, vect)),
              (0)))
             and ((JC_<somenum>:
                  ge_int(offset_max(unsigned_charP_vect_1_alloc_table,
                         select(__anonstruct_S_1_Sum_vect_1, vect)),
                  (2)))
                 and ((JC_<somenum>:
                      le_int(offset_min(unsigned_charP_vect_1_alloc_table,
                             select(__anonstruct_S_1_b_vect_1, vect)),
                      (0)))
                     and ((JC_<somenum>:
                          ge_int(offset_max(unsigned_charP_vect_1_alloc_table,
                                 select(__anonstruct_S_1_b_vect_1, vect)),
                          (2)))
                         and (JC_<somenum>:
                             (forall i_1:int.
                              (forall j_0:int.
                               ((le_int((0), i_1)
                                and (le_int(i_1, (2))
                                    and (le_int((0), j_0)
                                        and le_int(j_0, (2))))) ->
                                ((shift(select(__anonstruct_S_1_a_vect_1,
                                        vect),
                                  i_1) <> shift(select(__anonstruct_S_1_b_vect_1,
                                                vect),
                                          j_0))
                                and ((shift(select(__anonstruct_S_1_a_vect_1,
                                            vect),
                                      i_1) <> shift(select(__anonstruct_S_1_Sum_vect_1,
                                                    vect),
                                              j_0))
                                    and (shift(select(__anonstruct_S_1_b_vect_1,
                                               vect),
                                         i_1) <> shift(select(__anonstruct_S_1_Sum_vect_1,
                                                       vect),
                                                 j_0))))))))))))))
    and (JC_<somenum>: valid_vect(__anonstruct_S_1_vect_1_alloc_table)))) }
  (init:
  try
   begin
     (let i = ref (any_uint8 void) in
     begin
       (let jessie_<somenum> =
       (assert { true };
       ((C_3:
        (C_6:
        (C_9:
        (C_12:
        (C_15:
        begin
          (let jessie_<somenum> = (safe_uint8_of_integer_ (1)) in
          (let jessie_<somenum> =
          (C_1: ((safe_acc_ !__anonstruct_S_1_a_vect_1) vect)) in
          (((safe_upd_ unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>)));
         (let jessie_<somenum> = (safe_uint8_of_integer_ (2)) in
         (let jessie_<somenum> =
         (C_4: ((safe_acc_ !__anonstruct_S_1_a_vect_1) vect)) in
         (let jessie_<somenum> = (1) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) (1)) in
         (((safe_upd_ unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>))))));
         (let jessie_<somenum> = (safe_uint8_of_integer_ (3)) in
         (let jessie_<somenum> =
         (C_7: ((safe_acc_ !__anonstruct_S_1_a_vect_1) vect)) in
         (let jessie_<somenum> = (2) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
         (((safe_upd_ unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>))))));
         (let jessie_<somenum> = (safe_uint8_of_integer_ (4)) in
         (let jessie_<somenum> =
         (C_10: ((safe_acc_ !__anonstruct_S_1_b_vect_1) vect)) in
         (((safe_upd_ unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>)));
         (let jessie_<somenum> = (safe_uint8_of_integer_ (5)) in
         (let jessie_<somenum> =
         (C_13: ((safe_acc_ !__anonstruct_S_1_b_vect_1) vect)) in
         (let jessie_<somenum> = (1) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) (1)) in
         (((safe_upd_ unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>))))));
         (C_18:
         (let jessie_<somenum> = (safe_uint8_of_integer_ (6)) in
         begin
           (let jessie_<somenum> =
           (C_16: ((safe_acc_ !__anonstruct_S_1_b_vect_1) vect)) in
           (let jessie_<somenum> = (2) in
           (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
           (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
           (((safe_upd_ unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>)))));
          jessie_<somenum> end)) end))))))
       {{ ((JC_<somenum>: (true = true))
          and (JC_<somenum>:
              not_assigns(unsigned_charP_vect_1_alloc_table@init,
              unsigned_charP_unsigned_charM_vect_1@init,
              unsigned_charP_unsigned_charM_vect_1,
              pset_union(pset_range(pset_deref(__anonstruct_S_1_b_vect_1@,
                                    pset_singleton(vect)),
                         (0), (2)),
              pset_range(pset_deref(__anonstruct_S_1_a_vect_1@,
                         pset_singleton(vect)),
              (0), (2)))))) }}) in void);
      (assert
      { (JC_<somenum>:
        (forall m:int.
         ((le_int((0), m) and lt_int(m, (3))) ->
          (integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                            shift(select(__anonstruct_S_1_Sum_vect_1, vect),
                            m))) = integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1@init,
                                                    shift(select(__anonstruct_S_1_Sum_vect_1@init,
                                                          vect),
                                                    m))))))) }; void); void;
      try
       (C_21:
       (loop_2:
       begin
         (let jessie_<somenum> = (i := (safe_uint8_of_integer_ (0))) in void);
        while true do
        { invariant
            (((JC_<somenum>:
              (forall m_2:int.
               ((le_int((0), m_2) and lt_int(m_2, integer_of_uint8(i))) ->
                (integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                  shift(select(__anonstruct_S_1_Sum_vect_1,
                                        vect),
                                  m_2))) = add_int(integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                                                    shift(
                                                                    select(__anonstruct_S_1_a_vect_1,
                                                                    vect),
                                                                    m_2))),
                                           integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                                            shift(select(__anonstruct_S_1_b_vect_1,
                                                                  vect),
                                                            m_2))))))))
             and ((JC_<somenum>:
                  (forall m_1:int.
                   ((le_int(integer_of_uint8(i), m_1) and lt_int(m_1, (3))) ->
                    (integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                      shift(select(__anonstruct_S_1_Sum_vect_1,
                                            vect),
                                      m_1))) = integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1@init,
                                                                shift(
                                                                select(__anonstruct_S_1_Sum_vect_1@init,
                                                                vect), m_1)))))))
                 and ((JC_<somenum>:
                      (forall m_0:int.
                       ((le_int((0), m_0) and lt_int(m_0, (3))) ->
                        ((integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                           shift(select(__anonstruct_S_1_a_vect_1,
                                                 vect),
                                           m_0))) = integer_of_uint8(
                                                    select(unsigned_charP_unsigned_charM_vect_1,
                                                    shift(select(__anonstruct_S_1_a_vect_1,
                                                          vect),
                                                    m_0))))
                        and (integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                              shift(select(__anonstruct_S_1_b_vect_1,
                                                    vect),
                                              m_0))) = integer_of_uint8(
                                                       select(unsigned_charP_unsigned_charM_vect_1,
                                                       shift(select(__anonstruct_S_1_b_vect_1,
                                                             vect),
                                                       m_0))))))))
                     and (JC_<somenum>:
                         ((JC_<somenum>: le_int((0), integer_of_uint8(i)))
                         and (JC_<somenum>: le_int(integer_of_uint8(i), (3))))))))
            and (JC_<somenum>:
                not_assigns(unsigned_charP_vect_1_alloc_table@init,
                unsigned_charP_unsigned_charM_vect_1@init,
                unsigned_charP_unsigned_charM_vect_1,
                pset_union(pset_range(pset_deref(__anonstruct_S_1_b_vect_1@init,
                                      pset_singleton(vect)),
                           (0), (2)),
                pset_union(pset_range(pset_deref(__anonstruct_S_1_Sum_vect_1@init,
                                      pset_singleton(vect)),
                           (0), (2)),
                pset_range(pset_deref(__anonstruct_S_1_a_vect_1@init,
                           pset_singleton(vect)),
                (0), (2)))))))  }
         begin
           [ { } unit { true } ];
          try
           begin
             (let jessie_<somenum> =
             (C_44:
             begin
               (if ((lt_int_ (integer_of_int32 (C_29:
                                               (safe_int32_of_integer_ 
                                                (integer_of_uint8 !i))))) (3))
               then void else (raise (Goto_while_0_break_exc void)));
              (let jessie_<somenum> =
              (C_40:
              (let jessie_<somenum> =
              (C_37:
              (safe_uint8_of_integer_ (C_36:
                                      ((add_int (integer_of_int32 (C_35:
                                                                  (safe_int32_of_integer_ 
                                                                   (integer_of_uint8 
                                                                    (C_34:
                                                                    ((safe_acc_ !unsigned_charP_unsigned_charM_vect_1) 
                                                                    ((shift 
                                                                    (C_33:
                                                                    ((safe_acc_ !__anonstruct_S_1_a_vect_1) vect))) 
                                                                    (integer_of_uint8 !i))))))))) 
                                       (integer_of_int32 (C_32:
                                                         (safe_int32_of_integer_ 
                                                          (integer_of_uint8 
                                                           (C_31:
                                                           ((safe_acc_ !unsigned_charP_unsigned_charM_vect_1) 
                                                            ((shift (C_30:
                                                                    ((safe_acc_ !__anonstruct_S_1_b_vect_1) vect))) 
                                                             (integer_of_uint8 !i)))))))))))) in
              (let jessie_<somenum> =
              (C_38: ((safe_acc_ !__anonstruct_S_1_Sum_vect_1) vect)) in
              (let jessie_<somenum> = (integer_of_uint8 !i) in
              (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
              begin
                (((safe_upd_ unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>);
               jessie_<somenum> end))))) in void);
              (i := (C_43:
                    (safe_uint8_of_integer_ (C_42:
                                            ((add_int (integer_of_int32 
                                                       (C_41:
                                                       (safe_int32_of_integer_ 
                                                        (integer_of_uint8 !i))))) (1))))));
              !i end) in void); (raise (Loop_continue_exc void)) end with
           Loop_continue_exc jessie_<somenum> -> void end end done;
        (raise (Goto_while_0_break_exc void)) end)) with
       Goto_while_0_break_exc jessie_<somenum> -> (while_0_break: void) end;
      (raise Return) end); (raise Return) end with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>:
     (forall m_3:int.
      ((le_int((0), m_3) and lt_int(m_3, (3))) ->
       (integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                         shift(select(__anonstruct_S_1_Sum_vect_1, vect),
                         m_3))) = add_int(integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                                           shift(select(__anonstruct_S_1_a_vect_1,
                                                                 vect),
                                                           m_3))),
                                  integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                                   shift(select(__anonstruct_S_1_b_vect_1,
                                                         vect),
                                                   m_3))))))))
    and (JC_<somenum>:
        not_assigns(unsigned_charP_vect_1_alloc_table@,
        unsigned_charP_unsigned_charM_vect_1@,
        unsigned_charP_unsigned_charM_vect_1,
        pset_union(pset_range(pset_deref(__anonstruct_S_1_b_vect_1@,
                              pset_singleton(vect)),
                   (0), (2)),
        pset_union(pset_range(pset_deref(__anonstruct_S_1_Sum_vect_1@,
                              pset_singleton(vect)),
                   (0), (2)),
        pset_range(pset_deref(__anonstruct_S_1_a_vect_1@,
                   pset_singleton(vect)),
        (0), (2)))))))) }

let f_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      le_int(offset_min(unsigned_charP_vect_1_alloc_table,
             select(__anonstruct_S_1_a_vect_1, vect)),
      (0)))
     and ((JC_<somenum>:
          ge_int(offset_max(unsigned_charP_vect_1_alloc_table,
                 select(__anonstruct_S_1_a_vect_1, vect)),
          (2)))
         and ((JC_<somenum>:
              le_int(offset_min(unsigned_charP_vect_1_alloc_table,
                     select(__anonstruct_S_1_Sum_vect_1, vect)),
              (0)))
             and ((JC_<somenum>:
                  ge_int(offset_max(unsigned_charP_vect_1_alloc_table,
                         select(__anonstruct_S_1_Sum_vect_1, vect)),
                  (2)))
                 and ((JC_<somenum>:
                      le_int(offset_min(unsigned_charP_vect_1_alloc_table,
                             select(__anonstruct_S_1_b_vect_1, vect)),
                      (0)))
                     and ((JC_<somenum>:
                          ge_int(offset_max(unsigned_charP_vect_1_alloc_table,
                                 select(__anonstruct_S_1_b_vect_1, vect)),
                          (2)))
                         and (JC_<somenum>:
                             (forall i_1:int.
                              (forall j_0:int.
                               ((le_int((0), i_1)
                                and (le_int(i_1, (2))
                                    and (le_int((0), j_0)
                                        and le_int(j_0, (2))))) ->
                                ((shift(select(__anonstruct_S_1_a_vect_1,
                                        vect),
                                  i_1) <> shift(select(__anonstruct_S_1_b_vect_1,
                                                vect),
                                          j_0))
                                and ((shift(select(__anonstruct_S_1_a_vect_1,
                                            vect),
                                      i_1) <> shift(select(__anonstruct_S_1_Sum_vect_1,
                                                    vect),
                                              j_0))
                                    and (shift(select(__anonstruct_S_1_b_vect_1,
                                               vect),
                                         i_1) <> shift(select(__anonstruct_S_1_Sum_vect_1,
                                                       vect),
                                                 j_0))))))))))))))
    and (JC_<somenum>: valid_vect(__anonstruct_S_1_vect_1_alloc_table)))) }
  (init:
  try
   begin
     (let i = ref (any_uint8 void) in
     begin
       (let jessie_<somenum> =
       (let jessie_<somenum> =
       (assert { true };
       ((C_3:
        (C_6:
        (C_9:
        (C_12:
        (C_15:
        begin
          (let jessie_<somenum> = (safe_uint8_of_integer_ (1)) in
          (let jessie_<somenum> =
          (C_1: ((safe_acc_ !__anonstruct_S_1_a_vect_1) vect)) in
          (((safe_upd_ unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>)));
         (let jessie_<somenum> = (safe_uint8_of_integer_ (2)) in
         (let jessie_<somenum> =
         (C_4: ((safe_acc_ !__anonstruct_S_1_a_vect_1) vect)) in
         (let jessie_<somenum> = (1) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) (1)) in
         (((safe_upd_ unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>))))));
         (let jessie_<somenum> = (safe_uint8_of_integer_ (3)) in
         (let jessie_<somenum> =
         (C_7: ((safe_acc_ !__anonstruct_S_1_a_vect_1) vect)) in
         (let jessie_<somenum> = (2) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
         (((safe_upd_ unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>))))));
         (let jessie_<somenum> = (safe_uint8_of_integer_ (4)) in
         (let jessie_<somenum> =
         (C_10: ((safe_acc_ !__anonstruct_S_1_b_vect_1) vect)) in
         (((safe_upd_ unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>)));
         (let jessie_<somenum> = (safe_uint8_of_integer_ (5)) in
         (let jessie_<somenum> =
         (C_13: ((safe_acc_ !__anonstruct_S_1_b_vect_1) vect)) in
         (let jessie_<somenum> = (1) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
         (let jessie_<somenum> = ((shift jessie_<somenum>) (1)) in
         (((safe_upd_ unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>))))));
         (C_18:
         (let jessie_<somenum> = (safe_uint8_of_integer_ (6)) in
         begin
           (let jessie_<somenum> =
           (C_16: ((safe_acc_ !__anonstruct_S_1_b_vect_1) vect)) in
           (let jessie_<somenum> = (2) in
           (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
           (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
           (((safe_upd_ unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>)))));
          jessie_<somenum> end)) end))))))) in
       begin
         [ { } unit
           { ((JC_<somenum>: (true = true))
             and (JC_<somenum>:
                 not_assigns(unsigned_charP_vect_1_alloc_table@init,
                 unsigned_charP_unsigned_charM_vect_1@init,
                 unsigned_charP_unsigned_charM_vect_1,
                 pset_union(pset_range(pset_deref(__anonstruct_S_1_b_vect_1@,
                                       pset_singleton(vect)),
                            (0), (2)),
                 pset_range(pset_deref(__anonstruct_S_1_a_vect_1@,
                            pset_singleton(vect)),
                 (0), (2)))))) } ]; jessie_<somenum> end) in void);
      [ { } unit
        reads __anonstruct_S_1_Sum_vect_1,unsigned_charP_unsigned_charM_vect_1
        { (JC_<somenum>:
          (forall m:int.
           ((le_int((0), m) and lt_int(m, (3))) ->
            (integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                              shift(select(__anonstruct_S_1_Sum_vect_1, vect),
                              m))) = integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1@init,
                                                      shift(select(__anonstruct_S_1_Sum_vect_1@init,
                                                            vect),
                                                      m))))))) } ]; void;
      try
       (C_21:
       (loop_1:
       begin
         (let jessie_<somenum> = (i := (safe_uint8_of_integer_ (0))) in void);
        while true do
        { invariant (JC_<somenum>: true)
          variant (JC_<somenum> : sub_int((3), integer_of_uint8(i))) }
         begin
           [ { } unit
             reads __anonstruct_S_1_Sum_vect_1,__anonstruct_S_1_a_vect_1,__anonstruct_S_1_b_vect_1,i,unsigned_charP_unsigned_charM_vect_1
             { ((JC_<somenum>:
                (forall m_2:int.
                 ((le_int((0), m_2) and lt_int(m_2, integer_of_uint8(i))) ->
                  (integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                    shift(select(__anonstruct_S_1_Sum_vect_1,
                                          vect),
                                    m_2))) = add_int(integer_of_uint8(
                                                     select(unsigned_charP_unsigned_charM_vect_1,
                                                     shift(select(__anonstruct_S_1_a_vect_1,
                                                           vect),
                                                     m_2))),
                                             integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                                              shift(select(__anonstruct_S_1_b_vect_1,
                                                                    vect),
                                                              m_2))))))))
               and ((JC_<somenum>:
                    (forall m_1:int.
                     ((le_int(integer_of_uint8(i), m_1) and lt_int(m_1, (3))) ->
                      (integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                        shift(select(__anonstruct_S_1_Sum_vect_1,
                                              vect),
                                        m_1))) = integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1@init,
                                                                  shift(
                                                                  select(__anonstruct_S_1_Sum_vect_1@init,
                                                                  vect), m_1)))))))
                   and ((JC_<somenum>:
                        (forall m_0:int.
                         ((le_int((0), m_0) and lt_int(m_0, (3))) ->
                          ((integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                             shift(select(__anonstruct_S_1_a_vect_1,
                                                   vect),
                                             m_0))) = integer_of_uint8(
                                                      select(unsigned_charP_unsigned_charM_vect_1,
                                                      shift(select(__anonstruct_S_1_a_vect_1,
                                                            vect),
                                                      m_0))))
                          and (integer_of_uint8(select(unsigned_charP_unsigned_charM_vect_1,
                                                shift(select(__anonstruct_S_1_b_vect_1,
                                                      vect),
                                                m_0))) = integer_of_uint8(
                                                         select(unsigned_charP_unsigned_charM_vect_1,
                                                         shift(select(__anonstruct_S_1_b_vect_1,
                                                               vect),
                                                         m_0))))))))
                       and (JC_<somenum>:
                           ((JC_<somenum>: le_int((0), integer_of_uint8(i)))
                           and (JC_<somenum>: le_int(integer_of_uint8(i), (3)))))))) } ];
          try
           begin
             (let jessie_<somenum> =
             (C_44:
             begin
               (if ((lt_int_ (integer_of_int32 (C_29:
                                               (JC_<somenum>:
                                               (int32_of_integer_ (integer_of_uint8 !i)))))) (3))
               then void else (raise (Goto_while_0_break_exc void)));
              (let jessie_<somenum> =
              (C_40:
              (let jessie_<somenum> =
              (C_37:
              (JC_<somenum>:
              (uint8_of_integer_ (C_36:
                                 ((add_int (integer_of_int32 (C_35:
                                                             (JC_<somenum>:
                                                             (int32_of_integer_ 
                                                              (integer_of_uint8 
                                                               (C_34:
                                                               (JC_<somenum>:
                                                               ((((offset_acc_ !unsigned_charP_vect_1_alloc_table) !unsigned_charP_unsigned_charM_vect_1) 
                                                                 (C_33:
                                                                 ((safe_acc_ !__anonstruct_S_1_a_vect_1) vect))) 
                                                                (integer_of_uint8 !i)))))))))) 
                                  (integer_of_int32 (C_32:
                                                    (JC_<somenum>:
                                                    (int32_of_integer_ 
                                                     (integer_of_uint8 
                                                      (C_31:
                                                      (JC_<somenum>:
                                                      ((((offset_acc_ !unsigned_charP_vect_1_alloc_table) !unsigned_charP_unsigned_charM_vect_1) 
                                                        (C_30:
                                                        ((safe_acc_ !__anonstruct_S_1_b_vect_1) vect))) 
                                                       (integer_of_uint8 !i)))))))))))))) in
              (let jessie_<somenum> =
              (C_38: ((safe_acc_ !__anonstruct_S_1_Sum_vect_1) vect)) in
              (let jessie_<somenum> = (integer_of_uint8 !i) in
              (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
              (JC_<somenum>:
              begin
                (((((offset_upd_ !unsigned_charP_vect_1_alloc_table) unsigned_charP_unsigned_charM_vect_1) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>);
               jessie_<somenum> end)))))) in void);
              (i := (C_43:
                    (JC_<somenum>:
                    (uint8_of_integer_ (C_42:
                                       ((add_int (integer_of_int32 (C_41:
                                                                   (JC_<somenum>:
                                                                   (int32_of_integer_ 
                                                                    (integer_of_uint8 !i)))))) (1)))))));
              !i end) in void); (raise (Loop_continue_exc void)) end with
           Loop_continue_exc jessie_<somenum> -> void end end done;
        (raise (Goto_while_0_break_exc void)) end)) with
       Goto_while_0_break_exc jessie_<somenum> -> (while_0_break: void) end;
      (raise Return) end); (raise Return) end with Return -> void end)
  { (JC_<somenum>: valid_vect(__anonstruct_S_1_vect_1_alloc_table)) }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C sum3.jessie --quiet -f sum3.makefile project
why --project [...] why/sum3.why
<project name="sum3" context="why/sum3_ctx.why">
  <function name="Function f">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/sum3_po1.why">
      <location file = "PPCHOME/tests/jessie/sum3.jessie/sum3.jc" line = "81" begin = "8" end = "458"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/sum3_po2.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "29" begin = "11" end = "80"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/sum3_po3.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "35" begin = "17" end = "87"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/sum3_po4.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "34" begin = "17" end = "86"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/sum3_po5.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "32" begin = "19" end = "25"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/sum3_po6.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "32" begin = "24" end = "30"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/sum3_po7.why">
      <location file = "PPCHOME/tests/jessie/sum3.jessie/sum3.jc" line = "101" begin = "9" end = "1808"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/sum3_po8.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "35" begin = "17" end = "87"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/sum3_po9.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "34" begin = "17" end = "86"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/sum3_po10.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "32" begin = "19" end = "25"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/sum3_po11.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "32" begin = "24" end = "30"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/sum3_po12.why">
      <location file = "PPCHOME/tests/jessie/sum3.jessie/sum3.jc" line = "101" begin = "9" end = "1808"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/sum3_po13.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "15" begin = "11" end = "81"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/sum3_po14.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "17" begin = "5" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/sum3_po15.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "39" begin = "16" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/sum3_po16.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "39" begin = "16" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/sum3_po17.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "40" begin = "14" end = "23"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/sum3_po18.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "40" begin = "14" end = "23"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/sum3_po19.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "40" begin = "14" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/sum3_po20.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "40" begin = "14" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/sum3_po21.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "40" begin = "26" end = "35"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/sum3_po22.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "40" begin = "26" end = "35"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/sum3_po23.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "40" begin = "26" end = "35"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/sum3_po24.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "40" begin = "26" end = "35"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/sum3_po25.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "40" begin = "14" end = "35"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/sum3_po26.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "40" begin = "14" end = "35"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/sum3_po27.why">
      <location file = "why/sum3.why" line = "1117" begin = "17" end = "138"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/sum3_po28.why">
      <location file = "why/sum3.why" line = "1117" begin = "17" end = "138"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/sum3_po29.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "39" begin = "25" end = "26"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/sum3_po30.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "39" begin = "25" end = "26"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/sum3_po31.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "39" begin = "23" end = "26"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/sum3_po32.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "39" begin = "23" end = "26"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/sum3_po33.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "37" begin = "15" end = "18"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/sum3_po34.why">
      <location file = "PPCHOME/tests/jessie/sum3.c" line = "37" begin = "15" end = "18"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type __anonstruct_S_1

type charP

type int32

type int8

type padding

type uint8

type unsigned_charP

type vect_1

type voidP

logic __anonstruct_S_1_tag : __anonstruct_S_1 tag_id

axiom __anonstruct_S_1_int: (int_of_tag(__anonstruct_S_1_tag) = 1)

logic __anonstruct_S_1_of_pointer_address : unit pointer -> __anonstruct_S_1 pointer

axiom __anonstruct_S_1_of_pointer_address_of_pointer_addr:
  (forall p:__anonstruct_S_1 pointer.
    (p = __anonstruct_S_1_of_pointer_address(pointer_address(p))))

axiom __anonstruct_S_1_parenttag_bottom: parenttag(__anonstruct_S_1_tag,
  bottom_tag)

axiom __anonstruct_S_1_tags:
  (forall x:__anonstruct_S_1 pointer.
    (forall __anonstruct_S_1_tag_table:__anonstruct_S_1 tag_table.
      instanceof(__anonstruct_S_1_tag_table, x, __anonstruct_S_1_tag)))

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint8 : uint8 -> int

predicate eq_uint8(x: uint8, y: uint8) =
  (integer_of_uint8(x) = integer_of_uint8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32 [(integer_of_int32(x) = integer_of_int32(y))].
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8 [(integer_of_int8(x) = integer_of_int8(y))].
      ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct___anonstruct_S_1(p: __anonstruct_S_1 pointer,
  a: int, __anonstruct_S_1_alloc_table: __anonstruct_S_1 alloc_table,
  unsigned_charP_alloc_table: unsigned_charP alloc_table,
  __anonstruct_S_1_Sum: (__anonstruct_S_1, unsigned_charP pointer) memory,
  __anonstruct_S_1_a: (__anonstruct_S_1, unsigned_charP pointer) memory,
  __anonstruct_S_1_b: (__anonstruct_S_1, unsigned_charP pointer) memory) =
  ((offset_min(__anonstruct_S_1_alloc_table, p) <= a) and
   (left_valid_struct_unsigned_charP(select(__anonstruct_S_1_a, p), 0,
    unsigned_charP_alloc_table) and
    (left_valid_struct_unsigned_charP(select(__anonstruct_S_1_Sum, p), 0,
     unsigned_charP_alloc_table) and
     left_valid_struct_unsigned_charP(select(__anonstruct_S_1_b, p), 0,
     unsigned_charP_alloc_table))))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of___anonstruct_S_1_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(__anonstruct_S_1_of_pointer_address(p))))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct___anonstruct_S_1(p: __anonstruct_S_1 pointer,
  b: int, __anonstruct_S_1_alloc_table: __anonstruct_S_1 alloc_table,
  unsigned_charP_alloc_table: unsigned_charP alloc_table,
  __anonstruct_S_1_Sum: (__anonstruct_S_1, unsigned_charP pointer) memory,
  __anonstruct_S_1_a: (__anonstruct_S_1, unsigned_charP pointer) memory,
  __anonstruct_S_1_b: (__anonstruct_S_1, unsigned_charP pointer) memory) =
  ((offset_max(__anonstruct_S_1_alloc_table, p) >= b) and
   (right_valid_struct_unsigned_charP(select(__anonstruct_S_1_a, p), 2,
    unsigned_charP_alloc_table) and
    (right_valid_struct_unsigned_charP(select(__anonstruct_S_1_Sum, p), 2,
     unsigned_charP_alloc_table) and
     right_valid_struct_unsigned_charP(select(__anonstruct_S_1_b, p), 2,
     unsigned_charP_alloc_table))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root___anonstruct_S_1(p: __anonstruct_S_1 pointer,
  a: int, b: int,
  __anonstruct_S_1_alloc_table: __anonstruct_S_1 alloc_table) =
  ((offset_min(__anonstruct_S_1_alloc_table, p) = a) and
   (offset_max(__anonstruct_S_1_alloc_table, p) = b))

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct___anonstruct_S_1(p: __anonstruct_S_1 pointer,
  a: int, b: int, __anonstruct_S_1_alloc_table: __anonstruct_S_1 alloc_table,
  unsigned_charP_alloc_table: unsigned_charP alloc_table,
  __anonstruct_S_1_Sum: (__anonstruct_S_1, unsigned_charP pointer) memory,
  __anonstruct_S_1_a: (__anonstruct_S_1, unsigned_charP pointer) memory,
  __anonstruct_S_1_b: (__anonstruct_S_1, unsigned_charP pointer) memory) =
  ((offset_min(__anonstruct_S_1_alloc_table, p) = a) and
   ((offset_max(__anonstruct_S_1_alloc_table, p) = b) and
    (strict_valid_struct_unsigned_charP(select(__anonstruct_S_1_a, p), 0, 2,
     unsigned_charP_alloc_table) and
     (strict_valid_struct_unsigned_charP(select(__anonstruct_S_1_Sum, p), 0,
      2, unsigned_charP_alloc_table) and
      strict_valid_struct_unsigned_charP(select(__anonstruct_S_1_b, p), 0, 2,
      unsigned_charP_alloc_table)))))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint8_of_integer : int -> uint8

axiom uint8_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 255)) -> (integer_of_uint8(uint8_of_integer(x)) = x)))

axiom uint8_extensionality:
  (forall x:uint8.
    (forall y:uint8 [(integer_of_uint8(x) = integer_of_uint8(y))].
      ((integer_of_uint8(x) = integer_of_uint8(y)) -> (x = y))))

axiom uint8_range:
  (forall x:uint8.
    ((0 <= integer_of_uint8(x)) and (integer_of_uint8(x) <= 255)))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root___anonstruct_S_1(p: __anonstruct_S_1 pointer, a: int,
  b: int, __anonstruct_S_1_alloc_table: __anonstruct_S_1 alloc_table) =
  ((offset_min(__anonstruct_S_1_alloc_table, p) <= a) and
   (offset_max(__anonstruct_S_1_alloc_table, p) >= b))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct___anonstruct_S_1(p: __anonstruct_S_1 pointer, a: int,
  b: int, __anonstruct_S_1_alloc_table: __anonstruct_S_1 alloc_table,
  unsigned_charP_alloc_table: unsigned_charP alloc_table,
  __anonstruct_S_1_Sum: (__anonstruct_S_1, unsigned_charP pointer) memory,
  __anonstruct_S_1_a: (__anonstruct_S_1, unsigned_charP pointer) memory,
  __anonstruct_S_1_b: (__anonstruct_S_1, unsigned_charP pointer) memory) =
  ((offset_min(__anonstruct_S_1_alloc_table, p) <= a) and
   ((offset_max(__anonstruct_S_1_alloc_table, p) >= b) and
    (valid_struct_unsigned_charP(select(__anonstruct_S_1_a, p), 0, 2,
     unsigned_charP_alloc_table) and
     (valid_struct_unsigned_charP(select(__anonstruct_S_1_Sum, p), 0, 2,
      unsigned_charP_alloc_table) and
      valid_struct_unsigned_charP(select(__anonstruct_S_1_b, p), 0, 2,
      unsigned_charP_alloc_table)))))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic vect : __anonstruct_S_1 pointer

predicate valid_vect(__anonstruct_S_1_vect_1_alloc_table: __anonstruct_S_1 alloc_table) =
  ((offset_min(__anonstruct_S_1_vect_1_alloc_table, vect) <= 0) and
   (offset_max(__anonstruct_S_1_vect_1_alloc_table, vect) >= 0))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

