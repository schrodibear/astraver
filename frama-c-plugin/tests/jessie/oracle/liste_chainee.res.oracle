*** Begin Jessie file generated for diff ***
cat liste_chainee.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag enum___anonenum_T_NATURE_MSG_2_P = void_P with {
  __anonenum_T_NATURE_MSG_2 enum___anonenum_T_NATURE_MSG_2_M;
}

tag char__x__41_P = {
  char_P[0..40] char__x__41_M;
}

type char__x__41_P = [char__x__41_P]

tag char_P = void_P with {
  int8 char_M;
}

tag STR_SIGNAL_xP = {
  __anonstruct_STR_SIGNAL_7[..] STR_SIGNAL_xM;
}

type STR_SIGNAL_xP = [STR_SIGNAL_xP]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
}

type void_P = [void_P]

invariant valid_Page :
((\offset_min(Page) <= 0) && (\offset_max(Page) >= 0))

invariant valid_ordinal_dans_les_messages :
((\offset_min(ordinal_dans_les_messages) <= 0) &&
  (\offset_max(ordinal_dans_les_messages) >= 17))

invariant valid_ordinal_dans_les_signaux :
((\offset_min(ordinal_dans_les_signaux) <= 0) &&
  (\offset_max(ordinal_dans_les_signaux) >= 17))

invariant valid_ListeSignaux :
((\offset_min(ListeSignaux) <= 0) && (\offset_max(ListeSignaux) >= 99))

invariant valid___string_liste_chainee_c_1 :
((\offset_min(__string_liste_chainee_c_1) <= 0) &&
  (\offset_max(__string_liste_chainee_c_1) >= 15))

char_P[0..15] __string_liste_chainee_c_1;

type __anonenum_BOOLEAN_1 = 0..1

type __anonenum_T_NATURE_MSG_2 = 0..1

tag __anonstruct_T_1MSG16C_3 = enum___anonenum_T_NATURE_MSG_2_P with {
  char_P[0..15] TEXTE;
}

tag __anonstruct_T_2MSG41C_4 = enum___anonenum_T_NATURE_MSG_2_P with {
  char_P[0..40] TEXTE1; 
  char_P[0..40] TEXTE2;
}

tag STR_MESSAGE_ = {
  void_P[..] PTR; 
  __anonenum_BOOLEAN_1 VISIBLE; 
  STR_MESSAGE_[..] MESSAGESUIVANT;
}

type STR_MESSAGE_ = [STR_MESSAGE_]

type __anonenum_T_TYPE_5 = 0..1

tag __anonstruct_T_SIGNAL_6 = {
  __anonenum_T_TYPE_5 TYPE; 
  int32 PRIORITE;
}

type __anonstruct_T_SIGNAL_6 = [__anonstruct_T_SIGNAL_6]

tag __anonstruct_STR_SIGNAL_7 = {
  __anonstruct_T_SIGNAL_6[..] DEF; 
  __anonenum_BOOLEAN_1 ACTIF; 
  STR_MESSAGE_[..] MESSAGE;
}

type __anonstruct_STR_SIGNAL_7 = [__anonstruct_STR_SIGNAL_7]

tag __anonstruct_T_CompositionPage_8 = void_P with {
  int32 IndexLigne; 
  char__x__41_P[0..17] Texte;
}

logic int32 strlen{L}(char_P[..] s) reads (s + [0..]).char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      ((((0 <= k) && (k <= i)) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

logic T_1MSG16C_inv{Here}(__anonstruct_T_1MSG16C_3[0] t) =
((((t :> enum___anonenum_T_NATURE_MSG_2_P).enum___anonenum_T_NATURE_MSG_2_M ==
    0) &&
   ((\offset_min(t.TEXTE) <= 0) && (\offset_max(t.TEXTE) >= (16 - 1)))) &&
  ((0 <= strlen{Here}(t.TEXTE)) && (strlen{Here}(t.TEXTE) < 16)))

logic T_2MSG41C_inv{Here}(__anonstruct_T_2MSG41C_4[0] t) =
((((((t :> enum___anonenum_T_NATURE_MSG_2_P).enum___anonenum_T_NATURE_MSG_2_M ==
      1) &&
     ((\offset_min(t.TEXTE1) <= 0) && (\offset_max(t.TEXTE1) >= (41 - 1)))) &&
    ((0 <= strlen{Here}(t.TEXTE1)) && (strlen{Here}(t.TEXTE1) < 41))) &&
   ((\offset_min(t.TEXTE2) <= 0) && (\offset_max(t.TEXTE2) >= (41 - 1)))) &&
  ((0 <= strlen{Here}(t.TEXTE2)) && (strlen{Here}(t.TEXTE2) < 41)))

logic STR_MESSAGE_inv{Here}(STR_MESSAGE_[0] str) =
(((str.PTR <: enum___anonenum_T_NATURE_MSG_2_P) &&
   ((\offset_min((str.PTR :> enum___anonenum_T_NATURE_MSG_2_P)) <= 0) &&
     (\offset_max((str.PTR :> enum___anonenum_T_NATURE_MSG_2_P)) >= 0))) &&
  ((((((str.PTR :> enum___anonenum_T_NATURE_MSG_2_P).enum___anonenum_T_NATURE_MSG_2_M ==
        0) &&
       (str.PTR <: __anonstruct_T_1MSG16C_3)) &&
      ((\offset_min((str.PTR :> __anonstruct_T_1MSG16C_3)) <= 0) &&
        (\offset_max((str.PTR :> __anonstruct_T_1MSG16C_3)) >= 0))) &&
     T_1MSG16C_inv{Here}((str.PTR :> __anonstruct_T_1MSG16C_3))) ||
    (((((str.PTR :> enum___anonenum_T_NATURE_MSG_2_P).enum___anonenum_T_NATURE_MSG_2_M ==
         1) &&
        (str.PTR <: __anonstruct_T_2MSG41C_4)) &&
       ((\offset_min((str.PTR :> __anonstruct_T_2MSG41C_4)) <= 0) &&
         (\offset_max((str.PTR :> __anonstruct_T_2MSG41C_4)) >= 0))) &&
      T_2MSG41C_inv{Here}((str.PTR :> __anonstruct_T_2MSG41C_4)))))

logic STR_MESSAGE_reference{L}(STR_MESSAGE_[..] str) =
(((\offset_min(str) <= 0) && (\offset_max(str) >= 0)) &&
  STR_MESSAGE_inv{L}(str))

logic STR_MESSAGE_pointer{Here}(STR_MESSAGE_[..] str) =
((str == null) || STR_MESSAGE_reference{Here}(str))

axiom STR_MESSAGE_inv_def{L} :
(\forall STR_MESSAGE_[0] str;
  (STR_MESSAGE_inv{L}(str) ==> STR_MESSAGE_pointer{L}(str.MESSAGESUIVANT)))

logic STR_SIGNAL_inv{Here}(__anonstruct_STR_SIGNAL_7[0] sig) =
(((\offset_min(sig.DEF) <= 0) && (\offset_max(sig.DEF) >= 0)) &&
  STR_MESSAGE_pointer{Here}(sig.MESSAGE))

logic STR_SIGNAL_reference{L}(__anonstruct_STR_SIGNAL_7[..] sig) =
(((\offset_min(sig) <= 0) && (\offset_max(sig) >= 0)) &&
  STR_SIGNAL_inv{L}(sig))

logic STR_SIGNAL_pointer{Here}(__anonstruct_STR_SIGNAL_7[..] sig) =
((sig == null) || STR_SIGNAL_reference{Here}(sig))

logic T_CompositionPage_inv{Here}(__anonstruct_T_CompositionPage_8[0] page) =
((((0 <= page.IndexLigne) && (page.IndexLigne <= 18)) &&
   ((\offset_min(page.Texte) <= 0) && (\offset_max(page.Texte) >= (18 - 1)))) &&
  (\forall integer k;
    (((0 <= k) && (k < 18)) ==>
      ((\offset_min((page.Texte + k).char__x__41_M) <= 0) &&
        (\offset_max((page.Texte + k).char__x__41_M) >= (41 - 1))))))

STR_SIGNAL_xP[0..99] ListeSignaux;

logic ListeSignaux_inv{L}(STR_SIGNAL_xP[..] ListeSignaux) =
(\forall integer k;
  (((0 <= k) && (k < 100)) ==>
    STR_SIGNAL_reference{L}((ListeSignaux + k).STR_SIGNAL_xM)))

invariant ListeSignaux_globinv :
ListeSignaux_inv{Here}(ListeSignaux)

__anonstruct_T_CompositionPage_8[0] Page;

invariant Page_globinv :
T_CompositionPage_inv{Here}(Page)

int32 signal_courant;

int32 message_courant;

int_P[0..17] ordinal_dans_les_signaux;

int_P[0..17] ordinal_dans_les_messages;

logic messages_dans_l_ordre{L}(integer i, integer j) =
(((ordinal_dans_les_signaux + i).int_M <
   (ordinal_dans_les_signaux + j).int_M) ||
  (((ordinal_dans_les_signaux + i).int_M ==
     (ordinal_dans_les_signaux + j).int_M) &&
    ((ordinal_dans_les_messages + i).int_M <
      (ordinal_dans_les_messages + j).int_M)))

logic signal_et_message_courants_max{L}() =
(\forall integer k;
  (((0 <= k) && (k < Page.IndexLigne)) ==>
    (((ordinal_dans_les_signaux + k).int_M < signal_courant) ||
      (((ordinal_dans_les_signaux + k).int_M == signal_courant) &&
        ((ordinal_dans_les_messages + k).int_M < message_courant)))))

logic signal_courant_max{L}() =
(\forall integer k;
  (((0 <= k) && (k < Page.IndexLigne)) ==>
    ((ordinal_dans_les_signaux + k).int_M < signal_courant)))

logic messages_courants_dans_l_ordre{L}() =
(\forall integer k;
  (((0 < k) && (k < Page.IndexLigne)) ==>
    messages_dans_l_ordre{L}((k - 1), k)))

logic int32 strncmp2{L1,
L2}(char_P[..] s1, char_P[..] s2, integer n) reads \at((s1 + [0..(n - 1)]).char_M,L1),
\at((s2 + [0..(n - 1)]).char_M,L2);

logic int32 strncmp{L1}(char_P[..] s1, char_P[..] s2, integer n) =
strncmp2{L1, L1}(s1, s2, n)

logic int32 strcmp2{L1,
L2}(char_P[..] s1, char_P[..] s2) reads \at((s1 + [0..]).char_M,L1),
\at((s2 + [0..]).char_M,L2);

logic int32 strcmp{L1}(char_P[..] s1, char_P[..] s2) =
strcmp2{L1, L1}(s1, s2)

axiom strncmp2_zero{L1,
L2} :
(\forall char_P[..] s1;
  (\forall char_P[..] s2;
    (strncmp2{L1, L2}(s1, s2, 0) == 0)))

axiom strncmp2_inverse{L1,
L2} :
(\forall char_P[..] s1;
  (\forall char_P[..] s2;
    (\forall integer n;
      (strncmp2{L1, L2}(s1, s2, n) == (- strncmp2{L2, L1}(s2, s1, n))))))

axiom strncmp2_extend{L1,
L2} :
(\forall char_P[..] s1;
  (\forall char_P[..] s2;
    (\forall integer n;
      ((((0 <= n) && (strncmp2{L1, L2}(s1, s2, n) == 0)) &&
         (\at((s1 + n).char_M,L1) == \at((s2 + n).char_M,L2))) ==>
        (strncmp2{L1, L2}(s1, s2, (n + 1)) == 0)))))

axiom strcmp2_strncmp2_left{L1,
L2} :
(\forall char_P[..] s1;
  (\forall char_P[..] s2;
    (\forall integer n;
      (((strncmp2{L1, L2}(s1, s2, n) == 0) && (n == strlen{L1}(s1))) ==>
        (strcmp2{L1, L2}(s1, s2) == 0)))))

axiom strcmp2_strncmp2_right{L1,
L2} :
(\forall char_P[..] s1;
  (\forall char_P[..] s2;
    (\forall integer n;
      (((strncmp2{L1, L2}(s1, s2, n) == 0) && (n == strlen{L2}(s2))) ==>
        (strcmp2{L1, L2}(s1, s2) == 0)))))

logic eq_string{L}(char_P[..] s1, char_P[..] s2) =
(strcmp{L}(s1, s2) == 0)

logic eq_string2{L1,
L2}(char_P[..] s1, char_P[..] s2) =
(strcmp2{L1, L2}(s1, s2) == 0)

logic eq_message{L}(char_P[..] s, enum___anonenum_T_NATURE_MSG_2_P[..] m) =
(((m.enum___anonenum_T_NATURE_MSG_2_M == 0) &&
   eq_string{L}(s, (m :> __anonstruct_T_1MSG16C_3).TEXTE)) ||
  ((m.enum___anonenum_T_NATURE_MSG_2_M == 1) &&
    eq_string{L}(s, (m :> __anonstruct_T_2MSG41C_4).TEXTE2)))

logic atteignable{L}(STR_MESSAGE_[..] msg1, STR_MESSAGE_[..] msg2) reads msg1.MESSAGESUIVANT;

axiom atteignable_left{L} :
(\forall STR_MESSAGE_[..] msg1;
  (\forall STR_MESSAGE_[..] msg2;
    (atteignable{L}(msg1, msg2) ==>
      (((msg1 - msg2) == 0) || atteignable{L}(msg1.MESSAGESUIVANT, msg2)))))

axiom atteignable_right{L} :
(\forall STR_MESSAGE_[..] msg1;
  (\forall STR_MESSAGE_[..] msg2;
    ((atteignable{L}(msg1, msg2) && (msg2 != null)) ==>
      atteignable{L}(msg1, msg2.MESSAGESUIVANT))))

axiom atteignable_self{L} :
(\forall STR_MESSAGE_[..] msg;
  atteignable{L}(msg, msg))

logic int32 longueur_liste{L}(STR_MESSAGE_[..] msg) reads msg.MESSAGESUIVANT;

axiom longueur_liste_null{L} :
(longueur_liste{L}(null) == 0)

axiom longueur_liste_rec{L} :
(\forall STR_MESSAGE_[..] msg;
  ((msg != null) ==>
    (longueur_liste{L}(msg) == (longueur_liste{L}(msg.MESSAGESUIVANT) + 1))))

axiom longueur_liste_pos{L} :
(\forall STR_MESSAGE_[..] msg;
  (longueur_liste{L}(msg) >= 0))

logic est_un_bon_message{L}(char_P[..] s) =
(\exists integer j;
  (((((0 <= j) && (j < 100)) &&
      ((ListeSignaux + j).STR_SIGNAL_xM.ACTIF != 0)) &&
     ((ListeSignaux + j).STR_SIGNAL_xM.DEF.TYPE == 0)) &&
    (\exists STR_MESSAGE_[..] msg;
      (((msg.VISIBLE != 0) &&
         ((((ListeSignaux + j).STR_SIGNAL_xM.MESSAGE - msg) == 0) ||
           atteignable{L}((ListeSignaux + j).STR_SIGNAL_xM.MESSAGE, msg))) &&
        eq_message{L}(s, (msg.PTR :> enum___anonenum_T_NATURE_MSG_2_P))))))

unit ComposerPage()
behavior default_1:
  assumes true;
  assigns signal_courant,
  message_courant;
  ensures (C_30 : true);
behavior messages_affiches_sont_bons:
  assumes true;
  ensures (C_31 : (\forall integer k;
                    (((0 <= k) && (k < Page.IndexLigne)) ==>
                      est_un_bon_message{Here}((Page.Texte + k).char__x__41_M))));
behavior messages_affiches_dans_l_ordre:
  assumes true;
  ensures (C_32 : messages_courants_dans_l_ordre());
{  
   (var __anonstruct_STR_SIGNAL_7[..] Signal);
   
   (var int32 i);
   
   {  (C_1 : (i = 0));
      (C_2 : (signal_courant = 0));
      (C_3 : MemSet(Page, 0, 744));
      
      {  
         (assert for messages_affiches_sont_bons: (C_4 : (Page.IndexLigne ==
                                                           0)));
         ()
      };
      
      {  
         (assert for messages_affiches_dans_l_ordre: (C_5 : (Page.IndexLigne ==
                                                              0)));
         ()
      };
      
      {  
         
         invariant (C_6 : ((C_7 : T_CompositionPage_inv{Here}(Page)) &&
                            ((C_9 : (0 <= i)) && (C_10 : (i <= 100)))));
         invariant for messages_affiches_sont_bons: (C_11 : (\forall integer k;
                                                              (((0 <= k) &&
                                                                 (k <
                                                                   Page.IndexLigne)) ==>
                                                                est_un_bon_message{Here}(
                                                                (Page.Texte +
                                                                  k).char__x__41_M))));
         invariant for messages_affiches_dans_l_ordre: (C_12 : ((C_13 : signal_courant_max(
                                                                )) &&
                                                                 (C_14 : messages_courants_dans_l_ordre(
                                                                 ))));
         variant (C_15 : (100 - i));
         while (true)
         {  
            {  (if (i < 100) then (if ((C_16 : Page.IndexLigne) < 18) then () else 
                                  (goto while_0_break)) else 
               (goto while_0_break));
               (C_18 : (Signal = (C_17 : (ListeSignaux + i).STR_SIGNAL_xM)));
               (if ((C_23 : Signal.ACTIF) != 0) then (if ((C_22 : ((C_21 : 
                                                                   (C_20 : Signal.DEF).TYPE) :> int32)) ==
                                                           0) then (C_19 : ComposerMessages(
                                                                   Signal)) else ()) else ());
               (C_26 : (i = (C_25 : ((C_24 : (i + 1)) :> int32))));
               (C_29 : (signal_courant = (C_28 : ((C_27 : (signal_courant +
                                                            1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      (return ())
   }
}

unit ComposerMessages(__anonstruct_STR_SIGNAL_7[..] Signal)
  requires (C_61 : STR_SIGNAL_reference{Here}(Signal));
behavior default_2:
  assumes true;
  assigns Page.IndexLigne,
  ((Page.Texte + [\old(Page.IndexLigne)..(Page.IndexLigne - 1)]).char__x__41_M +
    [..]).char_M,
  message_courant,
  (ordinal_dans_les_signaux + [\old(Page.IndexLigne)..(Page.IndexLigne - 1)]).int_M,
  (ordinal_dans_les_messages +
    [\old(Page.IndexLigne)..(Page.IndexLigne - 1)]).int_M;
  ensures (C_62 : true);
behavior ajoute_signal_actif_et_textuel:
  assumes (((Signal.ACTIF != 0) && (Signal.DEF.TYPE == 0)) &&
            (\exists integer j;
              (((0 <= j) && (j < 100)) &&
                ((Signal - (ListeSignaux + j).STR_SIGNAL_xM) == 0))));
  assigns Page.IndexLigne,
  ((Page.Texte + [\old(Page.IndexLigne)..Page.IndexLigne]).char__x__41_M +
    [..]).char_M;
  ensures (C_63 : (\forall integer k;
                    (((\old(Page.IndexLigne) <= k) && (k < Page.IndexLigne)) ==>
                      est_un_bon_message{Here}((Page.Texte + k).char__x__41_M))));
behavior ajoute_messages_dans_l_ordre:
  assumes (signal_courant_max() && messages_courants_dans_l_ordre());
  ensures (C_64 : ((C_65 : signal_et_message_courants_max()) &&
                    (C_66 : messages_courants_dans_l_ordre())));
{  
   (var STR_MESSAGE_[..] Message);
   
   {  (C_34 : (Message = (C_33 : Signal.MESSAGE)));
      (C_35 : (message_courant = 0));
      
      {  
         
         invariant (C_36 : (((C_38 : (0 <= Page.IndexLigne)) &&
                              (C_39 : (Page.IndexLigne <= 18))) &&
                             (C_40 : STR_MESSAGE_pointer{Here}(Message))));
         invariant for ajoute_signal_actif_et_textuel: (C_41 : ((C_42 : atteignable{Here}(
                                                                Signal.MESSAGE,
                                                                Message)) &&
                                                                 (C_43 : 
                                                                 (\forall integer k;
                                                                   (((\at(Page.IndexLigne,Pre) <=
                                                                    k) &&
                                                                    (k <
                                                                    Page.IndexLigne)) ==>
                                                                    est_un_bon_message{Here}(
                                                                    (Page.Texte +
                                                                    k).char__x__41_M))))));
         invariant for ajoute_messages_dans_l_ordre: (C_44 : ((C_45 : signal_et_message_courants_max(
                                                              )) &&
                                                               (C_46 : messages_courants_dans_l_ordre(
                                                               ))));
         variant (C_47 : longueur_liste{Here}(Message));
         while (true)
         {  
            {  (if (Message != null) then (if ((C_48 : Page.IndexLigne) < 18) then () else 
                                          (goto while_1_break)) else 
               (goto while_1_break));
               (if ((C_55 : Message.VISIBLE) != 0) then 
               {  (C_49 : ComposerMsg(Message));
                  (C_54 : ((C_53 : Page.IndexLigne) = (C_52 : ((C_51 : 
                                                               ((C_50 : Page.IndexLigne) +
                                                                 1)) :> int32))))
               } else ());
               (C_57 : (Message = (C_56 : Message.MESSAGESUIVANT)));
               (C_60 : (message_courant = (C_59 : ((C_58 : (message_courant +
                                                             1)) :> int32))))
            }
         };
         (while_1_break : ())
      };
      
      (return ())
   }
}

unit ComposerMsg(STR_MESSAGE_[..] Msg)
  requires (C_97 : ((C_98 : (Page.IndexLigne < 18)) &&
                     (C_99 : STR_MESSAGE_reference{Here}(Msg))));
behavior default_3:
  assumes true;
  assigns ((Page.Texte + Page.IndexLigne).char__x__41_M + [..]).char_M,
  (ordinal_dans_les_signaux + Page.IndexLigne).int_M,
  (ordinal_dans_les_messages + Page.IndexLigne).int_M;
  ensures (C_100 : true);
behavior ajoute_message_visible:
  assumes (\exists integer j;
            (((0 <= j) && (j < 100)) &&
              atteignable{Here}((ListeSignaux + j).STR_SIGNAL_xM.MESSAGE, Msg)));
  assigns ((Page.Texte + Page.IndexLigne).char__x__41_M + [..]).char_M;
  ensures (C_101 : eq_message{Here}((Page.Texte + Page.IndexLigne).char__x__41_M,
                                    (Msg.PTR :> enum___anonenum_T_NATURE_MSG_2_P)));
behavior ajoute_message_max:
  assumes true;
  ensures (C_102 : ((C_103 : ((ordinal_dans_les_signaux + Page.IndexLigne).int_M ==
                               signal_courant)) &&
                     (C_104 : ((ordinal_dans_les_messages + Page.IndexLigne).int_M ==
                                message_courant))));
{  
   (var __anonstruct_T_1MSG16C_3[..] Ligne1Etat);
   
   (var __anonstruct_T_2MSG41C_4[..] Ligne2Etats);
   
   (var enum___anonenum_T_NATURE_MSG_2_P[..] Nature);
   
   {  (C_69 : (Nature = (C_68 : ((C_67 : Msg.PTR) :> enum___anonenum_T_NATURE_MSG_2_P))));
      (C_72 : ((C_71 : (ordinal_dans_les_signaux + (C_70 : Page.IndexLigne)).int_M) = signal_courant));
      (C_75 : ((C_74 : (ordinal_dans_les_messages + (C_73 : Page.IndexLigne)).int_M) = message_courant));
      
      {  
         switch ((C_96 : ((C_95 : Nature.enum___anonenum_T_NATURE_MSG_2_M) :> int32))) {
           case 0:
           {  (C_78 : (Ligne1Etat = (C_77 : ((C_76 : Msg.PTR) :> __anonstruct_T_1MSG16C_3))));
              (C_83 : StrCpy((C_81 : ((C_80 : Page.Texte) +
                                       (C_79 : Page.IndexLigne)).char__x__41_M),
                             (C_82 : Ligne1Etat.TEXTE)));
              
              (goto switch_2_break)
           }
           case 1:
           {  (C_86 : (Ligne2Etats = (C_85 : ((C_84 : Msg.PTR) :> __anonstruct_T_2MSG41C_4))));
              (C_91 : StrCpy((C_89 : ((C_88 : Page.Texte) +
                                       (C_87 : Page.IndexLigne)).char__x__41_M),
                             (C_90 : Ligne2Etats.TEXTE2)));
              
              (goto switch_2_break)
           }
           default:
           {  ();
              (C_94 : DeclarerPanneRobustesse(__string_liste_chainee_c_1,
                                              510,
                                              (C_93 : ((C_92 : Nature.enum___anonenum_T_NATURE_MSG_2_M) :> int32))))
           }
         };
         (switch_2_break : ())
      };
      
      (return ())
   }
}

unit StrCpy(char_P[..] Chaine1, char_P[..] Chaine2)
  requires (C_139 : (((C_141 : (0 <= strlen{Here}(Chaine2))) &&
                       ((C_143 : (\offset_min(Chaine1) <= 0)) &&
                         (C_144 : (\offset_max(Chaine1) >=
                                    strlen{Here}(Chaine2))))) &&
                      ((C_146 : (\offset_min(Chaine2) <= 0)) &&
                        (C_147 : (\offset_max(Chaine2) >=
                                   strlen{Here}(Chaine2))))));
behavior copie_correctement:
  assumes true;
  ensures (C_148 : ((C_149 : eq_string{Here}(Chaine1, Chaine2)) &&
                     (C_150 : eq_string2{Old, Here}(Chaine2, Chaine2))));
{  
   (var char_P[..] pointeur);
   
   (var char_P[..] source);
   
   (var int32 index);
   
   (var int32 __jc_off_pointeur);
   
   (var int32 __jc_off_source);
   
   {  (C_105 : (__jc_off_pointeur = 0));
      (C_106 : (__jc_off_source = 0));
      (C_107 : (index = 0));
      
      {  
         
         invariant (C_108 : (((C_110 : ((__jc_off_pointeur - index) == 0)) &&
                               (C_111 : ((__jc_off_source - index) == 0))) &&
                              ((C_113 : (0 <= index)) &&
                                (C_114 : (index <= strlen{Here}(Chaine2))))));
         invariant for copie_correctement: (C_115 : ((C_116 : (strncmp{Here}(
                                                                Chaine1,
                                                                Chaine2,
                                                                index) ==
                                                                0)) &&
                                                      (C_117 : (strncmp2{Pre,
                                                                 Here}(
                                                                 Chaine2,
                                                                 Chaine2,
                                                                 index) ==
                                                                 0))));
         variant (C_118 : (strlen{Here}(Chaine2) - index));
         while (true)
         {  
            {  (if ((C_120 : (C_119 : (Chaine2 + __jc_off_source)).char_M) !=
                     0) then () else 
               {  ();
                  
                  (goto while_3_break)
               });
               (C_125 : ((C_124 : (C_123 : (Chaine1 + __jc_off_pointeur)).char_M) = 
               (C_122 : (C_121 : (Chaine2 + __jc_off_source)).char_M)));
               (C_128 : (__jc_off_pointeur = (C_127 : ((C_126 : (__jc_off_pointeur +
                                                                  1)) :> int32))));
               (C_131 : (__jc_off_source = (C_130 : ((C_129 : (__jc_off_source +
                                                                1)) :> int32))));
               (C_134 : (index = (C_133 : ((C_132 : (index + 1)) :> int32))))
            }
         };
         (while_3_break : ())
      };
      
      {  (C_137 : ((C_136 : (C_135 : (Chaine1 + __jc_off_pointeur)).char_M) = 0));
         ();
         ()
      };
      
      {  
         (assert for copie_correctement: (C_138 : (strncmp{Here}(Chaine1,
                                                                 Chaine2,
                                                                 strlen{Here}(
                                                                 Chaine2)) ==
                                                    0)));
         ()
      };
      
      (return ())
   }
}

unit MemSet(void_P[..] Adresse, uint8 ValOct, int32 NbOct)
  requires (C_168 : ((((C_171 : (\offset_min((Adresse :> char_P)) <= 0)) &&
                        (C_172 : (\offset_max((Adresse :> char_P)) >=
                                   (NbOct - 1)))) &&
                       (C_173 : (0 <= NbOct))) &&
                      (C_174 : (ValOct <= 127))));
{  
   (var char_P[..] adresse_tmp);
   
   (var int32 nombre_oct);
   
   {  (C_152 : (adresse_tmp = (C_151 : (Adresse :> char_P))));
      (C_153 : (nombre_oct = NbOct));
      
      {  
         
         invariant (C_154 : (((C_156 : (0 <= nombre_oct)) &&
                               (C_157 : (nombre_oct <= NbOct))) &&
                              (C_158 : ((adresse_tmp - (Adresse :> char_P)) ==
                                         (NbOct - nombre_oct)))));
         variant (C_159 : nombre_oct);
         while (true)
         {  
            {  (if (nombre_oct > 0) then () else 
               (goto while_4_break));
               (C_162 : ((C_161 : adresse_tmp.char_M) = (C_160 : (ValOct :> int8))));
               (C_164 : (adresse_tmp = (C_163 : (adresse_tmp + 1))));
               (C_167 : (nombre_oct = (C_166 : ((C_165 : (nombre_oct - 1)) :> int32))))
            }
         };
         (while_4_break : ())
      };
      
      (return ())
   }
}

unit DeclarerPanneRobustesse(char_P[..] nomFic, int32 numLigne, int32 codeErr)
  requires (C_175 : false);
{  
   {  
      (return ())
   }
}

logic est_dans_liste{L}(char_P[..] s, STR_MESSAGE_[..] l) reads \nothing;

axiom est_dans_liste_def{L} :
(\forall char_P[..] s;
  (\forall STR_MESSAGE_[..] l;
    (est_dans_liste{L}(s, l) ==>
      (((\offset_min(l) <= 0) && (\offset_max(l) >= 0)) &&
        (eq_message{L}(s, (l.PTR :> enum___anonenum_T_NATURE_MSG_2_P)) ||
          est_dans_liste{L}(s, l.MESSAGESUIVANT))))))

axiom est_dans_liste_immediat{L} :
(\forall char_P[..] s;
  (\forall STR_MESSAGE_[..] l;
    ((((\offset_min(l) <= 0) && (\offset_max(l) >= 0)) &&
       eq_message{L}(s, (l.PTR :> enum___anonenum_T_NATURE_MSG_2_P))) ==>
      est_dans_liste{L}(s, l))))

axiom est_dans_liste_si_atteignable{L} :
(\forall STR_MESSAGE_[..] msg1;
  (\forall STR_MESSAGE_[..] msg2;
    (\forall char_P[..] s;
      ((atteignable{L}(msg1, msg2) && est_dans_liste{L}(s, msg2)) ==>
        est_dans_liste{L}(s, msg1)))))
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/liste_chainee_why.why
total   : 603
valid   : 429 ( 71%)
invalid :   0 (  0%)
unknown :  46 (  8%)
timeout : 102 ( 17%)
failure :  26 (  4%)
