Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -jessie -jessie-gen-only t1_annot24.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -dD t1_annot24.c"
[kernel] warning: ignoring status of global invariant `inv'
[kernel] warning: ignoring status of global invariant `Buch_Ranges_Validity'
[kernel] warning: ignoring status of global invariant `Buch_Arrays_Coherence'
[kernel] warning: ignoring status of global invariant `Buch_acc_Ranges_Validity'
[kernel] warning: ignoring status of global invariant `_Buch_st_reach_1'
[kernel] warning: ignoring status of global invariant `_Buch_st_reach_2'
[kernel] warning: ignoring status of global invariant `_Buch_st_reach_3'
[kernel] warning: ignoring status of global invariant `_Buch_tr_cross_1'
[kernel] warning: ignoring status of global invariant `_Buch_tr_cross_2'
[kernel] warning: ignoring status of global invariant `_Buch_tr_cross_3'
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir t1_annot24.jessie
[jessie] File t1_annot24.jessie/t1_annot24.jc written.
[jessie] File t1_annot24.jessie/t1_annot24.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int32 = -2147483648..2147483647

type int8 = -128..127

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

type buch_ListOper = 0..2

type Buch_OpStatusList = 0..1

int32 status;

int32 rr;

invariant inv :
((0 <= rr) && (rr <= 5000))

intP[0..1] buch_CurStates;

invariant valid_buch_CurStates :
((\offset_min(buch_CurStates) <= 0) && (\offset_max(buch_CurStates) >= 1))

intP[0..2] buch_CurTrans;

invariant valid_buch_CurTrans :
((\offset_min(buch_CurTrans) <= 0) && (\offset_max(buch_CurTrans) >= 2))

intP[0..1] buch_CurStates_old;

invariant valid_buch_CurStates_old :
((\offset_min(buch_CurStates_old) <= 0) &&
  (\offset_max(buch_CurStates_old) >= 1))

intP[0..2] buch_CurTrans_tmp;

invariant valid_buch_CurTrans_tmp :
((\offset_min(buch_CurTrans_tmp) <= 0) &&
  (\offset_max(buch_CurTrans_tmp) >= 2))

invariant Buch_Ranges_Validity :
(((\offset_min(buch_CurTrans) <= 0) && (\offset_max(buch_CurTrans) >= 2)) &&
  (((\offset_min(buch_CurTrans_tmp) <= 0) &&
     (\offset_max(buch_CurTrans_tmp) >= 2)) &&
    (((\offset_min(buch_CurStates) <= 0) &&
       (\offset_max(buch_CurStates) >= 1)) &&
      ((\offset_min(buch_CurStates_old) <= 0) &&
        (\offset_max(buch_CurStates_old) >= 1)))))

invariant Buch_Arrays_Coherence :
(\forall integer _buch_i;
  (((0 <= _buch_i) && (_buch_i < 3)) ==>
    ((buch_CurTrans + _buch_i).intM == (buch_CurTrans_tmp + _buch_i).intM)))

intP[0..1] buch_AcceptStates;

invariant valid_buch_AcceptStates :
((\offset_min(buch_AcceptStates) <= 0) &&
  (\offset_max(buch_AcceptStates) >= 1))

invariant Buch_acc_Ranges_Validity :
((\offset_min(buch_AcceptStates) <= 0) &&
  (\offset_max(buch_AcceptStates) >= 1))

buch_ListOper buch_CurOperation;

Buch_OpStatusList buch_CurOpStatus;

axiomatic Automata {

  logic integer buch_Trans_Start(integer tr)
   
  axiom buch_Trans_Start0 :
  (buch_Trans_Start(0) == 0)
   
  axiom buch_Trans_Start1 :
  (buch_Trans_Start(1) == 0)
   
  axiom buch_Trans_Start2 :
  (buch_Trans_Start(2) == 1)
   
  logic integer buch_Trans_Stop(integer tr_0)
   
  axiom buch_Trans_Stop0 :
  (buch_Trans_Stop(0) == 0)
   
  axiom buch_Trans_Stop1 :
  (buch_Trans_Stop(1) == 1)
   
  axiom buch_Trans_Stop2 :
  (buch_Trans_Stop(2) == 1)
  
}

predicate buch_Trans_Cond_param{L}(integer _buch_numTrans, integer _buch_op,
                                   integer _buch_status) =
(((_buch_numTrans == 0) ==> (status == 0)) &&
  ((_buch_numTrans == 1) ==>
    ((_buch_op == (2 :> buch_ListOper)) &&
      (_buch_status == (1 :> Buch_OpStatusList)))))

predicate buch_Trans_Cond{L}(integer _buch_numTrans_0) =
buch_Trans_Cond_param{L}(_buch_numTrans_0, buch_CurOperation,
                         buch_CurOpStatus)

invariant _Buch_st_reach_1 :
(\forall integer _buch_st;
  ((((0 <= _buch_st) && (_buch_st < 2)) &&
     (\forall integer _buch_tr;
       (((0 <= _buch_tr) && (_buch_tr < 3)) ==>
         (((buch_CurTrans + _buch_tr).intM == 0) ||
           ((buch_Trans_Stop(_buch_tr) != _buch_st) ||
             ((! buch_Trans_Cond{Here}(_buch_tr)) ||
               ((buch_CurStates_old + buch_Trans_Start(_buch_tr)).intM == 0))))))) ==>
    ((buch_CurStates + _buch_st).intM == 0)))

invariant _Buch_st_reach_2 :
(\forall integer _buch_st_0;
  ((((0 <= _buch_st_0) && (_buch_st_0 < 2)) &&
     ((buch_CurStates + _buch_st_0).intM == 0)) ==>
    (\forall integer _buch_tr_0;
      (((0 <= _buch_tr_0) && (_buch_tr_0 < 3)) ==>
        (((buch_CurTrans + _buch_tr_0).intM == 0) ||
          ((buch_Trans_Stop(_buch_tr_0) != _buch_st_0) ||
            ((! buch_Trans_Cond{Here}(_buch_tr_0)) ||
              ((buch_CurStates_old + buch_Trans_Start(_buch_tr_0)).intM == 0))))))))

invariant _Buch_st_reach_3 :
(\forall integer _buch_st_1;
  ((((0 <= _buch_st_1) && (_buch_st_1 < 2)) &&
     ((buch_CurStates + _buch_st_1).intM != 0)) ==>
    (\exists integer _buch_tr_1;
      (((0 <= _buch_tr_1) && (_buch_tr_1 < 3)) &&
        (((buch_CurTrans + _buch_tr_1).intM != 0) &&
          (buch_Trans_Cond{Here}(_buch_tr_1) &&
            ((buch_Trans_Stop(_buch_tr_1) == _buch_st_1) &&
              ((buch_CurStates_old + buch_Trans_Start(_buch_tr_1)).intM != 0))))))))

invariant _Buch_tr_cross_1 :
(\forall integer _buch_tr_2;
  ((((0 <= _buch_tr_2) && (_buch_tr_2 < 3)) &&
     ((buch_CurTrans + _buch_tr_2).intM != 0)) ==>
    (buch_Trans_Cond{Here}(_buch_tr_2) &&
      (((buch_CurStates_old + buch_Trans_Start(_buch_tr_2)).intM != 0) &&
        ((buch_CurStates + buch_Trans_Stop(_buch_tr_2)).intM != 0)))))

invariant _Buch_tr_cross_2 :
(\forall integer _buch_tr_3;
  ((((0 <= _buch_tr_3) && (_buch_tr_3 < 3)) &&
     (((buch_CurStates_old + buch_Trans_Start(_buch_tr_3)).intM != 0) &&
       buch_Trans_Cond{Here}(_buch_tr_3))) ==>
    (((buch_CurTrans + _buch_tr_3).intM != 0) &&
      ((buch_CurStates + buch_Trans_Stop(_buch_tr_3)).intM != 0))))

invariant _Buch_tr_cross_3 :
(\forall integer _buch_tr_4;
  ((((0 <= _buch_tr_4) && (_buch_tr_4 < 3)) &&
     (((buch_CurStates_old + buch_Trans_Start(_buch_tr_4)).intM != 0) ||
       (! buch_Trans_Cond{Here}(_buch_tr_4)))) ==>
    ((buch_CurTrans + _buch_tr_4).intM != 0)))

unit fake()
  requires (C_61 : (0 == (buch_CurTrans + 1).intM));
  requires (C_60 : ((0 != (buch_CurTrans + 0).intM) ||
                     (0 != (buch_CurTrans + 2).intM)));
  requires (C_59 : true);
  requires (C_58 : ((0 != (buch_CurStates + 0).intM) ||
                     (0 != (buch_CurStates + 1).intM)));
  requires (C_57 : (rr < 5000));
behavior default:
  ensures (C_48 : true);
behavior Buchi_property_behavior:
  ensures (C_49 : ((C_50 : (0 == (buch_CurTrans + 1).intM)) &&
                    ((C_52 : ((0 != (buch_CurTrans + 0).intM) ||
                               (0 != (buch_CurTrans + 2).intM))) &&
                      ((C_54 : true) &&
                        (C_55 : ((0 != (buch_CurStates + 0).intM) ||
                                  (0 != (buch_CurStates + 1).intM)))))));
behavior j:
  ensures (C_56 : (rr < 5001));
{  
   (var int32 tmp);
   
   (var int32 tmp_0);
   
   (var int32 tmp_1);
   
   {  (C_3 : (rr = (C_2 : ((C_1 : (rr + 1)) :> int32))));
      
      {  (C_4 : (buch_CurOperation = 0));
         (C_5 : (buch_CurOpStatus = 1));
         (C_8 : ((C_7 : (buch_CurStates_old + 0).intM) = (C_6 : (buch_CurStates +
                                                                  0).intM)));
         (C_11 : ((C_10 : (buch_CurStates_old + 1).intM) = (C_9 : (buch_CurStates +
                                                                    1).intM)));
         (C_14 : ((C_13 : (buch_CurTrans_tmp + 0).intM) = (C_12 : (buch_CurTrans +
                                                                    0).intM)));
         (C_17 : ((C_16 : (buch_CurTrans_tmp + 1).intM) = (C_15 : (buch_CurTrans +
                                                                    1).intM)));
         (C_20 : ((C_19 : (buch_CurTrans_tmp + 2).intM) = (C_18 : (buch_CurTrans +
                                                                    2).intM)));
         (if (status == 0) then (if ((C_24 : (buch_CurStates_old + 0).intM) !=
                                      0) then (C_23 : (tmp = 1)) else 
                                (C_22 : (tmp = 0))) else (C_21 : (tmp = 0)));
         (C_26 : ((C_25 : (buch_CurStates + 0).intM) = tmp));
         (C_30 : ((C_29 : (buch_CurStates + 1).intM) = (C_28 : ((if ((C_27 : 
                                                                    (buch_CurStates_old +
                                                                    1).intM) !=
                                                                    0) then 1 else 0) :> int32))));
         (if (status == 0) then (if ((C_36 : (buch_CurStates_old + 0).intM) !=
                                      0) then (if ((C_35 : (buch_CurStates +
                                                             0).intM) !=
                                                    0) then (C_34 : (tmp_0 = 1)) else 
                                              (C_33 : (tmp_0 = 0))) else 
                                (C_32 : (tmp_0 = 0))) else (C_31 : (tmp_0 = 0)));
         (C_38 : ((C_37 : (buch_CurTrans + 0).intM) = tmp_0));
         (C_40 : ((C_39 : (buch_CurTrans + 1).intM) = 0));
         (if ((C_45 : (buch_CurStates_old + 1).intM) != 0) then (if ((C_44 : 
                                                                    (buch_CurStates +
                                                                    1).intM) !=
                                                                    0) then 
                                                                (C_43 : (tmp_1 = 1)) else 
                                                                (C_42 : (tmp_1 = 0))) else 
         (C_41 : (tmp_1 = 0)));
         (C_47 : ((C_46 : (buch_CurTrans + 2).intM) = tmp_1));
         
         (return ())
      }
   }
}

unit op()
  requires (C_126 : (0 == (buch_CurTrans + 1).intM));
  requires (C_125 : ((0 != (buch_CurTrans + 0).intM) ||
                      (0 != (buch_CurTrans + 2).intM)));
  requires (C_124 : true);
  requires (C_123 : ((0 != (buch_CurStates + 0).intM) ||
                      (0 != (buch_CurStates + 1).intM)));
behavior default:
  ensures (C_115 : true);
behavior Buchi_property_behavior:
  ensures (C_116 : ((C_117 : (0 == (buch_CurTrans + 1).intM)) &&
                     ((C_119 : ((0 != (buch_CurTrans + 0).intM) ||
                                 (0 != (buch_CurTrans + 2).intM))) &&
                       ((C_121 : true) &&
                         (C_122 : ((0 != (buch_CurStates + 0).intM) ||
                                    (0 != (buch_CurStates + 1).intM)))))));
{  
   (var int32 tmp_0_0);
   
   (var int32 tmp_0_1);
   
   (var int32 tmp_1_0);
   
   (var int32 tmp_2);
   
   (var int32 tmp_3);
   
   {  (C_62 : (status = 1));
      
      {  (C_63 : (buch_CurOperation = 2));
         (C_64 : (buch_CurOpStatus = 1));
         (C_67 : ((C_66 : (buch_CurStates_old + 0).intM) = (C_65 : (buch_CurStates +
                                                                    0).intM)));
         (C_70 : ((C_69 : (buch_CurStates_old + 1).intM) = (C_68 : (buch_CurStates +
                                                                    1).intM)));
         (C_73 : ((C_72 : (buch_CurTrans_tmp + 0).intM) = (C_71 : (buch_CurTrans +
                                                                    0).intM)));
         (C_76 : ((C_75 : (buch_CurTrans_tmp + 1).intM) = (C_74 : (buch_CurTrans +
                                                                    1).intM)));
         (C_79 : ((C_78 : (buch_CurTrans_tmp + 2).intM) = (C_77 : (buch_CurTrans +
                                                                    2).intM)));
         (if (status == 0) then (if ((C_83 : (buch_CurStates_old + 0).intM) !=
                                      0) then (C_82 : (tmp_0_0 = 1)) else 
                                (C_81 : (tmp_0_0 = 0))) else (C_80 : (tmp_0_0 = 0)));
         (C_85 : ((C_84 : (buch_CurStates + 0).intM) = tmp_0_0));
         (if ((C_90 : (buch_CurStates_old + 0).intM) != 0) then (C_89 : (tmp_0_1 = 1)) else 
         (if ((C_88 : (buch_CurStates_old + 1).intM) != 0) then (C_87 : (tmp_0_1 = 1)) else 
         (C_86 : (tmp_0_1 = 0))));
         (C_92 : ((C_91 : (buch_CurStates + 1).intM) = tmp_0_1));
         (if (status == 0) then (if ((C_98 : (buch_CurStates_old + 0).intM) !=
                                      0) then (if ((C_97 : (buch_CurStates +
                                                             0).intM) !=
                                                    0) then (C_96 : (tmp_1_0 = 1)) else 
                                              (C_95 : (tmp_1_0 = 0))) else 
                                (C_94 : (tmp_1_0 = 0))) else (C_93 : (tmp_1_0 = 0)));
         (C_100 : ((C_99 : (buch_CurTrans + 0).intM) = tmp_1_0));
         (if ((C_105 : (buch_CurStates_old + 0).intM) != 0) then (if 
                                                                 ((C_104 : 
                                                                  (buch_CurStates +
                                                                    1).intM) !=
                                                                   0) then 
                                                                 (C_103 : (tmp_2 = 1)) else 
                                                                 (C_102 : (tmp_2 = 0))) else 
         (C_101 : (tmp_2 = 0)));
         (C_107 : ((C_106 : (buch_CurTrans + 1).intM) = tmp_2));
         (if ((C_112 : (buch_CurStates_old + 1).intM) != 0) then (if 
                                                                 ((C_111 : 
                                                                  (buch_CurStates +
                                                                    1).intM) !=
                                                                   0) then 
                                                                 (C_110 : (tmp_3 = 1)) else 
                                                                 (C_109 : (tmp_3 = 0))) else 
         (C_108 : (tmp_3 = 0)));
         (C_114 : ((C_113 : (buch_CurTrans + 2).intM) = tmp_3));
         
         (return ())
      }
   }
}

int32 main()
  requires (C_189 : (0 == (buch_CurTrans + 1).intM));
  requires (C_188 : ((0 != (buch_CurTrans + 0).intM) ||
                      (0 != (buch_CurTrans + 2).intM)));
  requires (C_187 : true);
  requires (C_186 : ((0 != (buch_CurStates + 0).intM) ||
                      (0 != (buch_CurStates + 1).intM)));
behavior default:
  ensures (C_178 : true);
behavior Buchi_property_behavior:
  ensures (C_179 : ((C_180 : (0 == (buch_CurTrans + 1).intM)) &&
                     ((C_182 : ((0 != (buch_CurTrans + 0).intM) ||
                                 (0 != (buch_CurTrans + 2).intM))) &&
                       ((C_184 : true) &&
                         (C_185 : ((0 != (buch_CurStates + 0).intM) ||
                                    (0 != (buch_CurStates + 1).intM)))))));
{  
   (var int32 __retres);
   
   (var int32 tmp_0_2);
   
   (var int32 tmp_0_3);
   
   (var int32 tmp_1_1);
   
   {  (if (rr < 5000) then 
      {  (C_127 : (buch_CurOperation = 0));
         (C_128 : (buch_CurOpStatus = 0));
         (C_129 : fake())
      } else ());
      
      {  (C_130 : (buch_CurOperation = 2));
         (C_131 : (buch_CurOpStatus = 0));
         (C_132 : op())
      };
      (C_133 : (__retres = 1));
      
      {  (C_134 : (buch_CurOperation = 1));
         (C_135 : (buch_CurOpStatus = 1));
         (C_138 : ((C_137 : (buch_CurStates_old + 0).intM) = (C_136 : 
                                                             (buch_CurStates +
                                                               0).intM)));
         (C_141 : ((C_140 : (buch_CurStates_old + 1).intM) = (C_139 : 
                                                             (buch_CurStates +
                                                               1).intM)));
         (C_144 : ((C_143 : (buch_CurTrans_tmp + 0).intM) = (C_142 : 
                                                            (buch_CurTrans +
                                                              0).intM)));
         (C_147 : ((C_146 : (buch_CurTrans_tmp + 1).intM) = (C_145 : 
                                                            (buch_CurTrans +
                                                              1).intM)));
         (C_150 : ((C_149 : (buch_CurTrans_tmp + 2).intM) = (C_148 : 
                                                            (buch_CurTrans +
                                                              2).intM)));
         (if (status == 0) then (if ((C_154 : (buch_CurStates_old + 0).intM) !=
                                      0) then (C_153 : (tmp_0_2 = 1)) else 
                                (C_152 : (tmp_0_2 = 0))) else (C_151 : (tmp_0_2 = 0)));
         (C_156 : ((C_155 : (buch_CurStates + 0).intM) = tmp_0_2));
         (C_160 : ((C_159 : (buch_CurStates + 1).intM) = (C_158 : ((if 
                                                                   ((C_157 : 
                                                                    (buch_CurStates_old +
                                                                    1).intM) !=
                                                                    0) then 1 else 0) :> int32))));
         (if (status == 0) then (if ((C_166 : (buch_CurStates_old + 0).intM) !=
                                      0) then (if ((C_165 : (buch_CurStates +
                                                              0).intM) !=
                                                    0) then (C_164 : (tmp_0_3 = 1)) else 
                                              (C_163 : (tmp_0_3 = 0))) else 
                                (C_162 : (tmp_0_3 = 0))) else (C_161 : (tmp_0_3 = 0)));
         (C_168 : ((C_167 : (buch_CurTrans + 0).intM) = tmp_0_3));
         (C_170 : ((C_169 : (buch_CurTrans + 1).intM) = 0));
         (if ((C_175 : (buch_CurStates_old + 1).intM) != 0) then (if 
                                                                 ((C_174 : 
                                                                  (buch_CurStates +
                                                                    1).intM) !=
                                                                   0) then 
                                                                 (C_173 : (tmp_1_1 = 1)) else 
                                                                 (C_172 : (tmp_1_1 = 0))) else 
         (C_171 : (tmp_1_1 = 0)));
         (C_177 : ((C_176 : (buch_CurTrans + 2).intM) = tmp_1_1));
         
         (return __retres)
      }
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs t1_annot24.jessie/t1_annot24.cloc t1_annot24.jessie/t1_annot24.jc
type Buch_OpStatusList

type buch_AcceptStates_5

type buch_CurStates_1

type buch_CurStates_old_3

type buch_CurTrans_2

type buch_CurTrans_tmp_4

type buch_ListOper

type charP

type int32

type int8

type intP

type padding

type uint8

type unsigned_charP

type voidP

logic integer_of_int32: int32 -> int

logic buch_CurTrans:  -> intP pointer

logic buch_CurTrans_tmp:  -> intP pointer

predicate Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4:(intP, int32) memory,
 intP_intM_buch_CurTrans_2:(intP, int32) memory) =
 (forall _buch_i:int.
  ((le_int((0), _buch_i) and lt_int(_buch_i, (3))) ->
   (integer_of_int32(select(intP_intM_buch_CurTrans_2,
                     shift(buch_CurTrans, _buch_i))) = integer_of_int32(
                                                       select(intP_intM_buch_CurTrans_tmp_4,
                                                       shift(buch_CurTrans_tmp,
                                                       _buch_i))))))

logic integer_of_Buch_OpStatusList: Buch_OpStatusList -> int

logic Buch_OpStatusList_of_integer: int -> Buch_OpStatusList

axiom Buch_OpStatusList_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of_Buch_OpStatusList(Buch_OpStatusList_of_integer(x)), x)))

axiom Buch_OpStatusList_extensionality :
 (forall x:Buch_OpStatusList.
  (forall y:Buch_OpStatusList
   [eq_int(integer_of_Buch_OpStatusList(x), integer_of_Buch_OpStatusList(y))]
   .
   (eq_int(integer_of_Buch_OpStatusList(x), integer_of_Buch_OpStatusList(y)) ->
    (x = y))))

axiom Buch_OpStatusList_range :
 (forall x:Buch_OpStatusList.
  (le_int((0), integer_of_Buch_OpStatusList(x))
  and le_int(integer_of_Buch_OpStatusList(x), (1))))

logic buch_CurStates:  -> intP pointer

logic buch_CurStates_old:  -> intP pointer

predicate Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table:intP alloc_table,
 intP_buch_CurStates_old_3_alloc_table:intP alloc_table,
 intP_buch_CurTrans_2_alloc_table:intP alloc_table,
 intP_buch_CurStates_1_alloc_table:intP alloc_table) =
 (le_int(offset_min(intP_buch_CurTrans_2_alloc_table, buch_CurTrans), (0))
 and (ge_int(offset_max(intP_buch_CurTrans_2_alloc_table, buch_CurTrans),
      (2))
     and (le_int(offset_min(intP_buch_CurTrans_tmp_4_alloc_table,
                 buch_CurTrans_tmp),
          (0))
         and (ge_int(offset_max(intP_buch_CurTrans_tmp_4_alloc_table,
                     buch_CurTrans_tmp),
              (2))
             and (le_int(offset_min(intP_buch_CurStates_1_alloc_table,
                         buch_CurStates),
                  (0))
                 and (ge_int(offset_max(intP_buch_CurStates_1_alloc_table,
                             buch_CurStates),
                      (1))
                     and (le_int(offset_min(intP_buch_CurStates_old_3_alloc_table,
                                 buch_CurStates_old),
                          (0))
                         and ge_int(offset_max(intP_buch_CurStates_old_3_alloc_table,
                                    buch_CurStates_old),
                             (1)))))))))

logic buch_AcceptStates:  -> intP pointer

predicate Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table:intP alloc_table) =
 (le_int(offset_min(intP_buch_AcceptStates_5_alloc_table, buch_AcceptStates),
  (0))
 and ge_int(offset_max(intP_buch_AcceptStates_5_alloc_table,
            buch_AcceptStates),
     (1)))

logic buch_Trans_Stop: int -> int

logic integer_of_buch_ListOper: buch_ListOper -> int

logic buch_ListOper_of_integer: int -> buch_ListOper

predicate buch_Trans_Cond_param(_buch_numTrans:int, _buch_op:int,
 _buch_status:int, status_at_L:int32) =
 (((_buch_numTrans = (0)) -> (integer_of_int32(status_at_L) = (0)))
 and ((_buch_numTrans = (1)) ->
      ((_buch_op = integer_of_buch_ListOper(buch_ListOper_of_integer((2))))
      and (_buch_status = integer_of_Buch_OpStatusList(Buch_OpStatusList_of_integer((1)))))))

predicate buch_Trans_Cond(_buch_numTrans_0:int,
 buch_CurOpStatus_at_L:Buch_OpStatusList,
 buch_CurOperation_at_L:buch_ListOper, status_at_L:int32) =
 buch_Trans_Cond_param(_buch_numTrans_0,
 integer_of_buch_ListOper(buch_CurOperation_at_L),
 integer_of_Buch_OpStatusList(buch_CurOpStatus_at_L), status_at_L)

logic buch_Trans_Start: int -> int

predicate _Buch_st_reach_1(intP_intM_buch_CurStates_old_3:(intP, int32) memory,
 intP_intM_buch_CurTrans_2:(intP, int32) memory,
 intP_intM_buch_CurStates_1:(intP, int32) memory,
 buch_CurOpStatus:Buch_OpStatusList, buch_CurOperation:buch_ListOper,
 status:int32) =
 (forall _buch_st:int.
  ((le_int((0), _buch_st)
   and (lt_int(_buch_st, (2))
       and (forall _buch_tr:int.
            ((le_int((0), _buch_tr) and lt_int(_buch_tr, (3))) ->
             ((integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                shift(buch_CurTrans, _buch_tr))) = (0))
             or ((buch_Trans_Stop(_buch_tr) <> _buch_st)
                or ((not buch_Trans_Cond(_buch_tr, buch_CurOpStatus,
                         buch_CurOperation, status))
                   or (integer_of_int32(select(intP_intM_buch_CurStates_old_3,
                                        shift(buch_CurStates_old,
                                        buch_Trans_Start(_buch_tr)))) = (0))))))))) ->
   (integer_of_int32(select(intP_intM_buch_CurStates_1,
                     shift(buch_CurStates, _buch_st))) = (0))))

predicate _Buch_st_reach_2(intP_intM_buch_CurStates_old_3:(intP, int32) memory,
 intP_intM_buch_CurTrans_2:(intP, int32) memory,
 intP_intM_buch_CurStates_1:(intP, int32) memory,
 buch_CurOpStatus:Buch_OpStatusList, buch_CurOperation:buch_ListOper,
 status:int32) =
 (forall _buch_st_0:int.
  ((le_int((0), _buch_st_0)
   and (lt_int(_buch_st_0, (2))
       and (integer_of_int32(select(intP_intM_buch_CurStates_1,
                             shift(buch_CurStates, _buch_st_0))) = (0)))) ->
   (forall _buch_tr_0:int.
    ((le_int((0), _buch_tr_0) and lt_int(_buch_tr_0, (3))) ->
     ((integer_of_int32(select(intP_intM_buch_CurTrans_2,
                        shift(buch_CurTrans, _buch_tr_0))) = (0))
     or ((buch_Trans_Stop(_buch_tr_0) <> _buch_st_0)
        or ((not buch_Trans_Cond(_buch_tr_0, buch_CurOpStatus,
                 buch_CurOperation, status))
           or (integer_of_int32(select(intP_intM_buch_CurStates_old_3,
                                shift(buch_CurStates_old,
                                buch_Trans_Start(_buch_tr_0)))) = (0)))))))))

predicate _Buch_st_reach_3(intP_intM_buch_CurStates_old_3:(intP, int32) memory,
 intP_intM_buch_CurTrans_2:(intP, int32) memory,
 intP_intM_buch_CurStates_1:(intP, int32) memory,
 buch_CurOpStatus:Buch_OpStatusList, buch_CurOperation:buch_ListOper,
 status:int32) =
 (forall _buch_st_1:int.
  ((le_int((0), _buch_st_1)
   and (lt_int(_buch_st_1, (2))
       and (integer_of_int32(select(intP_intM_buch_CurStates_1,
                             shift(buch_CurStates, _buch_st_1))) <> (0)))) ->
   (exists _buch_tr_1:int.
    (le_int((0), _buch_tr_1)
    and (lt_int(_buch_tr_1, (3))
        and ((integer_of_int32(select(intP_intM_buch_CurTrans_2,
                               shift(buch_CurTrans, _buch_tr_1))) <> (0))
            and (buch_Trans_Cond(_buch_tr_1, buch_CurOpStatus,
                 buch_CurOperation, status)
                and ((buch_Trans_Stop(_buch_tr_1) = _buch_st_1)
                    and (integer_of_int32(select(intP_intM_buch_CurStates_old_3,
                                          shift(buch_CurStates_old,
                                          buch_Trans_Start(_buch_tr_1)))) <> (0))))))))))

predicate _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3:(intP, int32) memory,
 intP_intM_buch_CurTrans_2:(intP, int32) memory,
 intP_intM_buch_CurStates_1:(intP, int32) memory,
 buch_CurOpStatus:Buch_OpStatusList, buch_CurOperation:buch_ListOper,
 status:int32) =
 (forall _buch_tr_2:int.
  ((le_int((0), _buch_tr_2)
   and (lt_int(_buch_tr_2, (3))
       and (integer_of_int32(select(intP_intM_buch_CurTrans_2,
                             shift(buch_CurTrans, _buch_tr_2))) <> (0)))) ->
   (buch_Trans_Cond(_buch_tr_2, buch_CurOpStatus, buch_CurOperation, status)
   and ((integer_of_int32(select(intP_intM_buch_CurStates_old_3,
                          shift(buch_CurStates_old,
                          buch_Trans_Start(_buch_tr_2)))) <> (0))
       and (integer_of_int32(select(intP_intM_buch_CurStates_1,
                             shift(buch_CurStates,
                             buch_Trans_Stop(_buch_tr_2)))) <> (0))))))

predicate _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3:(intP, int32) memory,
 intP_intM_buch_CurTrans_2:(intP, int32) memory,
 intP_intM_buch_CurStates_1:(intP, int32) memory,
 buch_CurOpStatus:Buch_OpStatusList, buch_CurOperation:buch_ListOper,
 status:int32) =
 (forall _buch_tr_3:int.
  ((le_int((0), _buch_tr_3)
   and (lt_int(_buch_tr_3, (3))
       and ((integer_of_int32(select(intP_intM_buch_CurStates_old_3,
                              shift(buch_CurStates_old,
                              buch_Trans_Start(_buch_tr_3)))) <> (0))
           and buch_Trans_Cond(_buch_tr_3, buch_CurOpStatus,
               buch_CurOperation, status)))) ->
   ((integer_of_int32(select(intP_intM_buch_CurTrans_2,
                      shift(buch_CurTrans, _buch_tr_3))) <> (0))
   and (integer_of_int32(select(intP_intM_buch_CurStates_1,
                         shift(buch_CurStates, buch_Trans_Stop(_buch_tr_3)))) <> (0)))))

predicate _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3:(intP, int32) memory,
 intP_intM_buch_CurTrans_2:(intP, int32) memory,
 buch_CurOpStatus:Buch_OpStatusList, buch_CurOperation:buch_ListOper,
 status:int32) =
 (forall _buch_tr_4:int.
  ((le_int((0), _buch_tr_4)
   and (lt_int(_buch_tr_4, (3))
       and ((integer_of_int32(select(intP_intM_buch_CurStates_old_3,
                              shift(buch_CurStates_old,
                              buch_Trans_Start(_buch_tr_4)))) <> (0))
           or (not buch_Trans_Cond(_buch_tr_4, buch_CurOpStatus,
                   buch_CurOperation, status))))) ->
   (integer_of_int32(select(intP_intM_buch_CurTrans_2,
                     shift(buch_CurTrans, _buch_tr_4))) <> (0))))

axiom buch_ListOper_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (2))) ->
   eq_int(integer_of_buch_ListOper(buch_ListOper_of_integer(x)), x)))

axiom buch_ListOper_extensionality :
 (forall x:buch_ListOper.
  (forall y:buch_ListOper
   [eq_int(integer_of_buch_ListOper(x), integer_of_buch_ListOper(y))].
   (eq_int(integer_of_buch_ListOper(x), integer_of_buch_ListOper(y)) ->
    (x = y))))

axiom buch_ListOper_range :
 (forall x:buch_ListOper.
  (le_int((0), integer_of_buch_ListOper(x))
  and le_int(integer_of_buch_ListOper(x), (2))))

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

predicate eq_Buch_OpStatusList(x:Buch_OpStatusList, y:Buch_OpStatusList) =
 eq_int(integer_of_Buch_OpStatusList(x), integer_of_Buch_OpStatusList(y))

predicate eq_buch_ListOper(x:buch_ListOper, y:buch_ListOper) =
 eq_int(integer_of_buch_ListOper(x), integer_of_buch_ListOper(y))

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate inv(rr:int32) =
 (le_int((0), integer_of_int32(rr)) and le_int(integer_of_int32(rr), (5000)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table:intP alloc_table) =
 (le_int(offset_min(intP_buch_AcceptStates_5_alloc_table, buch_AcceptStates),
  (0))
 and ge_int(offset_max(intP_buch_AcceptStates_5_alloc_table,
            buch_AcceptStates),
     (1)))

predicate valid_buch_CurStates(intP_buch_CurStates_1_alloc_table:intP alloc_table) =
 (le_int(offset_min(intP_buch_CurStates_1_alloc_table, buch_CurStates), (0))
 and ge_int(offset_max(intP_buch_CurStates_1_alloc_table, buch_CurStates),
     (1)))

predicate valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table:intP alloc_table) =
 (le_int(offset_min(intP_buch_CurStates_old_3_alloc_table,
         buch_CurStates_old),
  (0))
 and ge_int(offset_max(intP_buch_CurStates_old_3_alloc_table,
            buch_CurStates_old),
     (1)))

predicate valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table:intP alloc_table) =
 (le_int(offset_min(intP_buch_CurTrans_2_alloc_table, buch_CurTrans), (0))
 and ge_int(offset_max(intP_buch_CurTrans_2_alloc_table, buch_CurTrans), (2)))

predicate valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table:intP alloc_table) =
 (le_int(offset_min(intP_buch_CurTrans_tmp_4_alloc_table, buch_CurTrans_tmp),
  (0))
 and ge_int(offset_max(intP_buch_CurTrans_tmp_4_alloc_table,
            buch_CurTrans_tmp),
     (2)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

axiom buch_Trans_Start0 : (buch_Trans_Start((0)) = (0))

axiom buch_Trans_Start1 : (buch_Trans_Start((1)) = (0))

axiom buch_Trans_Start2 : (buch_Trans_Start((2)) = (1))

axiom buch_Trans_Stop0 : (buch_Trans_Stop((0)) = (0))

axiom buch_Trans_Stop1 : (buch_Trans_Stop((1)) = (1))

axiom buch_Trans_Stop2 : (buch_Trans_Stop((2)) = (1))

parameter Buch_OpStatusList_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} Buch_OpStatusList
  { eq_int(integer_of_Buch_OpStatusList(result), x) }

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_Buch_OpStatusList : unit -> { } Buch_OpStatusList { true }

parameter any_buch_ListOper : unit -> { } buch_ListOper { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter buch_CurOpStatus : Buch_OpStatusList ref

parameter buch_CurOperation : buch_ListOper ref

parameter buch_ListOper_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (2)))} buch_ListOper
  { eq_int(integer_of_buch_ListOper(result), x) }

parameter intP_buch_AcceptStates_5_alloc_table : intP alloc_table ref

parameter intP_buch_CurTrans_tmp_4_alloc_table : intP alloc_table ref

parameter intP_buch_CurStates_old_3_alloc_table : intP alloc_table ref

parameter intP_buch_CurTrans_2_alloc_table : intP alloc_table ref

parameter intP_buch_CurStates_1_alloc_table : intP alloc_table ref

parameter intP_intM_buch_CurTrans_tmp_4 : (intP, int32) memory ref

parameter intP_intM_buch_CurStates_old_3 : (intP, int32) memory ref

parameter intP_intM_buch_CurTrans_2 : (intP, int32) memory ref

parameter intP_intM_buch_CurStates_1 : (intP, int32) memory ref

parameter rr : int32 ref

parameter status : int32 ref

parameter fake :
 tt:unit ->
  { } unit
  reads buch_CurOpStatus,buch_CurOperation,intP_buch_AcceptStates_5_alloc_table,intP_buch_CurStates_1_alloc_table,intP_buch_CurStates_old_3_alloc_table,intP_buch_CurTrans_2_alloc_table,intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurStates_1,intP_intM_buch_CurStates_old_3,intP_intM_buch_CurTrans_2,intP_intM_buch_CurTrans_tmp_4,rr,status
  writes buch_CurOpStatus,buch_CurOperation,intP_intM_buch_CurStates_1,intP_intM_buch_CurStates_old_3,intP_intM_buch_CurTrans_2,intP_intM_buch_CurTrans_tmp_4,rr
  { ((JC_<somenum>:
     ((JC_<somenum>: inv(rr))
     and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
         and ((JC_<somenum>: valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
             and ((JC_<somenum>:
                  valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                 and ((JC_<somenum>:
                      valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                     and ((JC_<somenum>:
                          Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                          intP_buch_CurStates_old_3_alloc_table,
                          intP_buch_CurTrans_2_alloc_table,
                          intP_buch_CurStates_1_alloc_table))
                         and ((JC_<somenum>:
                              Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                              intP_intM_buch_CurTrans_2))
                             and ((JC_<somenum>:
                                  valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                 and ((JC_<somenum>:
                                      Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                     and ((JC_<somenum>:
                                          _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                          intP_intM_buch_CurTrans_2,
                                          intP_intM_buch_CurStates_1,
                                          buch_CurOpStatus,
                                          buch_CurOperation, status))
                                         and ((JC_<somenum>:
                                              _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                              intP_intM_buch_CurTrans_2,
                                              intP_intM_buch_CurStates_1,
                                              buch_CurOpStatus,
                                              buch_CurOperation, status))
                                             and ((JC_<somenum>:
                                                  _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                  intP_intM_buch_CurTrans_2,
                                                  intP_intM_buch_CurStates_1,
                                                  buch_CurOpStatus,
                                                  buch_CurOperation, status))
                                                 and ((JC_<somenum>:
                                                      _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                      intP_intM_buch_CurTrans_2,
                                                      intP_intM_buch_CurStates_1,
                                                      buch_CurOpStatus,
                                                      buch_CurOperation,
                                                      status))
                                                     and ((JC_<somenum>:
                                                          _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                          intP_intM_buch_CurTrans_2,
                                                          intP_intM_buch_CurStates_1,
                                                          buch_CurOpStatus,
                                                          buch_CurOperation,
                                                          status))
                                                         and (JC_<somenum>:
                                                             _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status)))))))))))))))))
    and ((JC_<somenum>:
         ((JC_<somenum>: lt_int(integer_of_int32(rr), (5001)))
         and ((JC_<somenum>: inv(rr))
             and ((JC_<somenum>:
                  valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
                 and ((JC_<somenum>:
                      valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                     and ((JC_<somenum>:
                          valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                         and ((JC_<somenum>:
                              valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                             and ((JC_<somenum>:
                                  Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                                  intP_buch_CurStates_old_3_alloc_table,
                                  intP_buch_CurTrans_2_alloc_table,
                                  intP_buch_CurStates_1_alloc_table))
                                 and ((JC_<somenum>:
                                      Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                      intP_intM_buch_CurTrans_2))
                                     and ((JC_<somenum>:
                                          valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                         and ((JC_<somenum>:
                                              Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                             and ((JC_<somenum>:
                                                  _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                                  intP_intM_buch_CurTrans_2,
                                                  intP_intM_buch_CurStates_1,
                                                  buch_CurOpStatus,
                                                  buch_CurOperation, status))
                                                 and ((JC_<somenum>:
                                                      _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                      intP_intM_buch_CurTrans_2,
                                                      intP_intM_buch_CurStates_1,
                                                      buch_CurOpStatus,
                                                      buch_CurOperation,
                                                      status))
                                                     and ((JC_<somenum>:
                                                          _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                          intP_intM_buch_CurTrans_2,
                                                          intP_intM_buch_CurStates_1,
                                                          buch_CurOpStatus,
                                                          buch_CurOperation,
                                                          status))
                                                         and ((JC_<somenum>:
                                                              _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                              intP_intM_buch_CurTrans_2,
                                                              intP_intM_buch_CurStates_1,
                                                              buch_CurOpStatus,
                                                              buch_CurOperation,
                                                              status))
                                                             and ((JC_<somenum>:
                                                                  _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                                  intP_intM_buch_CurTrans_2,
                                                                  intP_intM_buch_CurStates_1,
                                                                  buch_CurOpStatus,
                                                                  buch_CurOperation,
                                                                  status))
                                                                 and 
                                                                 (JC_<somenum>:
                                                                 _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                 intP_intM_buch_CurTrans_2,
                                                                 buch_CurOpStatus,
                                                                 buch_CurOperation,
                                                                 status))))))))))))))))))
        and (JC_<somenum>:
            ((JC_<somenum>:
             ((JC_<somenum>:
              ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (1))))))
             and ((JC_<somenum>:
                  (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                            shift(buch_CurTrans, (0)))))
                  or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                              shift(buch_CurTrans, (2)))))))
                 and ((JC_<somenum>: (true = true))
                     and (JC_<somenum>:
                         (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                                   shift(buch_CurStates, (0)))))
                         or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                                     shift(buch_CurStates,
                                                     (1)))))))))))
            and ((JC_<somenum>: inv(rr))
                and ((JC_<somenum>:
                     valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                        and ((JC_<somenum>:
                             valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                            and ((JC_<somenum>:
                                 valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                                and ((JC_<somenum>:
                                     Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                                     intP_buch_CurStates_old_3_alloc_table,
                                     intP_buch_CurTrans_2_alloc_table,
                                     intP_buch_CurStates_1_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                         intP_intM_buch_CurTrans_2))
                                        and ((JC_<somenum>:
                                             valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                            and ((JC_<somenum>:
                                                 Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and ((JC_<somenum>:
                                                                 _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                                 intP_intM_buch_CurTrans_2,
                                                                 intP_intM_buch_CurStates_1,
                                                                 buch_CurOpStatus,
                                                                 buch_CurOperation,
                                                                 status))
                                                                and (
                                                                    (JC_<somenum>:
                                                                    _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                                    intP_intM_buch_CurTrans_2,
                                                                    intP_intM_buch_CurStates_1,
                                                                    buch_CurOpStatus,
                                                                    buch_CurOperation,
                                                                    status))
                                                                    and 
                                                                    (JC_<somenum>:
                                                                    _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                    intP_intM_buch_CurTrans_2,
                                                                    buch_CurOpStatus,
                                                                    buch_CurOperation,
                                                                    status)))))))))))))))))))) }

parameter fake_requires :
 tt:unit ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and ((JC_<somenum>:
                  (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                            shift(buch_CurStates, (0)))))
                  or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                              shift(buch_CurStates, (1)))))))
                 and (JC_<somenum>: lt_int(integer_of_int32(rr), (5000)))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status))))))))))))))))))}
  unit
  reads buch_CurOpStatus,buch_CurOperation,intP_buch_AcceptStates_5_alloc_table,intP_buch_CurStates_1_alloc_table,intP_buch_CurStates_old_3_alloc_table,intP_buch_CurTrans_2_alloc_table,intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurStates_1,intP_intM_buch_CurStates_old_3,intP_intM_buch_CurTrans_2,intP_intM_buch_CurTrans_tmp_4,rr,status
  writes buch_CurOpStatus,buch_CurOperation,intP_intM_buch_CurStates_1,intP_intM_buch_CurStates_old_3,intP_intM_buch_CurTrans_2,intP_intM_buch_CurTrans_tmp_4,rr
  { ((JC_<somenum>:
     ((JC_<somenum>: inv(rr))
     and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
         and ((JC_<somenum>: valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
             and ((JC_<somenum>:
                  valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                 and ((JC_<somenum>:
                      valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                     and ((JC_<somenum>:
                          Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                          intP_buch_CurStates_old_3_alloc_table,
                          intP_buch_CurTrans_2_alloc_table,
                          intP_buch_CurStates_1_alloc_table))
                         and ((JC_<somenum>:
                              Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                              intP_intM_buch_CurTrans_2))
                             and ((JC_<somenum>:
                                  valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                 and ((JC_<somenum>:
                                      Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                     and ((JC_<somenum>:
                                          _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                          intP_intM_buch_CurTrans_2,
                                          intP_intM_buch_CurStates_1,
                                          buch_CurOpStatus,
                                          buch_CurOperation, status))
                                         and ((JC_<somenum>:
                                              _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                              intP_intM_buch_CurTrans_2,
                                              intP_intM_buch_CurStates_1,
                                              buch_CurOpStatus,
                                              buch_CurOperation, status))
                                             and ((JC_<somenum>:
                                                  _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                  intP_intM_buch_CurTrans_2,
                                                  intP_intM_buch_CurStates_1,
                                                  buch_CurOpStatus,
                                                  buch_CurOperation, status))
                                                 and ((JC_<somenum>:
                                                      _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                      intP_intM_buch_CurTrans_2,
                                                      intP_intM_buch_CurStates_1,
                                                      buch_CurOpStatus,
                                                      buch_CurOperation,
                                                      status))
                                                     and ((JC_<somenum>:
                                                          _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                          intP_intM_buch_CurTrans_2,
                                                          intP_intM_buch_CurStates_1,
                                                          buch_CurOpStatus,
                                                          buch_CurOperation,
                                                          status))
                                                         and (JC_<somenum>:
                                                             _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status)))))))))))))))))
    and ((JC_<somenum>:
         ((JC_<somenum>: lt_int(integer_of_int32(rr), (5001)))
         and ((JC_<somenum>: inv(rr))
             and ((JC_<somenum>:
                  valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
                 and ((JC_<somenum>:
                      valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                     and ((JC_<somenum>:
                          valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                         and ((JC_<somenum>:
                              valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                             and ((JC_<somenum>:
                                  Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                                  intP_buch_CurStates_old_3_alloc_table,
                                  intP_buch_CurTrans_2_alloc_table,
                                  intP_buch_CurStates_1_alloc_table))
                                 and ((JC_<somenum>:
                                      Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                      intP_intM_buch_CurTrans_2))
                                     and ((JC_<somenum>:
                                          valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                         and ((JC_<somenum>:
                                              Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                             and ((JC_<somenum>:
                                                  _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                                  intP_intM_buch_CurTrans_2,
                                                  intP_intM_buch_CurStates_1,
                                                  buch_CurOpStatus,
                                                  buch_CurOperation, status))
                                                 and ((JC_<somenum>:
                                                      _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                      intP_intM_buch_CurTrans_2,
                                                      intP_intM_buch_CurStates_1,
                                                      buch_CurOpStatus,
                                                      buch_CurOperation,
                                                      status))
                                                     and ((JC_<somenum>:
                                                          _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                          intP_intM_buch_CurTrans_2,
                                                          intP_intM_buch_CurStates_1,
                                                          buch_CurOpStatus,
                                                          buch_CurOperation,
                                                          status))
                                                         and ((JC_<somenum>:
                                                              _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                              intP_intM_buch_CurTrans_2,
                                                              intP_intM_buch_CurStates_1,
                                                              buch_CurOpStatus,
                                                              buch_CurOperation,
                                                              status))
                                                             and ((JC_<somenum>:
                                                                  _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                                  intP_intM_buch_CurTrans_2,
                                                                  intP_intM_buch_CurStates_1,
                                                                  buch_CurOpStatus,
                                                                  buch_CurOperation,
                                                                  status))
                                                                 and 
                                                                 (JC_<somenum>:
                                                                 _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                 intP_intM_buch_CurTrans_2,
                                                                 buch_CurOpStatus,
                                                                 buch_CurOperation,
                                                                 status))))))))))))))))))
        and (JC_<somenum>:
            ((JC_<somenum>:
             ((JC_<somenum>:
              ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (1))))))
             and ((JC_<somenum>:
                  (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                            shift(buch_CurTrans, (0)))))
                  or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                              shift(buch_CurTrans, (2)))))))
                 and ((JC_<somenum>: (true = true))
                     and (JC_<somenum>:
                         (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                                   shift(buch_CurStates, (0)))))
                         or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                                     shift(buch_CurStates,
                                                     (1)))))))))))
            and ((JC_<somenum>: inv(rr))
                and ((JC_<somenum>:
                     valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                        and ((JC_<somenum>:
                             valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                            and ((JC_<somenum>:
                                 valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                                and ((JC_<somenum>:
                                     Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                                     intP_buch_CurStates_old_3_alloc_table,
                                     intP_buch_CurTrans_2_alloc_table,
                                     intP_buch_CurStates_1_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                         intP_intM_buch_CurTrans_2))
                                        and ((JC_<somenum>:
                                             valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                            and ((JC_<somenum>:
                                                 Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and ((JC_<somenum>:
                                                                 _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                                 intP_intM_buch_CurTrans_2,
                                                                 intP_intM_buch_CurStates_1,
                                                                 buch_CurOpStatus,
                                                                 buch_CurOperation,
                                                                 status))
                                                                and (
                                                                    (JC_<somenum>:
                                                                    _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                                    intP_intM_buch_CurTrans_2,
                                                                    intP_intM_buch_CurStates_1,
                                                                    buch_CurOpStatus,
                                                                    buch_CurOperation,
                                                                    status))
                                                                    and 
                                                                    (JC_<somenum>:
                                                                    _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                    intP_intM_buch_CurTrans_2,
                                                                    buch_CurOpStatus,
                                                                    buch_CurOperation,
                                                                    status)))))))))))))))))))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter main :
 tt:unit ->
  { } int32
  reads buch_CurOpStatus,buch_CurOperation,intP_buch_AcceptStates_5_alloc_table,intP_buch_CurStates_1_alloc_table,intP_buch_CurStates_old_3_alloc_table,intP_buch_CurTrans_2_alloc_table,intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurStates_1,intP_intM_buch_CurStates_old_3,intP_intM_buch_CurTrans_2,intP_intM_buch_CurTrans_tmp_4,rr,status
  writes buch_CurOpStatus,buch_CurOperation,intP_intM_buch_CurStates_1,intP_intM_buch_CurStates_old_3,intP_intM_buch_CurTrans_2,intP_intM_buch_CurTrans_tmp_4,rr,status
  { ((JC_<somenum>:
     ((JC_<somenum>: inv(rr))
     and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
         and ((JC_<somenum>: valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
             and ((JC_<somenum>:
                  valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                 and ((JC_<somenum>:
                      valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                     and ((JC_<somenum>:
                          Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                          intP_buch_CurStates_old_3_alloc_table,
                          intP_buch_CurTrans_2_alloc_table,
                          intP_buch_CurStates_1_alloc_table))
                         and ((JC_<somenum>:
                              Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                              intP_intM_buch_CurTrans_2))
                             and ((JC_<somenum>:
                                  valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                 and ((JC_<somenum>:
                                      Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                     and ((JC_<somenum>:
                                          _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                          intP_intM_buch_CurTrans_2,
                                          intP_intM_buch_CurStates_1,
                                          buch_CurOpStatus,
                                          buch_CurOperation, status))
                                         and ((JC_<somenum>:
                                              _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                              intP_intM_buch_CurTrans_2,
                                              intP_intM_buch_CurStates_1,
                                              buch_CurOpStatus,
                                              buch_CurOperation, status))
                                             and ((JC_<somenum>:
                                                  _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                  intP_intM_buch_CurTrans_2,
                                                  intP_intM_buch_CurStates_1,
                                                  buch_CurOpStatus,
                                                  buch_CurOperation, status))
                                                 and ((JC_<somenum>:
                                                      _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                      intP_intM_buch_CurTrans_2,
                                                      intP_intM_buch_CurStates_1,
                                                      buch_CurOpStatus,
                                                      buch_CurOperation,
                                                      status))
                                                     and ((JC_<somenum>:
                                                          _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                          intP_intM_buch_CurTrans_2,
                                                          intP_intM_buch_CurStates_1,
                                                          buch_CurOpStatus,
                                                          buch_CurOperation,
                                                          status))
                                                         and (JC_<somenum>:
                                                             _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status)))))))))))))))))
    and (JC_<somenum>:
        ((JC_<somenum>:
         ((JC_<somenum>:
          ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                  shift(buch_CurTrans, (1))))))
         and ((JC_<somenum>:
              (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                        shift(buch_CurTrans, (0)))))
              or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                          shift(buch_CurTrans, (2)))))))
             and ((JC_<somenum>: (true = true))
                 and (JC_<somenum>:
                     (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                               shift(buch_CurStates, (0)))))
                     or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                                 shift(buch_CurStates, (1)))))))))))
        and ((JC_<somenum>: inv(rr))
            and ((JC_<somenum>:
                 valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                        and ((JC_<somenum>:
                             valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                                 intP_buch_CurStates_old_3_alloc_table,
                                 intP_buch_CurTrans_2_alloc_table,
                                 intP_buch_CurStates_1_alloc_table))
                                and ((JC_<somenum>:
                                     Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                     intP_intM_buch_CurTrans_2))
                                    and ((JC_<somenum>:
                                         valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and ((JC_<somenum>:
                                                                 _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                                 intP_intM_buch_CurTrans_2,
                                                                 intP_intM_buch_CurStates_1,
                                                                 buch_CurOpStatus,
                                                                 buch_CurOperation,
                                                                 status))
                                                                and (JC_<somenum>:
                                                                    _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                    intP_intM_buch_CurTrans_2,
                                                                    buch_CurOpStatus,
                                                                    buch_CurOperation,
                                                                    status))))))))))))))))))) }

parameter main_requires :
 tt:unit ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and (JC_<somenum>:
                 (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                           shift(buch_CurStates, (0)))))
                 or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                             shift(buch_CurStates, (1))))))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>:
             valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status))))))))))))))))))}
  int32
  reads buch_CurOpStatus,buch_CurOperation,intP_buch_AcceptStates_5_alloc_table,intP_buch_CurStates_1_alloc_table,intP_buch_CurStates_old_3_alloc_table,intP_buch_CurTrans_2_alloc_table,intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurStates_1,intP_intM_buch_CurStates_old_3,intP_intM_buch_CurTrans_2,intP_intM_buch_CurTrans_tmp_4,rr,status
  writes buch_CurOpStatus,buch_CurOperation,intP_intM_buch_CurStates_1,intP_intM_buch_CurStates_old_3,intP_intM_buch_CurTrans_2,intP_intM_buch_CurTrans_tmp_4,rr,status
  { ((JC_<somenum>:
     ((JC_<somenum>: inv(rr))
     and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
         and ((JC_<somenum>: valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
             and ((JC_<somenum>:
                  valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                 and ((JC_<somenum>:
                      valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                     and ((JC_<somenum>:
                          Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                          intP_buch_CurStates_old_3_alloc_table,
                          intP_buch_CurTrans_2_alloc_table,
                          intP_buch_CurStates_1_alloc_table))
                         and ((JC_<somenum>:
                              Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                              intP_intM_buch_CurTrans_2))
                             and ((JC_<somenum>:
                                  valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                 and ((JC_<somenum>:
                                      Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                     and ((JC_<somenum>:
                                          _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                          intP_intM_buch_CurTrans_2,
                                          intP_intM_buch_CurStates_1,
                                          buch_CurOpStatus,
                                          buch_CurOperation, status))
                                         and ((JC_<somenum>:
                                              _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                              intP_intM_buch_CurTrans_2,
                                              intP_intM_buch_CurStates_1,
                                              buch_CurOpStatus,
                                              buch_CurOperation, status))
                                             and ((JC_<somenum>:
                                                  _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                  intP_intM_buch_CurTrans_2,
                                                  intP_intM_buch_CurStates_1,
                                                  buch_CurOpStatus,
                                                  buch_CurOperation, status))
                                                 and ((JC_<somenum>:
                                                      _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                      intP_intM_buch_CurTrans_2,
                                                      intP_intM_buch_CurStates_1,
                                                      buch_CurOpStatus,
                                                      buch_CurOperation,
                                                      status))
                                                     and ((JC_<somenum>:
                                                          _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                          intP_intM_buch_CurTrans_2,
                                                          intP_intM_buch_CurStates_1,
                                                          buch_CurOpStatus,
                                                          buch_CurOperation,
                                                          status))
                                                         and (JC_<somenum>:
                                                             _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status)))))))))))))))))
    and (JC_<somenum>:
        ((JC_<somenum>:
         ((JC_<somenum>:
          ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                  shift(buch_CurTrans, (1))))))
         and ((JC_<somenum>:
              (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                        shift(buch_CurTrans, (0)))))
              or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                          shift(buch_CurTrans, (2)))))))
             and ((JC_<somenum>: (true = true))
                 and (JC_<somenum>:
                     (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                               shift(buch_CurStates, (0)))))
                     or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                                 shift(buch_CurStates, (1)))))))))))
        and ((JC_<somenum>: inv(rr))
            and ((JC_<somenum>:
                 valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                        and ((JC_<somenum>:
                             valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                                 intP_buch_CurStates_old_3_alloc_table,
                                 intP_buch_CurTrans_2_alloc_table,
                                 intP_buch_CurStates_1_alloc_table))
                                and ((JC_<somenum>:
                                     Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                     intP_intM_buch_CurTrans_2))
                                    and ((JC_<somenum>:
                                         valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and ((JC_<somenum>:
                                                                 _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                                 intP_intM_buch_CurTrans_2,
                                                                 intP_intM_buch_CurStates_1,
                                                                 buch_CurOpStatus,
                                                                 buch_CurOperation,
                                                                 status))
                                                                and (JC_<somenum>:
                                                                    _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                    intP_intM_buch_CurTrans_2,
                                                                    buch_CurOpStatus,
                                                                    buch_CurOperation,
                                                                    status))))))))))))))))))) }

parameter op :
 tt:unit ->
  { } unit
  reads buch_CurOpStatus,buch_CurOperation,intP_buch_AcceptStates_5_alloc_table,intP_buch_CurStates_1_alloc_table,intP_buch_CurStates_old_3_alloc_table,intP_buch_CurTrans_2_alloc_table,intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurStates_1,intP_intM_buch_CurStates_old_3,intP_intM_buch_CurTrans_2,intP_intM_buch_CurTrans_tmp_4,rr,status
  writes buch_CurOpStatus,buch_CurOperation,intP_intM_buch_CurStates_1,intP_intM_buch_CurStates_old_3,intP_intM_buch_CurTrans_2,intP_intM_buch_CurTrans_tmp_4,status
  { ((JC_<somenum>:
     ((JC_<somenum>: inv(rr))
     and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
         and ((JC_<somenum>: valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
             and ((JC_<somenum>:
                  valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                 and ((JC_<somenum>:
                      valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                     and ((JC_<somenum>:
                          Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                          intP_buch_CurStates_old_3_alloc_table,
                          intP_buch_CurTrans_2_alloc_table,
                          intP_buch_CurStates_1_alloc_table))
                         and ((JC_<somenum>:
                              Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                              intP_intM_buch_CurTrans_2))
                             and ((JC_<somenum>:
                                  valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                 and ((JC_<somenum>:
                                      Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                     and ((JC_<somenum>:
                                          _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                          intP_intM_buch_CurTrans_2,
                                          intP_intM_buch_CurStates_1,
                                          buch_CurOpStatus,
                                          buch_CurOperation, status))
                                         and ((JC_<somenum>:
                                              _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                              intP_intM_buch_CurTrans_2,
                                              intP_intM_buch_CurStates_1,
                                              buch_CurOpStatus,
                                              buch_CurOperation, status))
                                             and ((JC_<somenum>:
                                                  _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                  intP_intM_buch_CurTrans_2,
                                                  intP_intM_buch_CurStates_1,
                                                  buch_CurOpStatus,
                                                  buch_CurOperation, status))
                                                 and ((JC_<somenum>:
                                                      _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                      intP_intM_buch_CurTrans_2,
                                                      intP_intM_buch_CurStates_1,
                                                      buch_CurOpStatus,
                                                      buch_CurOperation,
                                                      status))
                                                     and ((JC_<somenum>:
                                                          _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                          intP_intM_buch_CurTrans_2,
                                                          intP_intM_buch_CurStates_1,
                                                          buch_CurOpStatus,
                                                          buch_CurOperation,
                                                          status))
                                                         and (JC_<somenum>:
                                                             _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status)))))))))))))))))
    and (JC_<somenum>:
        ((JC_<somenum>:
         ((JC_<somenum>:
          ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                  shift(buch_CurTrans, (1))))))
         and ((JC_<somenum>:
              (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                        shift(buch_CurTrans, (0)))))
              or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                          shift(buch_CurTrans, (2)))))))
             and ((JC_<somenum>: (true = true))
                 and (JC_<somenum>:
                     (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                               shift(buch_CurStates, (0)))))
                     or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                                 shift(buch_CurStates, (1)))))))))))
        and ((JC_<somenum>: inv(rr))
            and ((JC_<somenum>:
                 valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                        and ((JC_<somenum>:
                             valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                                 intP_buch_CurStates_old_3_alloc_table,
                                 intP_buch_CurTrans_2_alloc_table,
                                 intP_buch_CurStates_1_alloc_table))
                                and ((JC_<somenum>:
                                     Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                     intP_intM_buch_CurTrans_2))
                                    and ((JC_<somenum>:
                                         valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and ((JC_<somenum>:
                                                                 _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                                 intP_intM_buch_CurTrans_2,
                                                                 intP_intM_buch_CurStates_1,
                                                                 buch_CurOpStatus,
                                                                 buch_CurOperation,
                                                                 status))
                                                                and (JC_<somenum>:
                                                                    _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                    intP_intM_buch_CurTrans_2,
                                                                    buch_CurOpStatus,
                                                                    buch_CurOperation,
                                                                    status))))))))))))))))))) }

parameter op_requires :
 tt:unit ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and (JC_<somenum>:
                 (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                           shift(buch_CurStates, (0)))))
                 or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                             shift(buch_CurStates, (1))))))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>:
             valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status))))))))))))))))))}
  unit
  reads buch_CurOpStatus,buch_CurOperation,intP_buch_AcceptStates_5_alloc_table,intP_buch_CurStates_1_alloc_table,intP_buch_CurStates_old_3_alloc_table,intP_buch_CurTrans_2_alloc_table,intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurStates_1,intP_intM_buch_CurStates_old_3,intP_intM_buch_CurTrans_2,intP_intM_buch_CurTrans_tmp_4,rr,status
  writes buch_CurOpStatus,buch_CurOperation,intP_intM_buch_CurStates_1,intP_intM_buch_CurStates_old_3,intP_intM_buch_CurTrans_2,intP_intM_buch_CurTrans_tmp_4,status
  { ((JC_<somenum>:
     ((JC_<somenum>: inv(rr))
     and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
         and ((JC_<somenum>: valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
             and ((JC_<somenum>:
                  valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                 and ((JC_<somenum>:
                      valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                     and ((JC_<somenum>:
                          Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                          intP_buch_CurStates_old_3_alloc_table,
                          intP_buch_CurTrans_2_alloc_table,
                          intP_buch_CurStates_1_alloc_table))
                         and ((JC_<somenum>:
                              Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                              intP_intM_buch_CurTrans_2))
                             and ((JC_<somenum>:
                                  valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                 and ((JC_<somenum>:
                                      Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                     and ((JC_<somenum>:
                                          _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                          intP_intM_buch_CurTrans_2,
                                          intP_intM_buch_CurStates_1,
                                          buch_CurOpStatus,
                                          buch_CurOperation, status))
                                         and ((JC_<somenum>:
                                              _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                              intP_intM_buch_CurTrans_2,
                                              intP_intM_buch_CurStates_1,
                                              buch_CurOpStatus,
                                              buch_CurOperation, status))
                                             and ((JC_<somenum>:
                                                  _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                  intP_intM_buch_CurTrans_2,
                                                  intP_intM_buch_CurStates_1,
                                                  buch_CurOpStatus,
                                                  buch_CurOperation, status))
                                                 and ((JC_<somenum>:
                                                      _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                      intP_intM_buch_CurTrans_2,
                                                      intP_intM_buch_CurStates_1,
                                                      buch_CurOpStatus,
                                                      buch_CurOperation,
                                                      status))
                                                     and ((JC_<somenum>:
                                                          _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                          intP_intM_buch_CurTrans_2,
                                                          intP_intM_buch_CurStates_1,
                                                          buch_CurOpStatus,
                                                          buch_CurOperation,
                                                          status))
                                                         and (JC_<somenum>:
                                                             _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status)))))))))))))))))
    and (JC_<somenum>:
        ((JC_<somenum>:
         ((JC_<somenum>:
          ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                  shift(buch_CurTrans, (1))))))
         and ((JC_<somenum>:
              (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                        shift(buch_CurTrans, (0)))))
              or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                          shift(buch_CurTrans, (2)))))))
             and ((JC_<somenum>: (true = true))
                 and (JC_<somenum>:
                     (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                               shift(buch_CurStates, (0)))))
                     or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                                 shift(buch_CurStates, (1)))))))))))
        and ((JC_<somenum>: inv(rr))
            and ((JC_<somenum>:
                 valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                        and ((JC_<somenum>:
                             valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                                 intP_buch_CurStates_old_3_alloc_table,
                                 intP_buch_CurTrans_2_alloc_table,
                                 intP_buch_CurStates_1_alloc_table))
                                and ((JC_<somenum>:
                                     Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                     intP_intM_buch_CurTrans_2))
                                    and ((JC_<somenum>:
                                         valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and ((JC_<somenum>:
                                                                 _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                                 intP_intM_buch_CurTrans_2,
                                                                 intP_intM_buch_CurStates_1,
                                                                 buch_CurOpStatus,
                                                                 buch_CurOperation,
                                                                 status))
                                                                and (JC_<somenum>:
                                                                    _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                    intP_intM_buch_CurTrans_2,
                                                                    buch_CurOpStatus,
                                                                    buch_CurOperation,
                                                                    status))))))))))))))))))) }

parameter safe_Buch_OpStatusList_of_integer_ :
 x:int ->
  { } Buch_OpStatusList { eq_int(integer_of_Buch_OpStatusList(result), x) }

parameter safe_buch_ListOper_of_integer_ :
 x:int -> { } buch_ListOper { eq_int(integer_of_buch_ListOper(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let fake_ensures_Buchi_property_behavior =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and ((JC_<somenum>:
                  (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                            shift(buch_CurStates, (0)))))
                  or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                              shift(buch_CurStates, (1)))))))
                 and (JC_<somenum>: lt_int(integer_of_int32(rr), (5000)))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }
  (init:
  try
   begin
     (let tmp = ref (any_int32 void) in
     (let tmp_0 = ref (any_int32 void) in
     (let tmp_1 = ref (any_int32 void) in
     (C_3:
     (C_4:
     (C_5:
     (C_8:
     (C_11:
     (C_14:
     (C_17:
     (C_20:
     (C_26:
     (C_30:
     (C_38:
     (C_40:
     (C_47:
     begin
       (let jessie_<somenum> =
       (rr := (C_2:
              (safe_int32_of_integer_ (C_1:
                                      ((add_int (integer_of_int32 !rr)) (1)))))) in
       void);
      (let jessie_<somenum> =
      (buch_CurOperation := (safe_buch_ListOper_of_integer_ (0))) in void);
      (let jessie_<somenum> =
      (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (C_6:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (0)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> =
      (C_9:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (1)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_old_3_alloc_table,intP_intM_buch_CurStates_old_3
        writes intP_intM_buch_CurStates_old_3
        { (not_assigns(intP_buch_CurStates_old_3_alloc_table,
           intP_intM_buch_CurStates_old_3@, intP_intM_buch_CurStates_old_3,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_old_3,
                shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_old_3,
                   shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (C_12:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (0)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> =
      (C_15:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (1)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> =
      (C_18:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (2)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurTrans_tmp_4
        writes intP_intM_buch_CurTrans_tmp_4
        { (not_assigns(intP_buch_CurTrans_tmp_4_alloc_table,
           intP_intM_buch_CurTrans_tmp_4@, intP_intM_buch_CurTrans_tmp_4,
           pset_range(pset_singleton(jessie_<somenum>), (0), (2)))
          and ((select(intP_intM_buch_CurTrans_tmp_4, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and ((select(intP_intM_buch_CurTrans_tmp_4,
                    shift(jessie_<somenum>, (1))) = jessie_<somenum>)
                  and (select(intP_intM_buch_CurTrans_tmp_4,
                       shift(jessie_<somenum>, (2))) = jessie_<somenum>)))) } ]))))))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_24:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then (C_23: begin   (tmp := (safe_int32_of_integer_ (1))); !tmp end)
       else (C_22: begin   (tmp := (safe_int32_of_integer_ (0))); !tmp end))
      else (C_21: begin   (tmp := (safe_int32_of_integer_ (0))); !tmp end)) in
      void);
      (let jessie_<somenum> = !tmp in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> =
      (C_28:
      (safe_int32_of_integer_ (if ((neq_int_ (integer_of_int32 (C_27:
                                                               ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                                                ((shift buch_CurStates_old) (1)))))) (0))
                              then (1) else (0)))) in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_1_alloc_table,intP_intM_buch_CurStates_1
        writes intP_intM_buch_CurStates_1
        { (not_assigns(intP_buch_CurStates_1_alloc_table,
           intP_intM_buch_CurStates_1@, intP_intM_buch_CurStates_1,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_36:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (if ((neq_int_ (integer_of_int32 (C_35:
                                         ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                          ((shift buch_CurStates) (0)))))) (0))
        then
         (C_34: begin   (tmp_0 := (safe_int32_of_integer_ (1))); !tmp_0 end)
        else
         (C_33: begin   (tmp_0 := (safe_int32_of_integer_ (0))); !tmp_0 end))
       else
        (C_32: begin   (tmp_0 := (safe_int32_of_integer_ (0))); !tmp_0 end))
      else
       (C_31: begin   (tmp_0 := (safe_int32_of_integer_ (0))); !tmp_0 end)) in
      void);
      (let jessie_<somenum> = !tmp_0 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_2_alloc_table,intP_intM_buch_CurTrans_2
        writes intP_intM_buch_CurTrans_2
        { (not_assigns(intP_buch_CurTrans_2_alloc_table,
           intP_intM_buch_CurTrans_2@, intP_intM_buch_CurTrans_2,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_45:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (1)))))) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_44:
                                        ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                         ((shift buch_CurStates) (1)))))) (0))
       then
        (C_43: begin   (tmp_1 := (safe_int32_of_integer_ (1))); !tmp_1 end)
       else
        (C_42: begin   (tmp_1 := (safe_int32_of_integer_ (0))); !tmp_1 end))
      else
       (C_41: begin   (tmp_1 := (safe_int32_of_integer_ (0))); !tmp_1 end)) in
      void);
      (let jessie_<somenum> = !tmp_1 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>))))));
      (raise Return) end)))))))))))))))); (raise Return) end with Return ->
   void end)
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and (JC_<somenum>:
                 (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                           shift(buch_CurStates, (0)))))
                 or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                             shift(buch_CurStates, (1)))))))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>:
             valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }

let fake_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and ((JC_<somenum>:
                  (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                            shift(buch_CurStates, (0)))))
                  or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                              shift(buch_CurStates, (1)))))))
                 and (JC_<somenum>: lt_int(integer_of_int32(rr), (5000)))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }
  (init:
  try
   begin
     (let tmp = ref (any_int32 void) in
     (let tmp_0 = ref (any_int32 void) in
     (let tmp_1 = ref (any_int32 void) in
     (C_3:
     (C_4:
     (C_5:
     (C_8:
     (C_11:
     (C_14:
     (C_17:
     (C_20:
     (C_26:
     (C_30:
     (C_38:
     (C_40:
     (C_47:
     begin
       (let jessie_<somenum> =
       (rr := (C_2:
              (safe_int32_of_integer_ (C_1:
                                      ((add_int (integer_of_int32 !rr)) (1)))))) in
       void);
      (let jessie_<somenum> =
      (buch_CurOperation := (safe_buch_ListOper_of_integer_ (0))) in void);
      (let jessie_<somenum> =
      (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (C_6:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (0)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> =
      (C_9:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (1)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_old_3_alloc_table,intP_intM_buch_CurStates_old_3
        writes intP_intM_buch_CurStates_old_3
        { (not_assigns(intP_buch_CurStates_old_3_alloc_table,
           intP_intM_buch_CurStates_old_3@, intP_intM_buch_CurStates_old_3,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_old_3, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_old_3,
                   shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (C_12:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (0)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> =
      (C_15:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (1)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> =
      (C_18:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (2)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurTrans_tmp_4
        writes intP_intM_buch_CurTrans_tmp_4
        { (not_assigns(intP_buch_CurTrans_tmp_4_alloc_table,
           intP_intM_buch_CurTrans_tmp_4@, intP_intM_buch_CurTrans_tmp_4,
           pset_range(pset_singleton(jessie_<somenum>), (0), (2)))
          and ((select(intP_intM_buch_CurTrans_tmp_4, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and ((select(intP_intM_buch_CurTrans_tmp_4,
                    shift(jessie_<somenum>, (1))) = jessie_<somenum>)
                  and (select(intP_intM_buch_CurTrans_tmp_4,
                       shift(jessie_<somenum>, (2))) = jessie_<somenum>)))) } ]))))))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_24:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then (C_23: begin   (tmp := (safe_int32_of_integer_ (1))); !tmp end)
       else (C_22: begin   (tmp := (safe_int32_of_integer_ (0))); !tmp end))
      else (C_21: begin   (tmp := (safe_int32_of_integer_ (0))); !tmp end)) in
      void);
      (let jessie_<somenum> = !tmp in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> =
      (C_28:
      (safe_int32_of_integer_ (if ((neq_int_ (integer_of_int32 (C_27:
                                                               ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                                                ((shift buch_CurStates_old) (1)))))) (0))
                              then (1) else (0)))) in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_1_alloc_table,intP_intM_buch_CurStates_1
        writes intP_intM_buch_CurStates_1
        { (not_assigns(intP_buch_CurStates_1_alloc_table,
           intP_intM_buch_CurStates_1@, intP_intM_buch_CurStates_1,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_36:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (if ((neq_int_ (integer_of_int32 (C_35:
                                         ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                          ((shift buch_CurStates) (0)))))) (0))
        then
         (C_34: begin   (tmp_0 := (safe_int32_of_integer_ (1))); !tmp_0 end)
        else
         (C_33: begin   (tmp_0 := (safe_int32_of_integer_ (0))); !tmp_0 end))
       else
        (C_32: begin   (tmp_0 := (safe_int32_of_integer_ (0))); !tmp_0 end))
      else
       (C_31: begin   (tmp_0 := (safe_int32_of_integer_ (0))); !tmp_0 end)) in
      void);
      (let jessie_<somenum> = !tmp_0 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_2_alloc_table,intP_intM_buch_CurTrans_2
        writes intP_intM_buch_CurTrans_2
        { (not_assigns(intP_buch_CurTrans_2_alloc_table,
           intP_intM_buch_CurTrans_2@, intP_intM_buch_CurTrans_2,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_45:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (1)))))) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_44:
                                        ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                         ((shift buch_CurStates) (1)))))) (0))
       then
        (C_43: begin   (tmp_1 := (safe_int32_of_integer_ (1))); !tmp_1 end)
       else
        (C_42: begin   (tmp_1 := (safe_int32_of_integer_ (0))); !tmp_1 end))
      else
       (C_41: begin   (tmp_1 := (safe_int32_of_integer_ (0))); !tmp_1 end)) in
      void);
      (let jessie_<somenum> = !tmp_1 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>))))));
      (raise Return) end)))))))))))))))); (raise Return) end with Return ->
   void end) { (JC_<somenum>: true) }

let fake_ensures_j =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and ((JC_<somenum>:
                  (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                            shift(buch_CurStates, (0)))))
                  or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                              shift(buch_CurStates, (1)))))))
                 and (JC_<somenum>: lt_int(integer_of_int32(rr), (5000)))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }
  (init:
  try
   begin
     (let tmp = ref (any_int32 void) in
     (let tmp_0 = ref (any_int32 void) in
     (let tmp_1 = ref (any_int32 void) in
     (C_3:
     (C_4:
     (C_5:
     (C_8:
     (C_11:
     (C_14:
     (C_17:
     (C_20:
     (C_26:
     (C_30:
     (C_38:
     (C_40:
     (C_47:
     begin
       (let jessie_<somenum> =
       (rr := (C_2:
              (safe_int32_of_integer_ (C_1:
                                      ((add_int (integer_of_int32 !rr)) (1)))))) in
       void);
      (let jessie_<somenum> =
      (buch_CurOperation := (safe_buch_ListOper_of_integer_ (0))) in void);
      (let jessie_<somenum> =
      (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (C_6:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (0)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> =
      (C_9:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (1)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_old_3_alloc_table,intP_intM_buch_CurStates_old_3
        writes intP_intM_buch_CurStates_old_3
        { (not_assigns(intP_buch_CurStates_old_3_alloc_table,
           intP_intM_buch_CurStates_old_3@, intP_intM_buch_CurStates_old_3,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_old_3,
                shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_old_3,
                   shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (C_12:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (0)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> =
      (C_15:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (1)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> =
      (C_18:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (2)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurTrans_tmp_4
        writes intP_intM_buch_CurTrans_tmp_4
        { (not_assigns(intP_buch_CurTrans_tmp_4_alloc_table,
           intP_intM_buch_CurTrans_tmp_4@, intP_intM_buch_CurTrans_tmp_4,
           pset_range(pset_singleton(jessie_<somenum>), (0), (2)))
          and ((select(intP_intM_buch_CurTrans_tmp_4, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and ((select(intP_intM_buch_CurTrans_tmp_4,
                    shift(jessie_<somenum>, (1))) = jessie_<somenum>)
                  and (select(intP_intM_buch_CurTrans_tmp_4,
                       shift(jessie_<somenum>, (2))) = jessie_<somenum>)))) } ]))))))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_24:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then (C_23: begin   (tmp := (safe_int32_of_integer_ (1))); !tmp end)
       else (C_22: begin   (tmp := (safe_int32_of_integer_ (0))); !tmp end))
      else (C_21: begin   (tmp := (safe_int32_of_integer_ (0))); !tmp end)) in
      void);
      (let jessie_<somenum> = !tmp in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> =
      (C_28:
      (safe_int32_of_integer_ (if ((neq_int_ (integer_of_int32 (C_27:
                                                               ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                                                ((shift buch_CurStates_old) (1)))))) (0))
                              then (1) else (0)))) in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_1_alloc_table,intP_intM_buch_CurStates_1
        writes intP_intM_buch_CurStates_1
        { (not_assigns(intP_buch_CurStates_1_alloc_table,
           intP_intM_buch_CurStates_1@, intP_intM_buch_CurStates_1,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_36:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (if ((neq_int_ (integer_of_int32 (C_35:
                                         ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                          ((shift buch_CurStates) (0)))))) (0))
        then
         (C_34: begin   (tmp_0 := (safe_int32_of_integer_ (1))); !tmp_0 end)
        else
         (C_33: begin   (tmp_0 := (safe_int32_of_integer_ (0))); !tmp_0 end))
       else
        (C_32: begin   (tmp_0 := (safe_int32_of_integer_ (0))); !tmp_0 end))
      else
       (C_31: begin   (tmp_0 := (safe_int32_of_integer_ (0))); !tmp_0 end)) in
      void);
      (let jessie_<somenum> = !tmp_0 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_2_alloc_table,intP_intM_buch_CurTrans_2
        writes intP_intM_buch_CurTrans_2
        { (not_assigns(intP_buch_CurTrans_2_alloc_table,
           intP_intM_buch_CurTrans_2@, intP_intM_buch_CurTrans_2,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_45:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (1)))))) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_44:
                                        ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                         ((shift buch_CurStates) (1)))))) (0))
       then
        (C_43: begin   (tmp_1 := (safe_int32_of_integer_ (1))); !tmp_1 end)
       else
        (C_42: begin   (tmp_1 := (safe_int32_of_integer_ (0))); !tmp_1 end))
      else
       (C_41: begin   (tmp_1 := (safe_int32_of_integer_ (0))); !tmp_1 end)) in
      void);
      (let jessie_<somenum> = !tmp_1 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>))))));
      (raise Return) end)))))))))))))))); (raise Return) end with Return ->
   void end)
  { (JC_<somenum>:
    ((JC_<somenum>: lt_int(integer_of_int32(rr), (5001)))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>:
             valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }

let fake_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and ((JC_<somenum>:
                  (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                            shift(buch_CurStates, (0)))))
                  or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                              shift(buch_CurStates, (1)))))))
                 and (JC_<somenum>: lt_int(integer_of_int32(rr), (5000)))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }
  (init:
  try
   begin
     (let tmp = ref (any_int32 void) in
     (let tmp_0 = ref (any_int32 void) in
     (let tmp_1 = ref (any_int32 void) in
     (C_3:
     (C_4:
     (C_5:
     (C_8:
     (C_11:
     (C_14:
     (C_17:
     (C_20:
     (C_26:
     (C_30:
     (C_38:
     (C_40:
     (C_47:
     begin
       (let jessie_<somenum> =
       (rr := (C_2:
              (JC_<somenum>:
              (int32_of_integer_ (C_1:
                                 ((add_int (integer_of_int32 !rr)) (1))))))) in
       void);
      (let jessie_<somenum> =
      (buch_CurOperation := (safe_buch_ListOper_of_integer_ (0))) in void);
      (let jessie_<somenum> =
      (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (C_6:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (0)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> =
      (C_9:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (1)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_old_3_alloc_table,intP_intM_buch_CurStates_old_3
        writes intP_intM_buch_CurStates_old_3
        { (not_assigns(intP_buch_CurStates_old_3_alloc_table,
           intP_intM_buch_CurStates_old_3@, intP_intM_buch_CurStates_old_3,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_old_3, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_old_3,
                   shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (C_12:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (0)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> =
      (C_15:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (1)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> =
      (C_18:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (2)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurTrans_tmp_4
        writes intP_intM_buch_CurTrans_tmp_4
        { (not_assigns(intP_buch_CurTrans_tmp_4_alloc_table,
           intP_intM_buch_CurTrans_tmp_4@, intP_intM_buch_CurTrans_tmp_4,
           pset_range(pset_singleton(jessie_<somenum>), (0), (2)))
          and ((select(intP_intM_buch_CurTrans_tmp_4, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and ((select(intP_intM_buch_CurTrans_tmp_4,
                    shift(jessie_<somenum>, (1))) = jessie_<somenum>)
                  and (select(intP_intM_buch_CurTrans_tmp_4,
                       shift(jessie_<somenum>, (2))) = jessie_<somenum>)))) } ]))))))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_24:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then (C_23: begin   (tmp := (safe_int32_of_integer_ (1))); !tmp end)
       else (C_22: begin   (tmp := (safe_int32_of_integer_ (0))); !tmp end))
      else (C_21: begin   (tmp := (safe_int32_of_integer_ (0))); !tmp end)) in
      void);
      (let jessie_<somenum> = !tmp in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> =
      (C_28:
      (JC_<somenum>:
      (int32_of_integer_ (if ((neq_int_ (integer_of_int32 (C_27:
                                                          ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                                           ((shift buch_CurStates_old) (1)))))) (0))
                         then (1) else (0))))) in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_1_alloc_table,intP_intM_buch_CurStates_1
        writes intP_intM_buch_CurStates_1
        { (not_assigns(intP_buch_CurStates_1_alloc_table,
           intP_intM_buch_CurStates_1@, intP_intM_buch_CurStates_1,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_36:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (if ((neq_int_ (integer_of_int32 (C_35:
                                         ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                          ((shift buch_CurStates) (0)))))) (0))
        then
         (C_34: begin   (tmp_0 := (safe_int32_of_integer_ (1))); !tmp_0 end)
        else
         (C_33: begin   (tmp_0 := (safe_int32_of_integer_ (0))); !tmp_0 end))
       else
        (C_32: begin   (tmp_0 := (safe_int32_of_integer_ (0))); !tmp_0 end))
      else
       (C_31: begin   (tmp_0 := (safe_int32_of_integer_ (0))); !tmp_0 end)) in
      void);
      (let jessie_<somenum> = !tmp_0 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_2_alloc_table,intP_intM_buch_CurTrans_2
        writes intP_intM_buch_CurTrans_2
        { (not_assigns(intP_buch_CurTrans_2_alloc_table,
           intP_intM_buch_CurTrans_2@, intP_intM_buch_CurTrans_2,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_45:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (1)))))) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_44:
                                        ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                         ((shift buch_CurStates) (1)))))) (0))
       then
        (C_43: begin   (tmp_1 := (safe_int32_of_integer_ (1))); !tmp_1 end)
       else
        (C_42: begin   (tmp_1 := (safe_int32_of_integer_ (0))); !tmp_1 end))
      else
       (C_41: begin   (tmp_1 := (safe_int32_of_integer_ (0))); !tmp_1 end)) in
      void);
      (let jessie_<somenum> = !tmp_1 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>))))));
      (raise Return) end)))))))))))))))); (raise Return) end with Return ->
   void end)
  { (JC_<somenum>:
    ((JC_<somenum>: inv(rr))
    and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
        and ((JC_<somenum>: valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                    and ((JC_<somenum>:
                         Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                         intP_buch_CurStates_old_3_alloc_table,
                         intP_buch_CurTrans_2_alloc_table,
                         intP_buch_CurStates_1_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                             intP_intM_buch_CurTrans_2))
                            and ((JC_<somenum>:
                                 valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                and ((JC_<somenum>:
                                     Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                         intP_intM_buch_CurTrans_2,
                                         intP_intM_buch_CurStates_1,
                                         buch_CurOpStatus, buch_CurOperation,
                                         status))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and (JC_<somenum>:
                                                            _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                            intP_intM_buch_CurTrans_2,
                                                            buch_CurOpStatus,
                                                            buch_CurOperation,
                                                            status))))))))))))))))) }

let main_ensures_Buchi_property_behavior =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and (JC_<somenum>:
                 (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                           shift(buch_CurStates, (0)))))
                 or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                             shift(buch_CurStates, (1))))))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>:
             valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (let tmp_0_2 = ref (any_int32 void) in
     (let tmp_0_3 = ref (any_int32 void) in
     (let tmp_1_1 = ref (any_int32 void) in
     (C_130:
     (C_131:
     (C_133:
     (C_134:
     (C_135:
     (C_138:
     (C_141:
     (C_144:
     (C_147:
     (C_150:
     (C_156:
     (C_160:
     (C_168:
     (C_170:
     (C_177:
     begin
       (if ((lt_int_ (integer_of_int32 !rr)) (5000))
       then
        (C_127:
        (C_128:
        begin
          (let jessie_<somenum> =
          (buch_CurOperation := (safe_buch_ListOper_of_integer_ (0))) in
          void);
         (let jessie_<somenum> =
         (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (0))) in
         void); (C_129: (JC_<somenum>: (fake void))) end)) else void);
      (let jessie_<somenum> =
      (buch_CurOperation := (safe_buch_ListOper_of_integer_ (2))) in void);
      (let jessie_<somenum> =
      (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (0))) in void);
      (C_132: (JC_<somenum>: (op void)));
      (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (buch_CurOperation := (safe_buch_ListOper_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (C_136:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (0)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> =
      (C_139:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (1)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_old_3_alloc_table,intP_intM_buch_CurStates_old_3
        writes intP_intM_buch_CurStates_old_3
        { (not_assigns(intP_buch_CurStates_old_3_alloc_table,
           intP_intM_buch_CurStates_old_3@, intP_intM_buch_CurStates_old_3,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_old_3,
                shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_old_3,
                   shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (C_142:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (0)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> =
      (C_145:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (1)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> =
      (C_148:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (2)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurTrans_tmp_4
        writes intP_intM_buch_CurTrans_tmp_4
        { (not_assigns(intP_buch_CurTrans_tmp_4_alloc_table,
           intP_intM_buch_CurTrans_tmp_4@, intP_intM_buch_CurTrans_tmp_4,
           pset_range(pset_singleton(jessie_<somenum>), (0), (2)))
          and ((select(intP_intM_buch_CurTrans_tmp_4, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and ((select(intP_intM_buch_CurTrans_tmp_4,
                    shift(jessie_<somenum>, (1))) = jessie_<somenum>)
                  and (select(intP_intM_buch_CurTrans_tmp_4,
                       shift(jessie_<somenum>, (2))) = jessie_<somenum>)))) } ]))))))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_154:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (C_153:
        begin   (tmp_0_2 := (safe_int32_of_integer_ (1))); !tmp_0_2 end)
       else
        (C_152:
        begin   (tmp_0_2 := (safe_int32_of_integer_ (0))); !tmp_0_2 end))
      else
       (C_151:
       begin   (tmp_0_2 := (safe_int32_of_integer_ (0))); !tmp_0_2 end)) in
      void);
      (let jessie_<somenum> = !tmp_0_2 in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> =
      (C_158:
      (safe_int32_of_integer_ (if ((neq_int_ (integer_of_int32 (C_157:
                                                               ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                                                ((shift buch_CurStates_old) (1)))))) (0))
                              then (1) else (0)))) in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_1_alloc_table,intP_intM_buch_CurStates_1
        writes intP_intM_buch_CurStates_1
        { (not_assigns(intP_buch_CurStates_1_alloc_table,
           intP_intM_buch_CurStates_1@, intP_intM_buch_CurStates_1,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_166:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (if ((neq_int_ (integer_of_int32 (C_165:
                                         ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                          ((shift buch_CurStates) (0)))))) (0))
        then
         (C_164:
         begin   (tmp_0_3 := (safe_int32_of_integer_ (1))); !tmp_0_3 end)
        else
         (C_163:
         begin   (tmp_0_3 := (safe_int32_of_integer_ (0))); !tmp_0_3 end))
       else
        (C_162:
        begin   (tmp_0_3 := (safe_int32_of_integer_ (0))); !tmp_0_3 end))
      else
       (C_161:
       begin   (tmp_0_3 := (safe_int32_of_integer_ (0))); !tmp_0_3 end)) in
      void);
      (let jessie_<somenum> = !tmp_0_3 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_2_alloc_table,intP_intM_buch_CurTrans_2
        writes intP_intM_buch_CurTrans_2
        { (not_assigns(intP_buch_CurTrans_2_alloc_table,
           intP_intM_buch_CurTrans_2@, intP_intM_buch_CurTrans_2,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_175:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (1)))))) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_174:
                                        ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                         ((shift buch_CurStates) (1)))))) (0))
       then
        (C_173:
        begin   (tmp_1_1 := (safe_int32_of_integer_ (1))); !tmp_1_1 end)
       else
        (C_172:
        begin   (tmp_1_1 := (safe_int32_of_integer_ (0))); !tmp_1_1 end))
      else
       (C_171:
       begin   (tmp_1_1 := (safe_int32_of_integer_ (0))); !tmp_1_1 end)) in
      void);
      (let jessie_<somenum> = !tmp_1_1 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>))))));
      (return := !__retres); (raise Return) end))))))))))))))))))); absurd 
   end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and (JC_<somenum>:
                 (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                           shift(buch_CurStates, (0)))))
                 or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                             shift(buch_CurStates, (1)))))))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>:
             valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }

let main_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and (JC_<somenum>:
                 (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                           shift(buch_CurStates, (0)))))
                 or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                             shift(buch_CurStates, (1))))))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>:
             valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (let tmp_0_2 = ref (any_int32 void) in
     (let tmp_0_3 = ref (any_int32 void) in
     (let tmp_1_1 = ref (any_int32 void) in
     (C_130:
     (C_131:
     (C_133:
     (C_134:
     (C_135:
     (C_138:
     (C_141:
     (C_144:
     (C_147:
     (C_150:
     (C_156:
     (C_160:
     (C_168:
     (C_170:
     (C_177:
     begin
       (if ((lt_int_ (integer_of_int32 !rr)) (5000))
       then
        (C_127:
        (C_128:
        begin
          (let jessie_<somenum> =
          (buch_CurOperation := (safe_buch_ListOper_of_integer_ (0))) in
          void);
         (let jessie_<somenum> =
         (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (0))) in
         void); (C_129: (JC_<somenum>: (fake void))) end)) else void);
      (let jessie_<somenum> =
      (buch_CurOperation := (safe_buch_ListOper_of_integer_ (2))) in void);
      (let jessie_<somenum> =
      (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (0))) in void);
      (C_132: (JC_<somenum>: (op void)));
      (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (buch_CurOperation := (safe_buch_ListOper_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (C_136:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (0)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> =
      (C_139:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (1)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_old_3_alloc_table,intP_intM_buch_CurStates_old_3
        writes intP_intM_buch_CurStates_old_3
        { (not_assigns(intP_buch_CurStates_old_3_alloc_table,
           intP_intM_buch_CurStates_old_3@, intP_intM_buch_CurStates_old_3,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_old_3,
                shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_old_3,
                   shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (C_142:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (0)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> =
      (C_145:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (1)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> =
      (C_148:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (2)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurTrans_tmp_4
        writes intP_intM_buch_CurTrans_tmp_4
        { (not_assigns(intP_buch_CurTrans_tmp_4_alloc_table,
           intP_intM_buch_CurTrans_tmp_4@, intP_intM_buch_CurTrans_tmp_4,
           pset_range(pset_singleton(jessie_<somenum>), (0), (2)))
          and ((select(intP_intM_buch_CurTrans_tmp_4, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and ((select(intP_intM_buch_CurTrans_tmp_4,
                    shift(jessie_<somenum>, (1))) = jessie_<somenum>)
                  and (select(intP_intM_buch_CurTrans_tmp_4,
                       shift(jessie_<somenum>, (2))) = jessie_<somenum>)))) } ]))))))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_154:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (C_153:
        begin   (tmp_0_2 := (safe_int32_of_integer_ (1))); !tmp_0_2 end)
       else
        (C_152:
        begin   (tmp_0_2 := (safe_int32_of_integer_ (0))); !tmp_0_2 end))
      else
       (C_151:
       begin   (tmp_0_2 := (safe_int32_of_integer_ (0))); !tmp_0_2 end)) in
      void);
      (let jessie_<somenum> = !tmp_0_2 in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> =
      (C_158:
      (safe_int32_of_integer_ (if ((neq_int_ (integer_of_int32 (C_157:
                                                               ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                                                ((shift buch_CurStates_old) (1)))))) (0))
                              then (1) else (0)))) in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_1_alloc_table,intP_intM_buch_CurStates_1
        writes intP_intM_buch_CurStates_1
        { (not_assigns(intP_buch_CurStates_1_alloc_table,
           intP_intM_buch_CurStates_1@, intP_intM_buch_CurStates_1,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_166:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (if ((neq_int_ (integer_of_int32 (C_165:
                                         ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                          ((shift buch_CurStates) (0)))))) (0))
        then
         (C_164:
         begin   (tmp_0_3 := (safe_int32_of_integer_ (1))); !tmp_0_3 end)
        else
         (C_163:
         begin   (tmp_0_3 := (safe_int32_of_integer_ (0))); !tmp_0_3 end))
       else
        (C_162:
        begin   (tmp_0_3 := (safe_int32_of_integer_ (0))); !tmp_0_3 end))
      else
       (C_161:
       begin   (tmp_0_3 := (safe_int32_of_integer_ (0))); !tmp_0_3 end)) in
      void);
      (let jessie_<somenum> = !tmp_0_3 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_2_alloc_table,intP_intM_buch_CurTrans_2
        writes intP_intM_buch_CurTrans_2
        { (not_assigns(intP_buch_CurTrans_2_alloc_table,
           intP_intM_buch_CurTrans_2@, intP_intM_buch_CurTrans_2,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_175:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (1)))))) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_174:
                                        ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                         ((shift buch_CurStates) (1)))))) (0))
       then
        (C_173:
        begin   (tmp_1_1 := (safe_int32_of_integer_ (1))); !tmp_1_1 end)
       else
        (C_172:
        begin   (tmp_1_1 := (safe_int32_of_integer_ (0))); !tmp_1_1 end))
      else
       (C_171:
       begin   (tmp_1_1 := (safe_int32_of_integer_ (0))); !tmp_1_1 end)) in
      void);
      (let jessie_<somenum> = !tmp_1_1 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>))))));
      (return := !__retres); (raise Return) end))))))))))))))))))); absurd 
   end with Return -> !return end)) { (JC_<somenum>: true) }

let main_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and (JC_<somenum>:
                 (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                           shift(buch_CurStates, (0)))))
                 or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                             shift(buch_CurStates, (1))))))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>:
             valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (let tmp_0_2 = ref (any_int32 void) in
     (let tmp_0_3 = ref (any_int32 void) in
     (let tmp_1_1 = ref (any_int32 void) in
     (C_130:
     (C_131:
     (C_133:
     (C_134:
     (C_135:
     (C_138:
     (C_141:
     (C_144:
     (C_147:
     (C_150:
     (C_156:
     (C_160:
     (C_168:
     (C_170:
     (C_177:
     begin
       (if ((lt_int_ (integer_of_int32 !rr)) (5000))
       then
        (C_127:
        (C_128:
        begin
          (let jessie_<somenum> =
          (buch_CurOperation := (safe_buch_ListOper_of_integer_ (0))) in
          void);
         (let jessie_<somenum> =
         (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (0))) in
         void); (C_129: (JC_<somenum>: (fake_requires void))) end)) else void);
      (let jessie_<somenum> =
      (buch_CurOperation := (safe_buch_ListOper_of_integer_ (2))) in void);
      (let jessie_<somenum> =
      (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (0))) in void);
      (C_132: (JC_<somenum>: (op_requires void)));
      (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (buch_CurOperation := (safe_buch_ListOper_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (C_136:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (0)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> =
      (C_139:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (1)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_old_3_alloc_table,intP_intM_buch_CurStates_old_3
        writes intP_intM_buch_CurStates_old_3
        { (not_assigns(intP_buch_CurStates_old_3_alloc_table,
           intP_intM_buch_CurStates_old_3@, intP_intM_buch_CurStates_old_3,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_old_3,
                shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_old_3,
                   shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (C_142:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (0)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> =
      (C_145:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (1)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> =
      (C_148:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (2)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurTrans_tmp_4
        writes intP_intM_buch_CurTrans_tmp_4
        { (not_assigns(intP_buch_CurTrans_tmp_4_alloc_table,
           intP_intM_buch_CurTrans_tmp_4@, intP_intM_buch_CurTrans_tmp_4,
           pset_range(pset_singleton(jessie_<somenum>), (0), (2)))
          and ((select(intP_intM_buch_CurTrans_tmp_4, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and ((select(intP_intM_buch_CurTrans_tmp_4,
                    shift(jessie_<somenum>, (1))) = jessie_<somenum>)
                  and (select(intP_intM_buch_CurTrans_tmp_4,
                       shift(jessie_<somenum>, (2))) = jessie_<somenum>)))) } ]))))))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_154:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (C_153:
        begin   (tmp_0_2 := (safe_int32_of_integer_ (1))); !tmp_0_2 end)
       else
        (C_152:
        begin   (tmp_0_2 := (safe_int32_of_integer_ (0))); !tmp_0_2 end))
      else
       (C_151:
       begin   (tmp_0_2 := (safe_int32_of_integer_ (0))); !tmp_0_2 end)) in
      void);
      (let jessie_<somenum> = !tmp_0_2 in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> =
      (C_158:
      (JC_<somenum>:
      (int32_of_integer_ (if ((neq_int_ (integer_of_int32 (C_157:
                                                          ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                                           ((shift buch_CurStates_old) (1)))))) (0))
                         then (1) else (0))))) in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_1_alloc_table,intP_intM_buch_CurStates_1
        writes intP_intM_buch_CurStates_1
        { (not_assigns(intP_buch_CurStates_1_alloc_table,
           intP_intM_buch_CurStates_1@, intP_intM_buch_CurStates_1,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_1, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_166:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (if ((neq_int_ (integer_of_int32 (C_165:
                                         ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                          ((shift buch_CurStates) (0)))))) (0))
        then
         (C_164:
         begin   (tmp_0_3 := (safe_int32_of_integer_ (1))); !tmp_0_3 end)
        else
         (C_163:
         begin   (tmp_0_3 := (safe_int32_of_integer_ (0))); !tmp_0_3 end))
       else
        (C_162:
        begin   (tmp_0_3 := (safe_int32_of_integer_ (0))); !tmp_0_3 end))
      else
       (C_161:
       begin   (tmp_0_3 := (safe_int32_of_integer_ (0))); !tmp_0_3 end)) in
      void);
      (let jessie_<somenum> = !tmp_0_3 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_2_alloc_table,intP_intM_buch_CurTrans_2
        writes intP_intM_buch_CurTrans_2
        { (not_assigns(intP_buch_CurTrans_2_alloc_table,
           intP_intM_buch_CurTrans_2@, intP_intM_buch_CurTrans_2,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurTrans_2, shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_175:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (1)))))) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_174:
                                        ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                         ((shift buch_CurStates) (1)))))) (0))
       then
        (C_173:
        begin   (tmp_1_1 := (safe_int32_of_integer_ (1))); !tmp_1_1 end)
       else
        (C_172:
        begin   (tmp_1_1 := (safe_int32_of_integer_ (0))); !tmp_1_1 end))
      else
       (C_171:
       begin   (tmp_1_1 := (safe_int32_of_integer_ (0))); !tmp_1_1 end)) in
      void);
      (let jessie_<somenum> = !tmp_1_1 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>))))));
      (return := !__retres); (raise Return) end))))))))))))))))))); absurd 
   end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: inv(rr))
    and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
        and ((JC_<somenum>: valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                    and ((JC_<somenum>:
                         Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                         intP_buch_CurStates_old_3_alloc_table,
                         intP_buch_CurTrans_2_alloc_table,
                         intP_buch_CurStates_1_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                             intP_intM_buch_CurTrans_2))
                            and ((JC_<somenum>:
                                 valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                and ((JC_<somenum>:
                                     Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                         intP_intM_buch_CurTrans_2,
                                         intP_intM_buch_CurStates_1,
                                         buch_CurOpStatus, buch_CurOperation,
                                         status))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and (JC_<somenum>:
                                                            _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                            intP_intM_buch_CurTrans_2,
                                                            buch_CurOpStatus,
                                                            buch_CurOperation,
                                                            status))))))))))))))))) }

let op_ensures_Buchi_property_behavior =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and (JC_<somenum>:
                 (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                           shift(buch_CurStates, (0)))))
                 or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                             shift(buch_CurStates, (1))))))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>:
             valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }
  (init:
  try
   begin
     (let tmp_0_0 = ref (any_int32 void) in
     (let tmp_0_1 = ref (any_int32 void) in
     (let tmp_1_0 = ref (any_int32 void) in
     (let tmp_2 = ref (any_int32 void) in
     (let tmp_3 = ref (any_int32 void) in
     (C_62:
     (C_63:
     (C_64:
     (C_67:
     (C_70:
     (C_73:
     (C_76:
     (C_79:
     (C_85:
     (C_92:
     (C_100:
     (C_107:
     (C_114:
     begin
       (let jessie_<somenum> = (status := (safe_int32_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (buch_CurOperation := (safe_buch_ListOper_of_integer_ (2))) in void);
      (let jessie_<somenum> =
      (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (C_65:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (0)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> =
      (C_68:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (1)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_old_3_alloc_table,intP_intM_buch_CurStates_old_3
        writes intP_intM_buch_CurStates_old_3
        { (not_assigns(intP_buch_CurStates_old_3_alloc_table,
           intP_intM_buch_CurStates_old_3@, intP_intM_buch_CurStates_old_3,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_old_3,
                shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_old_3,
                   shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (C_71:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (0)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> =
      (C_74:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (1)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> =
      (C_77:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (2)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurTrans_tmp_4
        writes intP_intM_buch_CurTrans_tmp_4
        { (not_assigns(intP_buch_CurTrans_tmp_4_alloc_table,
           intP_intM_buch_CurTrans_tmp_4@, intP_intM_buch_CurTrans_tmp_4,
           pset_range(pset_singleton(jessie_<somenum>), (0), (2)))
          and ((select(intP_intM_buch_CurTrans_tmp_4, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and ((select(intP_intM_buch_CurTrans_tmp_4,
                    shift(jessie_<somenum>, (1))) = jessie_<somenum>)
                  and (select(intP_intM_buch_CurTrans_tmp_4,
                       shift(jessie_<somenum>, (2))) = jessie_<somenum>)))) } ]))))))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_83:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (C_82:
        begin   (tmp_0_0 := (safe_int32_of_integer_ (1))); !tmp_0_0 end)
       else
        (C_81:
        begin   (tmp_0_0 := (safe_int32_of_integer_ (0))); !tmp_0_0 end))
      else
       (C_80:
       begin   (tmp_0_0 := (safe_int32_of_integer_ (0))); !tmp_0_0 end)) in
      void);
      (let jessie_<somenum> = !tmp_0_0 in
      (let jessie_<somenum> = buch_CurStates in
      (((safe_upd_ intP_intM_buch_CurStates_1) jessie_<somenum>) jessie_<somenum>)));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_90:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (0)))))) (0))
      then
       (C_89:
       begin   (tmp_0_1 := (safe_int32_of_integer_ (1))); !tmp_0_1 end)
      else
       (if ((neq_int_ (integer_of_int32 (C_88:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (1)))))) (0))
       then
        (C_87:
        begin   (tmp_0_1 := (safe_int32_of_integer_ (1))); !tmp_0_1 end)
       else
        (C_86:
        begin   (tmp_0_1 := (safe_int32_of_integer_ (0))); !tmp_0_1 end))) in
      void);
      (let jessie_<somenum> = !tmp_0_1 in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (1)) in
      (((safe_upd_ intP_intM_buch_CurStates_1) jessie_<somenum>) jessie_<somenum>))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_98:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (if ((neq_int_ (integer_of_int32 (C_97:
                                         ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                          ((shift buch_CurStates) (0)))))) (0))
        then
         (C_96:
         begin   (tmp_1_0 := (safe_int32_of_integer_ (1))); !tmp_1_0 end)
        else
         (C_95:
         begin   (tmp_1_0 := (safe_int32_of_integer_ (0))); !tmp_1_0 end))
       else
        (C_94:
        begin   (tmp_1_0 := (safe_int32_of_integer_ (0))); !tmp_1_0 end))
      else
       (C_93:
       begin   (tmp_1_0 := (safe_int32_of_integer_ (0))); !tmp_1_0 end)) in
      void);
      (let jessie_<somenum> = !tmp_1_0 in
      (let jessie_<somenum> = buch_CurTrans in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>)));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_105:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (0)))))) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_104:
                                        ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                         ((shift buch_CurStates) (1)))))) (0))
       then
        (C_103: begin   (tmp_2 := (safe_int32_of_integer_ (1))); !tmp_2 end)
       else
        (C_102: begin   (tmp_2 := (safe_int32_of_integer_ (0))); !tmp_2 end))
      else
       (C_101: begin   (tmp_2 := (safe_int32_of_integer_ (0))); !tmp_2 end)) in
      void);
      (let jessie_<somenum> = !tmp_2 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (1)) in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>))))));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_112:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (1)))))) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_111:
                                        ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                         ((shift buch_CurStates) (1)))))) (0))
       then
        (C_110: begin   (tmp_3 := (safe_int32_of_integer_ (1))); !tmp_3 end)
       else
        (C_109: begin   (tmp_3 := (safe_int32_of_integer_ (0))); !tmp_3 end))
      else
       (C_108: begin   (tmp_3 := (safe_int32_of_integer_ (0))); !tmp_3 end)) in
      void);
      (let jessie_<somenum> = !tmp_3 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>))))));
      (raise Return) end)))))))))))))))))); (raise Return) end with Return ->
   void end)
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and (JC_<somenum>:
                 (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                           shift(buch_CurStates, (0)))))
                 or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                             shift(buch_CurStates, (1)))))))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>:
             valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }

let op_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and (JC_<somenum>:
                 (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                           shift(buch_CurStates, (0)))))
                 or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                             shift(buch_CurStates, (1))))))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>:
             valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }
  (init:
  try
   begin
     (let tmp_0_0 = ref (any_int32 void) in
     (let tmp_0_1 = ref (any_int32 void) in
     (let tmp_1_0 = ref (any_int32 void) in
     (let tmp_2 = ref (any_int32 void) in
     (let tmp_3 = ref (any_int32 void) in
     (C_62:
     (C_63:
     (C_64:
     (C_67:
     (C_70:
     (C_73:
     (C_76:
     (C_79:
     (C_85:
     (C_92:
     (C_100:
     (C_107:
     (C_114:
     begin
       (let jessie_<somenum> = (status := (safe_int32_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (buch_CurOperation := (safe_buch_ListOper_of_integer_ (2))) in void);
      (let jessie_<somenum> =
      (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (C_65:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (0)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> =
      (C_68:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (1)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_old_3_alloc_table,intP_intM_buch_CurStates_old_3
        writes intP_intM_buch_CurStates_old_3
        { (not_assigns(intP_buch_CurStates_old_3_alloc_table,
           intP_intM_buch_CurStates_old_3@, intP_intM_buch_CurStates_old_3,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_old_3,
                shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_old_3,
                   shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (C_71:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (0)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> =
      (C_74:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (1)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> =
      (C_77:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (2)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurTrans_tmp_4
        writes intP_intM_buch_CurTrans_tmp_4
        { (not_assigns(intP_buch_CurTrans_tmp_4_alloc_table,
           intP_intM_buch_CurTrans_tmp_4@, intP_intM_buch_CurTrans_tmp_4,
           pset_range(pset_singleton(jessie_<somenum>), (0), (2)))
          and ((select(intP_intM_buch_CurTrans_tmp_4, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and ((select(intP_intM_buch_CurTrans_tmp_4,
                    shift(jessie_<somenum>, (1))) = jessie_<somenum>)
                  and (select(intP_intM_buch_CurTrans_tmp_4,
                       shift(jessie_<somenum>, (2))) = jessie_<somenum>)))) } ]))))))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_83:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (C_82:
        begin   (tmp_0_0 := (safe_int32_of_integer_ (1))); !tmp_0_0 end)
       else
        (C_81:
        begin   (tmp_0_0 := (safe_int32_of_integer_ (0))); !tmp_0_0 end))
      else
       (C_80:
       begin   (tmp_0_0 := (safe_int32_of_integer_ (0))); !tmp_0_0 end)) in
      void);
      (let jessie_<somenum> = !tmp_0_0 in
      (let jessie_<somenum> = buch_CurStates in
      (((safe_upd_ intP_intM_buch_CurStates_1) jessie_<somenum>) jessie_<somenum>)));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_90:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (0)))))) (0))
      then
       (C_89:
       begin   (tmp_0_1 := (safe_int32_of_integer_ (1))); !tmp_0_1 end)
      else
       (if ((neq_int_ (integer_of_int32 (C_88:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (1)))))) (0))
       then
        (C_87:
        begin   (tmp_0_1 := (safe_int32_of_integer_ (1))); !tmp_0_1 end)
       else
        (C_86:
        begin   (tmp_0_1 := (safe_int32_of_integer_ (0))); !tmp_0_1 end))) in
      void);
      (let jessie_<somenum> = !tmp_0_1 in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (1)) in
      (((safe_upd_ intP_intM_buch_CurStates_1) jessie_<somenum>) jessie_<somenum>))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_98:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (if ((neq_int_ (integer_of_int32 (C_97:
                                         ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                          ((shift buch_CurStates) (0)))))) (0))
        then
         (C_96:
         begin   (tmp_1_0 := (safe_int32_of_integer_ (1))); !tmp_1_0 end)
        else
         (C_95:
         begin   (tmp_1_0 := (safe_int32_of_integer_ (0))); !tmp_1_0 end))
       else
        (C_94:
        begin   (tmp_1_0 := (safe_int32_of_integer_ (0))); !tmp_1_0 end))
      else
       (C_93:
       begin   (tmp_1_0 := (safe_int32_of_integer_ (0))); !tmp_1_0 end)) in
      void);
      (let jessie_<somenum> = !tmp_1_0 in
      (let jessie_<somenum> = buch_CurTrans in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>)));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_105:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (0)))))) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_104:
                                        ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                         ((shift buch_CurStates) (1)))))) (0))
       then
        (C_103: begin   (tmp_2 := (safe_int32_of_integer_ (1))); !tmp_2 end)
       else
        (C_102: begin   (tmp_2 := (safe_int32_of_integer_ (0))); !tmp_2 end))
      else
       (C_101: begin   (tmp_2 := (safe_int32_of_integer_ (0))); !tmp_2 end)) in
      void);
      (let jessie_<somenum> = !tmp_2 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (1)) in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>))))));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_112:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (1)))))) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_111:
                                        ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                         ((shift buch_CurStates) (1)))))) (0))
       then
        (C_110: begin   (tmp_3 := (safe_int32_of_integer_ (1))); !tmp_3 end)
       else
        (C_109: begin   (tmp_3 := (safe_int32_of_integer_ (0))); !tmp_3 end))
      else
       (C_108: begin   (tmp_3 := (safe_int32_of_integer_ (0))); !tmp_3 end)) in
      void);
      (let jessie_<somenum> = !tmp_3 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>))))));
      (raise Return) end)))))))))))))))))); (raise Return) end with Return ->
   void end) { (JC_<somenum>: true) }

let op_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    (((JC_<somenum>:
      ((0) = integer_of_int32(select(intP_intM_buch_CurTrans_2,
                              shift(buch_CurTrans, (1))))))
     and ((JC_<somenum>:
          (((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                    shift(buch_CurTrans, (0)))))
          or ((0) <> integer_of_int32(select(intP_intM_buch_CurTrans_2,
                                      shift(buch_CurTrans, (2)))))))
         and ((JC_<somenum>: (true = true))
             and (JC_<somenum>:
                 (((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                           shift(buch_CurStates, (0)))))
                 or ((0) <> integer_of_int32(select(intP_intM_buch_CurStates_1,
                                             shift(buch_CurStates, (1))))))))))
    and ((JC_<somenum>: inv(rr))
        and ((JC_<somenum>:
             valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                    and ((JC_<somenum>:
                         valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                             intP_buch_CurStates_old_3_alloc_table,
                             intP_buch_CurTrans_2_alloc_table,
                             intP_buch_CurStates_1_alloc_table))
                            and ((JC_<somenum>:
                                 Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                                 intP_intM_buch_CurTrans_2))
                                and ((JC_<somenum>:
                                     valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and ((JC_<somenum>:
                                                             _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                             intP_intM_buch_CurTrans_2,
                                                             intP_intM_buch_CurStates_1,
                                                             buch_CurOpStatus,
                                                             buch_CurOperation,
                                                             status))
                                                            and (JC_<somenum>:
                                                                _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                                intP_intM_buch_CurTrans_2,
                                                                buch_CurOpStatus,
                                                                buch_CurOperation,
                                                                status)))))))))))))))))) }
  (init:
  try
   begin
     (let tmp_0_0 = ref (any_int32 void) in
     (let tmp_0_1 = ref (any_int32 void) in
     (let tmp_1_0 = ref (any_int32 void) in
     (let tmp_2 = ref (any_int32 void) in
     (let tmp_3 = ref (any_int32 void) in
     (C_62:
     (C_63:
     (C_64:
     (C_67:
     (C_70:
     (C_73:
     (C_76:
     (C_79:
     (C_85:
     (C_92:
     (C_100:
     (C_107:
     (C_114:
     begin
       (let jessie_<somenum> = (status := (safe_int32_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (buch_CurOperation := (safe_buch_ListOper_of_integer_ (2))) in void);
      (let jessie_<somenum> =
      (buch_CurOpStatus := (safe_Buch_OpStatusList_of_integer_ (1))) in void);
      (let jessie_<somenum> =
      (C_65:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (0)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> =
      (C_68:
      ((safe_acc_ !intP_intM_buch_CurStates_1) ((shift buch_CurStates) (1)))) in
      (let jessie_<somenum> = buch_CurStates_old in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurStates_old_3_alloc_table,intP_intM_buch_CurStates_old_3
        writes intP_intM_buch_CurStates_old_3
        { (not_assigns(intP_buch_CurStates_old_3_alloc_table,
           intP_intM_buch_CurStates_old_3@, intP_intM_buch_CurStates_old_3,
           pset_range(pset_singleton(jessie_<somenum>), (0), (1)))
          and ((select(intP_intM_buch_CurStates_old_3,
                shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and (select(intP_intM_buch_CurStates_old_3,
                   shift(jessie_<somenum>, (1))) = jessie_<somenum>))) } ]))))));
      (let jessie_<somenum> =
      (C_71:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (0)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> =
      (C_74:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (1)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> =
      (C_77:
      ((safe_acc_ !intP_intM_buch_CurTrans_2) ((shift buch_CurTrans) (2)))) in
      (let jessie_<somenum> = buch_CurTrans_tmp in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      [ { } unit
        reads intP_buch_CurTrans_tmp_4_alloc_table,intP_intM_buch_CurTrans_tmp_4
        writes intP_intM_buch_CurTrans_tmp_4
        { (not_assigns(intP_buch_CurTrans_tmp_4_alloc_table,
           intP_intM_buch_CurTrans_tmp_4@, intP_intM_buch_CurTrans_tmp_4,
           pset_range(pset_singleton(jessie_<somenum>), (0), (2)))
          and ((select(intP_intM_buch_CurTrans_tmp_4, shift(jessie_<somenum>, (0))) = jessie_<somenum>)
              and ((select(intP_intM_buch_CurTrans_tmp_4,
                    shift(jessie_<somenum>, (1))) = jessie_<somenum>)
                  and (select(intP_intM_buch_CurTrans_tmp_4,
                       shift(jessie_<somenum>, (2))) = jessie_<somenum>)))) } ]))))))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_83:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (C_82:
        begin   (tmp_0_0 := (safe_int32_of_integer_ (1))); !tmp_0_0 end)
       else
        (C_81:
        begin   (tmp_0_0 := (safe_int32_of_integer_ (0))); !tmp_0_0 end))
      else
       (C_80:
       begin   (tmp_0_0 := (safe_int32_of_integer_ (0))); !tmp_0_0 end)) in
      void);
      (let jessie_<somenum> = !tmp_0_0 in
      (let jessie_<somenum> = buch_CurStates in
      (((safe_upd_ intP_intM_buch_CurStates_1) jessie_<somenum>) jessie_<somenum>)));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_90:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (0)))))) (0))
      then
       (C_89:
       begin   (tmp_0_1 := (safe_int32_of_integer_ (1))); !tmp_0_1 end)
      else
       (if ((neq_int_ (integer_of_int32 (C_88:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (1)))))) (0))
       then
        (C_87:
        begin   (tmp_0_1 := (safe_int32_of_integer_ (1))); !tmp_0_1 end)
       else
        (C_86:
        begin   (tmp_0_1 := (safe_int32_of_integer_ (0))); !tmp_0_1 end))) in
      void);
      (let jessie_<somenum> = !tmp_0_1 in
      (let jessie_<somenum> = buch_CurStates in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (1)) in
      (((safe_upd_ intP_intM_buch_CurStates_1) jessie_<somenum>) jessie_<somenum>))))));
      (let jessie_<somenum> =
      (if ((eq_int_ (integer_of_int32 !status)) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_98:
                                        ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                         ((shift buch_CurStates_old) (0)))))) (0))
       then
        (if ((neq_int_ (integer_of_int32 (C_97:
                                         ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                          ((shift buch_CurStates) (0)))))) (0))
        then
         (C_96:
         begin   (tmp_1_0 := (safe_int32_of_integer_ (1))); !tmp_1_0 end)
        else
         (C_95:
         begin   (tmp_1_0 := (safe_int32_of_integer_ (0))); !tmp_1_0 end))
       else
        (C_94:
        begin   (tmp_1_0 := (safe_int32_of_integer_ (0))); !tmp_1_0 end))
      else
       (C_93:
       begin   (tmp_1_0 := (safe_int32_of_integer_ (0))); !tmp_1_0 end)) in
      void);
      (let jessie_<somenum> = !tmp_1_0 in
      (let jessie_<somenum> = buch_CurTrans in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>)));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_105:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (0)))))) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_104:
                                        ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                         ((shift buch_CurStates) (1)))))) (0))
       then
        (C_103: begin   (tmp_2 := (safe_int32_of_integer_ (1))); !tmp_2 end)
       else
        (C_102: begin   (tmp_2 := (safe_int32_of_integer_ (0))); !tmp_2 end))
      else
       (C_101: begin   (tmp_2 := (safe_int32_of_integer_ (0))); !tmp_2 end)) in
      void);
      (let jessie_<somenum> = !tmp_2 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (1) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (1)) in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>))))));
      (let jessie_<somenum> =
      (if ((neq_int_ (integer_of_int32 (C_112:
                                       ((safe_acc_ !intP_intM_buch_CurStates_old_3) 
                                        ((shift buch_CurStates_old) (1)))))) (0))
      then
       (if ((neq_int_ (integer_of_int32 (C_111:
                                        ((safe_acc_ !intP_intM_buch_CurStates_1) 
                                         ((shift buch_CurStates) (1)))))) (0))
       then
        (C_110: begin   (tmp_3 := (safe_int32_of_integer_ (1))); !tmp_3 end)
       else
        (C_109: begin   (tmp_3 := (safe_int32_of_integer_ (0))); !tmp_3 end))
      else
       (C_108: begin   (tmp_3 := (safe_int32_of_integer_ (0))); !tmp_3 end)) in
      void);
      (let jessie_<somenum> = !tmp_3 in
      (let jessie_<somenum> = buch_CurTrans in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
      (((safe_upd_ intP_intM_buch_CurTrans_2) jessie_<somenum>) jessie_<somenum>))))));
      (raise Return) end)))))))))))))))))); (raise Return) end with Return ->
   void end)
  { (JC_<somenum>:
    ((JC_<somenum>: inv(rr))
    and ((JC_<somenum>: valid_buch_CurStates(intP_buch_CurStates_1_alloc_table))
        and ((JC_<somenum>: valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table))
            and ((JC_<somenum>:
                 valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table))
                and ((JC_<somenum>:
                     valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table))
                    and ((JC_<somenum>:
                         Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table,
                         intP_buch_CurStates_old_3_alloc_table,
                         intP_buch_CurTrans_2_alloc_table,
                         intP_buch_CurStates_1_alloc_table))
                        and ((JC_<somenum>:
                             Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4,
                             intP_intM_buch_CurTrans_2))
                            and ((JC_<somenum>:
                                 valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table))
                                and ((JC_<somenum>:
                                     Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table))
                                    and ((JC_<somenum>:
                                         _Buch_st_reach_1(intP_intM_buch_CurStates_old_3,
                                         intP_intM_buch_CurTrans_2,
                                         intP_intM_buch_CurStates_1,
                                         buch_CurOpStatus, buch_CurOperation,
                                         status))
                                        and ((JC_<somenum>:
                                             _Buch_st_reach_2(intP_intM_buch_CurStates_old_3,
                                             intP_intM_buch_CurTrans_2,
                                             intP_intM_buch_CurStates_1,
                                             buch_CurOpStatus,
                                             buch_CurOperation, status))
                                            and ((JC_<somenum>:
                                                 _Buch_st_reach_3(intP_intM_buch_CurStates_old_3,
                                                 intP_intM_buch_CurTrans_2,
                                                 intP_intM_buch_CurStates_1,
                                                 buch_CurOpStatus,
                                                 buch_CurOperation, status))
                                                and ((JC_<somenum>:
                                                     _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3,
                                                     intP_intM_buch_CurTrans_2,
                                                     intP_intM_buch_CurStates_1,
                                                     buch_CurOpStatus,
                                                     buch_CurOperation,
                                                     status))
                                                    and ((JC_<somenum>:
                                                         _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3,
                                                         intP_intM_buch_CurTrans_2,
                                                         intP_intM_buch_CurStates_1,
                                                         buch_CurOpStatus,
                                                         buch_CurOperation,
                                                         status))
                                                        and (JC_<somenum>:
                                                            _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3,
                                                            intP_intM_buch_CurTrans_2,
                                                            buch_CurOpStatus,
                                                            buch_CurOperation,
                                                            status))))))))))))))))) }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C t1_annot24.jessie --quiet -f t1_annot24.makefile project
why --project [...] why/t1_annot24.why
<project name="t1_annot24" context="why/t1_annot24_ctx.why">
  <function name="Function op">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/t1_annot24_po144.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po145.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po146.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po147.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po148.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po149.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po150.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po151.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po152.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po153.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po154.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po155.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po156.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po157.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po158.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Behavior `Buchi_property_behavior'">
    <goal why_file="why/t1_annot24_po126.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "220" begin = "15" end = "36"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po127.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "221" begin = "14" end = "66"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po128.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "223" begin = "14" end = "68"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po129.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po130.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po131.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po132.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po133.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po134.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po135.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po136.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po137.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po138.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po139.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po140.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po141.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po142.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po143.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "225" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function main">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/t1_annot24_po72.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po73.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po74.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po75.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po76.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po77.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po78.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po79.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po80.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po81.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po82.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po83.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po84.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po85.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po86.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po87.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po88.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po89.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po90.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "374" begin = "18" end = "24"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po91.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po92.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po93.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po94.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po95.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po96.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po97.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po98.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po99.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po100.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po101.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po102.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po103.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po104.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po105.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po106.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po107.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po108.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.jessie/t1_annot24.jc" line = "379" begin = "18" end = "22"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/t1_annot24_po109.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "276" begin = "22" end = "55"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/t1_annot24_po110.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "276" begin = "22" end = "55"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/t1_annot24_po111.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po112.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po113.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po114.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po115.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po116.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po117.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po118.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po119.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po120.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po121.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po122.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po123.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po124.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po125.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Behavior `Buchi_property_behavior'">
    <goal why_file="why/t1_annot24_po54.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "250" begin = "15" end = "36"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po55.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "251" begin = "14" end = "66"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po56.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "253" begin = "14" end = "68"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po57.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po58.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po59.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po60.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po61.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po62.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po63.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po64.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po65.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po66.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po67.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po68.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po69.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po70.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po71.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "255" begin = "4" end = "8"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function fake">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/t1_annot24_po35.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "198" begin = "3" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/t1_annot24_po36.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "198" begin = "3" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/t1_annot24_po37.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "207" begin = "22" end = "55"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/t1_annot24_po38.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "207" begin = "22" end = "55"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/t1_annot24_po39.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po40.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po41.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po42.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po43.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po44.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po45.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po46.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po47.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po48.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po49.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po50.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po51.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po52.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po53.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Behavior `j'">
    <goal why_file="why/t1_annot24_po19.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "193" begin = "15" end = "24"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po20.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po21.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po22.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po23.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po24.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po25.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po26.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po27.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po28.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po29.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po30.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po31.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po32.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po33.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po34.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Behavior `Buchi_property_behavior'">
    <goal why_file="why/t1_annot24_po1.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "187" begin = "15" end = "36"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po2.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "188" begin = "14" end = "66"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po3.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "190" begin = "14" end = "68"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po4.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po5.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po6.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po7.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po8.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po9.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po10.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po11.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po12.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po13.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po14.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po15.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po16.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po17.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/t1_annot24_po18.why">
      <location file = "PPCHOME/tests/jessie/t1_annot24.c" line = "195" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type Buch_OpStatusList

type buch_AcceptStates_5

type buch_CurStates_1

type buch_CurStates_old_3

type buch_CurTrans_2

type buch_CurTrans_tmp_4

type buch_ListOper

type charP

type int32

type int8

type intP

type padding

type uint8

type unsigned_charP

type voidP

logic integer_of_int32 : int32 -> int

logic buch_CurTrans : intP pointer

logic buch_CurTrans_tmp : intP pointer

predicate Buch_Arrays_Coherence(intP_intM_buch_CurTrans_tmp_4: (intP,
  int32) memory, intP_intM_buch_CurTrans_2: (intP, int32) memory) =
  (forall _buch_i:int.
    (((0 <= _buch_i) and (_buch_i < 3)) ->
     (integer_of_int32(select(intP_intM_buch_CurTrans_2, shift(buch_CurTrans,
     _buch_i))) = integer_of_int32(select(intP_intM_buch_CurTrans_tmp_4,
     shift(buch_CurTrans_tmp, _buch_i))))))

logic integer_of_Buch_OpStatusList : Buch_OpStatusList -> int

logic Buch_OpStatusList_of_integer : int -> Buch_OpStatusList

axiom Buch_OpStatusList_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 1)) ->
     (integer_of_Buch_OpStatusList(Buch_OpStatusList_of_integer(x)) = x)))

axiom Buch_OpStatusList_extensionality:
  (forall x:Buch_OpStatusList.
    (forall y:Buch_OpStatusList [(integer_of_Buch_OpStatusList(x) = integer_of_Buch_OpStatusList(y))].
      ((integer_of_Buch_OpStatusList(x) = integer_of_Buch_OpStatusList(y)) ->
       (x = y))))

axiom Buch_OpStatusList_range:
  (forall x:Buch_OpStatusList.
    ((0 <= integer_of_Buch_OpStatusList(x)) and
     (integer_of_Buch_OpStatusList(x) <= 1)))

logic buch_CurStates : intP pointer

logic buch_CurStates_old : intP pointer

predicate Buch_Ranges_Validity(intP_buch_CurTrans_tmp_4_alloc_table: intP alloc_table,
  intP_buch_CurStates_old_3_alloc_table: intP alloc_table,
  intP_buch_CurTrans_2_alloc_table: intP alloc_table,
  intP_buch_CurStates_1_alloc_table: intP alloc_table) =
  ((offset_min(intP_buch_CurTrans_2_alloc_table, buch_CurTrans) <= 0) and
   ((offset_max(intP_buch_CurTrans_2_alloc_table, buch_CurTrans) >= 2) and
    ((offset_min(intP_buch_CurTrans_tmp_4_alloc_table,
     buch_CurTrans_tmp) <= 0) and
     ((offset_max(intP_buch_CurTrans_tmp_4_alloc_table,
      buch_CurTrans_tmp) >= 2) and
      ((offset_min(intP_buch_CurStates_1_alloc_table,
       buch_CurStates) <= 0) and
       ((offset_max(intP_buch_CurStates_1_alloc_table,
        buch_CurStates) >= 1) and
        ((offset_min(intP_buch_CurStates_old_3_alloc_table,
         buch_CurStates_old) <= 0) and
         (offset_max(intP_buch_CurStates_old_3_alloc_table,
         buch_CurStates_old) >= 1))))))))

logic buch_AcceptStates : intP pointer

predicate Buch_acc_Ranges_Validity(intP_buch_AcceptStates_5_alloc_table: intP alloc_table) =
  ((offset_min(intP_buch_AcceptStates_5_alloc_table,
   buch_AcceptStates) <= 0) and
   (offset_max(intP_buch_AcceptStates_5_alloc_table, buch_AcceptStates) >= 1))

logic buch_Trans_Stop : int -> int

logic integer_of_buch_ListOper : buch_ListOper -> int

logic buch_ListOper_of_integer : int -> buch_ListOper

predicate buch_Trans_Cond_param(_buch_numTrans: int, _buch_op: int,
  _buch_status: int, status_at_L: int32) =
  (((_buch_numTrans = 0) -> (integer_of_int32(status_at_L) = 0)) and
   ((_buch_numTrans = 1) ->
    ((_buch_op = integer_of_buch_ListOper(buch_ListOper_of_integer(2))) and
     (_buch_status = integer_of_Buch_OpStatusList(Buch_OpStatusList_of_integer(1))))))

predicate buch_Trans_Cond(_buch_numTrans_0: int,
  buch_CurOpStatus_at_L: Buch_OpStatusList,
  buch_CurOperation_at_L: buch_ListOper, status_at_L: int32) =
  buch_Trans_Cond_param(_buch_numTrans_0,
  integer_of_buch_ListOper(buch_CurOperation_at_L),
  integer_of_Buch_OpStatusList(buch_CurOpStatus_at_L), status_at_L)

logic buch_Trans_Start : int -> int

predicate _Buch_st_reach_1(intP_intM_buch_CurStates_old_3: (intP,
  int32) memory, intP_intM_buch_CurTrans_2: (intP, int32) memory,
  intP_intM_buch_CurStates_1: (intP, int32) memory,
  buch_CurOpStatus: Buch_OpStatusList, buch_CurOperation: buch_ListOper,
  status: int32) =
  (forall _buch_st:int.
    (((0 <= _buch_st) and
      ((_buch_st < 2) and
       (forall _buch_tr:int.
         (((0 <= _buch_tr) and (_buch_tr < 3)) ->
          ((integer_of_int32(select(intP_intM_buch_CurTrans_2,
           shift(buch_CurTrans, _buch_tr))) = 0) or
           ((buch_Trans_Stop(_buch_tr) <> _buch_st) or
            ((not buch_Trans_Cond(_buch_tr, buch_CurOpStatus,
             buch_CurOperation, status)) or
             (integer_of_int32(select(intP_intM_buch_CurStates_old_3,
             shift(buch_CurStates_old, buch_Trans_Start(_buch_tr)))) = 0)))))))) ->
     (integer_of_int32(select(intP_intM_buch_CurStates_1,
     shift(buch_CurStates, _buch_st))) = 0)))

predicate _Buch_st_reach_2(intP_intM_buch_CurStates_old_3: (intP,
  int32) memory, intP_intM_buch_CurTrans_2: (intP, int32) memory,
  intP_intM_buch_CurStates_1: (intP, int32) memory,
  buch_CurOpStatus: Buch_OpStatusList, buch_CurOperation: buch_ListOper,
  status: int32) =
  (forall _buch_st_0:int.
    (((0 <= _buch_st_0) and
      ((_buch_st_0 < 2) and
       (integer_of_int32(select(intP_intM_buch_CurStates_1,
       shift(buch_CurStates, _buch_st_0))) = 0))) ->
     (forall _buch_tr_0:int.
       (((0 <= _buch_tr_0) and (_buch_tr_0 < 3)) ->
        ((integer_of_int32(select(intP_intM_buch_CurTrans_2,
         shift(buch_CurTrans, _buch_tr_0))) = 0) or
         ((buch_Trans_Stop(_buch_tr_0) <> _buch_st_0) or
          ((not buch_Trans_Cond(_buch_tr_0, buch_CurOpStatus,
           buch_CurOperation, status)) or
           (integer_of_int32(select(intP_intM_buch_CurStates_old_3,
           shift(buch_CurStates_old, buch_Trans_Start(_buch_tr_0)))) = 0))))))))

predicate _Buch_st_reach_3(intP_intM_buch_CurStates_old_3: (intP,
  int32) memory, intP_intM_buch_CurTrans_2: (intP, int32) memory,
  intP_intM_buch_CurStates_1: (intP, int32) memory,
  buch_CurOpStatus: Buch_OpStatusList, buch_CurOperation: buch_ListOper,
  status: int32) =
  (forall _buch_st_1:int.
    (((0 <= _buch_st_1) and
      ((_buch_st_1 < 2) and
       (integer_of_int32(select(intP_intM_buch_CurStates_1,
       shift(buch_CurStates, _buch_st_1))) <> 0))) ->
     (exists _buch_tr_1:int.
       ((0 <= _buch_tr_1) and
        ((_buch_tr_1 < 3) and
         ((integer_of_int32(select(intP_intM_buch_CurTrans_2,
          shift(buch_CurTrans, _buch_tr_1))) <> 0) and
          (buch_Trans_Cond(_buch_tr_1, buch_CurOpStatus, buch_CurOperation,
           status) and
           ((buch_Trans_Stop(_buch_tr_1) = _buch_st_1) and
            (integer_of_int32(select(intP_intM_buch_CurStates_old_3,
            shift(buch_CurStates_old, buch_Trans_Start(_buch_tr_1)))) <> 0)))))))))

predicate _Buch_tr_cross_1(intP_intM_buch_CurStates_old_3: (intP,
  int32) memory, intP_intM_buch_CurTrans_2: (intP, int32) memory,
  intP_intM_buch_CurStates_1: (intP, int32) memory,
  buch_CurOpStatus: Buch_OpStatusList, buch_CurOperation: buch_ListOper,
  status: int32) =
  (forall _buch_tr_2:int.
    (((0 <= _buch_tr_2) and
      ((_buch_tr_2 < 3) and
       (integer_of_int32(select(intP_intM_buch_CurTrans_2,
       shift(buch_CurTrans, _buch_tr_2))) <> 0))) ->
     (buch_Trans_Cond(_buch_tr_2, buch_CurOpStatus, buch_CurOperation,
      status) and
      ((integer_of_int32(select(intP_intM_buch_CurStates_old_3,
       shift(buch_CurStates_old, buch_Trans_Start(_buch_tr_2)))) <> 0) and
       (integer_of_int32(select(intP_intM_buch_CurStates_1,
       shift(buch_CurStates, buch_Trans_Stop(_buch_tr_2)))) <> 0)))))

predicate _Buch_tr_cross_2(intP_intM_buch_CurStates_old_3: (intP,
  int32) memory, intP_intM_buch_CurTrans_2: (intP, int32) memory,
  intP_intM_buch_CurStates_1: (intP, int32) memory,
  buch_CurOpStatus: Buch_OpStatusList, buch_CurOperation: buch_ListOper,
  status: int32) =
  (forall _buch_tr_3:int.
    (((0 <= _buch_tr_3) and
      ((_buch_tr_3 < 3) and
       ((integer_of_int32(select(intP_intM_buch_CurStates_old_3,
        shift(buch_CurStates_old, buch_Trans_Start(_buch_tr_3)))) <> 0) and
        buch_Trans_Cond(_buch_tr_3, buch_CurOpStatus, buch_CurOperation,
        status)))) ->
     ((integer_of_int32(select(intP_intM_buch_CurTrans_2,
      shift(buch_CurTrans, _buch_tr_3))) <> 0) and
      (integer_of_int32(select(intP_intM_buch_CurStates_1,
      shift(buch_CurStates, buch_Trans_Stop(_buch_tr_3)))) <> 0))))

predicate _Buch_tr_cross_3(intP_intM_buch_CurStates_old_3: (intP,
  int32) memory, intP_intM_buch_CurTrans_2: (intP, int32) memory,
  buch_CurOpStatus: Buch_OpStatusList, buch_CurOperation: buch_ListOper,
  status: int32) =
  (forall _buch_tr_4:int.
    (((0 <= _buch_tr_4) and
      ((_buch_tr_4 < 3) and
       ((integer_of_int32(select(intP_intM_buch_CurStates_old_3,
        shift(buch_CurStates_old, buch_Trans_Start(_buch_tr_4)))) <> 0) or
        (not buch_Trans_Cond(_buch_tr_4, buch_CurOpStatus, buch_CurOperation,
        status))))) ->
     (integer_of_int32(select(intP_intM_buch_CurTrans_2, shift(buch_CurTrans,
     _buch_tr_4))) <> 0)))

axiom buch_ListOper_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 2)) ->
     (integer_of_buch_ListOper(buch_ListOper_of_integer(x)) = x)))

axiom buch_ListOper_extensionality:
  (forall x:buch_ListOper.
    (forall y:buch_ListOper [(integer_of_buch_ListOper(x) = integer_of_buch_ListOper(y))].
      ((integer_of_buch_ListOper(x) = integer_of_buch_ListOper(y)) -> (x = y))))

axiom buch_ListOper_range:
  (forall x:buch_ListOper.
    ((0 <= integer_of_buch_ListOper(x)) and
     (integer_of_buch_ListOper(x) <= 2)))

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

predicate eq_Buch_OpStatusList(x: Buch_OpStatusList, y: Buch_OpStatusList) =
  (integer_of_Buch_OpStatusList(x) = integer_of_Buch_OpStatusList(y))

predicate eq_buch_ListOper(x: buch_ListOper, y: buch_ListOper) =
  (integer_of_buch_ListOper(x) = integer_of_buch_ListOper(y))

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint8 : uint8 -> int

predicate eq_uint8(x: uint8, y: uint8) =
  (integer_of_uint8(x) = integer_of_uint8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32 [(integer_of_int32(x) = integer_of_int32(y))].
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8 [(integer_of_int8(x) = integer_of_int8(y))].
      ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

predicate inv(rr: int32) =
  ((0 <= integer_of_int32(rr)) and (integer_of_int32(rr) <= 5000))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint8_of_integer : int -> uint8

axiom uint8_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 255)) -> (integer_of_uint8(uint8_of_integer(x)) = x)))

axiom uint8_extensionality:
  (forall x:uint8.
    (forall y:uint8 [(integer_of_uint8(x) = integer_of_uint8(y))].
      ((integer_of_uint8(x) = integer_of_uint8(y)) -> (x = y))))

axiom uint8_range:
  (forall x:uint8.
    ((0 <= integer_of_uint8(x)) and (integer_of_uint8(x) <= 255)))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_buch_AcceptStates(intP_buch_AcceptStates_5_alloc_table: intP alloc_table) =
  ((offset_min(intP_buch_AcceptStates_5_alloc_table,
   buch_AcceptStates) <= 0) and
   (offset_max(intP_buch_AcceptStates_5_alloc_table, buch_AcceptStates) >= 1))

predicate valid_buch_CurStates(intP_buch_CurStates_1_alloc_table: intP alloc_table) =
  ((offset_min(intP_buch_CurStates_1_alloc_table, buch_CurStates) <= 0) and
   (offset_max(intP_buch_CurStates_1_alloc_table, buch_CurStates) >= 1))

predicate valid_buch_CurStates_old(intP_buch_CurStates_old_3_alloc_table: intP alloc_table) =
  ((offset_min(intP_buch_CurStates_old_3_alloc_table,
   buch_CurStates_old) <= 0) and
   (offset_max(intP_buch_CurStates_old_3_alloc_table,
   buch_CurStates_old) >= 1))

predicate valid_buch_CurTrans(intP_buch_CurTrans_2_alloc_table: intP alloc_table) =
  ((offset_min(intP_buch_CurTrans_2_alloc_table, buch_CurTrans) <= 0) and
   (offset_max(intP_buch_CurTrans_2_alloc_table, buch_CurTrans) >= 2))

predicate valid_buch_CurTrans_tmp(intP_buch_CurTrans_tmp_4_alloc_table: intP alloc_table) =
  ((offset_min(intP_buch_CurTrans_tmp_4_alloc_table,
   buch_CurTrans_tmp) <= 0) and
   (offset_max(intP_buch_CurTrans_tmp_4_alloc_table, buch_CurTrans_tmp) >= 2))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

axiom buch_Trans_Start0: (buch_Trans_Start(0) = 0)

axiom buch_Trans_Start1: (buch_Trans_Start(1) = 0)

axiom buch_Trans_Start2: (buch_Trans_Start(2) = 1)

axiom buch_Trans_Stop0: (buch_Trans_Stop(0) = 0)

axiom buch_Trans_Stop1: (buch_Trans_Stop(1) = 1)

axiom buch_Trans_Stop2: (buch_Trans_Stop(2) = 1)

