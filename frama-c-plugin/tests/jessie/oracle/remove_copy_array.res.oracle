Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -jessie -jessie-gen-only remove_copy_array.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -dD remove_copy_array.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir remove_copy_array.jessie
[jessie] File remove_copy_array.jessie/remove_copy_array.jc written.
[jessie] File remove_copy_array.jessie/remove_copy_array.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

predicate disjoint_arrays(intP[..] a, intP[..] b, integer n) =
(\forall integer i;
  (\forall integer k;
    ((((0 <= i) && (i < n)) && ((0 <= k) && (k < n))) ==>
      ((a + i) != (b + k)))))

axiomatic Specification_remove_copy {

  logic integer spec_remove_copy{La, Lb}(intP[..] a_0, integer i_0,
                                         intP[..] b_0, integer j, int32 value)
   
  axiom remove_copy_empty{La, Lb} :
  (\forall intP[..] a_1;
    (\forall intP[..] b_1;
      (\forall int32 value_0;
        (\forall integer i_1;
          (\forall integer j_0;
            (((0 > i_1) || (0 > j_0)) ==>
              (spec_remove_copy{La, Lb}(a_1, i_1, b_1, j_0, value_0) == 0)))))))
   
  axiom remove_copy_equal_value{La, Lb} :
  (\forall intP[..] a_2;
    (\forall intP[..] b_2;
      (\forall int32 value_1;
        (\forall integer i_2;
          (\forall integer j_1;
            (((0 <= i_2) && (\at((a_2 + i_2).intM,La) == value_1)) ==>
              (spec_remove_copy{La,
                Lb}(a_2, i_2, b_2, j_1, value_1) ==
                spec_remove_copy{La,
                Lb}(a_2, (i_2 - 1), b_2, j_1, value_1))))))))
   
  axiom remove_copy_not_equal_value{La, Lb} :
  (\forall intP[..] a_3;
    (\forall intP[..] b_3;
      (\forall int32 value_2;
        (\forall integer i_3;
          (\forall integer j_2;
            ((((0 <= i_3) && (0 <= j_2)) &&
               ((\at((a_3 + i_3).intM,La) != value_2) <==>
                 (\at((a_3 + i_3).intM,La) == \at((b_3 + j_2).intM,Lb)))) ==>
              (spec_remove_copy{La,
                Lb}(a_3, i_3, b_3, j_2, value_2) ==
                (spec_remove_copy{La,
                  Lb}(a_3, (i_3 - 1), b_3, (j_2 - 1), value_2) +
                  1))))))))
   
  axiom remove_copy_label{La, Lb1, Lb2} :
  (\forall intP[..] a_4;
    (\forall intP[..] b_4;
      (\forall int32 value_3;
        (\forall integer i_4;
          (\forall integer j_3;
            ((\forall integer k_0;
               (((0 <= k_0) && (k_0 <= j_3)) ==>
                 (\at((b_4 + k_0).intM,Lb1) == \at((b_4 + k_0).intM,Lb2)))) ==>
              (spec_remove_copy{La,
                Lb1}(a_4, i_4, b_4, j_3, value_3) ==
                spec_remove_copy{La,
                Lb2}(a_4, i_4, b_4, j_3, value_3))))))))
  
}

int32 remove_copy_array(intP[..] a, int32 length, intP[..] b, int32 value)
  requires (C_41 : (0 <= length));
  requires (C_38 : ((C_39 : (\offset_min(a) <= 0)) &&
                     (C_40 : (\offset_max(a) >= (length - 1)))));
  requires (C_35 : ((C_36 : (\offset_min(b) <= 0)) &&
                     (C_37 : (\offset_max(b) >= (length - 1)))));
behavior default:
  assigns (b + [0..(length - 1)]).intM;
  ensures (C_26 : ((C_27 : (\forall integer k_3;
                             ((! ((0 <= k_3) && (k_3 < \result))) ==>
                               ((\at(b,Old) + k_3).intM ==
                                 \at((b + k_3).intM,Old))))) &&
                    (((C_30 : (0 <= \result)) &&
                       (C_31 : (\result <= \at(length,Old)))) &&
                      ((C_33 : (\forall integer k_4;
                                 (((0 <= k_4) && (k_4 < \result)) ==>
                                   ((\at(b,Old) + k_4).intM !=
                                     \at(value,Old))))) &&
                        (C_34 : (\result ==
                                  spec_remove_copy{Old,
                                  Here}(\at(a,Old), (\at(length,Old) - 1),
                                        \at(b,Old), (\result - 1),
                                        \at(value,Old))))))));
{  
   (var int32 i);
   
   (var int32 j);
   
   {  (C_1 : (i = 0));
      (C_2 : (j = 0));
      
      loop 
      behavior default:
        invariant (C_10 : ((C_11 : (0 <= i)) && (C_12 : (i <= length))));
      behavior default:
        invariant (C_9 : (j <= i));
      behavior default:
        invariant (C_6 : ((C_7 : (0 <= j)) && (C_8 : (j <= length))));
      behavior default:
        invariant (C_5 : (\forall integer k_1;
                           ((! ((0 <= k_1) && (k_1 < j))) ==>
                             ((b + k_1).intM == \at((b + k_1).intM,Pre)))));
      behavior default:
        invariant (C_4 : (\forall integer k_2;
                           (((0 <= k_2) && (k_2 < j)) ==>
                             ((b + k_2).intM != value))));
      behavior default:
        invariant (C_3 : (j ==
                           spec_remove_copy{Pre,
                           Here}(a, (i - 1), b, (j - 1), value)));
      behavior default:
        
        assigns (b + [0..(j - 1)]).intM;
      while (true)
      {  
         {  (if (i < length) then () else 
            (goto while_0_break));
            (if ((C_22 : (C_21 : (a + i)).intM) != value) then 
            {  (C_17 : ((C_16 : (C_15 : (b + j)).intM) = (C_14 : (C_13 : 
                                                                 (a +
                                                                   i)).intM)));
               (C_20 : (j = (C_19 : ((C_18 : (j + 1)) :> int32))))
            } else ());
            (C_25 : (i = (C_24 : ((C_23 : (i + 1)) :> int32))))
         }
      };
      (while_0_break : ());
      
      (return j)
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs remove_copy_array.jessie/remove_copy_array.cloc remove_copy_array.jessie/remove_copy_array.jc
type charP

type int32

type int8

type intP

type padding

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

predicate disjoint_arrays(a:intP pointer, b:intP pointer, n:int) =
 (forall i:int.
  (forall k:int.
   ((le_int((0), i) and (lt_int(i, n) and (le_int((0), k) and lt_int(k, n)))) ->
    (shift(a, i) <> shift(b, k)))))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

logic spec_remove_copy: intP pointer, int, intP pointer, int, int32,
 (intP, int32) memory, (intP, int32) memory -> int

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

axiom remove_copy_empty :
 (forall intP_intM_b_0_4_at_Lb:(intP, int32) memory.
  (forall intP_intM_a_0_3_at_La:(intP, int32) memory.
   (forall a_1_0:intP pointer.
    (forall b_1_0:intP pointer.
     (forall value_0_0:int32.
      (forall i_1:int.
       (forall j_0:int.
        ((gt_int((0), i_1) or gt_int((0), j_0)) ->
         (spec_remove_copy(a_1_0, i_1, b_1_0, j_0, value_0_0,
          intP_intM_b_0_4_at_Lb, intP_intM_a_0_3_at_La) = (0))))))))))

axiom remove_copy_equal_value :
 (forall intP_intM_b_0_4_at_Lb:(intP, int32) memory.
  (forall intP_intM_a_0_3_at_La:(intP, int32) memory.
   (forall a_2:intP pointer.
    (forall b_2:intP pointer.
     (forall value_1:int32.
      (forall i_2:int.
       (forall j_1:int.
        ((le_int((0), i_2)
         and (integer_of_int32(select(intP_intM_a_0_3_at_La, shift(a_2, i_2))) = 
             integer_of_int32(value_1))) ->
         (spec_remove_copy(a_2, i_2, b_2, j_1, value_1,
          intP_intM_b_0_4_at_Lb, intP_intM_a_0_3_at_La) = spec_remove_copy(a_2,
                                                          sub_int(i_2, (1)),
                                                          b_2, j_1, value_1,
                                                          intP_intM_b_0_4_at_Lb,
                                                          intP_intM_a_0_3_at_La))))))))))

axiom remove_copy_not_equal_value :
 (forall intP_intM_b_0_4_at_Lb:(intP, int32) memory.
  (forall intP_intM_a_0_3_at_La:(intP, int32) memory.
   (forall a_3:intP pointer.
    (forall b_3:intP pointer.
     (forall value_2:int32.
      (forall i_3:int.
       (forall j_2:int.
        ((le_int((0), i_3)
         and (le_int((0), j_2)
             and ((integer_of_int32(select(intP_intM_a_0_3_at_La,
                                    shift(a_3, i_3))) <> integer_of_int32(value_2))
                 <-> (integer_of_int32(select(intP_intM_a_0_3_at_La,
                                       shift(a_3, i_3))) = integer_of_int32(
                                                           select(intP_intM_b_0_4_at_Lb,
                                                           shift(b_3, j_2))))))) ->
         (spec_remove_copy(a_3, i_3, b_3, j_2, value_2,
          intP_intM_b_0_4_at_Lb, intP_intM_a_0_3_at_La) = add_int(spec_remove_copy(a_3,
                                                                  sub_int(i_3,
                                                                  (1)), b_3,
                                                                  sub_int(j_2,
                                                                  (1)),
                                                                  value_2,
                                                                  intP_intM_b_0_4_at_Lb,
                                                                  intP_intM_a_0_3_at_La),
                                                          (1)))))))))))

axiom remove_copy_label :
 (forall intP_intM_b_0_4_at_Lb2:(intP, int32) memory.
  (forall intP_intM_b_0_4_at_Lb1:(intP, int32) memory.
   (forall intP_intM_a_0_3_at_La:(intP, int32) memory.
    (forall a_4:intP pointer.
     (forall b_4:intP pointer.
      (forall value_3:int32.
       (forall i_4:int.
        (forall j_3:int.
         ((forall k_0:int.
           ((le_int((0), k_0) and le_int(k_0, j_3)) ->
            (integer_of_int32(select(intP_intM_b_0_4_at_Lb1, shift(b_4, k_0))) = 
            integer_of_int32(select(intP_intM_b_0_4_at_Lb2, shift(b_4, k_0)))))) ->
          (spec_remove_copy(a_4, i_4, b_4, j_3, value_3,
           intP_intM_b_0_4_at_Lb1, intP_intM_a_0_3_at_La) = spec_remove_copy(a_4,
                                                            i_4, b_4, j_3,
                                                            value_3,
                                                            intP_intM_b_0_4_at_Lb2,
                                                            intP_intM_a_0_3_at_La)))))))))))

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter remove_copy_array :
 a_1:intP pointer ->
  length:int32 ->
   b_1:intP pointer ->
    value_0:int32 ->
     intP_intM_b_6:(intP, int32) memory ref ->
      intP_b_6_alloc_table:intP alloc_table ->
       intP_a_5_alloc_table:intP alloc_table ->
        intP_intM_a_5:(intP, int32) memory ->
         { } int32 reads intP_intM_b_6 writes intP_intM_b_6
         { (JC_<somenum>:
           ((JC_<somenum>:
            ((JC_<somenum>:
             (forall k_3:int.
              ((not (le_int((0), k_3)
                    and lt_int(k_3, integer_of_int32(result)))) ->
               (integer_of_int32(select(intP_intM_b_6, shift(b_1, k_3))) = 
               integer_of_int32(select(intP_intM_b_6@, shift(b_1, k_3)))))))
            and ((JC_<somenum>: le_int((0), integer_of_int32(result)))
                and ((JC_<somenum>:
                     le_int(integer_of_int32(result),
                     integer_of_int32(length)))
                    and ((JC_<somenum>:
                         (forall k_4:int.
                          ((le_int((0), k_4)
                           and lt_int(k_4, integer_of_int32(result))) ->
                           (integer_of_int32(select(intP_intM_b_6,
                                             shift(b_1, k_4))) <> integer_of_int32(value_0)))))
                        and (JC_<somenum>:
                            (integer_of_int32(result) = spec_remove_copy(a_1,
                                                        sub_int(integer_of_int32(length),
                                                        (1)), b_1,
                                                        sub_int(integer_of_int32(result),
                                                        (1)), value_0,
                                                        intP_intM_b_6,
                                                        intP_intM_a_5))))))))
           and (JC_<somenum>:
               not_assigns(intP_b_6_alloc_table, intP_intM_b_6@,
               intP_intM_b_6,
               pset_range(pset_singleton(b_1), (0),
               sub_int(integer_of_int32(length), (1))))))) }

parameter remove_copy_array_requires :
 a_1:intP pointer ->
  length:int32 ->
   b_1:intP pointer ->
    value_0:int32 ->
     intP_intM_b_6:(intP, int32) memory ref ->
      intP_b_6_alloc_table:intP alloc_table ->
       intP_a_5_alloc_table:intP alloc_table ->
        intP_intM_a_5:(intP, int32) memory ->
         { (JC_<somenum>:
           ((JC_<somenum>: le_int((0), integer_of_int32(length)))
           and ((JC_<somenum>: le_int(offset_min(intP_a_5_alloc_table, a_1), (0)))
               and ((JC_<somenum>:
                    ge_int(offset_max(intP_a_5_alloc_table, a_1),
                    sub_int(integer_of_int32(length), (1))))
                   and ((JC_<somenum>:
                        le_int(offset_min(intP_b_6_alloc_table, b_1), (0)))
                       and (JC_<somenum>:
                           ge_int(offset_max(intP_b_6_alloc_table, b_1),
                           sub_int(integer_of_int32(length), (1)))))))))}
         int32 reads intP_intM_b_6 writes intP_intM_b_6
         { (JC_<somenum>:
           ((JC_<somenum>:
            ((JC_<somenum>:
             (forall k_3:int.
              ((not (le_int((0), k_3)
                    and lt_int(k_3, integer_of_int32(result)))) ->
               (integer_of_int32(select(intP_intM_b_6, shift(b_1, k_3))) = 
               integer_of_int32(select(intP_intM_b_6@, shift(b_1, k_3)))))))
            and ((JC_<somenum>: le_int((0), integer_of_int32(result)))
                and ((JC_<somenum>:
                     le_int(integer_of_int32(result),
                     integer_of_int32(length)))
                    and ((JC_<somenum>:
                         (forall k_4:int.
                          ((le_int((0), k_4)
                           and lt_int(k_4, integer_of_int32(result))) ->
                           (integer_of_int32(select(intP_intM_b_6,
                                             shift(b_1, k_4))) <> integer_of_int32(value_0)))))
                        and (JC_<somenum>:
                            (integer_of_int32(result) = spec_remove_copy(a_1,
                                                        sub_int(integer_of_int32(length),
                                                        (1)), b_1,
                                                        sub_int(integer_of_int32(result),
                                                        (1)), value_0,
                                                        intP_intM_b_6,
                                                        intP_intM_a_5))))))))
           and (JC_<somenum>:
               not_assigns(intP_b_6_alloc_table, intP_intM_b_6@,
               intP_intM_b_6,
               pset_range(pset_singleton(b_1), (0),
               sub_int(integer_of_int32(length), (1))))))) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let remove_copy_array_ensures_default =
 fun (a_1 : intP pointer) (length : int32) (b_1 : intP pointer) (value_0 : int32) (intP_intM_b_6 : (intP, int32) memory ref) (intP_a_5_alloc_table : intP alloc_table) (intP_b_6_alloc_table : intP alloc_table) (intP_intM_a_5 : (intP, int32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int((0), integer_of_int32(length)))
    and ((JC_<somenum>: le_int(offset_min(intP_a_5_alloc_table, a_1), (0)))
        and ((JC_<somenum>:
             ge_int(offset_max(intP_a_5_alloc_table, a_1),
             sub_int(integer_of_int32(length), (1))))
            and ((JC_<somenum>: le_int(offset_min(intP_b_6_alloc_table, b_1), (0)))
                and (JC_<somenum>:
                    ge_int(offset_max(intP_b_6_alloc_table, b_1),
                    sub_int(integer_of_int32(length), (1))))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let i_5 = ref (any_int32 void) in
     (let j_4 = ref (any_int32 void) in
     try
      (C_1:
      (C_2:
      begin
        (let jessie_<somenum> = (i_5 := (safe_int32_of_integer_ (0))) in void);
       (let jessie_<somenum> = (j_4 := (safe_int32_of_integer_ (0))) in void);
       (loop_2:
       while true do
       { invariant
           (((JC_<somenum>:
             (integer_of_int32(j_4) = spec_remove_copy(a_1,
                                      sub_int(integer_of_int32(i_5), (1)),
                                      b_1,
                                      sub_int(integer_of_int32(j_4), (1)),
                                      value_0, intP_intM_b_6, intP_intM_a_5)))
            and ((JC_<somenum>:
                 (forall k_2:int.
                  ((le_int((0), k_2) and lt_int(k_2, integer_of_int32(j_4))) ->
                   (integer_of_int32(select(intP_intM_b_6, shift(b_1, k_2))) <> 
                   integer_of_int32(value_0)))))
                and ((JC_<somenum>:
                     (forall k_1:int.
                      ((not (le_int((0), k_1)
                            and lt_int(k_1, integer_of_int32(j_4)))) ->
                       (integer_of_int32(select(intP_intM_b_6,
                                         shift(b_1, k_1))) = integer_of_int32(
                                                             select(intP_intM_b_6@init,
                                                             shift(b_1, k_1)))))))
                    and ((JC_<somenum>:
                         ((JC_<somenum>: le_int((0), integer_of_int32(j_4)))
                         and (JC_<somenum>:
                             le_int(integer_of_int32(j_4),
                             integer_of_int32(length)))))
                        and ((JC_<somenum>:
                             le_int(integer_of_int32(j_4),
                             integer_of_int32(i_5)))
                            and (JC_<somenum>:
                                ((JC_<somenum>: le_int((0), integer_of_int32(i_5)))
                                and (JC_<somenum>:
                                    le_int(integer_of_int32(i_5),
                                    integer_of_int32(length))))))))))
           and ((JC_<somenum>:
                not_assigns(intP_b_6_alloc_table, intP_intM_b_6@loop_2,
                intP_intM_b_6,
                pset_range(pset_singleton(b_1), (0),
                sub_int(integer_of_int32(j_4), (1)))))
               and (JC_<somenum>:
                   not_assigns(intP_b_6_alloc_table, intP_intM_b_6@init,
                   intP_intM_b_6,
                   pset_range(pset_singleton(b_1), (0),
                   sub_int(integer_of_int32(length), (1)))))))  }
        begin
          [ { } unit { true } ];
         try
          begin
            (let jessie_<somenum> =
            (C_25:
            begin
              (if ((lt_int_ (integer_of_int32 !i_5)) (integer_of_int32 length))
              then void else (raise (Goto_while_0_break_exc void)));
             (if ((neq_int_ (integer_of_int32 (C_22:
                                              ((safe_acc_ intP_intM_a_5) 
                                               (C_21:
                                               ((shift a_1) (integer_of_int32 !i_5))))))) 
                  (integer_of_int32 value_0))
             then
              (let jessie_<somenum> =
              (C_17:
              (C_20:
              begin
                (let jessie_<somenum> =
                (let jessie_<somenum> =
                (C_14:
                ((safe_acc_ intP_intM_a_5) (C_13:
                                           ((shift a_1) (integer_of_int32 !i_5))))) in
                (let jessie_<somenum> = b_1 in
                (let jessie_<somenum> = (integer_of_int32 !j_4) in
                (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
                (((safe_upd_ intP_intM_b_6) jessie_<somenum>) jessie_<somenum>))))) in
                void);
               (j_4 := (C_19:
                       (safe_int32_of_integer_ (C_18:
                                               ((add_int (integer_of_int32 !j_4)) (1))))));
               !j_4 end)) in void) else void);
             (i_5 := (C_24:
                     (safe_int32_of_integer_ (C_23:
                                             ((add_int (integer_of_int32 !i_5)) (1))))));
             !i_5 end) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<somenum> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break: begin   void; (return := !j_4); (raise Return) end) end));
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>:
      (forall k_3:int.
       ((not (le_int((0), k_3) and lt_int(k_3, integer_of_int32(result)))) ->
        (integer_of_int32(select(intP_intM_b_6, shift(b_1, k_3))) = integer_of_int32(
                                                                    select(intP_intM_b_6@,
                                                                    shift(b_1,
                                                                    k_3)))))))
     and ((JC_<somenum>: le_int((0), integer_of_int32(result)))
         and ((JC_<somenum>:
              le_int(integer_of_int32(result), integer_of_int32(length)))
             and ((JC_<somenum>:
                  (forall k_4:int.
                   ((le_int((0), k_4)
                    and lt_int(k_4, integer_of_int32(result))) ->
                    (integer_of_int32(select(intP_intM_b_6, shift(b_1, k_4))) <> 
                    integer_of_int32(value_0)))))
                 and (JC_<somenum>:
                     (integer_of_int32(result) = spec_remove_copy(a_1,
                                                 sub_int(integer_of_int32(length),
                                                 (1)), b_1,
                                                 sub_int(integer_of_int32(result),
                                                 (1)), value_0,
                                                 intP_intM_b_6,
                                                 intP_intM_a_5))))))))
    and (JC_<somenum>:
        not_assigns(intP_b_6_alloc_table, intP_intM_b_6@, intP_intM_b_6,
        pset_range(pset_singleton(b_1), (0),
        sub_int(integer_of_int32(length), (1))))))) }

let remove_copy_array_safety =
 fun (a_1 : intP pointer) (length : int32) (b_1 : intP pointer) (value_0 : int32) (intP_intM_b_6 : (intP, int32) memory ref) (intP_a_5_alloc_table : intP alloc_table) (intP_b_6_alloc_table : intP alloc_table) (intP_intM_a_5 : (intP, int32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int((0), integer_of_int32(length)))
    and ((JC_<somenum>: le_int(offset_min(intP_a_5_alloc_table, a_1), (0)))
        and ((JC_<somenum>:
             ge_int(offset_max(intP_a_5_alloc_table, a_1),
             sub_int(integer_of_int32(length), (1))))
            and ((JC_<somenum>: le_int(offset_min(intP_b_6_alloc_table, b_1), (0)))
                and (JC_<somenum>:
                    ge_int(offset_max(intP_b_6_alloc_table, b_1),
                    sub_int(integer_of_int32(length), (1))))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let i_5 = ref (any_int32 void) in
     (let j_4 = ref (any_int32 void) in
     try
      (C_1:
      (C_2:
      begin
        (let jessie_<somenum> = (i_5 := (safe_int32_of_integer_ (0))) in void);
       (let jessie_<somenum> = (j_4 := (safe_int32_of_integer_ (0))) in void);
       (loop_1:
       while true do
       { invariant (JC_<somenum>: true) variant (0) }
        begin
          [ { } unit reads i_5,intP_intM_b_6,j_4
            { ((JC_<somenum>:
               (integer_of_int32(j_4) = spec_remove_copy(a_1,
                                        sub_int(integer_of_int32(i_5), (1)),
                                        b_1,
                                        sub_int(integer_of_int32(j_4), (1)),
                                        value_0, intP_intM_b_6,
                                        intP_intM_a_5)))
              and ((JC_<somenum>:
                   (forall k_2:int.
                    ((le_int((0), k_2)
                     and lt_int(k_2, integer_of_int32(j_4))) ->
                     (integer_of_int32(select(intP_intM_b_6, shift(b_1, k_2))) <> 
                     integer_of_int32(value_0)))))
                  and ((JC_<somenum>:
                       (forall k_1:int.
                        ((not (le_int((0), k_1)
                              and lt_int(k_1, integer_of_int32(j_4)))) ->
                         (integer_of_int32(select(intP_intM_b_6,
                                           shift(b_1, k_1))) = integer_of_int32(
                                                               select(intP_intM_b_6@init,
                                                               shift(b_1,
                                                               k_1)))))))
                      and ((JC_<somenum>:
                           ((JC_<somenum>: le_int((0), integer_of_int32(j_4)))
                           and (JC_<somenum>:
                               le_int(integer_of_int32(j_4),
                               integer_of_int32(length)))))
                          and ((JC_<somenum>:
                               le_int(integer_of_int32(j_4),
                               integer_of_int32(i_5)))
                              and (JC_<somenum>:
                                  ((JC_<somenum>:
                                   le_int((0), integer_of_int32(i_5)))
                                  and (JC_<somenum>:
                                      le_int(integer_of_int32(i_5),
                                      integer_of_int32(length)))))))))) } ];
         try
          begin
            (let jessie_<somenum> =
            (C_25:
            begin
              (if ((lt_int_ (integer_of_int32 !i_5)) (integer_of_int32 length))
              then void else (raise (Goto_while_0_break_exc void)));
             (if ((neq_int_ (integer_of_int32 (C_22:
                                              (JC_<somenum>:
                                              ((((offset_acc_ intP_a_5_alloc_table) intP_intM_a_5) a_1) 
                                               (integer_of_int32 !i_5)))))) 
                  (integer_of_int32 value_0))
             then
              (let jessie_<somenum> =
              (C_17:
              (C_20:
              begin
                (let jessie_<somenum> =
                (let jessie_<somenum> =
                (C_14:
                (JC_<somenum>:
                ((((offset_acc_ intP_a_5_alloc_table) intP_intM_a_5) a_1) 
                 (integer_of_int32 !i_5)))) in
                (let jessie_<somenum> = b_1 in
                (let jessie_<somenum> = (integer_of_int32 !j_4) in
                (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
                (JC_<somenum>:
                (((((offset_upd_ intP_b_6_alloc_table) intP_intM_b_6) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
                void);
               (j_4 := (C_19:
                       (JC_<somenum>:
                       (int32_of_integer_ (C_18:
                                          ((add_int (integer_of_int32 !j_4)) (1)))))));
               !j_4 end)) in void) else void);
             (i_5 := (C_24:
                     (JC_<somenum>:
                     (int32_of_integer_ (C_23:
                                        ((add_int (integer_of_int32 !i_5)) (1)))))));
             !i_5 end) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<somenum> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break: begin   void; (return := !j_4); (raise Return) end) end));
    absurd  end with Return -> !return end)) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C remove_copy_array.jessie --quiet -f remove_copy_array.makefile project
why --project [...] why/remove_copy_array.why
<project name="remove_copy_array" context="why/remove_copy_array_ctx.why">
  <function name="Function remove_copy_array">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/remove_copy_array_po1.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "19" begin = "18" end = "72"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/remove_copy_array_po2.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "16" begin = "18" end = "65"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/remove_copy_array_po3.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "11" begin = "18" end = "24"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/remove_copy_array_po4.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "11" begin = "23" end = "34"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/remove_copy_array_po5.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "10" begin = "18" end = "24"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/remove_copy_array_po6.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "9" begin = "18" end = "24"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/remove_copy_array_po7.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "9" begin = "23" end = "34"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/remove_copy_array_po8.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.jessie/remove_copy_array.jc" line = "128" begin = "6" end = "1476"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/remove_copy_array_po9.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.jessie/remove_copy_array.jc" line = "128" begin = "6" end = "1476"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/remove_copy_array_po10.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "19" begin = "18" end = "72"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/remove_copy_array_po11.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "16" begin = "18" end = "65"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/remove_copy_array_po12.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "14" begin = "18" end = "78"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/remove_copy_array_po13.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "11" begin = "18" end = "24"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/remove_copy_array_po14.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "11" begin = "23" end = "34"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/remove_copy_array_po15.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "10" begin = "18" end = "24"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/remove_copy_array_po16.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "9" begin = "18" end = "24"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/remove_copy_array_po17.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "9" begin = "23" end = "34"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/remove_copy_array_po18.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.jessie/remove_copy_array.jc" line = "128" begin = "6" end = "1476"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/remove_copy_array_po19.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.jessie/remove_copy_array.jc" line = "128" begin = "6" end = "1476"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/remove_copy_array_po20.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.h" line = "82" begin = "9" end = "72"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/remove_copy_array_po21.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.h" line = "84" begin = "9" end = "21"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/remove_copy_array_po22.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.h" line = "84" begin = "14" end = "31"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/remove_copy_array_po23.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.h" line = "86" begin = "9" end = "62"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/remove_copy_array_po24.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.h" line = "88" begin = "9" end = "80"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/remove_copy_array_po25.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "3" begin = "4" end = "21"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/remove_copy_array_po26.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "23" begin = "12" end = "16"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/remove_copy_array_po27.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "23" begin = "12" end = "16"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/remove_copy_array_po28.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "25" begin = "19" end = "23"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/remove_copy_array_po29.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "25" begin = "19" end = "23"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/remove_copy_array_po30.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.jessie/remove_copy_array.jc" line = "155" begin = "24" end = "220"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/remove_copy_array_po31.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.jessie/remove_copy_array.jc" line = "155" begin = "24" end = "220"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/remove_copy_array_po32.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "26" begin = "12" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/remove_copy_array_po33.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "26" begin = "12" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/remove_copy_array_po34.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "22" begin = "24" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/remove_copy_array_po35.why">
      <location file = "PPCHOME/tests/jessie/remove_copy_array.c" line = "22" begin = "24" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/remove_copy_array_po36.why">
      <location file = "why/remove_copy_array.why" line = "650" begin = "42" end = "43"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/remove_copy_array_po37.why">
      <location file = "why/remove_copy_array.why" line = "650" begin = "42" end = "43"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type charP

type int32

type int8

type intP

type padding

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

predicate disjoint_arrays(a: intP pointer, b: intP pointer, n: int) =
  (forall i:int.
    (forall k:int.
      (((0 <= i) and ((i < n) and ((0 <= k) and (k < n)))) -> (shift(a,
       i) <> shift(b, k)))))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32 [(integer_of_int32(x) = integer_of_int32(y))].
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8 [(integer_of_int8(x) = integer_of_int8(y))].
      ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

logic spec_remove_copy : intP pointer, int, intP pointer, int, int32, (intP,
int32) memory, (intP, int32) memory -> int

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

axiom remove_copy_empty:
  (forall intP_intM_b_0_4_at_Lb:(intP, int32) memory.
    (forall intP_intM_a_0_3_at_La:(intP, int32) memory.
      (forall a_1_0:intP pointer.
        (forall b_1_0:intP pointer.
          (forall value_0_0:int32.
            (forall i_1:int.
              (forall j_0:int.
                (((0 > i_1) or (0 > j_0)) -> (spec_remove_copy(a_1_0, i_1,
                 b_1_0, j_0, value_0_0, intP_intM_b_0_4_at_Lb,
                 intP_intM_a_0_3_at_La) = 0)))))))))

axiom remove_copy_equal_value:
  (forall intP_intM_b_0_4_at_Lb:(intP, int32) memory.
    (forall intP_intM_a_0_3_at_La:(intP, int32) memory.
      (forall a_2:intP pointer.
        (forall b_2:intP pointer.
          (forall value_1:int32.
            (forall i_2:int.
              (forall j_1:int.
                (((0 <= i_2) and
                  (integer_of_int32(select(intP_intM_a_0_3_at_La, shift(a_2,
                  i_2))) = integer_of_int32(value_1))) ->
                 (spec_remove_copy(a_2, i_2, b_2, j_1, value_1,
                 intP_intM_b_0_4_at_Lb,
                 intP_intM_a_0_3_at_La) = spec_remove_copy(a_2, (i_2 - 1),
                 b_2, j_1, value_1, intP_intM_b_0_4_at_Lb,
                 intP_intM_a_0_3_at_La))))))))))

axiom remove_copy_not_equal_value:
  (forall intP_intM_b_0_4_at_Lb:(intP, int32) memory.
    (forall intP_intM_a_0_3_at_La:(intP, int32) memory.
      (forall a_3:intP pointer.
        (forall b_3:intP pointer.
          (forall value_2:int32.
            (forall i_3:int.
              (forall j_2:int.
                (((0 <= i_3) and
                  ((0 <= j_2) and
                   ((integer_of_int32(select(intP_intM_a_0_3_at_La,
                    shift(a_3, i_3))) <> integer_of_int32(value_2)) <->
                    (integer_of_int32(select(intP_intM_a_0_3_at_La,
                    shift(a_3,
                    i_3))) = integer_of_int32(select(intP_intM_b_0_4_at_Lb,
                    shift(b_3, j_2))))))) ->
                 (spec_remove_copy(a_3, i_3, b_3, j_2, value_2,
                 intP_intM_b_0_4_at_Lb,
                 intP_intM_a_0_3_at_La) = (spec_remove_copy(a_3, (i_3 - 1),
                 b_3, (j_2 - 1), value_2, intP_intM_b_0_4_at_Lb,
                 intP_intM_a_0_3_at_La) + 1))))))))))

axiom remove_copy_label:
  (forall intP_intM_b_0_4_at_Lb2:(intP, int32) memory.
    (forall intP_intM_b_0_4_at_Lb1:(intP, int32) memory.
      (forall intP_intM_a_0_3_at_La:(intP, int32) memory.
        (forall a_4:intP pointer.
          (forall b_4:intP pointer.
            (forall value_3:int32.
              (forall i_4:int.
                (forall j_3:int.
                  ((forall k_0:int.
                     (((0 <= k_0) and (k_0 <= j_3)) ->
                      (integer_of_int32(select(intP_intM_b_0_4_at_Lb1,
                      shift(b_4,
                      k_0))) = integer_of_int32(select(intP_intM_b_0_4_at_Lb2,
                      shift(b_4, k_0)))))) ->
                   (spec_remove_copy(a_4, i_4, b_4, j_3, value_3,
                   intP_intM_b_0_4_at_Lb1,
                   intP_intM_a_0_3_at_La) = spec_remove_copy(a_4, i_4, b_4,
                   j_3, value_3, intP_intM_b_0_4_at_Lb2,
                   intP_intM_a_0_3_at_La)))))))))))

