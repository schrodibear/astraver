Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -jessie -jessie-gen-only eps_line.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -dD eps_line.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir eps_line.jessie
[jessie] File eps_line.jessie/eps_line.jc written.
[jessie] File eps_line.jessie/eps_line.cloc written.
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol
# FloatModel = multirounding

axiomatic Padding {

  logic type padding
  
}

tag charP = {
  integer charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

logic integer l_sign(real x) =
(if (x >= 0.0) then 1 else (- 1))

integer sign(double x, double e1, double e2)
  requires (C_7 : ((C_8 : ((e1 :> real) <= ((x :> real) - \double_exact(x)))) &&
                    (C_9 : (((x :> real) - \double_exact(x)) <= (e2 :> real)))));
behavior default:
  ensures (C_4 : ((C_5 : ((\result != 0) ==>
                           (\result == l_sign(\double_exact(\at(x,Old)))))) &&
                   (C_6 : (\integer_abs(\result) <= 1))));
{  
   (var integer __retres);
   
   {  (if (x > e2) then 
      {  (C_1 : (__retres = 1));
         
         (goto return_label)
      } else ());
      (if (x < e1) then 
      {  (C_2 : (__retres = -1));
         
         (goto return_label)
      } else ());
      (C_3 : (__retres = 0));
      (return_label : 
      (return __retres))
   }
}

integer eps_line(double sx, double sy, double vx, double vy)
  requires (C_25 : ((((((((C_32 : ((sx :> real) == \double_exact(sx))) &&
                           (C_33 : ((sy :> real) == \double_exact(sy)))) &&
                          (C_34 : ((vx :> real) == \double_exact(vx)))) &&
                         (C_35 : ((vy :> real) == \double_exact(vy)))) &&
                        (C_36 : (\real_abs((sx :> real)) <= 100.0))) &&
                       (C_37 : (\real_abs((sy :> real)) <= 100.0))) &&
                      (C_38 : (\real_abs((vx :> real)) <= 1.0))) &&
                     (C_39 : (\real_abs((vy :> real)) <= 1.0))));
behavior default:
  ensures (C_24 : ((\result != 0) ==>
                    (\result ==
                      (l_sign(((\double_exact(\at(sx,Old)) *
                                 \double_exact(\at(vx,Old))) +
                                (\double_exact(\at(sy,Old)) *
                                  \double_exact(\at(vy,Old))))) *
                        l_sign(((\double_exact(\at(sx,Old)) *
                                  \double_exact(\at(vy,Old))) -
                                 (\double_exact(\at(sy,Old)) *
                                   \double_exact(\at(vx,Old)))))))));
{  
   (var integer s1);
   
   (var integer s2);
   
   (var integer __retres_0);
   
   {  (C_15 : (s1 = (C_14 : sign((C_12 : ((C_11 : (sx * vx)) +
                                           (C_10 : (sy * vy)))),
                                 (C_13 : (- (0x1.9000000001ap-45 :> double))),
                                 (0x1.9000000001ap-45 :> double)))));
      (C_21 : (s2 = (C_20 : sign((C_18 : ((C_17 : (sx * vy)) -
                                           (C_16 : (sy * vx)))),
                                 (C_19 : (- (0x1.9000000001ap-45 :> double))),
                                 (0x1.9000000001ap-45 :> double)))));
      (C_23 : (__retres_0 = (C_22 : (s1 * s2))));
      
      (return __retres_0)
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs eps_line.jessie/eps_line.cloc eps_line.jessie/eps_line.jc
type charP

type padding

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

function l_sign(x_0:real) : int =
 (if ge_real_bool(x_0, 0.0) then (1) else neg_int((1)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter eps_line :
 sx:double ->
  sy:double ->
   vx:double ->
    vy:double ->
     { } int
     { (JC_<somenum>:
       ((result <> (0)) ->
        (result = mul_int(l_sign(add_real(mul_real(double_exact(sx),
                                          double_exact(vx)),
                                 mul_real(double_exact(sy), double_exact(vy)))),
                  l_sign(sub_real(mul_real(double_exact(sx),
                                  double_exact(vy)),
                         mul_real(double_exact(sy), double_exact(vx)))))))) }

parameter eps_line_requires :
 sx:double ->
  sy:double ->
   vx:double ->
    vy:double ->
     { (JC_<somenum>:
       ((JC_<somenum>: (double_value(sx) = double_exact(sx)))
       and ((JC_<somenum>: (double_value(sy) = double_exact(sy)))
           and ((JC_<somenum>: (double_value(vx) = double_exact(vx)))
               and ((JC_<somenum>: (double_value(vy) = double_exact(vy)))
                   and ((JC_<somenum>: le_real(abs_real(double_value(sx)), 100.0))
                       and ((JC_<somenum>:
                            le_real(abs_real(double_value(sy)), 100.0))
                           and ((JC_<somenum>:
                                le_real(abs_real(double_value(vx)), 1.0))
                               and (JC_<somenum>:
                                   le_real(abs_real(double_value(vy)), 1.0))))))))))}
     int
     { (JC_<somenum>:
       ((result <> (0)) ->
        (result = mul_int(l_sign(add_real(mul_real(double_exact(sx),
                                          double_exact(vx)),
                                 mul_real(double_exact(sy), double_exact(vy)))),
                  l_sign(sub_real(mul_real(double_exact(sx),
                                  double_exact(vy)),
                         mul_real(double_exact(sy), double_exact(vx)))))))) }

parameter sign :
 x_1:double ->
  e1:double ->
   e2:double ->
    { } int
    { (JC_<somenum>:
      ((JC_<somenum>: ((result <> (0)) -> (result = l_sign(double_exact(x_1)))))
      and (JC_<somenum>: le_int(abs_int(result), (1))))) }

parameter sign_requires :
 x_1:double ->
  e1:double ->
   e2:double ->
    { (JC_<somenum>:
      ((JC_<somenum>:
       le_real(double_value(e1),
       sub_real(double_value(x_1), double_exact(x_1))))
      and (JC_<somenum>:
          le_real(sub_real(double_value(x_1), double_exact(x_1)),
          double_value(e2)))))}
    int
    { (JC_<somenum>:
      ((JC_<somenum>: ((result <> (0)) -> (result = l_sign(double_exact(x_1)))))
      and (JC_<somenum>: le_int(abs_int(result), (1))))) }

let eps_line_ensures_default =
 fun (sx : double) (sy : double) (vx : double) (vy : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (double_value(sx) = double_exact(sx)))
    and ((JC_<somenum>: (double_value(sy) = double_exact(sy)))
        and ((JC_<somenum>: (double_value(vx) = double_exact(vx)))
            and ((JC_<somenum>: (double_value(vy) = double_exact(vy)))
                and ((JC_<somenum>: le_real(abs_real(double_value(sx)), 100.0))
                    and ((JC_<somenum>: le_real(abs_real(double_value(sy)), 100.0))
                        and ((JC_<somenum>:
                             le_real(abs_real(double_value(vx)), 1.0))
                            and (JC_<somenum>:
                                le_real(abs_real(double_value(vy)), 1.0)))))))))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let s1_1 = ref (any_int void) in
     (let s2_1 = ref (any_int void) in
     (let __retres_0 = ref (any_int void) in
     (C_15:
     (C_21:
     (C_23:
     begin
       (let jessie_<somenum> =
       (s1_1 := (C_14:
                (let jessie_<somenum> =
                (C_12:
                (JC_<somenum>:
                (((add_double_safe nearest_even) (C_11:
                                                 (JC_<somenum>:
                                                 (((mul_double_safe nearest_even) sx) vx)))) 
                 (C_10: (JC_<somenum>: (((mul_double_safe nearest_even) sy) vy)))))) in
                (let jessie_<somenum> =
                (C_13:
                (JC_<somenum>:
                ((neg_double_safe nearest_even) ((double_of_real_safe nearest_even) 0x1.9000000001ap-45)))) in
                (let jessie_<somenum> =
                ((double_of_real_safe nearest_even) 0x1.9000000001ap-45) in
                (JC_<somenum>: (((sign jessie_<somenum>) jessie_<somenum>) jessie_<somenum>))))))) in
       void);
      (let jessie_<somenum> =
      (s2_1 := (C_20:
               (let jessie_<somenum> =
               (C_18:
               (JC_<somenum>:
               (((sub_double_safe nearest_even) (C_17:
                                                (JC_<somenum>:
                                                (((mul_double_safe nearest_even) sx) vy)))) 
                (C_16: (JC_<somenum>: (((mul_double_safe nearest_even) sy) vx)))))) in
               (let jessie_<somenum> =
               (C_19:
               (JC_<somenum>:
               ((neg_double_safe nearest_even) ((double_of_real_safe nearest_even) 0x1.9000000001ap-45)))) in
               (let jessie_<somenum> =
               ((double_of_real_safe nearest_even) 0x1.9000000001ap-45) in
               (JC_<somenum>: (((sign jessie_<somenum>) jessie_<somenum>) jessie_<somenum>))))))) in
      void);
      (let jessie_<somenum> = (__retres_0 := (C_22: ((mul_int !s1_1) !s2_1))) in
      void); (return := !__retres_0); (raise Return) end)))))); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((result <> (0)) ->
     (result = mul_int(l_sign(add_real(mul_real(double_exact(sx),
                                       double_exact(vx)),
                              mul_real(double_exact(sy), double_exact(vy)))),
               l_sign(sub_real(mul_real(double_exact(sx), double_exact(vy)),
                      mul_real(double_exact(sy), double_exact(vx)))))))) }

let eps_line_safety =
 fun (sx : double) (sy : double) (vx : double) (vy : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (double_value(sx) = double_exact(sx)))
    and ((JC_<somenum>: (double_value(sy) = double_exact(sy)))
        and ((JC_<somenum>: (double_value(vx) = double_exact(vx)))
            and ((JC_<somenum>: (double_value(vy) = double_exact(vy)))
                and ((JC_<somenum>: le_real(abs_real(double_value(sx)), 100.0))
                    and ((JC_<somenum>: le_real(abs_real(double_value(sy)), 100.0))
                        and ((JC_<somenum>:
                             le_real(abs_real(double_value(vx)), 1.0))
                            and (JC_<somenum>:
                                le_real(abs_real(double_value(vy)), 1.0)))))))))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let s1_1 = ref (any_int void) in
     (let s2_1 = ref (any_int void) in
     (let __retres_0 = ref (any_int void) in
     (C_15:
     (C_21:
     (C_23:
     begin
       (let jessie_<somenum> =
       (s1_1 := (C_14:
                (let jessie_<somenum> =
                (C_12:
                (JC_<somenum>:
                (((add_double nearest_even) (C_11:
                                            (JC_<somenum>:
                                            (((mul_double nearest_even) sx) vx)))) 
                 (C_10: (JC_<somenum>: (((mul_double nearest_even) sy) vy)))))) in
                (let jessie_<somenum> =
                (C_13:
                (JC_<somenum>:
                ((neg_double nearest_even) (JC_<somenum>:
                                           ((double_of_real nearest_even) 0x1.9000000001ap-45))))) in
                (let jessie_<somenum> =
                (JC_<somenum>: ((double_of_real nearest_even) 0x1.9000000001ap-45)) in
                (JC_<somenum>: (((sign_requires jessie_<somenum>) jessie_<somenum>) jessie_<somenum>))))))) in
       void);
      (let jessie_<somenum> =
      (s2_1 := (C_20:
               (let jessie_<somenum> =
               (C_18:
               (JC_<somenum>:
               (((sub_double nearest_even) (C_17:
                                           (JC_<somenum>:
                                           (((mul_double nearest_even) sx) vy)))) 
                (C_16: (JC_<somenum>: (((mul_double nearest_even) sy) vx)))))) in
               (let jessie_<somenum> =
               (C_19:
               (JC_<somenum>:
               ((neg_double nearest_even) (JC_<somenum>:
                                          ((double_of_real nearest_even) 0x1.9000000001ap-45))))) in
               (let jessie_<somenum> =
               (JC_<somenum>: ((double_of_real nearest_even) 0x1.9000000001ap-45)) in
               (JC_<somenum>: (((sign_requires jessie_<somenum>) jessie_<somenum>) jessie_<somenum>))))))) in
      void);
      (let jessie_<somenum> = (__retres_0 := (C_22: ((mul_int !s1_1) !s2_1))) in
      void); (return := !__retres_0); (raise Return) end)))))); absurd  end
   with Return -> !return end)) { true }

let sign_ensures_default =
 fun (x_1 : double) (e1 : double) (e2 : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>:
     le_real(double_value(e1),
     sub_real(double_value(x_1), double_exact(x_1))))
    and (JC_<somenum>:
        le_real(sub_real(double_value(x_1), double_exact(x_1)),
        double_value(e2))))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let __retres = ref (any_int void) in
     try
      (C_3:
      begin
        (if ((gt_double_ x_1) e2)
        then
         (C_1:
         begin
           (let jessie_<somenum> = (__retres := (1)) in void);
          (raise (Return_label_exc void)) end) else void);
       (if ((lt_double_ x_1) e1)
       then
        (C_2:
        begin
          (let jessie_<somenum> = (__retres := (neg_int (1))) in void);
         (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (__retres := (0)) in void);
       (raise (Return_label_exc void)) end) with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: ((result <> (0)) -> (result = l_sign(double_exact(x_1)))))
    and (JC_<somenum>: le_int(abs_int(result), (1))))) }

let sign_safety =
 fun (x_1 : double) (e1 : double) (e2 : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>:
     le_real(double_value(e1),
     sub_real(double_value(x_1), double_exact(x_1))))
    and (JC_<somenum>:
        le_real(sub_real(double_value(x_1), double_exact(x_1)),
        double_value(e2))))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let __retres = ref (any_int void) in
     try
      (C_3:
      begin
        (if ((gt_double_ x_1) e2)
        then
         (C_1:
         begin
           (let jessie_<somenum> = (__retres := (1)) in void);
          (raise (Return_label_exc void)) end) else void);
       (if ((lt_double_ x_1) e1)
       then
        (C_2:
        begin
          (let jessie_<somenum> = (__retres := (neg_int (1))) in void);
         (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (__retres := (0)) in void);
       (raise (Return_label_exc void)) end) with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end)) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C eps_line.jessie --quiet -f eps_line.makefile project
why --project [...] why/eps_line.why
<project name="eps_line" context="why/eps_line_ctx.why">
  <function name="Function sign">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/eps_line_po18.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "7" begin = "12" end = "59"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/eps_line_po19.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "8" begin = "13" end = "31"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function eps_line">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/eps_line_po1.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "25" begin = "7" end = "164"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/eps_line_po2.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "33" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/eps_line_po3.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "33" begin = "16" end = "21"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/eps_line_po4.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "33" begin = "10" end = "21"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/eps_line_po5.why">
      <location file = "PPCHOME/tests/jessie/eps_line.jessie/eps_line.jc" line = "82" begin = "44" end = "75"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/eps_line_po6.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "33" begin = "24" end = "43"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/eps_line_po7.why">
      <location file = "PPCHOME/tests/jessie/eps_line.jessie/eps_line.jc" line = "83" begin = "33" end = "64"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/eps_line_po8.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "33" begin = "5" end = "65"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/eps_line_po9.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "33" begin = "5" end = "65"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/eps_line_po10.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "34" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/eps_line_po11.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "34" begin = "16" end = "21"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/eps_line_po12.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "34" begin = "10" end = "21"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/eps_line_po13.why">
      <location file = "PPCHOME/tests/jessie/eps_line.jessie/eps_line.jc" line = "86" begin = "44" end = "75"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/eps_line_po14.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "34" begin = "24" end = "43"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/eps_line_po15.why">
      <location file = "PPCHOME/tests/jessie/eps_line.jessie/eps_line.jc" line = "87" begin = "33" end = "64"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/eps_line_po16.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "34" begin = "5" end = "65"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/eps_line_po17.why">
      <location file = "PPCHOME/tests/jessie/eps_line.c" line = "34" begin = "5" end = "65"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type mode =
  | nearest_even
  | to_zero
  | up
  | down
  | nearest_away

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom exact_round_double_for_doubles:
  (forall x:double.
    (forall m:mode. (round_double(m, double_value(x)) = double_value(x))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom exact_round_single_for_singles:
  (forall x:single.
    (forall m:mode. (round_single(m, single_value(x)) = single_value(x))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

logic cond_sub_double : mode, double, double -> int

axiom cond_sub_double_axiom1:
  (forall m:mode.
    (forall x:double.
      (forall y:double.
        ((abs_real((double_value(x) - double_value(y))) >= 0x1.p-1022) ->
         (cond_sub_double(m, x, y) = 1)))))

axiom cond_sub_double_axiom2:
  (forall m:mode.
    (forall x:double.
      (forall y:double.
        ((((0x1.p-1075 <= abs_real((double_value(x) - double_value(y)))) and
           (abs_real((double_value(x) - double_value(y))) <= 0x1.p-1022)) and
          ((abs_real((double_value(x) - double_value(y))) <> 0x1.p-1022) and
           (abs_real((double_value(x) - double_value(y))) <> 0x1.p-1075))) ->
         (cond_sub_double(m, x, y) = 2)))))

axiom cond_sub_double_axiom3:
  (forall m:mode.
    (forall x:double.
      (forall y:double.
        (((0.0 <= abs_real((double_value(x) - double_value(y)))) and
          (abs_real((double_value(x) - double_value(y))) <= 0x1.p-1075)) ->
         (cond_sub_double(m, x, y) = 3)))))

logic post_cond_sub_double : mode, double, double, double -> int

axiom post_cond_sub_double_axiom1:
  (forall m:mode.
    (forall x:double.
      (forall y:double.
        (forall result:double.
          ((post_cond_sub_double(m, x, y, result) = 1) ->
           (abs_real(div_real((double_value(result) - (double_value(x) - double_value(y))),
           (double_value(x) - double_value(y)))) <= 0x1.p-53))))))

axiom post_cond_sub_double_axiom2:
  (forall m:mode.
    (forall x:double.
      (forall y:double.
        (forall result:double.
          ((post_cond_sub_double(m, x, y, result) = 2) ->
           (double_value(result) = (double_value(x) - double_value(y))))))))

axiom post_cond_sub_double_axiom3:
  (forall m:mode.
    (forall x:double.
      (forall y:double.
        (forall result:double.
          ((post_cond_sub_double(m, x, y, result) = 3) ->
           (double_value(result) = 0.0))))))

predicate double_of_real_post(m: mode, x: real, res: double) =
  ((double_value(res) = round_double(m, x)) and
   ((double_exact(res) = x) and (double_model(res) = x)))

predicate add_double_post(m: mode, x: double, y: double, result: double) =
  ((((abs_real((double_value(x) + double_value(y))) >= 0x1.p-1022) and
     (abs_real((double_value(result) - (double_value(x) + double_value(y)))) <= (0x1.004p-53 * abs_real((double_value(x) + double_value(y)))))) or
    ((abs_real((double_value(x) + double_value(y))) <= 0x1.p-1022) and
     (abs_real((double_value(result) - (double_value(x) + double_value(y)))) <= 0x1.002p-1075))) and
   ((double_exact(result) = (double_exact(x) + double_exact(y))) and
    (double_model(result) = (double_model(x) + double_model(y)))))

predicate sub_double_post(m: mode, x: double, y: double, result: double) =
  ((((abs_real((double_value(x) - double_value(y))) >= 0x1.p-1022) and
     (abs_real((double_value(result) - (double_value(x) - double_value(y)))) <= (0x1.004p-53 * abs_real((double_value(x) - double_value(y)))))) or
    (((0.0 <= abs_real((double_value(x) - double_value(y)))) and
      (abs_real((double_value(x) - double_value(y))) <= 0x1.p-1022)) and
     (abs_real((double_value(result) - (double_value(x) - double_value(y)))) <= 0x1.002p-1075))) and
   ((double_exact(result) = (double_exact(x) - double_exact(y))) and
    (double_model(result) = (double_model(x) - double_model(y)))))

predicate neg_double_post(m: mode, x: double, result: double) =
  ((((abs_real((-double_value(x))) >= 0x1.p-1022) and
     (abs_real(div_real((double_value(result) + double_value(x)),
     double_value(x))) <= 0x1.004p-53)) or
    (((0.0 <= abs_real((-double_value(x)))) and
      (abs_real((-double_value(x))) <= 0x1.p-1022)) and
     (abs_real((double_value(result) + double_value(x))) <= 0x1.002p-1075))) and
   ((double_exact(result) = (-double_exact(x))) and
    (double_model(result) = (-double_model(x)))))

predicate mul_double_post(m: mode, x: double, y: double, result: double) =
  ((((abs_real((double_value(x) * double_value(y))) >= 0x1.p-1022) and
     (abs_real((double_value(result) - (double_value(x) * double_value(y)))) <= (0x1.004p-53 * abs_real((double_value(x) * double_value(y)))))) or
    ((abs_real((double_value(x) * double_value(y))) <= 0x1.p-1022) and
     (abs_real((double_value(result) - (double_value(x) * double_value(y)))) <= 0x1.002p-1075))) and
   ((double_exact(result) = (double_exact(x) * double_exact(y))) and
    (double_model(result) = (double_model(x) * double_model(y)))))

predicate div_double_post(m: mode, x: double, y: double, result: double) =
  ((((abs_real(div_real(double_value(x), double_value(y))) >= 0x1.p-1022) and
     (abs_real((double_value(result) - div_real(double_value(x),
     double_value(y)))) <= (0x1.004p-53 * abs_real(div_real(double_value(x),
     double_value(y)))))) or
    ((abs_real(div_real(double_value(x), double_value(y))) <= 0x1.p-1022) and
     (abs_real((double_value(result) - div_real(double_value(x),
     double_value(y)))) <= 0x1.002p-1075))) and
   ((double_exact(result) = div_real(double_exact(x), double_exact(y))) and
    (double_model(result) = div_real(double_model(x), double_model(y)))))

predicate sqrt_double_post(m: mode, x: double, result: double) =
  ((((abs_real(sqrt_real(double_value(x))) >= 0x1.p-1022) and
     (abs_real((double_value(result) - sqrt_real(double_value(x)))) <= (0x1.004p-53 * abs_real(sqrt_real(double_value(x)))))) or
    ((abs_real(sqrt_real(double_value(x))) <= 0x1.p-1022) and
     (abs_real((double_value(result) - sqrt_real(double_value(x)))) <= 0x1.002p-1075))) and
   ((double_exact(result) = sqrt_real(double_exact(x))) and
    (double_model(result) = sqrt_real(double_model(x)))))

predicate abs_double_post(m: mode, x: double, result: double) =
  ((((abs_real(double_value(x)) >= 0x1.p-1022) and
     (abs_real((double_value(result) - abs_real(double_value(x)))) <= (0x1.004p-53 * abs_real(abs_real(double_value(x)))))) or
    ((abs_real(double_value(x)) <= 0x1.p-1022) and
     (abs_real((double_value(result) - abs_real(double_value(x)))) <= 0x1.002p-1075))) and
   ((double_exact(result) = abs_real(double_exact(x))) and
    (double_model(result) = abs_real(double_model(x)))))

type charP

type padding

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

function l_sign(x_0: real) : int = ite(ge_real_bool(x_0, 0.0), 1, (-1))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

