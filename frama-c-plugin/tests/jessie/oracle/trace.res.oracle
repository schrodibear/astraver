Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only trace.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD trace.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir trace.jessie
[jessie] File trace.jessie/trace.jc written.
[jessie] File trace.jessie/trace.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

tag S = {
  int32 f: 32;
}

type S = [S]

unit trace(S[..] this)
behavior default:
  ensures (C_3 : (this.f == 0));
{  
   {  (C_2 : ((C_1 : this.f) = 0));
      
      (return ())
   }
}

int32 m1(int32 x_3)
  requires (C_10 : (x_3 > 0));
behavior default:
  ensures (C_11 : true);
{  
   (var int32 __retres);
   
   {  
      {  
         (assert for default: (C_4 : ((C_5 : (x_3 >= 0)) &&
                                       (C_6 : (x_3 < 9)))));
         ()
      };
      (C_9 : (__retres = (C_8 : ((C_7 : (x_3 + 1)) :> int32))));
      
      (return __retres)
   }
}

int32 m2(int32 x)
  requires (C_19 : ((C_20 : (0 < x)) &&
                     ((C_22 : (x < 100)) &&
                       ((C_24 : (100 < 200)) && (C_25 : (200 < 300))))));
behavior default:
  ensures (C_26 : ((((C_29 : (0 < x)) && (C_30 : (x < 100))) &&
                     (C_31 : (\result != 0))) &&
                    (C_32 : (\result > 10))));
{  
   (var int32 y);
   
   (var int32 __retres_0);
   
   {  (if (x < 50) then 
      {  (C_17 : (__retres_0 = (C_16 : ((C_15 : (x + 1)) :> int32))));
         
         (goto return_label)
      } else (C_14 : (y = (C_13 : ((C_12 : (x - 1)) :> int32)))));
      (C_18 : (__retres_0 = y));
      (return_label : 
      (return __retres_0))
   }
}

int32 m3(int32 x_1)
  requires (C_35 : ((C_36 : (x_1 >= 0)) && (C_37 : (x_1 < 50))));
behavior default:
  ensures (C_38 : true);
{  
   (var int32 tmp);
   
   {  (C_34 : (tmp = (C_33 : m2(x_1))));
      
      (return tmp)
   }
}

unit m4(int32 x_4)
behavior default:
  ensures (C_47 : true);
{  
   (var int32 y_0);
   
   {  (C_39 : (y_0 = x_4));
      
      {  
         loop 
         behavior default:
           invariant (C_40 : ((C_41 : (0 <= y_0)) && (C_42 : (y_0 <= x_4))));
         variant (C_43 : y_0);
         while (true)
         {  
            {  (if (y_0 > 0) then () else 
               (goto while_0_break));
               (C_46 : (y_0 = (C_45 : ((C_44 : (y_0 - 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      (return ())
   }
}

unit m5(int32 x_0)
behavior default:
  ensures (C_54 : true);
{  
   (var int32 y_1);
   
   {  (C_48 : (y_1 = x_0));
      
      {  
         loop 
         behavior default:
           invariant (C_49 : (y_1 == x_0));
         variant (C_50 : y_1);
         while (true)
         {  
            {  (if (y_1 > 0) then () else 
               (goto while_1_break));
               (C_53 : (y_1 = (C_52 : ((C_51 : (y_1 - 1)) :> int32))))
            }
         };
         (while_1_break : ())
      };
      
      (return ())
   }
}

int8 m6(int8 x_2)
behavior default:
  ensures (C_70 : true);
{  
   (var int8 __retres_1);
   
   {  (C_61 : (x_2 = (C_60 : ((C_59 : ((C_58 : (x_2 :> int32)) +
                                        (C_57 : ((C_56 : ((C_55 : (x_2 :> int32)) +
                                                           1)) :> int32)))) :> int8))));
      (C_65 : (x_2 = (C_64 : ((C_63 : ((C_62 : (x_2 :> int32)) + 1)) :> int8))));
      (C_69 : (__retres_1 = (C_68 : ((C_67 : ((C_66 : (x_2 :> int32)) + 2)) :> int8))));
      
      (return __retres_1)
   }
}

int32 m7(S[..] p_0)
behavior default:
  ensures (C_73 : true);
{  
   (var int32 __retres_2);
   
   {  (C_72 : (__retres_2 = (C_71 : p_0.f)));
      
      (return __retres_2)
   }
}

unit m8(S[..] p)
behavior default:
  assigns p.f;
  ensures (C_76 : (p.f == 0));
{  
   {  (C_75 : ((C_74 : p.f) = 0));
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs trace.jessie/trace.cloc trace.jessie/trace.jc
type S

type char_P

type int32

type int8

type padding

type void_P

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

logic S_of_pointer_address: unit pointer -> S pointer

axiom S_of_pointer_address_of_pointer_addr :
 (forall p:S pointer. (p = S_of_pointer_address(pointer_address(p))))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_S(p:S pointer,
 a:int,
 S_alloc_table:S alloc_table) =
 (offset_min(S_alloc_table, p) <= a)

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_S_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(S_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_S(p:S pointer,
 b:int,
 S_alloc_table:S alloc_table) =
 (offset_max(S_alloc_table, p) >= b)

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_S(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) <= a)
 and (offset_max(S_alloc_table, p) >= b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) <= a)
 and (offset_max(S_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter S_alloc_table : S alloc_table ref

parameter S_tag_table : S tag_table ref

parameter alloc_bitvector_struct_S :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_S(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_S_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_S(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_struct_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_tag_table:S tag_table ref ->
    { } S pointer writes S_alloc_table,S_tag_table
    { (strict_valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table)
      and (alloc_extends(S_alloc_table@, S_alloc_table)
          and (alloc_fresh(S_alloc_table@, result, n)
              and instanceof(S_tag_table, result, S_tag)))) }

parameter alloc_struct_S_requires :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_tag_table:S tag_table ref ->
    { ge_int(n, (0))} S pointer writes S_alloc_table,S_tag_table
    { (strict_valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table)
      and (alloc_extends(S_alloc_table@, S_alloc_table)
          and (alloc_fresh(S_alloc_table@, result, n)
              and instanceof(S_tag_table, result, S_tag)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter m1 : x_3:int32 -> { } int32 { true }

parameter m1_requires :
 x_3:int32 -> { (JC_10: gt_int(integer_of_int32(x_3), (0)))} int32 { true }

parameter m2 :
 x:int32 ->
  { } int32
  { (JC_46:
    ((JC_42: lt_int((0), integer_of_int32(x)))
    and ((JC_43: lt_int(integer_of_int32(x), (100)))
        and ((JC_44: neq_int(integer_of_int32(result), (0)))
            and (JC_45: gt_int(integer_of_int32(result), (10))))))) }

parameter m2_requires :
 x:int32 ->
  { (JC_29:
    ((JC_25: lt_int((0), integer_of_int32(x)))
    and ((JC_26: lt_int(integer_of_int32(x), (100)))
        and ((JC_27: lt_int((100), (200))) and (JC_28: lt_int((200), (300)))))))}
  int32
  { (JC_46:
    ((JC_42: lt_int((0), integer_of_int32(x)))
    and ((JC_43: lt_int(integer_of_int32(x), (100)))
        and ((JC_44: neq_int(integer_of_int32(result), (0)))
            and (JC_45: gt_int(integer_of_int32(result), (10))))))) }

parameter m3 : x_1:int32 -> { } int32 { true }

parameter m3_requires :
 x_1:int32 ->
  { (JC_53:
    ((JC_51: ge_int(integer_of_int32(x_1), (0)))
    and (JC_52: lt_int(integer_of_int32(x_1), (50)))))}
  int32 { true }

parameter m4 : x_4:int32 -> { } unit { true }

parameter m4_requires : x_4:int32 -> { } unit { true }

parameter m5 : x_0:int32 -> { } unit { true }

parameter m5_requires : x_0:int32 -> { } unit { true }

parameter m6 : x_2:int8 -> { } int8 { true }

parameter m6_requires : x_2:int8 -> { } int8 { true }

parameter m7 :
 p_0:S pointer ->
  S_p_0_2_alloc_table:S alloc_table ->
   S_f_p_0_2:(S, int32) memory -> { } int32 { true }

parameter m7_requires :
 p_0:S pointer ->
  S_p_0_2_alloc_table:S alloc_table ->
   S_f_p_0_2:(S, int32) memory -> { } int32 { true }

parameter m8 :
 p:S pointer ->
  S_f_p_3:(S, int32) memory ref ->
   S_p_3_alloc_table:S alloc_table ->
    { } unit reads S_f_p_3 writes S_f_p_3
    { (JC_139:
      ((JC_137: eq_int(integer_of_int32(select(S_f_p_3, p)), (0)))
      and (JC_138:
          not_assigns(S_p_3_alloc_table@, S_f_p_3@, S_f_p_3,
          pset_singleton(p@))))) }

parameter m8_requires :
 p:S pointer ->
  S_f_p_3:(S, int32) memory ref ->
   S_p_3_alloc_table:S alloc_table ->
    { } unit reads S_f_p_3 writes S_f_p_3
    { (JC_139:
      ((JC_137: eq_int(integer_of_int32(select(S_f_p_3, p)), (0)))
      and (JC_138:
          not_assigns(S_p_3_alloc_table@, S_f_p_3@, S_f_p_3,
          pset_singleton(p@))))) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter trace :
 this:S pointer ->
  S_f_this_1:(S, int32) memory ref ->
   S_this_1_alloc_table:S alloc_table ->
    { } unit reads S_f_this_1 writes S_f_this_1
    { (JC_6: eq_int(integer_of_int32(select(S_f_this_1, this)), (0))) }

parameter trace_requires :
 this:S pointer ->
  S_f_this_1:(S, int32) memory ref ->
   S_this_1_alloc_table:S alloc_table ->
    { } unit reads S_f_this_1 writes S_f_this_1
    { (JC_6: eq_int(integer_of_int32(select(S_f_this_1, this)), (0))) }

let m1_ensures_default =
 fun (x_3 : int32) ->
  { (JC_12: gt_int(integer_of_int32(x_3), (0))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     begin
       (assert
       { (JC_24:
         ((JC_22: ge_int(integer_of_int32(x_3), (0)))
         and (JC_23: lt_int(integer_of_int32(x_3), (9))))) };
       void);
      void;
      (C_9:
      begin
        (let jessie_24 = (__retres := (C_8:
                                      (safe_int32_of_integer_ (C_7:
                                                              ((add_int 
                                                                (integer_of_int32 x_3)) (1)))))) in
        void);
       (return := !__retres);
       (raise Return)
      end)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_14: true) }

let m1_safety =
 fun (x_3 : int32) ->
  { (JC_12: gt_int(integer_of_int32(x_3), (0))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     begin
       [ { } unit
         { (JC_20:
           ((JC_18: ge_int(integer_of_int32(x_3), (0)))
           and (JC_19: lt_int(integer_of_int32(x_3), (9))))) } ];
      void;
      (C_9:
      begin
        (let jessie_21 = (__retres := (C_8:
                                      (JC_21:
                                      (int32_of_integer_ (C_7:
                                                         ((add_int (integer_of_int32 x_3)) (1))))))) in
        void);
       (return := !__retres);
       (raise Return)
      end)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let m2_ensures_default =
 fun (x : int32) ->
  { (JC_35:
    ((JC_31: lt_int((0), integer_of_int32(x)))
    and ((JC_32: lt_int(integer_of_int32(x), (100)))
        and ((JC_33: lt_int((100), (200))) and (JC_34: lt_int((200), (300))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let y = ref (any_int32 void) in
     (let __retres_0 = ref (any_int32 void) in
     try
      (let jessie_42 = begin
                         (if ((lt_int_ (integer_of_int32 x)) (50))
                         then
                          (let jessie_37 = (C_17:
                                           begin
                                             (let jessie_36 = (__retres_0 := 
                                                               (C_16:
                                                               (safe_int32_of_integer_ 
                                                                (C_15:
                                                                ((add_int 
                                                                  (integer_of_int32 x)) (1)))))) in
                                             void);
                                            (raise (Return_label_exc void))
                                           end) in
                          void)
                         else
                          (C_14:
                          (let jessie_39 = (y := (C_13:
                                                 (safe_int32_of_integer_ 
                                                  (C_12:
                                                  ((sub_int (integer_of_int32 x)) (1)))))) in
                          void)));
                        (C_18:
                        begin
                          (let jessie_41 = (__retres_0 := !y) in void);
                         (raise (Return_label_exc void))
                        end)
                       end in
      void)
      with
      Return_label_exc jessie_1 ->
      (return_label: begin   (return := !__retres_0); (raise Return) end) end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_41:
    ((JC_37: lt_int((0), integer_of_int32(x)))
    and ((JC_38: lt_int(integer_of_int32(x), (100)))
        and ((JC_39: neq_int(integer_of_int32(result), (0)))
            and (JC_40: gt_int(integer_of_int32(result), (10))))))) }

let m2_safety =
 fun (x : int32) ->
  { (JC_35:
    ((JC_31: lt_int((0), integer_of_int32(x)))
    and ((JC_32: lt_int(integer_of_int32(x), (100)))
        and ((JC_33: lt_int((100), (200))) and (JC_34: lt_int((200), (300))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let y = ref (any_int32 void) in
     (let __retres_0 = ref (any_int32 void) in
     try
      (let jessie_33 = begin
                         (if ((lt_int_ (integer_of_int32 x)) (50))
                         then
                          (let jessie_28 = (C_17:
                                           begin
                                             (let jessie_27 = (__retres_0 := 
                                                               (C_16:
                                                               (JC_49:
                                                               (int32_of_integer_ 
                                                                (C_15:
                                                                ((add_int 
                                                                  (integer_of_int32 x)) (1))))))) in
                                             void);
                                            (raise (Return_label_exc void))
                                           end) in
                          void)
                         else
                          (C_14:
                          (let jessie_30 = (y := (C_13:
                                                 (JC_50:
                                                 (int32_of_integer_ (C_12:
                                                                    ((sub_int 
                                                                    (integer_of_int32 x)) (1))))))) in
                          void)));
                        (C_18:
                        begin
                          (let jessie_32 = (__retres_0 := !y) in void);
                         (raise (Return_label_exc void))
                        end)
                       end in
      void)
      with
      Return_label_exc jessie_1 ->
      (return_label: begin   (return := !__retres_0); (raise Return) end) end));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let m3_ensures_default =
 fun (x_1 : int32) ->
  { (JC_57:
    ((JC_55: ge_int(integer_of_int32(x_1), (0)))
    and (JC_56: lt_int(integer_of_int32(x_1), (50))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp = ref (any_int32 void) in
     (C_34:
     begin
       (let jessie_50 = (tmp := (C_33:
                                (let jessie_49 = x_1 in
                                (JC_64: (m2 jessie_49))))) in
       void);
      (return := !tmp);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_59: true) }

let m3_safety =
 fun (x_1 : int32) ->
  { (JC_57:
    ((JC_55: ge_int(integer_of_int32(x_1), (0)))
    and (JC_56: lt_int(integer_of_int32(x_1), (50))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp = ref (any_int32 void) in
     (C_34:
     begin
       (let jessie_46 = (tmp := (C_33:
                                (let jessie_45 = x_1 in
                                (JC_63: (m2_requires jessie_45))))) in
       void);
      (return := !tmp);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let m4_ensures_default =
 fun (x_4 : int32) ->
  { (JC_68: true) }
  (init:
  try
   begin
     (let y_0 = ref (any_int32 void) in
     (C_39:
     begin
       (let jessie_60 = (y_0 := x_4) in void);
      try
       (let jessie_65 = begin
                          (loop_2:
                          while true do
                          { invariant
                              (JC_83:
                              ((JC_81: le_int((0), integer_of_int32(y_0)))
                              and (JC_82:
                                  le_int(integer_of_int32(y_0),
                                  integer_of_int32(x_4)))))
                             }
                           begin
                             [ { } unit { true } ];
                            try
                             (let jessie_64 = begin
                                                (let jessie_63 = begin
                                                                   (if 
                                                                   ((gt_int_ 
                                                                    (integer_of_int32 !y_0)) (0))
                                                                   then void
                                                                   else
                                                                    (let jessie_61 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                  (C_46:
                                                                  begin
                                                                    (y_0 := 
                                                                    (C_45:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_44:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !y_0)) (1))))));
                                                                   !y_0
                                                                  end)
                                                                 end in
                                                void);
                                               (raise
                                                (Loop_continue_exc
                                                void))
                                              end in
                             void)
                             with
                             Loop_continue_exc jessie_4 ->
                             void end
                           end
                          done);
                         (raise (Goto_while_0_break_exc void))
                        end in
       void)
       with
       Goto_while_0_break_exc jessie_2 ->
       (while_0_break: void) end;
      (raise Return)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_69: true) }

let m4_safety =
 fun (x_4 : int32) ->
  { (JC_68: true) }
  (init:
  try
   begin
     (let y_0 = ref (any_int32 void) in
     (C_39:
     begin
       (let jessie_53 = (y_0 := x_4) in void);
      try
       (let jessie_58 = begin
                          (loop_1:
                          while true do
                          { invariant (JC_77: true)
                            variant integer_of_int32((JC_80 : y_0)) }
                           begin
                             [ { } unit reads y_0
                               { (JC_75:
                                 ((JC_73: le_int((0), integer_of_int32(y_0)))
                                 and (JC_74:
                                     le_int(integer_of_int32(y_0),
                                     integer_of_int32(x_4))))) } ];
                            try
                             (let jessie_57 = begin
                                                (let jessie_56 = begin
                                                                   (if 
                                                                   ((gt_int_ 
                                                                    (integer_of_int32 !y_0)) (0))
                                                                   then void
                                                                   else
                                                                    (let jessie_54 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                  (C_46:
                                                                  begin
                                                                    (y_0 := 
                                                                    (C_45:
                                                                    (JC_79:
                                                                    (int32_of_integer_ 
                                                                    (C_44:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !y_0)) (1)))))));
                                                                   !y_0
                                                                  end)
                                                                 end in
                                                void);
                                               (raise
                                                (Loop_continue_exc
                                                void))
                                              end in
                             void)
                             with
                             Loop_continue_exc jessie_4 ->
                             void end
                           end
                          done);
                         (raise (Goto_while_0_break_exc void))
                        end in
       void)
       with
       Goto_while_0_break_exc jessie_2 ->
       (while_0_break: void) end;
      (raise Return)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let m5_ensures_default =
 fun (x_0 : int32) ->
  { (JC_90: true) }
  (init:
  try
   begin
     (let y_1 = ref (any_int32 void) in
     (C_48:
     begin
       (let jessie_74 = (y_1 := x_0) in void);
      try
       (let jessie_79 = begin
                          (loop_4:
                          while true do
                          { invariant
                              (JC_101:
                              eq_int(integer_of_int32(y_1),
                              integer_of_int32(x_0)))
                             }
                           begin
                             [ { } unit { true } ];
                            try
                             (let jessie_78 = begin
                                                (let jessie_77 = begin
                                                                   (if 
                                                                   ((gt_int_ 
                                                                    (integer_of_int32 !y_1)) (0))
                                                                   then void
                                                                   else
                                                                    (let jessie_75 = 
                                                                    (raise
                                                                    (Goto_while_1_break_exc
                                                                    void)) in
                                                                    void));
                                                                  (C_53:
                                                                  begin
                                                                    (y_1 := 
                                                                    (C_52:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_51:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !y_1)) (1))))));
                                                                   !y_1
                                                                  end)
                                                                 end in
                                                void);
                                               (raise
                                                (Loop_continue_exc
                                                void))
                                              end in
                             void)
                             with
                             Loop_continue_exc jessie_7 ->
                             void end
                           end
                          done);
                         (raise (Goto_while_1_break_exc void))
                        end in
       void)
       with
       Goto_while_1_break_exc jessie_5 ->
       (while_1_break: void) end;
      (raise Return)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_91: true) }

let m5_safety =
 fun (x_0 : int32) ->
  { (JC_90: true) }
  (init:
  try
   begin
     (let y_1 = ref (any_int32 void) in
     (C_48:
     begin
       (let jessie_67 = (y_1 := x_0) in void);
      try
       (let jessie_72 = begin
                          (loop_3:
                          while true do
                          { invariant (JC_97: true)
                            variant integer_of_int32((JC_100 : y_1)) }
                           begin
                             [ { } unit reads y_1
                               { (JC_95:
                                 eq_int(integer_of_int32(y_1),
                                 integer_of_int32(x_0))) } ];
                            try
                             (let jessie_71 = begin
                                                (let jessie_70 = begin
                                                                   (if 
                                                                   ((gt_int_ 
                                                                    (integer_of_int32 !y_1)) (0))
                                                                   then void
                                                                   else
                                                                    (let jessie_68 = 
                                                                    (raise
                                                                    (Goto_while_1_break_exc
                                                                    void)) in
                                                                    void));
                                                                  (C_53:
                                                                  begin
                                                                    (y_1 := 
                                                                    (C_52:
                                                                    (JC_99:
                                                                    (int32_of_integer_ 
                                                                    (C_51:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !y_1)) (1)))))));
                                                                   !y_1
                                                                  end)
                                                                 end in
                                                void);
                                               (raise
                                                (Loop_continue_exc
                                                void))
                                              end in
                             void)
                             with
                             Loop_continue_exc jessie_7 ->
                             void end
                           end
                          done);
                         (raise (Goto_while_1_break_exc void))
                        end in
       void)
       with
       Goto_while_1_break_exc jessie_5 ->
       (while_1_break: void) end;
      (raise Return)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let m6_ensures_default =
 fun (x_2 : int8) ->
  { (JC_108: true) }
  (let mutable_x_2 = ref x_2 in
  (init:
  (let return = ref (any_int8 void) in
  try
   begin
     (let __retres_1 = ref (any_int8 void) in
     (C_61:
     begin
       (let jessie_88 = (mutable_x_2 := (C_60:
                                        (safe_int8_of_integer_ (C_59:
                                                               ((add_int 
                                                                 (integer_of_int32 
                                                                  (C_58:
                                                                  (safe_int32_of_integer_ 
                                                                   (integer_of_int8 !mutable_x_2))))) 
                                                                (integer_of_int32 
                                                                 (C_57:
                                                                 (safe_int32_of_integer_ 
                                                                  (C_56:
                                                                  ((add_int 
                                                                    (integer_of_int32 
                                                                    (C_55:
                                                                    (safe_int32_of_integer_ 
                                                                    (integer_of_int8 !mutable_x_2))))) (1))))))))))) in
       void);
      (C_65:
      begin
        (let jessie_90 = (mutable_x_2 := (C_64:
                                         (safe_int8_of_integer_ (C_63:
                                                                ((add_int 
                                                                  (integer_of_int32 
                                                                   (C_62:
                                                                   (safe_int32_of_integer_ 
                                                                    (integer_of_int8 !mutable_x_2))))) (1)))))) in
        void);
       (C_69:
       begin
         (let jessie_92 = (__retres_1 := (C_68:
                                         (safe_int8_of_integer_ (C_67:
                                                                ((add_int 
                                                                  (integer_of_int32 
                                                                   (C_66:
                                                                   (safe_int32_of_integer_ 
                                                                    (integer_of_int8 !mutable_x_2))))) (2)))))) in
         void);
        (return := !__retres_1);
        (raise Return)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !return end)))
  { (JC_109: true) }

let m6_safety =
 fun (x_2 : int8) ->
  { (JC_108: true) }
  (let mutable_x_2 = ref x_2 in
  (init:
  (let return = ref (any_int8 void) in
  try
   begin
     (let __retres_1 = ref (any_int8 void) in
     (C_61:
     begin
       (let jessie_81 = (mutable_x_2 := (C_60:
                                        (JC_116:
                                        (int8_of_integer_ (C_59:
                                                          ((add_int (integer_of_int32 
                                                                    (C_58:
                                                                    (JC_113:
                                                                    (int32_of_integer_ 
                                                                    (integer_of_int8 !mutable_x_2)))))) 
                                                           (integer_of_int32 
                                                            (C_57:
                                                            (JC_115:
                                                            (int32_of_integer_ 
                                                             (C_56:
                                                             ((add_int 
                                                               (integer_of_int32 
                                                                (C_55:
                                                                (JC_114:
                                                                (int32_of_integer_ 
                                                                 (integer_of_int8 !mutable_x_2)))))) (1))))))))))))) in
       void);
      (C_65:
      begin
        (let jessie_83 = (mutable_x_2 := (C_64:
                                         (JC_118:
                                         (int8_of_integer_ (C_63:
                                                           ((add_int 
                                                             (integer_of_int32 
                                                              (C_62:
                                                              (JC_117:
                                                              (int32_of_integer_ 
                                                               (integer_of_int8 !mutable_x_2)))))) (1))))))) in
        void);
       (C_69:
       begin
         (let jessie_85 = (__retres_1 := (C_68:
                                         (JC_120:
                                         (int8_of_integer_ (C_67:
                                                           ((add_int 
                                                             (integer_of_int32 
                                                              (C_66:
                                                              (JC_119:
                                                              (int32_of_integer_ 
                                                               (integer_of_int8 !mutable_x_2)))))) (2))))))) in
         void);
        (return := !__retres_1);
        (raise Return)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !return end)))
  { true }

let m7_ensures_default =
 fun (p_0 : S pointer) (S_p_0_2_alloc_table : S alloc_table) (S_f_p_0_2 : (S, int32) memory) ->
  { (JC_124: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_2 = ref (any_int32 void) in
     (C_72:
     begin
       (let jessie_98 = (__retres_2 := (C_71: ((safe_acc_ S_f_p_0_2) p_0))) in
       void);
      (return := !__retres_2);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_125: true) }

let m7_safety =
 fun (p_0 : S pointer) (S_p_0_2_alloc_table : S alloc_table) (S_f_p_0_2 : (S, int32) memory) ->
  { (JC_124: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_2 = ref (any_int32 void) in
     (C_72:
     begin
       (let jessie_95 = (__retres_2 := (C_71:
                                       (JC_129:
                                       (((acc_ S_p_0_2_alloc_table) S_f_p_0_2) p_0)))) in
       void);
      (return := !__retres_2);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let m8_ensures_default =
 fun (p : S pointer) (S_f_p_3 : (S, int32) memory ref) (S_p_3_alloc_table : S alloc_table) ->
  { (JC_133: true) }
  (init:
  try
   begin
     (C_75:
     begin
       (let jessie_111 = (let jessie_107 = (safe_int32_of_integer_ (0)) in
                         (let jessie_110 = p in
                         (((safe_upd_ S_f_p_3) jessie_110) jessie_107))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_136:
    ((JC_134: eq_int(integer_of_int32(select(S_f_p_3, p)), (0)))
    and (JC_135:
        not_assigns(S_p_3_alloc_table@, S_f_p_3@, S_f_p_3,
        pset_singleton(p@))))) }

let m8_safety =
 fun (p : S pointer) (S_f_p_3 : (S, int32) memory ref) (S_p_3_alloc_table : S alloc_table) ->
  { (JC_133: true) }
  (init:
  try
   begin
     (C_75:
     begin
       (let jessie_105 = (let jessie_101 = (safe_int32_of_integer_ (0)) in
                         (let jessie_104 = p in
                         (JC_142:
                         ((((upd_ S_p_3_alloc_table) S_f_p_3) jessie_104) jessie_101)))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let trace_ensures_default =
 fun (this : S pointer) (S_f_this_1 : (S, int32) memory ref) (S_this_1_alloc_table : S alloc_table) ->
  { (JC_4: true) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_19 = (let jessie_15 = (safe_int32_of_integer_ (0)) in
                        (let jessie_18 = this in
                        (((safe_upd_ S_f_this_1) jessie_18) jessie_15))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_5: eq_int(integer_of_int32(select(S_f_this_1, this)), (0))) }

let trace_safety =
 fun (this : S pointer) (S_f_this_1 : (S, int32) memory ref) (S_this_1_alloc_table : S alloc_table) ->
  { (JC_4: true) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_13 = (let jessie_9 = (safe_int32_of_integer_ (0)) in
                        (let jessie_12 = this in
                        (JC_9:
                        ((((upd_ S_this_1_alloc_table) S_f_this_1) jessie_12) jessie_9)))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C trace.jessie --quiet -f trace.makefile project
why --project [...] why/trace.why
<project name="trace" context="why/trace_ctx.why">
  <function name="Function trace">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/trace_po53.why">
      <location file = "PPCHOME/tests/jessie/trace.jessie/trace.jc" line = "38" begin = "14" end = "32"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/trace_po54.why">
      <location file = "PPCHOME/tests/jessie/trace.jessie/trace.jc" line = "38" begin = "14" end = "32"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/trace_po52.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "12" begin = "12" end = "24"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function m8">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/trace_po50.why">
      <location file = "PPCHOME/tests/jessie/trace.jessie/trace.jc" line = "187" begin = "15" end = "31"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/trace_po51.why">
      <location file = "PPCHOME/tests/jessie/trace.jessie/trace.jc" line = "187" begin = "15" end = "31"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/trace_po48.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "122" begin = "12" end = "21"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/trace_po49.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "124" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function m7">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/trace_po46.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "113" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/trace_po47.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "113" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
  <function name="Function m6">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/trace_po30.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "101" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po31.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "101" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po32.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "101" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po33.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "101" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po34.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "101" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po35.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "101" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po36.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "101" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po37.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "101" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po38.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "102" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po39.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "102" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po40.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "102" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po41.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "102" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po42.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "103" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po43.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "103" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po44.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "103" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po45.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "103" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function m5">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/trace_po26.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "91" begin = "4" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po27.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "91" begin = "4" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po28.why">
      <location file = "why/trace.why" line = "955" begin = "36" end = "68"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/trace_po29.why">
      <location file = "why/trace.why" line = "955" begin = "36" end = "68"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/trace_po24.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "87" begin = "21" end = "27"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/trace_po25.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "87" begin = "21" end = "27"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    </behavior>
  </function>
  <function name="Function m4">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/trace_po20.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "74" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po21.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "74" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po22.why">
      <location file = "why/trace.why" line = "810" begin = "36" end = "67"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/trace_po23.why">
      <location file = "why/trace.why" line = "810" begin = "36" end = "67"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/trace_po16.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "69" begin = "21" end = "27"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/trace_po17.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "69" begin = "31" end = "37"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/trace_po18.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "69" begin = "21" end = "27"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/trace_po19.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "69" begin = "31" end = "37"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    </behavior>
  </function>
  <function name="Function m3">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/trace_po12.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "58" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/trace_po13.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "58" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/trace_po14.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "58" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/trace_po15.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "58" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    </behavior>
  </function>
  <function name="Function m2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/trace_po8.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "43" begin = "4" end = "10"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po9.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "43" begin = "4" end = "10"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po10.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "45" begin = "4" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po11.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "45" begin = "4" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/trace_po5.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "38" begin = "16" end = "23"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/trace_po6.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "38" begin = "27" end = "39"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/trace_po7.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "38" begin = "43" end = "55"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function m1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/trace_po3.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "28" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/trace_po4.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "28" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/trace_po1.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "27" begin = "13" end = "19"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/trace_po2.why">
      <location file = "PPCHOME/tests/jessie/trace.c" line = "27" begin = "23" end = "28"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type S

type char_P

type int32

type int8

type padding

type void_P

logic S_tag : S tag_id

axiom S_int: (int_of_tag(S_tag) = 1)

logic S_of_pointer_address : unit pointer -> S pointer

axiom S_of_pointer_address_of_pointer_addr:
  (forall p:S pointer. (p = S_of_pointer_address(pointer_address(p))))

axiom S_parenttag_bottom: parenttag(S_tag, bottom_tag)

axiom S_tags:
  (forall x:S pointer.
    (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_S(p: S pointer, a: int,
  S_alloc_table: S alloc_table) = (offset_min(S_alloc_table, p) <= a)

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of_S_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(S_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_S(p: S pointer, b: int,
  S_alloc_table: S alloc_table) = (offset_max(S_alloc_table, p) >= b)

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table) =
  ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table) =
  ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_S(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table) =
  ((offset_min(S_alloc_table, p) <= a) and (offset_max(S_alloc_table,
   p) >= b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table) =
  ((offset_min(S_alloc_table, p) <= a) and (offset_max(S_alloc_table,
   p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

