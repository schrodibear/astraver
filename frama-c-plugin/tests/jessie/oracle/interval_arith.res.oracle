Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -jessie -jessie-gen-only interval_arith.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -dD interval_arith.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir interval_arith.jessie
[jessie] File interval_arith.jessie/interval_arith.jc written.
[jessie] File interval_arith.jessie/interval_arith.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol
# FloatModel = full
# FloatRoundingMode = down

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

double min(double x_0, double y_0)
  requires (C_8 : ((C_9 : (! \double_is_NaN(x_0))) &&
                    (C_10 : (! \double_is_NaN(y_0)))));
behavior default:
  ensures (C_3 : (((C_5 : \le_double(\result, \at(x_0,Old))) &&
                    (C_6 : \le_double(\result, \at(y_0,Old)))) &&
                   (C_7 : (\eq_double(\result, \at(x_0,Old)) ||
                            \eq_double(\result, \at(y_0,Old))))));
{  
   (var double tmp);
   
   {  (if (x_0 < y_0) then (C_2 : (tmp = x_0)) else (C_1 : (tmp = y_0)));
      
      (return tmp)
   }
}

double max(double x, double y)
  requires (C_18 : ((C_19 : (! \double_is_NaN(x))) &&
                     (C_20 : (! \double_is_NaN(y)))));
behavior default:
  ensures (C_13 : (((C_15 : \le_double(\at(x,Old), \result)) &&
                     (C_16 : \le_double(\at(y,Old), \result))) &&
                    (C_17 : (\eq_double(\result, \at(x,Old)) ||
                              \eq_double(\result, \at(y,Old))))));
{  
   (var double tmp_0);
   
   {  (if (x > y) then (C_12 : (tmp_0 = x)) else (C_11 : (tmp_0 = y)));
      
      (return tmp_0)
   }
}

predicate dif_sign(double x, double y) =
(\double_sign(x) != \double_sign(y))

predicate sam_sign(double x_0, double y_0) =
(\double_sign(x_0) == \double_sign(y_0))

predicate double_le_real(double x_1, real y_1) =
((\double_is_finite(x_1) && ((x_1 :> real) <= y_1)) ||
  \double_is_minus_infinity(x_1))

predicate real_le_double(real x_2, double y_2) =
((\double_is_finite(y_2) && (x_2 <= (y_2 :> real))) ||
  \double_is_plus_infinity(y_2))

predicate in_interval(real a, double l, double u) =
(double_le_real(l, a) && real_le_double(a, u))

double mul_dn(double x_1, double y_1)
  requires (C_24 : ((((C_27 : (! \double_is_NaN(x_1))) &&
                       (C_28 : (! \double_is_NaN(y_1)))) &&
                      (C_29 : (\double_is_infinite(x_1) ==>
                                (((y_1 :> real) != 0.0) &&
                                  dif_sign(x_1, y_1))))) &&
                     (C_30 : (\double_is_infinite(y_1) ==>
                               (((x_1 :> real) != 0.0) && dif_sign(x_1, y_1))))));
behavior default:
  assigns \nothing;
  ensures (C_23 : double_le_real(\result,
                                 ((\at(x_1,Old) :> real) *
                                   (\at(y_1,Old) :> real))));
{  
   (var double z);
   
   {  (C_22 : (z = (C_21 : (x_1 * y_1))));
      
      (return z)
   }
}

double mul_up(double x_2, double y_2)
  requires (C_51 : ((((((C_56 : (! \double_is_NaN(x_2))) &&
                         (C_57 : (! \double_is_NaN(y_2)))) &&
                        (C_58 : ((\double_is_infinite(x_2) ||
                                   \double_is_infinite(y_2)) ==>
                                  sam_sign(x_2, y_2)))) &&
                       (C_59 : ((\double_is_infinite(x_2) &&
                                  \double_is_finite(y_2)) ==>
                                 (((y_2 :> real) != 0.0) &&
                                   (\real_abs((y_2 :> real)) >= 0x1.0p-1074))))) &&
                      (C_60 : ((\double_is_infinite(y_2) &&
                                 \double_is_finite(x_2)) ==>
                                ((x_2 :> real) != 0.0)))) &&
                     (C_61 : ((((\double_is_finite(x_2) &&
                                  \double_is_finite(y_2)) &&
                                 (! \no_overflow_double(\Down(),
                                                        (- (y_2 :> real))))) &&
                                (\double_sign(y_2) == \Positive())) ==>
                               ((x_2 :> real) > 0.0)))));
behavior default:
  ensures (C_50 : real_le_double(((\at(x_2,Old) :> real) *
                                   (\at(y_2,Old) :> real)),
                                 \result));
{  
   (var double a);
   
   (var double b);
   
   (var double z_0);
   
   {  (C_32 : (a = (C_31 : (- y_2))));
      (C_34 : (b = (C_33 : (x_2 * a))));
      (C_36 : (z_0 = (C_35 : (- b))));
      
      {  
         (assert for default: (C_37 : (jessie : ((\double_is_infinite(
                                                   x_2) ||
                                                   \double_is_infinite(
                                                   y_2)) ==>
                                                  real_le_double(((x_2 :> real) *
                                                                   (y_2 :> real)),
                                                                 z_0)))));
         ()
      };
      
      {  
         (assert for default: (C_38 : (jessie : ((\double_is_finite(x_2) &&
                                                   \double_is_infinite(
                                                   y_2)) ==>
                                                  real_le_double(((x_2 :> real) *
                                                                   (y_2 :> real)),
                                                                 z_0)))));
         ()
      };
      
      {  
         (assert for default: (C_39 : (jessie : (((\double_is_infinite(
                                                    x_2) &&
                                                    \double_is_finite(
                                                    y_2)) &&
                                                   \no_overflow_double(
                                                   \Down(), (- (y_2 :> real)))) ==>
                                                  real_le_double(((x_2 :> real) *
                                                                   (y_2 :> real)),
                                                                 z_0)))));
         ()
      };
      
      {  
         (assert for default: (C_40 : (jessie : (((\double_is_infinite(
                                                    x_2) &&
                                                    \double_is_finite(
                                                    y_2)) &&
                                                   (! \no_overflow_double(
                                                   \Down(), (- (y_2 :> real))))) ==>
                                                  real_le_double(((x_2 :> real) *
                                                                   (y_2 :> real)),
                                                                 z_0)))));
         ()
      };
      
      {  
         (assert for default: (C_41 : (jessie : ((\double_is_infinite(
                                                   x_2) &&
                                                   \double_is_infinite(
                                                   y_2)) ==>
                                                  real_le_double(((x_2 :> real) *
                                                                   (y_2 :> real)),
                                                                 z_0)))));
         ()
      };
      
      {  
         (assert for default: (C_42 : (jessie : (((((\double_is_finite(
                                                      x_2) &&
                                                      \double_is_finite(
                                                      y_2)) &&
                                                     \no_overflow_double(
                                                     \Down(),
                                                     (- (y_2 :> real)))) &&
                                                    \no_overflow_double(
                                                    \Down(),
                                                    ((x_2 :> real) *
                                                      (a :> real)))) &&
                                                   (! \no_overflow_double(
                                                   \Down(), (- (b :> real))))) ==>
                                                  real_le_double(((x_2 :> real) *
                                                                   (y_2 :> real)),
                                                                 z_0)))));
         ()
      };
      
      {  
         (assert for default: (C_43 : (jessie : ((((\double_is_finite(
                                                     x_2) &&
                                                     \double_is_finite(
                                                     y_2)) &&
                                                    \no_overflow_double(
                                                    \Down(),
                                                    (- (y_2 :> real)))) &&
                                                   (! \no_overflow_double(
                                                   \Down(),
                                                   ((x_2 :> real) *
                                                     (a :> real))))) ==>
                                                  real_le_double(((x_2 :> real) *
                                                                   (y_2 :> real)),
                                                                 z_0)))));
         ()
      };
      
      {  
         (assert for default: (C_44 : (jessie : ((((\double_is_finite(
                                                     x_2) &&
                                                     \double_is_finite(
                                                     y_2)) &&
                                                    (! \no_overflow_double(
                                                    \Down(),
                                                    (- (y_2 :> real))))) &&
                                                   (\double_sign(y_2) ==
                                                     \Positive())) ==>
                                                  real_le_double(((x_2 :> real) *
                                                                   (y_2 :> real)),
                                                                 z_0)))));
         ()
      };
      
      {  
         (assert for default: (C_45 : (jessie : (((((\double_is_finite(
                                                      x_2) &&
                                                      \double_is_finite(
                                                      y_2)) &&
                                                     (! \no_overflow_double(
                                                     \Down(),
                                                     (- (y_2 :> real))))) &&
                                                    (\double_sign(y_2) ==
                                                      \Negative())) &&
                                                   (! \no_overflow_double(
                                                   \Down(),
                                                   ((x_2 :> real) *
                                                     (a :> real))))) ==>
                                                  real_le_double(((x_2 :> real) *
                                                                   (y_2 :> real)),
                                                                 z_0)))));
         ()
      };
      
      {  
         (assert for default: (C_46 : (jessie : ((((((\double_is_finite(
                                                       x_2) &&
                                                       \double_is_finite(
                                                       y_2)) &&
                                                      (! \no_overflow_double(
                                                      \Down(),
                                                      (- (y_2 :> real))))) &&
                                                     (\double_sign(y_2) ==
                                                       \Negative())) &&
                                                    \no_overflow_double(
                                                    \Down(),
                                                    ((x_2 :> real) *
                                                      (a :> real)))) &&
                                                   (! \no_overflow_double(
                                                   \Down(), (- (b :> real))))) ==>
                                                  real_le_double(((x_2 :> real) *
                                                                   (y_2 :> real)),
                                                                 z_0)))));
         ()
      };
      
      {  
         (assert for default: (C_47 : (jessie : ((((((\double_is_finite(
                                                       x_2) &&
                                                       \double_is_finite(
                                                       y_2)) &&
                                                      (! \no_overflow_double(
                                                      \Down(),
                                                      (- (y_2 :> real))))) &&
                                                     (\double_sign(y_2) ==
                                                       \Negative())) &&
                                                    \no_overflow_double(
                                                    \Down(),
                                                    ((x_2 :> real) *
                                                      (a :> real)))) &&
                                                   \no_overflow_double(
                                                   \Down(), (- (b :> real)))) ==>
                                                  real_le_double(((x_2 :> real) *
                                                                   (y_2 :> real)),
                                                                 z_0)))));
         ()
      };
      
      {  
         (assert for default: (C_48 : (jessie : ((((((\double_is_finite(
                                                       x_2) &&
                                                       \double_is_finite(
                                                       y_2)) &&
                                                      \no_overflow_double(
                                                      \Down(),
                                                      (- (y_2 :> real)))) &&
                                                     \no_overflow_double(
                                                     \Down(),
                                                     ((x_2 :> real) *
                                                       (a :> real)))) &&
                                                    \no_overflow_double(
                                                    \Down(), (- (b :> real)))) &&
                                                   ((x_2 :> real) > 0.0)) ==>
                                                  (\double_is_finite(
                                                    z_0) &&
                                                    real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                   z_0))))));
         ()
      };
      
      {  
         (assert for default: (C_49 : (jessie : ((((((\double_is_finite(
                                                       x_2) &&
                                                       \double_is_finite(
                                                       y_2)) &&
                                                      \no_overflow_double(
                                                      \Down(),
                                                      (- (y_2 :> real)))) &&
                                                     \no_overflow_double(
                                                     \Down(),
                                                     ((x_2 :> real) *
                                                       (a :> real)))) &&
                                                    \no_overflow_double(
                                                    \Down(), (- (b :> real)))) &&
                                                   ((x_2 :> real) < 0.0)) ==>
                                                  (\double_is_finite(
                                                    z_0) &&
                                                    real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                   z_0))))));
         ()
      };
      
      {  
         (return z_0)
      }
   }
}

double zl;

double zu;

predicate is_interval(double xl, double xu) =
((\double_is_finite(xl) || \double_is_minus_infinity(xl)) &&
  (\double_is_finite(xu) || \double_is_plus_infinity(xu)))

unit add(double xl, double xu, double yl, double yu)
  requires (C_71 : ((C_72 : is_interval(xl, xu)) &&
                     (C_73 : is_interval(yl, yu))));
behavior default:
  ensures (C_68 : ((C_69 : is_interval(zl, zu)) &&
                    (C_70 : (\forall real a_0;
                              (\forall real b;
                                ((in_interval(a_0, \at(xl,Old), \at(xu,Old)) &&
                                   in_interval(b, \at(yl,Old), \at(yu,Old))) ==>
                                  in_interval((a_0 + b), zl, zu)))))));
{  
   {  (C_63 : (zl = (C_62 : (xl + yl))));
      (C_67 : (zu = (C_66 : (- (C_65 : ((C_64 : (- xu)) - yu))))));
      
      (return ())
   }
}

unit mul(double xl_0, double xu_0, double yl_0, double yu_0)
  requires (C_129 : ((C_130 : is_interval(xl_0, xu_0)) &&
                      (C_131 : is_interval(yl_0, yu_0))));
behavior default:
  ensures (C_126 : ((C_127 : is_interval(zl, zu)) &&
                     (C_128 : (\forall real a_1;
                                (\forall real b_0;
                                  ((in_interval(a_1, \at(xl_0,Old),
                                                \at(xu_0,Old)) &&
                                     in_interval(b_0, \at(yl_0,Old),
                                                 \at(yu_0,Old))) ==>
                                    in_interval((a_1 * b_0), zl, zu)))))));
{  
   (var double tmp_1);
   
   (var double tmp_0_0);
   
   (var double tmp_1_0);
   
   (var double tmp_2);
   
   {  (if (xl_0 < (0.0 :> double)) then (if (xu_0 > (0.0 :> double)) then 
                                        (if (yl_0 < (0.0 :> double)) then 
                                        (if (yu_0 > (0.0 :> double)) then 
                                        {  
                                           {  (C_115 : (tmp_1 = (C_114 : mul_dn(
                                                                xu_0, yl_0))));
                                              (C_117 : (tmp_0_0 = (C_116 : mul_dn(
                                                                  xl_0, yu_0))))
                                           };
                                           (C_119 : (zl = (C_118 : min(
                                                          tmp_0_0, tmp_1))));
                                           
                                           {  (C_121 : (tmp_1_0 = (C_120 : mul_up(
                                                                  xu_0, yu_0))));
                                              (C_123 : (tmp_2 = (C_122 : mul_up(
                                                                xl_0, yl_0))))
                                           };
                                           (C_125 : (zu = (C_124 : max(
                                                          tmp_2, tmp_1_0))))
                                        } else 
                                        {  (C_111 : (zl = (C_110 : mul_dn(
                                                          xu_0, yl_0))));
                                           (C_113 : (zu = (C_112 : mul_up(
                                                          xl_0, yl_0))))
                                        }) else (if (yu_0 > (0.0 :> double)) then 
                                                {  (C_107 : (zl = (C_106 : mul_dn(
                                                                  xl_0, yu_0))));
                                                   (C_109 : (zu = (C_108 : mul_up(
                                                                  xu_0, yu_0))))
                                                } else 
                                                {  (C_104 : (zl = (0.0 :> double)));
                                                   (C_105 : (zu = (0.0 :> double)))
                                                })) else (if (yl_0 <
                                                               (0.0 :> double)) then 
                                                         (if (yu_0 >
                                                               (0.0 :> double)) then 
                                                         {  (C_101 : (zl = 
                                                            (C_100 : mul_dn(
                                                            xl_0, yu_0))));
                                                            (C_103 : (zu = 
                                                            (C_102 : mul_up(
                                                            xl_0, yl_0))))
                                                         } else 
                                                         {  (C_97 : (zl = 
                                                            (C_96 : mul_dn(
                                                            xu_0, yu_0))));
                                                            (C_99 : (zu = 
                                                            (C_98 : mul_up(
                                                            xl_0, yl_0))))
                                                         }) else (if 
                                                                 (yu_0 >
                                                                   (0.0 :> double)) then 
                                                                 {  (C_93 : (zl = 
                                                                    (C_92 : mul_dn(
                                                                    xl_0,
                                                                    yu_0))));
                                                                    (C_95 : (zu = 
                                                                    (C_94 : mul_up(
                                                                    xu_0,
                                                                    yl_0))))
                                                                 } else 
                                                                 {  (C_90 : (zl = (0.0 :> double)));
                                                                    (C_91 : (zu = (0.0 :> double)))
                                                                 }))) else 
      (if (xu_0 > (0.0 :> double)) then (if (yl_0 < (0.0 :> double)) then 
                                        (if (yu_0 > (0.0 :> double)) then 
                                        {  (C_87 : (zl = (C_86 : mul_dn(
                                                         xu_0, yl_0))));
                                           (C_89 : (zu = (C_88 : mul_up(
                                                         xu_0, yu_0))))
                                        } else 
                                        {  (C_83 : (zl = (C_82 : mul_dn(
                                                         xu_0, yl_0))));
                                           (C_85 : (zu = (C_84 : mul_up(
                                                         xl_0, yu_0))))
                                        }) else (if (yu_0 > (0.0 :> double)) then 
                                                {  (C_79 : (zl = (C_78 : mul_dn(
                                                                 xl_0, yl_0))));
                                                   (C_81 : (zu = (C_80 : mul_up(
                                                                 xu_0, yu_0))))
                                                } else 
                                                {  (C_76 : (zl = (0.0 :> double)));
                                                   (C_77 : (zu = (0.0 :> double)))
                                                })) else 
      {  (C_74 : (zl = (0.0 :> double)));
         (C_75 : (zu = (0.0 :> double)))
      }));
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs interval_arith.jessie/interval_arith.cloc interval_arith.jessie/interval_arith.jc
type charP

type int8

type padding

type uint8

type unsigned_charP

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

predicate dif_sign(x_2:double, y_1:double) =
 (double_sign(x_2) <> double_sign(y_1))

predicate double_le_real(x_1_0:double, y_1_0:real) =
 ((double_is_finite(x_1_0) and le_real(double_value(x_1_0), y_1_0))
 or double_is_minus_infinity(x_1_0))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

predicate real_le_double(x_2_0:real, y_2:double) =
 ((double_is_finite(y_2) and le_real(x_2_0, double_value(y_2)))
 or double_is_plus_infinity(y_2))

predicate in_interval(a:real, l:double, u:double) =
 (double_le_real(l, a) and real_le_double(a, u))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate is_interval(xl:double, xu:double) =
 ((double_is_finite(xl) or double_is_minus_infinity(xl))
 and (double_is_finite(xu) or double_is_plus_infinity(xu)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate sam_sign(x_0_0:double, y_0_0:double) =
 (double_sign(x_0_0) = double_sign(y_0_0))

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter zu : double ref

parameter zl : double ref

parameter add :
 xl_0:double ->
  xu_0:double ->
   yl:double ->
    yu:double ->
     { } unit reads zl,zu writes zl,zu
     { (JC_<somenum>:
       ((JC_<somenum>: is_interval(zl, zu))
       and (JC_<somenum>:
           (forall a_0_0:real.
            (forall b_0:real.
             ((in_interval(a_0_0, xl_0, xu_0) and in_interval(b_0, yl, yu)) ->
              in_interval(add_real(a_0_0, b_0), zl, zu))))))) }

parameter add_requires :
 xl_0:double ->
  xu_0:double ->
   yl:double ->
    yu:double ->
     { (JC_<somenum>:
       ((JC_<somenum>: is_interval(xl_0, xu_0)) and (JC_<somenum>: is_interval(yl, yu))))}
     unit reads zl,zu writes zl,zu
     { (JC_<somenum>:
       ((JC_<somenum>: is_interval(zl, zu))
       and (JC_<somenum>:
           (forall a_0_0:real.
            (forall b_0:real.
             ((in_interval(a_0_0, xl_0, xu_0) and in_interval(b_0, yl, yu)) ->
              in_interval(add_real(a_0_0, b_0), zl, zu))))))) }

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter max :
 x_1:double ->
  y:double ->
   { } double
   { (JC_<somenum>:
     ((JC_<somenum>: le_double_full(x_1, result))
     and ((JC_<somenum>: le_double_full(y, result))
         and (JC_<somenum>:
             (eq_double_full(result, x_1) or eq_double_full(result, y)))))) }

parameter max_requires :
 x_1:double ->
  y:double ->
   { (JC_<somenum>:
     ((JC_<somenum>: (not double_is_NaN(x_1))) and (JC_<somenum>: (not double_is_NaN(y)))))}
   double
   { (JC_<somenum>:
     ((JC_<somenum>: le_double_full(x_1, result))
     and ((JC_<somenum>: le_double_full(y, result))
         and (JC_<somenum>:
             (eq_double_full(result, x_1) or eq_double_full(result, y)))))) }

parameter min :
 x_0:double ->
  y_0:double ->
   { } double
   { (JC_<somenum>:
     ((JC_<somenum>: le_double_full(result, x_0))
     and ((JC_<somenum>: le_double_full(result, y_0))
         and (JC_<somenum>:
             (eq_double_full(result, x_0) or eq_double_full(result, y_0)))))) }

parameter min_requires :
 x_0:double ->
  y_0:double ->
   { (JC_<somenum>:
     ((JC_<somenum>: (not double_is_NaN(x_0))) and (JC_<somenum>: (not double_is_NaN(y_0)))))}
   double
   { (JC_<somenum>:
     ((JC_<somenum>: le_double_full(result, x_0))
     and ((JC_<somenum>: le_double_full(result, y_0))
         and (JC_<somenum>:
             (eq_double_full(result, x_0) or eq_double_full(result, y_0)))))) }

parameter mul :
 xl_0_0:double ->
  xu_0_0:double ->
   yl_0:double ->
    yu_0:double ->
     { } unit reads zl,zu writes zl,zu
     { (JC_<somenum>:
       ((JC_<somenum>: is_interval(zl, zu))
       and (JC_<somenum>:
           (forall a_1:real.
            (forall b_0_0:real.
             ((in_interval(a_1, xl_0_0, xu_0_0)
              and in_interval(b_0_0, yl_0, yu_0)) ->
              in_interval(mul_real(a_1, b_0_0), zl, zu))))))) }

parameter mul_dn :
 x_1_1:double ->
  y_1_1:double ->
   { } double
   { (JC_<somenum>:
     double_le_real(result,
     mul_real(double_value(x_1_1), double_value(y_1_1)))) }

parameter mul_dn_requires :
 x_1_1:double ->
  y_1_1:double ->
   { (JC_<somenum>:
     ((JC_<somenum>: (not double_is_NaN(x_1_1)))
     and ((JC_<somenum>: (not double_is_NaN(y_1_1)))
         and ((JC_<somenum>:
              (double_is_infinite(x_1_1) ->
               ((double_value(y_1_1) <> 0.0) and dif_sign(x_1_1, y_1_1))))
             and (JC_<somenum>:
                 (double_is_infinite(y_1_1) ->
                  ((double_value(x_1_1) <> 0.0) and dif_sign(x_1_1, y_1_1))))))))}
   double
   { (JC_<somenum>:
     double_le_real(result,
     mul_real(double_value(x_1_1), double_value(y_1_1)))) }

parameter mul_requires :
 xl_0_0:double ->
  xu_0_0:double ->
   yl_0:double ->
    yu_0:double ->
     { (JC_<somenum>:
       ((JC_<somenum>: is_interval(xl_0_0, xu_0_0))
       and (JC_<somenum>: is_interval(yl_0, yu_0))))}
     unit reads zl,zu writes zl,zu
     { (JC_<somenum>:
       ((JC_<somenum>: is_interval(zl, zu))
       and (JC_<somenum>:
           (forall a_1:real.
            (forall b_0_0:real.
             ((in_interval(a_1, xl_0_0, xu_0_0)
              and in_interval(b_0_0, yl_0, yu_0)) ->
              in_interval(mul_real(a_1, b_0_0), zl, zu))))))) }

parameter mul_up :
 x_2_1:double ->
  y_2_0:double ->
   { } double
   { (JC_<somenum>:
     real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
     result)) }

parameter mul_up_requires :
 x_2_1:double ->
  y_2_0:double ->
   { (JC_<somenum>:
     ((JC_<somenum>: (not double_is_NaN(x_2_1)))
     and ((JC_<somenum>: (not double_is_NaN(y_2_0)))
         and ((JC_<somenum>:
              ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
               sam_sign(x_2_1, y_2_0)))
             and ((JC_<somenum>:
                  ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
                   ((double_value(y_2_0) <> 0.0)
                   and ge_real(abs_real(double_value(y_2_0)), 0x1.0p-1074))))
                 and ((JC_<somenum>:
                      ((double_is_infinite(y_2_0)
                       and double_is_finite(x_2_1)) ->
                       (double_value(x_2_1) <> 0.0)))
                     and (JC_<somenum>:
                         ((double_is_finite(x_2_1)
                          and (double_is_finite(y_2_0)
                              and ((not no_overflow_double(down,
                                        neg_real(double_value(y_2_0))))
                                  and (double_sign(y_2_0) = Positive)))) ->
                          gt_real(double_value(x_2_1), 0.0)))))))))}
   double
   { (JC_<somenum>:
     real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
     result)) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let add_ensures_default =
 fun (xl_0 : double) (xu_0 : double) (yl : double) (yu : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: is_interval(xl_0, xu_0)) and (JC_<somenum>: is_interval(yl, yu)))) }
  (init:
  try
   (C_63:
   begin
     (let jessie_<somenum> =
     (zl := (C_62: (JC_<somenum>: (((add_double down) xl_0) yl)))) in void);
    (C_67:
    begin
      (let jessie_<somenum> =
      (zu := (C_66:
             (JC_<somenum>:
             (neg_double (C_65:
                         (JC_<somenum>:
                         (((sub_double down) (C_64:
                                             (JC_<somenum>: (neg_double xu_0)))) yu))))))) in
      void); (raise Return); (raise Return) end) end) with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>: is_interval(zl, zu))
    and (JC_<somenum>:
        (forall a_0_0:real.
         (forall b_0:real.
          ((in_interval(a_0_0, xl_0, xu_0) and in_interval(b_0, yl, yu)) ->
           in_interval(add_real(a_0_0, b_0), zl, zu))))))) }

let add_safety =
 fun (xl_0 : double) (xu_0 : double) (yl : double) (yu : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: is_interval(xl_0, xu_0)) and (JC_<somenum>: is_interval(yl, yu)))) }
  (init:
  try
   (C_63:
   begin
     (let jessie_<somenum> =
     (zl := (C_62: (JC_<somenum>: (((add_double down) xl_0) yl)))) in void);
    (C_67:
    begin
      (let jessie_<somenum> =
      (zu := (C_66:
             (JC_<somenum>:
             (neg_double (C_65:
                         (JC_<somenum>:
                         (((sub_double down) (C_64:
                                             (JC_<somenum>: (neg_double xu_0)))) yu))))))) in
      void); (raise Return); (raise Return) end) end) with Return -> void end)
  { true }

let max_ensures_default =
 fun (x_1 : double) (y : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (not double_is_NaN(x_1))) and (JC_<somenum>: (not double_is_NaN(y))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let tmp_0 = ref (any_double void) in
     begin
       (let jessie_<somenum> =
       (if ((gt_double_ x_1) y)
       then (C_12: begin   (tmp_0 := x_1); !tmp_0 end)
       else (C_11: begin   (tmp_0 := y); !tmp_0 end)) in void);
      (return := !tmp_0); (raise Return) end); absurd  end with Return ->
   !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: le_double_full(x_1, result))
    and ((JC_<somenum>: le_double_full(y, result))
        and (JC_<somenum>:
            (eq_double_full(result, x_1) or eq_double_full(result, y)))))) }

let max_safety =
 fun (x_1 : double) (y : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (not double_is_NaN(x_1))) and (JC_<somenum>: (not double_is_NaN(y))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let tmp_0 = ref (any_double void) in
     begin
       (let jessie_<somenum> =
       (if ((gt_double_ x_1) y)
       then (C_12: begin   (tmp_0 := x_1); !tmp_0 end)
       else (C_11: begin   (tmp_0 := y); !tmp_0 end)) in void);
      (return := !tmp_0); (raise Return) end); absurd  end with Return ->
   !return end)) { true }

let min_ensures_default =
 fun (x_0 : double) (y_0 : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (not double_is_NaN(x_0))) and (JC_<somenum>: (not double_is_NaN(y_0))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let tmp = ref (any_double void) in
     begin
       (let jessie_<somenum> =
       (if ((lt_double_ x_0) y_0) then (C_2: begin   (tmp := x_0); !tmp end)
       else (C_1: begin   (tmp := y_0); !tmp end)) in void);
      (return := !tmp); (raise Return) end); absurd  end with Return ->
   !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: le_double_full(result, x_0))
    and ((JC_<somenum>: le_double_full(result, y_0))
        and (JC_<somenum>:
            (eq_double_full(result, x_0) or eq_double_full(result, y_0)))))) }

let min_safety =
 fun (x_0 : double) (y_0 : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (not double_is_NaN(x_0))) and (JC_<somenum>: (not double_is_NaN(y_0))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let tmp = ref (any_double void) in
     begin
       (let jessie_<somenum> =
       (if ((lt_double_ x_0) y_0) then (C_2: begin   (tmp := x_0); !tmp end)
       else (C_1: begin   (tmp := y_0); !tmp end)) in void);
      (return := !tmp); (raise Return) end); absurd  end with Return ->
   !return end)) { true }

let mul_dn_ensures_default =
 fun (x_1_1 : double) (y_1_1 : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (not double_is_NaN(x_1_1)))
    and ((JC_<somenum>: (not double_is_NaN(y_1_1)))
        and ((JC_<somenum>:
             (double_is_infinite(x_1_1) ->
              ((double_value(y_1_1) <> 0.0) and dif_sign(x_1_1, y_1_1))))
            and (JC_<somenum>:
                (double_is_infinite(y_1_1) ->
                 ((double_value(x_1_1) <> 0.0) and dif_sign(x_1_1, y_1_1)))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let z = ref (any_double void) in
     (C_22:
     begin
       (let jessie_<somenum> =
       (z := (C_21: (JC_<somenum>: (((mul_double down) x_1_1) y_1_1)))) in void);
      (return := !z); (raise Return) end)); absurd  end with Return ->
   !return end))
  { (JC_<somenum>:
    double_le_real(result,
    mul_real(double_value(x_1_1), double_value(y_1_1)))) }

let mul_dn_safety =
 fun (x_1_1 : double) (y_1_1 : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (not double_is_NaN(x_1_1)))
    and ((JC_<somenum>: (not double_is_NaN(y_1_1)))
        and ((JC_<somenum>:
             (double_is_infinite(x_1_1) ->
              ((double_value(y_1_1) <> 0.0) and dif_sign(x_1_1, y_1_1))))
            and (JC_<somenum>:
                (double_is_infinite(y_1_1) ->
                 ((double_value(x_1_1) <> 0.0) and dif_sign(x_1_1, y_1_1)))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let z = ref (any_double void) in
     (C_22:
     begin
       (let jessie_<somenum> =
       (z := (C_21: (JC_<somenum>: (((mul_double down) x_1_1) y_1_1)))) in void);
      (return := !z); (raise Return) end)); absurd  end with Return ->
   !return end)) { true }

let mul_ensures_default =
 fun (xl_0_0 : double) (xu_0_0 : double) (yl_0 : double) (yu_0 : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: is_interval(xl_0_0, xu_0_0))
    and (JC_<somenum>: is_interval(yl_0, yu_0)))) }
  (init:
  try
   begin
     (let tmp_1 = ref (any_double void) in
     (let tmp_0_0 = ref (any_double void) in
     (let tmp_1_0 = ref (any_double void) in
     (let tmp_2 = ref (any_double void) in
     begin
       (let jessie_<somenum> =
       (if ((lt_double_ xl_0_0) (double_of_real_exact 0.0))
       then
        (if ((gt_double_ xu_0_0) (double_of_real_exact 0.0))
        then
         (if ((lt_double_ yl_0) (double_of_real_exact 0.0))
         then
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let jessie_<somenum> =
             (C_115:
             begin
               (let jessie_<somenum> =
               (tmp_1 := (C_114:
                         (let jessie_<somenum> = xu_0_0 in
                         (let jessie_<somenum> = yl_0 in
                         (JC_<somenum>: ((mul_dn jessie_<somenum>) jessie_<somenum>)))))) in
               void);
              (C_117:
              begin
                (tmp_0_0 := (C_116:
                            (let jessie_<somenum> = xl_0_0 in
                            (let jessie_<somenum> = yu_0 in
                            (JC_<somenum>: ((mul_dn jessie_<somenum>) jessie_<somenum>))))));
               !tmp_0_0 end) end) in void);
            (C_119:
            begin
              (let jessie_<somenum> =
              (zl := (C_118:
                     (let jessie_<somenum> = !tmp_0_0 in
                     (let jessie_<somenum> = !tmp_1 in
                     (JC_<somenum>: ((min jessie_<somenum>) jessie_<somenum>)))))) in void);
             (let jessie_<somenum> =
             (C_121:
             begin
               (let jessie_<somenum> =
               (tmp_1_0 := (C_120:
                           (let jessie_<somenum> = xu_0_0 in
                           (let jessie_<somenum> = yu_0 in
                           (JC_<somenum>: ((mul_up jessie_<somenum>) jessie_<somenum>)))))) in
               void);
              (C_123:
              begin
                (tmp_2 := (C_122:
                          (let jessie_<somenum> = xl_0_0 in
                          (let jessie_<somenum> = yl_0 in
                          (JC_<somenum>: ((mul_up jessie_<somenum>) jessie_<somenum>))))));
               !tmp_2 end) end) in void);
             (C_125:
             begin
               (zu := (C_124:
                      (let jessie_<somenum> = !tmp_2 in
                      (let jessie_<somenum> = !tmp_1_0 in
                      (JC_<somenum>: ((max jessie_<somenum>) jessie_<somenum>)))))); !zu end)
            end) end
          else
           (C_111:
           begin
             (let jessie_<somenum> =
             (zl := (C_110:
                    (let jessie_<somenum> = xu_0_0 in
                    (let jessie_<somenum> = yl_0 in
                    (JC_<somenum>: ((mul_dn jessie_<somenum>) jessie_<somenum>)))))) in void);
            (C_113:
            begin
              (zu := (C_112:
                     (let jessie_<somenum> = xl_0_0 in
                     (let jessie_<somenum> = yl_0 in
                     (JC_<somenum>: ((mul_up jessie_<somenum>) jessie_<somenum>)))))); !zu end)
           end))
         else
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           (C_107:
           begin
             (let jessie_<somenum> =
             (zl := (C_106:
                    (let jessie_<somenum> = xl_0_0 in
                    (let jessie_<somenum> = yu_0 in
                    (JC_<somenum>: ((mul_dn jessie_<somenum>) jessie_<somenum>)))))) in void);
            (C_109:
            begin
              (zu := (C_108:
                     (let jessie_<somenum> = xu_0_0 in
                     (let jessie_<somenum> = yu_0 in
                     (JC_<somenum>: ((mul_up jessie_<somenum>) jessie_<somenum>)))))); !zu end)
           end)
          else
           (C_104:
           begin
             (let jessie_<somenum> = (zl := (double_of_real_exact 0.0)) in void);
            (C_105: begin   (zu := (double_of_real_exact 0.0)); !zu end) end)))
        else
         (if ((lt_double_ yl_0) (double_of_real_exact 0.0))
         then
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           (C_101:
           begin
             (let jessie_<somenum> =
             (zl := (C_100:
                    (let jessie_<somenum> = xl_0_0 in
                    (let jessie_<somenum> = yu_0 in
                    (JC_<somenum>: ((mul_dn jessie_<somenum>) jessie_<somenum>)))))) in void);
            (C_103:
            begin
              (zu := (C_102:
                     (let jessie_<somenum> = xl_0_0 in
                     (let jessie_<somenum> = yl_0 in
                     (JC_<somenum>: ((mul_up jessie_<somenum>) jessie_<somenum>)))))); !zu end)
           end)
          else
           (C_97:
           begin
             (let jessie_<somenum> =
             (zl := (C_96:
                    (let jessie_<somenum> = xu_0_0 in
                    (let jessie_<somenum> = yu_0 in
                    (JC_<somenum>: ((mul_dn jessie_<somenum>) jessie_<somenum>)))))) in void);
            (C_99:
            begin
              (zu := (C_98:
                     (let jessie_<somenum> = xl_0_0 in
                     (let jessie_<somenum> = yl_0 in
                     (JC_<somenum>: ((mul_up jessie_<somenum>) jessie_<somenum>)))))); !zu end)
           end))
         else
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           (C_93:
           begin
             (let jessie_<somenum> =
             (zl := (C_92:
                    (let jessie_<somenum> = xl_0_0 in
                    (let jessie_<somenum> = yu_0 in
                    (JC_<somenum>: ((mul_dn jessie_<somenum>) jessie_<somenum>)))))) in void);
            (C_95:
            begin
              (zu := (C_94:
                     (let jessie_<somenum> = xu_0_0 in
                     (let jessie_<somenum> = yl_0 in
                     (JC_<somenum>: ((mul_up jessie_<somenum>) jessie_<somenum>)))))); !zu end)
           end)
          else
           (C_90:
           begin
             (let jessie_<somenum> = (zl := (double_of_real_exact 0.0)) in void);
            (C_91: begin   (zu := (double_of_real_exact 0.0)); !zu end) end))))
       else
        (if ((gt_double_ xu_0_0) (double_of_real_exact 0.0))
        then
         (if ((lt_double_ yl_0) (double_of_real_exact 0.0))
         then
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           (C_87:
           begin
             (let jessie_<somenum> =
             (zl := (C_86:
                    (let jessie_<somenum> = xu_0_0 in
                    (let jessie_<somenum> = yl_0 in
                    (JC_<somenum>: ((mul_dn jessie_<somenum>) jessie_<somenum>)))))) in void);
            (C_89:
            begin
              (zu := (C_88:
                     (let jessie_<somenum> = xu_0_0 in
                     (let jessie_<somenum> = yu_0 in
                     (JC_<somenum>: ((mul_up jessie_<somenum>) jessie_<somenum>)))))); !zu end)
           end)
          else
           (C_83:
           begin
             (let jessie_<somenum> =
             (zl := (C_82:
                    (let jessie_<somenum> = xu_0_0 in
                    (let jessie_<somenum> = yl_0 in
                    (JC_<somenum>: ((mul_dn jessie_<somenum>) jessie_<somenum>)))))) in void);
            (C_85:
            begin
              (zu := (C_84:
                     (let jessie_<somenum> = xl_0_0 in
                     (let jessie_<somenum> = yu_0 in
                     (JC_<somenum>: ((mul_up jessie_<somenum>) jessie_<somenum>)))))); !zu end)
           end))
         else
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           (C_79:
           begin
             (let jessie_<somenum> =
             (zl := (C_78:
                    (let jessie_<somenum> = xl_0_0 in
                    (let jessie_<somenum> = yl_0 in
                    (JC_<somenum>: ((mul_dn jessie_<somenum>) jessie_<somenum>)))))) in void);
            (C_81:
            begin
              (zu := (C_80:
                     (let jessie_<somenum> = xu_0_0 in
                     (let jessie_<somenum> = yu_0 in
                     (JC_<somenum>: ((mul_up jessie_<somenum>) jessie_<somenum>)))))); !zu end)
           end)
          else
           (C_76:
           begin
             (let jessie_<somenum> = (zl := (double_of_real_exact 0.0)) in void);
            (C_77: begin   (zu := (double_of_real_exact 0.0)); !zu end) end)))
        else
         (C_74:
         begin
           (let jessie_<somenum> = (zl := (double_of_real_exact 0.0)) in void);
          (C_75: begin   (zu := (double_of_real_exact 0.0)); !zu end) end))) in
       void); (raise Return) end)))); (raise Return) end with Return ->
   void end)
  { (JC_<somenum>:
    ((JC_<somenum>: is_interval(zl, zu))
    and (JC_<somenum>:
        (forall a_1:real.
         (forall b_0_0:real.
          ((in_interval(a_1, xl_0_0, xu_0_0)
           and in_interval(b_0_0, yl_0, yu_0)) ->
           in_interval(mul_real(a_1, b_0_0), zl, zu))))))) }

let mul_safety =
 fun (xl_0_0 : double) (xu_0_0 : double) (yl_0 : double) (yu_0 : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: is_interval(xl_0_0, xu_0_0))
    and (JC_<somenum>: is_interval(yl_0, yu_0)))) }
  (init:
  try
   begin
     (let tmp_1 = ref (any_double void) in
     (let tmp_0_0 = ref (any_double void) in
     (let tmp_1_0 = ref (any_double void) in
     (let tmp_2 = ref (any_double void) in
     begin
       (let jessie_<somenum> =
       (if ((lt_double_ xl_0_0) (double_of_real_exact 0.0))
       then
        (if ((gt_double_ xu_0_0) (double_of_real_exact 0.0))
        then
         (if ((lt_double_ yl_0) (double_of_real_exact 0.0))
         then
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let jessie_<somenum> =
             (C_115:
             begin
               (let jessie_<somenum> =
               (tmp_1 := (C_114:
                         (let jessie_<somenum> = xu_0_0 in
                         (let jessie_<somenum> = yl_0 in
                         (JC_<somenum>: ((mul_dn_requires jessie_<somenum>) jessie_<somenum>)))))) in
               void);
              (C_117:
              begin
                (tmp_0_0 := (C_116:
                            (let jessie_<somenum> = xl_0_0 in
                            (let jessie_<somenum> = yu_0 in
                            (JC_<somenum>: ((mul_dn_requires jessie_<somenum>) jessie_<somenum>))))));
               !tmp_0_0 end) end) in void);
            (C_119:
            begin
              (let jessie_<somenum> =
              (zl := (C_118:
                     (let jessie_<somenum> = !tmp_0_0 in
                     (let jessie_<somenum> = !tmp_1 in
                     (JC_<somenum>: ((min_requires jessie_<somenum>) jessie_<somenum>)))))) in
              void);
             (let jessie_<somenum> =
             (C_121:
             begin
               (let jessie_<somenum> =
               (tmp_1_0 := (C_120:
                           (let jessie_<somenum> = xu_0_0 in
                           (let jessie_<somenum> = yu_0 in
                           (JC_<somenum>: ((mul_up_requires jessie_<somenum>) jessie_<somenum>)))))) in
               void);
              (C_123:
              begin
                (tmp_2 := (C_122:
                          (let jessie_<somenum> = xl_0_0 in
                          (let jessie_<somenum> = yl_0 in
                          (JC_<somenum>: ((mul_up_requires jessie_<somenum>) jessie_<somenum>))))));
               !tmp_2 end) end) in void);
             (C_125:
             begin
               (zu := (C_124:
                      (let jessie_<somenum> = !tmp_2 in
                      (let jessie_<somenum> = !tmp_1_0 in
                      (JC_<somenum>: ((max_requires jessie_<somenum>) jessie_<somenum>)))))); !zu
             end) end) end
          else
           (C_111:
           begin
             (let jessie_<somenum> =
             (zl := (C_110:
                    (let jessie_<somenum> = xu_0_0 in
                    (let jessie_<somenum> = yl_0 in
                    (JC_<somenum>: ((mul_dn_requires jessie_<somenum>) jessie_<somenum>)))))) in
             void);
            (C_113:
            begin
              (zu := (C_112:
                     (let jessie_<somenum> = xl_0_0 in
                     (let jessie_<somenum> = yl_0 in
                     (JC_<somenum>: ((mul_up_requires jessie_<somenum>) jessie_<somenum>))))));
             !zu end) end))
         else
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           (C_107:
           begin
             (let jessie_<somenum> =
             (zl := (C_106:
                    (let jessie_<somenum> = xl_0_0 in
                    (let jessie_<somenum> = yu_0 in
                    (JC_<somenum>: ((mul_dn_requires jessie_<somenum>) jessie_<somenum>)))))) in
             void);
            (C_109:
            begin
              (zu := (C_108:
                     (let jessie_<somenum> = xu_0_0 in
                     (let jessie_<somenum> = yu_0 in
                     (JC_<somenum>: ((mul_up_requires jessie_<somenum>) jessie_<somenum>))))));
             !zu end) end)
          else
           (C_104:
           begin
             (let jessie_<somenum> = (zl := (double_of_real_exact 0.0)) in void);
            (C_105: begin   (zu := (double_of_real_exact 0.0)); !zu end) end)))
        else
         (if ((lt_double_ yl_0) (double_of_real_exact 0.0))
         then
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           (C_101:
           begin
             (let jessie_<somenum> =
             (zl := (C_100:
                    (let jessie_<somenum> = xl_0_0 in
                    (let jessie_<somenum> = yu_0 in
                    (JC_<somenum>: ((mul_dn_requires jessie_<somenum>) jessie_<somenum>)))))) in
             void);
            (C_103:
            begin
              (zu := (C_102:
                     (let jessie_<somenum> = xl_0_0 in
                     (let jessie_<somenum> = yl_0 in
                     (JC_<somenum>: ((mul_up_requires jessie_<somenum>) jessie_<somenum>))))));
             !zu end) end)
          else
           (C_97:
           begin
             (let jessie_<somenum> =
             (zl := (C_96:
                    (let jessie_<somenum> = xu_0_0 in
                    (let jessie_<somenum> = yu_0 in
                    (JC_<somenum>: ((mul_dn_requires jessie_<somenum>) jessie_<somenum>)))))) in
             void);
            (C_99:
            begin
              (zu := (C_98:
                     (let jessie_<somenum> = xl_0_0 in
                     (let jessie_<somenum> = yl_0 in
                     (JC_<somenum>: ((mul_up_requires jessie_<somenum>) jessie_<somenum>))))));
             !zu end) end))
         else
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           (C_93:
           begin
             (let jessie_<somenum> =
             (zl := (C_92:
                    (let jessie_<somenum> = xl_0_0 in
                    (let jessie_<somenum> = yu_0 in
                    (JC_<somenum>: ((mul_dn_requires jessie_<somenum>) jessie_<somenum>)))))) in
             void);
            (C_95:
            begin
              (zu := (C_94:
                     (let jessie_<somenum> = xu_0_0 in
                     (let jessie_<somenum> = yl_0 in
                     (JC_<somenum>: ((mul_up_requires jessie_<somenum>) jessie_<somenum>))))));
             !zu end) end)
          else
           (C_90:
           begin
             (let jessie_<somenum> = (zl := (double_of_real_exact 0.0)) in void);
            (C_91: begin   (zu := (double_of_real_exact 0.0)); !zu end) end))))
       else
        (if ((gt_double_ xu_0_0) (double_of_real_exact 0.0))
        then
         (if ((lt_double_ yl_0) (double_of_real_exact 0.0))
         then
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           (C_87:
           begin
             (let jessie_<somenum> =
             (zl := (C_86:
                    (let jessie_<somenum> = xu_0_0 in
                    (let jessie_<somenum> = yl_0 in
                    (JC_<somenum>: ((mul_dn_requires jessie_<somenum>) jessie_<somenum>)))))) in
             void);
            (C_89:
            begin
              (zu := (C_88:
                     (let jessie_<somenum> = xu_0_0 in
                     (let jessie_<somenum> = yu_0 in
                     (JC_<somenum>: ((mul_up_requires jessie_<somenum>) jessie_<somenum>))))));
             !zu end) end)
          else
           (C_83:
           begin
             (let jessie_<somenum> =
             (zl := (C_82:
                    (let jessie_<somenum> = xu_0_0 in
                    (let jessie_<somenum> = yl_0 in
                    (JC_<somenum>: ((mul_dn_requires jessie_<somenum>) jessie_<somenum>)))))) in
             void);
            (C_85:
            begin
              (zu := (C_84:
                     (let jessie_<somenum> = xl_0_0 in
                     (let jessie_<somenum> = yu_0 in
                     (JC_<somenum>: ((mul_up_requires jessie_<somenum>) jessie_<somenum>))))));
             !zu end) end))
         else
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           (C_79:
           begin
             (let jessie_<somenum> =
             (zl := (C_78:
                    (let jessie_<somenum> = xl_0_0 in
                    (let jessie_<somenum> = yl_0 in
                    (JC_<somenum>: ((mul_dn_requires jessie_<somenum>) jessie_<somenum>)))))) in
             void);
            (C_81:
            begin
              (zu := (C_80:
                     (let jessie_<somenum> = xu_0_0 in
                     (let jessie_<somenum> = yu_0 in
                     (JC_<somenum>: ((mul_up_requires jessie_<somenum>) jessie_<somenum>))))));
             !zu end) end)
          else
           (C_76:
           begin
             (let jessie_<somenum> = (zl := (double_of_real_exact 0.0)) in void);
            (C_77: begin   (zu := (double_of_real_exact 0.0)); !zu end) end)))
        else
         (C_74:
         begin
           (let jessie_<somenum> = (zl := (double_of_real_exact 0.0)) in void);
          (C_75: begin   (zu := (double_of_real_exact 0.0)); !zu end) end))) in
       void); (raise Return) end)))); (raise Return) end with Return ->
   void end) { true }

let mul_up_ensures_default =
 fun (x_2_1 : double) (y_2_0 : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (not double_is_NaN(x_2_1)))
    and ((JC_<somenum>: (not double_is_NaN(y_2_0)))
        and ((JC_<somenum>:
             ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
              sam_sign(x_2_1, y_2_0)))
            and ((JC_<somenum>:
                 ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
                  ((double_value(y_2_0) <> 0.0)
                  and ge_real(abs_real(double_value(y_2_0)), 0x1.0p-1074))))
                and ((JC_<somenum>:
                     ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
                      (double_value(x_2_1) <> 0.0)))
                    and (JC_<somenum>:
                        ((double_is_finite(x_2_1)
                         and (double_is_finite(y_2_0)
                             and ((not no_overflow_double(down,
                                       neg_real(double_value(y_2_0))))
                                 and (double_sign(y_2_0) = Positive)))) ->
                         gt_real(double_value(x_2_1), 0.0))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let a_0 = ref (any_double void) in
     (let b = ref (any_double void) in
     (let z_0 = ref (any_double void) in
     (C_32:
     begin
       (let jessie_<somenum> = (a_0 := (C_31: (JC_<somenum>: (neg_double y_2_0)))) in void);
      (C_34:
      begin
        (let jessie_<somenum> =
        (b := (C_33: (JC_<somenum>: (((mul_double down) x_2_1) !a_0)))) in void);
       (C_36:
       begin
         (let jessie_<somenum> = (z_0 := (C_35: (JC_<somenum>: (neg_double !b)))) in void);
        (assert
        { (JC_<somenum>:
          ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) }; void); void;
        (assert
        { (JC_<somenum>:
          ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) }; void); void;
        (assert
        { (JC_<somenum>:
          ((double_is_infinite(x_2_1)
           and (double_is_finite(y_2_0)
               and no_overflow_double(down, neg_real(double_value(y_2_0))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) }; void); void;
        (assert
        { (JC_<somenum>:
          ((double_is_infinite(x_2_1)
           and (double_is_finite(y_2_0)
               and (not no_overflow_double(down,
                        neg_real(double_value(y_2_0)))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) }; void); void;
        (assert
        { (JC_<somenum>:
          ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) }; void); void;
        (assert
        { (JC_<somenum>:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                   and (no_overflow_double(down,
                        mul_real(double_value(x_2_1), double_value(a_0)))
                       and (not no_overflow_double(down,
                                neg_real(double_value(b)))))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) }; void); void;
        (assert
        { (JC_<somenum>:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                   and (not no_overflow_double(down,
                            mul_real(double_value(x_2_1), double_value(a_0))))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) }; void); void;
        (assert
        { (JC_<somenum>:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and ((not no_overflow_double(down,
                         neg_real(double_value(y_2_0))))
                   and (double_sign(y_2_0) = Positive)))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) }; void); void;
        (assert
        { (JC_<somenum>:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and ((not no_overflow_double(down,
                         neg_real(double_value(y_2_0))))
                   and ((double_sign(y_2_0) = Negative)
                       and (not no_overflow_double(down,
                                mul_real(double_value(x_2_1),
                                double_value(a_0)))))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) }; void); void;
        (assert
        { (JC_<somenum>:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and ((not no_overflow_double(down,
                         neg_real(double_value(y_2_0))))
                   and ((double_sign(y_2_0) = Negative)
                       and (no_overflow_double(down,
                            mul_real(double_value(x_2_1), double_value(a_0)))
                           and (not no_overflow_double(down,
                                    neg_real(double_value(b))))))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) }; void); void;
        (assert
        { (JC_<somenum>:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and ((not no_overflow_double(down,
                         neg_real(double_value(y_2_0))))
                   and ((double_sign(y_2_0) = Negative)
                       and (no_overflow_double(down,
                            mul_real(double_value(x_2_1), double_value(a_0)))
                           and no_overflow_double(down,
                               neg_real(double_value(b)))))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) }; void); void;
        (assert
        { (JC_<somenum>:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                   and (no_overflow_double(down,
                        mul_real(double_value(x_2_1), double_value(a_0)))
                       and (no_overflow_double(down,
                            neg_real(double_value(b)))
                           and gt_real(double_value(x_2_1), 0.0)))))) ->
           (double_is_finite(z_0)
           and real_le_double(mul_real(double_value(x_2_1),
                              double_value(y_2_0)),
               z_0)))) }; void); void;
        (assert
        { (JC_<somenum>:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                   and (no_overflow_double(down,
                        mul_real(double_value(x_2_1), double_value(a_0)))
                       and (no_overflow_double(down,
                            neg_real(double_value(b)))
                           and lt_real(double_value(x_2_1), 0.0)))))) ->
           (double_is_finite(z_0)
           and real_le_double(mul_real(double_value(x_2_1),
                              double_value(y_2_0)),
               z_0)))) }; void); void; (return := !z_0); (raise Return) end)
      end) end)))); absurd  end with Return -> !return end))
  { (JC_<somenum>:
    real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
    result)) }

let mul_up_safety =
 fun (x_2_1 : double) (y_2_0 : double) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (not double_is_NaN(x_2_1)))
    and ((JC_<somenum>: (not double_is_NaN(y_2_0)))
        and ((JC_<somenum>:
             ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
              sam_sign(x_2_1, y_2_0)))
            and ((JC_<somenum>:
                 ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
                  ((double_value(y_2_0) <> 0.0)
                  and ge_real(abs_real(double_value(y_2_0)), 0x1.0p-1074))))
                and ((JC_<somenum>:
                     ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
                      (double_value(x_2_1) <> 0.0)))
                    and (JC_<somenum>:
                        ((double_is_finite(x_2_1)
                         and (double_is_finite(y_2_0)
                             and ((not no_overflow_double(down,
                                       neg_real(double_value(y_2_0))))
                                 and (double_sign(y_2_0) = Positive)))) ->
                         gt_real(double_value(x_2_1), 0.0))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let a_0 = ref (any_double void) in
     (let b = ref (any_double void) in
     (let z_0 = ref (any_double void) in
     (C_32:
     begin
       (let jessie_<somenum> = (a_0 := (C_31: (JC_<somenum>: (neg_double y_2_0)))) in void);
      (C_34:
      begin
        (let jessie_<somenum> =
        (b := (C_33: (JC_<somenum>: (((mul_double down) x_2_1) !a_0)))) in void);
       (C_36:
       begin
         (let jessie_<somenum> = (z_0 := (C_35: (JC_<somenum>: (neg_double !b)))) in void);
        [ { } unit reads z_0
          { (JC_<somenum>:
            ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
             real_le_double(mul_real(double_value(x_2_1),
                            double_value(y_2_0)),
             z_0))) } ]; void;
        [ { } unit reads z_0
          { (JC_<somenum>:
            ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
             real_le_double(mul_real(double_value(x_2_1),
                            double_value(y_2_0)),
             z_0))) } ]; void;
        [ { } unit reads z_0
          { (JC_<somenum>:
            ((double_is_infinite(x_2_1)
             and (double_is_finite(y_2_0)
                 and no_overflow_double(down, neg_real(double_value(y_2_0))))) ->
             real_le_double(mul_real(double_value(x_2_1),
                            double_value(y_2_0)),
             z_0))) } ]; void;
        [ { } unit reads z_0
          { (JC_<somenum>:
            ((double_is_infinite(x_2_1)
             and (double_is_finite(y_2_0)
                 and (not no_overflow_double(down,
                          neg_real(double_value(y_2_0)))))) ->
             real_le_double(mul_real(double_value(x_2_1),
                            double_value(y_2_0)),
             z_0))) } ]; void;
        [ { } unit reads z_0
          { (JC_<somenum>:
            ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
             real_le_double(mul_real(double_value(x_2_1),
                            double_value(y_2_0)),
             z_0))) } ]; void;
        [ { } unit reads a_0,b,z_0
          { (JC_<somenum>:
            ((double_is_finite(x_2_1)
             and (double_is_finite(y_2_0)
                 and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                     and (no_overflow_double(down,
                          mul_real(double_value(x_2_1), double_value(a_0)))
                         and (not no_overflow_double(down,
                                  neg_real(double_value(b)))))))) ->
             real_le_double(mul_real(double_value(x_2_1),
                            double_value(y_2_0)),
             z_0))) } ]; void;
        [ { } unit reads a_0,z_0
          { (JC_<somenum>:
            ((double_is_finite(x_2_1)
             and (double_is_finite(y_2_0)
                 and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                     and (not no_overflow_double(down,
                              mul_real(double_value(x_2_1),
                              double_value(a_0))))))) ->
             real_le_double(mul_real(double_value(x_2_1),
                            double_value(y_2_0)),
             z_0))) } ]; void;
        [ { } unit reads z_0
          { (JC_<somenum>:
            ((double_is_finite(x_2_1)
             and (double_is_finite(y_2_0)
                 and ((not no_overflow_double(down,
                           neg_real(double_value(y_2_0))))
                     and (double_sign(y_2_0) = Positive)))) ->
             real_le_double(mul_real(double_value(x_2_1),
                            double_value(y_2_0)),
             z_0))) } ]; void;
        [ { } unit reads a_0,z_0
          { (JC_<somenum>:
            ((double_is_finite(x_2_1)
             and (double_is_finite(y_2_0)
                 and ((not no_overflow_double(down,
                           neg_real(double_value(y_2_0))))
                     and ((double_sign(y_2_0) = Negative)
                         and (not no_overflow_double(down,
                                  mul_real(double_value(x_2_1),
                                  double_value(a_0)))))))) ->
             real_le_double(mul_real(double_value(x_2_1),
                            double_value(y_2_0)),
             z_0))) } ]; void;
        [ { } unit reads a_0,b,z_0
          { (JC_<somenum>:
            ((double_is_finite(x_2_1)
             and (double_is_finite(y_2_0)
                 and ((not no_overflow_double(down,
                           neg_real(double_value(y_2_0))))
                     and ((double_sign(y_2_0) = Negative)
                         and (no_overflow_double(down,
                              mul_real(double_value(x_2_1),
                              double_value(a_0)))
                             and (not no_overflow_double(down,
                                      neg_real(double_value(b))))))))) ->
             real_le_double(mul_real(double_value(x_2_1),
                            double_value(y_2_0)),
             z_0))) } ]; void;
        [ { } unit reads a_0,b,z_0
          { (JC_<somenum>:
            ((double_is_finite(x_2_1)
             and (double_is_finite(y_2_0)
                 and ((not no_overflow_double(down,
                           neg_real(double_value(y_2_0))))
                     and ((double_sign(y_2_0) = Negative)
                         and (no_overflow_double(down,
                              mul_real(double_value(x_2_1),
                              double_value(a_0)))
                             and no_overflow_double(down,
                                 neg_real(double_value(b)))))))) ->
             real_le_double(mul_real(double_value(x_2_1),
                            double_value(y_2_0)),
             z_0))) } ]; void;
        [ { } unit reads a_0,b,z_0
          { (JC_<somenum>:
            ((double_is_finite(x_2_1)
             and (double_is_finite(y_2_0)
                 and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                     and (no_overflow_double(down,
                          mul_real(double_value(x_2_1), double_value(a_0)))
                         and (no_overflow_double(down,
                              neg_real(double_value(b)))
                             and gt_real(double_value(x_2_1), 0.0)))))) ->
             (double_is_finite(z_0)
             and real_le_double(mul_real(double_value(x_2_1),
                                double_value(y_2_0)),
                 z_0)))) } ]; void;
        [ { } unit reads a_0,b,z_0
          { (JC_<somenum>:
            ((double_is_finite(x_2_1)
             and (double_is_finite(y_2_0)
                 and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                     and (no_overflow_double(down,
                          mul_real(double_value(x_2_1), double_value(a_0)))
                         and (no_overflow_double(down,
                              neg_real(double_value(b)))
                             and lt_real(double_value(x_2_1), 0.0)))))) ->
             (double_is_finite(z_0)
             and real_le_double(mul_real(double_value(x_2_1),
                                double_value(y_2_0)),
                 z_0)))) } ]; void; (return := !z_0); (raise Return) end) end)
     end)))); absurd  end with Return -> !return end)) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C interval_arith.jessie --quiet -f interval_arith.makefile project
why --project [...] why/interval_arith.why
<project name="interval_arith" context="why/interval_arith_ctx.why">
  <function name="Function mul_up">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/interval_arith_po146.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "84" begin = "13" end = "75"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po147.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "88" begin = "13" end = "73"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po148.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "90" begin = "13" end = "116"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po149.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "93" begin = "13" end = "118"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po150.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "96" begin = "13" end = "75"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po151.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "101" begin = "13" end = "205"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po152.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "106" begin = "13" end = "161"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po153.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "110" begin = "13" end = "184"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po154.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "114" begin = "13" end = "187"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po155.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "118" begin = "13" end = "231"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po156.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "123" begin = "13" end = "230"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po157.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "128" begin = "13" end = "232"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po158.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "128" begin = "13" end = "232"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po159.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "133" begin = "13" end = "232"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po160.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "133" begin = "13" end = "232"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/interval_arith_po161.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "85" begin = "12" end = "41"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function mul_dn">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/interval_arith_po9.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "50" begin = "12" end = "39"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function mul">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/interval_arith_po10.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "199" begin = "12" end = "30"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/interval_arith_po11.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "201" begin = "12" end = "117"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/interval_arith_po12.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "37" end = "51"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po13.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "37" end = "51"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po14.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "37" end = "51"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po15.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "37" end = "51"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po16.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "37" end = "51"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po17.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "37" end = "51"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po18.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "21" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po19.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "21" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po20.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "21" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po21.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "21" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po22.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "21" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po23.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "21" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po24.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "17" end = "52"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po25.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "210" begin = "17" end = "52"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po26.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "37" end = "51"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po27.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "37" end = "51"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po28.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "37" end = "51"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po29.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "37" end = "51"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po30.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "37" end = "51"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po31.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "37" end = "51"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po32.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "37" end = "51"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po33.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "21" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po34.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "21" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po35.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "21" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po36.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "21" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po37.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "21" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po38.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "21" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po39.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "21" end = "35"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po40.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "17" end = "52"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po41.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "211" begin = "17" end = "52"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po42.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "213" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po43.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "213" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po44.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "213" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po45.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "213" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po46.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "213" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po47.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "213" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po48.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "214" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po49.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "214" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po50.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "214" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po51.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "214" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po52.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "214" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po53.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "214" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po54.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "214" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po55.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "217" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po56.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "217" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po57.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "217" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po58.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "217" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po59.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "217" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po60.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "217" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po61.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "218" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po62.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "218" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po63.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "218" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po64.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "218" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po65.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "218" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po66.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "218" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po67.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "218" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po68.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "225" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po69.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "225" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po70.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "225" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po71.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "225" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po72.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "225" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po73.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "225" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po74.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "226" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po75.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "226" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po76.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "226" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po77.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "226" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po78.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "226" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po79.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "226" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po80.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "226" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po81.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "228" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po82.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "228" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po83.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "228" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po84.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "228" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po85.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "228" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po86.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "228" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po87.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "229" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po88.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "229" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po89.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "229" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po90.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "229" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po91.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "229" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po92.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "229" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po93.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "229" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po94.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "232" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po95.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "232" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po96.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "232" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po97.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "232" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po98.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "232" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po99.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "232" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po100.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "233" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po101.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "233" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po102.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "233" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po103.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "233" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po104.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "233" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po105.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "233" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po106.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "233" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po107.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "241" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po108.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "241" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po109.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "241" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po110.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "241" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po111.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "241" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po112.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "241" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po113.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "242" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po114.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "242" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po115.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "242" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po116.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "242" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po117.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "242" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po118.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "242" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po119.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "242" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po120.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "244" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po121.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "244" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po122.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "244" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po123.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "244" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po124.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "244" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po125.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "244" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po126.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "245" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po127.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "245" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po128.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "245" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po129.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "245" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po130.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "245" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po131.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "245" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po132.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "245" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po133.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "248" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po134.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "248" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po135.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "248" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po136.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "248" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po137.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "248" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po138.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "248" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po139.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "249" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po140.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "249" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po141.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "249" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po142.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "249" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po143.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "249" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po144.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "249" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/interval_arith_po145.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "249" begin = "17" end = "31"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    </behavior>
  </function>
  <function name="Function min">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/interval_arith_po6.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "7" begin = "12" end = "32"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/interval_arith_po7.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "7" begin = "36" end = "56"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/interval_arith_po8.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "9" begin = "12" end = "56"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function max">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/interval_arith_po3.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "17" begin = "12" end = "32"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/interval_arith_po4.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "17" begin = "36" end = "56"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/interval_arith_po5.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "19" begin = "12" end = "56"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function add">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/interval_arith_po1.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "153" begin = "12" end = "30"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/interval_arith_po2.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "155" begin = "12" end = "117"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type mode =
  | nearest_even
  | to_zero
  | up
  | down
  | nearest_away

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom exact_round_double_for_doubles:
  (forall x:double.
    (forall m:mode. (round_double(m, double_value(x)) = double_value(x))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom exact_round_single_for_singles:
  (forall x:single.
    (forall m:mode. (round_single(m, single_value(x)) = single_value(x))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

function min_single() : real = 0x1.p-149

function min_double() : real = 0x1.p-1074

type Float_class =
  | Finite
  | Infinite
  | NaN

type sign =
  | Negative
  | Positive

logic single_class : single -> Float_class

logic double_class : double -> Float_class

logic single_sign : single -> sign

logic double_sign : double -> sign

inductive same_sign_real_bool: sign, real -> prop =
  | neg_case: (forall x:real.
                ((x < 0.0) -> same_sign_real_bool(Negative, x)))
  | pos_case: (forall x:real.
                ((x > 0.0) -> same_sign_real_bool(Positive, x)))



axiom same_sign_real_bool_zero1:
  (forall b:sign. (not same_sign_real_bool(b, 0.0)))

axiom same_sign_real_bool_zero2:
  (forall x:real.
    ((same_sign_real_bool(Negative, x) and same_sign_real_bool(Positive, x)) ->
     false))

axiom same_sign_real_bool_zero3:
  (forall b:sign. (forall x:real. (same_sign_real_bool(b, x) -> (x <> 0.0))))

axiom same_sign_real_bool_correct2:
  (forall b:sign.
    (forall x:real.
      (same_sign_real_bool(b, x) -> ((x < 0.0) <-> (b = Negative)))))

axiom same_sign_real_bool_correct3:
  (forall b:sign.
    (forall x:real.
      (same_sign_real_bool(b, x) -> ((x > 0.0) <-> (b = Positive)))))

predicate single_same_sign_real(x: single, y: real) =
  same_sign_real_bool(single_sign(x), y)

predicate single_same_sign(x: single, y: single) =
  (single_sign(x) = single_sign(y))

predicate single_diff_sign(x: single, y: single) =
  (single_sign(x) <> single_sign(y))

predicate single_product_sign(z: single, x: single, y: single) =
  ((single_same_sign(x, y) -> (single_sign(z) = Positive)) and
   (single_diff_sign(x, y) -> (single_sign(z) = Negative)))

predicate double_same_sign_real(x: double, y: real) =
  same_sign_real_bool(double_sign(x), y)

predicate double_same_sign(x: double, y: double) =
  (double_sign(x) = double_sign(y))

predicate double_diff_sign(x: double, y: double) =
  (double_sign(x) <> double_sign(y))

predicate double_product_sign(z: double, x: double, y: double) =
  ((double_same_sign(x, y) -> (double_sign(z) = Positive)) and
   (double_diff_sign(x, y) -> (double_sign(z) = Negative)))

predicate single_same_class(x: single, y: single) =
  (single_class(x) = single_class(y))

predicate singlediff_class(x: single, y: single) =
  (single_class(x) <> single_class(y))

predicate double_same_class(x: double, y: double) =
  (double_class(x) = double_class(y))

predicate doublediff_class(x: double, y: double) =
  (double_class(x) <> double_class(y))

axiom single_finite_sign:
  (forall x:single.
    (((single_class(x) = Finite) and (single_value(x) <> 0.0)) ->
     single_same_sign_real(x, single_value(x))))

axiom single_finite_sign_neg1:
  (forall x:single.
    (((single_class(x) = Finite) and (single_value(x) < 0.0)) ->
     (single_sign(x) = Negative)))

axiom single_finite_sign_neg2:
  (forall x:single.
    (((single_class(x) = Finite) and
      ((single_value(x) <> 0.0) and (single_sign(x) = Negative))) ->
     (single_value(x) < 0.0)))

axiom single_finite_sign_pos1:
  (forall x:single.
    (((single_class(x) = Finite) and (single_value(x) > 0.0)) ->
     (single_sign(x) = Positive)))

axiom single_finite_sign_pos2:
  (forall x:single.
    (((single_class(x) = Finite) and
      ((single_value(x) <> 0.0) and (single_sign(x) = Positive))) ->
     (single_value(x) > 0.0)))

axiom single_diff_sign_trans:
  (forall x:single.
    (forall y:single.
      (forall z:single.
        ((single_diff_sign(x, y) and single_diff_sign(y, z)) ->
         single_same_sign(x, z)))))

axiom single_same_sign_product:
  (forall x:single.
    (forall y:single.
      (((single_class(x) = Finite) and
        ((single_class(y) = Finite) and single_same_sign(x, y))) ->
       ((single_value(x) * single_value(y)) >= 0.0))))

axiom single_diff_sign_product:
  (forall x:single.
    (forall y:single.
      (((single_class(x) = Finite) and
        ((single_class(y) = Finite) and
         ((single_value(x) * single_value(y)) < 0.0))) ->
       single_diff_sign(x, y))))

axiom double_finite_sign:
  (forall x:double.
    (((double_class(x) = Finite) and (double_value(x) <> 0.0)) ->
     double_same_sign_real(x, double_value(x))))

axiom double_finite_sign_neg1:
  (forall x:double.
    (((double_class(x) = Finite) and (double_value(x) < 0.0)) ->
     (double_sign(x) = Negative)))

axiom double_finite_sign_neg2:
  (forall x:double.
    (((double_class(x) = Finite) and
      ((double_value(x) <> 0.0) and (double_sign(x) = Negative))) ->
     (double_value(x) < 0.0)))

axiom double_finite_sign_pos1:
  (forall x:double.
    (((double_class(x) = Finite) and (double_value(x) > 0.0)) ->
     (double_sign(x) = Positive)))

axiom double_finite_sign_pos2:
  (forall x:double.
    (((double_class(x) = Finite) and
      ((double_value(x) <> 0.0) and (double_sign(x) = Positive))) ->
     (double_value(x) > 0.0)))

axiom double_diff_sign_trans:
  (forall x:double.
    (forall y:double.
      (forall z:double.
        ((double_diff_sign(x, y) and double_diff_sign(y, z)) ->
         double_same_sign(x, z)))))

axiom double_same_sign_product:
  (forall x:double.
    (forall y:double.
      (((double_class(x) = Finite) and
        ((double_class(y) = Finite) and double_same_sign(x, y))) ->
       ((double_value(x) * double_value(y)) >= 0.0))))

axiom double_diff_sign_product:
  (forall x:double.
    (forall y:double.
      (((double_class(x) = Finite) and
        ((double_class(y) = Finite) and
         ((double_value(x) * double_value(y)) < 0.0))) ->
       double_diff_sign(x, y))))

predicate single_is_finite(x: single) = (single_class(x) = Finite)

predicate single_is_infinite(x: single) = (single_class(x) = Infinite)

predicate single_is_NaN(x: single) = (single_class(x) = NaN)

predicate single_is_not_NaN(x: single) =
  (single_is_finite(x) or single_is_infinite(x))

predicate single_is_minus_infinity(x: single) =
  (single_is_infinite(x) and (single_sign(x) = Negative))

predicate single_is_plus_infinity(x: single) =
  (single_is_infinite(x) and (single_sign(x) = Positive))

predicate single_is_gen_zero(x: single) =
  (single_is_finite(x) and (single_value(x) = 0.0))

predicate single_is_gen_zero_plus(x: single) =
  (single_is_gen_zero(x) and (single_sign(x) = Positive))

predicate single_is_gen_zero_minus(x: single) =
  (single_is_gen_zero(x) and (single_sign(x) = Negative))

predicate double_is_finite(x: double) = (double_class(x) = Finite)

predicate double_is_infinite(x: double) = (double_class(x) = Infinite)

predicate double_is_NaN(x: double) = (double_class(x) = NaN)

predicate double_is_not_NaN(x: double) =
  (double_is_finite(x) or double_is_infinite(x))

predicate double_is_minus_infinity(x: double) =
  (double_is_infinite(x) and (double_sign(x) = Negative))

predicate double_is_plus_infinity(x: double) =
  (double_is_infinite(x) and (double_sign(x) = Positive))

predicate double_is_gen_zero(x: double) =
  (double_is_finite(x) and (double_value(x) = 0.0))

predicate double_is_gen_zero_plus(x: double) =
  (double_is_gen_zero(x) and (double_sign(x) = Positive))

predicate double_is_gen_zero_minus(x: double) =
  (double_is_gen_zero(x) and (double_sign(x) = Negative))

predicate single_overflow_value(m: mode, x: single) =
  (((m = down) ->
    (((single_sign(x) = Negative) -> single_is_infinite(x)) and
     ((single_sign(x) = Positive) ->
      (single_is_finite(x) and (single_value(x) = max_single))))) and
   (((m = up) ->
     (((single_sign(x) = Negative) ->
       (single_is_finite(x) and (single_value(x) = (-max_single)))) and
      ((single_sign(x) = Positive) -> single_is_infinite(x)))) and
    (((m = to_zero) ->
      (single_is_finite(x) and
       (((single_sign(x) = Negative) -> (single_value(x) = (-max_single))) and
        ((single_sign(x) = Positive) -> (single_value(x) = max_single))))) and
     (((m = nearest_away) or (m = nearest_even)) -> single_is_infinite(x)))))

predicate double_overflow_value(m: mode, x: double) =
  (((m = down) ->
    (((double_sign(x) = Negative) -> double_is_infinite(x)) and
     ((double_sign(x) = Positive) ->
      (double_is_finite(x) and (double_value(x) = max_double))))) and
   (((m = up) ->
     (((double_sign(x) = Negative) ->
       (double_is_finite(x) and (double_value(x) = (-max_double)))) and
      ((double_sign(x) = Positive) -> double_is_infinite(x)))) and
    (((m = to_zero) ->
      (double_is_finite(x) and
       (((double_sign(x) = Negative) -> (double_value(x) = (-max_double))) and
        ((double_sign(x) = Positive) -> (double_value(x) = max_double))))) and
     (((m = nearest_away) or (m = nearest_even)) -> double_is_infinite(x)))))

predicate single_underflow_value(m: mode, x: single) =
  (single_is_finite(x) and
   (((single_sign(x) = Positive) ->
     ((((m = down) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (single_value(x) = 0.0)) and
      ((m = up) -> (single_value(x) = min_single)))) and
    ((single_sign(x) = Negative) ->
     ((((m = up) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (single_value(x) = 0.0)) and
      ((m = down) -> (single_value(x) = (-min_single)))))))

predicate double_underflow_value(m: mode, x: double) =
  (double_is_finite(x) and
   (((double_sign(x) = Positive) ->
     ((((m = down) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (double_value(x) = 0.0)) and
      ((m = up) -> (double_value(x) = min_double)))) and
    ((double_sign(x) = Negative) ->
     ((((m = up) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (double_value(x) = 0.0)) and
      ((m = down) -> (double_value(x) = (-min_double)))))))

predicate single_sign_zero_result(m: mode, x: single) =
  ((single_value(x) = 0.0) ->
   (((m = down) -> (single_sign(x) = Negative)) and
    ((m <> down) -> (single_sign(x) = Positive))))

predicate double_sign_zero_result(m: mode, x: double) =
  ((double_value(x) = 0.0) ->
   (((m = down) -> (double_sign(x) = Negative)) and
    ((m <> down) -> (double_sign(x) = Positive))))

predicate le_single_full(x: single, y: single) =
  ((single_is_finite(x) and
    (single_is_finite(y) and (single_value(x) <= single_value(y)))) or
   ((single_is_minus_infinity(x) and single_is_not_NaN(y)) or
    (single_is_not_NaN(x) and single_is_plus_infinity(y))))

predicate lt_single_full(x: single, y: single) =
  ((single_is_finite(x) and
    (single_is_finite(y) and (single_value(x) < single_value(y)))) or
   ((single_is_minus_infinity(x) and
     (single_is_not_NaN(y) and (not single_is_minus_infinity(y)))) or
    (single_is_not_NaN(x) and
     ((not single_is_plus_infinity(x)) and single_is_plus_infinity(y)))))

predicate ge_single_full(x: single, y: single) = le_single_full(y, x)

predicate gt_single_full(x: single, y: single) = lt_single_full(y, x)

predicate eq_single_full(x: single, y: single) =
  (single_is_not_NaN(x) and
   (single_is_not_NaN(y) and
    ((single_is_finite(x) and
      (single_is_finite(y) and (single_value(x) = single_value(y)))) or
     (single_is_infinite(x) and
      (single_is_infinite(y) and single_same_sign(x, y))))))

predicate ne_single_full(x: single, y: single) = (not eq_single_full(x, y))

predicate le_double_full(x: double, y: double) =
  ((double_is_finite(x) and
    (double_is_finite(y) and (double_value(x) <= double_value(y)))) or
   ((double_is_minus_infinity(x) and double_is_not_NaN(y)) or
    (double_is_not_NaN(x) and double_is_plus_infinity(y))))

predicate lt_double_full(x: double, y: double) =
  ((double_is_finite(x) and
    (double_is_finite(y) and (double_value(x) < double_value(y)))) or
   ((double_is_minus_infinity(x) and
     (double_is_not_NaN(y) and (not double_is_minus_infinity(y)))) or
    (double_is_not_NaN(x) and
     ((not double_is_plus_infinity(x)) and double_is_plus_infinity(y)))))

predicate ge_double_full(x: double, y: double) = le_double_full(y, x)

predicate gt_double_full(x: double, y: double) = lt_double_full(y, x)

predicate eq_double_full(x: double, y: double) =
  (double_is_not_NaN(x) and
   (double_is_not_NaN(y) and
    ((double_is_finite(x) and
      (double_is_finite(y) and (double_value(x) = double_value(y)))) or
     (double_is_infinite(x) and
      (double_is_infinite(y) and double_same_sign(x, y))))))

predicate ne_double_full(x: double, y: double) = (not eq_double_full(x, y))

axiom le_lt_double_trans:
  (forall x:double.
    (forall y:double.
      (forall z:double.
        ((le_double_full(x, y) and lt_double_full(y, z)) -> lt_double_full(x,
         z)))))

axiom lt_le_double_trans:
  (forall x:double.
    (forall y:double.
      (forall z:double.
        ((lt_double_full(x, y) and le_double_full(y, z)) -> lt_double_full(x,
         z)))))

axiom round_single1:
  (forall m:mode.
    (forall x:real.
      (no_overflow_single(m, x) ->
       (single_is_finite(round_single_logic(m, x)) and
        (single_value(round_single_logic(m, x)) = round_single(m, x))))))

axiom round_single2:
  (forall m:mode.
    (forall x:real.
      ((not no_overflow_single(m, x)) ->
       (single_same_sign_real(round_single_logic(m, x), x) and
        single_overflow_value(m, round_single_logic(m, x))))))

axiom round_single3:
  (forall m:mode.
    (forall x:real. (single_exact(round_single_logic(m, x)) = x)))

axiom round_single4:
  (forall m:mode.
    (forall x:real. (single_model(round_single_logic(m, x)) = x)))

axiom single_of_zero:
  (forall m:mode. single_is_gen_zero(round_single_logic(m, 0.0)))

axiom round_single_logic_le:
  (forall m:mode.
    (forall x:real.
      (single_is_finite(round_single_logic(m, x)) ->
       (abs_real(single_value(round_single_logic(m, x))) <= max_single))))

axiom round_single_no_overflow:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) ->
       (single_is_finite(round_single_logic(m, x)) and
        (single_value(round_single_logic(m, x)) = round_single(m, x))))))

axiom single_positive_constant:
  (forall m:mode.
    (forall x:real.
      (((min_single <= x) and (x <= max_single)) ->
       (single_is_finite(round_single_logic(m, x)) and
        ((single_value(round_single_logic(m, x)) > 0.0) and
         (single_sign(round_single_logic(m, x)) = Positive))))))

axiom single_negative_constant:
  (forall m:mode.
    (forall x:real.
      ((((-max_single) <= x) and (x <= (-min_single))) ->
       (single_is_finite(round_single_logic(m, x)) and
        ((single_value(round_single_logic(m, x)) < 0.0) and
         (single_sign(round_single_logic(m, x)) = Negative))))))

axiom round_double1:
  (forall m:mode.
    (forall x:real.
      (no_overflow_double(m, x) ->
       (double_is_finite(round_double_logic(m, x)) and
        (double_value(round_double_logic(m, x)) = round_double(m, x))))))

axiom round_double2:
  (forall m:mode.
    (forall x:real.
      ((not no_overflow_double(m, x)) ->
       (double_same_sign_real(round_double_logic(m, x), x) and
        double_overflow_value(m, round_double_logic(m, x))))))

axiom round_double3:
  (forall m:mode.
    (forall x:real. (double_exact(round_double_logic(m, x)) = x)))

axiom round_double4:
  (forall m:mode.
    (forall x:real. (double_model(round_double_logic(m, x)) = x)))

axiom double_of_zero:
  (forall m:mode. double_is_gen_zero(round_double_logic(m, 0.0)))

axiom round_double_logic_le:
  (forall m:mode.
    (forall x:real.
      (double_is_finite(round_double_logic(m, x)) ->
       (abs_real(double_value(round_double_logic(m, x))) <= max_double))))

axiom round_double_no_overflow:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) ->
       (double_is_finite(round_double_logic(m, x)) and
        (double_value(round_double_logic(m, x)) = round_double(m, x))))))

axiom double_positive_constant:
  (forall m:mode.
    (forall x:real.
      (((min_double <= x) and (x <= max_double)) ->
       (double_is_finite(round_double_logic(m, x)) and
        ((double_value(round_double_logic(m, x)) > 0.0) and
         (double_sign(round_double_logic(m, x)) = Positive))))))

axiom double_negative_constant:
  (forall m:mode.
    (forall x:real.
      ((((-max_double) <= x) and (x <= (-min_double))) ->
       (double_is_finite(round_double_logic(m, x)) and
        ((double_value(round_double_logic(m, x)) < 0.0) and
         (double_sign(round_double_logic(m, x)) = Negative))))))

axiom single_is_gen_zero_comp1:
  (forall x:single.
    (forall y:single.
      ((single_is_gen_zero(x) and
        ((single_value(x) = single_value(y)) and single_is_finite(y))) ->
       single_is_gen_zero(y))))

axiom single_is_gen_zero_comp2:
  (forall x:single.
    (forall y:single.
      ((single_is_finite(x) and
        ((not single_is_gen_zero(x)) and (single_value(x) = single_value(y)))) ->
       (not single_is_gen_zero(y)))))

axiom double_is_gen_zero_comp1:
  (forall x:double.
    (forall y:double.
      ((double_is_gen_zero(x) and
        ((double_value(x) = double_value(y)) and double_is_finite(y))) ->
       double_is_gen_zero(y))))

axiom double_is_gen_zero_comp2:
  (forall x:double.
    (forall y:double.
      ((double_is_finite(x) and
        ((not double_is_gen_zero(x)) and (double_value(x) = double_value(y)))) ->
       (not double_is_gen_zero(y)))))

type charP

type int8

type padding

type uint8

type unsigned_charP

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

predicate dif_sign(x_2: double, y_1: double) =
  (double_sign(x_2) <> double_sign(y_1))

predicate double_le_real(x_1_0: double, y_1_0: real) =
  ((double_is_finite(x_1_0) and (double_value(x_1_0) <= y_1_0)) or
   double_is_minus_infinity(x_1_0))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint8 : uint8 -> int

predicate eq_uint8(x: uint8, y: uint8) =
  (integer_of_uint8(x) = integer_of_uint8(y))

predicate real_le_double(x_2_0: real, y_2: double) =
  ((double_is_finite(y_2) and (x_2_0 <= double_value(y_2))) or
   double_is_plus_infinity(y_2))

predicate in_interval(a: real, l: double, u: double) =
  (double_le_real(l, a) and real_le_double(a, u))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8 [(integer_of_int8(x) = integer_of_int8(y))].
      ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate is_interval(xl: double, xu: double) =
  ((double_is_finite(xl) or double_is_minus_infinity(xl)) and
   (double_is_finite(xu) or double_is_plus_infinity(xu)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate sam_sign(x_0_0: double, y_0_0: double) =
  (double_sign(x_0_0) = double_sign(y_0_0))

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint8_of_integer : int -> uint8

axiom uint8_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 255)) -> (integer_of_uint8(uint8_of_integer(x)) = x)))

axiom uint8_extensionality:
  (forall x:uint8.
    (forall y:uint8 [(integer_of_uint8(x) = integer_of_uint8(y))].
      ((integer_of_uint8(x) = integer_of_uint8(y)) -> (x = y))))

axiom uint8_range:
  (forall x:uint8.
    ((0 <= integer_of_uint8(x)) and (integer_of_uint8(x) <= 255)))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

