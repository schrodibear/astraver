Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only interval_arith.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD interval_arith.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir interval_arith.jessie
[jessie] File interval_arith.jessie/interval_arith.jc written.
[jessie] File interval_arith.jessie/interval_arith.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol
# FloatModel = full
# FloatRoundingMode = downward

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

double min(double x, double y)
  requires (C_3 : ((C_4 : (! \is_NaN_double(x))) &&
                    (C_5 : (! \is_NaN_double(y)))));
behavior default:
  assumes true;
  ensures (C_6 : (((C_8 : \le_double(\result, x)) &&
                    (C_9 : \le_double(\result, y))) &&
                   (C_10 : (\eq_double(\result, x) || \eq_double(\result, y)))));
{  
   (var double tmp);
   
   {  (if (x < y) then (C_2 : (tmp = x)) else (C_1 : (tmp = y)));
      
      (return tmp)
   }
}

double max(double x_2, double y_2)
  requires (C_13 : ((C_14 : (! \is_NaN_double(x_2))) &&
                     (C_15 : (! \is_NaN_double(y_2)))));
behavior default:
  assumes true;
  ensures (C_16 : (((C_18 : \le_double(x_2, \result)) &&
                     (C_19 : \le_double(y_2, \result))) &&
                    (C_20 : (\eq_double(\result, x_2) ||
                              \eq_double(\result, y_2)))));
{  
   (var double tmp_0);
   
   {  (if (x_2 > y_2) then (C_12 : (tmp_0 = x_2)) else (C_11 : (tmp_0 = y_2)));
      
      (return tmp_0)
   }
}

logic dif_sign(double x, double y) =
(\sign_double(x) != \sign_double(y))

logic sam_sign(double x_0, double y_0) =
(\sign_double(x_0) == \sign_double(y_0))

logic double_le_real(double x_1, real y_1) =
((\is_finite_double(x_1) && ((x_1 :> real) <= y_1)) ||
  \is_minus_infinity_double(x_1))

logic real_le_double(real x_2, double y_2) =
((\is_finite_double(y_2) && (x_2 <= (y_2 :> real))) ||
  \is_plus_infinity_double(y_2))

logic in_interval(real a, double l, double u) =
(double_le_real(l, a) && real_le_double(a, u))

double mul_dn(double x_1, double y_1)
  requires (C_23 : ((((C_26 : (! \is_NaN_double(x_1))) &&
                       (C_27 : (! \is_NaN_double(y_1)))) &&
                      (C_28 : (\is_infinite_double(x_1) ==>
                                (((y_1 :> real) != 0.0) &&
                                  dif_sign(x_1, y_1))))) &&
                     (C_29 : (\is_infinite_double(y_1) ==>
                               (((x_1 :> real) != 0.0) && dif_sign(x_1, y_1))))));
behavior default:
  assumes true;
  assigns \nothing;
  ensures (C_30 : double_le_real(\result, ((x_1 :> real) * (y_1 :> real))));
{  
   (var double z);
   
   {  (C_22 : (z = (C_21 : (x_1 * y_1))));
      
      (return z)
   }
}

double mul_up(double x_0, double y_0)
  requires (C_37 : ((((((C_42 : (! \is_NaN_double(x_0))) &&
                         (C_43 : (! \is_NaN_double(y_0)))) &&
                        (C_44 : sam_sign(x_0, y_0))) &&
                       (C_45 : (\is_infinite_double(x_0) ==>
                                 (((y_0 :> real) != 0.0) &&
                                   (\real_abs((y_0 :> real)) >= 0x1.0p-1074))))) &&
                      (C_46 : (\is_infinite_double(y_0) ==>
                                ((x_0 :> real) != 0.0)))) &&
                     (C_47 : (((\is_finite_double(y_0) &&
                                 (! \no_overflow(\Double(), \Down(),
                                                 (- (y_0 :> real))))) &&
                                (\sign_double(y_0) == \Positive())) ==>
                               ((x_0 :> real) != 0.0)))));
behavior default:
  assumes true;
  ensures (C_48 : real_le_double(((x_0 :> real) * (y_0 :> real)), \result));
{  
   (var double a);
   
   (var double b);
   
   (var double z_0);
   
   {  (C_32 : (a = (C_31 : (- y_0))));
      (C_34 : (b = (C_33 : (x_0 * a))));
      (C_36 : (z_0 = (C_35 : (- b))));
      
      (return z_0)
   }
}

double zl;

double zu;

logic is_interval(double xl, double xu) =
((\is_finite_double(xl) || \is_minus_infinity_double(xl)) &&
  (\is_finite_double(xu) || \is_plus_infinity_double(xu)))

unit add(double xl, double xu, double yl, double yu)
  requires (C_55 : ((C_56 : is_interval(xl, xu)) &&
                     (C_57 : is_interval(yl, yu))));
behavior default:
  assumes true;
  ensures (C_58 : ((C_59 : is_interval(zl, zu)) &&
                    (C_60 : (\forall real a_0;
                              (\forall real b;
                                ((in_interval(a_0, xl, xu) &&
                                   in_interval(b, yl, yu)) ==>
                                  in_interval((a_0 + b), zl, zu)))))));
{  
   {  (C_50 : (zl = (C_49 : (xl + yl))));
      (C_54 : (zu = (C_53 : (- (C_52 : ((C_51 : (- xu)) - yu))))));
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs interval_arith.jessie/interval_arith.cloc interval_arith.jessie/interval_arith.jc
type char_P

type int8

type padding

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic bitvector_of_char_P: char_P pointer -> bitvector

logic char_P_of_bitvector: bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_int8: int8 -> bitvector

logic int8_of_bitvector: bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector :
 (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_void_P: void_P pointer -> bitvector

logic void_P_of_bitvector: bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_of_bitvector_of_bitvector_of_char_P :
 (forall x:char_P pointer. (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate dif_sign(x_0:gen_float,
 y_0:gen_float) =
 (float_sign(x_0) <> float_sign(y_0))

predicate double_le_real(x_1:gen_float,
 y_1:real) =
 ((is_finite(x_1) and le_real(float_value(x_1), y_1))
 or is_minus_infinity(x_1))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

predicate real_le_double(x_2_0:real,
 y_2_0:gen_float) =
 ((is_finite(y_2_0) and le_real(x_2_0, float_value(y_2_0)))
 or is_plus_infinity(y_2_0))

predicate in_interval(a:real,
 l:gen_float,
 u:gen_float) =
 (double_le_real(l, a) and real_le_double(a, u))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_of_bitvector_of_bitvector_of_int8 :
 (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate is_interval(xl:gen_float,
 xu:gen_float) =
 ((is_finite(xl) or is_minus_infinity(xl))
 and (is_finite(xu) or is_plus_infinity(xu)))

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate sam_sign(x_0_0:gen_float,
 y_0_0:gen_float) =
 (float_sign(x_0_0) = float_sign(y_0_0))

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_bitvector_of_bitvector_of_void_P :
 (forall x:void_P pointer. (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter zu : gen_float ref

parameter zl : gen_float ref

parameter add :
 xl_0:gen_float ->
  xu_0:gen_float ->
   yl:gen_float ->
    yu:gen_float ->
     { } unit reads zl,zu writes zl,zu
     { ((true = true) ->
        (JC_104:
        ((JC_102: is_interval(zl, zu))
        and (JC_103:
            (forall a_0_0:real.
             (forall b_0:real.
              ((in_interval(a_0_0, xl_0, xu_0) and in_interval(b_0, yl, yu)) ->
               in_interval(add_real(a_0_0, b_0), zl, zu)))))))) }

parameter add_requires :
 xl_0:gen_float ->
  xu_0:gen_float ->
   yl:gen_float ->
    yu:gen_float ->
     { (JC_93:
       ((JC_91: is_interval(xl_0, xu_0)) and (JC_92: is_interval(yl, yu))))}
     unit reads zl,zu writes zl,zu
     { ((true = true) ->
        (JC_104:
        ((JC_102: is_interval(zl, zu))
        and (JC_103:
            (forall a_0_0:real.
             (forall b_0:real.
              ((in_interval(a_0_0, xl_0, xu_0) and in_interval(b_0, yl, yu)) ->
               in_interval(add_real(a_0_0, b_0), zl, zu)))))))) }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int8 : unit -> { } int8 { true }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter max :
 x_2:gen_float ->
  y_2:gen_float ->
   { } gen_float
   { ((true = true) ->
      (JC_34:
      ((JC_31: float_le_float(x_2, result))
      and ((JC_32: float_le_float(y_2, result))
          and (JC_33:
              (float_eq_float(result, x_2) or float_eq_float(result, y_2))))))) }

parameter max_requires :
 x_2:gen_float ->
  y_2:gen_float ->
   { (JC_21: ((JC_19: (not is_NaN(x_2))) and (JC_20: (not is_NaN(y_2)))))}
   gen_float
   { ((true = true) ->
      (JC_34:
      ((JC_31: float_le_float(x_2, result))
      and ((JC_32: float_le_float(y_2, result))
          and (JC_33:
              (float_eq_float(result, x_2) or float_eq_float(result, y_2))))))) }

parameter min :
 x:gen_float ->
  y:gen_float ->
   { } gen_float
   { ((true = true) ->
      (JC_16:
      ((JC_13: float_le_float(result, x))
      and ((JC_14: float_le_float(result, y))
          and (JC_15:
              (float_eq_float(result, x) or float_eq_float(result, y))))))) }

parameter min_requires :
 x:gen_float ->
  y:gen_float ->
   { (JC_3: ((JC_1: (not is_NaN(x))) and (JC_2: (not is_NaN(y)))))} gen_float
   { ((true = true) ->
      (JC_16:
      ((JC_13: float_le_float(result, x))
      and ((JC_14: float_le_float(result, y))
          and (JC_15:
              (float_eq_float(result, x) or float_eq_float(result, y))))))) }

parameter mul_dn :
 x_1_0:gen_float ->
  y_1_0:gen_float ->
   { } gen_float
   { ((true = true) ->
      (JC_51:
      double_le_real(result,
      mul_real(float_value(x_1_0), float_value(y_1_0))))) }

parameter mul_dn_requires :
 x_1_0:gen_float ->
  y_1_0:gen_float ->
   { (JC_41:
     ((JC_37: (not is_NaN(x_1_0)))
     and ((JC_38: (not is_NaN(y_1_0)))
         and ((JC_39:
              (is_infinite(x_1_0) ->
               (neq_real(float_value(y_1_0), 0.0) and dif_sign(x_1_0, y_1_0))))
             and (JC_40:
                 (is_infinite(y_1_0) ->
                  (neq_real(float_value(x_1_0), 0.0)
                  and dif_sign(x_1_0, y_1_0))))))))}
   gen_float
   { ((true = true) ->
      (JC_51:
      double_le_real(result,
      mul_real(float_value(x_1_0), float_value(y_1_0))))) }

parameter mul_up :
 x_0_1:gen_float ->
  y_0_1:gen_float ->
   { } gen_float
   { ((true = true) ->
      (JC_76:
      real_le_double(mul_real(float_value(x_0_1), float_value(y_0_1)),
      result))) }

parameter mul_up_requires :
 x_0_1:gen_float ->
  y_0_1:gen_float ->
   { (JC_65:
     ((JC_59: (not is_NaN(x_0_1)))
     and ((JC_60: (not is_NaN(y_0_1)))
         and ((JC_61: sam_sign(x_0_1, y_0_1))
             and ((JC_62:
                  (is_infinite(x_0_1) ->
                   (neq_real(float_value(y_0_1), 0.0)
                   and ge_real(abs_real(float_value(y_0_1)), 0x1.0p-1074))))
                 and ((JC_63:
                      (is_infinite(y_0_1) ->
                       neq_real(float_value(x_0_1), 0.0)))
                     and (JC_64:
                         ((is_finite(y_0_1)
                          and ((not no_overflow(Double, down,
                                    neg_real(float_value(y_0_1))))
                              and (float_sign(y_0_1) = Positive))) ->
                          neq_real(float_value(x_0_1), 0.0)))))))))}
   gen_float
   { ((true = true) ->
      (JC_76:
      real_le_double(mul_real(float_value(x_0_1), float_value(y_0_1)),
      result))) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let add_ensures_default =
 fun (xl_0 : gen_float) (xu_0 : gen_float) (yl : gen_float) (yu : gen_float) ->
  { ((true = true)
    and (JC_97:
        ((JC_95: is_interval(xl_0, xu_0)) and (JC_96: is_interval(yl, yu))))) }
  (init:
  try
   begin
     (C_50:
     begin
       (let jessie_15 = (zl := (C_49:
                               (JC_116:
                               ((((add_gen_float Double) down) xl_0) yl)))) in
       void);
      (C_54:
      begin
        (let jessie_16 = (zu := (C_53:
                                (JC_122:
                                (((neg_gen_float Double) down) (C_52:
                                                               (JC_121:
                                                               ((((sub_gen_float Double) down) 
                                                                 (C_51:
                                                                 (JC_120:
                                                                 (((neg_gen_float Double) down) xu_0)))) yu))))))) in
        void);
       (raise Return)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_101:
    ((JC_99: is_interval(zl, zu))
    and (JC_100:
        (forall a_0_0:real.
         (forall b_0:real.
          ((in_interval(a_0_0, xl_0, xu_0) and in_interval(b_0, yl, yu)) ->
           in_interval(add_real(a_0_0, b_0), zl, zu))))))) }

let add_safety =
 fun (xl_0 : gen_float) (xu_0 : gen_float) (yl : gen_float) (yu : gen_float) ->
  { (JC_97:
    ((JC_95: is_interval(xl_0, xu_0)) and (JC_96: is_interval(yl, yu)))) }
  (init:
  try
   begin
     (C_50:
     begin
       (let jessie_13 = (zl := (C_49:
                               (JC_108:
                               ((((add_gen_float Double) down) xl_0) yl)))) in
       void);
      (C_54:
      begin
        (let jessie_14 = (zu := (C_53:
                                (JC_114:
                                (((neg_gen_float Double) down) (C_52:
                                                               (JC_113:
                                                               ((((sub_gen_float Double) down) 
                                                                 (C_51:
                                                                 (JC_112:
                                                                 (((neg_gen_float Double) down) xu_0)))) yu))))))) in
        void);
       (raise Return)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let max_ensures_default =
 fun (x_2 : gen_float) (y_2 : gen_float) ->
  { ((true = true)
    and (JC_25: ((JC_23: (not is_NaN(x_2))) and (JC_24: (not is_NaN(y_2)))))) }
  (init:
  (let return = ref (any_gen_float Double) in
  try
   begin
     (let tmp_0 = ref (any_gen_float Double) in
     begin
       (let jessie_4 = (if ((gt_gen_float x_2) y_2)
                       then (C_12: begin   (tmp_0 := x_2); !tmp_0 end)
                       else (C_11: begin   (tmp_0 := y_2); !tmp_0 end)) in
       void);
      (return := !tmp_0);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_30:
    ((JC_27: float_le_float(x_2, result))
    and ((JC_28: float_le_float(y_2, result))
        and (JC_29:
            (float_eq_float(result, x_2) or float_eq_float(result, y_2)))))) }

let max_safety =
 fun (x_2 : gen_float) (y_2 : gen_float) ->
  { (JC_25: ((JC_23: (not is_NaN(x_2))) and (JC_24: (not is_NaN(y_2))))) }
  (init:
  (let return = ref (any_gen_float Double) in
  try
   begin
     (let tmp_0 = ref (any_gen_float Double) in
     begin
       (let jessie_3 = (if ((gt_gen_float x_2) y_2)
                       then (C_12: begin   (tmp_0 := x_2); !tmp_0 end)
                       else (C_11: begin   (tmp_0 := y_2); !tmp_0 end)) in
       void);
      (return := !tmp_0);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let min_ensures_default =
 fun (x : gen_float) (y : gen_float) ->
  { ((true = true)
    and (JC_7: ((JC_5: (not is_NaN(x))) and (JC_6: (not is_NaN(y)))))) }
  (init:
  (let return = ref (any_gen_float Double) in
  try
   begin
     (let tmp = ref (any_gen_float Double) in
     begin
       (let jessie_2 = (if ((lt_gen_float x) y)
                       then (C_2: begin   (tmp := x); !tmp end)
                       else (C_1: begin   (tmp := y); !tmp end)) in
       void);
      (return := !tmp);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_12:
    ((JC_9: float_le_float(result, x))
    and ((JC_10: float_le_float(result, y))
        and (JC_11: (float_eq_float(result, x) or float_eq_float(result, y)))))) }

let min_safety =
 fun (x : gen_float) (y : gen_float) ->
  { (JC_7: ((JC_5: (not is_NaN(x))) and (JC_6: (not is_NaN(y))))) }
  (init:
  (let return = ref (any_gen_float Double) in
  try
   begin
     (let tmp = ref (any_gen_float Double) in
     begin
       (let jessie_1 = (if ((lt_gen_float x) y)
                       then (C_2: begin   (tmp := x); !tmp end)
                       else (C_1: begin   (tmp := y); !tmp end)) in
       void);
      (return := !tmp);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let mul_dn_ensures_default =
 fun (x_1_0 : gen_float) (y_1_0 : gen_float) ->
  { ((true = true)
    and (JC_47:
        ((JC_43: (not is_NaN(x_1_0)))
        and ((JC_44: (not is_NaN(y_1_0)))
            and ((JC_45:
                 (is_infinite(x_1_0) ->
                  (neq_real(float_value(y_1_0), 0.0)
                  and dif_sign(x_1_0, y_1_0))))
                and (JC_46:
                    (is_infinite(y_1_0) ->
                     (neq_real(float_value(x_1_0), 0.0)
                     and dif_sign(x_1_0, y_1_0))))))))) }
  (init:
  (let return = ref (any_gen_float Double) in
  try
   begin
     (let z = ref (any_gen_float Double) in
     (C_22:
     begin
       (let jessie_6 = (z := (C_21:
                             (JC_58:
                             ((((mul_gen_float Double) down) x_1_0) y_1_0)))) in
       void);
      (return := !z);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_49:
    double_le_real(result, mul_real(float_value(x_1_0), float_value(y_1_0)))) }

let mul_dn_safety =
 fun (x_1_0 : gen_float) (y_1_0 : gen_float) ->
  { (JC_47:
    ((JC_43: (not is_NaN(x_1_0)))
    and ((JC_44: (not is_NaN(y_1_0)))
        and ((JC_45:
             (is_infinite(x_1_0) ->
              (neq_real(float_value(y_1_0), 0.0) and dif_sign(x_1_0, y_1_0))))
            and (JC_46:
                (is_infinite(y_1_0) ->
                 (neq_real(float_value(x_1_0), 0.0)
                 and dif_sign(x_1_0, y_1_0)))))))) }
  (init:
  (let return = ref (any_gen_float Double) in
  try
   begin
     (let z = ref (any_gen_float Double) in
     (C_22:
     begin
       (let jessie_5 = (z := (C_21:
                             (JC_56:
                             ((((mul_gen_float Double) down) x_1_0) y_1_0)))) in
       void);
      (return := !z);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let mul_up_ensures_default =
 fun (x_0_1 : gen_float) (y_0_1 : gen_float) ->
  { ((true = true)
    and (JC_73:
        ((JC_67: (not is_NaN(x_0_1)))
        and ((JC_68: (not is_NaN(y_0_1)))
            and ((JC_69: sam_sign(x_0_1, y_0_1))
                and ((JC_70:
                     (is_infinite(x_0_1) ->
                      (neq_real(float_value(y_0_1), 0.0)
                      and ge_real(abs_real(float_value(y_0_1)), 0x1.0p-1074))))
                    and ((JC_71:
                         (is_infinite(y_0_1) ->
                          neq_real(float_value(x_0_1), 0.0)))
                        and (JC_72:
                            ((is_finite(y_0_1)
                             and ((not no_overflow(Double, down,
                                       neg_real(float_value(y_0_1))))
                                 and (float_sign(y_0_1) = Positive))) ->
                             neq_real(float_value(x_0_1), 0.0)))))))))) }
  (init:
  (let return = ref (any_gen_float Double) in
  try
   begin
     (let a_0 = ref (any_gen_float Double) in
     (let b = ref (any_gen_float Double) in
     (let z_0 = ref (any_gen_float Double) in
     (C_32:
     begin
       (let jessie_10 = (a_0 := (C_31:
                                (JC_86:
                                (((neg_gen_float Double) down) y_0_1)))) in
       void);
      (C_34:
      begin
        (let jessie_11 = (b := (C_33:
                               (JC_88:
                               ((((mul_gen_float Double) down) x_0_1) !a_0)))) in
        void);
       (C_36:
       begin
         (let jessie_12 = (z_0 := (C_35:
                                  (JC_90: (((neg_gen_float Double) down) !b)))) in
         void);
        (return := !z_0);
        (raise Return)
       end)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_75:
    real_le_double(mul_real(float_value(x_0_1), float_value(y_0_1)), result)) }

let mul_up_safety =
 fun (x_0_1 : gen_float) (y_0_1 : gen_float) ->
  { (JC_73:
    ((JC_67: (not is_NaN(x_0_1)))
    and ((JC_68: (not is_NaN(y_0_1)))
        and ((JC_69: sam_sign(x_0_1, y_0_1))
            and ((JC_70:
                 (is_infinite(x_0_1) ->
                  (neq_real(float_value(y_0_1), 0.0)
                  and ge_real(abs_real(float_value(y_0_1)), 0x1.0p-1074))))
                and ((JC_71:
                     (is_infinite(y_0_1) ->
                      neq_real(float_value(x_0_1), 0.0)))
                    and (JC_72:
                        ((is_finite(y_0_1)
                         and ((not no_overflow(Double, down,
                                   neg_real(float_value(y_0_1))))
                             and (float_sign(y_0_1) = Positive))) ->
                         neq_real(float_value(x_0_1), 0.0))))))))) }
  (init:
  (let return = ref (any_gen_float Double) in
  try
   begin
     (let a_0 = ref (any_gen_float Double) in
     (let b = ref (any_gen_float Double) in
     (let z_0 = ref (any_gen_float Double) in
     (C_32:
     begin
       (let jessie_7 = (a_0 := (C_31:
                               (JC_80: (((neg_gen_float Double) down) y_0_1)))) in
       void);
      (C_34:
      begin
        (let jessie_8 = (b := (C_33:
                              (JC_82:
                              ((((mul_gen_float Double) down) x_0_1) !a_0)))) in
        void);
       (C_36:
       begin
         (let jessie_9 = (z_0 := (C_35:
                                 (JC_84: (((neg_gen_float Double) down) !b)))) in
         void);
        (return := !z_0);
        (raise Return)
       end)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C interval_arith.jessie --quiet -f interval_arith.makefile project
why --project [...] why/interval_arith.why
<project name="interval_arith" context="why/interval_arith_ctx.why">
  <function name="Function mul_up">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Default behavior">
    <goal why_file="why/interval_arith_po10.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "79" begin = "12" end = "41"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
  </function>
  <function name="Function mul_dn">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Default behavior">
    <goal why_file="why/interval_arith_po9.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "49" begin = "12" end = "39"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
  </function>
  <function name="Function min">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Default behavior">
    <goal why_file="why/interval_arith_po6.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "7" begin = "12" end = "32"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/interval_arith_po7.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "7" begin = "36" end = "56"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/interval_arith_po8.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "9" begin = "12" end = "56"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
  </function>
  <function name="Function max">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Default behavior">
    <goal why_file="why/interval_arith_po3.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "17" begin = "12" end = "32"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/interval_arith_po4.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "17" begin = "36" end = "56"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/interval_arith_po5.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "19" begin = "12" end = "56"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
  </function>
  <function name="Function add">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Default behavior">
    <goal why_file="why/interval_arith_po1.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "143" begin = "12" end = "30"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/interval_arith_po2.why">
      <location file = "PPCHOME/tests/jessie/interval_arith.c" line = "145" begin = "12" end = "117"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

logic sqrt_real : real -> real

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null :  -> 'a1 pointer

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_positive: (forall p:'a1 pointer. (0 <= address(p)))

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

type mode

logic nearest_even :  -> mode

logic to_zero :  -> mode

logic up :  -> mode

logic down :  -> mode

logic nearest_away :  -> mode

axiom no_other_mode:
  (forall m:mode.
    ((m = nearest_even) or
     ((m = to_zero) or ((m = up) or ((m = down) or (m = nearest_away))))))

axiom mode_distinct:
  ((nearest_even <> to_zero) and
   ((nearest_even <> up) and
    ((nearest_even <> down) and
     ((nearest_even <> nearest_away) and
      ((to_zero <> up) and
       ((to_zero <> down) and
        ((to_zero <> nearest_away) and
         ((up <> down) and ((up <> nearest_away) and (down <> nearest_away))))))))))

type float_format

logic Single :  -> float_format

logic Double :  -> float_format

logic Binary80 :  -> float_format

logic Quad :  -> float_format

type gen_float

logic round_float : float_format, mode, real -> real

logic gen_float_of_real_logic : float_format, mode, real -> gen_float

logic float_value : gen_float -> real

logic exact_value : gen_float -> real

logic model_value : gen_float -> real

logic max_gen_float : float_format -> real

logic min_gen_float : float_format -> real

axiom max_single: (max_gen_float(Single) = 0x1.FFFFFEp127)

axiom max_double: (max_gen_float(Double) = 0x1.FFFFFFFFFFFFFp1023)

axiom max_binary80: (max_gen_float(Binary80) = 0x1.FFFFFFFFFFFFFFFEp16383)

axiom min_single: (min_gen_float(Single) = 0x1.p-149)

axiom min_double: (min_gen_float(Double) = 0x1.p-1074)

predicate no_overflow(f: float_format, m: mode, x: real) =
  (abs_real(round_float(f, m, x)) <= max_gen_float(f))

axiom bounded_real_no_overflow:
  (forall f:float_format.
    (forall m:mode.
      (forall x:real.
        ((abs_real(x) <= max_gen_float(f)) -> no_overflow(f, m, x)))))

axiom round_down_le:
  (forall f:float_format. (forall x:real. (round_float(f, down, x) <= x)))

axiom round_up_ge:
  (forall f:float_format. (forall x:real. (round_float(f, up, x) >= x)))

axiom round_down_neg:
  (forall f:float_format.
    (forall x:real. (round_float(f, down, (-x)) = (-round_float(f, up, x)))))

axiom round_up_neg:
  (forall f:float_format.
    (forall x:real. (round_float(f, up, (-x)) = (-round_float(f, down, x)))))

axiom round_idempotent:
  (forall f:float_format.
    (forall m1:mode.
      (forall m2:mode.
        (forall x:real. (round_float(f, m1, round_float(f, m2,
          x)) = round_float(f, m2, x))))))

type Float_class

logic Finite :  -> Float_class

logic Infinite :  -> Float_class

logic NaN :  -> Float_class

axiom no_other_class:
  (forall f:Float_class. ((f = Finite) or ((f = Infinite) or (f = NaN))))

axiom class_distinct:
  ((Finite <> Infinite) and ((Finite <> NaN) and (Infinite <> NaN)))

type sign

logic Negative :  -> sign

logic Positive :  -> sign

axiom no_other_sign: (forall s:sign. ((s = Negative) or (s = Positive)))

axiom sign_distinct: (Negative <> Positive)

logic float_class : gen_float -> Float_class

logic float_sign : gen_float -> sign

inductive same_sign_real_bool: sign, real -> prop =
  | neg_case: (forall x:real.
                ((x < 0.0) -> same_sign_real_bool(Negative, x)))
  | pos_case: (forall x:real.
                ((x > 0.0) -> same_sign_real_bool(Positive, x)))



axiom sign_not_pos_neg:
  (forall x:gen_float.
    ((float_sign(x) <> Positive) -> (float_sign(x) = Negative)))

axiom sign_not_neg_pos:
  (forall x:gen_float.
    ((float_sign(x) <> Negative) -> (float_sign(x) = Positive)))

axiom same_sign_real_bool_zero1:
  (forall b:sign. (not same_sign_real_bool(b, 0.0)))

axiom same_sign_real_bool_zero2:
  (forall x:real.
    ((same_sign_real_bool(Negative, x) and same_sign_real_bool(Positive, x)) ->
     false))

axiom same_sign_real_bool_zero3:
  (forall b:sign. (forall x:real. (same_sign_real_bool(b, x) -> (x <> 0.0))))

axiom same_sign_real_bool_correct2:
  (forall b:sign.
    (forall x:real.
      (same_sign_real_bool(b, x) -> ((x < 0.0) <-> (b = Negative)))))

axiom same_sign_real_bool_correct3:
  (forall b:sign.
    (forall x:real.
      (same_sign_real_bool(b, x) -> ((x > 0.0) <-> (b = Positive)))))

predicate same_sign_real(x: gen_float, y: real) =
  same_sign_real_bool(float_sign(x), y)

predicate same_sign(x: gen_float, y: gen_float) =
  (float_sign(x) = float_sign(y))

predicate diff_sign(x: gen_float, y: gen_float) =
  (float_sign(x) <> float_sign(y))

predicate product_sign(z: gen_float, x: gen_float, y: gen_float) =
  ((same_sign(x, y) -> (float_sign(z) = Positive)) and
   (diff_sign(x, y) -> (float_sign(z) = Negative)))

predicate same_class(x: gen_float, y: gen_float) =
  (float_class(x) = float_class(y))

predicate diff_class(x: gen_float, y: gen_float) =
  (float_class(x) <> float_class(y))

axiom finite_sign:
  (forall x:gen_float.
    (((float_class(x) = Finite) and (float_value(x) <> 0.0)) ->
     same_sign_real(x, float_value(x))))

axiom finite_sign_neg1:
  (forall x:gen_float.
    (((float_class(x) = Finite) and (float_value(x) < 0.0)) ->
     (float_sign(x) = Negative)))

axiom finite_sign_neg2:
  (forall x:gen_float.
    (((float_class(x) = Finite) and
      ((float_value(x) <> 0.0) and (float_sign(x) = Negative))) ->
     (float_value(x) < 0.0)))

axiom finite_sign_pos1:
  (forall x:gen_float.
    (((float_class(x) = Finite) and (float_value(x) > 0.0)) ->
     (float_sign(x) = Positive)))

axiom finite_sign_pos2:
  (forall x:gen_float.
    (((float_class(x) = Finite) and
      ((float_value(x) <> 0.0) and (float_sign(x) = Positive))) ->
     (float_value(x) > 0.0)))

axiom diff_sign_trans:
  (forall x:gen_float.
    (forall y:gen_float.
      (forall z:gen_float.
        ((diff_sign(x, y) and diff_sign(y, z)) -> same_sign(x, z)))))

axiom same_sign_product:
  (forall x:gen_float.
    (forall y:gen_float.
      (((float_class(x) = Finite) and
        ((float_class(y) = Finite) and same_sign(x, y))) ->
       ((float_value(x) * float_value(y)) >= 0.0))))

axiom diff_sign_product:
  (forall x:gen_float.
    (forall y:gen_float.
      (((float_class(x) = Finite) and
        ((float_class(y) = Finite) and
         ((float_value(x) * float_value(y)) < 0.0))) ->
       diff_sign(x, y))))

predicate is_finite(x: gen_float) = (float_class(x) = Finite)

predicate is_infinite(x: gen_float) = (float_class(x) = Infinite)

predicate is_NaN(x: gen_float) = (float_class(x) = NaN)

predicate is_not_NaN(x: gen_float) = (is_finite(x) or is_infinite(x))

predicate is_minus_infinity(x: gen_float) =
  (is_infinite(x) and (float_sign(x) = Negative))

predicate is_plus_infinity(x: gen_float) =
  (is_infinite(x) and (float_sign(x) = Positive))

predicate is_gen_zero(x: gen_float) =
  (is_finite(x) and (float_value(x) = 0.0))

predicate is_gen_zero_plus(x: gen_float) =
  (is_gen_zero(x) and (float_sign(x) = Positive))

predicate is_gen_zero_minus(x: gen_float) =
  (is_gen_zero(x) and (float_sign(x) = Negative))

predicate overflow_value(f: float_format, m: mode, x: gen_float) =
  (((m = down) ->
    (((float_sign(x) = Negative) -> is_infinite(x)) and
     ((float_sign(x) = Positive) ->
      (is_finite(x) and (float_value(x) = max_gen_float(f)))))) and
   (((m = up) ->
     (((float_sign(x) = Negative) ->
       (is_finite(x) and (float_value(x) = (-max_gen_float(f))))) and
      ((float_sign(x) = Positive) -> is_infinite(x)))) and
    (((m = to_zero) ->
      (is_finite(x) and
       (((float_sign(x) = Negative) -> (float_value(x) = (-max_gen_float(f)))) and
        ((float_sign(x) = Positive) -> (float_value(x) = max_gen_float(f)))))) and
     (((m = nearest_away) or (m = nearest_even)) -> is_infinite(x)))))

predicate underflow_value(f: float_format, m: mode, x: gen_float) =
  (is_finite(x) and
   (((float_sign(x) = Positive) ->
     ((((m = down) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (float_value(x) = 0.0)) and
      ((m = up) -> (float_value(x) = min_gen_float(f))))) and
    ((float_sign(x) = Negative) ->
     ((((m = up) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (float_value(x) = 0.0)) and
      ((m = down) -> (float_value(x) = (-min_gen_float(f))))))))

predicate sign_zero_result(m: mode, x: gen_float) =
  ((float_value(x) = 0.0) ->
   (((m = down) -> (float_sign(x) = Negative)) and
    ((m <> down) -> (float_sign(x) = Positive))))

predicate float_le_float(x: gen_float, y: gen_float) =
  ((is_finite(x) and (is_finite(y) and (float_value(x) <= float_value(y)))) or
   ((is_minus_infinity(x) and is_not_NaN(y)) or
    (is_not_NaN(x) and is_plus_infinity(y))))

predicate float_lt_float(x: gen_float, y: gen_float) =
  ((is_finite(x) and (is_finite(y) and (float_value(x) < float_value(y)))) or
   ((is_minus_infinity(x) and (is_not_NaN(y) and (not is_minus_infinity(y)))) or
    (is_not_NaN(x) and ((not is_plus_infinity(x)) and is_plus_infinity(y)))))

predicate float_ge_float(x: gen_float, y: gen_float) = float_le_float(y, x)

predicate float_gt_float(x: gen_float, y: gen_float) = float_lt_float(y, x)

predicate float_eq_float(x: gen_float, y: gen_float) =
  (is_not_NaN(x) and
   (is_not_NaN(y) and
    ((is_finite(x) and (is_finite(y) and (float_value(x) = float_value(y)))) or
     (is_infinite(x) and (is_infinite(y) and same_sign(x, y))))))

predicate float_ne_float(x: gen_float, y: gen_float) = (not float_eq_float(x,
  y))

axiom a1:
  (forall f:float_format.
    (forall m:mode.
      (forall x:real.
        (no_overflow(f, m, x) ->
         (is_finite(gen_float_of_real_logic(f, m, x)) and
          (float_value(gen_float_of_real_logic(f, m, x)) = round_float(f, m,
          x)))))))

axiom a2:
  (forall f:float_format.
    (forall m:mode.
      (forall x:real.
        ((not no_overflow(f, m, x)) ->
         (same_sign_real(gen_float_of_real_logic(f, m, x), x) and
          overflow_value(f, m, gen_float_of_real_logic(f, m, x)))))))

axiom a3:
  (forall f:float_format.
    (forall m:mode.
      (forall x:real. (exact_value(gen_float_of_real_logic(f, m, x)) = x))))

axiom a4:
  (forall f:float_format.
    (forall m:mode.
      (forall x:real. (model_value(gen_float_of_real_logic(f, m, x)) = x))))

axiom gen_float_of_zero:
  (forall f:float_format.
    (forall m:mode. is_gen_zero(gen_float_of_real_logic(f, m, 0.0))))

axiom finite_gen_float_of_real_logic:
  (forall f:float_format.
    (forall m:mode.
      (forall x:real.
        (is_finite(gen_float_of_real_logic(f, m, x)) ->
         (abs_real(float_value(gen_float_of_real_logic(f, m,
         x))) <= max_gen_float(f))))))

axiom gen_bounded_real_no_overflow:
  (forall f:float_format.
    (forall m:mode.
      (forall x:real.
        ((abs_real(x) <= max_gen_float(f)) ->
         (is_finite(gen_float_of_real_logic(f, m, x)) and
          (float_value(gen_float_of_real_logic(f, m, x)) = round_float(f, m,
          x)))))))

axiom gen_positive_constant:
  (forall f:float_format.
    (forall m:mode.
      (forall x:real.
        (((min_gen_float(f) <= x) and (x <= max_gen_float(f))) ->
         (is_finite(gen_float_of_real_logic(f, m, x)) and
          ((float_value(gen_float_of_real_logic(f, m, x)) > 0.0) and
           (float_sign(gen_float_of_real_logic(f, m, x)) = Positive)))))))

axiom gen_negative_constant:
  (forall f:float_format.
    (forall m:mode.
      (forall x:real.
        ((((-max_gen_float(f)) <= x) and (x <= (-min_gen_float(f)))) ->
         (is_finite(gen_float_of_real_logic(f, m, x)) and
          ((float_value(gen_float_of_real_logic(f, m, x)) < 0.0) and
           (float_sign(gen_float_of_real_logic(f, m, x)) = Negative)))))))

axiom is_gen_zero_comp1:
  (forall x:gen_float.
    (forall y:gen_float.
      ((is_gen_zero(x) and
        ((float_value(x) = float_value(y)) and is_finite(y))) ->
       is_gen_zero(y))))

axiom is_gen_zero_comp2:
  (forall x:gen_float.
    (forall y:gen_float.
      ((is_finite(x) and
        ((not is_gen_zero(x)) and (float_value(x) = float_value(y)))) ->
       (not is_gen_zero(y)))))

function gen_round_error(x: gen_float) : real =
  abs_real((float_value(x) - exact_value(x)))

function gen_relative_error(x: gen_float) : real =
  (abs_real((float_value(x) - exact_value(x))) / exact_value(x))

function gen_total_error(x: gen_float) : real =
  abs_real((float_value(x) - model_value(x)))

type char_P

type int8

type padding

type void_P

logic bitvector_of_char_P : char_P pointer -> bitvector

logic char_P_of_bitvector : bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector:
  (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_int8 : int8 -> bitvector

logic int8_of_bitvector : bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector:
  (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_void_P : void_P pointer -> bitvector

logic void_P_of_bitvector : bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector:
  (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic char_P_tag :  -> char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

axiom char_P_of_bitvector_of_bitvector_of_char_P:
  (forall x:char_P pointer.
    (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

predicate dif_sign(x_0: gen_float, y_0: gen_float) =
  (float_sign(x_0) <> float_sign(y_0))

predicate double_le_real(x_1: gen_float, y_1: real) =
  ((is_finite(x_1) and (float_value(x_1) <= y_1)) or is_minus_infinity(x_1))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

predicate real_le_double(x_2_0: real, y_2_0: gen_float) =
  ((is_finite(y_2_0) and (x_2_0 <= float_value(y_2_0))) or
   is_plus_infinity(y_2_0))

predicate in_interval(a: real, l: gen_float, u: gen_float) =
  (double_le_real(l, a) and real_le_double(a, u))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_of_bitvector_of_bitvector_of_int8:
  (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate is_interval(xl: gen_float, xu: gen_float) =
  ((is_finite(xl) or is_minus_infinity(xl)) and
   (is_finite(xu) or is_plus_infinity(xu)))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate sam_sign(x_0_0: gen_float, y_0_0: gen_float) =
  (float_sign(x_0_0) = float_sign(y_0_0))

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag :  -> void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_bitvector_of_bitvector_of_void_P:
  (forall x:void_P pointer.
    (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

