Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only string_basic.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD string_basic.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir string_basic.jessie
[jessie] File string_basic.jessie/string_basic.jc written.
[jessie] File string_basic.jessie/string_basic.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

char_P[0..4] __string_toto;

invariant valid___string_toto :
((\offset_min(__string_toto) <= 0) && (\offset_max(__string_toto) >= 4))

int32 endsat(char_P[..] p, int32 i)
  requires (C_9 : ((C_10 : (\offset_min(p) <= i)) &&
                    (C_11 : (\offset_max(p) >= i))));
behavior default:
  ensures (C_6 : true);
behavior ok:
  assumes ((p + i).char_M == 0);
  ensures (C_7 : (\result == 1));
behavior ko:
  assumes ((p + i).char_M != 0);
  ensures (C_8 : (\result == 0));
{  
   (var int32 __retres);
   
   {  (if ((C_4 : ((C_3 : (C_2 : (p + i)).char_M) :> int32)) == 0) then 
      {  (C_1 : (__retres = 1));
         
         (goto return_label)
      } else ());
      (C_5 : (__retres = 0));
      (return_label : 
      (return __retres))
   }
}

char_P[0..4] gtoto;

invariant valid_gtoto :
((\offset_min(gtoto) <= 0) && (\offset_max(gtoto) >= 4))

unit test1()
behavior default:
  ensures (C_15 : true);
{  
   (var int32 r1);
   
   {  (C_13 : (r1 = (C_12 : endsat(gtoto, 4))));
      
      {  
         (assert for default: (C_14 : (r1 == 1)));
         ()
      };
      
      (return ())
   }
}

unit test2()
behavior default:
  ensures (C_32 : true);
{  
   (var char_P[0..4] ltoto);
   
   (var int32 r1_0);
   
   {  (C_17 : (ltoto = (C_16 : (new char_P[5]))));
      (C_19 : ((C_18 : (ltoto + 0).char_M) = 116));
      (C_21 : ((C_20 : (ltoto + 1).char_M) = 111));
      (C_23 : ((C_22 : (ltoto + 2).char_M) = 116));
      (C_25 : ((C_24 : (ltoto + 3).char_M) = 111));
      (C_27 : ((C_26 : (ltoto + 4).char_M) = 0));
      (C_29 : (r1_0 = (C_28 : endsat(ltoto, 4))));
      
      {  
         (assert for default: (C_30 : (r1_0 == 1)));
         ()
      };
      
      {  (C_31 : (free(ltoto)));
         
         (return ())
      }
   }
}

char_P[..] gptoto;

unit test1ptr()
behavior default:
  ensures (C_36 : true);
{  
   (var int32 r1_1);
   
   {  (C_34 : (r1_1 = (C_33 : endsat(gptoto, 4))));
      
      {  
         (assert for default: (C_35 : (r1_1 == 1)));
         ()
      };
      
      (return ())
   }
}

unit test2ptr()
behavior default:
  ensures (C_41 : true);
{  
   (var char_P[..] lptoto);
   
   (var int32 r1_2);
   
   {  (C_37 : (lptoto = __string_toto));
      (C_39 : (r1_2 = (C_38 : endsat(lptoto, 4))));
      
      {  
         (assert for default: (C_40 : (r1_2 == 1)));
         ()
      };
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs string_basic.jessie/string_basic.cloc string_basic.jessie/string_basic.jc
type __string_toto_1

type char_P

type gptoto_3

type gtoto_2

type int32

type int8

type padding

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic __string_toto:  -> char_P pointer

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic gptoto:  -> char_P pointer

logic gtoto:  -> char_P pointer

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_char_P(p:char_P pointer, a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer, a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer, b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer, b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid___string_toto(char_P___string_toto_1_alloc_table:char_P alloc_table) =
 (le_int(offset_min(char_P___string_toto_1_alloc_table, __string_toto), (0))
 and ge_int(offset_max(char_P___string_toto_1_alloc_table, __string_toto),
     (4)))

predicate valid_bitvector_struct_char_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_gtoto(char_P_gtoto_2_alloc_table:char_P alloc_table) =
 (le_int(offset_min(char_P_gtoto_2_alloc_table, gtoto), (0))
 and ge_int(offset_max(char_P_gtoto_2_alloc_table, gtoto), (4)))

predicate valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter char_P___string_toto_1_alloc_table : char_P alloc_table ref

parameter char_P_char_M___string_toto_1 : (char_P, int8) memory ref

parameter char_P_char_M_gptoto_3 : (char_P, int8) memory ref

parameter char_P_char_M_gtoto_2 : (char_P, int8) memory ref

parameter char_P_gptoto_3_alloc_table : char_P alloc_table ref

parameter char_P_gtoto_2_alloc_table : char_P alloc_table ref

parameter endsat :
 p:char_P pointer ->
  i:int32 ->
   char_P_p_4_alloc_table:char_P alloc_table ->
    char_P_char_M_p_4:(char_P, int8) memory ->
     { } int32
     reads char_P___string_toto_1_alloc_table,char_P_gtoto_2_alloc_table
     { ((JC_32:
        ((JC_30: valid___string_toto(char_P___string_toto_1_alloc_table))
        and (JC_31: valid_gtoto(char_P_gtoto_2_alloc_table))))
       and ((neq_int(integer_of_int8(select(char_P_char_M_p_4@,
                                     shift(p@, integer_of_int32(i@)))),
             (0)) ->
             (JC_48:
             ((JC_45: eq_int(integer_of_int32(result), (0)))
             and ((JC_46:
                  valid___string_toto(char_P___string_toto_1_alloc_table))
                 and (JC_47: valid_gtoto(char_P_gtoto_2_alloc_table))))))
           and (eq_int(integer_of_int8(select(char_P_char_M_p_4@,
                                       shift(p@, integer_of_int32(i@)))),
                (0)) ->
                (JC_40:
                ((JC_37: eq_int(integer_of_int32(result), (1)))
                and ((JC_38:
                     valid___string_toto(char_P___string_toto_1_alloc_table))
                    and (JC_39: valid_gtoto(char_P_gtoto_2_alloc_table)))))))) }

parameter endsat_requires :
 p:char_P pointer ->
  i:int32 ->
   char_P_p_4_alloc_table:char_P alloc_table ->
    char_P_char_M_p_4:(char_P, int8) memory ->
     { (JC_16:
       ((JC_13:
        ((JC_11:
         le_int(offset_min(char_P_p_4_alloc_table, p), integer_of_int32(i)))
        and (JC_12:
            ge_int(offset_max(char_P_p_4_alloc_table, p),
            integer_of_int32(i)))))
       and ((JC_14: valid___string_toto(char_P___string_toto_1_alloc_table))
           and (JC_15: valid_gtoto(char_P_gtoto_2_alloc_table)))))}
     int32
     reads char_P___string_toto_1_alloc_table,char_P_gtoto_2_alloc_table
     { ((JC_32:
        ((JC_30: valid___string_toto(char_P___string_toto_1_alloc_table))
        and (JC_31: valid_gtoto(char_P_gtoto_2_alloc_table))))
       and ((neq_int(integer_of_int8(select(char_P_char_M_p_4@,
                                     shift(p@, integer_of_int32(i@)))),
             (0)) ->
             (JC_48:
             ((JC_45: eq_int(integer_of_int32(result), (0)))
             and ((JC_46:
                  valid___string_toto(char_P___string_toto_1_alloc_table))
                 and (JC_47: valid_gtoto(char_P_gtoto_2_alloc_table))))))
           and (eq_int(integer_of_int8(select(char_P_char_M_p_4@,
                                       shift(p@, integer_of_int32(i@)))),
                (0)) ->
                (JC_40:
                ((JC_37: eq_int(integer_of_int32(result), (1)))
                and ((JC_38:
                     valid___string_toto(char_P___string_toto_1_alloc_table))
                    and (JC_39: valid_gtoto(char_P_gtoto_2_alloc_table)))))))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter test1 :
 tt:unit ->
  { } unit
  reads char_P___string_toto_1_alloc_table,char_P_char_M_gtoto_2,char_P_gtoto_2_alloc_table
  { (JC_66:
    ((JC_64: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_65: valid_gtoto(char_P_gtoto_2_alloc_table)))) }

parameter test1_requires :
 tt:unit ->
  { (JC_53:
    ((JC_51: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_52: valid_gtoto(char_P_gtoto_2_alloc_table))))}
  unit
  reads char_P___string_toto_1_alloc_table,char_P_char_M_gtoto_2,char_P_gtoto_2_alloc_table
  { (JC_66:
    ((JC_64: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_65: valid_gtoto(char_P_gtoto_2_alloc_table)))) }

parameter test1ptr :
 tt:unit ->
  { } unit
  reads char_P___string_toto_1_alloc_table,char_P_char_M_gptoto_3,char_P_gptoto_3_alloc_table,char_P_gtoto_2_alloc_table
  { (JC_109:
    ((JC_107: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_108: valid_gtoto(char_P_gtoto_2_alloc_table)))) }

parameter test1ptr_requires :
 tt:unit ->
  { (JC_96:
    ((JC_94: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_95: valid_gtoto(char_P_gtoto_2_alloc_table))))}
  unit
  reads char_P___string_toto_1_alloc_table,char_P_char_M_gptoto_3,char_P_gptoto_3_alloc_table,char_P_gtoto_2_alloc_table
  { (JC_109:
    ((JC_107: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_108: valid_gtoto(char_P_gtoto_2_alloc_table)))) }

parameter test2 :
 tt:unit ->
  { } unit
  reads char_P___string_toto_1_alloc_table,char_P_gtoto_2_alloc_table
  { (JC_86:
    ((JC_84: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_85: valid_gtoto(char_P_gtoto_2_alloc_table)))) }

parameter test2_requires :
 tt:unit ->
  { (JC_73:
    ((JC_71: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_72: valid_gtoto(char_P_gtoto_2_alloc_table))))}
  unit reads char_P___string_toto_1_alloc_table,char_P_gtoto_2_alloc_table
  { (JC_86:
    ((JC_84: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_85: valid_gtoto(char_P_gtoto_2_alloc_table)))) }

parameter test2ptr :
 tt:unit ->
  { } unit
  reads char_P___string_toto_1_alloc_table,char_P_char_M___string_toto_1,char_P_gtoto_2_alloc_table
  { (JC_129:
    ((JC_127: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_128: valid_gtoto(char_P_gtoto_2_alloc_table)))) }

parameter test2ptr_requires :
 tt:unit ->
  { (JC_116:
    ((JC_114: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_115: valid_gtoto(char_P_gtoto_2_alloc_table))))}
  unit
  reads char_P___string_toto_1_alloc_table,char_P_char_M___string_toto_1,char_P_gtoto_2_alloc_table
  { (JC_129:
    ((JC_127: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_128: valid_gtoto(char_P_gtoto_2_alloc_table)))) }

let endsat_ensures_default =
 fun (p : char_P pointer) (i : int32) (char_P_p_4_alloc_table : char_P alloc_table) (char_P_char_M_p_4 : (char_P, int8) memory) ->
  { (JC_23:
    ((JC_20:
     ((JC_18:
      le_int(offset_min(char_P_p_4_alloc_table, p), integer_of_int32(i)))
     and (JC_19:
         ge_int(offset_max(char_P_p_4_alloc_table, p), integer_of_int32(i)))))
    and ((JC_21: valid___string_toto(char_P___string_toto_1_alloc_table))
        and (JC_22: valid_gtoto(char_P_gtoto_2_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_14 =
      begin
        (if ((eq_int_ (integer_of_int32 (C_4:
                                        (safe_int32_of_integer_ (integer_of_int8 
                                                                 (C_3:
                                                                 ((safe_acc_ char_P_char_M_p_4) 
                                                                  (C_2:
                                                                  ((shift p) 
                                                                   (integer_of_int32 i)))))))))) (0))
        then
         (let jessie_11 =
         (C_1:
         begin
           (let jessie_10 = (__retres := (safe_int32_of_integer_ (1))) in
           void); (raise (Return_label_exc void)) end) in void) else void);
       (C_5:
       begin
         (let jessie_13 = (__retres := (safe_int32_of_integer_ (0))) in void);
        (raise (Return_label_exc void)) end) end in void) with
      Return_label_exc jessie_1 ->
      (return_label: begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_25: true) }

let endsat_ensures_ko =
 fun (p : char_P pointer) (i : int32) (char_P_p_4_alloc_table : char_P alloc_table) (char_P_char_M_p_4 : (char_P, int8) memory) ->
  { (neq_int(integer_of_int8(select(char_P_char_M_p_4,
                             shift(p, integer_of_int32(i)))),
     (0))
    and (JC_23:
        ((JC_20:
         ((JC_18:
          le_int(offset_min(char_P_p_4_alloc_table, p), integer_of_int32(i)))
         and (JC_19:
             ge_int(offset_max(char_P_p_4_alloc_table, p),
             integer_of_int32(i)))))
        and ((JC_21: valid___string_toto(char_P___string_toto_1_alloc_table))
            and (JC_22: valid_gtoto(char_P_gtoto_2_alloc_table)))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_28 =
      begin
        (if ((eq_int_ (integer_of_int32 (C_4:
                                        (safe_int32_of_integer_ (integer_of_int8 
                                                                 (C_3:
                                                                 ((safe_acc_ char_P_char_M_p_4) 
                                                                  (C_2:
                                                                  ((shift p) 
                                                                   (integer_of_int32 i)))))))))) (0))
        then
         (let jessie_25 =
         (C_1:
         begin
           (let jessie_24 = (__retres := (safe_int32_of_integer_ (1))) in
           void); (raise (Return_label_exc void)) end) in void) else void);
       (C_5:
       begin
         (let jessie_27 = (__retres := (safe_int32_of_integer_ (0))) in void);
        (raise (Return_label_exc void)) end) end in void) with
      Return_label_exc jessie_1 ->
      (return_label: begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_44:
    ((JC_41: eq_int(integer_of_int32(result), (0)))
    and ((JC_42: valid___string_toto(char_P___string_toto_1_alloc_table))
        and (JC_43: valid_gtoto(char_P_gtoto_2_alloc_table))))) }

let endsat_ensures_ok =
 fun (p : char_P pointer) (i : int32) (char_P_p_4_alloc_table : char_P alloc_table) (char_P_char_M_p_4 : (char_P, int8) memory) ->
  { (eq_int(integer_of_int8(select(char_P_char_M_p_4,
                            shift(p, integer_of_int32(i)))),
     (0))
    and (JC_23:
        ((JC_20:
         ((JC_18:
          le_int(offset_min(char_P_p_4_alloc_table, p), integer_of_int32(i)))
         and (JC_19:
             ge_int(offset_max(char_P_p_4_alloc_table, p),
             integer_of_int32(i)))))
        and ((JC_21: valid___string_toto(char_P___string_toto_1_alloc_table))
            and (JC_22: valid_gtoto(char_P_gtoto_2_alloc_table)))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_21 =
      begin
        (if ((eq_int_ (integer_of_int32 (C_4:
                                        (safe_int32_of_integer_ (integer_of_int8 
                                                                 (C_3:
                                                                 ((safe_acc_ char_P_char_M_p_4) 
                                                                  (C_2:
                                                                  ((shift p) 
                                                                   (integer_of_int32 i)))))))))) (0))
        then
         (let jessie_18 =
         (C_1:
         begin
           (let jessie_17 = (__retres := (safe_int32_of_integer_ (1))) in
           void); (raise (Return_label_exc void)) end) in void) else void);
       (C_5:
       begin
         (let jessie_20 = (__retres := (safe_int32_of_integer_ (0))) in void);
        (raise (Return_label_exc void)) end) end in void) with
      Return_label_exc jessie_1 ->
      (return_label: begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_36:
    ((JC_33: eq_int(integer_of_int32(result), (1)))
    and ((JC_34: valid___string_toto(char_P___string_toto_1_alloc_table))
        and (JC_35: valid_gtoto(char_P_gtoto_2_alloc_table))))) }

let endsat_safety =
 fun (p : char_P pointer) (i : int32) (char_P_p_4_alloc_table : char_P alloc_table) (char_P_char_M_p_4 : (char_P, int8) memory) ->
  { (JC_23:
    ((JC_20:
     ((JC_18:
      le_int(offset_min(char_P_p_4_alloc_table, p), integer_of_int32(i)))
     and (JC_19:
         ge_int(offset_max(char_P_p_4_alloc_table, p), integer_of_int32(i)))))
    and ((JC_21: valid___string_toto(char_P___string_toto_1_alloc_table))
        and (JC_22: valid_gtoto(char_P_gtoto_2_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_7 =
      begin
        (if ((eq_int_ (integer_of_int32 (C_4:
                                        (JC_50:
                                        (int32_of_integer_ (integer_of_int8 
                                                            (C_3:
                                                            (JC_49:
                                                            ((((offset_acc_ char_P_p_4_alloc_table) char_P_char_M_p_4) p) 
                                                             (integer_of_int32 i)))))))))) (0))
        then
         (let jessie_4 =
         (C_1:
         begin
           (let jessie_3 = (__retres := (safe_int32_of_integer_ (1))) in
           void); (raise (Return_label_exc void)) end) in void) else void);
       (C_5:
       begin
         (let jessie_6 = (__retres := (safe_int32_of_integer_ (0))) in void);
        (raise (Return_label_exc void)) end) end in void) with
      Return_label_exc jessie_1 ->
      (return_label: begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_29:
    ((JC_27: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_28: valid_gtoto(char_P_gtoto_2_alloc_table)))) }

let test1_ensures_default =
 fun (tt : unit) ->
  { (JC_57:
    ((JC_55: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_56: valid_gtoto(char_P_gtoto_2_alloc_table)))) }
  (init:
  try
   begin
     (let r1 = ref (any_int32 void) in
     (C_13:
     begin
       (let jessie_37 =
       (r1 := (C_12:
              (let jessie_36 = gtoto in
              (let jessie_35 = (safe_int32_of_integer_ (4)) in
              (JC_69:
              ((((endsat jessie_36) jessie_35) !char_P_gtoto_2_alloc_table) !char_P_char_M_gtoto_2)))))) in
       void); (assert { (JC_70: eq_int(integer_of_int32(r1), (1))) }; void);
      void; (raise Return) end)); (raise Return) end with Return -> void end)
  { (JC_59: true) }

let test1_safety =
 fun (tt : unit) ->
  { (JC_57:
    ((JC_55: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_56: valid_gtoto(char_P_gtoto_2_alloc_table)))) }
  (init:
  try
   begin
     (let r1 = ref (any_int32 void) in
     (C_13:
     begin
       (let jessie_33 =
       (r1 := (C_12:
              (let jessie_32 = gtoto in
              (let jessie_31 = (safe_int32_of_integer_ (4)) in
              (JC_67:
              ((((endsat_requires jessie_32) jessie_31) !char_P_gtoto_2_alloc_table) !char_P_char_M_gtoto_2)))))) in
       void);
      [ { } unit reads r1 { (JC_68: eq_int(integer_of_int32(r1), (1))) } ];
      void; (raise Return) end)); (raise Return) end with Return -> void end)
  { (JC_63:
    ((JC_61: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_62: valid_gtoto(char_P_gtoto_2_alloc_table)))) }

let test1ptr_ensures_default =
 fun (tt : unit) ->
  { (JC_100:
    ((JC_98: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_99: valid_gtoto(char_P_gtoto_2_alloc_table)))) }
  (init:
  try
   begin
     (let r1_1 = ref (any_int32 void) in
     (C_34:
     begin
       (let jessie_117 =
       (r1_1 := (C_33:
                (let jessie_116 = gptoto in
                (let jessie_115 = (safe_int32_of_integer_ (4)) in
                (JC_112:
                ((((endsat jessie_116) jessie_115) !char_P_gptoto_3_alloc_table) !char_P_char_M_gptoto_3)))))) in
       void);
      (assert { (JC_113: eq_int(integer_of_int32(r1_1), (1))) }; void); void;
      (raise Return) end)); (raise Return) end with Return -> void end)
  { (JC_102: true) }

let test1ptr_safety =
 fun (tt : unit) ->
  { (JC_100:
    ((JC_98: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_99: valid_gtoto(char_P_gtoto_2_alloc_table)))) }
  (init:
  try
   begin
     (let r1_1 = ref (any_int32 void) in
     (C_34:
     begin
       (let jessie_113 =
       (r1_1 := (C_33:
                (let jessie_112 = gptoto in
                (let jessie_111 = (safe_int32_of_integer_ (4)) in
                (JC_110:
                ((((endsat_requires jessie_112) jessie_111) !char_P_gptoto_3_alloc_table) !char_P_char_M_gptoto_3)))))) in
       void);
      [ { } unit reads r1_1 { (JC_111: eq_int(integer_of_int32(r1_1), (1))) } ];
      void; (raise Return) end)); (raise Return) end with Return -> void end)
  { (JC_106:
    ((JC_104: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_105: valid_gtoto(char_P_gtoto_2_alloc_table)))) }

let test2_ensures_default =
 fun (tt : unit) ->
  { (JC_77:
    ((JC_75: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_76: valid_gtoto(char_P_gtoto_2_alloc_table)))) }
  (init:
  try
   begin
     (let char_P_char_M_ltoto_5 = ref (any_memory void) in
     (let char_P_ltoto_5_tag_table = ref (any_tag_table void) in
     (let char_P_ltoto_5_alloc_table = ref (any_alloc_table void) in
     (let ltoto = ref (any_pointer void) in
     (let r1_0 = ref (any_int32 void) in
     (C_17:
     begin
       (let jessie_75 =
       (ltoto := (C_16:
                 (JC_91:
                 (((alloc_struct_char_P (5)) char_P_ltoto_5_alloc_table) char_P_ltoto_5_tag_table)))) in
       void);
      (C_19:
      begin
        (let jessie_81 =
        (let jessie_77 = (safe_int8_of_integer_ (116)) in
        (let jessie_80 = ((shift !ltoto) (0)) in
        (((safe_upd_ char_P_char_M_ltoto_5) jessie_80) jessie_77))) in void);
       (C_21:
       begin
         (let jessie_87 =
         (let jessie_83 = (safe_int8_of_integer_ (111)) in
         (let jessie_86 = ((shift !ltoto) (1)) in
         (((safe_upd_ char_P_char_M_ltoto_5) jessie_86) jessie_83))) in void);
        (C_23:
        begin
          (let jessie_93 =
          (let jessie_89 = (safe_int8_of_integer_ (116)) in
          (let jessie_92 = ((shift !ltoto) (2)) in
          (((safe_upd_ char_P_char_M_ltoto_5) jessie_92) jessie_89))) in
          void);
         (C_25:
         begin
           (let jessie_99 =
           (let jessie_95 = (safe_int8_of_integer_ (111)) in
           (let jessie_98 = ((shift !ltoto) (3)) in
           (((safe_upd_ char_P_char_M_ltoto_5) jessie_98) jessie_95))) in
           void);
          (C_27:
          begin
            (let jessie_105 =
            (let jessie_101 = (safe_int8_of_integer_ (0)) in
            (let jessie_104 = ((shift !ltoto) (4)) in
            (((safe_upd_ char_P_char_M_ltoto_5) jessie_104) jessie_101))) in
            void);
           (C_29:
           begin
             (let jessie_109 =
             (r1_0 := (C_28:
                      (let jessie_108 = !ltoto in
                      (let jessie_107 = (safe_int32_of_integer_ (4)) in
                      (JC_92:
                      ((((endsat jessie_108) jessie_107) !char_P_ltoto_5_alloc_table) !char_P_char_M_ltoto_5)))))) in
             void);
            (assert { (JC_93: eq_int(integer_of_int32(r1_0), (1))) }; void);
            void;
            (C_31:
            begin
              ((safe_free_parameter char_P_ltoto_5_alloc_table) !ltoto);
             (raise Return) end) end) end) end) end) end) end) end))))));
    (raise Return) end with Return -> void end) { (JC_79: true) }

let test2_safety =
 fun (tt : unit) ->
  { (JC_77:
    ((JC_75: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_76: valid_gtoto(char_P_gtoto_2_alloc_table)))) }
  (init:
  try
   begin
     (let char_P_char_M_ltoto_5 = ref (any_memory void) in
     (let char_P_ltoto_5_tag_table = ref (any_tag_table void) in
     (let char_P_ltoto_5_alloc_table = ref (any_alloc_table void) in
     (let ltoto = ref (any_pointer void) in
     (let r1_0 = ref (any_int32 void) in
     (C_17:
     begin
       (let jessie_39 =
       (ltoto := (let jessie_38 =
                 (C_16:
                 (JC_87:
                 (((alloc_struct_char_P_requires (5)) char_P_ltoto_5_alloc_table) char_P_ltoto_5_tag_table))) in
                 (JC_88:
                 (assert
                 { ge_int(offset_max(char_P_ltoto_5_alloc_table, jessie_38),
                   (4)) }; jessie_38)))) in void);
      (C_19:
      begin
        (let jessie_45 =
        (let jessie_41 = (safe_int8_of_integer_ (116)) in
        (let jessie_44 = ((shift !ltoto) (0)) in
        (((safe_upd_ char_P_char_M_ltoto_5) jessie_44) jessie_41))) in void);
       (C_21:
       begin
         (let jessie_51 =
         (let jessie_47 = (safe_int8_of_integer_ (111)) in
         (let jessie_50 = ((shift !ltoto) (1)) in
         (((safe_upd_ char_P_char_M_ltoto_5) jessie_50) jessie_47))) in void);
        (C_23:
        begin
          (let jessie_57 =
          (let jessie_53 = (safe_int8_of_integer_ (116)) in
          (let jessie_56 = ((shift !ltoto) (2)) in
          (((safe_upd_ char_P_char_M_ltoto_5) jessie_56) jessie_53))) in
          void);
         (C_25:
         begin
           (let jessie_63 =
           (let jessie_59 = (safe_int8_of_integer_ (111)) in
           (let jessie_62 = ((shift !ltoto) (3)) in
           (((safe_upd_ char_P_char_M_ltoto_5) jessie_62) jessie_59))) in
           void);
          (C_27:
          begin
            (let jessie_69 =
            (let jessie_65 = (safe_int8_of_integer_ (0)) in
            (let jessie_68 = ((shift !ltoto) (4)) in
            (((safe_upd_ char_P_char_M_ltoto_5) jessie_68) jessie_65))) in
            void);
           (C_29:
           begin
             (let jessie_73 =
             (r1_0 := (C_28:
                      (let jessie_72 = !ltoto in
                      (let jessie_71 = (safe_int32_of_integer_ (4)) in
                      (JC_89:
                      ((((endsat_requires jessie_72) jessie_71) !char_P_ltoto_5_alloc_table) !char_P_char_M_ltoto_5)))))) in
             void);
            [ { } unit reads r1_0
              { (JC_90: eq_int(integer_of_int32(r1_0), (1))) } ]; void;
            (C_31:
            begin
              ((free_parameter char_P_ltoto_5_alloc_table) !ltoto);
             (raise Return) end) end) end) end) end) end) end) end))))));
    (raise Return) end with Return -> void end)
  { (JC_83:
    ((JC_81: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_82: valid_gtoto(char_P_gtoto_2_alloc_table)))) }

let test2ptr_ensures_default =
 fun (tt : unit) ->
  { (JC_120:
    ((JC_118: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_119: valid_gtoto(char_P_gtoto_2_alloc_table)))) }
  (init:
  try
   begin
     (let lptoto = ref (any_pointer void) in
     (let r1_2 = ref (any_int32 void) in
     (C_37:
     begin
       (let jessie_125 = (lptoto := __string_toto) in void);
      (C_39:
      begin
        (let jessie_129 =
        (r1_2 := (C_38:
                 (let jessie_128 = !lptoto in
                 (let jessie_127 = (safe_int32_of_integer_ (4)) in
                 (JC_132:
                 ((((endsat jessie_128) jessie_127) !char_P___string_toto_1_alloc_table) !char_P_char_M___string_toto_1)))))) in
        void);
       (assert { (JC_133: eq_int(integer_of_int32(r1_2), (1))) }; void);
       void; (raise Return) end) end))); (raise Return) end with Return ->
   void end) { (JC_122: true) }

let test2ptr_safety =
 fun (tt : unit) ->
  { (JC_120:
    ((JC_118: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_119: valid_gtoto(char_P_gtoto_2_alloc_table)))) }
  (init:
  try
   begin
     (let lptoto = ref (any_pointer void) in
     (let r1_2 = ref (any_int32 void) in
     (C_37:
     begin
       (let jessie_119 = (lptoto := __string_toto) in void);
      (C_39:
      begin
        (let jessie_123 =
        (r1_2 := (C_38:
                 (let jessie_122 = !lptoto in
                 (let jessie_121 = (safe_int32_of_integer_ (4)) in
                 (JC_130:
                 ((((endsat_requires jessie_122) jessie_121) !char_P___string_toto_1_alloc_table) !char_P_char_M___string_toto_1)))))) in
        void);
       [ { } unit reads r1_2
         { (JC_131: eq_int(integer_of_int32(r1_2), (1))) } ]; void;
       (raise Return) end) end))); (raise Return) end with Return -> void end)
  { (JC_126:
    ((JC_124: valid___string_toto(char_P___string_toto_1_alloc_table))
    and (JC_125: valid_gtoto(char_P_gtoto_2_alloc_table)))) }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C string_basic.jessie --quiet -f string_basic.makefile project
why --project [...] why/string_basic.why
<project name="string_basic" context="why/string_basic_ctx.why">
  <function name="Function test2ptr">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/string_basic_po26.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "39" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/string_basic_po27.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "39" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/string_basic_po25.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "40" begin = "13" end = "20"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
  </function>
  <function name="Function test2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/string_basic_po20.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "25" begin = "7" end = "12"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/string_basic_po21.why">
      <location file = "why/string_basic.why" line = "795" begin = "19" end = "100"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/string_basic_po22.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "26" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/string_basic_po23.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "26" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/string_basic_po24.why">
      <location file = "why/string_basic.why" line = "843" begin = "15" end = "65"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/string_basic_po19.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "27" begin = "13" end = "20"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
  </function>
  <function name="Function test1ptr">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/string_basic_po17.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "33" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/string_basic_po18.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "33" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/string_basic_po16.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "34" begin = "13" end = "20"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
  </function>
  <function name="Function test1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/string_basic_po14.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "20" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/string_basic_po15.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "20" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/string_basic_po13.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "21" begin = "13" end = "20"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
  </function>
  <function name="Function endsat">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/string_basic_po7.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "13" begin = "2" end = "4"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/string_basic_po8.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "13" begin = "2" end = "4"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/string_basic_po9.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "13" begin = "2" end = "4"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/string_basic_po10.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "13" begin = "2" end = "4"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/string_basic_po11.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "12" begin = "4" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/string_basic_po12.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "12" begin = "4" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `ok'">
    <goal why_file="why/string_basic_po4.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "7" begin = "14" end = "26"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/string_basic_po5.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "12" begin = "4" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/string_basic_po6.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "12" begin = "4" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `ko'">
    <goal why_file="why/string_basic_po1.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "10" begin = "14" end = "26"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/string_basic_po2.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "12" begin = "4" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/string_basic_po3.why">
      <location file = "PPCHOME/tests/jessie/string_basic.c" line = "12" begin = "4" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type __string_toto_1

type char_P

type gptoto_3

type gtoto_2

type int32

type int8

type padding

type void_P

logic __string_toto : char_P pointer

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic gptoto : char_P pointer

logic gtoto : char_P pointer

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid___string_toto(char_P___string_toto_1_alloc_table: char_P alloc_table) =
  ((offset_min(char_P___string_toto_1_alloc_table, __string_toto) <= 0) and
   (offset_max(char_P___string_toto_1_alloc_table, __string_toto) >= 4))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_gtoto(char_P_gtoto_2_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_gtoto_2_alloc_table, gtoto) <= 0) and
   (offset_max(char_P_gtoto_2_alloc_table, gtoto) >= 4))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

