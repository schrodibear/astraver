Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only bts0303.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD bts0303.c"
bts0303.c:28:[kernel] warning: Variable-sized local variable a
[jessie] Starting Jessie translation
[kernel] No code for function __builtin_alloca, default assigns generated
[jessie] Producing Jessie files in subdir bts0303.jessie
[jessie] File bts0303.jessie/bts0303.jc written.
[jessie] File bts0303.jessie/bts0303.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint32 = 0..4294967295

type int32 = -2147483648..2147483647

type int8 = -128..127

tag int_P = {
  int32 int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

char_P[..] __builtin_alloca(uint32 unnamed)
behavior default:
  assigns \nothing;
  ensures (C_1 : true);
;

unit Swap(int_P[..] p, int_P[..] q)
  requires (C_9 : (((C_11 : (\offset_min(p) <= 0)) &&
                     (C_12 : (\offset_max(p) >= 0))) &&
                    ((C_14 : (\offset_min(q) <= 0)) &&
                      (C_15 : (\offset_max(q) >= 0)))));
behavior default:
  assigns p.int_M,
  q.int_M;
  ensures (C_16 : ((C_17 : (p.int_M == \old(q.int_M))) &&
                    (C_18 : (q.int_M == \old(p.int_M)))));
{  
   (var int32 temp);
   
   {  (C_3 : (temp = (C_2 : p.int_M)));
      (C_6 : ((C_5 : p.int_M) = (C_4 : q.int_M)));
      (C_8 : ((C_7 : q.int_M) = temp));
      
      (return ())
   }
}

unit Foo()
behavior default:
  ensures (C_42 : true);
{  
   (var int32 n);
   
   (var int_P[..] a);
   
   (var uint32 __lengthofa);
   
   (var int32 i);
   
   {  (C_19 : (n = 10));
      
      {  (C_21 : (__lengthofa = (C_20 : (n :> uint32))));
         (C_27 : (let __cil_tmp =
                 (C_24 : __builtin_alloca((C_23 : ((C_22 : (4 * __lengthofa)) :> uint32))))
                 in (C_26 : (a = (C_25 : (__cil_tmp :> int_P[..]))))))
      };
      (C_28 : (i = 0));
      
      {  
         loop 
         while (true)
         {  
            {  (if (i < n) then () else 
               (goto while_0_break));
               (C_31 : ((C_30 : (C_29 : (a + i)).int_M) = 0));
               (C_34 : (i = (C_33 : ((C_32 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      (C_35 : (i = 1));
      
      {  
         loop 
         behavior default:
           
           assigns (a + [0..(n - 1)]).int_M;
         while (true)
         {  
            {  (if (i < n) then () else 
               (goto while_1_break));
               (C_38 : Swap((C_36 : (a + i)), (C_37 : (a + 0))));
               (C_41 : (i = (C_40 : ((C_39 : (i + 1)) :> int32))))
            }
         };
         (while_1_break : ())
      };
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs bts0303.jessie/bts0303.cloc bts0303.jessie/bts0303.jc
type char_P

type int32

type int8

type int_P

type padding

type uint32

type void_P

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic bitvector_of_char_P: char_P pointer -> bitvector

logic char_P_of_bitvector: bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_int32: int32 -> bitvector

logic int32_of_bitvector: bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector :
 (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_int8: int8 -> bitvector

logic int8_of_bitvector: bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector :
 (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_int_P: int_P pointer -> bitvector

logic int_P_of_bitvector: bitvector -> int_P pointer

axiom bitvector_of_int_P_of_int_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_int_P(int_P_of_bitvector(x)) = x))

logic bitvector_of_uint32: uint32 -> bitvector

logic uint32_of_bitvector: bitvector -> uint32

axiom bitvector_of_uint32_of_uint32_of_bitvector :
 (forall x:bitvector. (bitvector_of_uint32(uint32_of_bitvector(x)) = x))

logic bitvector_of_void_P: void_P pointer -> bitvector

logic void_P_of_bitvector: bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_of_bitvector_of_bitvector_of_char_P :
 (forall x:char_P pointer. (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32, y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_of_bitvector_of_bitvector_of_int32 :
 (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_of_bitvector_of_bitvector_of_int8 :
 (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_of_bitvector_of_bitvector_of_int_P :
 (forall x:int_P pointer. (int_P_of_bitvector(bitvector_of_int_P(x)) = x))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

predicate left_valid_struct_char_P(p:char_P pointer, a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_int_P(p:int_P pointer, a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer, a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer, b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_int_P(p:int_P pointer, b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer, b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_of_bitvector_of_bitvector_of_uint32 :
 (forall x:uint32. eq_uint32(uint32_of_bitvector(bitvector_of_uint32(x)), x))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

predicate valid_bitvector_struct_char_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_bitvector_of_bitvector_of_void_P :
 (forall x:void_P pointer. (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter Foo : tt:unit -> { } unit { true }

parameter Foo_requires : tt:unit -> { } unit { true }

parameter Swap :
 p:int_P pointer ->
  q:int_P pointer ->
   int_P_int_M_q_4:(int_P, int32) memory ref ->
    int_P_int_M_p_3:(int_P, int32) memory ref ->
     int_P_q_4_alloc_table:int_P alloc_table ->
      int_P_p_3_alloc_table:int_P alloc_table ->
       { } unit reads int_P_int_M_p_3,int_P_int_M_q_4
       writes int_P_int_M_p_3,int_P_int_M_q_4
       { (JC_36:
         ((JC_32:
          ((JC_30:
           eq_int(integer_of_int32(select(int_P_int_M_p_3, p)),
           integer_of_int32(select(int_P_int_M_q_4@, q@))))
          and (JC_31:
              eq_int(integer_of_int32(select(int_P_int_M_q_4, q)),
              integer_of_int32(select(int_P_int_M_p_3@, p@))))))
         and (JC_35:
             ((JC_33:
              not_assigns(int_P_p_3_alloc_table@, int_P_int_M_p_3@,
              int_P_int_M_p_3, pset_singleton(p@)))
             and (JC_34:
                 not_assigns(int_P_q_4_alloc_table@, int_P_int_M_q_4@,
                 int_P_int_M_q_4, pset_singleton(q@))))))) }

parameter Swap_requires :
 p:int_P pointer ->
  q:int_P pointer ->
   int_P_int_M_q_4:(int_P, int32) memory ref ->
    int_P_int_M_p_3:(int_P, int32) memory ref ->
     int_P_q_4_alloc_table:int_P alloc_table ->
      int_P_p_3_alloc_table:int_P alloc_table ->
       { (JC_15:
         ((JC_11: le_int(offset_min(int_P_p_3_alloc_table, p), (0)))
         and ((JC_12: ge_int(offset_max(int_P_p_3_alloc_table, p), (0)))
             and ((JC_13: le_int(offset_min(int_P_q_4_alloc_table, q), (0)))
                 and (JC_14:
                     ge_int(offset_max(int_P_q_4_alloc_table, q), (0)))))))}
       unit reads int_P_int_M_p_3,int_P_int_M_q_4
       writes int_P_int_M_p_3,int_P_int_M_q_4
       { (JC_36:
         ((JC_32:
          ((JC_30:
           eq_int(integer_of_int32(select(int_P_int_M_p_3, p)),
           integer_of_int32(select(int_P_int_M_q_4@, q@))))
          and (JC_31:
              eq_int(integer_of_int32(select(int_P_int_M_q_4, q)),
              integer_of_int32(select(int_P_int_M_p_3@, p@))))))
         and (JC_35:
             ((JC_33:
              not_assigns(int_P_p_3_alloc_table@, int_P_int_M_p_3@,
              int_P_int_M_p_3, pset_singleton(p@)))
             and (JC_34:
                 not_assigns(int_P_q_4_alloc_table@, int_P_int_M_q_4@,
                 int_P_int_M_q_4, pset_singleton(q@))))))) }

parameter __builtin_alloca : unnamed:uint32 -> { } char_P pointer { true }

parameter __builtin_alloca_requires :
 unnamed:uint32 -> { } char_P pointer { true }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter struct_char_P_alloc_of_bitvector :
 char_P_alloc_table:char_P alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes char_P_alloc_table
   { (forall p:char_P pointer.
      (eq_int(offset_min(char_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (1)))
      and eq_int(offset_max(char_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (1))))) }

parameter struct_char_P_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  char_P_alloc_table:char_P alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:char_P pointer.
      (eq_int(offset_min(char_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (1)))
      and eq_int(offset_max(char_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (1))))) }

parameter struct_char_P_mem_of_bitvector :
 char_P_char_M:(char_P, int8) memory ref ->
  bitvector:(unit, bitvector) memory ->
   { } unit writes char_P_char_M
   { (forall p0:char_P pointer.
      eq_int8(select(char_P_char_M, p0),
      int8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                        (1))))) }

parameter struct_char_P_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref ->
  char_P_char_M:(char_P, int8) memory ->
   { } unit writes bitvector
   { (forall p0:char_P pointer.
      eq_int8(select(char_P_char_M, p0),
      int8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                        (1))))) }

parameter struct_int_P_alloc_of_bitvector :
 int_P_alloc_table:int_P alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes int_P_alloc_table
   { (forall p:int_P pointer.
      (eq_int(offset_min(int_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (4)))
      and eq_int(offset_max(int_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (4))))) }

parameter struct_int_P_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  int_P_alloc_table:int_P alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:int_P pointer.
      (eq_int(offset_min(int_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (4)))
      and eq_int(offset_max(int_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (4))))) }

parameter struct_int_P_mem_of_bitvector :
 int_P_int_M:(int_P, int32) memory ref ->
  bitvector:(unit, bitvector) memory ->
   { } unit writes int_P_int_M
   { (forall p0:int_P pointer.
      eq_int32(select(int_P_int_M, p0),
      int32_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                         (4))))) }

parameter struct_int_P_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref ->
  int_P_int_M:(int_P, int32) memory ->
   { } unit writes bitvector
   { (forall p0:int_P pointer.
      eq_int32(select(int_P_int_M, p0),
      int32_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                         (4))))) }

parameter struct_void_P_alloc_of_bitvector :
 void_P_alloc_table:void_P alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes void_P_alloc_table
   { (forall p:void_P pointer.
      (eq_int(offset_min(void_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(void_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_void_P_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  void_P_alloc_table:void_P alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:void_P pointer.
      (eq_int(offset_min(void_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(void_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_void_P_mem_of_bitvector :
 bitvector:(unit, bitvector) memory -> { } unit { true }

parameter struct_void_P_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref -> { } unit writes bitvector { true }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

let Foo_ensures_default =
 fun (tt : unit) ->
  { (JC_46: true) }
  (init:
  try
   begin
     (let bitvector_a_5 = ref (any_memory void) in
     (let bitvector_a_5_alloc_table = (any_alloc_table void) in
     (let n = ref (any_int32 void) in
     (let a = ref (any_pointer void) in
     (let __lengthofa = ref (any_uint32 void) in
     (let i = ref (any_int32 void) in
     (C_19:
     begin
       (let jessie_65 = (n := (safe_int32_of_integer_ (10))) in void);
      (let jessie_71 =
      (C_21:
      begin
        (let jessie_67 =
        (__lengthofa := (C_20:
                        (safe_uint32_of_integer_ (integer_of_int32 !n)))) in
        void);
       (C_27:
       (let __cil_tmp =
       (C_24:
       (let jessie_69 =
       (C_23:
       (safe_uint32_of_integer_ (C_22:
                                ((mul_int (4)) (integer_of_uint32 !__lengthofa))))) in
       (pointer_address (JC_64: (__builtin_alloca jessie_69))))) in
       (C_26: begin   (a := (C_25: __cil_tmp)); !a end))) end) in void);
      (C_28:
      begin
        (let jessie_73 = (i := (safe_int32_of_integer_ (0))) in void);
       try
        (let jessie_82 =
        begin
          (loop_3:
          while true do
          { invariant (JC_66: true)  }
           begin
             [ { } unit { true } ];
            try
             (let jessie_81 =
             begin
               (let jessie_80 =
               begin
                 (if ((lt_int_ (integer_of_int32 !i)) (integer_of_int32 !n))
                 then void
                 else
                  (let jessie_74 = (raise (Goto_while_0_break_exc void)) in
                  void));
                (C_31:
                begin
                  (let jessie_78 =
                  (let jessie_76 = (safe_int32_of_integer_ (0)) in
                  (let jessie_77 =
                  (C_29: ((shift !a) (integer_of_int32 !i))) in
                  (let jessie_76 = (bitvector_of_int32 jessie_76) in
                  (((((safe_upd_bytes_ bitvector_a_5) jessie_77) (0)) (4)) jessie_76)))) in
                  void);
                 (C_34:
                 begin
                   (i := (C_33:
                         (safe_int32_of_integer_ (C_32:
                                                 ((add_int (integer_of_int32 !i)) (1))))));
                  !i end) end) end in void); (raise (Loop_continue_exc void))
             end in void) with Loop_continue_exc jessie_4 -> void end end
          done); (raise (Goto_while_0_break_exc void)) end in void) with
        Goto_while_0_break_exc jessie_1 -> (while_0_break: void) end;
       (C_35:
       begin
         (let jessie_84 = (i := (safe_int32_of_integer_ (1))) in void);
        try
         (let jessie_92 =
         begin
           (loop_4:
           while true do
           { invariant
               (JC_69:
               not_assigns(int_P_a_5_alloc_table@loop_4,
               int_P_int_M_a_5@loop_4, int_P_int_M_a_5,
               pset_range(pset_singleton(a), (0),
               sub_int(integer_of_int32(n), (1)))))  }
            begin
              [ { } unit { true } ];
             try
              (let jessie_91 =
              begin
                (let jessie_90 =
                begin
                  (if ((lt_int_ (integer_of_int32 !i)) (integer_of_int32 !n))
                  then void
                  else
                   (let jessie_85 = (raise (Goto_while_1_break_exc void)) in
                   void));
                 (C_38:
                 begin
                   (let int_P_a_5_alloc_table = ref (any_alloc_table void) in
                   (let int_P_int_M_a_5 = ref (any_memory void) in
                   (let jessie_88 =
                   begin
                     ((struct_int_P_alloc_of_bitvector int_P_a_5_alloc_table) bitvector_a_5_alloc_table);
                    ((struct_int_P_mem_of_bitvector int_P_int_M_a_5) !bitvector_a_5);
                    (let jessie_87 =
                    (C_36: ((shift !a) (integer_of_int32 !i))) in
                    (let jessie_86 = (C_37: ((shift !a) (0))) in
                    (JC_71:
                    ((((((Swap (int_P_of_pointer_address jessie_87)) 
                         (int_P_of_pointer_address jessie_86)) int_P_int_M_a_5) int_P_int_M_a_5) !int_P_a_5_alloc_table) !int_P_a_5_alloc_table))))
                   end in
                   begin
                     ((struct_int_P_mem_to_bitvector bitvector_a_5) !int_P_int_M_a_5);
                    jessie_88 end)));
                  (C_41:
                  begin
                    (i := (C_40:
                          (safe_int32_of_integer_ (C_39:
                                                  ((add_int (integer_of_int32 !i)) (1))))));
                   !i end) end) end in void);
               (raise (Loop_continue_exc void)) end in void) with
              Loop_continue_exc jessie_6 -> void end end done);
          (raise (Goto_while_1_break_exc void)) end in void) with
         Goto_while_1_break_exc jessie_2 -> (while_1_break: void) end;
        (raise Return) end) end) end))))))); (raise Return) end with
   Return -> void end) { (JC_47: true) }

let Foo_safety =
 fun (tt : unit) ->
  { (JC_46: true) }
  (init:
  try
   begin
     (let bitvector_a_5 = ref (any_memory void) in
     (let bitvector_a_5_alloc_table = (any_alloc_table void) in
     (let n = ref (any_int32 void) in
     (let a = ref (any_pointer void) in
     (let __lengthofa = ref (any_uint32 void) in
     (let i = ref (any_int32 void) in
     (C_19:
     begin
       (let jessie_36 = (n := (safe_int32_of_integer_ (10))) in void);
      (let jessie_42 =
      (C_21:
      begin
        (let jessie_38 =
        (__lengthofa := (C_20:
                        (JC_51: (uint32_of_integer_ (integer_of_int32 !n))))) in
        void);
       (C_27:
       (let __cil_tmp =
       (C_24:
       (let jessie_40 =
       (C_23:
       (JC_52:
       (uint32_of_integer_ (C_22:
                           ((mul_int (4)) (integer_of_uint32 !__lengthofa)))))) in
       (pointer_address (JC_53: (__builtin_alloca_requires jessie_40))))) in
       (C_26: begin   (a := (C_25: __cil_tmp)); !a end))) end) in void);
      (C_28:
      begin
        (let jessie_44 = (i := (safe_int32_of_integer_ (0))) in void);
       try
        (let jessie_53 =
        begin
          (loop_1:
          while true do
          { invariant (JC_55: true) variant (0) }
           begin
             [ { } unit { true } ];
            try
             (let jessie_52 =
             begin
               (let jessie_51 =
               begin
                 (if ((lt_int_ (integer_of_int32 !i)) (integer_of_int32 !n))
                 then void
                 else
                  (let jessie_45 = (raise (Goto_while_0_break_exc void)) in
                  void));
                (C_31:
                begin
                  (let jessie_49 =
                  (let jessie_47 = (safe_int32_of_integer_ (0)) in
                  (let jessie_48 =
                  (C_29: ((shift !a) (integer_of_int32 !i))) in
                  (let jessie_47 = (bitvector_of_int32 jessie_47) in
                  (JC_57:
                  ((((((upd_bytes_ bitvector_a_5_alloc_table) bitvector_a_5) jessie_48) (0)) (4)) jessie_47))))) in
                  void);
                 (C_34:
                 begin
                   (i := (C_33:
                         (JC_58:
                         (int32_of_integer_ (C_32:
                                            ((add_int (integer_of_int32 !i)) (1)))))));
                  !i end) end) end in void); (raise (Loop_continue_exc void))
             end in void) with Loop_continue_exc jessie_4 -> void end end
          done); (raise (Goto_while_0_break_exc void)) end in void) with
        Goto_while_0_break_exc jessie_1 -> (while_0_break: void) end;
       (C_35:
       begin
         (let jessie_55 = (i := (safe_int32_of_integer_ (1))) in void);
        try
         (let jessie_63 =
         begin
           (loop_2:
           while true do
           { invariant (JC_60: true) variant (0) }
            begin
              [ { } unit { true } ];
             try
              (let jessie_62 =
              begin
                (let jessie_61 =
                begin
                  (if ((lt_int_ (integer_of_int32 !i)) (integer_of_int32 !n))
                  then void
                  else
                   (let jessie_56 = (raise (Goto_while_1_break_exc void)) in
                   void));
                 (C_38:
                 begin
                   (let int_P_a_5_alloc_table = ref (any_alloc_table void) in
                   (let int_P_int_M_a_5 = ref (any_memory void) in
                   (let jessie_59 =
                   begin
                     ((struct_int_P_alloc_of_bitvector int_P_a_5_alloc_table) bitvector_a_5_alloc_table);
                    ((struct_int_P_mem_of_bitvector int_P_int_M_a_5) !bitvector_a_5);
                    (let jessie_58 =
                    (C_36: ((shift !a) (integer_of_int32 !i))) in
                    (let jessie_57 = (C_37: ((shift !a) (0))) in
                    (JC_62:
                    ((((((Swap_requires (int_P_of_pointer_address jessie_58)) 
                         (int_P_of_pointer_address jessie_57)) int_P_int_M_a_5) int_P_int_M_a_5) !int_P_a_5_alloc_table) !int_P_a_5_alloc_table))))
                   end in
                   begin
                     ((struct_int_P_mem_to_bitvector bitvector_a_5) !int_P_int_M_a_5);
                    jessie_59 end)));
                  (C_41:
                  begin
                    (i := (C_40:
                          (JC_63:
                          (int32_of_integer_ (C_39:
                                             ((add_int (integer_of_int32 !i)) (1)))))));
                   !i end) end) end in void);
               (raise (Loop_continue_exc void)) end in void) with
              Loop_continue_exc jessie_6 -> void end end done);
          (raise (Goto_while_1_break_exc void)) end in void) with
         Goto_while_1_break_exc jessie_2 -> (while_1_break: void) end;
        (raise Return) end) end) end))))))); (raise Return) end with
   Return -> void end) { true }

let Swap_ensures_default =
 fun (p : int_P pointer) (q : int_P pointer) (int_P_int_M_p_3 : (int_P, int32) memory ref) (int_P_int_M_q_4 : (int_P, int32) memory ref) (int_P_p_3_alloc_table : int_P alloc_table) (int_P_q_4_alloc_table : int_P alloc_table) ->
  { (JC_21:
    ((JC_17: le_int(offset_min(int_P_p_3_alloc_table, p), (0)))
    and ((JC_18: ge_int(offset_max(int_P_p_3_alloc_table, p), (0)))
        and ((JC_19: le_int(offset_min(int_P_q_4_alloc_table, q), (0)))
            and (JC_20: ge_int(offset_max(int_P_q_4_alloc_table, q), (0))))))) }
  (init:
  try
   begin
     (let temp = ref (any_int32 void) in
     (C_3:
     begin
       (let jessie_22 = (temp := (C_2: ((safe_acc_ !int_P_int_M_p_3) p))) in
       void);
      (C_6:
      begin
        (let jessie_28 =
        (let jessie_24 = (C_4: ((safe_acc_ !int_P_int_M_q_4) q)) in
        (let jessie_27 = p in
        (((safe_upd_ int_P_int_M_p_3) jessie_27) jessie_24))) in void);
       (C_8:
       begin
         (let jessie_34 =
         (let jessie_30 = !temp in
         (let jessie_33 = q in
         (((safe_upd_ int_P_int_M_q_4) jessie_33) jessie_30))) in void);
        (raise Return) end) end) end)); (raise Return) end with Return ->
   void end)
  { (JC_29:
    ((JC_25:
     ((JC_23:
      eq_int(integer_of_int32(select(int_P_int_M_p_3, p)),
      integer_of_int32(select(int_P_int_M_q_4@, q@))))
     and (JC_24:
         eq_int(integer_of_int32(select(int_P_int_M_q_4, q)),
         integer_of_int32(select(int_P_int_M_p_3@, p@))))))
    and (JC_28:
        ((JC_26:
         not_assigns(int_P_p_3_alloc_table@, int_P_int_M_p_3@,
         int_P_int_M_p_3, pset_singleton(p@)))
        and (JC_27:
            not_assigns(int_P_q_4_alloc_table@, int_P_int_M_q_4@,
            int_P_int_M_q_4, pset_singleton(q@))))))) }

let Swap_safety =
 fun (p : int_P pointer) (q : int_P pointer) (int_P_int_M_p_3 : (int_P, int32) memory ref) (int_P_int_M_q_4 : (int_P, int32) memory ref) (int_P_p_3_alloc_table : int_P alloc_table) (int_P_q_4_alloc_table : int_P alloc_table) ->
  { (JC_21:
    ((JC_17: le_int(offset_min(int_P_p_3_alloc_table, p), (0)))
    and ((JC_18: ge_int(offset_max(int_P_p_3_alloc_table, p), (0)))
        and ((JC_19: le_int(offset_min(int_P_q_4_alloc_table, q), (0)))
            and (JC_20: ge_int(offset_max(int_P_q_4_alloc_table, q), (0))))))) }
  (init:
  try
   begin
     (let temp = ref (any_int32 void) in
     (C_3:
     begin
       (let jessie_8 =
       (temp := (C_2:
                (JC_39: (((acc_ int_P_p_3_alloc_table) !int_P_int_M_p_3) p)))) in
       void);
      (C_6:
      begin
        (let jessie_14 =
        (let jessie_10 =
        (C_4: (JC_40: (((acc_ int_P_q_4_alloc_table) !int_P_int_M_q_4) q))) in
        (let jessie_13 = p in
        (JC_41:
        ((((upd_ int_P_p_3_alloc_table) int_P_int_M_p_3) jessie_13) jessie_10)))) in
        void);
       (C_8:
       begin
         (let jessie_20 =
         (let jessie_16 = !temp in
         (let jessie_19 = q in
         (JC_42:
         ((((upd_ int_P_q_4_alloc_table) int_P_int_M_q_4) jessie_19) jessie_16)))) in
         void); (raise Return) end) end) end)); (raise Return) end with
   Return -> void end) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C bts0303.jessie --quiet -f bts0303.makefile project
why --project [...] why/bts0303.why
