Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -jessie -jessie-gen-only hd_snoob.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -dD hd_snoob.c"
[jessie] Starting Jessie translation
[kernel] warning: Neither code nor specification for function strtol, generating default assigns from the prototype
[jessie] Producing Jessie files in subdir hd_snoob.jessie
[jessie] File hd_snoob.jessie/hd_snoob.jc written.
[jessie] File hd_snoob.jessie/hd_snoob.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type uint32 = 0..4294967295

type uint16 = 0..65535

type int8 = -128..127

type int64 = -9223372036854775808..9223372036854775807

type int32 = -2147483648..2147483647

tag char_xP = {
  charP[..] char_xM: 32;
}

type char_xP = [char_xP]

tag unsigned_shortP = {
  uint16 unsigned_shortM: 16;
}

type unsigned_shortP = [unsigned_shortP]

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

axiomatic MemCmp {

  logic integer memcmp{L}(charP[..] s1, charP[..] s2, integer n)
  reads (s1 + [0..(n - 1)]).charM, (s2 + [0..(n - 1)]).charM;
   
  axiom memcmp_range{L} :
  (\forall charP[..] s1_0;
    (\forall charP[..] s2_0;
      (\forall integer n_0;
        ((((- 2147483647) - 1) <= memcmp{L}(s1_0, s2_0, n_0)) &&
          (memcmp{L}(s1_0, s2_0, n_0) <= 2147483647)))))
   
  axiom memcmp_zero{L} :
  (\forall charP[..] s1_1;
    (\forall charP[..] s2_1;
      (\forall integer n_1;
        ((memcmp{L}(s1_1, s2_1, n_1) == 0) <==>
          (\forall integer i_1;
            (((0 <= i_1) && (i_1 < n_1)) ==>
              ((s1_1 + i_1).charM == (s2_1 + i_1).charM)))))))
  
}

axiomatic MemChr {

  logic boolean memchr{L}(charP[..] s, integer c, integer n_2)
  reads (s + [0..(n_2 - 1)]).charM;
   
  axiom memchr_def{L} :
  (\forall charP[..] s_0;
    (\forall integer c_0;
      (\forall integer n_3;
        ((memchr{L}(s_0, c_0, n_3) == true) <==>
          (\exists int32 i_2;
            (((0 <= i_2) && (i_2 < n_3)) && ((s_0 + i_2).charM == c_0)))))))
  
}

axiomatic MemSet {

  logic boolean memset{L}(charP[..] s_1, integer c_1, integer n_4)
  reads (s_1 + [0..(n_4 - 1)]).charM;
   
  axiom memset_def{L} :
  (\forall charP[..] s_2;
    (\forall integer c_2;
      (\forall integer n_5;
        ((memset{L}(s_2, c_2, n_5) == true) <==>
          (\forall integer i_3;
            (((0 <= i_3) && (i_3 < n_5)) ==> ((s_2 + i_3).charM == c_2)))))))
  
}

axiomatic StrLen {

  logic integer strlen{L}(charP[..] s_3) reads (s_3 + [0..]).charM;
   
  axiom strlen_pos_or_null{L} :
  (\forall charP[..] s_4;
    (\forall integer i_4;
      (((((0 <= i_4) && (i_4 <= 2147483647)) &&
          (\forall integer j_0;
            (((0 <= j_0) && (j_0 < i_4)) ==> ((s_4 + j_0).charM != 0)))) &&
         ((s_4 + i_4).charM == 0)) ==>
        (strlen{L}(s_4) == i_4))))
   
  axiom strlen_neg{L} :
  (\forall charP[..] s_5;
    ((\forall integer i_5;
       (((0 <= i_5) && (i_5 <= 2147483647)) ==> ((s_5 + i_5).charM != 0))) ==>
      (strlen{L}(s_5) < 0)))
   
  axiom strlen_range{L} :
  (\forall charP[..] s_6;
    (strlen{L}(s_6) <= 2147483647))
   
  axiom strlen_before_null{L} :
  (\forall charP[..] s_7;
    (\forall integer i_6;
      (((0 <= i_6) && (i_6 < strlen{L}(s_7))) ==> ((s_7 + i_6).charM != 0))))
   
  axiom strlen_at_null{L} :
  (\forall charP[..] s_8;
    ((0 <= strlen{L}(s_8)) ==> ((s_8 + strlen{L}(s_8)).charM == 0)))
   
  axiom strlen_not_zero{L} :
  (\forall charP[..] s_9;
    (\forall integer i_7;
      ((((0 <= i_7) && (i_7 <= strlen{L}(s_9))) && ((s_9 + i_7).charM != 0)) ==>
        (i_7 < strlen{L}(s_9)))))
   
  axiom strlen_zero{L} :
  (\forall charP[..] s_10;
    (\forall integer i_8;
      ((((0 <= i_8) && (i_8 <= strlen{L}(s_10))) &&
         ((s_10 + i_8).charM == 0)) ==>
        (i_8 == strlen{L}(s_10)))))
   
  axiom strlen_sup{L} :
  (\forall charP[..] s_11;
    (\forall integer i_9;
      (((0 <= i_9) && ((s_11 + i_9).charM == 0)) ==>
        ((0 <= strlen{L}(s_11)) && (strlen{L}(s_11) <= i_9)))))
   
  axiom strlen_shift{L} :
  (\forall charP[..] s_12;
    (\forall integer i_10;
      (((0 <= i_10) && (i_10 <= strlen{L}(s_12))) ==>
        (strlen{L}((s_12 + i_10)) == (strlen{L}(s_12) - i_10)))))
   
  axiom strlen_create{L} :
  (\forall charP[..] s_13;
    (\forall integer i_11;
      ((((0 <= i_11) && (i_11 <= 2147483647)) && ((s_13 + i_11).charM == 0)) ==>
        ((0 <= strlen{L}(s_13)) && (strlen{L}(s_13) <= i_11)))))
   
  axiom strlen_create_shift{L} :
  (\forall charP[..] s_14;
    (\forall integer i_12;
      (\forall integer k;
        ((((0 <= k) && ((k <= i_12) && (i_12 <= 2147483647))) &&
           ((s_14 + i_12).charM == 0)) ==>
          ((0 <= strlen{L}((s_14 + k))) &&
            (strlen{L}((s_14 + k)) <= (i_12 - k)))))))
   
  axiom memcmp_strlen_left{L} :
  (\forall charP[..] s1_2;
    (\forall charP[..] s2_2;
      (\forall integer n_6;
        (((memcmp{L}(s1_2, s2_2, n_6) == 0) && (strlen{L}(s1_2) < n_6)) ==>
          (strlen{L}(s1_2) == strlen{L}(s2_2))))))
   
  axiom memcmp_strlen_right{L} :
  (\forall charP[..] s1_3;
    (\forall charP[..] s2_3;
      (\forall integer n_7;
        (((memcmp{L}(s1_3, s2_3, n_7) == 0) && (strlen{L}(s2_3) < n_7)) ==>
          (strlen{L}(s1_3) == strlen{L}(s2_3))))))
   
  axiom memcmp_strlen_shift_left{L} :
  (\forall charP[..] s1_4;
    (\forall charP[..] s2_4;
      (\forall integer k_0;
        (\forall integer n_8;
          ((((memcmp{L}(s1_4, (s2_4 + k_0), n_8) == 0) && (0 <= k_0)) &&
             (strlen{L}(s1_4) < n_8)) ==>
            ((0 <= strlen{L}(s2_4)) &&
              (strlen{L}(s2_4) <= (k_0 + strlen{L}(s1_4)))))))))
   
  axiom memcmp_strlen_shift_right{L} :
  (\forall charP[..] s1_5;
    (\forall charP[..] s2_5;
      (\forall integer k_1;
        (\forall integer n_9;
          ((((memcmp{L}((s1_5 + k_1), s2_5, n_9) == 0) && (0 <= k_1)) &&
             (strlen{L}(s2_5) < n_9)) ==>
            ((0 <= strlen{L}(s1_5)) &&
              (strlen{L}(s1_5) <= (k_1 + strlen{L}(s2_5)))))))))
  
}

axiomatic StrCmp {

  logic integer strcmp{L}(charP[..] s1_6, charP[..] s2_6)
  reads (s1_6 + [0..strlen{L}(s1_6)]).charM,
  (s2_6 + [0..strlen{L}(s2_6)]).charM;
   
  axiom strcmp_range{L} :
  (\forall charP[..] s1_7;
    (\forall charP[..] s2_7;
      ((((- 2147483647) - 1) <= strcmp{L}(s1_7, s2_7)) &&
        (strcmp{L}(s1_7, s2_7) <= 2147483647))))
   
  axiom strcmp_zero{L} :
  (\forall charP[..] s1_8;
    (\forall charP[..] s2_8;
      ((strcmp{L}(s1_8, s2_8) == 0) <==>
        ((strlen{L}(s1_8) == strlen{L}(s2_8)) &&
          (\forall integer i_13;
            (((0 <= i_13) && (i_13 <= strlen{L}(s1_8))) ==>
              ((s1_8 + i_13).charM == (s2_8 + i_13).charM)))))))
  
}

axiomatic StrNCmp {

  logic integer strncmp{L}(charP[..] s1_9, charP[..] s2_9, integer n_10)
  reads (s1_9 + [0..(n_10 - 1)]).charM, (s2_9 + [0..(n_10 - 1)]).charM;
   
  axiom strncmp_zero{L} :
  (\forall charP[..] s1_10;
    (\forall charP[..] s2_10;
      (\forall integer n_11;
        ((strncmp{L}(s1_10, s2_10, n_11) == 0) <==>
          (((strlen{L}(s1_10) < n_11) && (strcmp{L}(s1_10, s2_10) == 0)) ||
            (\forall integer i_14;
              (((0 <= i_14) && (i_14 < n_11)) ==>
                ((s1_10 + i_14).charM == (s2_10 + i_14).charM))))))))
  
}

axiomatic StrChr {

  logic boolean strchr{L}(charP[..] s_15, integer c_3)
  reads (s_15 + [0..strlen{L}(s_15)]).charM;
   
  axiom strchr_def{L} :
  (\forall charP[..] s_16;
    (\forall integer c_4;
      ((strchr{L}(s_16, c_4) == true) <==>
        (\exists integer i_15;
          (((0 <= i_15) && (i_15 <= strlen{L}(s_16))) &&
            ((s_16 + i_15).charM == c_4))))))
  
}

axiomatic WcsLen {

  logic integer wcslen{L}(unsigned_shortP[..] s_17)
  reads (s_17 + [0..]).unsigned_shortM;
   
  axiom wcslen_pos_or_null{L} :
  (\forall unsigned_shortP[..] s_18;
    (\forall integer i_16;
      ((((0 <= i_16) &&
          (\forall integer j_1;
            (((0 <= j_1) && (j_1 < i_16)) ==>
              ((s_18 + j_1).unsigned_shortM != 0)))) &&
         ((s_18 + i_16).unsigned_shortM == 0)) ==>
        (wcslen{L}(s_18) == i_16))))
   
  axiom wcslen_neg{L} :
  (\forall unsigned_shortP[..] s_19;
    ((\forall integer i_17;
       ((0 <= i_17) ==> ((s_19 + i_17).unsigned_shortM != 0))) ==>
      (wcslen{L}(s_19) < 0)))
   
  axiom wcslen_before_null{L} :
  (\forall unsigned_shortP[..] s_20;
    (\forall int32 i_18;
      (((0 <= i_18) && (i_18 < wcslen{L}(s_20))) ==>
        ((s_20 + i_18).unsigned_shortM != 0))))
   
  axiom wcslen_at_null{L} :
  (\forall unsigned_shortP[..] s_21;
    ((0 <= wcslen{L}(s_21)) ==>
      ((s_21 + wcslen{L}(s_21)).unsigned_shortM == 0)))
   
  axiom wcslen_not_zero{L} :
  (\forall unsigned_shortP[..] s_22;
    (\forall int32 i_19;
      ((((0 <= i_19) && (i_19 <= wcslen{L}(s_22))) &&
         ((s_22 + i_19).unsigned_shortM != 0)) ==>
        (i_19 < wcslen{L}(s_22)))))
   
  axiom wcslen_zero{L} :
  (\forall unsigned_shortP[..] s_23;
    (\forall int32 i_20;
      ((((0 <= i_20) && (i_20 <= wcslen{L}(s_23))) &&
         ((s_23 + i_20).unsigned_shortM == 0)) ==>
        (i_20 == wcslen{L}(s_23)))))
   
  axiom wcslen_sup{L} :
  (\forall unsigned_shortP[..] s_24;
    (\forall int32 i_21;
      (((0 <= i_21) && ((s_24 + i_21).unsigned_shortM == 0)) ==>
        ((0 <= wcslen{L}(s_24)) && (wcslen{L}(s_24) <= i_21)))))
   
  axiom wcslen_shift{L} :
  (\forall unsigned_shortP[..] s_25;
    (\forall int32 i_22;
      (((0 <= i_22) && (i_22 <= wcslen{L}(s_25))) ==>
        (wcslen{L}((s_25 + i_22)) == (wcslen{L}(s_25) - i_22)))))
   
  axiom wcslen_create{L} :
  (\forall unsigned_shortP[..] s_26;
    (\forall int32 i_23;
      (((0 <= i_23) && ((s_26 + i_23).unsigned_shortM == 0)) ==>
        ((0 <= wcslen{L}(s_26)) && (wcslen{L}(s_26) <= i_23)))))
   
  axiom wcslen_create_shift{L} :
  (\forall unsigned_shortP[..] s_27;
    (\forall int32 i_24;
      (\forall int32 k_2;
        ((((0 <= k_2) && (k_2 <= i_24)) &&
           ((s_27 + i_24).unsigned_shortM == 0)) ==>
          ((0 <= wcslen{L}((s_27 + k_2))) &&
            (wcslen{L}((s_27 + k_2)) <= (i_24 - k_2)))))))
  
}

axiomatic WcsCmp {

  logic integer wcscmp{L}(unsigned_shortP[..] s1_11, unsigned_shortP[..] s2_11)
  reads (s1_11 + [0..wcslen{L}(s1_11)]).unsigned_shortM,
  (s2_11 + [0..wcslen{L}(s2_11)]).unsigned_shortM;
   
  axiom wcscmp_zero{L} :
  (\forall unsigned_shortP[..] s1_12;
    (\forall unsigned_shortP[..] s2_12;
      ((wcscmp{L}(s1_12, s2_12) == 0) <==>
        ((wcslen{L}(s1_12) == wcslen{L}(s2_12)) &&
          (\forall integer i_25;
            (((0 <= i_25) && (i_25 <= wcslen{L}(s1_12))) ==>
              ((s1_12 + i_25).unsigned_shortM ==
                (s2_12 + i_25).unsigned_shortM)))))))
  
}

axiomatic WcsNCmp {

  logic integer wcsncmp{L}(unsigned_shortP[..] s1_13,
                           unsigned_shortP[..] s2_13, integer n_12)
  reads (s1_13 + [0..(n_12 - 1)]).unsigned_shortM,
  (s2_13 + [0..(n_12 - 1)]).unsigned_shortM;
   
  axiom wcsncmp_zero{L} :
  (\forall unsigned_shortP[..] s1_14;
    (\forall unsigned_shortP[..] s2_14;
      (\forall integer n_13;
        ((wcsncmp{L}(s1_14, s2_14, n_13) == 0) <==>
          (((wcslen{L}(s1_14) < n_13) && (wcscmp{L}(s1_14, s2_14) == 0)) ||
            (\forall integer i_26;
              (((0 <= i_26) && (i_26 < n_13)) ==>
                ((s1_14 + i_26).unsigned_shortM ==
                  (s2_14 + i_26).unsigned_shortM))))))))
  
}

logic integer minimum(integer i_27, integer j_2) =
(if (i_27 < j_2) then i_27 else j_2)

logic integer maximum(integer i_28, integer j_3) =
(if (i_28 < j_3) then j_3 else i_28)

predicate valid_string{L}(charP[..] s_28) =
((0 <= strlen{L}(s_28)) &&
  ((\offset_min(s_28) <= 0) && (\offset_max(s_28) >= strlen{L}(s_28))))

predicate valid_string_or_null{L}(charP[..] s_29) =
((s_29 == null) || valid_string{L}(s_29))

predicate valid_wstring{L}(unsigned_shortP[..] s_30) =
((0 <= wcslen{L}(s_30)) &&
  ((\offset_min(s_30) <= 0) && (\offset_max(s_30) >= wcslen{L}(s_30))))

predicate valid_wstring_or_null{L}(unsigned_shortP[..] s_31) =
((s_31 == null) || valid_wstring{L}(s_31))

int32 memcmp(charP[..] s1, charP[..] s2, uint32 n_3)
  requires (C_2 : (((C_4 : (\offset_min(s1) <= 0)) &&
                     (C_5 : (\offset_max(s1) >= (n_3 - 1)))) &&
                    ((C_7 : (\offset_min(s2) <= 0)) &&
                      (C_8 : (\offset_max(s2) >= (n_3 - 1))))));
behavior default:
  assigns \nothing;
  ensures (C_1 : (\result ==
                   memcmp{Here}(\at(s1,Old), \at(s2,Old), \at(n_3,Old))));
;

charP[..] memchr(charP[..] s, int32 c, uint32 n_2)
  requires (C_14 : ((C_15 : (\offset_min(s) <= 0)) &&
                     (C_16 : (\offset_max(s) >= (n_2 - 1)))));
behavior default:
  assigns \nothing;
  ensures (C_9 : ((C_10 : (\result == \at(s,Old))) &&
                   (C_11 : (\base_block(\result) == \base_block(\at(s,Old))))));
behavior found:
  assumes (memchr{Here}(s, c, n_2) == true);
  ensures (C_12 : ((\result.charM :> int32) == \at(c,Old)));
behavior not_found:
  assumes (! (memchr{Here}(s, c, n_2) == true));
  ensures (C_13 : (\result == null));
;

charP[..] memcpy(charP[..] dest_1, charP[..] src, uint32 n_4)
  requires (C_22 : (((C_24 : (\offset_min(dest_1) <= 0)) &&
                      (C_25 : (\offset_max(dest_1) >= (n_4 - 1)))) &&
                     ((C_27 : (\offset_min(src) <= 0)) &&
                       (C_28 : (\offset_max(src) >= (n_4 - 1))))));
behavior default:
  assigns (dest_1 + [0..(n_4 - 1)]).charM;
  ensures (C_17 : (((C_19 : (memcmp{Here}(\at(dest_1,Old), \at(src,Old),
                                          \at(n_4,Old)) ==
                              0)) &&
                     (C_20 : (\result == \at(dest_1,Old)))) &&
                    (C_21 : (\base_block(\result) ==
                              \base_block(\at(dest_1,Old))))));
;

charP[..] memmove(charP[..] dest_2, charP[..] src_0, uint32 n_5)
  requires (C_34 : (((C_36 : (\offset_min(dest_2) <= 0)) &&
                      (C_37 : (\offset_max(dest_2) >= (n_5 - 1)))) &&
                     ((C_39 : (\offset_min(src_0) <= 0)) &&
                       (C_40 : (\offset_max(src_0) >= (n_5 - 1))))));
behavior default:
  assigns (dest_2 + [0..(n_5 - 1)]).charM;
  ensures (C_29 : (((C_31 : (memcmp{Here}(\at(dest_2,Old), \at(src_0,Old),
                                          \at(n_5,Old)) ==
                              0)) &&
                     (C_32 : (\result == \at(dest_2,Old)))) &&
                    (C_33 : (\base_block(\result) ==
                              \base_block(\at(dest_2,Old))))));
;

charP[..] memset(charP[..] s_0, int32 c_0, uint32 n_6)
  requires (C_46 : ((C_47 : (\offset_min(s_0) <= 0)) &&
                     (C_48 : (\offset_max(s_0) >= (n_6 - 1)))));
behavior default:
  assigns (s_0 + [0..(n_6 - 1)]).charM;
  ensures (C_41 : (((C_43 : (memset{Here}(\at(s_0,Old), \at(c_0,Old),
                                          \at(n_6,Old)) ==
                              true)) &&
                     (C_44 : (\result == \at(s_0,Old)))) &&
                    (C_45 : (\base_block(\result) ==
                              \base_block(\at(s_0,Old))))));
;

uint32 strlen(charP[..] s_4)
  requires (C_50 : valid_string{Here}(s_4));
behavior default:
  assigns \nothing;
  ensures (C_49 : (\result == strlen{Here}(\at(s_4,Old))));
;

int32 strcmp(charP[..] s1_0, charP[..] s2_0)
  requires (C_52 : ((C_53 : valid_string{Here}(s1_0)) &&
                     (C_54 : valid_string{Here}(s2_0))));
behavior default:
  assigns \nothing;
  ensures (C_51 : (\result == strcmp{Here}(\at(s1_0,Old), \at(s2_0,Old))));
;

int32 strncmp(charP[..] s1_2, charP[..] s2_2, uint32 n_8)
  requires (C_56 : ((C_57 : valid_string{Here}(s1_2)) &&
                     (C_58 : valid_string{Here}(s2_2))));
behavior default:
  assigns \nothing;
  ensures (C_55 : (\result ==
                    strncmp{Here}(\at(s1_2,Old), \at(s2_2,Old), \at(n_8,Old))));
;

int32 strcoll(charP[..] s1_1, charP[..] s2_1)
  requires (C_60 : ((C_61 : valid_string{Here}(s1_1)) &&
                     (C_62 : valid_string{Here}(s2_1))));
behavior default:
  assigns \nothing;
  ensures (C_59 : true);
;

charP[..] strchr(charP[..] s_1, int32 c_1)
  requires (C_70 : valid_string{Here}(s_1));
behavior default:
  assigns \nothing;
  ensures (C_63 : true);
behavior found:
  assumes (strchr{Here}(s_1, c_1) == true);
  ensures (C_64 : (((C_66 : ((\result.charM :> int32) == \at(c_1,Old))) &&
                     (C_67 : (\base_block(\result) ==
                               \base_block(\at(s_1,Old))))) &&
                    (C_68 : valid_string{Here}(\result))));
behavior not_found:
  assumes (! (strchr{Here}(s_1, c_1) == true));
  ensures (C_69 : (\result == null));
;

charP[..] strrchr(charP[..] s_7, int32 c_2)
  requires (C_78 : valid_string{Here}(s_7));
behavior default:
  assigns \nothing;
  ensures (C_71 : true);
behavior found:
  assumes (strchr{Here}(s_7, c_2) == true);
  ensures (C_72 : (((C_74 : ((\result.charM :> int32) == \at(c_2,Old))) &&
                     (C_75 : (\base_block(\result) ==
                               \base_block(\at(s_7,Old))))) &&
                    (C_76 : valid_string{Here}(\result))));
behavior not_found:
  assumes (! (strchr{Here}(s_7, c_2) == true));
  ensures (C_77 : (\result == null));
;

uint32 strcspn(charP[..] s_2, charP[..] reject)
  requires (C_82 : ((C_83 : valid_string{Here}(s_2)) &&
                     (C_84 : valid_string{Here}(reject))));
behavior default:
  assigns \nothing;
  ensures (C_79 : ((C_80 : (0 <= \result)) &&
                    (C_81 : (\result <= strlen{Here}(\at(s_2,Old))))));
;

uint32 strspn(charP[..] s_8, charP[..] accept_0)
  requires (C_88 : ((C_89 : valid_string{Here}(s_8)) &&
                     (C_90 : valid_string{Here}(accept_0))));
behavior default:
  assigns \nothing;
  ensures (C_85 : ((C_86 : (0 <= \result)) &&
                    (C_87 : (\result <= strlen{Here}(\at(s_8,Old))))));
;

charP[..] strpbrk(charP[..] s_6, charP[..] accept)
  requires (C_92 : ((C_93 : valid_string{Here}(s_6)) &&
                     (C_94 : valid_string{Here}(accept))));
behavior default:
  assigns \nothing;
  ensures (C_91 : ((\result == null) ||
                    (\base_block(\result) == \base_block(\at(s_6,Old)))));
;

charP[..] strstr(charP[..] haystack, charP[..] needle)
  requires (C_96 : ((C_97 : valid_string{Here}(haystack)) &&
                     (C_98 : valid_string{Here}(needle))));
behavior default:
  assigns \nothing;
  ensures (C_95 : ((\result == null) ||
                    ((\base_block(\result) == \base_block(\at(haystack,Old))) &&
                      (memcmp{Here}(\result, \at(needle,Old),
                                    strlen{Here}(\at(needle,Old))) ==
                        0))));
;

charP[..] strtok(charP[..] s_9, charP[..] delim)
  requires (C_100 : ((C_101 : (valid_string{Here}(s_9) || (s_9 == null))) &&
                      (C_102 : valid_string{Here}(delim))));
behavior default:
  assigns \nothing;
  ensures (C_99 : true);
;

charP[..] strerror(int32 errnum)
behavior default:
  assigns \nothing;
  ensures (C_103 : valid_string{Here}(\result));
;

charP[..] strcpy(charP[..] dest_4, charP[..] src_2)
  requires (C_109 : (((C_111 : (\offset_min(dest_4) <= 0)) &&
                       (C_112 : (\offset_max(dest_4) >= strlen{Here}(src_2)))) &&
                      (C_113 : valid_string{Here}(src_2))));
behavior default:
  assigns (dest_4 + [0..strlen{Old}(src_2)]).charM;
  ensures (C_104 : (((C_106 : (strcmp{Here}(\at(dest_4,Old), \at(src_2,Old)) ==
                                0)) &&
                      (C_107 : (\result == \at(dest_4,Old)))) &&
                     (C_108 : (\base_block(\result) ==
                                \base_block(\at(dest_4,Old))))));
;

charP[..] strncpy(charP[..] dest_6, charP[..] src_4, uint32 n_9)
  requires (C_119 : (((C_121 : (\offset_min(dest_6) <= 0)) &&
                       (C_122 : (\offset_max(dest_6) >= (n_9 - 1)))) &&
                      (C_123 : valid_string{Here}(src_4))));
behavior default:
  assigns (dest_6 + [0..(n_9 - 1)]).charM;
  ensures (C_114 : (\result == \at(dest_6,Old)));
behavior complete:
  assumes (strlen{Here}(src_4) < n_9);
  assigns (dest_6 + [0..(n_9 - 1)]).charM;
  ensures (C_115 : ((C_116 : (strcmp{Here}(\at(dest_6,Old), \at(src_4,Old)) ==
                               0)) &&
                     (C_117 : (\base_block(\result) ==
                                \base_block(\at(dest_6,Old))))));
behavior partial:
  assumes (n_9 <= strlen{Here}(src_4));
  assigns (dest_6 + [0..(n_9 - 1)]).charM;
  ensures (C_118 : (memcmp{Here}(\at(dest_6,Old), \at(src_4,Old),
                                 \at(n_9,Old)) ==
                     0));
;

charP[..] strcat(charP[..] dest_3, charP[..] src_1)
  requires (C_129 : ((((C_132 : (\offset_min(dest_3) <= 0)) &&
                        (C_133 : (\offset_max(dest_3) >=
                                   (strlen{Here}(dest_3) +
                                     strlen{Here}(src_1))))) &&
                       (C_134 : valid_string{Here}(dest_3))) &&
                      (C_135 : valid_string{Here}(src_1))));
behavior default:
  assigns (dest_3 + [0..(strlen{Old}(dest_3) + strlen{Old}(src_1))]).charM;
  ensures (C_124 : (((C_126 : (strlen{Here}(\at(dest_3,Old)) ==
                                \at((strlen{Old}(dest_3) +
                                      strlen{Old}(src_1)),Old))) &&
                      (C_127 : (\result == \at(dest_3,Old)))) &&
                     (C_128 : (\base_block(\result) ==
                                \base_block(\at(dest_3,Old))))));
;

charP[..] strncat(charP[..] dest_5, charP[..] src_3, uint32 n_7)
  requires (C_141 : ((((C_144 : (\offset_min(dest_5) <= 0)) &&
                        (C_145 : (\offset_max(dest_5) >= (n_7 - 1)))) &&
                       (C_146 : valid_string{Here}(dest_5))) &&
                      (C_147 : valid_string{Here}(src_3))));
behavior default:
  assigns (dest_5 + [0..((strlen{Old}(dest_5) + n_7) - 1)]).charM;
  ensures (C_136 : ((C_137 : (\result == \at(dest_5,Old))) &&
                     (C_138 : (\base_block(\result) ==
                                \base_block(\at(dest_5,Old))))));
behavior complete:
  assumes (strlen{Here}(src_3) <= n_7);
  assigns (dest_5 + [0..(strlen{Old}(dest_5) + strlen{Old}(src_3))]).charM;
  ensures (C_139 : (strlen{Here}(\at(dest_5,Old)) ==
                     \at((strlen{Old}(dest_5) + strlen{Old}(src_3)),Old)));
behavior partial:
  assumes (n_7 < strlen{Here}(src_3));
  assigns (dest_5 + [0..(strlen{Old}(dest_5) + n_7)]).charM;
  ensures (C_140 : (strlen{Here}(\at(dest_5,Old)) ==
                     (\at(strlen{Old}(dest_5),Old) + \at(n_7,Old))));
;

uint32 strxfrm(charP[..] dest_7, charP[..] src_5, uint32 n_11)
  requires (C_149 : (((C_151 : (\offset_min(dest_7) <= 0)) &&
                       (C_152 : (\offset_max(dest_7) >= (n_11 - 1)))) &&
                      (C_153 : valid_string{Here}(src_5))));
behavior default:
  assigns (dest_7 + [0..(n_11 - 1)]).charM;
  ensures (C_148 : true);
;

charP[..] strdup(charP[..] s_3)
  requires (C_159 : valid_string{Here}(s_3));
behavior default:
  assigns \nothing;
  ensures (C_154 : (((C_156 : (\offset_min(\result) <= 0)) &&
                      (C_157 : (\offset_max(\result) >=
                                 strlen{Here}(\at(s_3,Old))))) &&
                     (C_158 : (strcmp{Here}(\result, \at(s_3,Old)) == 0))));
;

charP[..] strndup(charP[..] s_5, uint32 n_10)
  requires (C_169 : valid_string{Here}(s_5));
behavior default:
  assigns \nothing;
  ensures (C_160 : (((((C_164 : (\offset_min(\result) <= 0)) &&
                        (C_165 : (\offset_max(\result) >=
                                   minimum(strlen{Here}(\at(s_5,Old)),
                                           \at(n_10,Old))))) &&
                       (C_166 : valid_string{Here}(\result))) &&
                      (C_167 : (strlen{Here}(\result) <= \at(n_10,Old)))) &&
                     (C_168 : (strncmp{Here}(\result, \at(s_5,Old),
                                             \at(n_10,Old)) ==
                                0))));
;

uint32 wcslen(unsigned_shortP[..] s_10)
  requires (C_171 : valid_wstring{Here}(s_10));
behavior default:
  assigns \nothing;
  ensures (C_170 : (\result == wcslen{Here}(\at(s_10,Old))));
;

unsigned_shortP[..] wcscpy(unsigned_shortP[..] dest_8,
                           unsigned_shortP[..] src_6)
  requires (C_177 : (((C_179 : (\offset_min(dest_8) <= 0)) &&
                       (C_180 : (\offset_max(dest_8) >= wcslen{Here}(src_6)))) &&
                      (C_181 : valid_wstring{Here}(src_6))));
behavior default:
  assigns (dest_8 + [0..wcslen{Old}(src_6)]).unsigned_shortM;
  ensures (C_172 : (((C_174 : valid_wstring{Here}(\at(dest_8,Old))) &&
                      (C_175 : (wcscmp{Here}(\at(dest_8,Old), \at(src_6,Old)) ==
                                 0))) &&
                     (C_176 : (\result == \at(dest_8,Old)))));
;

unsigned_shortP[..] wcsncpy(unsigned_shortP[..] dest_9,
                            unsigned_shortP[..] src_7, uint32 n_12)
  requires (C_187 : (((C_189 : (\offset_min(dest_9) <= 0)) &&
                       (C_190 : (\offset_max(dest_9) >= (n_12 - 1)))) &&
                      (C_191 : valid_wstring{Here}(src_7))));
behavior default:
  assigns (dest_9 + [0..(n_12 - 1)]).unsigned_shortM;
  ensures (C_182 : (\result == \at(dest_9,Old)));
behavior complete:
  assumes (wcslen{Here}(src_7) < n_12);
  assigns (dest_9 + [0..(n_12 - 1)]).unsigned_shortM;
  ensures (C_183 : ((C_184 : valid_wstring{Here}(\at(dest_9,Old))) &&
                     (C_185 : (wcscmp{Here}(\at(dest_9,Old), \at(src_7,Old)) ==
                                0))));
behavior partial:
  assumes (n_12 <= wcslen{Here}(src_7));
  assigns (dest_9 + [0..(n_12 - 1)]).unsigned_shortM;
  ensures (C_186 : true);
;

uint32 wcscspn(unsigned_shortP[..] wcs, unsigned_shortP[..] reject_0)
  requires (C_195 : ((C_196 : valid_wstring{Here}(wcs)) &&
                      (C_197 : valid_wstring{Here}(reject_0))));
behavior default:
  assigns \nothing;
  ensures (C_192 : ((C_193 : (0 <= \result)) &&
                     (C_194 : (\result <= wcslen{Here}(\at(wcs,Old))))));
;

uint32 wcsspn(unsigned_shortP[..] wcs_2, unsigned_shortP[..] accept_1)
  requires (C_201 : ((C_202 : valid_wstring{Here}(wcs_2)) &&
                      (C_203 : valid_wstring{Here}(accept_1))));
behavior default:
  assigns \nothing;
  ensures (C_198 : ((C_199 : (0 <= \result)) &&
                     (C_200 : (\result <= wcslen{Here}(\at(wcs_2,Old))))));
;

unsigned_shortP[..] wcsdup(unsigned_shortP[..] wcs_0)
  requires (C_209 : valid_wstring{Here}(wcs_0));
behavior default:
  assigns \nothing;
  ensures (C_204 : (((C_206 : (\offset_min(\result) <= 0)) &&
                      (C_207 : (\offset_max(\result) >=
                                 wcslen{Here}(\at(wcs_0,Old))))) &&
                     (C_208 : (wcscmp{Here}(\result, \at(wcs_0,Old)) == 0))));
;

unsigned_shortP[..] wcsndup(unsigned_shortP[..] wcs_1, uint32 n_13)
  requires (C_219 : valid_wstring{Here}(wcs_1));
behavior default:
  assigns \nothing;
  ensures (C_210 : (((((C_214 : (\offset_min(\result) <= 0)) &&
                        (C_215 : (\offset_max(\result) >=
                                   minimum(wcslen{Here}(\at(wcs_1,Old)),
                                           \at(n_13,Old))))) &&
                       (C_216 : valid_wstring{Here}(\result))) &&
                      (C_217 : (wcslen{Here}(\result) <= \at(n_13,Old)))) &&
                     (C_218 : (wcsncmp{Here}(\result, \at(wcs_1,Old),
                                             \at(n_13,Old)) ==
                                0))));
;

double atof(charP[..] nptr)
  requires (C_221 : valid_string{Here}(nptr));
behavior default:
  assigns \nothing;
  ensures (C_220 : true);
;

int32 atoi(charP[..] nptr_0)
  requires (C_223 : valid_string{Here}(nptr_0));
behavior default:
  assigns \nothing;
  ensures (C_222 : true);
;

int32 atol(charP[..] nptr_1)
  requires (C_225 : valid_string{Here}(nptr_1));
behavior default:
  assigns \nothing;
  ensures (C_224 : true);
;

int64 atoll(charP[..] nptr_2)
  requires (C_227 : valid_string{Here}(nptr_2));
behavior default:
  assigns \nothing;
  ensures (C_226 : true);
;

charP[..] calloc(uint32 nmemb, uint32 size_0)
behavior default:
  assigns \nothing;
  ensures (C_228 : ((C_229 : (\offset_min(\result) <= 0)) &&
                     (C_230 : (\offset_max(\result) >=
                                ((\at(size_0,Old) * \at(nmemb,Old)) - 1)))));
;

charP[..] realloc(charP[..] ptr_0, uint32 size_2)
  requires (C_234 : (((\offset_min(ptr_0) <= 0) && (\offset_max(ptr_0) >= 0)) ||
                      (ptr_0 == null)));
behavior default:
  assigns \nothing;
  ensures (C_231 : ((C_232 : (\offset_min(\result) <= 0)) &&
                     (C_233 : (\offset_max(\result) >= (\at(size_2,Old) - 1)))));
;

unit abort()
behavior default:
  assigns \nothing;
  ensures (C_235 : false);
;

unit exit(int32 status)
behavior default:
  assigns \nothing;
  ensures (C_236 : false);
;

uint32 mbstowcs(unsigned_shortP[..] wcstr, charP[..] mbstr, uint32 n_1)
  requires (C_240 : ((C_241 : valid_string{Here}(mbstr)) &&
                      ((C_243 : (\offset_min(wcstr) <= 0)) &&
                        (C_244 : (\offset_max(wcstr) >= (n_1 - 1))))));
behavior default:
  assigns (wcstr + [0..(n_1 - 1)]).unsigned_shortM;
  ensures (C_237 : ((C_238 : valid_wstring{Here}(\at(wcstr,Old))) &&
                     (C_239 : (wcslen{Here}(\at(wcstr,Old)) < \at(n_1,Old)))));
;

uint32 wcstombs(charP[..] mbstr_0, unsigned_shortP[..] wcstr_0, uint32 n_14)
  requires (C_248 : ((C_249 : valid_wstring{Here}(wcstr_0)) &&
                      ((C_251 : (\offset_min(mbstr_0) <= 0)) &&
                        (C_252 : (\offset_max(mbstr_0) >= (n_14 - 1))))));
behavior default:
  assigns (mbstr_0 + [0..(n_14 - 1)]).charM;
  ensures (C_245 : ((C_246 : valid_string{Here}(\at(mbstr_0,Old))) &&
                     (C_247 : (strlen{Here}(\at(mbstr_0,Old)) <
                                \at(n_14,Old)))));
;

int32 wctomb(charP[..] s_11, uint16 wc)
  requires (C_256 : (((\offset_min(s_11) <= 0) && (\offset_max(s_11) >= 0)) ||
                      (s_11 == null)));
behavior default:
  assigns (s_11 + [..]).charM;
  ensures (C_253 : true);
behavior zero:
  assumes (s_11 == null);
  assigns \nothing;
  ensures (C_254 : true);
behavior non_null:
  assumes (s_11 != null);
  assigns (s_11 + [..]).charM;
  ensures (C_255 : true);
;

int32 strtol(charP[..] nptr_3, char_xP[..] endptr, int32 base)
behavior default:
  assigns \nothing;
  ensures (C_257 : true);
;

int32 ntz(uint32 x_1)
behavior default:
  ensures (C_298 : true);
{  
   (var int32 n_15);
   
   (var int32 __retres);
   
   {  (if (x_1 == 0) then 
      {  (C_258 : (__retres = 32));
         
         (goto return_label)
      } else ());
      (C_259 : (n_15 = 1));
      (if ((C_267 : ((C_266 : (x_1 & 65535)) :> uint32)) == 0) then 
      {  (C_262 : (n_15 = (C_261 : ((C_260 : (n_15 + 16)) :> int32))));
         (C_265 : (x_1 = (C_264 : ((C_263 : (x_1 / 65536)) :> uint32))))
      } else ());
      (if ((C_275 : ((C_274 : (x_1 & 255)) :> uint32)) == 0) then 
      {  (C_270 : (n_15 = (C_269 : ((C_268 : (n_15 + 8)) :> int32))));
         (C_273 : (x_1 = (C_272 : ((C_271 : (x_1 / 256)) :> uint32))))
      } else ());
      (if ((C_283 : ((C_282 : (x_1 & 15)) :> uint32)) == 0) then 
      {  (C_278 : (n_15 = (C_277 : ((C_276 : (n_15 + 4)) :> int32))));
         (C_281 : (x_1 = (C_280 : ((C_279 : (x_1 / 16)) :> uint32))))
      } else ());
      (if ((C_291 : ((C_290 : (x_1 & 3)) :> uint32)) == 0) then 
      {  (C_286 : (n_15 = (C_285 : ((C_284 : (n_15 + 2)) :> int32))));
         (C_289 : (x_1 = (C_288 : ((C_287 : (x_1 / 4)) :> uint32))))
      } else ());
      (C_297 : (__retres = (C_296 : ((C_295 : ((C_294 : (n_15 :> uint32)) -
                                                (C_293 : ((C_292 : (x_1 & 1)) :> uint32)))) :> int32))));
      (return_label : 
      (return __retres))
   }
}

int32 nlz(uint32 x_0)
behavior default:
  ensures (C_329 : true);
{  
   (var int32 n_16);
   
   (var int32 __retres_0);
   
   {  (if (x_0 == 0) then 
      {  (C_299 : (__retres_0 = 32));
         
         (goto return_label)
      } else ());
      (C_300 : (n_16 = 0));
      (if (x_0 <= 65535) then 
      {  (C_303 : (n_16 = (C_302 : ((C_301 : (n_16 + 16)) :> int32))));
         (C_306 : (x_0 = (C_305 : ((C_304 : (x_0 * 65536)) :> uint32))))
      } else ());
      (if (x_0 <= 16777215) then 
      {  (C_309 : (n_16 = (C_308 : ((C_307 : (n_16 + 8)) :> int32))));
         (C_312 : (x_0 = (C_311 : ((C_310 : (x_0 * 256)) :> uint32))))
      } else ());
      (if (x_0 <= 268435455) then 
      {  (C_315 : (n_16 = (C_314 : ((C_313 : (n_16 + 4)) :> int32))));
         (C_318 : (x_0 = (C_317 : ((C_316 : (x_0 * 16)) :> uint32))))
      } else ());
      (if (x_0 <= 1073741823) then 
      {  (C_321 : (n_16 = (C_320 : ((C_319 : (n_16 + 2)) :> int32))));
         (C_324 : (x_0 = (C_323 : ((C_322 : (x_0 * 4)) :> uint32))))
      } else ());
      (if (x_0 <= 2147483647) then (C_327 : (n_16 = (C_326 : ((C_325 : 
                                                              (n_16 +
                                                                1)) :> int32)))) else ());
      (C_328 : (__retres_0 = n_16));
      (return_label : 
      (return __retres_0))
   }
}

int32 pop(uint32 x_2)
behavior default:
  ensures (C_366 : true);
{  
   (var int32 __retres_1);
   
   {  (C_336 : (x_2 = (C_335 : ((C_334 : (x_2 -
                                           (C_333 : ((C_332 : ((C_331 : (
                                                               (C_330 : 
                                                               (x_2 /
                                                                 2)) :> uint32)) &
                                                                1431655765)) :> uint32)))) :> uint32))));
      (C_345 : (x_2 = (C_344 : ((C_343 : ((C_342 : ((C_341 : (x_2 &
                                                               858993459)) :> uint32)) +
                                           (C_340 : ((C_339 : ((C_338 : (
                                                               (C_337 : 
                                                               (x_2 /
                                                                 4)) :> uint32)) &
                                                                858993459)) :> uint32)))) :> uint32))));
      (C_352 : (x_2 = (C_351 : ((C_350 : ((C_349 : ((C_348 : (x_2 +
                                                               (C_347 : (
                                                               (C_346 : 
                                                               (x_2 /
                                                                 16)) :> uint32)))) :> uint32)) &
                                           252645135)) :> uint32))));
      (C_357 : (x_2 = (C_356 : ((C_355 : (x_2 +
                                           (C_354 : ((C_353 : (x_2 * 256)) :> uint32)))) :> uint32))));
      (C_362 : (x_2 = (C_361 : ((C_360 : (x_2 +
                                           (C_359 : ((C_358 : (x_2 * 65536)) :> uint32)))) :> uint32))));
      (C_365 : (__retres_1 = (C_364 : ((C_363 : (x_2 / 16777216)) :> int32))));
      
      (return __retres_1)
   }
}

uint32 snoob(uint32 x_3)
behavior default:
  ensures (C_386 : true);
{  
   (var uint32 smallest);
   
   (var uint32 ripple);
   
   (var uint32 ones);
   
   (var uint32 __retres_2);
   
   {  (C_371 : (smallest = (C_370 : ((C_369 : (x_3 &
                                                (C_368 : ((C_367 : (- x_3)) :> uint32)))) :> uint32))));
      (C_374 : (ripple = (C_373 : ((C_372 : (x_3 + smallest)) :> uint32))));
      (C_377 : (ones = (C_376 : ((C_375 : (x_3 ^ ripple)) :> uint32))));
      (C_382 : (ones = (C_381 : ((C_380 : ((C_379 : ((C_378 : (ones / 4)) :> uint32)) /
                                            smallest)) :> uint32))));
      (C_385 : (__retres_2 = (C_384 : ((C_383 : (ripple | ones)) :> uint32))));
      
      (return __retres_2)
   }
}

uint32 snoob1(uint32 x_4)
behavior default:
  ensures (C_409 : true);
{  
   (var uint32 smallest_0);
   
   (var uint32 ripple_0);
   
   (var uint32 ones_0);
   
   (var int32 tmp);
   
   (var uint32 __retres_3);
   
   {  (C_391 : (smallest_0 = (C_390 : ((C_389 : (x_4 &
                                                  (C_388 : ((C_387 : (- x_4)) :> uint32)))) :> uint32))));
      (C_394 : (ripple_0 = (C_393 : ((C_392 : (x_4 + smallest_0)) :> uint32))));
      (C_397 : (ones_0 = (C_396 : ((C_395 : (x_4 ^ ripple_0)) :> uint32))));
      
      {  (C_399 : (tmp = (C_398 : ntz(x_4))));
         
         {  
            (assert for default: (C_400 : ((2 + tmp) < 32)));
            (C_405 : (ones_0 = (C_404 : ((C_403 : (ones_0 >>
                                                    (C_402 : ((C_401 : 
                                                              (2 +
                                                                tmp)) :> int32)))) :> uint32))))
         }
      };
      (C_408 : (__retres_3 = (C_407 : ((C_406 : (ripple_0 | ones_0)) :> uint32))));
      
      (return __retres_3)
   }
}

uint32 snoob2(uint32 x_5)
behavior default:
  ensures (C_432 : true);
{  
   (var uint32 smallest_1);
   
   (var uint32 ripple_1);
   
   (var uint32 ones_1);
   
   (var int32 tmp_0);
   
   (var uint32 __retres_4);
   
   {  (C_414 : (smallest_1 = (C_413 : ((C_412 : (x_5 &
                                                  (C_411 : ((C_410 : (- x_5)) :> uint32)))) :> uint32))));
      (C_417 : (ripple_1 = (C_416 : ((C_415 : (x_5 + smallest_1)) :> uint32))));
      (C_420 : (ones_1 = (C_419 : ((C_418 : (x_5 ^ ripple_1)) :> uint32))));
      
      {  (C_422 : (tmp_0 = (C_421 : nlz(smallest_1))));
         
         {  
            (assert for default: (C_423 : ((33 - tmp_0) < 32)));
            (C_428 : (ones_1 = (C_427 : ((C_426 : (ones_1 >>
                                                    (C_425 : ((C_424 : 
                                                              (33 -
                                                                tmp_0)) :> int32)))) :> uint32))))
         }
      };
      (C_431 : (__retres_4 = (C_430 : ((C_429 : (ripple_1 | ones_1)) :> uint32))));
      
      (return __retres_4)
   }
}

uint32 snoob3(uint32 x_6)
behavior default:
  ensures (C_459 : true);
{  
   (var uint32 smallest_2);
   
   (var uint32 ripple_2);
   
   (var uint32 ones_2);
   
   (var int32 tmp_1);
   
   (var uint32 __retres_5);
   
   {  (C_437 : (smallest_2 = (C_436 : ((C_435 : (x_6 &
                                                  (C_434 : ((C_433 : (- x_6)) :> uint32)))) :> uint32))));
      (C_440 : (ripple_2 = (C_439 : ((C_438 : (x_6 + smallest_2)) :> uint32))));
      (C_443 : (ones_2 = (C_442 : ((C_441 : (x_6 ^ ripple_2)) :> uint32))));
      
      {  (C_445 : (tmp_1 = (C_444 : pop(ones_2))));
         
         {  
            (assert for default: (C_448 : ((tmp_1 - 2) >= 0)));
            
            (assert for default: (C_447 : ((tmp_1 - 2) < 32)));
            
            (assert for default: (C_446 : (1 <= (2147483647 >>> (tmp_1 - 2)))));
            (C_455 : (ones_2 = (C_454 : ((C_453 : ((C_452 : ((C_451 : 
                                                             (1 <<
                                                               (C_450 : (
                                                               (C_449 : 
                                                               (tmp_1 -
                                                                 2)) :> int32)))) :> int32)) -
                                                    1)) :> uint32))))
         }
      };
      (C_458 : (__retres_5 = (C_457 : ((C_456 : (ripple_2 | ones_2)) :> uint32))));
      
      (return __retres_5)
   }
}

uint32 next_set_of_n_elements(uint32 x)
behavior default:
  ensures (C_484 : true);
{  
   (var uint32 smallest_3);
   
   (var uint32 ripple_3);
   
   (var uint32 new_smallest);
   
   (var uint32 ones_3);
   
   (var uint32 __retres_6);
   
   {  (if (x == 0) then 
      {  (C_460 : (__retres_6 = 0));
         
         (goto return_label)
      } else ());
      (C_465 : (smallest_3 = (C_464 : ((C_463 : (x &
                                                  (C_462 : ((C_461 : (- x)) :> uint32)))) :> uint32))));
      (C_468 : (ripple_3 = (C_467 : ((C_466 : (x + smallest_3)) :> uint32))));
      (C_473 : (new_smallest = (C_472 : ((C_471 : (ripple_3 &
                                                    (C_470 : ((C_469 : 
                                                              (- ripple_3)) :> uint32)))) :> uint32))));
      (C_480 : (ones_3 = (C_479 : ((C_478 : ((C_477 : ((C_476 : ((C_475 : (
                                                                 (C_474 : 
                                                                 (new_smallest /
                                                                   smallest_3)) :> uint32)) /
                                                                  2)) :> uint32)) -
                                              1)) :> uint32))));
      (C_483 : (__retres_6 = (C_482 : ((C_481 : (ripple_3 | ones_3)) :> uint32))));
      (return_label : 
      (return __retres_6))
   }
}

int32 snoob4(int32 x_7)
behavior default:
  ensures (C_508 : true);
{  
   (var int32 y);
   
   (var int32 __retres_7);
   
   {  (C_491 : (y = (C_490 : ((C_489 : (x_7 +
                                         (C_488 : ((C_487 : (x_7 &
                                                              (C_486 : (
                                                              (C_485 : 
                                                              (- x_7)) :> int32)))) :> int32)))) :> int32))));
      (C_496 : (x_7 = (C_495 : ((C_494 : (x_7 &
                                           (C_493 : ((C_492 : (~ y)) :> int32)))) :> int32))));
      
      loop 
      while (true)
      {  
         {  (if ((C_498 : ((C_497 : (x_7 & 1)) :> int32)) == 0) then () else 
            (goto while_0_break));
            (C_501 : (x_7 = (C_500 : ((C_499 : (x_7 / 2)) :> int32))))
         }
      };
      (while_0_break : ());
      (C_504 : (x_7 = (C_503 : ((C_502 : (x_7 / 2)) :> int32))));
      (C_507 : (__retres_7 = (C_506 : ((C_505 : (y | x_7)) :> int32))));
      
      (return __retres_7)
   }
}

int32 main(int32 argc, char_xP[..] argv)
behavior default:
  ensures (C_546 : true);
{  
   (var int32 n_17);
   
   (var uint32 x_8);
   
   (var uint32 y_0);
   
   (var uint32 z);
   
   (var uint32 u);
   
   (var uint32 v);
   
   (var uint32 w);
   
   (var int32 tmp_2);
   
   (var int32 __retres_8);
   
   {  (if (argc != 2) then (C_509 : exit(1)) else ());
      (C_515 : (let __cil_tmp =
               (C_512 : strtol((C_511 : (C_510 : (argv + 1)).char_xM), null,
                               10))
               in (C_514 : (n_17 = (C_513 : (__cil_tmp :> int32))))));
      (if (n_17 < 1) then 
      (goto _LOR) else (if (n_17 > 7) then 
                       (goto _LOR) else ()));
      
      (goto _LOR_0);
      (_LOR : 
      {  (C_516 : exit(1))
      });
      (_LOR_0 : ());
      
      {  
         (assert for default: (C_519 : (n_17 >= 0)));
         
         (assert for default: (C_518 : (n_17 < 32)));
         
         (assert for default: (C_517 : (1 <= (2147483647 >>> n_17))));
         (C_524 : (x_8 = (C_523 : ((C_522 : ((C_521 : ((C_520 : (1 << n_17)) :> int32)) -
                                              1)) :> uint32))))
      };
      (C_525 : (y_0 = x_8));
      (C_526 : (z = x_8));
      (C_527 : (u = x_8));
      (C_528 : (v = x_8));
      (C_529 : (w = x_8));
      
      loop 
      while (true)
      {  
         {  
            {  (C_531 : (y_0 = (C_530 : snoob1(x_8))));
               (C_533 : (z = (C_532 : snoob2(x_8))));
               (C_535 : (u = (C_534 : snoob3(x_8))));
               (C_537 : (v = (C_536 : next_set_of_n_elements(x_8))));
               (C_540 : (tmp_2 = (C_539 : snoob4((C_538 : (x_8 :> int32))))));
               (C_542 : (w = (C_541 : (tmp_2 :> uint32))));
               (C_544 : (x_8 = (C_543 : snoob(x_8))))
            };
            (if (x_8 <= 255) then () else 
            (goto while_0_break))
         }
      };
      (while_0_break : ());
      (C_545 : (__retres_8 = 0));
      
      (return __retres_8)
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs hd_snoob.jessie/hd_snoob.cloc hd_snoob.jessie/hd_snoob.jc
type charP

type char_xP

type int32

type int64

type int8

type padding

type uint16

type uint32

type uint8

type unsigned_charP

type unsigned_shortP

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic char_xP_tag:  -> char_xP tag_id

axiom char_xP_int : (int_of_tag(char_xP_tag) = (1))

logic char_xP_of_pointer_address: unit pointer -> char_xP pointer

axiom char_xP_of_pointer_address_of_pointer_addr :
 (forall p:char_xP pointer.
  (p = char_xP_of_pointer_address(pointer_address(p))))

axiom char_xP_parenttag_bottom : parenttag(char_xP_tag, bottom_tag)

axiom char_xP_tags :
 (forall x:char_xP pointer.
  (forall char_xP_tag_table:char_xP tag_table.
   instanceof(char_xP_tag_table, x, char_xP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64, y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16, y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32, y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_extensionality :
 (forall x:int64.
  (forall y:int64[eq_int(integer_of_int64(x), integer_of_int64(y))].
   (eq_int(integer_of_int64(x), integer_of_int64(y)) -> (x = y))))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_char_xP(p:char_xP pointer, a:int,
 char_xP_alloc_table:char_xP alloc_table) =
 (offset_min(char_xP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_shortP(p:unsigned_shortP pointer, a:int,
 unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 (offset_min(unsigned_shortP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

function maximum(i_28:int, j_3:int) : int =
 (if lt_int_bool(i_28, j_3) then j_3 else i_28)

logic memchr: charP pointer, int, int, (charP, int8) memory -> bool

logic memcmp: charP pointer, charP pointer, int, (charP, int8) memory,
 (charP, int8) memory -> int

logic memset: charP pointer, int, int, (charP, int8) memory -> bool

function minimum(i_27:int, j_2:int) : int =
 (if lt_int_bool(i_27, j_2) then i_27 else j_2)

axiom no_assign_memchr_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s_3_at_L:(charP, int8) memory.
     (forall n_2:int.
      (forall c:int.
       (forall s_0:charP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s_0), (0), sub_int(n_2, (1))))
         and not_assigns(tmpalloc, charP_charM_s_3_at_L, tmpmem, tmp)) ->
         (memchr(s_0, c, n_2, charP_charM_s_3_at_L) = memchr(s_0, c, n_2,
                                                      tmpmem))))))))))

axiom no_assign_memcmp_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_1_at_L:(charP, int8) memory.
     (forall charP_charM_s2_2_at_L:(charP, int8) memory.
      (forall n:int.
       (forall s2_1:charP pointer.
        (forall s1_1:charP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s2_1), (0), sub_int(n, (1))))
          and not_assigns(tmpalloc, charP_charM_s2_2_at_L, tmpmem, tmp)) ->
          (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
           charP_charM_s1_1_at_L) = memcmp(s1_1, s2_1, n, tmpmem,
                                    charP_charM_s1_1_at_L)))))))))))

axiom no_assign_memcmp_1 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_1_at_L:(charP, int8) memory.
     (forall charP_charM_s2_2_at_L:(charP, int8) memory.
      (forall n:int.
       (forall s2_1:charP pointer.
        (forall s1_1:charP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s1_1), (0), sub_int(n, (1))))
          and not_assigns(tmpalloc, charP_charM_s1_1_at_L, tmpmem, tmp)) ->
          (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
           charP_charM_s1_1_at_L) = memcmp(s1_1, s2_1, n,
                                    charP_charM_s2_2_at_L, tmpmem)))))))))))

axiom no_assign_memset_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s_1_4_at_L:(charP, int8) memory.
     (forall n_4:int.
      (forall c_1:int.
       (forall s_1:charP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s_1), (0), sub_int(n_4, (1))))
         and not_assigns(tmpalloc, charP_charM_s_1_4_at_L, tmpmem, tmp)) ->
         (memset(s_1, c_1, n_4, charP_charM_s_1_4_at_L) = memset(s_1, c_1,
                                                          n_4, tmpmem))))))))))

logic strlen: charP pointer, (charP, int8) memory -> int

logic strchr: charP pointer, int, (charP, int8) memory -> bool

axiom no_assign_strchr_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s_15_10_at_L:(charP, int8) memory.
     (forall c_3:int.
      (forall s_15:charP pointer.
       ((pset_disjoint(tmp,
         pset_range(pset_singleton(s_15), (0),
         strlen(s_15, charP_charM_s_15_10_at_L)))
        and not_assigns(tmpalloc, charP_charM_s_15_10_at_L, tmpmem, tmp)) ->
        (strchr(s_15, c_3, charP_charM_s_15_10_at_L) = strchr(s_15, c_3,
                                                       tmpmem)))))))))

logic strcmp: charP pointer, charP pointer, (charP, int8) memory,
 (charP, int8) memory -> int

axiom no_assign_strcmp_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
     (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
      (forall s2_6:charP pointer.
       (forall s1_6:charP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s2_6), (0),
          strlen(s2_6, charP_charM_s2_6_7_at_L)))
         and not_assigns(tmpalloc, charP_charM_s2_6_7_at_L, tmpmem, tmp)) ->
         (strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L,
          charP_charM_s1_6_6_at_L) = strcmp(s1_6, s2_6, tmpmem,
                                     charP_charM_s1_6_6_at_L))))))))))

axiom no_assign_strcmp_1 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
     (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
      (forall s2_6:charP pointer.
       (forall s1_6:charP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s1_6), (0),
          strlen(s1_6, charP_charM_s1_6_6_at_L)))
         and not_assigns(tmpalloc, charP_charM_s1_6_6_at_L, tmpmem, tmp)) ->
         (strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L,
          charP_charM_s1_6_6_at_L) = strcmp(s1_6, s2_6,
                                     charP_charM_s2_6_7_at_L, tmpmem))))))))))

axiom no_assign_strlen_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
     (forall s_3:charP pointer.
      ((pset_disjoint(tmp, pset_range_right(pset_singleton(s_3), (0)))
       and not_assigns(tmpalloc, charP_charM_s_3_5_at_L, tmpmem, tmp)) ->
       (strlen(s_3, charP_charM_s_3_5_at_L) = strlen(s_3, tmpmem))))))))

logic strncmp: charP pointer, charP pointer, int, (charP, int8) memory,
 (charP, int8) memory -> int

axiom no_assign_strncmp_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
     (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
      (forall n_10:int.
       (forall s2_9:charP pointer.
        (forall s1_9:charP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s2_9), (0), sub_int(n_10, (1))))
          and not_assigns(tmpalloc, charP_charM_s2_9_9_at_L, tmpmem, tmp)) ->
          (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_9_at_L,
           charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10, tmpmem,
                                      charP_charM_s1_9_8_at_L)))))))))))

axiom no_assign_strncmp_1 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
     (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
      (forall n_10:int.
       (forall s2_9:charP pointer.
        (forall s1_9:charP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s1_9), (0), sub_int(n_10, (1))))
          and not_assigns(tmpalloc, charP_charM_s1_9_8_at_L, tmpmem, tmp)) ->
          (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_9_at_L,
           charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                                      charP_charM_s2_9_9_at_L, tmpmem)))))))))))

logic wcslen: unsigned_shortP pointer,
 (unsigned_shortP, uint16) memory -> int

logic wcscmp: unsigned_shortP pointer, unsigned_shortP pointer,
 (unsigned_shortP, uint16) memory, (unsigned_shortP, uint16) memory -> int

axiom no_assign_wcscmp_0 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:
     (unsigned_shortP, uint16) memory.
     (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:
      (unsigned_shortP, uint16) memory.
      (forall s2_11:unsigned_shortP pointer.
       (forall s1_11:unsigned_shortP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s2_11), (0),
          wcslen(s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L)))
         and not_assigns(tmpalloc,
             unsigned_shortP_unsigned_shortM_s2_11_13_at_L, tmpmem, tmp)) ->
         (wcscmp(s1_11, s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
          unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
                                                           s2_11, tmpmem,
                                                           unsigned_shortP_unsigned_shortM_s1_11_12_at_L))))))))))

axiom no_assign_wcscmp_1 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:
     (unsigned_shortP, uint16) memory.
     (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:
      (unsigned_shortP, uint16) memory.
      (forall s2_11:unsigned_shortP pointer.
       (forall s1_11:unsigned_shortP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s1_11), (0),
          wcslen(s1_11, unsigned_shortP_unsigned_shortM_s1_11_12_at_L)))
         and not_assigns(tmpalloc,
             unsigned_shortP_unsigned_shortM_s1_11_12_at_L, tmpmem, tmp)) ->
         (wcscmp(s1_11, s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
          unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
                                                           s2_11,
                                                           unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                                                           tmpmem))))))))))

axiom no_assign_wcslen_0 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
     (unsigned_shortP, uint16) memory.
     (forall s_17:unsigned_shortP pointer.
      ((pset_disjoint(tmp, pset_range_right(pset_singleton(s_17), (0)))
       and not_assigns(tmpalloc,
           unsigned_shortP_unsigned_shortM_s_17_11_at_L, tmpmem, tmp)) ->
       (wcslen(s_17, unsigned_shortP_unsigned_shortM_s_17_11_at_L) = 
       wcslen(s_17, tmpmem))))))))

logic wcsncmp: unsigned_shortP pointer, unsigned_shortP pointer, int,
 (unsigned_shortP, uint16) memory, (unsigned_shortP, uint16) memory -> int

axiom no_assign_wcsncmp_0 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:
     (unsigned_shortP, uint16) memory.
     (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:
      (unsigned_shortP, uint16) memory.
      (forall n_12:int.
       (forall s2_13:unsigned_shortP pointer.
        (forall s1_13:unsigned_shortP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s2_13), (0), sub_int(n_12, (1))))
          and not_assigns(tmpalloc,
              unsigned_shortP_unsigned_shortM_s2_13_15_at_L, tmpmem, tmp)) ->
          (wcsncmp(s1_13, s2_13, n_12,
           unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
           unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                                                            s2_13, n_12,
                                                            tmpmem,
                                                            unsigned_shortP_unsigned_shortM_s1_13_14_at_L)))))))))))

axiom no_assign_wcsncmp_1 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:
     (unsigned_shortP, uint16) memory.
     (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:
      (unsigned_shortP, uint16) memory.
      (forall n_12:int.
       (forall s2_13:unsigned_shortP pointer.
        (forall s1_13:unsigned_shortP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s1_13), (0), sub_int(n_12, (1))))
          and not_assigns(tmpalloc,
              unsigned_shortP_unsigned_shortM_s1_13_14_at_L, tmpmem, tmp)) ->
          (wcsncmp(s1_13, s2_13, n_12,
           unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
           unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                                                            s2_13, n_12,
                                                            unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                                                            tmpmem)))))))))))

axiom no_update_memchr_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s_3_at_L:(charP, int8) memory.
    (forall n_2:int.
     (forall c:int.
      (forall s_0:charP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s_0), (0), sub_int(n_2, (1))))) ->
        (memchr(s_0, c, n_2, charP_charM_s_3_at_L) = memchr(s_0, c, n_2,
                                                     store(charP_charM_s_3_at_L,
                                                     tmp, tmpval))))))))))

axiom no_update_memcmp_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_1_at_L:(charP, int8) memory.
    (forall charP_charM_s2_2_at_L:(charP, int8) memory.
     (forall n:int.
      (forall s2_1:charP pointer.
       (forall s1_1:charP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s2_1), (0), sub_int(n, (1))))) ->
         (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L, charP_charM_s1_1_at_L) = 
         memcmp(s1_1, s2_1, n, store(charP_charM_s2_2_at_L, tmp, tmpval),
         charP_charM_s1_1_at_L))))))))))

axiom no_update_memcmp_1 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_1_at_L:(charP, int8) memory.
    (forall charP_charM_s2_2_at_L:(charP, int8) memory.
     (forall n:int.
      (forall s2_1:charP pointer.
       (forall s1_1:charP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s1_1), (0), sub_int(n, (1))))) ->
         (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L, charP_charM_s1_1_at_L) = 
         memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
         store(charP_charM_s1_1_at_L, tmp, tmpval)))))))))))

axiom no_update_memset_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s_1_4_at_L:(charP, int8) memory.
    (forall n_4:int.
     (forall c_1:int.
      (forall s_1:charP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s_1), (0), sub_int(n_4, (1))))) ->
        (memset(s_1, c_1, n_4, charP_charM_s_1_4_at_L) = memset(s_1, c_1,
                                                         n_4,
                                                         store(charP_charM_s_1_4_at_L,
                                                         tmp, tmpval))))))))))

axiom no_update_strchr_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s_15_10_at_L:(charP, int8) memory.
    (forall c_3:int.
     (forall s_15:charP pointer.
      ((not in_pset(tmp,
            pset_range(pset_singleton(s_15), (0),
            strlen(s_15, charP_charM_s_15_10_at_L)))) ->
       (strchr(s_15, c_3, charP_charM_s_15_10_at_L) = strchr(s_15, c_3,
                                                      store(charP_charM_s_15_10_at_L,
                                                      tmp, tmpval)))))))))

axiom no_update_strcmp_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
    (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
     (forall s2_6:charP pointer.
      (forall s1_6:charP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s2_6), (0),
             strlen(s2_6, charP_charM_s2_6_7_at_L)))) ->
        (strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L, charP_charM_s1_6_6_at_L) = 
        strcmp(s1_6, s2_6, store(charP_charM_s2_6_7_at_L, tmp, tmpval),
        charP_charM_s1_6_6_at_L)))))))))

axiom no_update_strcmp_1 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
    (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
     (forall s2_6:charP pointer.
      (forall s1_6:charP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s1_6), (0),
             strlen(s1_6, charP_charM_s1_6_6_at_L)))) ->
        (strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L, charP_charM_s1_6_6_at_L) = 
        strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L,
        store(charP_charM_s1_6_6_at_L, tmp, tmpval))))))))))

axiom no_update_strlen_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_3:charP pointer.
     ((not in_pset(tmp, pset_range_right(pset_singleton(s_3), (0)))) ->
      (strlen(s_3, charP_charM_s_3_5_at_L) = strlen(s_3,
                                             store(charP_charM_s_3_5_at_L,
                                             tmp, tmpval))))))))

axiom no_update_strncmp_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
    (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
     (forall n_10:int.
      (forall s2_9:charP pointer.
       (forall s1_9:charP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s2_9), (0), sub_int(n_10, (1))))) ->
         (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_9_at_L,
          charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                                     store(charP_charM_s2_9_9_at_L, tmp,
                                     tmpval), charP_charM_s1_9_8_at_L))))))))))

axiom no_update_strncmp_1 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
    (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
     (forall n_10:int.
      (forall s2_9:charP pointer.
       (forall s1_9:charP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s1_9), (0), sub_int(n_10, (1))))) ->
         (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_9_at_L,
          charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                                     charP_charM_s2_9_9_at_L,
                                     store(charP_charM_s1_9_8_at_L, tmp,
                                     tmpval)))))))))))

axiom no_update_wcscmp_0 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:
    (unsigned_shortP, uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:
     (unsigned_shortP, uint16) memory.
     (forall s2_11:unsigned_shortP pointer.
      (forall s1_11:unsigned_shortP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s2_11), (0),
             wcslen(s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L)))) ->
        (wcscmp(s1_11, s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
         unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
                                                          s2_11,
                                                          store(unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                                                          tmp, tmpval),
                                                          unsigned_shortP_unsigned_shortM_s1_11_12_at_L)))))))))

axiom no_update_wcscmp_1 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:
    (unsigned_shortP, uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:
     (unsigned_shortP, uint16) memory.
     (forall s2_11:unsigned_shortP pointer.
      (forall s1_11:unsigned_shortP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s1_11), (0),
             wcslen(s1_11, unsigned_shortP_unsigned_shortM_s1_11_12_at_L)))) ->
        (wcscmp(s1_11, s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
         unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
                                                          s2_11,
                                                          unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                                                          store(unsigned_shortP_unsigned_shortM_s1_11_12_at_L,
                                                          tmp, tmpval))))))))))

axiom no_update_wcslen_0 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
    (unsigned_shortP, uint16) memory.
    (forall s_17:unsigned_shortP pointer.
     ((not in_pset(tmp, pset_range_right(pset_singleton(s_17), (0)))) ->
      (wcslen(s_17, unsigned_shortP_unsigned_shortM_s_17_11_at_L) = wcslen(s_17,
                                                                    store(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                                                                    tmp,
                                                                    tmpval))))))))

axiom no_update_wcsncmp_0 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:
    (unsigned_shortP, uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:
     (unsigned_shortP, uint16) memory.
     (forall n_12:int.
      (forall s2_13:unsigned_shortP pointer.
       (forall s1_13:unsigned_shortP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s2_13), (0), sub_int(n_12, (1))))) ->
         (wcsncmp(s1_13, s2_13, n_12,
          unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
          unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                                                           s2_13, n_12,
                                                           store(unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                                                           tmp, tmpval),
                                                           unsigned_shortP_unsigned_shortM_s1_13_14_at_L))))))))))

axiom no_update_wcsncmp_1 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:
    (unsigned_shortP, uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:
     (unsigned_shortP, uint16) memory.
     (forall n_12:int.
      (forall s2_13:unsigned_shortP pointer.
       (forall s1_13:unsigned_shortP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s1_13), (0), sub_int(n_12, (1))))) ->
         (wcsncmp(s1_13, s2_13, n_12,
          unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
          unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                                                           s2_13, n_12,
                                                           unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                                                           store(unsigned_shortP_unsigned_shortM_s1_13_14_at_L,
                                                           tmp, tmpval)))))))))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_char_xP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(char_xP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic unsigned_shortP_of_pointer_address: unit pointer -> unsigned_shortP pointer

axiom pointer_addr_of_unsigned_shortP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_shortP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_char_xP(p:char_xP pointer, b:int,
 char_xP_alloc_table:char_xP alloc_table) =
 (offset_max(char_xP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_shortP(p:unsigned_shortP pointer,
 b:int, unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 (offset_max(unsigned_shortP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_char_xP(p:char_xP pointer, a:int, b:int,
 char_xP_alloc_table:char_xP alloc_table) =
 ((offset_min(char_xP_alloc_table, p) = a)
 and (offset_max(char_xP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_shortP(p:unsigned_shortP pointer, a:int,
 b:int, unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 ((offset_min(unsigned_shortP_alloc_table, p) = a)
 and (offset_max(unsigned_shortP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_char_xP(p:char_xP pointer, a:int, b:int,
 char_xP_alloc_table:char_xP alloc_table) =
 ((offset_min(char_xP_alloc_table, p) = a)
 and (offset_max(char_xP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_shortP(p:unsigned_shortP pointer,
 a:int, b:int, unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 ((offset_min(unsigned_shortP_alloc_table, p) = a)
 and (offset_max(unsigned_shortP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_extensionality :
 (forall x:uint16.
  (forall y:uint16[eq_int(integer_of_uint16(x), integer_of_uint16(y))].
   (eq_int(integer_of_uint16(x), integer_of_uint16(y)) -> (x = y))))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_extensionality :
 (forall x:uint32.
  (forall y:uint32[eq_int(integer_of_uint32(x), integer_of_uint32(y))].
   (eq_int(integer_of_uint32(x), integer_of_uint32(y)) -> (x = y))))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

logic unsigned_shortP_tag:  -> unsigned_shortP tag_id

axiom unsigned_shortP_int : (int_of_tag(unsigned_shortP_tag) = (1))

axiom unsigned_shortP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_shortP pointer.
  (p = unsigned_shortP_of_pointer_address(pointer_address(p))))

axiom unsigned_shortP_parenttag_bottom :
 parenttag(unsigned_shortP_tag, bottom_tag)

axiom unsigned_shortP_tags :
 (forall x:unsigned_shortP pointer.
  (forall unsigned_shortP_tag_table:unsigned_shortP tag_table.
   instanceof(unsigned_shortP_tag_table, x, unsigned_shortP_tag)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_char_xP(p:char_xP pointer, a:int, b:int,
 char_xP_alloc_table:char_xP alloc_table) =
 ((offset_min(char_xP_alloc_table, p) <= a)
 and (offset_max(char_xP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_unsigned_shortP(p:unsigned_shortP pointer, a:int, b:int,
 unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 ((offset_min(unsigned_shortP_alloc_table, p) <= a)
 and (offset_max(unsigned_shortP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_string(s_28:charP pointer,
 charP_s_28_16_alloc_table_at_L:charP alloc_table,
 charP_charM_s_28_16_at_L:(charP, int8) memory) =
 (le_int((0), strlen(s_28, charP_charM_s_28_16_at_L))
 and (le_int(offset_min(charP_s_28_16_alloc_table_at_L, s_28), (0))
     and ge_int(offset_max(charP_s_28_16_alloc_table_at_L, s_28),
         strlen(s_28, charP_charM_s_28_16_at_L))))

predicate valid_string_or_null(s_29:charP pointer,
 charP_s_29_17_alloc_table_at_L:charP alloc_table,
 charP_charM_s_29_17_at_L:(charP, int8) memory) =
 ((s_29 = null)
 or valid_string(s_29, charP_s_29_17_alloc_table_at_L,
    charP_charM_s_29_17_at_L))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_char_xP(p:char_xP pointer, a:int, b:int,
 char_xP_alloc_table:char_xP alloc_table) =
 ((offset_min(char_xP_alloc_table, p) <= a)
 and (offset_max(char_xP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_unsigned_shortP(p:unsigned_shortP pointer, a:int,
 b:int, unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 ((offset_min(unsigned_shortP_alloc_table, p) <= a)
 and (offset_max(unsigned_shortP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_wstring(s_30:unsigned_shortP pointer,
 unsigned_shortP_s_30_18_alloc_table_at_L:unsigned_shortP alloc_table,
 unsigned_shortP_unsigned_shortM_s_30_18_at_L:(unsigned_shortP, uint16) memory) =
 (le_int((0), wcslen(s_30, unsigned_shortP_unsigned_shortM_s_30_18_at_L))
 and (le_int(offset_min(unsigned_shortP_s_30_18_alloc_table_at_L, s_30), (0))
     and ge_int(offset_max(unsigned_shortP_s_30_18_alloc_table_at_L, s_30),
         wcslen(s_30, unsigned_shortP_unsigned_shortM_s_30_18_at_L))))

predicate valid_wstring_or_null(s_31:unsigned_shortP pointer,
 unsigned_shortP_s_31_19_alloc_table_at_L:unsigned_shortP alloc_table,
 unsigned_shortP_unsigned_shortM_s_31_19_at_L:(unsigned_shortP, uint16) memory) =
 ((s_31 = null)
 or valid_wstring(s_31, unsigned_shortP_s_31_19_alloc_table_at_L,
    unsigned_shortP_unsigned_shortM_s_31_19_at_L))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

axiom memcmp_range :
 (forall charP_charM_s2_2_at_L:(charP, int8) memory.
  (forall charP_charM_s1_1_at_L:(charP, int8) memory.
   (forall s1_0_1:charP pointer.
    (forall s2_0_1:charP pointer.
     (forall n_0:int.
      (le_int(sub_int(neg_int((2147483647)), (1)),
       memcmp(s1_0_1, s2_0_1, n_0, charP_charM_s2_2_at_L,
       charP_charM_s1_1_at_L))
      and le_int(memcmp(s1_0_1, s2_0_1, n_0, charP_charM_s2_2_at_L,
                 charP_charM_s1_1_at_L),
          (2147483647))))))))

axiom memcmp_zero :
 (forall charP_charM_s2_2_at_L:(charP, int8) memory.
  (forall charP_charM_s1_1_at_L:(charP, int8) memory.
   (forall s1_1_1:charP pointer.
    (forall s2_1_1:charP pointer.
     (forall n_1_0:int.
      ((memcmp(s1_1_1, s2_1_1, n_1_0, charP_charM_s2_2_at_L,
        charP_charM_s1_1_at_L) = (0))
      <-> (forall i_1:int.
           ((le_int((0), i_1) and lt_int(i_1, n_1_0)) ->
            (integer_of_int8(select(charP_charM_s1_1_at_L,
                             shift(s1_1_1, i_1))) = integer_of_int8(select(charP_charM_s2_2_at_L,
                                                                    shift(s2_1_1,
                                                                    i_1))))))))))))

axiom memchr_def :
 (forall charP_charM_s_3_at_L:(charP, int8) memory.
  (forall s_0_1:charP pointer.
   (forall c_0_1:int.
    (forall n_3_0:int.
     ((memchr(s_0_1, c_0_1, n_3_0, charP_charM_s_3_at_L) = true)
     <-> (exists i_2:int32.
          (le_int((0), integer_of_int32(i_2))
          and (lt_int(integer_of_int32(i_2), n_3_0)
              and (integer_of_int8(select(charP_charM_s_3_at_L,
                                   shift(s_0_1, integer_of_int32(i_2)))) = c_0_1)))))))))

axiom memset_def :
 (forall charP_charM_s_1_4_at_L:(charP, int8) memory.
  (forall s_2_1:charP pointer.
   (forall c_2_0:int.
    (forall n_5_0:int.
     ((memset(s_2_1, c_2_0, n_5_0, charP_charM_s_1_4_at_L) = true)
     <-> (forall i_3:int.
          ((le_int((0), i_3) and lt_int(i_3, n_5_0)) ->
           (integer_of_int8(select(charP_charM_s_1_4_at_L, shift(s_2_1, i_3))) = c_2_0))))))))

axiom strlen_pos_or_null :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_4_0:charP pointer.
   (forall i_4:int.
    ((le_int((0), i_4)
     and (le_int(i_4, (2147483647))
         and ((forall j_0:int.
               ((le_int((0), j_0) and lt_int(j_0, i_4)) ->
                (integer_of_int8(select(charP_charM_s_3_5_at_L,
                                 shift(s_4_0, j_0))) <> (0))))
             and (integer_of_int8(select(charP_charM_s_3_5_at_L,
                                  shift(s_4_0, i_4))) = (0))))) ->
     (strlen(s_4_0, charP_charM_s_3_5_at_L) = i_4)))))

axiom strlen_neg :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_5_0:charP pointer.
   ((forall i_5:int.
     ((le_int((0), i_5) and le_int(i_5, (2147483647))) ->
      (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_5_0, i_5))) <> (0)))) ->
    lt_int(strlen(s_5_0, charP_charM_s_3_5_at_L), (0)))))

axiom strlen_range :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_6_0:charP pointer.
   le_int(strlen(s_6_0, charP_charM_s_3_5_at_L), (2147483647))))

axiom strlen_before_null :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_7_0:charP pointer.
   (forall i_6:int.
    ((le_int((0), i_6)
     and lt_int(i_6, strlen(s_7_0, charP_charM_s_3_5_at_L))) ->
     (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_7_0, i_6))) <> (0))))))

axiom strlen_at_null :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_8_0:charP pointer.
   (le_int((0), strlen(s_8_0, charP_charM_s_3_5_at_L)) ->
    (integer_of_int8(select(charP_charM_s_3_5_at_L,
                     shift(s_8_0, strlen(s_8_0, charP_charM_s_3_5_at_L)))) = (0)))))

axiom strlen_not_zero :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_9_0:charP pointer.
   (forall i_7:int.
    ((le_int((0), i_7)
     and (le_int(i_7, strlen(s_9_0, charP_charM_s_3_5_at_L))
         and (integer_of_int8(select(charP_charM_s_3_5_at_L,
                              shift(s_9_0, i_7))) <> (0)))) ->
     lt_int(i_7, strlen(s_9_0, charP_charM_s_3_5_at_L))))))

axiom strlen_zero :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_10_0:charP pointer.
   (forall i_8:int.
    ((le_int((0), i_8)
     and (le_int(i_8, strlen(s_10_0, charP_charM_s_3_5_at_L))
         and (integer_of_int8(select(charP_charM_s_3_5_at_L,
                              shift(s_10_0, i_8))) = (0)))) ->
     (i_8 = strlen(s_10_0, charP_charM_s_3_5_at_L))))))

axiom strlen_sup :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_11_0:charP pointer.
   (forall i_9:int.
    ((le_int((0), i_9)
     and (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_11_0, i_9))) = (0))) ->
     (le_int((0), strlen(s_11_0, charP_charM_s_3_5_at_L))
     and le_int(strlen(s_11_0, charP_charM_s_3_5_at_L), i_9))))))

axiom strlen_shift :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_12:charP pointer.
   (forall i_10:int.
    ((le_int((0), i_10)
     and le_int(i_10, strlen(s_12, charP_charM_s_3_5_at_L))) ->
     (strlen(shift(s_12, i_10), charP_charM_s_3_5_at_L) = sub_int(strlen(s_12,
                                                                  charP_charM_s_3_5_at_L),
                                                          i_10))))))

axiom strlen_create :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_13:charP pointer.
   (forall i_11:int.
    ((le_int((0), i_11)
     and (le_int(i_11, (2147483647))
         and (integer_of_int8(select(charP_charM_s_3_5_at_L,
                              shift(s_13, i_11))) = (0)))) ->
     (le_int((0), strlen(s_13, charP_charM_s_3_5_at_L))
     and le_int(strlen(s_13, charP_charM_s_3_5_at_L), i_11))))))

axiom strlen_create_shift :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s_14:charP pointer.
   (forall i_12:int.
    (forall k:int.
     ((le_int((0), k)
      and (le_int(k, i_12)
          and (le_int(i_12, (2147483647))
              and (integer_of_int8(select(charP_charM_s_3_5_at_L,
                                   shift(s_14, i_12))) = (0))))) ->
      (le_int((0), strlen(shift(s_14, k), charP_charM_s_3_5_at_L))
      and le_int(strlen(shift(s_14, k), charP_charM_s_3_5_at_L),
          sub_int(i_12, k))))))))

axiom memcmp_strlen_left :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s1_2_1:charP pointer.
   (forall s2_2_1:charP pointer.
    (forall n_6_0:int.
     (((memcmp(s1_2_1, s2_2_1, n_6_0, charP_charM_s_3_5_at_L,
        charP_charM_s_3_5_at_L) = (0))
      and lt_int(strlen(s1_2_1, charP_charM_s_3_5_at_L), n_6_0)) ->
      (strlen(s1_2_1, charP_charM_s_3_5_at_L) = strlen(s2_2_1,
                                                charP_charM_s_3_5_at_L)))))))

axiom memcmp_strlen_right :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s1_3:charP pointer.
   (forall s2_3:charP pointer.
    (forall n_7_0:int.
     (((memcmp(s1_3, s2_3, n_7_0, charP_charM_s_3_5_at_L,
        charP_charM_s_3_5_at_L) = (0))
      and lt_int(strlen(s2_3, charP_charM_s_3_5_at_L), n_7_0)) ->
      (strlen(s1_3, charP_charM_s_3_5_at_L) = strlen(s2_3,
                                              charP_charM_s_3_5_at_L)))))))

axiom memcmp_strlen_shift_left :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s1_4:charP pointer.
   (forall s2_4:charP pointer.
    (forall k_0:int.
     (forall n_8_0:int.
      (((memcmp(s1_4, shift(s2_4, k_0), n_8_0, charP_charM_s_3_5_at_L,
         charP_charM_s_3_5_at_L) = (0))
       and (le_int((0), k_0)
           and lt_int(strlen(s1_4, charP_charM_s_3_5_at_L), n_8_0))) ->
       (le_int((0), strlen(s2_4, charP_charM_s_3_5_at_L))
       and le_int(strlen(s2_4, charP_charM_s_3_5_at_L),
           add_int(k_0, strlen(s1_4, charP_charM_s_3_5_at_L))))))))))

axiom memcmp_strlen_shift_right :
 (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
  (forall s1_5:charP pointer.
   (forall s2_5:charP pointer.
    (forall k_1:int.
     (forall n_9_0:int.
      (((memcmp(shift(s1_5, k_1), s2_5, n_9_0, charP_charM_s_3_5_at_L,
         charP_charM_s_3_5_at_L) = (0))
       and (le_int((0), k_1)
           and lt_int(strlen(s2_5, charP_charM_s_3_5_at_L), n_9_0))) ->
       (le_int((0), strlen(s1_5, charP_charM_s_3_5_at_L))
       and le_int(strlen(s1_5, charP_charM_s_3_5_at_L),
           add_int(k_1, strlen(s2_5, charP_charM_s_3_5_at_L))))))))))

axiom strcmp_range :
 (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
  (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
   (forall s1_7:charP pointer.
    (forall s2_7:charP pointer.
     (le_int(sub_int(neg_int((2147483647)), (1)),
      strcmp(s1_7, s2_7, charP_charM_s2_6_7_at_L, charP_charM_s1_6_6_at_L))
     and le_int(strcmp(s1_7, s2_7, charP_charM_s2_6_7_at_L,
                charP_charM_s1_6_6_at_L),
         (2147483647)))))))

axiom strcmp_zero :
 (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
  (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
   (forall s1_8:charP pointer.
    (forall s2_8:charP pointer.
     ((strcmp(s1_8, s2_8, charP_charM_s2_6_7_at_L, charP_charM_s1_6_6_at_L) = (0))
     <-> ((strlen(s1_8, charP_charM_s1_6_6_at_L) = strlen(s2_8,
                                                   charP_charM_s2_6_7_at_L))
         and (forall i_13:int.
              ((le_int((0), i_13)
               and le_int(i_13, strlen(s1_8, charP_charM_s1_6_6_at_L))) ->
               (integer_of_int8(select(charP_charM_s1_6_6_at_L,
                                shift(s1_8, i_13))) = integer_of_int8(
                                                      select(charP_charM_s2_6_7_at_L,
                                                      shift(s2_8, i_13))))))))))))

axiom strncmp_zero :
 (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
  (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
   (forall s1_10:charP pointer.
    (forall s2_10:charP pointer.
     (forall n_11_0:int.
      ((strncmp(s1_10, s2_10, n_11_0, charP_charM_s2_9_9_at_L,
        charP_charM_s1_9_8_at_L) = (0))
      <-> ((lt_int(strlen(s1_10, charP_charM_s1_9_8_at_L), n_11_0)
           and (strcmp(s1_10, s2_10, charP_charM_s2_9_9_at_L,
                charP_charM_s1_9_8_at_L) = (0)))
          or (forall i_14:int.
              ((le_int((0), i_14) and lt_int(i_14, n_11_0)) ->
               (integer_of_int8(select(charP_charM_s1_9_8_at_L,
                                shift(s1_10, i_14))) = integer_of_int8(
                                                       select(charP_charM_s2_9_9_at_L,
                                                       shift(s2_10, i_14)))))))))))))

axiom strchr_def :
 (forall charP_charM_s_15_10_at_L:(charP, int8) memory.
  (forall s_16:charP pointer.
   (forall c_4:int.
    ((strchr(s_16, c_4, charP_charM_s_15_10_at_L) = true)
    <-> (exists i_15:int.
         (le_int((0), i_15)
         and (le_int(i_15, strlen(s_16, charP_charM_s_15_10_at_L))
             and (integer_of_int8(select(charP_charM_s_15_10_at_L,
                                  shift(s_16, i_15))) = c_4))))))))

axiom wcslen_pos_or_null :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_18:unsigned_shortP pointer.
   (forall i_16:int.
    ((le_int((0), i_16)
     and ((forall j_1:int.
           ((le_int((0), j_1) and lt_int(j_1, i_16)) ->
            (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                               shift(s_18, j_1))) <> (0))))
         and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                                shift(s_18, i_16))) = (0)))) ->
     (wcslen(s_18, unsigned_shortP_unsigned_shortM_s_17_11_at_L) = i_16)))))

axiom wcslen_neg :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_19:unsigned_shortP pointer.
   ((forall i_17:int.
     (le_int((0), i_17) ->
      (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                         shift(s_19, i_17))) <> (0)))) ->
    lt_int(wcslen(s_19, unsigned_shortP_unsigned_shortM_s_17_11_at_L), (0)))))

axiom wcslen_before_null :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_20:unsigned_shortP pointer.
   (forall i_18:int32.
    ((le_int((0), integer_of_int32(i_18))
     and lt_int(integer_of_int32(i_18),
         wcslen(s_20, unsigned_shortP_unsigned_shortM_s_17_11_at_L))) ->
     (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                        shift(s_20, integer_of_int32(i_18)))) <> (0))))))

axiom wcslen_at_null :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_21:unsigned_shortP pointer.
   (le_int((0), wcslen(s_21, unsigned_shortP_unsigned_shortM_s_17_11_at_L)) ->
    (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                       shift(s_21,
                       wcslen(s_21,
                       unsigned_shortP_unsigned_shortM_s_17_11_at_L)))) = (0)))))

axiom wcslen_not_zero :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_22:unsigned_shortP pointer.
   (forall i_19:int32.
    ((le_int((0), integer_of_int32(i_19))
     and (le_int(integer_of_int32(i_19),
          wcslen(s_22, unsigned_shortP_unsigned_shortM_s_17_11_at_L))
         and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                                shift(s_22, integer_of_int32(i_19)))) <> (0)))) ->
     lt_int(integer_of_int32(i_19),
     wcslen(s_22, unsigned_shortP_unsigned_shortM_s_17_11_at_L))))))

axiom wcslen_zero :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_23:unsigned_shortP pointer.
   (forall i_20:int32.
    ((le_int((0), integer_of_int32(i_20))
     and (le_int(integer_of_int32(i_20),
          wcslen(s_23, unsigned_shortP_unsigned_shortM_s_17_11_at_L))
         and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                                shift(s_23, integer_of_int32(i_20)))) = (0)))) ->
     (integer_of_int32(i_20) = wcslen(s_23,
                               unsigned_shortP_unsigned_shortM_s_17_11_at_L))))))

axiom wcslen_sup :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_24:unsigned_shortP pointer.
   (forall i_21:int32.
    ((le_int((0), integer_of_int32(i_21))
     and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                            shift(s_24, integer_of_int32(i_21)))) = (0))) ->
     (le_int((0), wcslen(s_24, unsigned_shortP_unsigned_shortM_s_17_11_at_L))
     and le_int(wcslen(s_24, unsigned_shortP_unsigned_shortM_s_17_11_at_L),
         integer_of_int32(i_21)))))))

axiom wcslen_shift :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_25:unsigned_shortP pointer.
   (forall i_22:int32.
    ((le_int((0), integer_of_int32(i_22))
     and le_int(integer_of_int32(i_22),
         wcslen(s_25, unsigned_shortP_unsigned_shortM_s_17_11_at_L))) ->
     (wcslen(shift(s_25, integer_of_int32(i_22)),
      unsigned_shortP_unsigned_shortM_s_17_11_at_L) = sub_int(wcslen(s_25,
                                                              unsigned_shortP_unsigned_shortM_s_17_11_at_L),
                                                      integer_of_int32(i_22)))))))

axiom wcslen_create :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_26:unsigned_shortP pointer.
   (forall i_23:int32.
    ((le_int((0), integer_of_int32(i_23))
     and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                            shift(s_26, integer_of_int32(i_23)))) = (0))) ->
     (le_int((0), wcslen(s_26, unsigned_shortP_unsigned_shortM_s_17_11_at_L))
     and le_int(wcslen(s_26, unsigned_shortP_unsigned_shortM_s_17_11_at_L),
         integer_of_int32(i_23)))))))

axiom wcslen_create_shift :
 (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_27:unsigned_shortP pointer.
   (forall i_24:int32.
    (forall k_2:int32.
     ((le_int((0), integer_of_int32(k_2))
      and (le_int(integer_of_int32(k_2), integer_of_int32(i_24))
          and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
                                 shift(s_27, integer_of_int32(i_24)))) = (0)))) ->
      (le_int((0),
       wcslen(shift(s_27, integer_of_int32(k_2)),
       unsigned_shortP_unsigned_shortM_s_17_11_at_L))
      and le_int(wcslen(shift(s_27, integer_of_int32(k_2)),
                 unsigned_shortP_unsigned_shortM_s_17_11_at_L),
          sub_int(integer_of_int32(i_24), integer_of_int32(k_2)))))))))

axiom wcscmp_zero :
 (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:
  (unsigned_shortP, uint16) memory.
  (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:
   (unsigned_shortP, uint16) memory.
   (forall s1_12:unsigned_shortP pointer.
    (forall s2_12:unsigned_shortP pointer.
     ((wcscmp(s1_12, s2_12, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
       unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = (0))
     <-> ((wcslen(s1_12, unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = 
          wcslen(s2_12, unsigned_shortP_unsigned_shortM_s2_11_13_at_L))
         and (forall i_25:int.
              ((le_int((0), i_25)
               and le_int(i_25,
                   wcslen(s1_12,
                   unsigned_shortP_unsigned_shortM_s1_11_12_at_L))) ->
               (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s1_11_12_at_L,
                                  shift(s1_12, i_25))) = integer_of_uint16(
                                                         select(unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                                                         shift(s2_12, i_25))))))))))))

axiom wcsncmp_zero :
 (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:
  (unsigned_shortP, uint16) memory.
  (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:
   (unsigned_shortP, uint16) memory.
   (forall s1_14:unsigned_shortP pointer.
    (forall s2_14:unsigned_shortP pointer.
     (forall n_13_0:int.
      ((wcsncmp(s1_14, s2_14, n_13_0,
        unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
        unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = (0))
      <-> ((lt_int(wcslen(s1_14,
                   unsigned_shortP_unsigned_shortM_s1_13_14_at_L),
            n_13_0)
           and (wcscmp(s1_14, s2_14,
                unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = (0)))
          or (forall i_26:int.
              ((le_int((0), i_26) and lt_int(i_26, n_13_0)) ->
               (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s1_13_14_at_L,
                                  shift(s1_14, i_26))) = integer_of_uint16(
                                                         select(unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                                                         shift(s2_14, i_26)))))))))))))

exception Goto__LOR_0_exc of unit

exception Goto__LOR_exc of unit

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter abort : tt:unit -> { } unit { (JC_<somenum>: (false = true)) }

parameter abort_requires : tt:unit -> { } unit { (JC_<somenum>: (false = true)) }

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter char_xP_alloc_table : char_xP alloc_table ref

parameter char_xP_tag_table : char_xP tag_table ref

parameter alloc_struct_char_xP :
 n:int ->
  char_xP_alloc_table:char_xP alloc_table ref ->
   char_xP_tag_table:char_xP tag_table ref ->
    { } char_xP pointer writes char_xP_alloc_table,char_xP_tag_table
    { (strict_valid_struct_char_xP(result, (0), sub_int(n, (1)),
       char_xP_alloc_table)
      and (alloc_extends(char_xP_alloc_table@, char_xP_alloc_table)
          and (alloc_fresh(char_xP_alloc_table@, result, n)
              and instanceof(char_xP_tag_table, result, char_xP_tag)))) }

parameter alloc_struct_char_xP_requires :
 n:int ->
  char_xP_alloc_table:char_xP alloc_table ref ->
   char_xP_tag_table:char_xP tag_table ref ->
    { ge_int(n, (0))} char_xP pointer
    writes char_xP_alloc_table,char_xP_tag_table
    { (strict_valid_struct_char_xP(result, (0), sub_int(n, (1)),
       char_xP_alloc_table)
      and (alloc_extends(char_xP_alloc_table@, char_xP_alloc_table)
          and (alloc_fresh(char_xP_alloc_table@, result, n)
              and instanceof(char_xP_tag_table, result, char_xP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter unsigned_shortP_alloc_table : unsigned_shortP alloc_table ref

parameter unsigned_shortP_tag_table : unsigned_shortP tag_table ref

parameter alloc_struct_unsigned_shortP :
 n:int ->
  unsigned_shortP_alloc_table:unsigned_shortP alloc_table ref ->
   unsigned_shortP_tag_table:unsigned_shortP tag_table ref ->
    { } unsigned_shortP pointer
    writes unsigned_shortP_alloc_table,unsigned_shortP_tag_table
    { (strict_valid_struct_unsigned_shortP(result, (0), sub_int(n, (1)),
       unsigned_shortP_alloc_table)
      and (alloc_extends(unsigned_shortP_alloc_table@,
           unsigned_shortP_alloc_table)
          and (alloc_fresh(unsigned_shortP_alloc_table@, result, n)
              and instanceof(unsigned_shortP_tag_table, result,
                  unsigned_shortP_tag)))) }

parameter alloc_struct_unsigned_shortP_requires :
 n:int ->
  unsigned_shortP_alloc_table:unsigned_shortP alloc_table ref ->
   unsigned_shortP_tag_table:unsigned_shortP tag_table ref ->
    { ge_int(n, (0))} unsigned_shortP pointer
    writes unsigned_shortP_alloc_table,unsigned_shortP_tag_table
    { (strict_valid_struct_unsigned_shortP(result, (0), sub_int(n, (1)),
       unsigned_shortP_alloc_table)
      and (alloc_extends(unsigned_shortP_alloc_table@,
           unsigned_shortP_alloc_table)
          and (alloc_fresh(unsigned_shortP_alloc_table@, result, n)
              and instanceof(unsigned_shortP_tag_table, result,
                  unsigned_shortP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter atof :
 nptr:charP pointer ->
  charP_nptr_110_alloc_table:charP alloc_table ->
   charP_charM_nptr_110:(charP, int8) memory -> { } double { true }

parameter atof_requires :
 nptr:charP pointer ->
  charP_nptr_110_alloc_table:charP alloc_table ->
   charP_charM_nptr_110:(charP, int8) memory ->
    { (JC_<somenum>:
      valid_string(nptr, charP_nptr_110_alloc_table, charP_charM_nptr_110))}
    double { true }

parameter atoi :
 nptr_0:charP pointer ->
  charP_nptr_0_111_alloc_table:charP alloc_table ->
   charP_charM_nptr_0_111:(charP, int8) memory -> { } int32 { true }

parameter atoi_requires :
 nptr_0:charP pointer ->
  charP_nptr_0_111_alloc_table:charP alloc_table ->
   charP_charM_nptr_0_111:(charP, int8) memory ->
    { (JC_<somenum>:
      valid_string(nptr_0, charP_nptr_0_111_alloc_table,
      charP_charM_nptr_0_111))}
    int32 { true }

parameter atol :
 nptr_1:charP pointer ->
  charP_nptr_1_112_alloc_table:charP alloc_table ->
   charP_charM_nptr_1_112:(charP, int8) memory -> { } int32 { true }

parameter atol_requires :
 nptr_1:charP pointer ->
  charP_nptr_1_112_alloc_table:charP alloc_table ->
   charP_charM_nptr_1_112:(charP, int8) memory ->
    { (JC_<somenum>:
      valid_string(nptr_1, charP_nptr_1_112_alloc_table,
      charP_charM_nptr_1_112))}
    int32 { true }

parameter atoll :
 nptr_2:charP pointer ->
  charP_nptr_2_113_alloc_table:charP alloc_table ->
   charP_charM_nptr_2_113:(charP, int8) memory -> { } int64 { true }

parameter atoll_requires :
 nptr_2:charP pointer ->
  charP_nptr_2_113_alloc_table:charP alloc_table ->
   charP_charM_nptr_2_113:(charP, int8) memory ->
    { (JC_<somenum>:
      valid_string(nptr_2, charP_nptr_2_113_alloc_table,
      charP_charM_nptr_2_113))}
    int64 { true }

parameter calloc :
 nmemb:uint32 ->
  size_0:uint32 ->
   charP_result_114_alloc_table:charP alloc_table ->
    { } charP pointer
    { (JC_<somenum>:
      ((JC_<somenum>:
       le_int(offset_min(charP_result_114_alloc_table, result), (0)))
      and (JC_<somenum>:
          ge_int(offset_max(charP_result_114_alloc_table, result),
          sub_int(mul_int(integer_of_uint32(size_0),
                  integer_of_uint32(nmemb)),
          (1)))))) }

parameter calloc_requires :
 nmemb:uint32 ->
  size_0:uint32 ->
   charP_result_114_alloc_table:charP alloc_table ->
    { } charP pointer
    { (JC_<somenum>:
      ((JC_<somenum>:
       le_int(offset_min(charP_result_114_alloc_table, result), (0)))
      and (JC_<somenum>:
          ge_int(offset_max(charP_result_114_alloc_table, result),
          sub_int(mul_int(integer_of_uint32(size_0),
                  integer_of_uint32(nmemb)),
          (1)))))) }

parameter exit : status:int32 -> { } unit { (JC_<somenum>: (false = true)) }

parameter exit_requires :
 status:int32 -> { } unit { (JC_<somenum>: (false = true)) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter main :
 argc:int32 ->
  argv:char_xP pointer ->
   char_xP_argv_126_alloc_table:char_xP alloc_table ->
    char_xP_char_xM_argv_126:(char_xP, charP pointer) memory ->
     { } int32 { true }

parameter main_requires :
 argc:int32 ->
  argv:char_xP pointer ->
   char_xP_argv_126_alloc_table:char_xP alloc_table ->
    char_xP_char_xM_argv_126:(char_xP, charP pointer) memory ->
     { } int32 { true }

parameter mbstowcs :
 wcstr:unsigned_shortP pointer ->
  mbstr:charP pointer ->
   n_1:uint32 ->
    unsigned_shortP_unsigned_shortM_wcstr_119:(unsigned_shortP, uint16) memory ref ->
     unsigned_shortP_wcstr_119_alloc_table:unsigned_shortP alloc_table ->
      charP_mbstr_120_alloc_table:charP alloc_table ->
       charP_charM_mbstr_120:(charP, int8) memory ->
        { } uint32 reads unsigned_shortP_unsigned_shortM_wcstr_119
        writes unsigned_shortP_unsigned_shortM_wcstr_119
        { (JC_<somenum>:
          ((JC_<somenum>:
           ((JC_<somenum>:
            valid_wstring(wcstr, unsigned_shortP_wcstr_119_alloc_table,
            unsigned_shortP_unsigned_shortM_wcstr_119))
           and (JC_<somenum>:
               lt_int(wcslen(wcstr,
                      unsigned_shortP_unsigned_shortM_wcstr_119),
               integer_of_uint32(n_1)))))
          and (JC_<somenum>:
              not_assigns(unsigned_shortP_wcstr_119_alloc_table,
              unsigned_shortP_unsigned_shortM_wcstr_119@,
              unsigned_shortP_unsigned_shortM_wcstr_119,
              pset_range(pset_singleton(wcstr), (0),
              sub_int(integer_of_uint32(n_1), (1))))))) }

parameter mbstowcs_requires :
 wcstr:unsigned_shortP pointer ->
  mbstr:charP pointer ->
   n_1:uint32 ->
    unsigned_shortP_unsigned_shortM_wcstr_119:(unsigned_shortP, uint16) memory ref ->
     unsigned_shortP_wcstr_119_alloc_table:unsigned_shortP alloc_table ->
      charP_mbstr_120_alloc_table:charP alloc_table ->
       charP_charM_mbstr_120:(charP, int8) memory ->
        { (JC_<somenum>:
          ((JC_<somenum>:
           valid_string(mbstr, charP_mbstr_120_alloc_table,
           charP_charM_mbstr_120))
          and ((JC_<somenum>:
               le_int(offset_min(unsigned_shortP_wcstr_119_alloc_table,
                      wcstr),
               (0)))
              and (JC_<somenum>:
                  ge_int(offset_max(unsigned_shortP_wcstr_119_alloc_table,
                         wcstr),
                  sub_int(integer_of_uint32(n_1), (1)))))))}
        uint32 reads unsigned_shortP_unsigned_shortM_wcstr_119
        writes unsigned_shortP_unsigned_shortM_wcstr_119
        { (JC_<somenum>:
          ((JC_<somenum>:
           ((JC_<somenum>:
            valid_wstring(wcstr, unsigned_shortP_wcstr_119_alloc_table,
            unsigned_shortP_unsigned_shortM_wcstr_119))
           and (JC_<somenum>:
               lt_int(wcslen(wcstr,
                      unsigned_shortP_unsigned_shortM_wcstr_119),
               integer_of_uint32(n_1)))))
          and (JC_<somenum>:
              not_assigns(unsigned_shortP_wcstr_119_alloc_table,
              unsigned_shortP_unsigned_shortM_wcstr_119@,
              unsigned_shortP_unsigned_shortM_wcstr_119,
              pset_range(pset_singleton(wcstr), (0),
              sub_int(integer_of_uint32(n_1), (1))))))) }

parameter memchr_0 :
 s_2:charP pointer ->
  c_0:int32 ->
   n_2_0:uint32 ->
    charP_s_22_alloc_table:charP alloc_table ->
     charP_charM_s_22:(charP, int8) memory ->
      { } charP pointer
      { (((not (memchr(s_2, integer_of_int32(c_0), integer_of_uint32(n_2_0),
                charP_charM_s_22) = true)) -> (JC_<somenum>: (result = null)))
        and (((memchr(s_2, integer_of_int32(c_0), integer_of_uint32(n_2_0),
               charP_charM_s_22) = true) ->
              (JC_<somenum>:
              (integer_of_int32(int32_of_integer(integer_of_int8(select(charP_charM_s_22,
                                                                 result)))) = 
              integer_of_int32(c_0))))
            and (JC_<somenum>:
                ((JC_<somenum>: (result = s_2))
                and (JC_<somenum>: same_block(result, s_2)))))) }

parameter memchr_0_requires :
 s_2:charP pointer ->
  c_0:int32 ->
   n_2_0:uint32 ->
    charP_s_22_alloc_table:charP alloc_table ->
     charP_charM_s_22:(charP, int8) memory ->
      { (JC_<somenum>:
        ((JC_<somenum>: le_int(offset_min(charP_s_22_alloc_table, s_2), (0)))
        and (JC_<somenum>:
            ge_int(offset_max(charP_s_22_alloc_table, s_2),
            sub_int(integer_of_uint32(n_2_0), (1))))))}
      charP pointer
      { (((not (memchr(s_2, integer_of_int32(c_0), integer_of_uint32(n_2_0),
                charP_charM_s_22) = true)) -> (JC_<somenum>: (result = null)))
        and (((memchr(s_2, integer_of_int32(c_0), integer_of_uint32(n_2_0),
               charP_charM_s_22) = true) ->
              (JC_<somenum>:
              (integer_of_int32(int32_of_integer(integer_of_int8(select(charP_charM_s_22,
                                                                 result)))) = 
              integer_of_int32(c_0))))
            and (JC_<somenum>:
                ((JC_<somenum>: (result = s_2))
                and (JC_<somenum>: same_block(result, s_2)))))) }

parameter memcmp_0 :
 s1_2:charP pointer ->
  s2_2:charP pointer ->
   n_3:uint32 ->
    charP_s2_21_alloc_table:charP alloc_table ->
     charP_s1_20_alloc_table:charP alloc_table ->
      charP_charM_s2_21:(charP, int8) memory ->
       charP_charM_s1_20:(charP, int8) memory ->
        { } int32
        { (JC_<somenum>:
          (integer_of_int32(result) = memcmp(s1_2, s2_2,
                                      integer_of_uint32(n_3),
                                      charP_charM_s2_21, charP_charM_s1_20))) }

parameter memcmp_0_requires :
 s1_2:charP pointer ->
  s2_2:charP pointer ->
   n_3:uint32 ->
    charP_s2_21_alloc_table:charP alloc_table ->
     charP_s1_20_alloc_table:charP alloc_table ->
      charP_charM_s2_21:(charP, int8) memory ->
       charP_charM_s1_20:(charP, int8) memory ->
        { (JC_<somenum>:
          ((JC_<somenum>: le_int(offset_min(charP_s1_20_alloc_table, s1_2), (0)))
          and ((JC_<somenum>:
               ge_int(offset_max(charP_s1_20_alloc_table, s1_2),
               sub_int(integer_of_uint32(n_3), (1))))
              and ((JC_<somenum>:
                   le_int(offset_min(charP_s2_21_alloc_table, s2_2), (0)))
                  and (JC_<somenum>:
                      ge_int(offset_max(charP_s2_21_alloc_table, s2_2),
                      sub_int(integer_of_uint32(n_3), (1))))))))}
        int32
        { (JC_<somenum>:
          (integer_of_int32(result) = memcmp(s1_2, s2_2,
                                      integer_of_uint32(n_3),
                                      charP_charM_s2_21, charP_charM_s1_20))) }

parameter memcpy :
 dest_1:charP pointer ->
  src:charP pointer ->
   n_4_0:uint32 ->
    charP_charM_dest_1_25:(charP, int8) memory ref ->
     charP_src_26_alloc_table:charP alloc_table ->
      charP_dest_1_25_alloc_table:charP alloc_table ->
       charP_charM_src_26:(charP, int8) memory ->
        { } charP pointer reads charP_charM_dest_1_25
        writes charP_charM_dest_1_25
        { (JC_<somenum>:
          ((JC_<somenum>:
           ((JC_<somenum>:
            (memcmp(dest_1, src, integer_of_uint32(n_4_0),
             charP_charM_src_26, charP_charM_dest_1_25) = (0)))
           and ((JC_<somenum>: (result = dest_1))
               and (JC_<somenum>: same_block(result, dest_1)))))
          and (JC_<somenum>:
              not_assigns(charP_dest_1_25_alloc_table,
              charP_charM_dest_1_25@, charP_charM_dest_1_25,
              pset_range(pset_singleton(dest_1), (0),
              sub_int(integer_of_uint32(n_4_0), (1))))))) }

parameter memcpy_requires :
 dest_1:charP pointer ->
  src:charP pointer ->
   n_4_0:uint32 ->
    charP_charM_dest_1_25:(charP, int8) memory ref ->
     charP_src_26_alloc_table:charP alloc_table ->
      charP_dest_1_25_alloc_table:charP alloc_table ->
       charP_charM_src_26:(charP, int8) memory ->
        { (JC_<somenum>:
          ((JC_<somenum>:
           le_int(offset_min(charP_dest_1_25_alloc_table, dest_1), (0)))
          and ((JC_<somenum>:
               ge_int(offset_max(charP_dest_1_25_alloc_table, dest_1),
               sub_int(integer_of_uint32(n_4_0), (1))))
              and ((JC_<somenum>:
                   le_int(offset_min(charP_src_26_alloc_table, src), (0)))
                  and (JC_<somenum>:
                      ge_int(offset_max(charP_src_26_alloc_table, src),
                      sub_int(integer_of_uint32(n_4_0), (1))))))))}
        charP pointer reads charP_charM_dest_1_25
        writes charP_charM_dest_1_25
        { (JC_<somenum>:
          ((JC_<somenum>:
           ((JC_<somenum>:
            (memcmp(dest_1, src, integer_of_uint32(n_4_0),
             charP_charM_src_26, charP_charM_dest_1_25) = (0)))
           and ((JC_<somenum>: (result = dest_1))
               and (JC_<somenum>: same_block(result, dest_1)))))
          and (JC_<somenum>:
              not_assigns(charP_dest_1_25_alloc_table,
              charP_charM_dest_1_25@, charP_charM_dest_1_25,
              pset_range(pset_singleton(dest_1), (0),
              sub_int(integer_of_uint32(n_4_0), (1))))))) }

parameter memmove :
 dest_2:charP pointer ->
  src_0:charP pointer ->
   n_5:uint32 ->
    charP_charM_dest_2_29:(charP, int8) memory ref ->
     charP_src_0_30_alloc_table:charP alloc_table ->
      charP_dest_2_29_alloc_table:charP alloc_table ->
       charP_charM_src_0_30:(charP, int8) memory ->
        { } charP pointer reads charP_charM_dest_2_29
        writes charP_charM_dest_2_29
        { (JC_<somenum>:
          ((JC_<somenum>:
           ((JC_<somenum>:
            (memcmp(dest_2, src_0, integer_of_uint32(n_5),
             charP_charM_src_0_30, charP_charM_dest_2_29) = (0)))
           and ((JC_<somenum>: (result = dest_2))
               and (JC_<somenum>: same_block(result, dest_2)))))
          and (JC_<somenum>:
              not_assigns(charP_dest_2_29_alloc_table,
              charP_charM_dest_2_29@, charP_charM_dest_2_29,
              pset_range(pset_singleton(dest_2), (0),
              sub_int(integer_of_uint32(n_5), (1))))))) }

parameter memmove_requires :
 dest_2:charP pointer ->
  src_0:charP pointer ->
   n_5:uint32 ->
    charP_charM_dest_2_29:(charP, int8) memory ref ->
     charP_src_0_30_alloc_table:charP alloc_table ->
      charP_dest_2_29_alloc_table:charP alloc_table ->
       charP_charM_src_0_30:(charP, int8) memory ->
        { (JC_<somenum>:
          ((JC_<somenum>:
           le_int(offset_min(charP_dest_2_29_alloc_table, dest_2), (0)))
          and ((JC_<somenum>:
               ge_int(offset_max(charP_dest_2_29_alloc_table, dest_2),
               sub_int(integer_of_uint32(n_5), (1))))
              and ((JC_<somenum>:
                   le_int(offset_min(charP_src_0_30_alloc_table, src_0), (0)))
                  and (JC_<somenum>:
                      ge_int(offset_max(charP_src_0_30_alloc_table, src_0),
                      sub_int(integer_of_uint32(n_5), (1))))))))}
        charP pointer reads charP_charM_dest_2_29
        writes charP_charM_dest_2_29
        { (JC_<somenum>:
          ((JC_<somenum>:
           ((JC_<somenum>:
            (memcmp(dest_2, src_0, integer_of_uint32(n_5),
             charP_charM_src_0_30, charP_charM_dest_2_29) = (0)))
           and ((JC_<somenum>: (result = dest_2))
               and (JC_<somenum>: same_block(result, dest_2)))))
          and (JC_<somenum>:
              not_assigns(charP_dest_2_29_alloc_table,
              charP_charM_dest_2_29@, charP_charM_dest_2_29,
              pset_range(pset_singleton(dest_2), (0),
              sub_int(integer_of_uint32(n_5), (1))))))) }

parameter memset_0 :
 s_0_0:charP pointer ->
  c_0_0:int32 ->
   n_6:uint32 ->
    charP_charM_s_0_33:(charP, int8) memory ref ->
     charP_s_0_33_alloc_table:charP alloc_table ->
      { } charP pointer reads charP_charM_s_0_33 writes charP_charM_s_0_33
      { (JC_<somenum>:
        ((JC_<somenum>:
         ((JC_<somenum>:
          (memset(s_0_0, integer_of_int32(c_0_0), integer_of_uint32(n_6),
           charP_charM_s_0_33) = true))
         and ((JC_<somenum>: (result = s_0_0))
             and (JC_<somenum>: same_block(result, s_0_0)))))
        and (JC_<somenum>:
            not_assigns(charP_s_0_33_alloc_table, charP_charM_s_0_33@,
            charP_charM_s_0_33,
            pset_range(pset_singleton(s_0_0), (0),
            sub_int(integer_of_uint32(n_6), (1))))))) }

parameter memset_0_requires :
 s_0_0:charP pointer ->
  c_0_0:int32 ->
   n_6:uint32 ->
    charP_charM_s_0_33:(charP, int8) memory ref ->
     charP_s_0_33_alloc_table:charP alloc_table ->
      { (JC_<somenum>:
        ((JC_<somenum>: le_int(offset_min(charP_s_0_33_alloc_table, s_0_0), (0)))
        and (JC_<somenum>:
            ge_int(offset_max(charP_s_0_33_alloc_table, s_0_0),
            sub_int(integer_of_uint32(n_6), (1))))))}
      charP pointer reads charP_charM_s_0_33 writes charP_charM_s_0_33
      { (JC_<somenum>:
        ((JC_<somenum>:
         ((JC_<somenum>:
          (memset(s_0_0, integer_of_int32(c_0_0), integer_of_uint32(n_6),
           charP_charM_s_0_33) = true))
         and ((JC_<somenum>: (result = s_0_0))
             and (JC_<somenum>: same_block(result, s_0_0)))))
        and (JC_<somenum>:
            not_assigns(charP_s_0_33_alloc_table, charP_charM_s_0_33@,
            charP_charM_s_0_33,
            pset_range(pset_singleton(s_0_0), (0),
            sub_int(integer_of_uint32(n_6), (1))))))) }

parameter next_set_of_n_elements : x_7:uint32 -> { } uint32 { true }

parameter next_set_of_n_elements_requires : x_7:uint32 -> { } uint32 { true }

parameter nlz : x_0:uint32 -> { } int32 { true }

parameter nlz_requires : x_0:uint32 -> { } int32 { true }

parameter ntz : x_1:uint32 -> { } int32 { true }

parameter ntz_requires : x_1:uint32 -> { } int32 { true }

parameter pop : x_2:uint32 -> { } int32 { true }

parameter pop_requires : x_2:uint32 -> { } int32 { true }

parameter realloc :
 ptr_0:charP pointer ->
  size_2:uint32 ->
   charP_result_117_alloc_table:charP alloc_table ->
    charP_ptr_0_116_alloc_table:charP alloc_table ->
     { } charP pointer
     { (JC_<somenum>:
       ((JC_<somenum>:
        le_int(offset_min(charP_result_117_alloc_table, result), (0)))
       and (JC_<somenum>:
           ge_int(offset_max(charP_result_117_alloc_table, result),
           sub_int(integer_of_uint32(size_2), (1)))))) }

parameter realloc_requires :
 ptr_0:charP pointer ->
  size_2:uint32 ->
   charP_result_117_alloc_table:charP alloc_table ->
    charP_ptr_0_116_alloc_table:charP alloc_table ->
     { (JC_<somenum>:
       ((le_int(offset_min(charP_ptr_0_116_alloc_table, ptr_0), (0))
        and ge_int(offset_max(charP_ptr_0_116_alloc_table, ptr_0), (0)))
       or (ptr_0 = null)))}
     charP pointer
     { (JC_<somenum>:
       ((JC_<somenum>:
        le_int(offset_min(charP_result_117_alloc_table, result), (0)))
       and (JC_<somenum>:
           ge_int(offset_max(charP_result_117_alloc_table, result),
           sub_int(integer_of_uint32(size_2), (1)))))) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter snoob : x_3:uint32 -> { } uint32 { true }

parameter snoob1 : x_4:uint32 -> { } uint32 { true }

parameter snoob1_requires : x_4:uint32 -> { } uint32 { true }

parameter snoob2 : x_5:uint32 -> { } uint32 { true }

parameter snoob2_requires : x_5:uint32 -> { } uint32 { true }

parameter snoob3 : x_6:uint32 -> { } uint32 { true }

parameter snoob3_requires : x_6:uint32 -> { } uint32 { true }

parameter snoob4 : x_7_0:int32 -> { } int32 { true }

parameter snoob4_requires : x_7_0:int32 -> { } int32 { true }

parameter snoob_requires : x_3:uint32 -> { } uint32 { true }

parameter strcat :
 dest_3:charP pointer ->
  src_1:charP pointer ->
   charP_charM_dest_3_75:(charP, int8) memory ref ->
    charP_src_1_76_alloc_table:charP alloc_table ->
     charP_dest_3_75_alloc_table:charP alloc_table ->
      charP_charM_src_1_76:(charP, int8) memory ->
       { } charP pointer reads charP_charM_dest_3_75
       writes charP_charM_dest_3_75
       { (JC_<somenum>:
         ((JC_<somenum>:
          ((JC_<somenum>:
           (strlen(dest_3, charP_charM_dest_3_75) = add_int(strlen(dest_3,
                                                            charP_charM_dest_3_75@),
                                                    strlen(src_1,
                                                    charP_charM_src_1_76))))
          and ((JC_<somenum>: (result = dest_3))
              and (JC_<somenum>: same_block(result, dest_3)))))
         and (JC_<somenum>:
             not_assigns(charP_dest_3_75_alloc_table, charP_charM_dest_3_75@,
             charP_charM_dest_3_75,
             pset_range(pset_singleton(dest_3), (0),
             add_int(strlen(dest_3, charP_charM_dest_3_75@),
             strlen(src_1, charP_charM_src_1_76))))))) }

parameter strcat_requires :
 dest_3:charP pointer ->
  src_1:charP pointer ->
   charP_charM_dest_3_75:(charP, int8) memory ref ->
    charP_src_1_76_alloc_table:charP alloc_table ->
     charP_dest_3_75_alloc_table:charP alloc_table ->
      charP_charM_src_1_76:(charP, int8) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          le_int(offset_min(charP_dest_3_75_alloc_table, dest_3), (0)))
         and ((JC_<somenum>:
              ge_int(offset_max(charP_dest_3_75_alloc_table, dest_3),
              add_int(strlen(dest_3, charP_charM_dest_3_75),
              strlen(src_1, charP_charM_src_1_76))))
             and ((JC_<somenum>:
                  valid_string(dest_3, charP_dest_3_75_alloc_table,
                  charP_charM_dest_3_75))
                 and (JC_<somenum>:
                     valid_string(src_1, charP_src_1_76_alloc_table,
                     charP_charM_src_1_76))))))}
       charP pointer reads charP_charM_dest_3_75 writes charP_charM_dest_3_75
       { (JC_<somenum>:
         ((JC_<somenum>:
          ((JC_<somenum>:
           (strlen(dest_3, charP_charM_dest_3_75) = add_int(strlen(dest_3,
                                                            charP_charM_dest_3_75@),
                                                    strlen(src_1,
                                                    charP_charM_src_1_76))))
          and ((JC_<somenum>: (result = dest_3))
              and (JC_<somenum>: same_block(result, dest_3)))))
         and (JC_<somenum>:
             not_assigns(charP_dest_3_75_alloc_table, charP_charM_dest_3_75@,
             charP_charM_dest_3_75,
             pset_range(pset_singleton(dest_3), (0),
             add_int(strlen(dest_3, charP_charM_dest_3_75@),
             strlen(src_1, charP_charM_src_1_76))))))) }

parameter strchr_0 :
 s_1_0:charP pointer ->
  c_1_0:int32 ->
   charP_result_44_alloc_table:charP alloc_table ->
    charP_s_1_43_alloc_table:charP alloc_table ->
     charP_charM_result_44:(charP, int8) memory ->
      charP_charM_s_1_43:(charP, int8) memory ->
       { } charP pointer
       { (((not (strchr(s_1_0, integer_of_int32(c_1_0), charP_charM_s_1_43) = true)) ->
           (JC_<somenum>: (result = null)))
         and ((strchr(s_1_0, integer_of_int32(c_1_0), charP_charM_s_1_43) = true) ->
              (JC_<somenum>:
              ((JC_<somenum>:
               (integer_of_int32(int32_of_integer(integer_of_int8(select(charP_charM_result_44,
                                                                  result)))) = 
               integer_of_int32(c_1_0)))
              and ((JC_<somenum>: same_block(result, s_1_0))
                  and (JC_<somenum>:
                      valid_string(result, charP_result_44_alloc_table,
                      charP_charM_result_44))))))) }

parameter strchr_0_requires :
 s_1_0:charP pointer ->
  c_1_0:int32 ->
   charP_result_44_alloc_table:charP alloc_table ->
    charP_s_1_43_alloc_table:charP alloc_table ->
     charP_charM_result_44:(charP, int8) memory ->
      charP_charM_s_1_43:(charP, int8) memory ->
       { (JC_<somenum>:
         valid_string(s_1_0, charP_s_1_43_alloc_table, charP_charM_s_1_43))}
       charP pointer
       { (((not (strchr(s_1_0, integer_of_int32(c_1_0), charP_charM_s_1_43) = true)) ->
           (JC_<somenum>: (result = null)))
         and ((strchr(s_1_0, integer_of_int32(c_1_0), charP_charM_s_1_43) = true) ->
              (JC_<somenum>:
              ((JC_<somenum>:
               (integer_of_int32(int32_of_integer(integer_of_int8(select(charP_charM_result_44,
                                                                  result)))) = 
               integer_of_int32(c_1_0)))
              and ((JC_<somenum>: same_block(result, s_1_0))
                  and (JC_<somenum>:
                      valid_string(result, charP_result_44_alloc_table,
                      charP_charM_result_44))))))) }

parameter strcmp_0 :
 s1_0_0:charP pointer ->
  s2_0_0:charP pointer ->
   charP_s2_0_38_alloc_table:charP alloc_table ->
    charP_s1_0_37_alloc_table:charP alloc_table ->
     charP_charM_s2_0_38:(charP, int8) memory ->
      charP_charM_s1_0_37:(charP, int8) memory ->
       { } int32
       { (JC_<somenum>:
         (integer_of_int32(result) = strcmp(s1_0_0, s2_0_0,
                                     charP_charM_s2_0_38,
                                     charP_charM_s1_0_37))) }

parameter strcmp_0_requires :
 s1_0_0:charP pointer ->
  s2_0_0:charP pointer ->
   charP_s2_0_38_alloc_table:charP alloc_table ->
    charP_s1_0_37_alloc_table:charP alloc_table ->
     charP_charM_s2_0_38:(charP, int8) memory ->
      charP_charM_s1_0_37:(charP, int8) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          valid_string(s1_0_0, charP_s1_0_37_alloc_table,
          charP_charM_s1_0_37))
         and (JC_<somenum>:
             valid_string(s2_0_0, charP_s2_0_38_alloc_table,
             charP_charM_s2_0_38))))}
       int32
       { (JC_<somenum>:
         (integer_of_int32(result) = strcmp(s1_0_0, s2_0_0,
                                     charP_charM_s2_0_38,
                                     charP_charM_s1_0_37))) }

parameter strcoll :
 s1_1_0:charP pointer ->
  s2_1_0:charP pointer ->
   charP_s2_1_42_alloc_table:charP alloc_table ->
    charP_s1_1_41_alloc_table:charP alloc_table ->
     charP_charM_s2_1_42:(charP, int8) memory ->
      charP_charM_s1_1_41:(charP, int8) memory -> { } int32 { true }

parameter strcoll_requires :
 s1_1_0:charP pointer ->
  s2_1_0:charP pointer ->
   charP_s2_1_42_alloc_table:charP alloc_table ->
    charP_s1_1_41_alloc_table:charP alloc_table ->
     charP_charM_s2_1_42:(charP, int8) memory ->
      charP_charM_s1_1_41:(charP, int8) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          valid_string(s1_1_0, charP_s1_1_41_alloc_table,
          charP_charM_s1_1_41))
         and (JC_<somenum>:
             valid_string(s2_1_0, charP_s2_1_42_alloc_table,
             charP_charM_s2_1_42))))}
       int32 { true }

parameter strcpy :
 dest_4:charP pointer ->
  src_2:charP pointer ->
   charP_charM_dest_4_67:(charP, int8) memory ref ->
    charP_src_2_68_alloc_table:charP alloc_table ->
     charP_dest_4_67_alloc_table:charP alloc_table ->
      charP_charM_src_2_68:(charP, int8) memory ->
       { } charP pointer reads charP_charM_dest_4_67
       writes charP_charM_dest_4_67
       { (JC_<somenum>:
         ((JC_<somenum>:
          ((JC_<somenum>:
           (strcmp(dest_4, src_2, charP_charM_src_2_68,
            charP_charM_dest_4_67) = (0)))
          and ((JC_<somenum>: (result = dest_4))
              and (JC_<somenum>: same_block(result, dest_4)))))
         and (JC_<somenum>:
             not_assigns(charP_dest_4_67_alloc_table, charP_charM_dest_4_67@,
             charP_charM_dest_4_67,
             pset_range(pset_singleton(dest_4), (0),
             strlen(src_2, charP_charM_src_2_68)))))) }

parameter strcpy_requires :
 dest_4:charP pointer ->
  src_2:charP pointer ->
   charP_charM_dest_4_67:(charP, int8) memory ref ->
    charP_src_2_68_alloc_table:charP alloc_table ->
     charP_dest_4_67_alloc_table:charP alloc_table ->
      charP_charM_src_2_68:(charP, int8) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          le_int(offset_min(charP_dest_4_67_alloc_table, dest_4), (0)))
         and ((JC_<somenum>:
              ge_int(offset_max(charP_dest_4_67_alloc_table, dest_4),
              strlen(src_2, charP_charM_src_2_68)))
             and (JC_<somenum>:
                 valid_string(src_2, charP_src_2_68_alloc_table,
                 charP_charM_src_2_68)))))}
       charP pointer reads charP_charM_dest_4_67 writes charP_charM_dest_4_67
       { (JC_<somenum>:
         ((JC_<somenum>:
          ((JC_<somenum>:
           (strcmp(dest_4, src_2, charP_charM_src_2_68,
            charP_charM_dest_4_67) = (0)))
          and ((JC_<somenum>: (result = dest_4))
              and (JC_<somenum>: same_block(result, dest_4)))))
         and (JC_<somenum>:
             not_assigns(charP_dest_4_67_alloc_table, charP_charM_dest_4_67@,
             charP_charM_dest_4_67,
             pset_range(pset_singleton(dest_4), (0),
             strlen(src_2, charP_charM_src_2_68)))))) }

parameter strcspn :
 s_2_0:charP pointer ->
  reject:charP pointer ->
   charP_reject_50_alloc_table:charP alloc_table ->
    charP_s_2_49_alloc_table:charP alloc_table ->
     charP_charM_reject_50:(charP, int8) memory ->
      charP_charM_s_2_49:(charP, int8) memory ->
       { } uint32
       { (JC_<somenum>:
         ((JC_<somenum>: le_int((0), integer_of_uint32(result)))
         and (JC_<somenum>:
             le_int(integer_of_uint32(result),
             strlen(s_2_0, charP_charM_s_2_49))))) }

parameter strcspn_requires :
 s_2_0:charP pointer ->
  reject:charP pointer ->
   charP_reject_50_alloc_table:charP alloc_table ->
    charP_s_2_49_alloc_table:charP alloc_table ->
     charP_charM_reject_50:(charP, int8) memory ->
      charP_charM_s_2_49:(charP, int8) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          valid_string(s_2_0, charP_s_2_49_alloc_table, charP_charM_s_2_49))
         and (JC_<somenum>:
             valid_string(reject, charP_reject_50_alloc_table,
             charP_charM_reject_50))))}
       uint32
       { (JC_<somenum>:
         ((JC_<somenum>: le_int((0), integer_of_uint32(result)))
         and (JC_<somenum>:
             le_int(integer_of_uint32(result),
             strlen(s_2_0, charP_charM_s_2_49))))) }

parameter strdup :
 s_3_0:charP pointer ->
  charP_result_86_alloc_table:charP alloc_table ->
   charP_s_3_85_alloc_table:charP alloc_table ->
    charP_charM_result_86:(charP, int8) memory ->
     charP_charM_s_3_85:(charP, int8) memory ->
      { } charP pointer
      { (JC_<somenum>:
        ((JC_<somenum>:
         le_int(offset_min(charP_result_86_alloc_table, result), (0)))
        and ((JC_<somenum>:
             ge_int(offset_max(charP_result_86_alloc_table, result),
             strlen(s_3_0, charP_charM_s_3_85)))
            and (JC_<somenum>:
                (strcmp(result, s_3_0, charP_charM_s_3_85,
                 charP_charM_result_86) = (0)))))) }

parameter strdup_requires :
 s_3_0:charP pointer ->
  charP_result_86_alloc_table:charP alloc_table ->
   charP_s_3_85_alloc_table:charP alloc_table ->
    charP_charM_result_86:(charP, int8) memory ->
     charP_charM_s_3_85:(charP, int8) memory ->
      { (JC_<somenum>:
        valid_string(s_3_0, charP_s_3_85_alloc_table, charP_charM_s_3_85))}
      charP pointer
      { (JC_<somenum>:
        ((JC_<somenum>:
         le_int(offset_min(charP_result_86_alloc_table, result), (0)))
        and ((JC_<somenum>:
             ge_int(offset_max(charP_result_86_alloc_table, result),
             strlen(s_3_0, charP_charM_s_3_85)))
            and (JC_<somenum>:
                (strcmp(result, s_3_0, charP_charM_s_3_85,
                 charP_charM_result_86) = (0)))))) }

parameter strerror :
 errnum:int32 ->
  charP_result_65_alloc_table:charP alloc_table ->
   charP_charM_result_65:(charP, int8) memory ->
    { } charP pointer
    { (JC_<somenum>:
      valid_string(result, charP_result_65_alloc_table,
      charP_charM_result_65)) }

parameter strerror_requires :
 errnum:int32 ->
  charP_result_65_alloc_table:charP alloc_table ->
   charP_charM_result_65:(charP, int8) memory ->
    { } charP pointer
    { (JC_<somenum>:
      valid_string(result, charP_result_65_alloc_table,
      charP_charM_result_65)) }

parameter strlen_0 :
 s_4:charP pointer ->
  charP_s_4_36_alloc_table:charP alloc_table ->
   charP_charM_s_4_36:(charP, int8) memory ->
    { } uint32
    { (JC_<somenum>: (integer_of_uint32(result) = strlen(s_4, charP_charM_s_4_36))) }

parameter strlen_0_requires :
 s_4:charP pointer ->
  charP_s_4_36_alloc_table:charP alloc_table ->
   charP_charM_s_4_36:(charP, int8) memory ->
    { (JC_<somenum>:
      valid_string(s_4, charP_s_4_36_alloc_table, charP_charM_s_4_36))}
    uint32
    { (JC_<somenum>: (integer_of_uint32(result) = strlen(s_4, charP_charM_s_4_36))) }

parameter strncat :
 dest_5:charP pointer ->
  src_3:charP pointer ->
   n_7:uint32 ->
    charP_charM_dest_5_79:(charP, int8) memory ref ->
     charP_src_3_80_alloc_table:charP alloc_table ->
      charP_dest_5_79_alloc_table:charP alloc_table ->
       charP_charM_src_3_80:(charP, int8) memory ->
        { } charP pointer reads charP_charM_dest_5_79
        writes charP_charM_dest_5_79
        { ((lt_int(integer_of_uint32(n_7),
            strlen(src_3, charP_charM_src_3_80)) ->
            (JC_<somenum>:
            ((JC_<somenum>:
             (strlen(dest_5, charP_charM_dest_5_79) = add_int(strlen(dest_5,
                                                              charP_charM_dest_5_79@),
                                                      integer_of_uint32(n_7))))
            and (JC_<somenum>:
                not_assigns(charP_dest_5_79_alloc_table,
                charP_charM_dest_5_79@, charP_charM_dest_5_79,
                pset_range(pset_singleton(dest_5), (0),
                add_int(strlen(dest_5, charP_charM_dest_5_79@),
                integer_of_uint32(n_7))))))))
          and ((le_int(strlen(src_3, charP_charM_src_3_80),
                integer_of_uint32(n_7)) ->
                (JC_<somenum>:
                ((JC_<somenum>:
                 (strlen(dest_5, charP_charM_dest_5_79) = add_int(strlen(dest_5,
                                                                  charP_charM_dest_5_79@),
                                                          strlen(src_3,
                                                          charP_charM_src_3_80))))
                and (JC_<somenum>:
                    not_assigns(charP_dest_5_79_alloc_table,
                    charP_charM_dest_5_79@, charP_charM_dest_5_79,
                    pset_range(pset_singleton(dest_5), (0),
                    add_int(strlen(dest_5, charP_charM_dest_5_79@),
                    strlen(src_3, charP_charM_src_3_80))))))))
              and (JC_<somenum>:
                  ((JC_<somenum>:
                   ((JC_<somenum>: (result = dest_5))
                   and (JC_<somenum>: same_block(result, dest_5))))
                  and (JC_<somenum>:
                      not_assigns(charP_dest_5_79_alloc_table,
                      charP_charM_dest_5_79@, charP_charM_dest_5_79,
                      pset_range(pset_singleton(dest_5), (0),
                      sub_int(add_int(strlen(dest_5, charP_charM_dest_5_79@),
                              integer_of_uint32(n_7)),
                      (1))))))))) }

parameter strncat_requires :
 dest_5:charP pointer ->
  src_3:charP pointer ->
   n_7:uint32 ->
    charP_charM_dest_5_79:(charP, int8) memory ref ->
     charP_src_3_80_alloc_table:charP alloc_table ->
      charP_dest_5_79_alloc_table:charP alloc_table ->
       charP_charM_src_3_80:(charP, int8) memory ->
        { (JC_<somenum>:
          ((JC_<somenum>:
           le_int(offset_min(charP_dest_5_79_alloc_table, dest_5), (0)))
          and ((JC_<somenum>:
               ge_int(offset_max(charP_dest_5_79_alloc_table, dest_5),
               sub_int(integer_of_uint32(n_7), (1))))
              and ((JC_<somenum>:
                   valid_string(dest_5, charP_dest_5_79_alloc_table,
                   charP_charM_dest_5_79))
                  and (JC_<somenum>:
                      valid_string(src_3, charP_src_3_80_alloc_table,
                      charP_charM_src_3_80))))))}
        charP pointer reads charP_charM_dest_5_79
        writes charP_charM_dest_5_79
        { ((lt_int(integer_of_uint32(n_7),
            strlen(src_3, charP_charM_src_3_80)) ->
            (JC_<somenum>:
            ((JC_<somenum>:
             (strlen(dest_5, charP_charM_dest_5_79) = add_int(strlen(dest_5,
                                                              charP_charM_dest_5_79@),
                                                      integer_of_uint32(n_7))))
            and (JC_<somenum>:
                not_assigns(charP_dest_5_79_alloc_table,
                charP_charM_dest_5_79@, charP_charM_dest_5_79,
                pset_range(pset_singleton(dest_5), (0),
                add_int(strlen(dest_5, charP_charM_dest_5_79@),
                integer_of_uint32(n_7))))))))
          and ((le_int(strlen(src_3, charP_charM_src_3_80),
                integer_of_uint32(n_7)) ->
                (JC_<somenum>:
                ((JC_<somenum>:
                 (strlen(dest_5, charP_charM_dest_5_79) = add_int(strlen(dest_5,
                                                                  charP_charM_dest_5_79@),
                                                          strlen(src_3,
                                                          charP_charM_src_3_80))))
                and (JC_<somenum>:
                    not_assigns(charP_dest_5_79_alloc_table,
                    charP_charM_dest_5_79@, charP_charM_dest_5_79,
                    pset_range(pset_singleton(dest_5), (0),
                    add_int(strlen(dest_5, charP_charM_dest_5_79@),
                    strlen(src_3, charP_charM_src_3_80))))))))
              and (JC_<somenum>:
                  ((JC_<somenum>:
                   ((JC_<somenum>: (result = dest_5))
                   and (JC_<somenum>: same_block(result, dest_5))))
                  and (JC_<somenum>:
                      not_assigns(charP_dest_5_79_alloc_table,
                      charP_charM_dest_5_79@, charP_charM_dest_5_79,
                      pset_range(pset_singleton(dest_5), (0),
                      sub_int(add_int(strlen(dest_5, charP_charM_dest_5_79@),
                              integer_of_uint32(n_7)),
                      (1))))))))) }

parameter strncmp_0 :
 s1_2_0:charP pointer ->
  s2_2_0:charP pointer ->
   n_8:uint32 ->
    charP_s2_2_40_alloc_table:charP alloc_table ->
     charP_s1_2_39_alloc_table:charP alloc_table ->
      charP_charM_s2_2_40:(charP, int8) memory ->
       charP_charM_s1_2_39:(charP, int8) memory ->
        { } int32
        { (JC_<somenum>:
          (integer_of_int32(result) = strncmp(s1_2_0, s2_2_0,
                                      integer_of_uint32(n_8),
                                      charP_charM_s2_2_40,
                                      charP_charM_s1_2_39))) }

parameter strncmp_0_requires :
 s1_2_0:charP pointer ->
  s2_2_0:charP pointer ->
   n_8:uint32 ->
    charP_s2_2_40_alloc_table:charP alloc_table ->
     charP_s1_2_39_alloc_table:charP alloc_table ->
      charP_charM_s2_2_40:(charP, int8) memory ->
       charP_charM_s1_2_39:(charP, int8) memory ->
        { (JC_<somenum>:
          ((JC_<somenum>:
           valid_string(s1_2_0, charP_s1_2_39_alloc_table,
           charP_charM_s1_2_39))
          and (JC_<somenum>:
              valid_string(s2_2_0, charP_s2_2_40_alloc_table,
              charP_charM_s2_2_40))))}
        int32
        { (JC_<somenum>:
          (integer_of_int32(result) = strncmp(s1_2_0, s2_2_0,
                                      integer_of_uint32(n_8),
                                      charP_charM_s2_2_40,
                                      charP_charM_s1_2_39))) }

parameter strncpy :
 dest_6:charP pointer ->
  src_4:charP pointer ->
   n_9:uint32 ->
    charP_charM_dest_6_71:(charP, int8) memory ref ->
     charP_src_4_72_alloc_table:charP alloc_table ->
      charP_dest_6_71_alloc_table:charP alloc_table ->
       charP_charM_src_4_72:(charP, int8) memory ->
        { } charP pointer reads charP_charM_dest_6_71
        writes charP_charM_dest_6_71
        { ((le_int(integer_of_uint32(n_9),
            strlen(src_4, charP_charM_src_4_72)) ->
            (JC_<somenum>:
            ((JC_<somenum>:
             (memcmp(dest_6, src_4, integer_of_uint32(n_9),
              charP_charM_src_4_72, charP_charM_dest_6_71) = (0)))
            and (JC_<somenum>:
                not_assigns(charP_dest_6_71_alloc_table,
                charP_charM_dest_6_71@, charP_charM_dest_6_71,
                pset_range(pset_singleton(dest_6), (0),
                sub_int(integer_of_uint32(n_9), (1))))))))
          and ((lt_int(strlen(src_4, charP_charM_src_4_72),
                integer_of_uint32(n_9)) ->
                (JC_<somenum>:
                ((JC_<somenum>:
                 ((JC_<somenum>:
                  (strcmp(dest_6, src_4, charP_charM_src_4_72,
                   charP_charM_dest_6_71) = (0)))
                 and (JC_<somenum>: same_block(result, dest_6))))
                and (JC_<somenum>:
                    not_assigns(charP_dest_6_71_alloc_table,
                    charP_charM_dest_6_71@, charP_charM_dest_6_71,
                    pset_range(pset_singleton(dest_6), (0),
                    sub_int(integer_of_uint32(n_9), (1))))))))
              and (JC_<somenum>:
                  ((JC_<somenum>: (result = dest_6))
                  and (JC_<somenum>:
                      not_assigns(charP_dest_6_71_alloc_table,
                      charP_charM_dest_6_71@, charP_charM_dest_6_71,
                      pset_range(pset_singleton(dest_6), (0),
                      sub_int(integer_of_uint32(n_9), (1))))))))) }

parameter strncpy_requires :
 dest_6:charP pointer ->
  src_4:charP pointer ->
   n_9:uint32 ->
    charP_charM_dest_6_71:(charP, int8) memory ref ->
     charP_src_4_72_alloc_table:charP alloc_table ->
      charP_dest_6_71_alloc_table:charP alloc_table ->
       charP_charM_src_4_72:(charP, int8) memory ->
        { (JC_<somenum>:
          ((JC_<somenum>:
           le_int(offset_min(charP_dest_6_71_alloc_table, dest_6), (0)))
          and ((JC_<somenum>:
               ge_int(offset_max(charP_dest_6_71_alloc_table, dest_6),
               sub_int(integer_of_uint32(n_9), (1))))
              and (JC_<somenum>:
                  valid_string(src_4, charP_src_4_72_alloc_table,
                  charP_charM_src_4_72)))))}
        charP pointer reads charP_charM_dest_6_71
        writes charP_charM_dest_6_71
        { ((le_int(integer_of_uint32(n_9),
            strlen(src_4, charP_charM_src_4_72)) ->
            (JC_<somenum>:
            ((JC_<somenum>:
             (memcmp(dest_6, src_4, integer_of_uint32(n_9),
              charP_charM_src_4_72, charP_charM_dest_6_71) = (0)))
            and (JC_<somenum>:
                not_assigns(charP_dest_6_71_alloc_table,
                charP_charM_dest_6_71@, charP_charM_dest_6_71,
                pset_range(pset_singleton(dest_6), (0),
                sub_int(integer_of_uint32(n_9), (1))))))))
          and ((lt_int(strlen(src_4, charP_charM_src_4_72),
                integer_of_uint32(n_9)) ->
                (JC_<somenum>:
                ((JC_<somenum>:
                 ((JC_<somenum>:
                  (strcmp(dest_6, src_4, charP_charM_src_4_72,
                   charP_charM_dest_6_71) = (0)))
                 and (JC_<somenum>: same_block(result, dest_6))))
                and (JC_<somenum>:
                    not_assigns(charP_dest_6_71_alloc_table,
                    charP_charM_dest_6_71@, charP_charM_dest_6_71,
                    pset_range(pset_singleton(dest_6), (0),
                    sub_int(integer_of_uint32(n_9), (1))))))))
              and (JC_<somenum>:
                  ((JC_<somenum>: (result = dest_6))
                  and (JC_<somenum>:
                      not_assigns(charP_dest_6_71_alloc_table,
                      charP_charM_dest_6_71@, charP_charM_dest_6_71,
                      pset_range(pset_singleton(dest_6), (0),
                      sub_int(integer_of_uint32(n_9), (1))))))))) }

parameter strndup :
 s_5:charP pointer ->
  n_10_0:uint32 ->
   charP_result_89_alloc_table:charP alloc_table ->
    charP_s_5_88_alloc_table:charP alloc_table ->
     charP_charM_result_89:(charP, int8) memory ->
      charP_charM_s_5_88:(charP, int8) memory ->
       { } charP pointer
       { (JC_<somenum>:
         ((JC_<somenum>:
          le_int(offset_min(charP_result_89_alloc_table, result), (0)))
         and ((JC_<somenum>:
              ge_int(offset_max(charP_result_89_alloc_table, result),
              minimum(strlen(s_5, charP_charM_s_5_88),
              integer_of_uint32(n_10_0))))
             and ((JC_<somenum>:
                  valid_string(result, charP_result_89_alloc_table,
                  charP_charM_result_89))
                 and ((JC_<somenum>:
                      le_int(strlen(result, charP_charM_result_89),
                      integer_of_uint32(n_10_0)))
                     and (JC_<somenum>:
                         (strncmp(result, s_5, integer_of_uint32(n_10_0),
                          charP_charM_s_5_88, charP_charM_result_89) = (0)))))))) }

parameter strndup_requires :
 s_5:charP pointer ->
  n_10_0:uint32 ->
   charP_result_89_alloc_table:charP alloc_table ->
    charP_s_5_88_alloc_table:charP alloc_table ->
     charP_charM_result_89:(charP, int8) memory ->
      charP_charM_s_5_88:(charP, int8) memory ->
       { (JC_<somenum>:
         valid_string(s_5, charP_s_5_88_alloc_table, charP_charM_s_5_88))}
       charP pointer
       { (JC_<somenum>:
         ((JC_<somenum>:
          le_int(offset_min(charP_result_89_alloc_table, result), (0)))
         and ((JC_<somenum>:
              ge_int(offset_max(charP_result_89_alloc_table, result),
              minimum(strlen(s_5, charP_charM_s_5_88),
              integer_of_uint32(n_10_0))))
             and ((JC_<somenum>:
                  valid_string(result, charP_result_89_alloc_table,
                  charP_charM_result_89))
                 and ((JC_<somenum>:
                      le_int(strlen(result, charP_charM_result_89),
                      integer_of_uint32(n_10_0)))
                     and (JC_<somenum>:
                         (strncmp(result, s_5, integer_of_uint32(n_10_0),
                          charP_charM_s_5_88, charP_charM_result_89) = (0)))))))) }

parameter strpbrk :
 s_6:charP pointer ->
  accept:charP pointer ->
   charP_accept_54_alloc_table:charP alloc_table ->
    charP_s_6_53_alloc_table:charP alloc_table ->
     charP_charM_accept_54:(charP, int8) memory ->
      charP_charM_s_6_53:(charP, int8) memory ->
       { } charP pointer
       { (JC_<somenum>: ((result = null) or same_block(result, s_6))) }

parameter strpbrk_requires :
 s_6:charP pointer ->
  accept:charP pointer ->
   charP_accept_54_alloc_table:charP alloc_table ->
    charP_s_6_53_alloc_table:charP alloc_table ->
     charP_charM_accept_54:(charP, int8) memory ->
      charP_charM_s_6_53:(charP, int8) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          valid_string(s_6, charP_s_6_53_alloc_table, charP_charM_s_6_53))
         and (JC_<somenum>:
             valid_string(accept, charP_accept_54_alloc_table,
             charP_charM_accept_54))))}
       charP pointer
       { (JC_<somenum>: ((result = null) or same_block(result, s_6))) }

parameter strrchr :
 s_7:charP pointer ->
  c_2:int32 ->
   charP_result_47_alloc_table:charP alloc_table ->
    charP_s_7_46_alloc_table:charP alloc_table ->
     charP_charM_result_47:(charP, int8) memory ->
      charP_charM_s_7_46:(charP, int8) memory ->
       { } charP pointer
       { (((not (strchr(s_7, integer_of_int32(c_2), charP_charM_s_7_46) = true)) ->
           (JC_<somenum>: (result = null)))
         and ((strchr(s_7, integer_of_int32(c_2), charP_charM_s_7_46) = true) ->
              (JC_<somenum>:
              ((JC_<somenum>:
               (integer_of_int32(int32_of_integer(integer_of_int8(select(charP_charM_result_47,
                                                                  result)))) = 
               integer_of_int32(c_2)))
              and ((JC_<somenum>: same_block(result, s_7))
                  and (JC_<somenum>:
                      valid_string(result, charP_result_47_alloc_table,
                      charP_charM_result_47))))))) }

parameter strrchr_requires :
 s_7:charP pointer ->
  c_2:int32 ->
   charP_result_47_alloc_table:charP alloc_table ->
    charP_s_7_46_alloc_table:charP alloc_table ->
     charP_charM_result_47:(charP, int8) memory ->
      charP_charM_s_7_46:(charP, int8) memory ->
       { (JC_<somenum>:
         valid_string(s_7, charP_s_7_46_alloc_table, charP_charM_s_7_46))}
       charP pointer
       { (((not (strchr(s_7, integer_of_int32(c_2), charP_charM_s_7_46) = true)) ->
           (JC_<somenum>: (result = null)))
         and ((strchr(s_7, integer_of_int32(c_2), charP_charM_s_7_46) = true) ->
              (JC_<somenum>:
              ((JC_<somenum>:
               (integer_of_int32(int32_of_integer(integer_of_int8(select(charP_charM_result_47,
                                                                  result)))) = 
               integer_of_int32(c_2)))
              and ((JC_<somenum>: same_block(result, s_7))
                  and (JC_<somenum>:
                      valid_string(result, charP_result_47_alloc_table,
                      charP_charM_result_47))))))) }

parameter strspn :
 s_8:charP pointer ->
  accept_0:charP pointer ->
   charP_accept_0_52_alloc_table:charP alloc_table ->
    charP_s_8_51_alloc_table:charP alloc_table ->
     charP_charM_accept_0_52:(charP, int8) memory ->
      charP_charM_s_8_51:(charP, int8) memory ->
       { } uint32
       { (JC_<somenum>:
         ((JC_<somenum>: le_int((0), integer_of_uint32(result)))
         and (JC_<somenum>:
             le_int(integer_of_uint32(result),
             strlen(s_8, charP_charM_s_8_51))))) }

parameter strspn_requires :
 s_8:charP pointer ->
  accept_0:charP pointer ->
   charP_accept_0_52_alloc_table:charP alloc_table ->
    charP_s_8_51_alloc_table:charP alloc_table ->
     charP_charM_accept_0_52:(charP, int8) memory ->
      charP_charM_s_8_51:(charP, int8) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          valid_string(s_8, charP_s_8_51_alloc_table, charP_charM_s_8_51))
         and (JC_<somenum>:
             valid_string(accept_0, charP_accept_0_52_alloc_table,
             charP_charM_accept_0_52))))}
       uint32
       { (JC_<somenum>:
         ((JC_<somenum>: le_int((0), integer_of_uint32(result)))
         and (JC_<somenum>:
             le_int(integer_of_uint32(result),
             strlen(s_8, charP_charM_s_8_51))))) }

parameter strstr :
 haystack:charP pointer ->
  needle:charP pointer ->
   charP_needle_58_alloc_table:charP alloc_table ->
    charP_haystack_57_alloc_table:charP alloc_table ->
     charP_charM_result_59:(charP, int8) memory ->
      charP_charM_needle_58:(charP, int8) memory ->
       charP_charM_haystack_57:(charP, int8) memory ->
        { } charP pointer
        { (JC_<somenum>:
          ((result = null)
          or (same_block(result, haystack)
             and (memcmp(result, needle,
                  strlen(needle, charP_charM_needle_58),
                  charP_charM_needle_58, charP_charM_result_59) = (0))))) }

parameter strstr_requires :
 haystack:charP pointer ->
  needle:charP pointer ->
   charP_needle_58_alloc_table:charP alloc_table ->
    charP_haystack_57_alloc_table:charP alloc_table ->
     charP_charM_result_59:(charP, int8) memory ->
      charP_charM_needle_58:(charP, int8) memory ->
       charP_charM_haystack_57:(charP, int8) memory ->
        { (JC_<somenum>:
          ((JC_<somenum>:
           valid_string(haystack, charP_haystack_57_alloc_table,
           charP_charM_haystack_57))
          and (JC_<somenum>:
              valid_string(needle, charP_needle_58_alloc_table,
              charP_charM_needle_58))))}
        charP pointer
        { (JC_<somenum>:
          ((result = null)
          or (same_block(result, haystack)
             and (memcmp(result, needle,
                  strlen(needle, charP_charM_needle_58),
                  charP_charM_needle_58, charP_charM_result_59) = (0))))) }

parameter strtok :
 s_9:charP pointer ->
  delim:charP pointer ->
   charP_delim_62_alloc_table:charP alloc_table ->
    charP_s_9_61_alloc_table:charP alloc_table ->
     charP_charM_delim_62:(charP, int8) memory ->
      charP_charM_s_9_61:(charP, int8) memory -> { } charP pointer { true }

parameter strtok_requires :
 s_9:charP pointer ->
  delim:charP pointer ->
   charP_delim_62_alloc_table:charP alloc_table ->
    charP_s_9_61_alloc_table:charP alloc_table ->
     charP_charM_delim_62:(charP, int8) memory ->
      charP_charM_s_9_61:(charP, int8) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          (valid_string(s_9, charP_s_9_61_alloc_table, charP_charM_s_9_61)
          or (s_9 = null)))
         and (JC_<somenum>:
             valid_string(delim, charP_delim_62_alloc_table,
             charP_charM_delim_62))))}
       charP pointer { true }

parameter strtol :
 nptr_3:charP pointer ->
  endptr:char_xP pointer -> base:int32 -> { } int32 { true }

parameter strtol_requires :
 nptr_3:charP pointer ->
  endptr:char_xP pointer -> base:int32 -> { } int32 { true }

parameter strxfrm :
 dest_7:charP pointer ->
  src_5:charP pointer ->
   n_11:uint32 ->
    charP_charM_dest_7_83:(charP, int8) memory ref ->
     charP_src_5_84_alloc_table:charP alloc_table ->
      charP_dest_7_83_alloc_table:charP alloc_table ->
       charP_charM_src_5_84:(charP, int8) memory ->
        { } uint32 writes charP_charM_dest_7_83
        { (JC_<somenum>:
          not_assigns(charP_dest_7_83_alloc_table, charP_charM_dest_7_83@,
          charP_charM_dest_7_83,
          pset_range(pset_singleton(dest_7), (0),
          sub_int(integer_of_uint32(n_11), (1))))) }

parameter strxfrm_requires :
 dest_7:charP pointer ->
  src_5:charP pointer ->
   n_11:uint32 ->
    charP_charM_dest_7_83:(charP, int8) memory ref ->
     charP_src_5_84_alloc_table:charP alloc_table ->
      charP_dest_7_83_alloc_table:charP alloc_table ->
       charP_charM_src_5_84:(charP, int8) memory ->
        { (JC_<somenum>:
          ((JC_<somenum>:
           le_int(offset_min(charP_dest_7_83_alloc_table, dest_7), (0)))
          and ((JC_<somenum>:
               ge_int(offset_max(charP_dest_7_83_alloc_table, dest_7),
               sub_int(integer_of_uint32(n_11), (1))))
              and (JC_<somenum>:
                  valid_string(src_5, charP_src_5_84_alloc_table,
                  charP_charM_src_5_84)))))}
        uint32 writes charP_charM_dest_7_83
        { (JC_<somenum>:
          not_assigns(charP_dest_7_83_alloc_table, charP_charM_dest_7_83@,
          charP_charM_dest_7_83,
          pset_range(pset_singleton(dest_7), (0),
          sub_int(integer_of_uint32(n_11), (1))))) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

parameter wcscpy :
 dest_8:unsigned_shortP pointer ->
  src_6:unsigned_shortP pointer ->
   unsigned_shortP_unsigned_shortM_dest_8_92:(unsigned_shortP, uint16) memory ref ->
    unsigned_shortP_src_6_93_alloc_table:unsigned_shortP alloc_table ->
     unsigned_shortP_dest_8_92_alloc_table:unsigned_shortP alloc_table ->
      unsigned_shortP_unsigned_shortM_src_6_93:(unsigned_shortP, uint16) memory ->
       { } unsigned_shortP pointer
       reads unsigned_shortP_unsigned_shortM_dest_8_92
       writes unsigned_shortP_unsigned_shortM_dest_8_92
       { (JC_<somenum>:
         ((JC_<somenum>:
          ((JC_<somenum>:
           valid_wstring(dest_8, unsigned_shortP_dest_8_92_alloc_table,
           unsigned_shortP_unsigned_shortM_dest_8_92))
          and ((JC_<somenum>:
               (wcscmp(dest_8, src_6,
                unsigned_shortP_unsigned_shortM_src_6_93,
                unsigned_shortP_unsigned_shortM_dest_8_92) = (0)))
              and (JC_<somenum>: (result = dest_8)))))
         and (JC_<somenum>:
             not_assigns(unsigned_shortP_dest_8_92_alloc_table,
             unsigned_shortP_unsigned_shortM_dest_8_92@,
             unsigned_shortP_unsigned_shortM_dest_8_92,
             pset_range(pset_singleton(dest_8), (0),
             wcslen(src_6, unsigned_shortP_unsigned_shortM_src_6_93)))))) }

parameter wcscpy_requires :
 dest_8:unsigned_shortP pointer ->
  src_6:unsigned_shortP pointer ->
   unsigned_shortP_unsigned_shortM_dest_8_92:(unsigned_shortP, uint16) memory ref ->
    unsigned_shortP_src_6_93_alloc_table:unsigned_shortP alloc_table ->
     unsigned_shortP_dest_8_92_alloc_table:unsigned_shortP alloc_table ->
      unsigned_shortP_unsigned_shortM_src_6_93:(unsigned_shortP, uint16) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          le_int(offset_min(unsigned_shortP_dest_8_92_alloc_table, dest_8),
          (0)))
         and ((JC_<somenum>:
              ge_int(offset_max(unsigned_shortP_dest_8_92_alloc_table,
                     dest_8),
              wcslen(src_6, unsigned_shortP_unsigned_shortM_src_6_93)))
             and (JC_<somenum>:
                 valid_wstring(src_6, unsigned_shortP_src_6_93_alloc_table,
                 unsigned_shortP_unsigned_shortM_src_6_93)))))}
       unsigned_shortP pointer
       reads unsigned_shortP_unsigned_shortM_dest_8_92
       writes unsigned_shortP_unsigned_shortM_dest_8_92
       { (JC_<somenum>:
         ((JC_<somenum>:
          ((JC_<somenum>:
           valid_wstring(dest_8, unsigned_shortP_dest_8_92_alloc_table,
           unsigned_shortP_unsigned_shortM_dest_8_92))
          and ((JC_<somenum>:
               (wcscmp(dest_8, src_6,
                unsigned_shortP_unsigned_shortM_src_6_93,
                unsigned_shortP_unsigned_shortM_dest_8_92) = (0)))
              and (JC_<somenum>: (result = dest_8)))))
         and (JC_<somenum>:
             not_assigns(unsigned_shortP_dest_8_92_alloc_table,
             unsigned_shortP_unsigned_shortM_dest_8_92@,
             unsigned_shortP_unsigned_shortM_dest_8_92,
             pset_range(pset_singleton(dest_8), (0),
             wcslen(src_6, unsigned_shortP_unsigned_shortM_src_6_93)))))) }

parameter wcscspn :
 wcs:unsigned_shortP pointer ->
  reject_0:unsigned_shortP pointer ->
   unsigned_shortP_reject_0_101_alloc_table:unsigned_shortP alloc_table ->
    unsigned_shortP_wcs_100_alloc_table:unsigned_shortP alloc_table ->
     unsigned_shortP_unsigned_shortM_reject_0_101:(unsigned_shortP, uint16) memory ->
      unsigned_shortP_unsigned_shortM_wcs_100:(unsigned_shortP, uint16) memory ->
       { } uint32
       { (JC_<somenum>:
         ((JC_<somenum>: le_int((0), integer_of_uint32(result)))
         and (JC_<somenum>:
             le_int(integer_of_uint32(result),
             wcslen(wcs, unsigned_shortP_unsigned_shortM_wcs_100))))) }

parameter wcscspn_requires :
 wcs:unsigned_shortP pointer ->
  reject_0:unsigned_shortP pointer ->
   unsigned_shortP_reject_0_101_alloc_table:unsigned_shortP alloc_table ->
    unsigned_shortP_wcs_100_alloc_table:unsigned_shortP alloc_table ->
     unsigned_shortP_unsigned_shortM_reject_0_101:(unsigned_shortP, uint16) memory ->
      unsigned_shortP_unsigned_shortM_wcs_100:(unsigned_shortP, uint16) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          valid_wstring(wcs, unsigned_shortP_wcs_100_alloc_table,
          unsigned_shortP_unsigned_shortM_wcs_100))
         and (JC_<somenum>:
             valid_wstring(reject_0,
             unsigned_shortP_reject_0_101_alloc_table,
             unsigned_shortP_unsigned_shortM_reject_0_101))))}
       uint32
       { (JC_<somenum>:
         ((JC_<somenum>: le_int((0), integer_of_uint32(result)))
         and (JC_<somenum>:
             le_int(integer_of_uint32(result),
             wcslen(wcs, unsigned_shortP_unsigned_shortM_wcs_100))))) }

parameter wcsdup :
 wcs_0:unsigned_shortP pointer ->
  unsigned_shortP_result_105_alloc_table:unsigned_shortP alloc_table ->
   unsigned_shortP_wcs_0_104_alloc_table:unsigned_shortP alloc_table ->
    unsigned_shortP_unsigned_shortM_result_105:(unsigned_shortP, uint16) memory ->
     unsigned_shortP_unsigned_shortM_wcs_0_104:(unsigned_shortP, uint16) memory ->
      { } unsigned_shortP pointer
      { (JC_<somenum>:
        ((JC_<somenum>:
         le_int(offset_min(unsigned_shortP_result_105_alloc_table, result),
         (0)))
        and ((JC_<somenum>:
             ge_int(offset_max(unsigned_shortP_result_105_alloc_table,
                    result),
             wcslen(wcs_0, unsigned_shortP_unsigned_shortM_wcs_0_104)))
            and (JC_<somenum>:
                (wcscmp(result, wcs_0,
                 unsigned_shortP_unsigned_shortM_wcs_0_104,
                 unsigned_shortP_unsigned_shortM_result_105) = (0)))))) }

parameter wcsdup_requires :
 wcs_0:unsigned_shortP pointer ->
  unsigned_shortP_result_105_alloc_table:unsigned_shortP alloc_table ->
   unsigned_shortP_wcs_0_104_alloc_table:unsigned_shortP alloc_table ->
    unsigned_shortP_unsigned_shortM_result_105:(unsigned_shortP, uint16) memory ->
     unsigned_shortP_unsigned_shortM_wcs_0_104:(unsigned_shortP, uint16) memory ->
      { (JC_<somenum>:
        valid_wstring(wcs_0, unsigned_shortP_wcs_0_104_alloc_table,
        unsigned_shortP_unsigned_shortM_wcs_0_104))}
      unsigned_shortP pointer
      { (JC_<somenum>:
        ((JC_<somenum>:
         le_int(offset_min(unsigned_shortP_result_105_alloc_table, result),
         (0)))
        and ((JC_<somenum>:
             ge_int(offset_max(unsigned_shortP_result_105_alloc_table,
                    result),
             wcslen(wcs_0, unsigned_shortP_unsigned_shortM_wcs_0_104)))
            and (JC_<somenum>:
                (wcscmp(result, wcs_0,
                 unsigned_shortP_unsigned_shortM_wcs_0_104,
                 unsigned_shortP_unsigned_shortM_result_105) = (0)))))) }

parameter wcslen_0 :
 s_10:unsigned_shortP pointer ->
  unsigned_shortP_s_10_91_alloc_table:unsigned_shortP alloc_table ->
   unsigned_shortP_unsigned_shortM_s_10_91:(unsigned_shortP, uint16) memory ->
    { } uint32
    { (JC_<somenum>:
      (integer_of_uint32(result) = wcslen(s_10,
                                   unsigned_shortP_unsigned_shortM_s_10_91))) }

parameter wcslen_0_requires :
 s_10:unsigned_shortP pointer ->
  unsigned_shortP_s_10_91_alloc_table:unsigned_shortP alloc_table ->
   unsigned_shortP_unsigned_shortM_s_10_91:(unsigned_shortP, uint16) memory ->
    { (JC_<somenum>:
      valid_wstring(s_10, unsigned_shortP_s_10_91_alloc_table,
      unsigned_shortP_unsigned_shortM_s_10_91))}
    uint32
    { (JC_<somenum>:
      (integer_of_uint32(result) = wcslen(s_10,
                                   unsigned_shortP_unsigned_shortM_s_10_91))) }

parameter wcsncpy :
 dest_9:unsigned_shortP pointer ->
  src_7:unsigned_shortP pointer ->
   n_12_0:uint32 ->
    unsigned_shortP_unsigned_shortM_dest_9_96:(unsigned_shortP, uint16) memory ref ->
     unsigned_shortP_src_7_97_alloc_table:unsigned_shortP alloc_table ->
      unsigned_shortP_dest_9_96_alloc_table:unsigned_shortP alloc_table ->
       unsigned_shortP_unsigned_shortM_src_7_97:(unsigned_shortP, uint16) memory ->
        { } unsigned_shortP pointer
        reads unsigned_shortP_unsigned_shortM_dest_9_96
        writes unsigned_shortP_unsigned_shortM_dest_9_96
        { ((le_int(integer_of_uint32(n_12_0),
            wcslen(src_7, unsigned_shortP_unsigned_shortM_src_7_97)) ->
            (JC_<somenum>:
            not_assigns(unsigned_shortP_dest_9_96_alloc_table,
            unsigned_shortP_unsigned_shortM_dest_9_96@,
            unsigned_shortP_unsigned_shortM_dest_9_96,
            pset_range(pset_singleton(dest_9), (0),
            sub_int(integer_of_uint32(n_12_0), (1))))))
          and ((lt_int(wcslen(src_7,
                       unsigned_shortP_unsigned_shortM_src_7_97),
                integer_of_uint32(n_12_0)) ->
                (JC_<somenum>:
                ((JC_<somenum>:
                 ((JC_<somenum>:
                  valid_wstring(dest_9,
                  unsigned_shortP_dest_9_96_alloc_table,
                  unsigned_shortP_unsigned_shortM_dest_9_96))
                 and (JC_<somenum>:
                     (wcscmp(dest_9, src_7,
                      unsigned_shortP_unsigned_shortM_src_7_97,
                      unsigned_shortP_unsigned_shortM_dest_9_96) = (0)))))
                and (JC_<somenum>:
                    not_assigns(unsigned_shortP_dest_9_96_alloc_table,
                    unsigned_shortP_unsigned_shortM_dest_9_96@,
                    unsigned_shortP_unsigned_shortM_dest_9_96,
                    pset_range(pset_singleton(dest_9), (0),
                    sub_int(integer_of_uint32(n_12_0), (1))))))))
              and (JC_<somenum>:
                  ((JC_<somenum>: (result = dest_9))
                  and (JC_<somenum>:
                      not_assigns(unsigned_shortP_dest_9_96_alloc_table,
                      unsigned_shortP_unsigned_shortM_dest_9_96@,
                      unsigned_shortP_unsigned_shortM_dest_9_96,
                      pset_range(pset_singleton(dest_9), (0),
                      sub_int(integer_of_uint32(n_12_0), (1))))))))) }

parameter wcsncpy_requires :
 dest_9:unsigned_shortP pointer ->
  src_7:unsigned_shortP pointer ->
   n_12_0:uint32 ->
    unsigned_shortP_unsigned_shortM_dest_9_96:(unsigned_shortP, uint16) memory ref ->
     unsigned_shortP_src_7_97_alloc_table:unsigned_shortP alloc_table ->
      unsigned_shortP_dest_9_96_alloc_table:unsigned_shortP alloc_table ->
       unsigned_shortP_unsigned_shortM_src_7_97:(unsigned_shortP, uint16) memory ->
        { (JC_<somenum>:
          ((JC_<somenum>:
           le_int(offset_min(unsigned_shortP_dest_9_96_alloc_table, dest_9),
           (0)))
          and ((JC_<somenum>:
               ge_int(offset_max(unsigned_shortP_dest_9_96_alloc_table,
                      dest_9),
               sub_int(integer_of_uint32(n_12_0), (1))))
              and (JC_<somenum>:
                  valid_wstring(src_7, unsigned_shortP_src_7_97_alloc_table,
                  unsigned_shortP_unsigned_shortM_src_7_97)))))}
        unsigned_shortP pointer
        reads unsigned_shortP_unsigned_shortM_dest_9_96
        writes unsigned_shortP_unsigned_shortM_dest_9_96
        { ((le_int(integer_of_uint32(n_12_0),
            wcslen(src_7, unsigned_shortP_unsigned_shortM_src_7_97)) ->
            (JC_<somenum>:
            not_assigns(unsigned_shortP_dest_9_96_alloc_table,
            unsigned_shortP_unsigned_shortM_dest_9_96@,
            unsigned_shortP_unsigned_shortM_dest_9_96,
            pset_range(pset_singleton(dest_9), (0),
            sub_int(integer_of_uint32(n_12_0), (1))))))
          and ((lt_int(wcslen(src_7,
                       unsigned_shortP_unsigned_shortM_src_7_97),
                integer_of_uint32(n_12_0)) ->
                (JC_<somenum>:
                ((JC_<somenum>:
                 ((JC_<somenum>:
                  valid_wstring(dest_9,
                  unsigned_shortP_dest_9_96_alloc_table,
                  unsigned_shortP_unsigned_shortM_dest_9_96))
                 and (JC_<somenum>:
                     (wcscmp(dest_9, src_7,
                      unsigned_shortP_unsigned_shortM_src_7_97,
                      unsigned_shortP_unsigned_shortM_dest_9_96) = (0)))))
                and (JC_<somenum>:
                    not_assigns(unsigned_shortP_dest_9_96_alloc_table,
                    unsigned_shortP_unsigned_shortM_dest_9_96@,
                    unsigned_shortP_unsigned_shortM_dest_9_96,
                    pset_range(pset_singleton(dest_9), (0),
                    sub_int(integer_of_uint32(n_12_0), (1))))))))
              and (JC_<somenum>:
                  ((JC_<somenum>: (result = dest_9))
                  and (JC_<somenum>:
                      not_assigns(unsigned_shortP_dest_9_96_alloc_table,
                      unsigned_shortP_unsigned_shortM_dest_9_96@,
                      unsigned_shortP_unsigned_shortM_dest_9_96,
                      pset_range(pset_singleton(dest_9), (0),
                      sub_int(integer_of_uint32(n_12_0), (1))))))))) }

parameter wcsndup :
 wcs_1:unsigned_shortP pointer ->
  n_13:uint32 ->
   unsigned_shortP_result_108_alloc_table:unsigned_shortP alloc_table ->
    unsigned_shortP_wcs_1_107_alloc_table:unsigned_shortP alloc_table ->
     unsigned_shortP_unsigned_shortM_result_108:(unsigned_shortP, uint16) memory ->
      unsigned_shortP_unsigned_shortM_wcs_1_107:(unsigned_shortP, uint16) memory ->
       { } unsigned_shortP pointer
       { (JC_<somenum>:
         ((JC_<somenum>:
          le_int(offset_min(unsigned_shortP_result_108_alloc_table, result),
          (0)))
         and ((JC_<somenum>:
              ge_int(offset_max(unsigned_shortP_result_108_alloc_table,
                     result),
              minimum(wcslen(wcs_1,
                      unsigned_shortP_unsigned_shortM_wcs_1_107),
              integer_of_uint32(n_13))))
             and ((JC_<somenum>:
                  valid_wstring(result,
                  unsigned_shortP_result_108_alloc_table,
                  unsigned_shortP_unsigned_shortM_result_108))
                 and ((JC_<somenum>:
                      le_int(wcslen(result,
                             unsigned_shortP_unsigned_shortM_result_108),
                      integer_of_uint32(n_13)))
                     and (JC_<somenum>:
                         (wcsncmp(result, wcs_1, integer_of_uint32(n_13),
                          unsigned_shortP_unsigned_shortM_wcs_1_107,
                          unsigned_shortP_unsigned_shortM_result_108) = (0)))))))) }

parameter wcsndup_requires :
 wcs_1:unsigned_shortP pointer ->
  n_13:uint32 ->
   unsigned_shortP_result_108_alloc_table:unsigned_shortP alloc_table ->
    unsigned_shortP_wcs_1_107_alloc_table:unsigned_shortP alloc_table ->
     unsigned_shortP_unsigned_shortM_result_108:(unsigned_shortP, uint16) memory ->
      unsigned_shortP_unsigned_shortM_wcs_1_107:(unsigned_shortP, uint16) memory ->
       { (JC_<somenum>:
         valid_wstring(wcs_1, unsigned_shortP_wcs_1_107_alloc_table,
         unsigned_shortP_unsigned_shortM_wcs_1_107))}
       unsigned_shortP pointer
       { (JC_<somenum>:
         ((JC_<somenum>:
          le_int(offset_min(unsigned_shortP_result_108_alloc_table, result),
          (0)))
         and ((JC_<somenum>:
              ge_int(offset_max(unsigned_shortP_result_108_alloc_table,
                     result),
              minimum(wcslen(wcs_1,
                      unsigned_shortP_unsigned_shortM_wcs_1_107),
              integer_of_uint32(n_13))))
             and ((JC_<somenum>:
                  valid_wstring(result,
                  unsigned_shortP_result_108_alloc_table,
                  unsigned_shortP_unsigned_shortM_result_108))
                 and ((JC_<somenum>:
                      le_int(wcslen(result,
                             unsigned_shortP_unsigned_shortM_result_108),
                      integer_of_uint32(n_13)))
                     and (JC_<somenum>:
                         (wcsncmp(result, wcs_1, integer_of_uint32(n_13),
                          unsigned_shortP_unsigned_shortM_wcs_1_107,
                          unsigned_shortP_unsigned_shortM_result_108) = (0)))))))) }

parameter wcsspn :
 wcs_2:unsigned_shortP pointer ->
  accept_1:unsigned_shortP pointer ->
   unsigned_shortP_accept_1_103_alloc_table:unsigned_shortP alloc_table ->
    unsigned_shortP_wcs_2_102_alloc_table:unsigned_shortP alloc_table ->
     unsigned_shortP_unsigned_shortM_accept_1_103:(unsigned_shortP, uint16) memory ->
      unsigned_shortP_unsigned_shortM_wcs_2_102:(unsigned_shortP, uint16) memory ->
       { } uint32
       { (JC_<somenum>:
         ((JC_<somenum>: le_int((0), integer_of_uint32(result)))
         and (JC_<somenum>:
             le_int(integer_of_uint32(result),
             wcslen(wcs_2, unsigned_shortP_unsigned_shortM_wcs_2_102))))) }

parameter wcsspn_requires :
 wcs_2:unsigned_shortP pointer ->
  accept_1:unsigned_shortP pointer ->
   unsigned_shortP_accept_1_103_alloc_table:unsigned_shortP alloc_table ->
    unsigned_shortP_wcs_2_102_alloc_table:unsigned_shortP alloc_table ->
     unsigned_shortP_unsigned_shortM_accept_1_103:(unsigned_shortP, uint16) memory ->
      unsigned_shortP_unsigned_shortM_wcs_2_102:(unsigned_shortP, uint16) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          valid_wstring(wcs_2, unsigned_shortP_wcs_2_102_alloc_table,
          unsigned_shortP_unsigned_shortM_wcs_2_102))
         and (JC_<somenum>:
             valid_wstring(accept_1,
             unsigned_shortP_accept_1_103_alloc_table,
             unsigned_shortP_unsigned_shortM_accept_1_103))))}
       uint32
       { (JC_<somenum>:
         ((JC_<somenum>: le_int((0), integer_of_uint32(result)))
         and (JC_<somenum>:
             le_int(integer_of_uint32(result),
             wcslen(wcs_2, unsigned_shortP_unsigned_shortM_wcs_2_102))))) }

parameter wcstombs :
 mbstr_0:charP pointer ->
  wcstr_0:unsigned_shortP pointer ->
   n_14:uint32 ->
    charP_charM_mbstr_0_121:(charP, int8) memory ref ->
     unsigned_shortP_wcstr_0_122_alloc_table:unsigned_shortP alloc_table ->
      charP_mbstr_0_121_alloc_table:charP alloc_table ->
       unsigned_shortP_unsigned_shortM_wcstr_0_122:(unsigned_shortP, uint16) memory ->
        { } uint32 reads charP_charM_mbstr_0_121
        writes charP_charM_mbstr_0_121
        { (JC_<somenum>:
          ((JC_<somenum>:
           ((JC_<somenum>:
            valid_string(mbstr_0, charP_mbstr_0_121_alloc_table,
            charP_charM_mbstr_0_121))
           and (JC_<somenum>:
               lt_int(strlen(mbstr_0, charP_charM_mbstr_0_121),
               integer_of_uint32(n_14)))))
          and (JC_<somenum>:
              not_assigns(charP_mbstr_0_121_alloc_table,
              charP_charM_mbstr_0_121@, charP_charM_mbstr_0_121,
              pset_range(pset_singleton(mbstr_0), (0),
              sub_int(integer_of_uint32(n_14), (1))))))) }

parameter wcstombs_requires :
 mbstr_0:charP pointer ->
  wcstr_0:unsigned_shortP pointer ->
   n_14:uint32 ->
    charP_charM_mbstr_0_121:(charP, int8) memory ref ->
     unsigned_shortP_wcstr_0_122_alloc_table:unsigned_shortP alloc_table ->
      charP_mbstr_0_121_alloc_table:charP alloc_table ->
       unsigned_shortP_unsigned_shortM_wcstr_0_122:(unsigned_shortP, uint16) memory ->
        { (JC_<somenum>:
          ((JC_<somenum>:
           valid_wstring(wcstr_0, unsigned_shortP_wcstr_0_122_alloc_table,
           unsigned_shortP_unsigned_shortM_wcstr_0_122))
          and ((JC_<somenum>:
               le_int(offset_min(charP_mbstr_0_121_alloc_table, mbstr_0),
               (0)))
              and (JC_<somenum>:
                  ge_int(offset_max(charP_mbstr_0_121_alloc_table, mbstr_0),
                  sub_int(integer_of_uint32(n_14), (1)))))))}
        uint32 reads charP_charM_mbstr_0_121 writes charP_charM_mbstr_0_121
        { (JC_<somenum>:
          ((JC_<somenum>:
           ((JC_<somenum>:
            valid_string(mbstr_0, charP_mbstr_0_121_alloc_table,
            charP_charM_mbstr_0_121))
           and (JC_<somenum>:
               lt_int(strlen(mbstr_0, charP_charM_mbstr_0_121),
               integer_of_uint32(n_14)))))
          and (JC_<somenum>:
              not_assigns(charP_mbstr_0_121_alloc_table,
              charP_charM_mbstr_0_121@, charP_charM_mbstr_0_121,
              pset_range(pset_singleton(mbstr_0), (0),
              sub_int(integer_of_uint32(n_14), (1))))))) }

parameter wctomb :
 s_11:charP pointer ->
  wc:uint16 ->
   charP_charM_s_11_123:(charP, int8) memory ref ->
    charP_s_11_123_alloc_table:charP alloc_table ->
     { } int32 writes charP_charM_s_11_123
     { (((s_11 <> null) ->
         (JC_<somenum>:
         not_assigns(charP_s_11_123_alloc_table, charP_charM_s_11_123@,
         charP_charM_s_11_123, pset_all(pset_singleton(s_11)))))
       and (((s_11 = null) ->
             (JC_<somenum>:
             not_assigns(charP_s_11_123_alloc_table, charP_charM_s_11_123@,
             charP_charM_s_11_123, pset_empty)))
           and (JC_<somenum>:
               not_assigns(charP_s_11_123_alloc_table, charP_charM_s_11_123@,
               charP_charM_s_11_123, pset_all(pset_singleton(s_11)))))) }

parameter wctomb_requires :
 s_11:charP pointer ->
  wc:uint16 ->
   charP_charM_s_11_123:(charP, int8) memory ref ->
    charP_s_11_123_alloc_table:charP alloc_table ->
     { (JC_<somenum>:
       ((le_int(offset_min(charP_s_11_123_alloc_table, s_11), (0))
        and ge_int(offset_max(charP_s_11_123_alloc_table, s_11), (0)))
       or (s_11 = null)))}
     int32 writes charP_charM_s_11_123
     { (((s_11 <> null) ->
         (JC_<somenum>:
         not_assigns(charP_s_11_123_alloc_table, charP_charM_s_11_123@,
         charP_charM_s_11_123, pset_all(pset_singleton(s_11)))))
       and (((s_11 = null) ->
             (JC_<somenum>:
             not_assigns(charP_s_11_123_alloc_table, charP_charM_s_11_123@,
             charP_charM_s_11_123, pset_empty)))
           and (JC_<somenum>:
               not_assigns(charP_s_11_123_alloc_table, charP_charM_s_11_123@,
               charP_charM_s_11_123, pset_all(pset_singleton(s_11)))))) }

let main_ensures_default =
 fun (argc : int32) (argv : char_xP pointer) (char_xP_argv_126_alloc_table : char_xP alloc_table) (char_xP_char_xM_argv_126 : (char_xP, charP pointer) memory) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let n_17 = ref (any_int32 void) in
     (let x_8 = ref (any_uint32 void) in
     (let y_0 = ref (any_uint32 void) in
     (let z = ref (any_uint32 void) in
     (let u = ref (any_uint32 void) in
     (let v = ref (any_uint32 void) in
     (let w = ref (any_uint32 void) in
     (let tmp_2 = ref (any_int32 void) in
     (let __retres_8 = ref (any_int32 void) in
     try
      begin
        try
         begin
           try
            (C_515:
            begin
              (if ((neq_int_ (integer_of_int32 argc)) (2))
              then
               (C_509:
               (let jessie_<somenum> = (safe_int32_of_integer_ (1)) in
               (JC_<somenum>: (exit jessie_<somenum>)))) else void);
             (let jessie_<somenum> =
             (let __cil_tmp =
             (C_512:
             (let jessie_<somenum> =
             (C_511:
             ((safe_acc_ char_xP_char_xM_argv_126) (C_510:
                                                   ((shift argv) (1))))) in
             (let jessie_<somenum> = null in
             (let jessie_<somenum> = (safe_int32_of_integer_ (10)) in
             (JC_<somenum>: (((strtol jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
             (C_514: begin   (n_17 := (C_513: __cil_tmp)); !n_17 end)) in
             void);
             (if ((lt_int_ (integer_of_int32 !n_17)) (1))
             then (raise (Goto__LOR_exc void))
             else
              (if ((gt_int_ (integer_of_int32 !n_17)) (7))
              then (raise (Goto__LOR_exc void)) else void));
             (raise (Goto__LOR_0_exc void)); (raise (Goto__LOR_exc void)) end)
            with Goto__LOR_exc jessie_<somenum> ->
            (_LOR:
            (C_516:
            (let jessie_<somenum> = (safe_int32_of_integer_ (1)) in
            (JC_<somenum>: (exit jessie_<somenum>))))) end;
          (raise (Goto__LOR_0_exc void)) end with Goto__LOR_0_exc jessie_<somenum> ->
         (_LOR_0:
         (C_525:
         (C_526:
         (C_527:
         (C_528:
         (C_529:
         begin
           void;
          (let jessie_<somenum> =
          (C_524:
          begin
            (assert { (JC_<somenum>: ge_int(integer_of_int32(n_17), (0))) }; void);
           (assert { (JC_<somenum>: lt_int(integer_of_int32(n_17), (32))) }; void);
           (assert
           { (JC_<somenum>:
             le_int((1), asr((2147483647), integer_of_int32(n_17)))) }; void);
           (x_8 := (C_523:
                   (safe_uint32_of_integer_ (C_522:
                                            ((sub_int (integer_of_int32 
                                                       (C_521:
                                                       (safe_int32_of_integer_ 
                                                        (C_520:
                                                        ((lsl (1)) (integer_of_int32 !n_17))))))) (1))))));
           !x_8 end) in void); (let jessie_<somenum> = (y_0 := !x_8) in void);
          (let jessie_<somenum> = (z := !x_8) in void);
          (let jessie_<somenum> = (u := !x_8) in void);
          (let jessie_<somenum> = (v := !x_8) in void);
          (let jessie_<somenum> = (w := !x_8) in void);
          (loop_4:
          while true do
          { invariant (JC_<somenum>: true)  }
           begin
             [ { } unit { true } ];
            try
             begin
               (let jessie_<somenum> =
               (C_531:
               (C_533:
               (C_535:
               (C_537:
               (C_540:
               (C_542:
               (C_544:
               begin
                 (let jessie_<somenum> =
                 (y_0 := (C_530:
                         (let jessie_<somenum> = !x_8 in
                         (JC_<somenum>: (snoob1 jessie_<somenum>))))) in void);
                (let jessie_<somenum> =
                (z := (C_532:
                      (let jessie_<somenum> = !x_8 in
                      (JC_<somenum>: (snoob2 jessie_<somenum>))))) in void);
                (let jessie_<somenum> =
                (u := (C_534:
                      (let jessie_<somenum> = !x_8 in
                      (JC_<somenum>: (snoob3 jessie_<somenum>))))) in void);
                (let jessie_<somenum> =
                (v := (C_536:
                      (let jessie_<somenum> = !x_8 in
                      (JC_<somenum>: (next_set_of_n_elements jessie_<somenum>))))) in
                void);
                (let jessie_<somenum> =
                (tmp_2 := (C_539:
                          (let jessie_<somenum> =
                          (C_538:
                          (safe_int32_of_integer_ (integer_of_uint32 !x_8))) in
                          (JC_<somenum>: (snoob4 jessie_<somenum>))))) in void);
                (let jessie_<somenum> =
                (w := (C_541:
                      (safe_uint32_of_integer_ (integer_of_int32 !tmp_2)))) in
                void);
                (x_8 := (C_543:
                        (let jessie_<somenum> = !x_8 in
                        (JC_<somenum>: (snoob jessie_<somenum>))))); !x_8 end))))))) in
               void);
              (if ((le_int_ (integer_of_uint32 !x_8)) (255)) then void
              else (raise (Goto_while_0_break_exc void)));
              (raise (Loop_continue_exc void)) end with
             Loop_continue_exc jessie_<somenum> -> void end end done) end)))))) end;
       (raise (Goto_while_0_break_exc void)) end with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_545:
      begin
        void;
       (let jessie_<somenum> = (__retres_8 := (safe_int32_of_integer_ (0))) in
       void); (return := !__retres_8); (raise Return) end)) end)))))))));
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let main_safety =
 fun (argc : int32) (argv : char_xP pointer) (char_xP_argv_126_alloc_table : char_xP alloc_table) (char_xP_char_xM_argv_126 : (char_xP, charP pointer) memory) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let n_17 = ref (any_int32 void) in
     (let x_8 = ref (any_uint32 void) in
     (let y_0 = ref (any_uint32 void) in
     (let z = ref (any_uint32 void) in
     (let u = ref (any_uint32 void) in
     (let v = ref (any_uint32 void) in
     (let w = ref (any_uint32 void) in
     (let tmp_2 = ref (any_int32 void) in
     (let __retres_8 = ref (any_int32 void) in
     try
      begin
        try
         begin
           try
            (C_515:
            begin
              (if ((neq_int_ (integer_of_int32 argc)) (2))
              then
               (C_509:
               (let jessie_<somenum> = (safe_int32_of_integer_ (1)) in
               (JC_<somenum>: (exit_requires jessie_<somenum>)))) else void);
             (let jessie_<somenum> =
             (let __cil_tmp =
             (C_512:
             (let jessie_<somenum> =
             (C_511:
             (JC_<somenum>:
             ((((offset_acc_ char_xP_argv_126_alloc_table) char_xP_char_xM_argv_126) argv) (1)))) in
             (let jessie_<somenum> = null in
             (let jessie_<somenum> = (safe_int32_of_integer_ (10)) in
             (JC_<somenum>: (((strtol_requires jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
             (C_514: begin   (n_17 := (C_513: __cil_tmp)); !n_17 end)) in
             void);
             (if ((lt_int_ (integer_of_int32 !n_17)) (1))
             then (raise (Goto__LOR_exc void))
             else
              (if ((gt_int_ (integer_of_int32 !n_17)) (7))
              then (raise (Goto__LOR_exc void)) else void));
             (raise (Goto__LOR_0_exc void)); (raise (Goto__LOR_exc void)) end)
            with Goto__LOR_exc jessie_<somenum> ->
            (_LOR:
            (C_516:
            (let jessie_<somenum> = (safe_int32_of_integer_ (1)) in
            (JC_<somenum>: (exit_requires jessie_<somenum>))))) end;
          (raise (Goto__LOR_0_exc void)) end with Goto__LOR_0_exc jessie_<somenum> ->
         (_LOR_0:
         (C_525:
         (C_526:
         (C_527:
         (C_528:
         (C_529:
         begin
           void;
          (let jessie_<somenum> =
          (C_524:
          begin
            [ { } unit reads n_17
              { (JC_<somenum>: ge_int(integer_of_int32(n_17), (0))) } ];
           [ { } unit reads n_17
             { (JC_<somenum>: lt_int(integer_of_int32(n_17), (32))) } ];
           [ { } unit reads n_17
             { (JC_<somenum>:
               le_int((1), asr((2147483647), integer_of_int32(n_17)))) } ];
           (x_8 := (C_523:
                   (JC_<somenum>:
                   (uint32_of_integer_ (C_522:
                                       ((sub_int (integer_of_int32 (C_521:
                                                                   (JC_<somenum>:
                                                                   (int32_of_integer_ 
                                                                    (C_520:
                                                                    ((lsl (1)) 
                                                                    (integer_of_int32 !n_17)))))))) (1)))))));
           !x_8 end) in void); (let jessie_<somenum> = (y_0 := !x_8) in void);
          (let jessie_<somenum> = (z := !x_8) in void);
          (let jessie_<somenum> = (u := !x_8) in void);
          (let jessie_<somenum> = (v := !x_8) in void);
          (let jessie_<somenum> = (w := !x_8) in void);
          (loop_3:
          while true do
          { invariant (JC_<somenum>: true) variant (0) }
           begin
             [ { } unit { true } ];
            try
             begin
               (let jessie_<somenum> =
               (C_531:
               (C_533:
               (C_535:
               (C_537:
               (C_540:
               (C_542:
               (C_544:
               begin
                 (let jessie_<somenum> =
                 (y_0 := (C_530:
                         (let jessie_<somenum> = !x_8 in
                         (JC_<somenum>: (snoob1_requires jessie_<somenum>))))) in void);
                (let jessie_<somenum> =
                (z := (C_532:
                      (let jessie_<somenum> = !x_8 in
                      (JC_<somenum>: (snoob2_requires jessie_<somenum>))))) in void);
                (let jessie_<somenum> =
                (u := (C_534:
                      (let jessie_<somenum> = !x_8 in
                      (JC_<somenum>: (snoob3_requires jessie_<somenum>))))) in void);
                (let jessie_<somenum> =
                (v := (C_536:
                      (let jessie_<somenum> = !x_8 in
                      (JC_<somenum>: (next_set_of_n_elements_requires jessie_<somenum>))))) in
                void);
                (let jessie_<somenum> =
                (tmp_2 := (C_539:
                          (let jessie_<somenum> =
                          (C_538:
                          (JC_<somenum>:
                          (int32_of_integer_ (integer_of_uint32 !x_8)))) in
                          (JC_<somenum>: (snoob4_requires jessie_<somenum>))))) in void);
                (let jessie_<somenum> =
                (w := (C_541:
                      (JC_<somenum>:
                      (uint32_of_integer_ (integer_of_int32 !tmp_2))))) in
                void);
                (x_8 := (C_543:
                        (let jessie_<somenum> = !x_8 in
                        (JC_<somenum>: (snoob_requires jessie_<somenum>))))); !x_8 end))))))) in
               void);
              (if ((le_int_ (integer_of_uint32 !x_8)) (255)) then void
              else (raise (Goto_while_0_break_exc void)));
              (raise (Loop_continue_exc void)) end with
             Loop_continue_exc jessie_<somenum> -> void end end done) end)))))) end;
       (raise (Goto_while_0_break_exc void)) end with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_545:
      begin
        void;
       (let jessie_<somenum> = (__retres_8 := (safe_int32_of_integer_ (0))) in
       void); (return := !__retres_8); (raise Return) end)) end)))))))));
    absurd  end with Return -> !return end)) { true }

let next_set_of_n_elements_ensures_default =
 fun (x_7 : uint32) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let smallest_3 = ref (any_uint32 void) in
     (let ripple_3 = ref (any_uint32 void) in
     (let new_smallest = ref (any_uint32 void) in
     (let ones_3 = ref (any_uint32 void) in
     (let __retres_6 = ref (any_uint32 void) in
     try
      (C_465:
      (C_468:
      (C_473:
      (C_480:
      (C_483:
      begin
        (if ((eq_int_ (integer_of_uint32 x_7)) (0))
        then
         (C_460:
         begin
           (let jessie_<somenum> = (__retres_6 := (safe_uint32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> =
       (smallest_3 := (C_464:
                      (safe_uint32_of_integer_ (C_463:
                                               ((bw_and (integer_of_uint32 x_7)) 
                                                (integer_of_uint32 (C_462:
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_461:
                                                                    (neg_int 
                                                                    (integer_of_uint32 x_7))))))))))) in
       void);
       (let jessie_<somenum> =
       (ripple_3 := (C_467:
                    (safe_uint32_of_integer_ (C_466:
                                             ((add_int (integer_of_uint32 x_7)) 
                                              (integer_of_uint32 !smallest_3)))))) in
       void);
       (let jessie_<somenum> =
       (new_smallest := (C_472:
                        (safe_uint32_of_integer_ (C_471:
                                                 ((bw_and (integer_of_uint32 !ripple_3)) 
                                                  (integer_of_uint32 
                                                   (C_470:
                                                   (safe_uint32_of_integer_ 
                                                    (C_469:
                                                    (neg_int (integer_of_uint32 !ripple_3))))))))))) in
       void);
       (let jessie_<somenum> =
       (ones_3 := (C_479:
                  (safe_uint32_of_integer_ (C_478:
                                           ((sub_int (integer_of_uint32 
                                                      (C_477:
                                                      (safe_uint32_of_integer_ 
                                                       (C_476:
                                                       (JC_<somenum>:
                                                       ((computer_div 
                                                         (integer_of_uint32 
                                                          (C_475:
                                                          (safe_uint32_of_integer_ 
                                                           (C_474:
                                                           (JC_<somenum>:
                                                           ((computer_div 
                                                             (integer_of_uint32 !new_smallest)) 
                                                            (integer_of_uint32 !smallest_3)))))))) (2)))))))) (1)))))) in
       void);
       (let jessie_<somenum> =
       (__retres_6 := (C_482:
                      (safe_uint32_of_integer_ (C_481:
                                               ((bw_or (integer_of_uint32 !ripple_3)) 
                                                (integer_of_uint32 !ones_3)))))) in
       void); (raise (Return_label_exc void)) end))))) with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_6); (raise Return) end) end)))));
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let next_set_of_n_elements_safety =
 fun (x_7 : uint32) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let smallest_3 = ref (any_uint32 void) in
     (let ripple_3 = ref (any_uint32 void) in
     (let new_smallest = ref (any_uint32 void) in
     (let ones_3 = ref (any_uint32 void) in
     (let __retres_6 = ref (any_uint32 void) in
     try
      (C_465:
      (C_468:
      (C_473:
      (C_480:
      (C_483:
      begin
        (if ((eq_int_ (integer_of_uint32 x_7)) (0))
        then
         (C_460:
         begin
           (let jessie_<somenum> = (__retres_6 := (safe_uint32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> =
       (smallest_3 := (C_464:
                      (JC_<somenum>:
                      (uint32_of_integer_ (C_463:
                                          ((bw_and (integer_of_uint32 x_7)) 
                                           (integer_of_uint32 (C_462:
                                                              (JC_<somenum>:
                                                              (uint32_of_integer_ 
                                                               (C_461:
                                                               (neg_int 
                                                                (integer_of_uint32 x_7))))))))))))) in
       void);
       (let jessie_<somenum> =
       (ripple_3 := (C_467:
                    (JC_<somenum>:
                    (uint32_of_integer_ (C_466:
                                        ((add_int (integer_of_uint32 x_7)) 
                                         (integer_of_uint32 !smallest_3))))))) in
       void);
       (let jessie_<somenum> =
       (new_smallest := (C_472:
                        (JC_<somenum>:
                        (uint32_of_integer_ (C_471:
                                            ((bw_and (integer_of_uint32 !ripple_3)) 
                                             (integer_of_uint32 (C_470:
                                                                (JC_<somenum>:
                                                                (uint32_of_integer_ 
                                                                 (C_469:
                                                                 (neg_int 
                                                                  (integer_of_uint32 !ripple_3))))))))))))) in
       void);
       (let jessie_<somenum> =
       (ones_3 := (C_479:
                  (JC_<somenum>:
                  (uint32_of_integer_ (C_478:
                                      ((sub_int (integer_of_uint32 (C_477:
                                                                   (JC_<somenum>:
                                                                   (uint32_of_integer_ 
                                                                    (C_476:
                                                                    (JC_<somenum>:
                                                                    ((computer_div_ 
                                                                    (integer_of_uint32 
                                                                    (C_475:
                                                                    (JC_<somenum>:
                                                                    (uint32_of_integer_ 
                                                                    (C_474:
                                                                    (JC_<somenum>:
                                                                    ((computer_div_ 
                                                                    (integer_of_uint32 !new_smallest)) 
                                                                    (integer_of_uint32 !smallest_3))))))))) (2))))))))) (1))))))) in
       void);
       (let jessie_<somenum> =
       (__retres_6 := (C_482:
                      (JC_<somenum>:
                      (uint32_of_integer_ (C_481:
                                          ((bw_or (integer_of_uint32 !ripple_3)) 
                                           (integer_of_uint32 !ones_3))))))) in
       void); (raise (Return_label_exc void)) end))))) with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_6); (raise Return) end) end)))));
    absurd  end with Return -> !return end)) { true }

let nlz_ensures_default =
 fun (x_0 : uint32) ->
  { (JC_<somenum>: true) }
  (let mutable_x_0 = ref x_0 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let n_16 = ref (any_int32 void) in
     (let __retres_0 = ref (any_int32 void) in
     try
      (C_300:
      (C_328:
      begin
        (if ((eq_int_ (integer_of_uint32 !mutable_x_0)) (0))
        then
         (C_299:
         begin
           (let jessie_<somenum> = (__retres_0 := (safe_int32_of_integer_ (32))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (n_16 := (safe_int32_of_integer_ (0))) in void);
       (if ((le_int_ (integer_of_uint32 !mutable_x_0)) (65535))
       then
        (let jessie_<somenum> =
        (C_303:
        (C_306:
        begin
          (let jessie_<somenum> =
          (n_16 := (C_302:
                   (safe_int32_of_integer_ (C_301:
                                           ((add_int (integer_of_int32 !n_16)) (16)))))) in
          void);
         (mutable_x_0 := (C_305:
                         (safe_uint32_of_integer_ (C_304:
                                                  ((mul_int (integer_of_uint32 !mutable_x_0)) (65536))))));
         !mutable_x_0 end)) in void) else void);
       (if ((le_int_ (integer_of_uint32 !mutable_x_0)) (16777215))
       then
        (let jessie_<somenum> =
        (C_309:
        (C_312:
        begin
          (let jessie_<somenum> =
          (n_16 := (C_308:
                   (safe_int32_of_integer_ (C_307:
                                           ((add_int (integer_of_int32 !n_16)) (8)))))) in
          void);
         (mutable_x_0 := (C_311:
                         (safe_uint32_of_integer_ (C_310:
                                                  ((mul_int (integer_of_uint32 !mutable_x_0)) (256))))));
         !mutable_x_0 end)) in void) else void);
       (if ((le_int_ (integer_of_uint32 !mutable_x_0)) (268435455))
       then
        (let jessie_<somenum> =
        (C_315:
        (C_318:
        begin
          (let jessie_<somenum> =
          (n_16 := (C_314:
                   (safe_int32_of_integer_ (C_313:
                                           ((add_int (integer_of_int32 !n_16)) (4)))))) in
          void);
         (mutable_x_0 := (C_317:
                         (safe_uint32_of_integer_ (C_316:
                                                  ((mul_int (integer_of_uint32 !mutable_x_0)) (16))))));
         !mutable_x_0 end)) in void) else void);
       (if ((le_int_ (integer_of_uint32 !mutable_x_0)) (1073741823))
       then
        (let jessie_<somenum> =
        (C_321:
        (C_324:
        begin
          (let jessie_<somenum> =
          (n_16 := (C_320:
                   (safe_int32_of_integer_ (C_319:
                                           ((add_int (integer_of_int32 !n_16)) (2)))))) in
          void);
         (mutable_x_0 := (C_323:
                         (safe_uint32_of_integer_ (C_322:
                                                  ((mul_int (integer_of_uint32 !mutable_x_0)) (4))))));
         !mutable_x_0 end)) in void) else void);
       (if ((le_int_ (integer_of_uint32 !mutable_x_0)) (2147483647))
       then
        (let jessie_<somenum> =
        (C_327:
        (n_16 := (C_326:
                 (safe_int32_of_integer_ (C_325:
                                         ((add_int (integer_of_int32 !n_16)) (1))))))) in
        void) else void); (let jessie_<somenum> = (__retres_0 := !n_16) in void);
       (raise (Return_label_exc void)) end)) with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_0); (raise Return) end) end));
    absurd  end with Return -> !return end))) { (JC_<somenum>: true) }

let nlz_safety =
 fun (x_0 : uint32) ->
  { (JC_<somenum>: true) }
  (let mutable_x_0 = ref x_0 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let n_16 = ref (any_int32 void) in
     (let __retres_0 = ref (any_int32 void) in
     try
      (C_300:
      (C_328:
      begin
        (if ((eq_int_ (integer_of_uint32 !mutable_x_0)) (0))
        then
         (C_299:
         begin
           (let jessie_<somenum> = (__retres_0 := (safe_int32_of_integer_ (32))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (n_16 := (safe_int32_of_integer_ (0))) in void);
       (if ((le_int_ (integer_of_uint32 !mutable_x_0)) (65535))
       then
        (let jessie_<somenum> =
        (C_303:
        (C_306:
        begin
          (let jessie_<somenum> =
          (n_16 := (C_302:
                   (JC_<somenum>:
                   (int32_of_integer_ (C_301:
                                      ((add_int (integer_of_int32 !n_16)) (16))))))) in
          void);
         (mutable_x_0 := (C_305:
                         (JC_<somenum>:
                         (uint32_of_integer_ (C_304:
                                             ((mul_int (integer_of_uint32 !mutable_x_0)) (65536)))))));
         !mutable_x_0 end)) in void) else void);
       (if ((le_int_ (integer_of_uint32 !mutable_x_0)) (16777215))
       then
        (let jessie_<somenum> =
        (C_309:
        (C_312:
        begin
          (let jessie_<somenum> =
          (n_16 := (C_308:
                   (JC_<somenum>:
                   (int32_of_integer_ (C_307:
                                      ((add_int (integer_of_int32 !n_16)) (8))))))) in
          void);
         (mutable_x_0 := (C_311:
                         (JC_<somenum>:
                         (uint32_of_integer_ (C_310:
                                             ((mul_int (integer_of_uint32 !mutable_x_0)) (256)))))));
         !mutable_x_0 end)) in void) else void);
       (if ((le_int_ (integer_of_uint32 !mutable_x_0)) (268435455))
       then
        (let jessie_<somenum> =
        (C_315:
        (C_318:
        begin
          (let jessie_<somenum> =
          (n_16 := (C_314:
                   (JC_<somenum>:
                   (int32_of_integer_ (C_313:
                                      ((add_int (integer_of_int32 !n_16)) (4))))))) in
          void);
         (mutable_x_0 := (C_317:
                         (JC_<somenum>:
                         (uint32_of_integer_ (C_316:
                                             ((mul_int (integer_of_uint32 !mutable_x_0)) (16)))))));
         !mutable_x_0 end)) in void) else void);
       (if ((le_int_ (integer_of_uint32 !mutable_x_0)) (1073741823))
       then
        (let jessie_<somenum> =
        (C_321:
        (C_324:
        begin
          (let jessie_<somenum> =
          (n_16 := (C_320:
                   (JC_<somenum>:
                   (int32_of_integer_ (C_319:
                                      ((add_int (integer_of_int32 !n_16)) (2))))))) in
          void);
         (mutable_x_0 := (C_323:
                         (JC_<somenum>:
                         (uint32_of_integer_ (C_322:
                                             ((mul_int (integer_of_uint32 !mutable_x_0)) (4)))))));
         !mutable_x_0 end)) in void) else void);
       (if ((le_int_ (integer_of_uint32 !mutable_x_0)) (2147483647))
       then
        (let jessie_<somenum> =
        (C_327:
        (n_16 := (C_326:
                 (JC_<somenum>:
                 (int32_of_integer_ (C_325:
                                    ((add_int (integer_of_int32 !n_16)) (1)))))))) in
        void) else void); (let jessie_<somenum> = (__retres_0 := !n_16) in void);
       (raise (Return_label_exc void)) end)) with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_0); (raise Return) end) end));
    absurd  end with Return -> !return end))) { true }

let ntz_ensures_default =
 fun (x_1 : uint32) ->
  { (JC_<somenum>: true) }
  (let mutable_x_1 = ref x_1 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let n_15 = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      (C_259:
      (C_297:
      begin
        (if ((eq_int_ (integer_of_uint32 !mutable_x_1)) (0))
        then
         (C_258:
         begin
           (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (32))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (n_15 := (safe_int32_of_integer_ (1))) in void);
       (if ((eq_int_ (integer_of_uint32 (C_267:
                                        (safe_uint32_of_integer_ (C_266:
                                                                 ((bw_and 
                                                                   (integer_of_uint32 !mutable_x_1)) (65535))))))) (0))
       then
        (let jessie_<somenum> =
        (C_262:
        (C_265:
        begin
          (let jessie_<somenum> =
          (n_15 := (C_261:
                   (safe_int32_of_integer_ (C_260:
                                           ((add_int (integer_of_int32 !n_15)) (16)))))) in
          void);
         (mutable_x_1 := (C_264:
                         (safe_uint32_of_integer_ (C_263:
                                                  (JC_<somenum>:
                                                  ((computer_div (integer_of_uint32 !mutable_x_1)) (65536)))))));
         !mutable_x_1 end)) in void) else void);
       (if ((eq_int_ (integer_of_uint32 (C_275:
                                        (safe_uint32_of_integer_ (C_274:
                                                                 ((bw_and 
                                                                   (integer_of_uint32 !mutable_x_1)) (255))))))) (0))
       then
        (let jessie_<somenum> =
        (C_270:
        (C_273:
        begin
          (let jessie_<somenum> =
          (n_15 := (C_269:
                   (safe_int32_of_integer_ (C_268:
                                           ((add_int (integer_of_int32 !n_15)) (8)))))) in
          void);
         (mutable_x_1 := (C_272:
                         (safe_uint32_of_integer_ (C_271:
                                                  (JC_<somenum>:
                                                  ((computer_div (integer_of_uint32 !mutable_x_1)) (256)))))));
         !mutable_x_1 end)) in void) else void);
       (if ((eq_int_ (integer_of_uint32 (C_283:
                                        (safe_uint32_of_integer_ (C_282:
                                                                 ((bw_and 
                                                                   (integer_of_uint32 !mutable_x_1)) (15))))))) (0))
       then
        (let jessie_<somenum> =
        (C_278:
        (C_281:
        begin
          (let jessie_<somenum> =
          (n_15 := (C_277:
                   (safe_int32_of_integer_ (C_276:
                                           ((add_int (integer_of_int32 !n_15)) (4)))))) in
          void);
         (mutable_x_1 := (C_280:
                         (safe_uint32_of_integer_ (C_279:
                                                  (JC_<somenum>:
                                                  ((computer_div (integer_of_uint32 !mutable_x_1)) (16)))))));
         !mutable_x_1 end)) in void) else void);
       (if ((eq_int_ (integer_of_uint32 (C_291:
                                        (safe_uint32_of_integer_ (C_290:
                                                                 ((bw_and 
                                                                   (integer_of_uint32 !mutable_x_1)) (3))))))) (0))
       then
        (let jessie_<somenum> =
        (C_286:
        (C_289:
        begin
          (let jessie_<somenum> =
          (n_15 := (C_285:
                   (safe_int32_of_integer_ (C_284:
                                           ((add_int (integer_of_int32 !n_15)) (2)))))) in
          void);
         (mutable_x_1 := (C_288:
                         (safe_uint32_of_integer_ (C_287:
                                                  (JC_<somenum>:
                                                  ((computer_div (integer_of_uint32 !mutable_x_1)) (4)))))));
         !mutable_x_1 end)) in void) else void);
       (let jessie_<somenum> =
       (__retres := (C_296:
                    (safe_int32_of_integer_ (C_295:
                                            ((sub_int (integer_of_uint32 
                                                       (C_294:
                                                       (safe_uint32_of_integer_ 
                                                        (integer_of_int32 !n_15))))) 
                                             (integer_of_uint32 (C_293:
                                                                (safe_uint32_of_integer_ 
                                                                 (C_292:
                                                                 ((bw_and 
                                                                   (integer_of_uint32 !mutable_x_1)) (1))))))))))) in
       void); (raise (Return_label_exc void)) end)) with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end));
    absurd  end with Return -> !return end))) { (JC_<somenum>: true) }

let ntz_safety =
 fun (x_1 : uint32) ->
  { (JC_<somenum>: true) }
  (let mutable_x_1 = ref x_1 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let n_15 = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      (C_259:
      (C_297:
      begin
        (if ((eq_int_ (integer_of_uint32 !mutable_x_1)) (0))
        then
         (C_258:
         begin
           (let jessie_<somenum> = (__retres := (safe_int32_of_integer_ (32))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (n_15 := (safe_int32_of_integer_ (1))) in void);
       (if ((eq_int_ (integer_of_uint32 (C_267:
                                        (JC_<somenum>:
                                        (uint32_of_integer_ (C_266:
                                                            ((bw_and 
                                                              (integer_of_uint32 !mutable_x_1)) (65535)))))))) (0))
       then
        (let jessie_<somenum> =
        (C_262:
        (C_265:
        begin
          (let jessie_<somenum> =
          (n_15 := (C_261:
                   (JC_<somenum>:
                   (int32_of_integer_ (C_260:
                                      ((add_int (integer_of_int32 !n_15)) (16))))))) in
          void);
         (mutable_x_1 := (C_264:
                         (JC_<somenum>:
                         (uint32_of_integer_ (C_263:
                                             (JC_<somenum>:
                                             ((computer_div_ (integer_of_uint32 !mutable_x_1)) (65536))))))));
         !mutable_x_1 end)) in void) else void);
       (if ((eq_int_ (integer_of_uint32 (C_275:
                                        (JC_<somenum>:
                                        (uint32_of_integer_ (C_274:
                                                            ((bw_and 
                                                              (integer_of_uint32 !mutable_x_1)) (255)))))))) (0))
       then
        (let jessie_<somenum> =
        (C_270:
        (C_273:
        begin
          (let jessie_<somenum> =
          (n_15 := (C_269:
                   (JC_<somenum>:
                   (int32_of_integer_ (C_268:
                                      ((add_int (integer_of_int32 !n_15)) (8))))))) in
          void);
         (mutable_x_1 := (C_272:
                         (JC_<somenum>:
                         (uint32_of_integer_ (C_271:
                                             (JC_<somenum>:
                                             ((computer_div_ (integer_of_uint32 !mutable_x_1)) (256))))))));
         !mutable_x_1 end)) in void) else void);
       (if ((eq_int_ (integer_of_uint32 (C_283:
                                        (JC_<somenum>:
                                        (uint32_of_integer_ (C_282:
                                                            ((bw_and 
                                                              (integer_of_uint32 !mutable_x_1)) (15)))))))) (0))
       then
        (let jessie_<somenum> =
        (C_278:
        (C_281:
        begin
          (let jessie_<somenum> =
          (n_15 := (C_277:
                   (JC_<somenum>:
                   (int32_of_integer_ (C_276:
                                      ((add_int (integer_of_int32 !n_15)) (4))))))) in
          void);
         (mutable_x_1 := (C_280:
                         (JC_<somenum>:
                         (uint32_of_integer_ (C_279:
                                             (JC_<somenum>:
                                             ((computer_div_ (integer_of_uint32 !mutable_x_1)) (16))))))));
         !mutable_x_1 end)) in void) else void);
       (if ((eq_int_ (integer_of_uint32 (C_291:
                                        (JC_<somenum>:
                                        (uint32_of_integer_ (C_290:
                                                            ((bw_and 
                                                              (integer_of_uint32 !mutable_x_1)) (3)))))))) (0))
       then
        (let jessie_<somenum> =
        (C_286:
        (C_289:
        begin
          (let jessie_<somenum> =
          (n_15 := (C_285:
                   (JC_<somenum>:
                   (int32_of_integer_ (C_284:
                                      ((add_int (integer_of_int32 !n_15)) (2))))))) in
          void);
         (mutable_x_1 := (C_288:
                         (JC_<somenum>:
                         (uint32_of_integer_ (C_287:
                                             (JC_<somenum>:
                                             ((computer_div_ (integer_of_uint32 !mutable_x_1)) (4))))))));
         !mutable_x_1 end)) in void) else void);
       (let jessie_<somenum> =
       (__retres := (C_296:
                    (JC_<somenum>:
                    (int32_of_integer_ (C_295:
                                       ((sub_int (integer_of_uint32 (C_294:
                                                                    (JC_<somenum>:
                                                                    (uint32_of_integer_ 
                                                                    (integer_of_int32 !n_15)))))) 
                                        (integer_of_uint32 (C_293:
                                                           (JC_<somenum>:
                                                           (uint32_of_integer_ 
                                                            (C_292:
                                                            ((bw_and 
                                                              (integer_of_uint32 !mutable_x_1)) (1))))))))))))) in
       void); (raise (Return_label_exc void)) end)) with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end));
    absurd  end with Return -> !return end))) { true }

let pop_ensures_default =
 fun (x_2 : uint32) ->
  { (JC_<somenum>: true) }
  (let mutable_x_2 = ref x_2 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_1 = ref (any_int32 void) in
     (C_336:
     (C_345:
     (C_352:
     (C_357:
     (C_362:
     (C_365:
     begin
       (let jessie_<somenum> =
       (mutable_x_2 := (C_335:
                       (safe_uint32_of_integer_ (C_334:
                                                ((sub_int (integer_of_uint32 !mutable_x_2)) 
                                                 (integer_of_uint32 (C_333:
                                                                    (safe_uint32_of_integer_ 
                                                                    (C_332:
                                                                    ((bw_and 
                                                                    (integer_of_uint32 
                                                                    (C_331:
                                                                    (safe_uint32_of_integer_ 
                                                                    (C_330:
                                                                    (JC_<somenum>:
                                                                    ((computer_div 
                                                                    (integer_of_uint32 !mutable_x_2)) (2)))))))) (1431655765))))))))))) in
       void);
      (let jessie_<somenum> =
      (mutable_x_2 := (C_344:
                      (safe_uint32_of_integer_ (C_343:
                                               ((add_int (integer_of_uint32 
                                                          (C_342:
                                                          (safe_uint32_of_integer_ 
                                                           (C_341:
                                                           ((bw_and (integer_of_uint32 !mutable_x_2)) (858993459))))))) 
                                                (integer_of_uint32 (C_340:
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_339:
                                                                    ((bw_and 
                                                                    (integer_of_uint32 
                                                                    (C_338:
                                                                    (safe_uint32_of_integer_ 
                                                                    (C_337:
                                                                    (JC_<somenum>:
                                                                    ((computer_div 
                                                                    (integer_of_uint32 !mutable_x_2)) (4)))))))) (858993459))))))))))) in
      void);
      (let jessie_<somenum> =
      (mutable_x_2 := (C_351:
                      (safe_uint32_of_integer_ (C_350:
                                               ((bw_and (integer_of_uint32 
                                                         (C_349:
                                                         (safe_uint32_of_integer_ 
                                                          (C_348:
                                                          ((add_int (integer_of_uint32 !mutable_x_2)) 
                                                           (integer_of_uint32 
                                                            (C_347:
                                                            (safe_uint32_of_integer_ 
                                                             (C_346:
                                                             (JC_<somenum>:
                                                             ((computer_div 
                                                               (integer_of_uint32 !mutable_x_2)) (16))))))))))))) (252645135)))))) in
      void);
      (let jessie_<somenum> =
      (mutable_x_2 := (C_356:
                      (safe_uint32_of_integer_ (C_355:
                                               ((add_int (integer_of_uint32 !mutable_x_2)) 
                                                (integer_of_uint32 (C_354:
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_353:
                                                                    ((mul_int 
                                                                    (integer_of_uint32 !mutable_x_2)) (256))))))))))) in
      void);
      (let jessie_<somenum> =
      (mutable_x_2 := (C_361:
                      (safe_uint32_of_integer_ (C_360:
                                               ((add_int (integer_of_uint32 !mutable_x_2)) 
                                                (integer_of_uint32 (C_359:
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_358:
                                                                    ((mul_int 
                                                                    (integer_of_uint32 !mutable_x_2)) (65536))))))))))) in
      void);
      (let jessie_<somenum> =
      (__retres_1 := (C_364:
                     (safe_int32_of_integer_ (C_363:
                                             (JC_<somenum>:
                                             ((computer_div (integer_of_uint32 !mutable_x_2)) (16777216))))))) in
      void); (return := !__retres_1); (raise Return) end))))))); absurd  end
   with Return -> !return end))) { (JC_<somenum>: true) }

let pop_safety =
 fun (x_2 : uint32) ->
  { (JC_<somenum>: true) }
  (let mutable_x_2 = ref x_2 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_1 = ref (any_int32 void) in
     (C_336:
     (C_345:
     (C_352:
     (C_357:
     (C_362:
     (C_365:
     begin
       (let jessie_<somenum> =
       (mutable_x_2 := (C_335:
                       (JC_<somenum>:
                       (uint32_of_integer_ (C_334:
                                           ((sub_int (integer_of_uint32 !mutable_x_2)) 
                                            (integer_of_uint32 (C_333:
                                                               (JC_<somenum>:
                                                               (uint32_of_integer_ 
                                                                (C_332:
                                                                ((bw_and 
                                                                  (integer_of_uint32 
                                                                   (C_331:
                                                                   (JC_<somenum>:
                                                                   (uint32_of_integer_ 
                                                                    (C_330:
                                                                    (JC_<somenum>:
                                                                    ((computer_div_ 
                                                                    (integer_of_uint32 !mutable_x_2)) (2))))))))) (1431655765))))))))))))) in
       void);
      (let jessie_<somenum> =
      (mutable_x_2 := (C_344:
                      (JC_<somenum>:
                      (uint32_of_integer_ (C_343:
                                          ((add_int (integer_of_uint32 
                                                     (C_342:
                                                     (JC_<somenum>:
                                                     (uint32_of_integer_ 
                                                      (C_341:
                                                      ((bw_and (integer_of_uint32 !mutable_x_2)) (858993459)))))))) 
                                           (integer_of_uint32 (C_340:
                                                              (JC_<somenum>:
                                                              (uint32_of_integer_ 
                                                               (C_339:
                                                               ((bw_and 
                                                                 (integer_of_uint32 
                                                                  (C_338:
                                                                  (JC_<somenum>:
                                                                  (uint32_of_integer_ 
                                                                   (C_337:
                                                                   (JC_<somenum>:
                                                                   ((computer_div_ 
                                                                    (integer_of_uint32 !mutable_x_2)) (4))))))))) (858993459))))))))))))) in
      void);
      (let jessie_<somenum> =
      (mutable_x_2 := (C_351:
                      (JC_<somenum>:
                      (uint32_of_integer_ (C_350:
                                          ((bw_and (integer_of_uint32 
                                                    (C_349:
                                                    (JC_<somenum>:
                                                    (uint32_of_integer_ 
                                                     (C_348:
                                                     ((add_int (integer_of_uint32 !mutable_x_2)) 
                                                      (integer_of_uint32 
                                                       (C_347:
                                                       (JC_<somenum>:
                                                       (uint32_of_integer_ 
                                                        (C_346:
                                                        (JC_<somenum>:
                                                        ((computer_div_ 
                                                          (integer_of_uint32 !mutable_x_2)) (16))))))))))))))) (252645135))))))) in
      void);
      (let jessie_<somenum> =
      (mutable_x_2 := (C_356:
                      (JC_<somenum>:
                      (uint32_of_integer_ (C_355:
                                          ((add_int (integer_of_uint32 !mutable_x_2)) 
                                           (integer_of_uint32 (C_354:
                                                              (JC_<somenum>:
                                                              (uint32_of_integer_ 
                                                               (C_353:
                                                               ((mul_int 
                                                                 (integer_of_uint32 !mutable_x_2)) (256))))))))))))) in
      void);
      (let jessie_<somenum> =
      (mutable_x_2 := (C_361:
                      (JC_<somenum>:
                      (uint32_of_integer_ (C_360:
                                          ((add_int (integer_of_uint32 !mutable_x_2)) 
                                           (integer_of_uint32 (C_359:
                                                              (JC_<somenum>:
                                                              (uint32_of_integer_ 
                                                               (C_358:
                                                               ((mul_int 
                                                                 (integer_of_uint32 !mutable_x_2)) (65536))))))))))))) in
      void);
      (let jessie_<somenum> =
      (__retres_1 := (C_364:
                     (JC_<somenum>:
                     (int32_of_integer_ (C_363:
                                        (JC_<somenum>:
                                        ((computer_div_ (integer_of_uint32 !mutable_x_2)) (16777216)))))))) in
      void); (return := !__retres_1); (raise Return) end))))))); absurd  end
   with Return -> !return end))) { true }

let snoob1_ensures_default =
 fun (x_4 : uint32) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let smallest_0 = ref (any_uint32 void) in
     (let ripple_0 = ref (any_uint32 void) in
     (let ones_0 = ref (any_uint32 void) in
     (let tmp = ref (any_int32 void) in
     (let __retres_3 = ref (any_uint32 void) in
     (C_391:
     (C_394:
     (C_397:
     (C_408:
     begin
       (let jessie_<somenum> =
       (smallest_0 := (C_390:
                      (safe_uint32_of_integer_ (C_389:
                                               ((bw_and (integer_of_uint32 x_4)) 
                                                (integer_of_uint32 (C_388:
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_387:
                                                                    (neg_int 
                                                                    (integer_of_uint32 x_4))))))))))) in
       void);
      (let jessie_<somenum> =
      (ripple_0 := (C_393:
                   (safe_uint32_of_integer_ (C_392:
                                            ((add_int (integer_of_uint32 x_4)) 
                                             (integer_of_uint32 !smallest_0)))))) in
      void);
      (let jessie_<somenum> =
      (ones_0 := (C_396:
                 (safe_uint32_of_integer_ (C_395:
                                          ((bw_xor (integer_of_uint32 x_4)) 
                                           (integer_of_uint32 !ripple_0)))))) in
      void);
      (let jessie_<somenum> =
      (C_399:
      (C_405:
      begin
        (let jessie_<somenum> =
        (tmp := (C_398: (let jessie_<somenum> = x_4 in (JC_<somenum>: (ntz jessie_<somenum>))))) in
        void);
       (assert
       { (JC_<somenum>: lt_int(add_int((2), integer_of_int32(tmp)), (32))) }; void);
       (ones_0 := (C_404:
                  (safe_uint32_of_integer_ (C_403:
                                           ((lsr (integer_of_uint32 !ones_0)) 
                                            (integer_of_int32 (C_402:
                                                              (safe_int32_of_integer_ 
                                                               (C_401:
                                                               ((add_int (2)) 
                                                                (integer_of_int32 !tmp)))))))))));
       !ones_0 end)) in void);
      (let jessie_<somenum> =
      (__retres_3 := (C_407:
                     (safe_uint32_of_integer_ (C_406:
                                              ((bw_or (integer_of_uint32 !ripple_0)) 
                                               (integer_of_uint32 !ones_0)))))) in
      void); (return := !__retres_3); (raise Return) end))))))))); absurd 
   end with Return -> !return end)) { (JC_<somenum>: true) }

let snoob1_safety =
 fun (x_4 : uint32) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let smallest_0 = ref (any_uint32 void) in
     (let ripple_0 = ref (any_uint32 void) in
     (let ones_0 = ref (any_uint32 void) in
     (let tmp = ref (any_int32 void) in
     (let __retres_3 = ref (any_uint32 void) in
     (C_391:
     (C_394:
     (C_397:
     (C_408:
     begin
       (let jessie_<somenum> =
       (smallest_0 := (C_390:
                      (JC_<somenum>:
                      (uint32_of_integer_ (C_389:
                                          ((bw_and (integer_of_uint32 x_4)) 
                                           (integer_of_uint32 (C_388:
                                                              (JC_<somenum>:
                                                              (uint32_of_integer_ 
                                                               (C_387:
                                                               (neg_int 
                                                                (integer_of_uint32 x_4))))))))))))) in
       void);
      (let jessie_<somenum> =
      (ripple_0 := (C_393:
                   (JC_<somenum>:
                   (uint32_of_integer_ (C_392:
                                       ((add_int (integer_of_uint32 x_4)) 
                                        (integer_of_uint32 !smallest_0))))))) in
      void);
      (let jessie_<somenum> =
      (ones_0 := (C_396:
                 (JC_<somenum>:
                 (uint32_of_integer_ (C_395:
                                     ((bw_xor (integer_of_uint32 x_4)) 
                                      (integer_of_uint32 !ripple_0))))))) in
      void);
      (let jessie_<somenum> =
      (C_399:
      (C_405:
      begin
        (let jessie_<somenum> =
        (tmp := (C_398:
                (let jessie_<somenum> = x_4 in (JC_<somenum>: (ntz_requires jessie_<somenum>))))) in
        void);
       [ { } unit reads tmp
         { (JC_<somenum>: lt_int(add_int((2), integer_of_int32(tmp)), (32))) } ];
       (ones_0 := (C_404:
                  (JC_<somenum>:
                  (uint32_of_integer_ (C_403:
                                      ((lsr (integer_of_uint32 !ones_0)) 
                                       (integer_of_int32 (C_402:
                                                         (JC_<somenum>:
                                                         (int32_of_integer_ 
                                                          (C_401:
                                                          ((add_int (2)) 
                                                           (integer_of_int32 !tmp)))))))))))));
       !ones_0 end)) in void);
      (let jessie_<somenum> =
      (__retres_3 := (C_407:
                     (JC_<somenum>:
                     (uint32_of_integer_ (C_406:
                                         ((bw_or (integer_of_uint32 !ripple_0)) 
                                          (integer_of_uint32 !ones_0))))))) in
      void); (return := !__retres_3); (raise Return) end))))))))); absurd 
   end with Return -> !return end)) { true }

let snoob2_ensures_default =
 fun (x_5 : uint32) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let smallest_1 = ref (any_uint32 void) in
     (let ripple_1 = ref (any_uint32 void) in
     (let ones_1 = ref (any_uint32 void) in
     (let tmp_0 = ref (any_int32 void) in
     (let __retres_4 = ref (any_uint32 void) in
     (C_414:
     (C_417:
     (C_420:
     (C_431:
     begin
       (let jessie_<somenum> =
       (smallest_1 := (C_413:
                      (safe_uint32_of_integer_ (C_412:
                                               ((bw_and (integer_of_uint32 x_5)) 
                                                (integer_of_uint32 (C_411:
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_410:
                                                                    (neg_int 
                                                                    (integer_of_uint32 x_5))))))))))) in
       void);
      (let jessie_<somenum> =
      (ripple_1 := (C_416:
                   (safe_uint32_of_integer_ (C_415:
                                            ((add_int (integer_of_uint32 x_5)) 
                                             (integer_of_uint32 !smallest_1)))))) in
      void);
      (let jessie_<somenum> =
      (ones_1 := (C_419:
                 (safe_uint32_of_integer_ (C_418:
                                          ((bw_xor (integer_of_uint32 x_5)) 
                                           (integer_of_uint32 !ripple_1)))))) in
      void);
      (let jessie_<somenum> =
      (C_422:
      (C_428:
      begin
        (let jessie_<somenum> =
        (tmp_0 := (C_421:
                  (let jessie_<somenum> = !smallest_1 in
                  (JC_<somenum>: (nlz jessie_<somenum>))))) in void);
       (assert
       { (JC_<somenum>: lt_int(sub_int((33), integer_of_int32(tmp_0)), (32))) };
       void);
       (ones_1 := (C_427:
                  (safe_uint32_of_integer_ (C_426:
                                           ((lsr (integer_of_uint32 !ones_1)) 
                                            (integer_of_int32 (C_425:
                                                              (safe_int32_of_integer_ 
                                                               (C_424:
                                                               ((sub_int (33)) 
                                                                (integer_of_int32 !tmp_0)))))))))));
       !ones_1 end)) in void);
      (let jessie_<somenum> =
      (__retres_4 := (C_430:
                     (safe_uint32_of_integer_ (C_429:
                                              ((bw_or (integer_of_uint32 !ripple_1)) 
                                               (integer_of_uint32 !ones_1)))))) in
      void); (return := !__retres_4); (raise Return) end))))))))); absurd 
   end with Return -> !return end)) { (JC_<somenum>: true) }

let snoob2_safety =
 fun (x_5 : uint32) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let smallest_1 = ref (any_uint32 void) in
     (let ripple_1 = ref (any_uint32 void) in
     (let ones_1 = ref (any_uint32 void) in
     (let tmp_0 = ref (any_int32 void) in
     (let __retres_4 = ref (any_uint32 void) in
     (C_414:
     (C_417:
     (C_420:
     (C_431:
     begin
       (let jessie_<somenum> =
       (smallest_1 := (C_413:
                      (JC_<somenum>:
                      (uint32_of_integer_ (C_412:
                                          ((bw_and (integer_of_uint32 x_5)) 
                                           (integer_of_uint32 (C_411:
                                                              (JC_<somenum>:
                                                              (uint32_of_integer_ 
                                                               (C_410:
                                                               (neg_int 
                                                                (integer_of_uint32 x_5))))))))))))) in
       void);
      (let jessie_<somenum> =
      (ripple_1 := (C_416:
                   (JC_<somenum>:
                   (uint32_of_integer_ (C_415:
                                       ((add_int (integer_of_uint32 x_5)) 
                                        (integer_of_uint32 !smallest_1))))))) in
      void);
      (let jessie_<somenum> =
      (ones_1 := (C_419:
                 (JC_<somenum>:
                 (uint32_of_integer_ (C_418:
                                     ((bw_xor (integer_of_uint32 x_5)) 
                                      (integer_of_uint32 !ripple_1))))))) in
      void);
      (let jessie_<somenum> =
      (C_422:
      (C_428:
      begin
        (let jessie_<somenum> =
        (tmp_0 := (C_421:
                  (let jessie_<somenum> = !smallest_1 in
                  (JC_<somenum>: (nlz_requires jessie_<somenum>))))) in void);
       [ { } unit reads tmp_0
         { (JC_<somenum>: lt_int(sub_int((33), integer_of_int32(tmp_0)), (32))) } ];
       (ones_1 := (C_427:
                  (JC_<somenum>:
                  (uint32_of_integer_ (C_426:
                                      ((lsr (integer_of_uint32 !ones_1)) 
                                       (integer_of_int32 (C_425:
                                                         (JC_<somenum>:
                                                         (int32_of_integer_ 
                                                          (C_424:
                                                          ((sub_int (33)) 
                                                           (integer_of_int32 !tmp_0)))))))))))));
       !ones_1 end)) in void);
      (let jessie_<somenum> =
      (__retres_4 := (C_430:
                     (JC_<somenum>:
                     (uint32_of_integer_ (C_429:
                                         ((bw_or (integer_of_uint32 !ripple_1)) 
                                          (integer_of_uint32 !ones_1))))))) in
      void); (return := !__retres_4); (raise Return) end))))))))); absurd 
   end with Return -> !return end)) { true }

let snoob3_ensures_default =
 fun (x_6 : uint32) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let smallest_2 = ref (any_uint32 void) in
     (let ripple_2 = ref (any_uint32 void) in
     (let ones_2 = ref (any_uint32 void) in
     (let tmp_1 = ref (any_int32 void) in
     (let __retres_5 = ref (any_uint32 void) in
     (C_437:
     (C_440:
     (C_443:
     (C_458:
     begin
       (let jessie_<somenum> =
       (smallest_2 := (C_436:
                      (safe_uint32_of_integer_ (C_435:
                                               ((bw_and (integer_of_uint32 x_6)) 
                                                (integer_of_uint32 (C_434:
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_433:
                                                                    (neg_int 
                                                                    (integer_of_uint32 x_6))))))))))) in
       void);
      (let jessie_<somenum> =
      (ripple_2 := (C_439:
                   (safe_uint32_of_integer_ (C_438:
                                            ((add_int (integer_of_uint32 x_6)) 
                                             (integer_of_uint32 !smallest_2)))))) in
      void);
      (let jessie_<somenum> =
      (ones_2 := (C_442:
                 (safe_uint32_of_integer_ (C_441:
                                          ((bw_xor (integer_of_uint32 x_6)) 
                                           (integer_of_uint32 !ripple_2)))))) in
      void);
      (let jessie_<somenum> =
      (C_445:
      (C_455:
      begin
        (let jessie_<somenum> =
        (tmp_1 := (C_444:
                  (let jessie_<somenum> = !ones_2 in (JC_<somenum>: (pop jessie_<somenum>))))) in
        void);
       (assert
       { (JC_<somenum>: ge_int(sub_int(integer_of_int32(tmp_1), (2)), (0))) };
       void);
       (assert
       { (JC_<somenum>: lt_int(sub_int(integer_of_int32(tmp_1), (2)), (32))) };
       void);
       (assert
       { (JC_<somenum>:
         le_int((1),
         asr((2147483647), sub_int(integer_of_int32(tmp_1), (2))))) }; void);
       (ones_2 := (C_454:
                  (safe_uint32_of_integer_ (C_453:
                                           ((sub_int (integer_of_int32 
                                                      (C_452:
                                                      (safe_int32_of_integer_ 
                                                       (C_451:
                                                       ((lsl (1)) (integer_of_int32 
                                                                   (C_450:
                                                                   (safe_int32_of_integer_ 
                                                                    (C_449:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !tmp_1)) (2)))))))))))) (1))))));
       !ones_2 end)) in void);
      (let jessie_<somenum> =
      (__retres_5 := (C_457:
                     (safe_uint32_of_integer_ (C_456:
                                              ((bw_or (integer_of_uint32 !ripple_2)) 
                                               (integer_of_uint32 !ones_2)))))) in
      void); (return := !__retres_5); (raise Return) end))))))))); absurd 
   end with Return -> !return end)) { (JC_<somenum>: true) }

let snoob3_safety =
 fun (x_6 : uint32) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let smallest_2 = ref (any_uint32 void) in
     (let ripple_2 = ref (any_uint32 void) in
     (let ones_2 = ref (any_uint32 void) in
     (let tmp_1 = ref (any_int32 void) in
     (let __retres_5 = ref (any_uint32 void) in
     (C_437:
     (C_440:
     (C_443:
     (C_458:
     begin
       (let jessie_<somenum> =
       (smallest_2 := (C_436:
                      (JC_<somenum>:
                      (uint32_of_integer_ (C_435:
                                          ((bw_and (integer_of_uint32 x_6)) 
                                           (integer_of_uint32 (C_434:
                                                              (JC_<somenum>:
                                                              (uint32_of_integer_ 
                                                               (C_433:
                                                               (neg_int 
                                                                (integer_of_uint32 x_6))))))))))))) in
       void);
      (let jessie_<somenum> =
      (ripple_2 := (C_439:
                   (JC_<somenum>:
                   (uint32_of_integer_ (C_438:
                                       ((add_int (integer_of_uint32 x_6)) 
                                        (integer_of_uint32 !smallest_2))))))) in
      void);
      (let jessie_<somenum> =
      (ones_2 := (C_442:
                 (JC_<somenum>:
                 (uint32_of_integer_ (C_441:
                                     ((bw_xor (integer_of_uint32 x_6)) 
                                      (integer_of_uint32 !ripple_2))))))) in
      void);
      (let jessie_<somenum> =
      (C_445:
      (C_455:
      begin
        (let jessie_<somenum> =
        (tmp_1 := (C_444:
                  (let jessie_<somenum> = !ones_2 in
                  (JC_<somenum>: (pop_requires jessie_<somenum>))))) in void);
       [ { } unit reads tmp_1
         { (JC_<somenum>: ge_int(sub_int(integer_of_int32(tmp_1), (2)), (0))) } ];
       [ { } unit reads tmp_1
         { (JC_<somenum>: lt_int(sub_int(integer_of_int32(tmp_1), (2)), (32))) } ];
       [ { } unit reads tmp_1
         { (JC_<somenum>:
           le_int((1),
           asr((2147483647), sub_int(integer_of_int32(tmp_1), (2))))) } ];
       (ones_2 := (C_454:
                  (JC_<somenum>:
                  (uint32_of_integer_ (C_453:
                                      ((sub_int (integer_of_int32 (C_452:
                                                                  (JC_<somenum>:
                                                                  (int32_of_integer_ 
                                                                   (C_451:
                                                                   ((lsl (1)) 
                                                                    (integer_of_int32 
                                                                    (C_450:
                                                                    (JC_<somenum>:
                                                                    (int32_of_integer_ 
                                                                    (C_449:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !tmp_1)) (2)))))))))))))) (1)))))));
       !ones_2 end)) in void);
      (let jessie_<somenum> =
      (__retres_5 := (C_457:
                     (JC_<somenum>:
                     (uint32_of_integer_ (C_456:
                                         ((bw_or (integer_of_uint32 !ripple_2)) 
                                          (integer_of_uint32 !ones_2))))))) in
      void); (return := !__retres_5); (raise Return) end))))))))); absurd 
   end with Return -> !return end)) { true }

let snoob4_ensures_default =
 fun (x_7_0 : int32) ->
  { (JC_<somenum>: true) }
  (let mutable_x_7_0 = ref x_7_0 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let y = ref (any_int32 void) in
     (let __retres_7 = ref (any_int32 void) in
     try
      (C_491:
      (C_496:
      begin
        (let jessie_<somenum> =
        (y := (C_490:
              (safe_int32_of_integer_ (C_489:
                                      ((add_int (integer_of_int32 !mutable_x_7_0)) 
                                       (integer_of_int32 (C_488:
                                                         (safe_int32_of_integer_ 
                                                          (C_487:
                                                          ((bw_and (integer_of_int32 !mutable_x_7_0)) 
                                                           (integer_of_int32 
                                                            (C_486:
                                                            (safe_int32_of_integer_ 
                                                             (C_485:
                                                             (neg_int 
                                                              (integer_of_int32 !mutable_x_7_0)))))))))))))))) in
        void);
       (let jessie_<somenum> =
       (mutable_x_7_0 := (C_495:
                         (safe_int32_of_integer_ (C_494:
                                                 ((bw_and (integer_of_int32 !mutable_x_7_0)) 
                                                  (integer_of_int32 (C_493:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_492:
                                                                    (bw_compl 
                                                                    (integer_of_int32 !y))))))))))) in
       void);
       (loop_2:
       while true do
       { invariant (JC_<somenum>: true)  }
        begin
          [ { } unit { true } ];
         try
          begin
            (let jessie_<somenum> =
            (C_501:
            begin
              (if ((eq_int_ (integer_of_int32 (C_498:
                                              (safe_int32_of_integer_ 
                                               (C_497:
                                               ((bw_and (integer_of_int32 !mutable_x_7_0)) (1))))))) (0))
              then void else (raise (Goto_while_0_break_exc void)));
             (mutable_x_7_0 := (C_500:
                               (safe_int32_of_integer_ (C_499:
                                                       (JC_<somenum>:
                                                       ((computer_div 
                                                         (integer_of_int32 !mutable_x_7_0)) (2)))))));
             !mutable_x_7_0 end) in void); (raise (Loop_continue_exc void))
          end with Loop_continue_exc jessie_<somenum> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_504:
      (C_507:
      begin
        void;
       (let jessie_<somenum> =
       (mutable_x_7_0 := (C_503:
                         (safe_int32_of_integer_ (C_502:
                                                 (JC_<somenum>:
                                                 ((computer_div (integer_of_int32 !mutable_x_7_0)) (2))))))) in
       void);
       (let jessie_<somenum> =
       (__retres_7 := (C_506:
                      (safe_int32_of_integer_ (C_505:
                                              ((bw_or (integer_of_int32 !y)) 
                                               (integer_of_int32 !mutable_x_7_0)))))) in
       void); (return := !__retres_7); (raise Return) end))) end)); absurd 
   end with Return -> !return end))) { (JC_<somenum>: true) }

let snoob4_safety =
 fun (x_7_0 : int32) ->
  { (JC_<somenum>: true) }
  (let mutable_x_7_0 = ref x_7_0 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let y = ref (any_int32 void) in
     (let __retres_7 = ref (any_int32 void) in
     try
      (C_491:
      (C_496:
      begin
        (let jessie_<somenum> =
        (y := (C_490:
              (JC_<somenum>:
              (int32_of_integer_ (C_489:
                                 ((add_int (integer_of_int32 !mutable_x_7_0)) 
                                  (integer_of_int32 (C_488:
                                                    (JC_<somenum>:
                                                    (int32_of_integer_ 
                                                     (C_487:
                                                     ((bw_and (integer_of_int32 !mutable_x_7_0)) 
                                                      (integer_of_int32 
                                                       (C_486:
                                                       (JC_<somenum>:
                                                       (int32_of_integer_ 
                                                        (C_485:
                                                        (neg_int (integer_of_int32 !mutable_x_7_0))))))))))))))))))) in
        void);
       (let jessie_<somenum> =
       (mutable_x_7_0 := (C_495:
                         (JC_<somenum>:
                         (int32_of_integer_ (C_494:
                                            ((bw_and (integer_of_int32 !mutable_x_7_0)) 
                                             (integer_of_int32 (C_493:
                                                               (JC_<somenum>:
                                                               (int32_of_integer_ 
                                                                (C_492:
                                                                (bw_compl 
                                                                 (integer_of_int32 !y))))))))))))) in
       void);
       (loop_1:
       while true do
       { invariant (JC_<somenum>: true) variant (0) }
        begin
          [ { } unit { true } ];
         try
          begin
            (let jessie_<somenum> =
            (C_501:
            begin
              (if ((eq_int_ (integer_of_int32 (C_498:
                                              (JC_<somenum>:
                                              (int32_of_integer_ (C_497:
                                                                 ((bw_and 
                                                                   (integer_of_int32 !mutable_x_7_0)) (1)))))))) (0))
              then void else (raise (Goto_while_0_break_exc void)));
             (mutable_x_7_0 := (C_500:
                               (JC_<somenum>:
                               (int32_of_integer_ (C_499:
                                                  (JC_<somenum>:
                                                  ((computer_div_ (integer_of_int32 !mutable_x_7_0)) (2))))))));
             !mutable_x_7_0 end) in void); (raise (Loop_continue_exc void))
          end with Loop_continue_exc jessie_<somenum> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_504:
      (C_507:
      begin
        void;
       (let jessie_<somenum> =
       (mutable_x_7_0 := (C_503:
                         (JC_<somenum>:
                         (int32_of_integer_ (C_502:
                                            (JC_<somenum>:
                                            ((computer_div_ (integer_of_int32 !mutable_x_7_0)) (2)))))))) in
       void);
       (let jessie_<somenum> =
       (__retres_7 := (C_506:
                      (JC_<somenum>:
                      (int32_of_integer_ (C_505:
                                         ((bw_or (integer_of_int32 !y)) 
                                          (integer_of_int32 !mutable_x_7_0))))))) in
       void); (return := !__retres_7); (raise Return) end))) end)); absurd 
   end with Return -> !return end))) { true }

let snoob_ensures_default =
 fun (x_3 : uint32) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let smallest = ref (any_uint32 void) in
     (let ripple = ref (any_uint32 void) in
     (let ones = ref (any_uint32 void) in
     (let __retres_2 = ref (any_uint32 void) in
     (C_371:
     (C_374:
     (C_377:
     (C_382:
     (C_385:
     begin
       (let jessie_<somenum> =
       (smallest := (C_370:
                    (safe_uint32_of_integer_ (C_369:
                                             ((bw_and (integer_of_uint32 x_3)) 
                                              (integer_of_uint32 (C_368:
                                                                 (safe_uint32_of_integer_ 
                                                                  (C_367:
                                                                  (neg_int 
                                                                   (integer_of_uint32 x_3))))))))))) in
       void);
      (let jessie_<somenum> =
      (ripple := (C_373:
                 (safe_uint32_of_integer_ (C_372:
                                          ((add_int (integer_of_uint32 x_3)) 
                                           (integer_of_uint32 !smallest)))))) in
      void);
      (let jessie_<somenum> =
      (ones := (C_376:
               (safe_uint32_of_integer_ (C_375:
                                        ((bw_xor (integer_of_uint32 x_3)) 
                                         (integer_of_uint32 !ripple)))))) in
      void);
      (let jessie_<somenum> =
      (ones := (C_381:
               (safe_uint32_of_integer_ (C_380:
                                        (JC_<somenum>:
                                        ((computer_div (integer_of_uint32 
                                                        (C_379:
                                                        (safe_uint32_of_integer_ 
                                                         (C_378:
                                                         (JC_<somenum>:
                                                         ((computer_div 
                                                           (integer_of_uint32 !ones)) (4)))))))) 
                                         (integer_of_uint32 !smallest))))))) in
      void);
      (let jessie_<somenum> =
      (__retres_2 := (C_384:
                     (safe_uint32_of_integer_ (C_383:
                                              ((bw_or (integer_of_uint32 !ripple)) 
                                               (integer_of_uint32 !ones)))))) in
      void); (return := !__retres_2); (raise Return) end))))))))); absurd 
   end with Return -> !return end)) { (JC_<somenum>: true) }

let snoob_safety =
 fun (x_3 : uint32) ->
  { (JC_<somenum>: true) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let smallest = ref (any_uint32 void) in
     (let ripple = ref (any_uint32 void) in
     (let ones = ref (any_uint32 void) in
     (let __retres_2 = ref (any_uint32 void) in
     (C_371:
     (C_374:
     (C_377:
     (C_382:
     (C_385:
     begin
       (let jessie_<somenum> =
       (smallest := (C_370:
                    (JC_<somenum>:
                    (uint32_of_integer_ (C_369:
                                        ((bw_and (integer_of_uint32 x_3)) 
                                         (integer_of_uint32 (C_368:
                                                            (JC_<somenum>:
                                                            (uint32_of_integer_ 
                                                             (C_367:
                                                             (neg_int 
                                                              (integer_of_uint32 x_3))))))))))))) in
       void);
      (let jessie_<somenum> =
      (ripple := (C_373:
                 (JC_<somenum>:
                 (uint32_of_integer_ (C_372:
                                     ((add_int (integer_of_uint32 x_3)) 
                                      (integer_of_uint32 !smallest))))))) in
      void);
      (let jessie_<somenum> =
      (ones := (C_376:
               (JC_<somenum>:
               (uint32_of_integer_ (C_375:
                                   ((bw_xor (integer_of_uint32 x_3)) 
                                    (integer_of_uint32 !ripple))))))) in
      void);
      (let jessie_<somenum> =
      (ones := (C_381:
               (JC_<somenum>:
               (uint32_of_integer_ (C_380:
                                   (JC_<somenum>:
                                   ((computer_div_ (integer_of_uint32 
                                                    (C_379:
                                                    (JC_<somenum>:
                                                    (uint32_of_integer_ 
                                                     (C_378:
                                                     (JC_<somenum>:
                                                     ((computer_div_ 
                                                       (integer_of_uint32 !ones)) (4))))))))) 
                                    (integer_of_uint32 !smallest)))))))) in
      void);
      (let jessie_<somenum> =
      (__retres_2 := (C_384:
                     (JC_<somenum>:
                     (uint32_of_integer_ (C_383:
                                         ((bw_or (integer_of_uint32 !ripple)) 
                                          (integer_of_uint32 !ones))))))) in
      void); (return := !__retres_2); (raise Return) end))))))))); absurd 
   end with Return -> !return end)) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C hd_snoob.jessie --quiet -f hd_snoob.makefile project
why --project [...] why/hd_snoob.why
<project name="hd_snoob" context="why/hd_snoob_ctx.why">
  <function name="Function snoob4">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/hd_snoob_po171.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "132" begin = "20" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po172.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "132" begin = "20" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po173.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "132" begin = "16" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po174.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "132" begin = "16" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po175.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "132" begin = "11" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po176.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "132" begin = "11" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po177.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "133" begin = "11" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po178.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "133" begin = "11" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po179.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "133" begin = "7" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po180.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "133" begin = "7" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po181.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "134" begin = "11" end = "16"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po182.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "134" begin = "11" end = "16"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po183.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "134" begin = "28" end = "34"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po184.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "134" begin = "28" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po185.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "134" begin = "28" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po186.why">
      <location file = "why/hd_snoob.why" line = "5016" begin = "43" end = "44"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/hd_snoob_po187.why">
      <location file = "why/hd_snoob.why" line = "5016" begin = "43" end = "44"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/hd_snoob_po188.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "135" begin = "7" end = "13"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po189.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "135" begin = "7" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po190.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "135" begin = "7" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po191.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "136" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po192.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "136" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function snoob3">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/hd_snoob_po152.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "96" begin = "11" end = "63"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/hd_snoob_po153.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "96" begin = "11" end = "63"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/hd_snoob_po154.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "96" begin = "11" end = "63"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/hd_snoob_po155.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "93" begin = "18" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po156.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "93" begin = "18" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po157.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "93" begin = "14" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po158.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "93" begin = "14" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po159.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "94" begin = "12" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po160.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "94" begin = "12" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po161.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "95" begin = "10" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po162.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "95" begin = "10" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po163.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "97" begin = "11" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po164.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "97" begin = "11" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po165.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "96" begin = "11" end = "63"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po166.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "96" begin = "11" end = "63"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po167.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "96" begin = "10" end = "68"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po168.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "96" begin = "10" end = "68"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po169.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "98" begin = "10" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po170.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "98" begin = "10" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function snoob2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/hd_snoob_po137.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "84" begin = "10" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/hd_snoob_po138.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "81" begin = "18" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po139.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "81" begin = "18" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po140.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "81" begin = "14" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po141.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "81" begin = "14" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po142.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "82" begin = "12" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po143.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "82" begin = "12" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po144.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "83" begin = "10" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po145.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "83" begin = "10" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po146.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "84" begin = "17" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po147.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "84" begin = "17" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po148.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "84" begin = "10" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po149.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "84" begin = "10" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po150.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "85" begin = "10" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po151.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "85" begin = "10" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function snoob1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/hd_snoob_po122.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "72" begin = "10" end = "30"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/hd_snoob_po123.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "69" begin = "18" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po124.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "69" begin = "18" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po125.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "69" begin = "14" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po126.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "69" begin = "14" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po127.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "70" begin = "12" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po128.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "70" begin = "12" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po129.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "71" begin = "10" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po130.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "71" begin = "10" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po131.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "72" begin = "19" end = "29"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po132.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "72" begin = "19" end = "29"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po133.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "72" begin = "10" end = "30"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po134.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "72" begin = "10" end = "30"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po135.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "73" begin = "10" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po136.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "73" begin = "10" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function snoob">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/hd_snoob_po193.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "56" begin = "18" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po194.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "56" begin = "18" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po195.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "56" begin = "14" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po196.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "56" begin = "14" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po197.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "57" begin = "12" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po198.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "57" begin = "12" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po199.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "58" begin = "10" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po200.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "58" begin = "10" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po201.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "59" begin = "11" end = "20"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po202.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "59" begin = "11" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po203.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "59" begin = "11" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po204.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "59" begin = "10" end = "30"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po205.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "59" begin = "10" end = "30"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po206.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "59" begin = "10" end = "30"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po207.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "60" begin = "10" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po208.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "60" begin = "10" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function pop">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/hd_snoob_po88.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "38" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po89.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "38" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po90.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "38" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po91.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "38" begin = "12" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po92.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "38" begin = "12" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po93.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "38" begin = "7" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po94.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "38" begin = "7" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po95.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "39" begin = "8" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po96.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "39" begin = "8" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po97.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "39" begin = "28" end = "34"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po98.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "39" begin = "28" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po99.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "39" begin = "28" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po100.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "39" begin = "27" end = "48"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po101.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "39" begin = "27" end = "48"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po102.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "39" begin = "7" end = "49"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po103.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "39" begin = "7" end = "49"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po104.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "40" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po105.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "40" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po106.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "40" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po107.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "40" begin = "8" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po108.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "40" begin = "8" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po109.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "40" begin = "7" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po110.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "40" begin = "7" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po111.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "41" begin = "12" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po112.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "41" begin = "12" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po113.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "41" begin = "7" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po114.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "41" begin = "7" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po115.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "42" begin = "12" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po116.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "42" begin = "12" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po117.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "42" begin = "7" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po118.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "42" begin = "7" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po119.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "43" begin = "10" end = "17"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po120.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "43" begin = "10" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po121.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "43" begin = "10" end = "17"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function ntz">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/hd_snoob_po54.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "17" begin = "8" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po55.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "17" begin = "8" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po56.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "17" begin = "35" end = "40"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po57.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "17" begin = "35" end = "40"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po58.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "17" begin = "46" end = "52"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po59.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "17" begin = "46" end = "52"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po60.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "17" begin = "46" end = "52"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po61.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "18" begin = "8" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po62.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "18" begin = "8" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po63.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "18" begin = "35" end = "40"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po64.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "18" begin = "35" end = "40"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po65.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "18" begin = "46" end = "52"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po66.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "18" begin = "46" end = "52"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po67.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "18" begin = "46" end = "52"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po68.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "19" begin = "8" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po69.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "19" begin = "8" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po70.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "19" begin = "35" end = "40"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po71.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "19" begin = "35" end = "40"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po72.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "19" begin = "46" end = "52"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po73.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "19" begin = "46" end = "52"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po74.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "19" begin = "46" end = "52"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po75.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "20" begin = "8" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po76.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "20" begin = "8" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po77.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "20" begin = "35" end = "40"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po78.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "20" begin = "35" end = "40"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po79.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "20" begin = "46" end = "52"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po80.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "20" begin = "46" end = "52"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po81.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "20" begin = "46" end = "52"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po82.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "21" begin = "10" end = "11"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po83.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "21" begin = "10" end = "11"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po84.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "21" begin = "15" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po85.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "21" begin = "15" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po86.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "21" begin = "10" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po87.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "21" begin = "10" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function nlz">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/hd_snoob_po36.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "29" begin = "29" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po37.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "29" begin = "29" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po38.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "29" begin = "40" end = "46"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po39.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "29" begin = "40" end = "46"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po40.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "30" begin = "29" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po41.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "30" begin = "29" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po42.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "30" begin = "40" end = "46"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po43.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "30" begin = "40" end = "46"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po44.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "31" begin = "29" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po45.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "31" begin = "29" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po46.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "31" begin = "40" end = "46"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po47.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "31" begin = "40" end = "46"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po48.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "32" begin = "29" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po49.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "32" begin = "29" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po50.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "32" begin = "40" end = "46"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po51.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "32" begin = "40" end = "46"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po52.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "33" begin = "29" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po53.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "33" begin = "29" end = "34"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function next_set_of_n_elements">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/hd_snoob_po16.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "108" begin = "19" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po17.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "108" begin = "19" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po18.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "108" begin = "15" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po19.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "108" begin = "15" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po20.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "109" begin = "12" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po21.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "109" begin = "12" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po22.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "110" begin = "28" end = "35"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po23.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "110" begin = "28" end = "35"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po24.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "110" begin = "19" end = "35"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po25.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "110" begin = "19" end = "35"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po26.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "111" begin = "12" end = "33"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po27.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "111" begin = "12" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po28.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "111" begin = "12" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po29.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "111" begin = "11" end = "39"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/hd_snoob_po30.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "111" begin = "11" end = "39"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po31.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "111" begin = "11" end = "39"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po32.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "111" begin = "10" end = "44"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po33.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "111" begin = "10" end = "44"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po34.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "112" begin = "10" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po35.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "112" begin = "10" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function main">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/hd_snoob_po1.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "156" begin = "8" end = "14"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/hd_snoob_po2.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "156" begin = "8" end = "14"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/hd_snoob_po3.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "156" begin = "8" end = "14"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/hd_snoob_po4.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "148" begin = "14" end = "21"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/hd_snoob_po5.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "148" begin = "14" end = "21"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/hd_snoob_po6.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "156" begin = "8" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po7.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "156" begin = "8" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po8.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "156" begin = "7" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po9.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "156" begin = "7" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po10.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "168" begin = "17" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po11.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "168" begin = "17" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po12.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "168" begin = "10" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po13.why">
      <location file = "PPCHOME/tests/jessie/hd_snoob.c" line = "168" begin = "10" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/hd_snoob_po14.why">
      <location file = "why/hd_snoob.why" line = "3576" begin = "46" end = "47"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/hd_snoob_po15.why">
      <location file = "why/hd_snoob.why" line = "3576" begin = "46" end = "47"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type mode =
  | nearest_even
  | to_zero
  | up
  | down
  | nearest_away

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom exact_round_double_for_doubles:
  (forall x:double.
    (forall m:mode. (round_double(m, double_value(x)) = double_value(x))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom exact_round_single_for_singles:
  (forall x:single.
    (forall m:mode. (round_single(m, single_value(x)) = single_value(x))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

axiom single_value_is_bounded:
  (forall x:single. (abs_real(single_value(x)) <= max_single))

axiom double_value_is_bounded:
  (forall x:double. (abs_real(double_value(x)) <= max_double))

predicate single_of_real_post(m: mode, x: real, res: single) =
  ((single_value(res) = round_single(m, x)) and
   ((single_exact(res) = x) and (single_model(res) = x)))

predicate single_of_double_post(m: mode, x: double, res: single) =
  ((single_value(res) = round_single(m, double_value(x))) and
   ((single_exact(res) = double_exact(x)) and
    (single_model(res) = double_model(x))))

predicate add_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) + single_value(y)))) and
   ((single_exact(res) = (single_exact(x) + single_exact(y))) and
    (single_model(res) = (single_model(x) + single_model(y)))))

predicate sub_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) - single_value(y)))) and
   ((single_exact(res) = (single_exact(x) - single_exact(y))) and
    (single_model(res) = (single_model(x) - single_model(y)))))

predicate mul_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) * single_value(y)))) and
   ((single_exact(res) = (single_exact(x) * single_exact(y))) and
    (single_model(res) = (single_model(x) * single_model(y)))))

predicate div_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m, div_real(single_value(x),
   single_value(y)))) and
   ((single_exact(res) = div_real(single_exact(x), single_exact(y))) and
    (single_model(res) = div_real(single_model(x), single_model(y)))))

predicate sqrt_single_post(m: mode, x: single, res: single) =
  ((single_value(res) = round_single(m, sqrt_real(single_value(x)))) and
   ((single_exact(res) = sqrt_real(single_exact(x))) and
    (single_model(res) = sqrt_real(single_model(x)))))

predicate neg_single_post(x: single, res: single) =
  ((single_value(res) = (-single_value(x))) and
   ((single_exact(res) = (-single_exact(x))) and
    (single_model(res) = (-single_model(x)))))

predicate abs_single_post(x: single, res: single) =
  ((single_value(res) = abs_real(single_value(x))) and
   ((single_exact(res) = abs_real(single_exact(x))) and
    (single_model(res) = abs_real(single_model(x)))))

predicate double_of_real_post(m: mode, x: real, res: double) =
  ((double_value(res) = round_double(m, x)) and
   ((double_exact(res) = x) and (double_model(res) = x)))

predicate double_of_single_post(x: single, res: double) =
  ((double_value(res) = single_value(x)) and
   ((double_exact(res) = single_exact(x)) and
    (double_model(res) = single_model(x))))

predicate add_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) + double_value(y)))) and
   ((double_exact(res) = (double_exact(x) + double_exact(y))) and
    (double_model(res) = (double_model(x) + double_model(y)))))

predicate sub_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) - double_value(y)))) and
   ((double_exact(res) = (double_exact(x) - double_exact(y))) and
    (double_model(res) = (double_model(x) - double_model(y)))))

predicate mul_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) * double_value(y)))) and
   ((double_exact(res) = (double_exact(x) * double_exact(y))) and
    (double_model(res) = (double_model(x) * double_model(y)))))

predicate div_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m, div_real(double_value(x),
   double_value(y)))) and
   ((double_exact(res) = div_real(double_exact(x), double_exact(y))) and
    (double_model(res) = div_real(double_model(x), double_model(y)))))

predicate sqrt_double_post(m: mode, x: double, res: double) =
  ((double_value(res) = round_double(m, sqrt_real(double_value(x)))) and
   ((double_exact(res) = sqrt_real(double_exact(x))) and
    (double_model(res) = sqrt_real(double_model(x)))))

predicate neg_double_post(x: double, res: double) =
  ((double_value(res) = (-double_value(x))) and
   ((double_exact(res) = (-double_exact(x))) and
    (double_model(res) = (-double_model(x)))))

predicate abs_double_post(x: double, res: double) =
  ((double_value(res) = abs_real(double_value(x))) and
   ((double_exact(res) = abs_real(double_exact(x))) and
    (double_model(res) = abs_real(double_model(x)))))

type charP

type char_xP

type int32

type int64

type int8

type padding

type uint16

type uint32

type uint8

type unsigned_charP

type unsigned_shortP

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic char_xP_tag : char_xP tag_id

axiom char_xP_int: (int_of_tag(char_xP_tag) = 1)

logic char_xP_of_pointer_address : unit pointer -> char_xP pointer

axiom char_xP_of_pointer_address_of_pointer_addr:
  (forall p:char_xP pointer.
    (p = char_xP_of_pointer_address(pointer_address(p))))

axiom char_xP_parenttag_bottom: parenttag(char_xP_tag, bottom_tag)

axiom char_xP_tags:
  (forall x:char_xP pointer.
    (forall char_xP_tag_table:char_xP tag_table.
      instanceof(char_xP_tag_table, x, char_xP_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int64 : int64 -> int

predicate eq_int64(x: int64, y: int64) =
  (integer_of_int64(x) = integer_of_int64(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint16 : uint16 -> int

predicate eq_uint16(x: uint16, y: uint16) =
  (integer_of_uint16(x) = integer_of_uint16(y))

logic integer_of_uint32 : uint32 -> int

predicate eq_uint32(x: uint32, y: uint32) =
  (integer_of_uint32(x) = integer_of_uint32(y))

logic integer_of_uint8 : uint8 -> int

predicate eq_uint8(x: uint8, y: uint8) =
  (integer_of_uint8(x) = integer_of_uint8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32 [(integer_of_int32(x) = integer_of_int32(y))].
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int64_of_integer : int -> int64

axiom int64_coerce:
  (forall x:int.
    ((((-9223372036854775808) <= x) and (x <= 9223372036854775807)) ->
     (integer_of_int64(int64_of_integer(x)) = x)))

axiom int64_extensionality:
  (forall x:int64.
    (forall y:int64 [(integer_of_int64(x) = integer_of_int64(y))].
      ((integer_of_int64(x) = integer_of_int64(y)) -> (x = y))))

axiom int64_range:
  (forall x:int64.
    (((-9223372036854775808) <= integer_of_int64(x)) and
     (integer_of_int64(x) <= 9223372036854775807)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8 [(integer_of_int8(x) = integer_of_int8(y))].
      ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_char_xP(p: char_xP pointer, a: int,
  char_xP_alloc_table: char_xP alloc_table) =
  (offset_min(char_xP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_shortP(p: unsigned_shortP pointer,
  a: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  (offset_min(unsigned_shortP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

function maximum(i_28: int, j_3: int) : int = ite(lt_int_bool(i_28, j_3),
  j_3, i_28)

logic memchr : charP pointer, int, int, (charP, int8) memory -> bool

logic memcmp : charP pointer, charP pointer, int, (charP, int8) memory,
(charP, int8) memory -> int

logic memset : charP pointer, int, int, (charP, int8) memory -> bool

function minimum(i_27: int, j_2: int) : int = ite(lt_int_bool(i_27, j_2),
  i_27, j_2)

axiom no_assign_memchr_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s_3_at_L:(charP, int8) memory.
          (forall n_2:int.
            (forall c:int.
              (forall s_0:charP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s_0), 0,
                  (n_2 - 1))) and not_assigns(tmpalloc, charP_charM_s_3_at_L,
                  tmpmem, tmp)) ->
                 (memchr(s_0, c, n_2, charP_charM_s_3_at_L) = memchr(s_0, c,
                 n_2, tmpmem))))))))))

axiom no_assign_memcmp_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_1_at_L:(charP, int8) memory.
          (forall charP_charM_s2_2_at_L:(charP, int8) memory.
            (forall n:int.
              (forall s2_1:charP pointer.
                (forall s1_1:charP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s2_1), 0,
                    (n - 1))) and not_assigns(tmpalloc,
                    charP_charM_s2_2_at_L, tmpmem, tmp)) ->
                   (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
                   charP_charM_s1_1_at_L) = memcmp(s1_1, s2_1, n, tmpmem,
                   charP_charM_s1_1_at_L)))))))))))

axiom no_assign_memcmp_1:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_1_at_L:(charP, int8) memory.
          (forall charP_charM_s2_2_at_L:(charP, int8) memory.
            (forall n:int.
              (forall s2_1:charP pointer.
                (forall s1_1:charP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s1_1), 0,
                    (n - 1))) and not_assigns(tmpalloc,
                    charP_charM_s1_1_at_L, tmpmem, tmp)) ->
                   (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
                   charP_charM_s1_1_at_L) = memcmp(s1_1, s2_1, n,
                   charP_charM_s2_2_at_L, tmpmem)))))))))))

axiom no_assign_memset_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s_1_4_at_L:(charP, int8) memory.
          (forall n_4:int.
            (forall c_1:int.
              (forall s_1:charP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s_1), 0,
                  (n_4 - 1))) and not_assigns(tmpalloc,
                  charP_charM_s_1_4_at_L, tmpmem, tmp)) ->
                 (memset(s_1, c_1, n_4, charP_charM_s_1_4_at_L) = memset(s_1,
                 c_1, n_4, tmpmem))))))))))

logic strlen : charP pointer, (charP, int8) memory -> int

logic strchr : charP pointer, int, (charP, int8) memory -> bool

axiom no_assign_strchr_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s_15_10_at_L:(charP, int8) memory.
          (forall c_3:int.
            (forall s_15:charP pointer.
              ((pset_disjoint(tmp, pset_range(pset_singleton(s_15), 0,
                strlen(s_15, charP_charM_s_15_10_at_L))) and
                not_assigns(tmpalloc, charP_charM_s_15_10_at_L, tmpmem, tmp)) ->
               (strchr(s_15, c_3, charP_charM_s_15_10_at_L) = strchr(s_15,
               c_3, tmpmem)))))))))

logic strcmp : charP pointer, charP pointer, (charP, int8) memory, (charP,
int8) memory -> int

axiom no_assign_strcmp_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
          (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
            (forall s2_6:charP pointer.
              (forall s1_6:charP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s2_6), 0,
                  strlen(s2_6, charP_charM_s2_6_7_at_L))) and
                  not_assigns(tmpalloc, charP_charM_s2_6_7_at_L, tmpmem, tmp)) ->
                 (strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L,
                 charP_charM_s1_6_6_at_L) = strcmp(s1_6, s2_6, tmpmem,
                 charP_charM_s1_6_6_at_L))))))))))

axiom no_assign_strcmp_1:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
          (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
            (forall s2_6:charP pointer.
              (forall s1_6:charP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s1_6), 0,
                  strlen(s1_6, charP_charM_s1_6_6_at_L))) and
                  not_assigns(tmpalloc, charP_charM_s1_6_6_at_L, tmpmem, tmp)) ->
                 (strcmp(s1_6, s2_6, charP_charM_s2_6_7_at_L,
                 charP_charM_s1_6_6_at_L) = strcmp(s1_6, s2_6,
                 charP_charM_s2_6_7_at_L, tmpmem))))))))))

axiom no_assign_strlen_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
          (forall s_3:charP pointer.
            ((pset_disjoint(tmp, pset_range_right(pset_singleton(s_3),
              0)) and not_assigns(tmpalloc, charP_charM_s_3_5_at_L, tmpmem,
              tmp)) ->
             (strlen(s_3, charP_charM_s_3_5_at_L) = strlen(s_3, tmpmem))))))))

logic strncmp : charP pointer, charP pointer, int, (charP, int8) memory,
(charP, int8) memory -> int

axiom no_assign_strncmp_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
          (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
            (forall n_10:int.
              (forall s2_9:charP pointer.
                (forall s1_9:charP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s2_9), 0,
                    (n_10 - 1))) and not_assigns(tmpalloc,
                    charP_charM_s2_9_9_at_L, tmpmem, tmp)) ->
                   (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_9_at_L,
                   charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                   tmpmem, charP_charM_s1_9_8_at_L)))))))))))

axiom no_assign_strncmp_1:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
          (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
            (forall n_10:int.
              (forall s2_9:charP pointer.
                (forall s1_9:charP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s1_9), 0,
                    (n_10 - 1))) and not_assigns(tmpalloc,
                    charP_charM_s1_9_8_at_L, tmpmem, tmp)) ->
                   (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_9_at_L,
                   charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                   charP_charM_s2_9_9_at_L, tmpmem)))))))))))

logic wcslen : unsigned_shortP pointer, (unsigned_shortP,
uint16) memory -> int

logic wcscmp : unsigned_shortP pointer, unsigned_shortP pointer,
(unsigned_shortP, uint16) memory, (unsigned_shortP, uint16) memory -> int

axiom no_assign_wcscmp_0:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:(unsigned_shortP,
          uint16) memory.
          (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:(unsigned_shortP,
            uint16) memory.
            (forall s2_11:unsigned_shortP pointer.
              (forall s1_11:unsigned_shortP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s2_11), 0,
                  wcslen(s2_11,
                  unsigned_shortP_unsigned_shortM_s2_11_13_at_L))) and
                  not_assigns(tmpalloc,
                  unsigned_shortP_unsigned_shortM_s2_11_13_at_L, tmpmem, tmp)) ->
                 (wcscmp(s1_11, s2_11,
                 unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                 unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
                 s2_11, tmpmem,
                 unsigned_shortP_unsigned_shortM_s1_11_12_at_L))))))))))

axiom no_assign_wcscmp_1:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:(unsigned_shortP,
          uint16) memory.
          (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:(unsigned_shortP,
            uint16) memory.
            (forall s2_11:unsigned_shortP pointer.
              (forall s1_11:unsigned_shortP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s1_11), 0,
                  wcslen(s1_11,
                  unsigned_shortP_unsigned_shortM_s1_11_12_at_L))) and
                  not_assigns(tmpalloc,
                  unsigned_shortP_unsigned_shortM_s1_11_12_at_L, tmpmem, tmp)) ->
                 (wcscmp(s1_11, s2_11,
                 unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                 unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
                 s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
                 tmpmem))))))))))

axiom no_assign_wcslen_0:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
          uint16) memory.
          (forall s_17:unsigned_shortP pointer.
            ((pset_disjoint(tmp, pset_range_right(pset_singleton(s_17),
              0)) and not_assigns(tmpalloc,
              unsigned_shortP_unsigned_shortM_s_17_11_at_L, tmpmem, tmp)) ->
             (wcslen(s_17,
             unsigned_shortP_unsigned_shortM_s_17_11_at_L) = wcslen(s_17,
             tmpmem))))))))

logic wcsncmp : unsigned_shortP pointer, unsigned_shortP pointer, int,
(unsigned_shortP, uint16) memory, (unsigned_shortP, uint16) memory -> int

axiom no_assign_wcsncmp_0:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:(unsigned_shortP,
          uint16) memory.
          (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:(unsigned_shortP,
            uint16) memory.
            (forall n_12:int.
              (forall s2_13:unsigned_shortP pointer.
                (forall s1_13:unsigned_shortP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s2_13), 0,
                    (n_12 - 1))) and not_assigns(tmpalloc,
                    unsigned_shortP_unsigned_shortM_s2_13_15_at_L, tmpmem,
                    tmp)) ->
                   (wcsncmp(s1_13, s2_13, n_12,
                   unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                   unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                   s2_13, n_12, tmpmem,
                   unsigned_shortP_unsigned_shortM_s1_13_14_at_L)))))))))))

axiom no_assign_wcsncmp_1:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:(unsigned_shortP,
          uint16) memory.
          (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:(unsigned_shortP,
            uint16) memory.
            (forall n_12:int.
              (forall s2_13:unsigned_shortP pointer.
                (forall s1_13:unsigned_shortP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s1_13), 0,
                    (n_12 - 1))) and not_assigns(tmpalloc,
                    unsigned_shortP_unsigned_shortM_s1_13_14_at_L, tmpmem,
                    tmp)) ->
                   (wcsncmp(s1_13, s2_13, n_12,
                   unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                   unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                   s2_13, n_12,
                   unsigned_shortP_unsigned_shortM_s2_13_15_at_L, tmpmem)))))))))))

axiom no_update_memchr_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s_3_at_L:(charP, int8) memory.
        (forall n_2:int.
          (forall c:int.
            (forall s_0:charP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s_0), 0,
               (n_2 - 1)))) -> (memchr(s_0, c, n_2,
               charP_charM_s_3_at_L) = memchr(s_0, c, n_2,
               store(charP_charM_s_3_at_L, tmp, tmpval))))))))))

axiom no_update_memcmp_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_1_at_L:(charP, int8) memory.
        (forall charP_charM_s2_2_at_L:(charP, int8) memory.
          (forall n:int.
            (forall s2_1:charP pointer.
              (forall s1_1:charP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s2_1), 0,
                 (n - 1)))) -> (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
                 charP_charM_s1_1_at_L) = memcmp(s1_1, s2_1, n,
                 store(charP_charM_s2_2_at_L, tmp, tmpval),
                 charP_charM_s1_1_at_L))))))))))

axiom no_update_memcmp_1:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_1_at_L:(charP, int8) memory.
        (forall charP_charM_s2_2_at_L:(charP, int8) memory.
          (forall n:int.
            (forall s2_1:charP pointer.
              (forall s1_1:charP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s1_1), 0,
                 (n - 1)))) -> (memcmp(s1_1, s2_1, n, charP_charM_s2_2_at_L,
                 charP_charM_s1_1_at_L) = memcmp(s1_1, s2_1, n,
                 charP_charM_s2_2_at_L, store(charP_charM_s1_1_at_L, tmp,
                 tmpval)))))))))))

axiom no_update_memset_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s_1_4_at_L:(charP, int8) memory.
        (forall n_4:int.
          (forall c_1:int.
            (forall s_1:charP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s_1), 0,
               (n_4 - 1)))) -> (memset(s_1, c_1, n_4,
               charP_charM_s_1_4_at_L) = memset(s_1, c_1, n_4,
               store(charP_charM_s_1_4_at_L, tmp, tmpval))))))))))

axiom no_update_strchr_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s_15_10_at_L:(charP, int8) memory.
        (forall c_3:int.
          (forall s_15:charP pointer.
            ((not in_pset(tmp, pset_range(pset_singleton(s_15), 0,
             strlen(s_15, charP_charM_s_15_10_at_L)))) -> (strchr(s_15, c_3,
             charP_charM_s_15_10_at_L) = strchr(s_15, c_3,
             store(charP_charM_s_15_10_at_L, tmp, tmpval)))))))))

axiom no_update_strcmp_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
        (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
          (forall s2_6:charP pointer.
            (forall s1_6:charP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s2_6), 0,
               strlen(s2_6, charP_charM_s2_6_7_at_L)))) -> (strcmp(s1_6,
               s2_6, charP_charM_s2_6_7_at_L,
               charP_charM_s1_6_6_at_L) = strcmp(s1_6, s2_6,
               store(charP_charM_s2_6_7_at_L, tmp, tmpval),
               charP_charM_s1_6_6_at_L)))))))))

axiom no_update_strcmp_1:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
        (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
          (forall s2_6:charP pointer.
            (forall s1_6:charP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s1_6), 0,
               strlen(s1_6, charP_charM_s1_6_6_at_L)))) -> (strcmp(s1_6,
               s2_6, charP_charM_s2_6_7_at_L,
               charP_charM_s1_6_6_at_L) = strcmp(s1_6, s2_6,
               charP_charM_s2_6_7_at_L, store(charP_charM_s1_6_6_at_L, tmp,
               tmpval))))))))))

axiom no_update_strlen_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
        (forall s_3:charP pointer.
          ((not in_pset(tmp, pset_range_right(pset_singleton(s_3), 0))) ->
           (strlen(s_3, charP_charM_s_3_5_at_L) = strlen(s_3,
           store(charP_charM_s_3_5_at_L, tmp, tmpval))))))))

axiom no_update_strncmp_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
        (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
          (forall n_10:int.
            (forall s2_9:charP pointer.
              (forall s1_9:charP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s2_9), 0,
                 (n_10 - 1)))) -> (strncmp(s1_9, s2_9, n_10,
                 charP_charM_s2_9_9_at_L,
                 charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                 store(charP_charM_s2_9_9_at_L, tmp, tmpval),
                 charP_charM_s1_9_8_at_L))))))))))

axiom no_update_strncmp_1:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
        (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
          (forall n_10:int.
            (forall s2_9:charP pointer.
              (forall s1_9:charP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s1_9), 0,
                 (n_10 - 1)))) -> (strncmp(s1_9, s2_9, n_10,
                 charP_charM_s2_9_9_at_L,
                 charP_charM_s1_9_8_at_L) = strncmp(s1_9, s2_9, n_10,
                 charP_charM_s2_9_9_at_L, store(charP_charM_s1_9_8_at_L, tmp,
                 tmpval)))))))))))

axiom no_update_wcscmp_0:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:(unsigned_shortP,
        uint16) memory.
        (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:(unsigned_shortP,
          uint16) memory.
          (forall s2_11:unsigned_shortP pointer.
            (forall s1_11:unsigned_shortP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s2_11), 0,
               wcslen(s2_11,
               unsigned_shortP_unsigned_shortM_s2_11_13_at_L)))) ->
               (wcscmp(s1_11, s2_11,
               unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
               unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
               s2_11, store(unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
               tmp, tmpval), unsigned_shortP_unsigned_shortM_s1_11_12_at_L)))))))))

axiom no_update_wcscmp_1:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:(unsigned_shortP,
        uint16) memory.
        (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:(unsigned_shortP,
          uint16) memory.
          (forall s2_11:unsigned_shortP pointer.
            (forall s1_11:unsigned_shortP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s1_11), 0,
               wcslen(s1_11,
               unsigned_shortP_unsigned_shortM_s1_11_12_at_L)))) ->
               (wcscmp(s1_11, s2_11,
               unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
               unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcscmp(s1_11,
               s2_11, unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
               store(unsigned_shortP_unsigned_shortM_s1_11_12_at_L, tmp,
               tmpval))))))))))

axiom no_update_wcslen_0:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
        uint16) memory.
        (forall s_17:unsigned_shortP pointer.
          ((not in_pset(tmp, pset_range_right(pset_singleton(s_17), 0))) ->
           (wcslen(s_17,
           unsigned_shortP_unsigned_shortM_s_17_11_at_L) = wcslen(s_17,
           store(unsigned_shortP_unsigned_shortM_s_17_11_at_L, tmp, tmpval))))))))

axiom no_update_wcsncmp_0:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:(unsigned_shortP,
        uint16) memory.
        (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:(unsigned_shortP,
          uint16) memory.
          (forall n_12:int.
            (forall s2_13:unsigned_shortP pointer.
              (forall s1_13:unsigned_shortP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s2_13), 0,
                 (n_12 - 1)))) -> (wcsncmp(s1_13, s2_13, n_12,
                 unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                 unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                 s2_13, n_12,
                 store(unsigned_shortP_unsigned_shortM_s2_13_15_at_L, tmp,
                 tmpval), unsigned_shortP_unsigned_shortM_s1_13_14_at_L))))))))))

axiom no_update_wcsncmp_1:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:(unsigned_shortP,
        uint16) memory.
        (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:(unsigned_shortP,
          uint16) memory.
          (forall n_12:int.
            (forall s2_13:unsigned_shortP pointer.
              (forall s1_13:unsigned_shortP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s1_13), 0,
                 (n_12 - 1)))) -> (wcsncmp(s1_13, s2_13, n_12,
                 unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                 unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = wcsncmp(s1_13,
                 s2_13, n_12, unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                 store(unsigned_shortP_unsigned_shortM_s1_13_14_at_L, tmp,
                 tmpval)))))))))))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_char_xP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_xP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic unsigned_shortP_of_pointer_address : unit pointer -> unsigned_shortP pointer

axiom pointer_addr_of_unsigned_shortP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_shortP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_char_xP(p: char_xP pointer, b: int,
  char_xP_alloc_table: char_xP alloc_table) =
  (offset_max(char_xP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_shortP(p: unsigned_shortP pointer,
  b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  (offset_max(unsigned_shortP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_char_xP(p: char_xP pointer, a: int, b: int,
  char_xP_alloc_table: char_xP alloc_table) =
  ((offset_min(char_xP_alloc_table, p) = a) and
   (offset_max(char_xP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_shortP(p: unsigned_shortP pointer,
  a: int, b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  ((offset_min(unsigned_shortP_alloc_table, p) = a) and
   (offset_max(unsigned_shortP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_char_xP(p: char_xP pointer, a: int, b: int,
  char_xP_alloc_table: char_xP alloc_table) =
  ((offset_min(char_xP_alloc_table, p) = a) and
   (offset_max(char_xP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_shortP(p: unsigned_shortP pointer,
  a: int, b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  ((offset_min(unsigned_shortP_alloc_table, p) = a) and
   (offset_max(unsigned_shortP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint16_of_integer : int -> uint16

axiom uint16_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 65535)) ->
     (integer_of_uint16(uint16_of_integer(x)) = x)))

axiom uint16_extensionality:
  (forall x:uint16.
    (forall y:uint16 [(integer_of_uint16(x) = integer_of_uint16(y))].
      ((integer_of_uint16(x) = integer_of_uint16(y)) -> (x = y))))

axiom uint16_range:
  (forall x:uint16.
    ((0 <= integer_of_uint16(x)) and (integer_of_uint16(x) <= 65535)))

logic uint32_of_integer : int -> uint32

axiom uint32_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 4294967295)) ->
     (integer_of_uint32(uint32_of_integer(x)) = x)))

axiom uint32_extensionality:
  (forall x:uint32.
    (forall y:uint32 [(integer_of_uint32(x) = integer_of_uint32(y))].
      ((integer_of_uint32(x) = integer_of_uint32(y)) -> (x = y))))

axiom uint32_range:
  (forall x:uint32.
    ((0 <= integer_of_uint32(x)) and (integer_of_uint32(x) <= 4294967295)))

logic uint8_of_integer : int -> uint8

axiom uint8_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 255)) -> (integer_of_uint8(uint8_of_integer(x)) = x)))

axiom uint8_extensionality:
  (forall x:uint8.
    (forall y:uint8 [(integer_of_uint8(x) = integer_of_uint8(y))].
      ((integer_of_uint8(x) = integer_of_uint8(y)) -> (x = y))))

axiom uint8_range:
  (forall x:uint8.
    ((0 <= integer_of_uint8(x)) and (integer_of_uint8(x) <= 255)))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

logic unsigned_shortP_tag : unsigned_shortP tag_id

axiom unsigned_shortP_int: (int_of_tag(unsigned_shortP_tag) = 1)

axiom unsigned_shortP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_shortP pointer.
    (p = unsigned_shortP_of_pointer_address(pointer_address(p))))

axiom unsigned_shortP_parenttag_bottom: parenttag(unsigned_shortP_tag,
  bottom_tag)

axiom unsigned_shortP_tags:
  (forall x:unsigned_shortP pointer.
    (forall unsigned_shortP_tag_table:unsigned_shortP tag_table.
      instanceof(unsigned_shortP_tag_table, x, unsigned_shortP_tag)))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_char_xP(p: char_xP pointer, a: int, b: int,
  char_xP_alloc_table: char_xP alloc_table) =
  ((offset_min(char_xP_alloc_table, p) <= a) and
   (offset_max(char_xP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_unsigned_shortP(p: unsigned_shortP pointer, a: int,
  b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  ((offset_min(unsigned_shortP_alloc_table, p) <= a) and
   (offset_max(unsigned_shortP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_string(s_28: charP pointer,
  charP_s_28_16_alloc_table_at_L: charP alloc_table,
  charP_charM_s_28_16_at_L: (charP, int8) memory) =
  ((0 <= strlen(s_28, charP_charM_s_28_16_at_L)) and
   ((offset_min(charP_s_28_16_alloc_table_at_L, s_28) <= 0) and
    (offset_max(charP_s_28_16_alloc_table_at_L, s_28) >= strlen(s_28,
    charP_charM_s_28_16_at_L))))

predicate valid_string_or_null(s_29: charP pointer,
  charP_s_29_17_alloc_table_at_L: charP alloc_table,
  charP_charM_s_29_17_at_L: (charP, int8) memory) =
  ((s_29 = null) or valid_string(s_29, charP_s_29_17_alloc_table_at_L,
   charP_charM_s_29_17_at_L))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_char_xP(p: char_xP pointer, a: int, b: int,
  char_xP_alloc_table: char_xP alloc_table) =
  ((offset_min(char_xP_alloc_table, p) <= a) and
   (offset_max(char_xP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_unsigned_shortP(p: unsigned_shortP pointer, a: int,
  b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  ((offset_min(unsigned_shortP_alloc_table, p) <= a) and
   (offset_max(unsigned_shortP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_wstring(s_30: unsigned_shortP pointer,
  unsigned_shortP_s_30_18_alloc_table_at_L: unsigned_shortP alloc_table,
  unsigned_shortP_unsigned_shortM_s_30_18_at_L: (unsigned_shortP,
  uint16) memory) =
  ((0 <= wcslen(s_30, unsigned_shortP_unsigned_shortM_s_30_18_at_L)) and
   ((offset_min(unsigned_shortP_s_30_18_alloc_table_at_L, s_30) <= 0) and
    (offset_max(unsigned_shortP_s_30_18_alloc_table_at_L,
    s_30) >= wcslen(s_30, unsigned_shortP_unsigned_shortM_s_30_18_at_L))))

predicate valid_wstring_or_null(s_31: unsigned_shortP pointer,
  unsigned_shortP_s_31_19_alloc_table_at_L: unsigned_shortP alloc_table,
  unsigned_shortP_unsigned_shortM_s_31_19_at_L: (unsigned_shortP,
  uint16) memory) =
  ((s_31 = null) or valid_wstring(s_31,
   unsigned_shortP_s_31_19_alloc_table_at_L,
   unsigned_shortP_unsigned_shortM_s_31_19_at_L))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

axiom memcmp_range:
  (forall charP_charM_s2_2_at_L:(charP, int8) memory.
    (forall charP_charM_s1_1_at_L:(charP, int8) memory.
      (forall s1_0_1:charP pointer.
        (forall s2_0_1:charP pointer.
          (forall n_0:int.
            ((((-2147483647) - 1) <= memcmp(s1_0_1, s2_0_1, n_0,
             charP_charM_s2_2_at_L, charP_charM_s1_1_at_L)) and
             (memcmp(s1_0_1, s2_0_1, n_0, charP_charM_s2_2_at_L,
             charP_charM_s1_1_at_L) <= 2147483647)))))))

axiom memcmp_zero:
  (forall charP_charM_s2_2_at_L:(charP, int8) memory.
    (forall charP_charM_s1_1_at_L:(charP, int8) memory.
      (forall s1_1_1:charP pointer.
        (forall s2_1_1:charP pointer.
          (forall n_1_0:int.
            ((memcmp(s1_1_1, s2_1_1, n_1_0, charP_charM_s2_2_at_L,
             charP_charM_s1_1_at_L) = 0) <->
             (forall i_1:int.
               (((0 <= i_1) and (i_1 < n_1_0)) ->
                (integer_of_int8(select(charP_charM_s1_1_at_L, shift(s1_1_1,
                i_1))) = integer_of_int8(select(charP_charM_s2_2_at_L,
                shift(s2_1_1, i_1))))))))))))

axiom memchr_def:
  (forall charP_charM_s_3_at_L:(charP, int8) memory.
    (forall s_0_1:charP pointer.
      (forall c_0_1:int.
        (forall n_3_0:int.
          ((memchr(s_0_1, c_0_1, n_3_0, charP_charM_s_3_at_L) = true) <->
           (exists i_2:int32.
             ((0 <= integer_of_int32(i_2)) and
              ((integer_of_int32(i_2) < n_3_0) and
               (integer_of_int8(select(charP_charM_s_3_at_L, shift(s_0_1,
               integer_of_int32(i_2)))) = c_0_1)))))))))

axiom memset_def:
  (forall charP_charM_s_1_4_at_L:(charP, int8) memory.
    (forall s_2_1:charP pointer.
      (forall c_2_0:int.
        (forall n_5_0:int.
          ((memset(s_2_1, c_2_0, n_5_0, charP_charM_s_1_4_at_L) = true) <->
           (forall i_3:int.
             (((0 <= i_3) and (i_3 < n_5_0)) ->
              (integer_of_int8(select(charP_charM_s_1_4_at_L, shift(s_2_1,
              i_3))) = c_2_0))))))))

axiom strlen_pos_or_null:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_4_0:charP pointer.
      (forall i_4:int.
        (((0 <= i_4) and
          ((i_4 <= 2147483647) and
           ((forall j_0:int.
              (((0 <= j_0) and (j_0 < i_4)) ->
               (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_4_0,
               j_0))) <> 0))) and
            (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_4_0,
            i_4))) = 0)))) ->
         (strlen(s_4_0, charP_charM_s_3_5_at_L) = i_4)))))

axiom strlen_neg:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_5_0:charP pointer.
      ((forall i_5:int.
         (((0 <= i_5) and (i_5 <= 2147483647)) ->
          (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_5_0,
          i_5))) <> 0))) ->
       (strlen(s_5_0, charP_charM_s_3_5_at_L) < 0))))

axiom strlen_range:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_6_0:charP pointer. (strlen(s_6_0,
      charP_charM_s_3_5_at_L) <= 2147483647)))

axiom strlen_before_null:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_7_0:charP pointer.
      (forall i_6:int.
        (((0 <= i_6) and (i_6 < strlen(s_7_0, charP_charM_s_3_5_at_L))) ->
         (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_7_0,
         i_6))) <> 0)))))

axiom strlen_at_null:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_8_0:charP pointer.
      ((0 <= strlen(s_8_0, charP_charM_s_3_5_at_L)) ->
       (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_8_0,
       strlen(s_8_0, charP_charM_s_3_5_at_L)))) = 0))))

axiom strlen_not_zero:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_9_0:charP pointer.
      (forall i_7:int.
        (((0 <= i_7) and
          ((i_7 <= strlen(s_9_0, charP_charM_s_3_5_at_L)) and
           (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_9_0,
           i_7))) <> 0))) ->
         (i_7 < strlen(s_9_0, charP_charM_s_3_5_at_L))))))

axiom strlen_zero:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_10_0:charP pointer.
      (forall i_8:int.
        (((0 <= i_8) and
          ((i_8 <= strlen(s_10_0, charP_charM_s_3_5_at_L)) and
           (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_10_0,
           i_8))) = 0))) ->
         (i_8 = strlen(s_10_0, charP_charM_s_3_5_at_L))))))

axiom strlen_sup:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_11_0:charP pointer.
      (forall i_9:int.
        (((0 <= i_9) and (integer_of_int8(select(charP_charM_s_3_5_at_L,
          shift(s_11_0, i_9))) = 0)) ->
         ((0 <= strlen(s_11_0, charP_charM_s_3_5_at_L)) and (strlen(s_11_0,
          charP_charM_s_3_5_at_L) <= i_9))))))

axiom strlen_shift:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_12:charP pointer.
      (forall i_10:int.
        (((0 <= i_10) and (i_10 <= strlen(s_12, charP_charM_s_3_5_at_L))) ->
         (strlen(shift(s_12, i_10), charP_charM_s_3_5_at_L) = (strlen(s_12,
         charP_charM_s_3_5_at_L) - i_10))))))

axiom strlen_create:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_13:charP pointer.
      (forall i_11:int.
        (((0 <= i_11) and
          ((i_11 <= 2147483647) and
           (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_13,
           i_11))) = 0))) ->
         ((0 <= strlen(s_13, charP_charM_s_3_5_at_L)) and (strlen(s_13,
          charP_charM_s_3_5_at_L) <= i_11))))))

axiom strlen_create_shift:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s_14:charP pointer.
      (forall i_12:int.
        (forall k:int.
          (((0 <= k) and
            ((k <= i_12) and
             ((i_12 <= 2147483647) and
              (integer_of_int8(select(charP_charM_s_3_5_at_L, shift(s_14,
              i_12))) = 0)))) ->
           ((0 <= strlen(shift(s_14, k), charP_charM_s_3_5_at_L)) and
            (strlen(shift(s_14, k), charP_charM_s_3_5_at_L) <= (i_12 - k))))))))

axiom memcmp_strlen_left:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s1_2_1:charP pointer.
      (forall s2_2_1:charP pointer.
        (forall n_6_0:int.
          (((memcmp(s1_2_1, s2_2_1, n_6_0, charP_charM_s_3_5_at_L,
            charP_charM_s_3_5_at_L) = 0) and (strlen(s1_2_1,
            charP_charM_s_3_5_at_L) < n_6_0)) ->
           (strlen(s1_2_1, charP_charM_s_3_5_at_L) = strlen(s2_2_1,
           charP_charM_s_3_5_at_L)))))))

axiom memcmp_strlen_right:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s1_3:charP pointer.
      (forall s2_3:charP pointer.
        (forall n_7_0:int.
          (((memcmp(s1_3, s2_3, n_7_0, charP_charM_s_3_5_at_L,
            charP_charM_s_3_5_at_L) = 0) and (strlen(s2_3,
            charP_charM_s_3_5_at_L) < n_7_0)) ->
           (strlen(s1_3, charP_charM_s_3_5_at_L) = strlen(s2_3,
           charP_charM_s_3_5_at_L)))))))

axiom memcmp_strlen_shift_left:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s1_4:charP pointer.
      (forall s2_4:charP pointer.
        (forall k_0:int.
          (forall n_8_0:int.
            (((memcmp(s1_4, shift(s2_4, k_0), n_8_0, charP_charM_s_3_5_at_L,
              charP_charM_s_3_5_at_L) = 0) and
              ((0 <= k_0) and (strlen(s1_4, charP_charM_s_3_5_at_L) < n_8_0))) ->
             ((0 <= strlen(s2_4, charP_charM_s_3_5_at_L)) and (strlen(s2_4,
              charP_charM_s_3_5_at_L) <= (k_0 + strlen(s1_4,
              charP_charM_s_3_5_at_L))))))))))

axiom memcmp_strlen_shift_right:
  (forall charP_charM_s_3_5_at_L:(charP, int8) memory.
    (forall s1_5:charP pointer.
      (forall s2_5:charP pointer.
        (forall k_1:int.
          (forall n_9_0:int.
            (((memcmp(shift(s1_5, k_1), s2_5, n_9_0, charP_charM_s_3_5_at_L,
              charP_charM_s_3_5_at_L) = 0) and
              ((0 <= k_1) and (strlen(s2_5, charP_charM_s_3_5_at_L) < n_9_0))) ->
             ((0 <= strlen(s1_5, charP_charM_s_3_5_at_L)) and (strlen(s1_5,
              charP_charM_s_3_5_at_L) <= (k_1 + strlen(s2_5,
              charP_charM_s_3_5_at_L))))))))))

axiom strcmp_range:
  (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
    (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
      (forall s1_7:charP pointer.
        (forall s2_7:charP pointer.
          ((((-2147483647) - 1) <= strcmp(s1_7, s2_7,
           charP_charM_s2_6_7_at_L, charP_charM_s1_6_6_at_L)) and
           (strcmp(s1_7, s2_7, charP_charM_s2_6_7_at_L,
           charP_charM_s1_6_6_at_L) <= 2147483647))))))

axiom strcmp_zero:
  (forall charP_charM_s2_6_7_at_L:(charP, int8) memory.
    (forall charP_charM_s1_6_6_at_L:(charP, int8) memory.
      (forall s1_8:charP pointer.
        (forall s2_8:charP pointer.
          ((strcmp(s1_8, s2_8, charP_charM_s2_6_7_at_L,
           charP_charM_s1_6_6_at_L) = 0) <->
           ((strlen(s1_8, charP_charM_s1_6_6_at_L) = strlen(s2_8,
            charP_charM_s2_6_7_at_L)) and
            (forall i_13:int.
              (((0 <= i_13) and (i_13 <= strlen(s1_8,
                charP_charM_s1_6_6_at_L))) ->
               (integer_of_int8(select(charP_charM_s1_6_6_at_L, shift(s1_8,
               i_13))) = integer_of_int8(select(charP_charM_s2_6_7_at_L,
               shift(s2_8, i_13))))))))))))

axiom strncmp_zero:
  (forall charP_charM_s2_9_9_at_L:(charP, int8) memory.
    (forall charP_charM_s1_9_8_at_L:(charP, int8) memory.
      (forall s1_10:charP pointer.
        (forall s2_10:charP pointer.
          (forall n_11_0:int.
            ((strncmp(s1_10, s2_10, n_11_0, charP_charM_s2_9_9_at_L,
             charP_charM_s1_9_8_at_L) = 0) <->
             (((strlen(s1_10, charP_charM_s1_9_8_at_L) < n_11_0) and
               (strcmp(s1_10, s2_10, charP_charM_s2_9_9_at_L,
               charP_charM_s1_9_8_at_L) = 0)) or
              (forall i_14:int.
                (((0 <= i_14) and (i_14 < n_11_0)) ->
                 (integer_of_int8(select(charP_charM_s1_9_8_at_L,
                 shift(s1_10,
                 i_14))) = integer_of_int8(select(charP_charM_s2_9_9_at_L,
                 shift(s2_10, i_14)))))))))))))

axiom strchr_def:
  (forall charP_charM_s_15_10_at_L:(charP, int8) memory.
    (forall s_16:charP pointer.
      (forall c_4:int.
        ((strchr(s_16, c_4, charP_charM_s_15_10_at_L) = true) <->
         (exists i_15:int.
           ((0 <= i_15) and
            ((i_15 <= strlen(s_16, charP_charM_s_15_10_at_L)) and
             (integer_of_int8(select(charP_charM_s_15_10_at_L, shift(s_16,
             i_15))) = c_4))))))))

axiom wcslen_pos_or_null:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_18:unsigned_shortP pointer.
      (forall i_16:int.
        (((0 <= i_16) and
          ((forall j_1:int.
             (((0 <= j_1) and (j_1 < i_16)) ->
              (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
              shift(s_18, j_1))) <> 0))) and
           (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
           shift(s_18, i_16))) = 0))) ->
         (wcslen(s_18, unsigned_shortP_unsigned_shortM_s_17_11_at_L) = i_16)))))

axiom wcslen_neg:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_19:unsigned_shortP pointer.
      ((forall i_17:int.
         ((0 <= i_17) ->
          (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
          shift(s_19, i_17))) <> 0))) ->
       (wcslen(s_19, unsigned_shortP_unsigned_shortM_s_17_11_at_L) < 0))))

axiom wcslen_before_null:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_20:unsigned_shortP pointer.
      (forall i_18:int32.
        (((0 <= integer_of_int32(i_18)) and
          (integer_of_int32(i_18) < wcslen(s_20,
          unsigned_shortP_unsigned_shortM_s_17_11_at_L))) ->
         (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
         shift(s_20, integer_of_int32(i_18)))) <> 0)))))

axiom wcslen_at_null:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_21:unsigned_shortP pointer.
      ((0 <= wcslen(s_21, unsigned_shortP_unsigned_shortM_s_17_11_at_L)) ->
       (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
       shift(s_21, wcslen(s_21,
       unsigned_shortP_unsigned_shortM_s_17_11_at_L)))) = 0))))

axiom wcslen_not_zero:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_22:unsigned_shortP pointer.
      (forall i_19:int32.
        (((0 <= integer_of_int32(i_19)) and
          ((integer_of_int32(i_19) <= wcslen(s_22,
           unsigned_shortP_unsigned_shortM_s_17_11_at_L)) and
           (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
           shift(s_22, integer_of_int32(i_19)))) <> 0))) ->
         (integer_of_int32(i_19) < wcslen(s_22,
         unsigned_shortP_unsigned_shortM_s_17_11_at_L))))))

axiom wcslen_zero:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_23:unsigned_shortP pointer.
      (forall i_20:int32.
        (((0 <= integer_of_int32(i_20)) and
          ((integer_of_int32(i_20) <= wcslen(s_23,
           unsigned_shortP_unsigned_shortM_s_17_11_at_L)) and
           (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
           shift(s_23, integer_of_int32(i_20)))) = 0))) ->
         (integer_of_int32(i_20) = wcslen(s_23,
         unsigned_shortP_unsigned_shortM_s_17_11_at_L))))))

axiom wcslen_sup:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_24:unsigned_shortP pointer.
      (forall i_21:int32.
        (((0 <= integer_of_int32(i_21)) and
          (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
          shift(s_24, integer_of_int32(i_21)))) = 0)) ->
         ((0 <= wcslen(s_24,
          unsigned_shortP_unsigned_shortM_s_17_11_at_L)) and (wcslen(s_24,
          unsigned_shortP_unsigned_shortM_s_17_11_at_L) <= integer_of_int32(i_21)))))))

axiom wcslen_shift:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_25:unsigned_shortP pointer.
      (forall i_22:int32.
        (((0 <= integer_of_int32(i_22)) and
          (integer_of_int32(i_22) <= wcslen(s_25,
          unsigned_shortP_unsigned_shortM_s_17_11_at_L))) ->
         (wcslen(shift(s_25, integer_of_int32(i_22)),
         unsigned_shortP_unsigned_shortM_s_17_11_at_L) = (wcslen(s_25,
         unsigned_shortP_unsigned_shortM_s_17_11_at_L) - integer_of_int32(i_22)))))))

axiom wcslen_create:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_26:unsigned_shortP pointer.
      (forall i_23:int32.
        (((0 <= integer_of_int32(i_23)) and
          (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
          shift(s_26, integer_of_int32(i_23)))) = 0)) ->
         ((0 <= wcslen(s_26,
          unsigned_shortP_unsigned_shortM_s_17_11_at_L)) and (wcslen(s_26,
          unsigned_shortP_unsigned_shortM_s_17_11_at_L) <= integer_of_int32(i_23)))))))

axiom wcslen_create_shift:
  (forall unsigned_shortP_unsigned_shortM_s_17_11_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_27:unsigned_shortP pointer.
      (forall i_24:int32.
        (forall k_2:int32.
          (((0 <= integer_of_int32(k_2)) and
            ((integer_of_int32(k_2) <= integer_of_int32(i_24)) and
             (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_11_at_L,
             shift(s_27, integer_of_int32(i_24)))) = 0))) ->
           ((0 <= wcslen(shift(s_27, integer_of_int32(k_2)),
            unsigned_shortP_unsigned_shortM_s_17_11_at_L)) and
            (wcslen(shift(s_27, integer_of_int32(k_2)),
            unsigned_shortP_unsigned_shortM_s_17_11_at_L) <= (integer_of_int32(i_24) - integer_of_int32(k_2)))))))))

axiom wcscmp_zero:
  (forall unsigned_shortP_unsigned_shortM_s2_11_13_at_L:(unsigned_shortP,
    uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s1_11_12_at_L:(unsigned_shortP,
      uint16) memory.
      (forall s1_12:unsigned_shortP pointer.
        (forall s2_12:unsigned_shortP pointer.
          ((wcscmp(s1_12, s2_12,
           unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
           unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = 0) <->
           ((wcslen(s1_12,
            unsigned_shortP_unsigned_shortM_s1_11_12_at_L) = wcslen(s2_12,
            unsigned_shortP_unsigned_shortM_s2_11_13_at_L)) and
            (forall i_25:int.
              (((0 <= i_25) and (i_25 <= wcslen(s1_12,
                unsigned_shortP_unsigned_shortM_s1_11_12_at_L))) ->
               (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s1_11_12_at_L,
               shift(s1_12,
               i_25))) = integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s2_11_13_at_L,
               shift(s2_12, i_25))))))))))))

axiom wcsncmp_zero:
  (forall unsigned_shortP_unsigned_shortM_s2_13_15_at_L:(unsigned_shortP,
    uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s1_13_14_at_L:(unsigned_shortP,
      uint16) memory.
      (forall s1_14:unsigned_shortP pointer.
        (forall s2_14:unsigned_shortP pointer.
          (forall n_13_0:int.
            ((wcsncmp(s1_14, s2_14, n_13_0,
             unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
             unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = 0) <->
             (((wcslen(s1_14,
               unsigned_shortP_unsigned_shortM_s1_13_14_at_L) < n_13_0) and
               (wcscmp(s1_14, s2_14,
               unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
               unsigned_shortP_unsigned_shortM_s1_13_14_at_L) = 0)) or
              (forall i_26:int.
                (((0 <= i_26) and (i_26 < n_13_0)) ->
                 (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s1_13_14_at_L,
                 shift(s1_14,
                 i_26))) = integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s2_13_15_at_L,
                 shift(s2_14, i_26)))))))))))))

