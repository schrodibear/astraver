Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -add-symbolic-path PPCHOME:PPCHOME -jessie -jessie-gen-only undef.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -dD PPCHOME/tests/jessie/undef.c"
PPCHOME/tests/jessie/undef.c:544:[kernel] warning: Body of function missing_return_wrong falls-through. Adding a return statement
PPCHOME/tests/jessie/undef.c:552:[kernel] warning: Body of function missing_return_unsafe falls-through. Adding a return statement
[jessie] Starting Jessie translation
[kernel] warning: Neither code nor specification for function bar, generating default assigns from the prototype
[kernel] warning: Neither code nor specification for function baz, generating default assigns from the prototype
[kernel] warning: Neither code nor specification for function foo, generating default assigns from the prototype
[jessie] Producing Jessie files in subdir undef.jessie
[jessie] File undef.jessie/undef.jc written.
[jessie] File undef.jessie/undef.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type uint32 = 0..4294967295

type uint16 = 0..65535

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag unsigned_shortP = {
  uint16 unsigned_shortM: 16;
}

type unsigned_shortP = [unsigned_shortP]

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

charP[0..3] __string_abc;

invariant valid___string_abc :
((\offset_min(__string_abc) <= 0) && (\offset_max(__string_abc) >= 3))

axiomatic MemCmp {

  logic integer memcmp{L}(charP[..] s1, charP[..] s2, integer n)
  reads (s1 + [0..(n - 1)]).charM, (s2 + [0..(n - 1)]).charM;
   
  axiom memcmp_range{L} :
  (\forall charP[..] s1_0;
    (\forall charP[..] s2_0;
      (\forall integer n_0;
        ((((- 2147483647) - 1) <= memcmp{L}(s1_0, s2_0, n_0)) &&
          (memcmp{L}(s1_0, s2_0, n_0) <= 2147483647)))))
   
  axiom memcmp_zero{L} :
  (\forall charP[..] s1_1;
    (\forall charP[..] s2_1;
      (\forall integer n_1;
        ((memcmp{L}(s1_1, s2_1, n_1) == 0) <==>
          (\forall integer i_1;
            (((0 <= i_1) && (i_1 < n_1)) ==>
              ((s1_1 + i_1).charM == (s2_1 + i_1).charM)))))))
  
}

axiomatic MemChr {

  logic boolean memchr{L}(charP[..] s, integer c, integer n_2)
  reads (s + [0..(n_2 - 1)]).charM;
   
  axiom memchr_def{L} :
  (\forall charP[..] s_0;
    (\forall integer c_0;
      (\forall integer n_3;
        ((memchr{L}(s_0, c_0, n_3) == true) <==>
          (\exists int32 i_2;
            (((0 <= i_2) && (i_2 < n_3)) && ((s_0 + i_2).charM == c_0)))))))
  
}

axiomatic MemSet {

  logic boolean memset{L}(charP[..] s_1, integer c_1, integer n_4)
  reads (s_1 + [0..(n_4 - 1)]).charM;
   
  axiom memset_def{L} :
  (\forall charP[..] s_2;
    (\forall integer c_2;
      (\forall integer n_5;
        ((memset{L}(s_2, c_2, n_5) == true) <==>
          (\forall integer i_3;
            (((0 <= i_3) && (i_3 < n_5)) ==> ((s_2 + i_3).charM == c_2)))))))
  
}

axiomatic StrLen {

  logic integer strlen{L}(charP[..] s_3) reads (s_3 + [0..]).charM;
   
  axiom strlen_pos_or_null{L} :
  (\forall charP[..] s_4;
    (\forall integer i_4;
      (((((0 <= i_4) && (i_4 <= 2147483647)) &&
          (\forall integer j_0;
            (((0 <= j_0) && (j_0 < i_4)) ==> ((s_4 + j_0).charM != 0)))) &&
         ((s_4 + i_4).charM == 0)) ==>
        (strlen{L}(s_4) == i_4))))
   
  axiom strlen_neg{L} :
  (\forall charP[..] s_5;
    ((\forall integer i_5;
       (((0 <= i_5) && (i_5 <= 2147483647)) ==> ((s_5 + i_5).charM != 0))) ==>
      (strlen{L}(s_5) < 0)))
   
  axiom strlen_range{L} :
  (\forall charP[..] s_6;
    (strlen{L}(s_6) <= 2147483647))
   
  axiom strlen_before_null{L} :
  (\forall charP[..] s_7;
    (\forall integer i_6;
      (((0 <= i_6) && (i_6 < strlen{L}(s_7))) ==> ((s_7 + i_6).charM != 0))))
   
  axiom strlen_at_null{L} :
  (\forall charP[..] s_8;
    ((0 <= strlen{L}(s_8)) ==> ((s_8 + strlen{L}(s_8)).charM == 0)))
   
  axiom strlen_not_zero{L} :
  (\forall charP[..] s_9;
    (\forall integer i_7;
      ((((0 <= i_7) && (i_7 <= strlen{L}(s_9))) && ((s_9 + i_7).charM != 0)) ==>
        (i_7 < strlen{L}(s_9)))))
   
  axiom strlen_zero{L} :
  (\forall charP[..] s_10;
    (\forall integer i_8;
      ((((0 <= i_8) && (i_8 <= strlen{L}(s_10))) &&
         ((s_10 + i_8).charM == 0)) ==>
        (i_8 == strlen{L}(s_10)))))
   
  axiom strlen_sup{L} :
  (\forall charP[..] s_11;
    (\forall integer i_9;
      (((0 <= i_9) && ((s_11 + i_9).charM == 0)) ==>
        ((0 <= strlen{L}(s_11)) && (strlen{L}(s_11) <= i_9)))))
   
  axiom strlen_shift{L} :
  (\forall charP[..] s_12;
    (\forall integer i_10;
      (((0 <= i_10) && (i_10 <= strlen{L}(s_12))) ==>
        (strlen{L}((s_12 + i_10)) == (strlen{L}(s_12) - i_10)))))
   
  axiom strlen_create{L} :
  (\forall charP[..] s_13;
    (\forall integer i_11;
      ((((0 <= i_11) && (i_11 <= 2147483647)) && ((s_13 + i_11).charM == 0)) ==>
        ((0 <= strlen{L}(s_13)) && (strlen{L}(s_13) <= i_11)))))
   
  axiom strlen_create_shift{L} :
  (\forall charP[..] s_14;
    (\forall integer i_12;
      (\forall integer k;
        ((((0 <= k) && ((k <= i_12) && (i_12 <= 2147483647))) &&
           ((s_14 + i_12).charM == 0)) ==>
          ((0 <= strlen{L}((s_14 + k))) &&
            (strlen{L}((s_14 + k)) <= (i_12 - k)))))))
   
  axiom memcmp_strlen_left{L} :
  (\forall charP[..] s1_2;
    (\forall charP[..] s2_2;
      (\forall integer n_6;
        (((memcmp{L}(s1_2, s2_2, n_6) == 0) && (strlen{L}(s1_2) < n_6)) ==>
          (strlen{L}(s1_2) == strlen{L}(s2_2))))))
   
  axiom memcmp_strlen_right{L} :
  (\forall charP[..] s1_3;
    (\forall charP[..] s2_3;
      (\forall integer n_7;
        (((memcmp{L}(s1_3, s2_3, n_7) == 0) && (strlen{L}(s2_3) < n_7)) ==>
          (strlen{L}(s1_3) == strlen{L}(s2_3))))))
   
  axiom memcmp_strlen_shift_left{L} :
  (\forall charP[..] s1_4;
    (\forall charP[..] s2_4;
      (\forall integer k_0;
        (\forall integer n_8;
          ((((memcmp{L}(s1_4, (s2_4 + k_0), n_8) == 0) && (0 <= k_0)) &&
             (strlen{L}(s1_4) < n_8)) ==>
            ((0 <= strlen{L}(s2_4)) &&
              (strlen{L}(s2_4) <= (k_0 + strlen{L}(s1_4)))))))))
   
  axiom memcmp_strlen_shift_right{L} :
  (\forall charP[..] s1_5;
    (\forall charP[..] s2_5;
      (\forall integer k_1;
        (\forall integer n_9;
          ((((memcmp{L}((s1_5 + k_1), s2_5, n_9) == 0) && (0 <= k_1)) &&
             (strlen{L}(s2_5) < n_9)) ==>
            ((0 <= strlen{L}(s1_5)) &&
              (strlen{L}(s1_5) <= (k_1 + strlen{L}(s2_5)))))))))
  
}

axiomatic StrCmp {

  logic integer strcmp{L}(charP[..] s1_6, charP[..] s2_6)
  reads (s1_6 + [0..strlen{L}(s1_6)]).charM,
  (s2_6 + [0..strlen{L}(s2_6)]).charM;
   
  axiom strcmp_range{L} :
  (\forall charP[..] s1_7;
    (\forall charP[..] s2_7;
      ((((- 2147483647) - 1) <= strcmp{L}(s1_7, s2_7)) &&
        (strcmp{L}(s1_7, s2_7) <= 2147483647))))
   
  axiom strcmp_zero{L} :
  (\forall charP[..] s1_8;
    (\forall charP[..] s2_8;
      ((strcmp{L}(s1_8, s2_8) == 0) <==>
        ((strlen{L}(s1_8) == strlen{L}(s2_8)) &&
          (\forall integer i_13;
            (((0 <= i_13) && (i_13 <= strlen{L}(s1_8))) ==>
              ((s1_8 + i_13).charM == (s2_8 + i_13).charM)))))))
  
}

axiomatic StrNCmp {

  logic integer strncmp{L}(charP[..] s1_9, charP[..] s2_9, integer n_10)
  reads (s1_9 + [0..(n_10 - 1)]).charM, (s2_9 + [0..(n_10 - 1)]).charM;
   
  axiom strncmp_zero{L} :
  (\forall charP[..] s1_10;
    (\forall charP[..] s2_10;
      (\forall integer n_11;
        ((strncmp{L}(s1_10, s2_10, n_11) == 0) <==>
          (((strlen{L}(s1_10) < n_11) && (strcmp{L}(s1_10, s2_10) == 0)) ||
            (\forall integer i_14;
              (((0 <= i_14) && (i_14 < n_11)) ==>
                ((s1_10 + i_14).charM == (s2_10 + i_14).charM))))))))
  
}

axiomatic StrChr {

  logic boolean strchr{L}(charP[..] s_15, integer c_3)
  reads (s_15 + [0..strlen{L}(s_15)]).charM;
   
  axiom strchr_def{L} :
  (\forall charP[..] s_16;
    (\forall integer c_4;
      ((strchr{L}(s_16, c_4) == true) <==>
        (\exists integer i_15;
          (((0 <= i_15) && (i_15 <= strlen{L}(s_16))) &&
            ((s_16 + i_15).charM == c_4))))))
  
}

axiomatic WcsLen {

  logic integer wcslen{L}(unsigned_shortP[..] s_17)
  reads (s_17 + [0..]).unsigned_shortM;
   
  axiom wcslen_pos_or_null{L} :
  (\forall unsigned_shortP[..] s_18;
    (\forall integer i_16;
      ((((0 <= i_16) &&
          (\forall integer j_1;
            (((0 <= j_1) && (j_1 < i_16)) ==>
              ((s_18 + j_1).unsigned_shortM != 0)))) &&
         ((s_18 + i_16).unsigned_shortM == 0)) ==>
        (wcslen{L}(s_18) == i_16))))
   
  axiom wcslen_neg{L} :
  (\forall unsigned_shortP[..] s_19;
    ((\forall integer i_17;
       ((0 <= i_17) ==> ((s_19 + i_17).unsigned_shortM != 0))) ==>
      (wcslen{L}(s_19) < 0)))
   
  axiom wcslen_before_null{L} :
  (\forall unsigned_shortP[..] s_20;
    (\forall int32 i_18;
      (((0 <= i_18) && (i_18 < wcslen{L}(s_20))) ==>
        ((s_20 + i_18).unsigned_shortM != 0))))
   
  axiom wcslen_at_null{L} :
  (\forall unsigned_shortP[..] s_21;
    ((0 <= wcslen{L}(s_21)) ==>
      ((s_21 + wcslen{L}(s_21)).unsigned_shortM == 0)))
   
  axiom wcslen_not_zero{L} :
  (\forall unsigned_shortP[..] s_22;
    (\forall int32 i_19;
      ((((0 <= i_19) && (i_19 <= wcslen{L}(s_22))) &&
         ((s_22 + i_19).unsigned_shortM != 0)) ==>
        (i_19 < wcslen{L}(s_22)))))
   
  axiom wcslen_zero{L} :
  (\forall unsigned_shortP[..] s_23;
    (\forall int32 i_20;
      ((((0 <= i_20) && (i_20 <= wcslen{L}(s_23))) &&
         ((s_23 + i_20).unsigned_shortM == 0)) ==>
        (i_20 == wcslen{L}(s_23)))))
   
  axiom wcslen_sup{L} :
  (\forall unsigned_shortP[..] s_24;
    (\forall int32 i_21;
      (((0 <= i_21) && ((s_24 + i_21).unsigned_shortM == 0)) ==>
        ((0 <= wcslen{L}(s_24)) && (wcslen{L}(s_24) <= i_21)))))
   
  axiom wcslen_shift{L} :
  (\forall unsigned_shortP[..] s_25;
    (\forall int32 i_22;
      (((0 <= i_22) && (i_22 <= wcslen{L}(s_25))) ==>
        (wcslen{L}((s_25 + i_22)) == (wcslen{L}(s_25) - i_22)))))
   
  axiom wcslen_create{L} :
  (\forall unsigned_shortP[..] s_26;
    (\forall int32 i_23;
      (((0 <= i_23) && ((s_26 + i_23).unsigned_shortM == 0)) ==>
        ((0 <= wcslen{L}(s_26)) && (wcslen{L}(s_26) <= i_23)))))
   
  axiom wcslen_create_shift{L} :
  (\forall unsigned_shortP[..] s_27;
    (\forall int32 i_24;
      (\forall int32 k_2;
        ((((0 <= k_2) && (k_2 <= i_24)) &&
           ((s_27 + i_24).unsigned_shortM == 0)) ==>
          ((0 <= wcslen{L}((s_27 + k_2))) &&
            (wcslen{L}((s_27 + k_2)) <= (i_24 - k_2)))))))
  
}

axiomatic WcsCmp {

  logic integer wcscmp{L}(unsigned_shortP[..] s1_11, unsigned_shortP[..] s2_11)
  reads (s1_11 + [0..wcslen{L}(s1_11)]).unsigned_shortM,
  (s2_11 + [0..wcslen{L}(s2_11)]).unsigned_shortM;
   
  axiom wcscmp_zero{L} :
  (\forall unsigned_shortP[..] s1_12;
    (\forall unsigned_shortP[..] s2_12;
      ((wcscmp{L}(s1_12, s2_12) == 0) <==>
        ((wcslen{L}(s1_12) == wcslen{L}(s2_12)) &&
          (\forall integer i_25;
            (((0 <= i_25) && (i_25 <= wcslen{L}(s1_12))) ==>
              ((s1_12 + i_25).unsigned_shortM ==
                (s2_12 + i_25).unsigned_shortM)))))))
  
}

axiomatic WcsNCmp {

  logic integer wcsncmp{L}(unsigned_shortP[..] s1_13,
                           unsigned_shortP[..] s2_13, integer n_12)
  reads (s1_13 + [0..(n_12 - 1)]).unsigned_shortM,
  (s2_13 + [0..(n_12 - 1)]).unsigned_shortM;
   
  axiom wcsncmp_zero{L} :
  (\forall unsigned_shortP[..] s1_14;
    (\forall unsigned_shortP[..] s2_14;
      (\forall integer n_13;
        ((wcsncmp{L}(s1_14, s2_14, n_13) == 0) <==>
          (((wcslen{L}(s1_14) < n_13) && (wcscmp{L}(s1_14, s2_14) == 0)) ||
            (\forall integer i_26;
              (((0 <= i_26) && (i_26 < n_13)) ==>
                ((s1_14 + i_26).unsigned_shortM ==
                  (s2_14 + i_26).unsigned_shortM))))))))
  
}

int32 div0_wrong(int32 x_3, int32 y_3)
behavior default:
  ensures (C_4 : true);
{  
   (var int32 __retres);
   
   {  (C_3 : (__retres = (C_2 : ((C_1 : (x_3 / 0)) :> int32))));
      
      (return __retres)
   }
}

int32 div0_unsafe(int32 x_1, int32 y_1)
  requires (C_9 : (y_1 != 0));
behavior default:
  ensures (C_8 : true);
{  
   (var int32 __retres_0);
   
   {  (C_7 : (__retres_0 = (C_6 : ((C_5 : (x_1 / y_1)) :> int32))));
      
      (return __retres_0)
   }
}

int32 div0_unsafe_pos(int32 x_2, int32 y_2)
  requires (C_14 : (y_2 > 0));
behavior default:
  ensures (C_13 : true);
{  
   (var int32 __retres_1);
   
   {  (C_12 : (__retres_1 = (C_11 : ((C_10 : (x_2 / y_2)) :> int32))));
      
      (return __retres_1)
   }
}

int32 div0_safe(int32 x, int32 y)
  requires (C_20 : true);
behavior default:
  ensures (C_19 : true);
{  
   (var int32 __retres_2);
   
   {  (if (y == 0) then 
      {  (C_18 : (__retres_2 = 0));
         
         (goto return_label)
      } else 
      {  (C_17 : (__retres_2 = (C_16 : ((C_15 : (x / y)) :> int32))));
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_2))
   }
}

int32 div0_safe_pos(int32 x_0, int32 y_0)
  requires (C_26 : true);
behavior default:
  ensures (C_25 : true);
{  
   (var int32 __retres_3);
   
   {  (if (y_0 <= 0) then 
      {  (C_24 : (__retres_3 = 0));
         
         (goto return_label)
      } else 
      {  (C_23 : (__retres_3 = (C_22 : ((C_21 : (x_0 / y_0)) :> int32))));
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_3))
   }
}

uint32 udiv0_wrong(uint32 x_40, uint32 y_28)
behavior default:
  ensures (C_30 : true);
{  
   (var uint32 __retres_4);
   
   {  (C_29 : (__retres_4 = (C_28 : ((C_27 : (x_40 / 0)) :> uint32))));
      
      (return __retres_4)
   }
}

uint32 udiv0_unsafe(uint32 x_39, uint32 y_27)
  requires (C_35 : (y_27 != 0));
behavior default:
  ensures (C_34 : true);
{  
   (var uint32 __retres_5);
   
   {  (C_33 : (__retres_5 = (C_32 : ((C_31 : (x_39 / y_27)) :> uint32))));
      
      (return __retres_5)
   }
}

uint32 udiv0_safe(uint32 x_38, uint32 y_26)
  requires (C_41 : true);
behavior default:
  ensures (C_40 : true);
{  
   (var uint32 __retres_6);
   
   {  (if (y_26 == 0) then 
      {  (C_39 : (__retres_6 = 0));
         
         (goto return_label)
      } else 
      {  (C_38 : (__retres_6 = (C_37 : ((C_36 : (x_38 / y_26)) :> uint32))));
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_6))
   }
}

int32 mod0_wrong(int32 x_9, int32 y_6)
behavior default:
  ensures (C_45 : true);
{  
   (var int32 __retres_7);
   
   {  (C_44 : (__retres_7 = (C_43 : ((C_42 : (x_9 % 0)) :> int32))));
      
      (return __retres_7)
   }
}

int32 mod0_unsafe(int32 x_8, int32 y_5)
  requires (C_50 : (y_5 != 0));
behavior default:
  ensures (C_49 : true);
{  
   (var int32 __retres_8);
   
   {  (C_48 : (__retres_8 = (C_47 : ((C_46 : (x_8 % y_5)) :> int32))));
      
      (return __retres_8)
   }
}

int32 mod0_safe(int32 x_7, int32 y_4)
  requires (C_56 : true);
behavior default:
  ensures (C_55 : true);
{  
   (var int32 __retres_9);
   
   {  (if (y_4 == 0) then 
      {  (C_54 : (__retres_9 = 0));
         
         (goto return_label)
      } else 
      {  (C_53 : (__retres_9 = (C_52 : ((C_51 : (x_7 % y_4)) :> int32))));
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_9))
   }
}

int32 shift_left_signed_wrong_1(int32 x_22, int32 y_13)
behavior default:
  ensures (C_63 : true);
{  
   (var int32 __retres_10);
   
   {  
      {  
         (assert for default: (C_59 : (jessie : (32 < 32))));
         
         (assert for default: (C_58 : (jessie : (x_22 >= 0))));
         
         (assert for default: (C_57 : (jessie : (x_22 <= 0))));
         (C_62 : (__retres_10 = (C_61 : ((C_60 : (x_22 * 4294967296)) :> int32))))
      };
      
      (return __retres_10)
   }
}

int32 shift_left_signed_wrong_2(int32 x_23, int32 y_14)
behavior default:
  ensures (C_70 : true);
{  
   (var int32 __retres_11);
   
   {  
      {  
         (assert for default: (C_66 : (jessie : (-1 >= 0))));
         
         (assert for default: (C_65 : (jessie : (x_23 >= 0))));
         
         (assert for default: (C_64 : (jessie : (x_23 <= (2147483647 >>> -1)))));
         (C_69 : (__retres_11 = (C_68 : ((C_67 : (x_23 << -1)) :> int32))))
      };
      
      (return __retres_11)
   }
}

int32 shift_left_signed_wrong_3(int32 x_24, int32 y_15)
behavior default:
  ensures (C_72 : true);
{  
   (var int32 __retres_12);
   
   {  (C_71 : (__retres_12 = -64));
      
      (return __retres_12)
   }
}

int32 shift_left_signed_unsafe(int32 x_21, int32 y_12)
behavior default:
  ensures (C_80 : true);
{  
   (var int32 __retres_13);
   
   {  
      {  
         (assert for default: (C_76 : (jessie : (y_12 >= 0))));
         
         (assert for default: (C_75 : (jessie : (y_12 < 32))));
         
         (assert for default: (C_74 : (jessie : (x_21 >= 0))));
         
         (assert for default: (C_73 : (jessie : (x_21 <=
                                                  (2147483647 >>> y_12)))));
         (C_79 : (__retres_13 = (C_78 : ((C_77 : (x_21 << y_12)) :> int32))))
      };
      
      (return __retres_13)
   }
}

int32 shift_left_signed_safe(int32 x_20, int32 y_11)
  requires (C_96 : true);
behavior default:
  ensures (C_95 : true);
{  
   (var int32 __retres_14);
   
   {  (if (x_20 < 0) then 
      (goto _LOR) else (if (y_11 < 0) then 
                       (goto _LOR) else (if ((C_92 : (y_11 :> uint32)) >= 32) then 
                                        (goto _LOR) else 
                                        {  
                                           (assert for default: (C_82 : 
                                                                (jessie : 
                                                                (y_11 >=
                                                                  0))));
                                           
                                           (assert for default: (C_81 : 
                                                                (jessie : 
                                                                (y_11 <
                                                                  32))));
                                           (if (x_20 >
                                                 (C_91 : ((C_90 : (2147483647 >>>
                                                                    y_11)) :> int32))) then 
                                           (goto _LOR) else 
                                           {  
                                              {  
                                                 (assert for default: 
                                                 (C_86 : (jessie : (y_11 >=
                                                                    0))));
                                                 
                                                 (assert for default: 
                                                 (C_85 : (jessie : (y_11 <
                                                                    32))));
                                                 
                                                 (assert for default: 
                                                 (C_84 : (jessie : (x_20 >=
                                                                    0))));
                                                 
                                                 (assert for default: 
                                                 (C_83 : (jessie : (x_20 <=
                                                                    (2147483647 >>>
                                                                    y_11)))));
                                                 (C_89 : (__retres_14 = 
                                                 (C_88 : ((C_87 : (x_20 <<
                                                                    y_11)) :> int32))))
                                              };
                                              
                                              (goto return_label)
                                           })
                                        })));
      (_LOR : 
      {  (C_93 : (__retres_14 = 0));
         
         (goto return_label)
      });
      (C_94 : (__retres_14 = 0));
      (return_label : 
      (return __retres_14))
   }
}

uint32 shift_left_unsigned_wrong(uint32 x_27, uint32 y_18)
behavior default:
  ensures (C_101 : true);
{  
   (var uint32 __retres_15);
   
   {  
      {  
         (assert for default: (C_97 : (jessie : (32 < 32))));
         (C_100 : (__retres_15 = (C_99 : ((C_98 : (x_27 * 4294967296)) :> uint32))))
      };
      
      (return __retres_15)
   }
}

uint32 shift_left_unsigned_unsafe(uint32 x_26, uint32 y_17)
behavior default:
  ensures (C_106 : true);
{  
   (var uint32 __retres_16);
   
   {  
      {  
         (assert for default: (C_102 : (jessie : (y_17 < 32))));
         (C_105 : (__retres_16 = (C_104 : ((C_103 : (x_26 << y_17)) :> uint32))))
      };
      
      (return __retres_16)
   }
}

uint32 shift_left_unsigned_safe(uint32 x_25, uint32 y_16)
  requires (C_113 : true);
behavior default:
  ensures (C_112 : true);
{  
   (var uint32 __retres_17);
   
   {  (if (y_16 >= 32) then 
      {  (C_111 : (__retres_17 = 0));
         
         (goto return_label)
      } else 
      {  
         {  
            (assert for default: (C_107 : (jessie : (y_16 < 32))));
            (C_110 : (__retres_17 = (C_109 : ((C_108 : (x_25 << y_16)) :> uint32))))
         };
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_17))
   }
}

int32 shift_right_signed_wrong_1(int32 x_30, int32 y_21)
behavior default:
  ensures (C_118 : true);
{  
   (var int32 __retres_18);
   
   {  
      {  
         (assert for default: (C_114 : (jessie : (-1 >= 0))));
         (C_117 : (__retres_18 = (C_116 : ((C_115 : (x_30 >>> -1)) :> int32))))
      };
      
      (return __retres_18)
   }
}

int32 shift_right_signed_wrong_2(int32 x_31, int32 y_22)
behavior default:
  ensures (C_123 : true);
{  
   (var int32 __retres_19);
   
   {  
      {  
         (assert for default: (C_119 : (jessie : (32 < 32))));
         (C_122 : (__retres_19 = (C_121 : ((C_120 : (x_31 / 4294967296)) :> int32))))
      };
      
      (return __retres_19)
   }
}

int32 shift_right_signed_unsafe(int32 x_29, int32 y_20)
behavior default:
  ensures (C_129 : true);
{  
   (var int32 __retres_20);
   
   {  
      {  
         (assert for default: (C_125 : (jessie : (y_20 >= 0))));
         
         (assert for default: (C_124 : (jessie : (y_20 < 32))));
         (C_128 : (__retres_20 = (C_127 : ((C_126 : (x_29 >>> y_20)) :> int32))))
      };
      
      (return __retres_20)
   }
}

int32 shift_right_signed_safe(int32 x_28, int32 y_19)
  requires (C_139 : true);
behavior default:
  ensures (C_138 : true);
{  
   (var int32 __retres_21);
   
   {  (if (y_19 < 0) then 
      (goto _LOR) else (if ((C_135 : (y_19 :> uint32)) >= 32) then 
                       (goto _LOR) else 
                       {  
                          {  
                             (assert for default: (C_131 : (jessie : 
                                                           (y_19 >=
                                                             0))));
                             
                             (assert for default: (C_130 : (jessie : 
                                                           (y_19 <
                                                             32))));
                             (C_134 : (__retres_21 = (C_133 : ((C_132 : 
                                                               (x_28 >>>
                                                                 y_19)) :> int32))))
                          };
                          
                          (goto return_label)
                       }));
      (_LOR : 
      {  (C_136 : (__retres_21 = 0));
         
         (goto return_label)
      });
      (C_137 : (__retres_21 = 0));
      (return_label : 
      (return __retres_21))
   }
}

uint32 shift_right_unsigned_wrong(uint32 x_34, uint32 y_25)
behavior default:
  ensures (C_144 : true);
{  
   (var uint32 __retres_22);
   
   {  
      {  
         (assert for default: (C_140 : (jessie : (32 < 32))));
         (C_143 : (__retres_22 = (C_142 : ((C_141 : (x_34 / 4294967296)) :> uint32))))
      };
      
      (return __retres_22)
   }
}

uint32 shift_right_unsigned_unsafe(uint32 x_33, uint32 y_24)
behavior default:
  ensures (C_149 : true);
{  
   (var uint32 __retres_23);
   
   {  
      {  
         (assert for default: (C_145 : (jessie : (y_24 < 32))));
         (C_148 : (__retres_23 = (C_147 : ((C_146 : (x_33 >> y_24)) :> uint32))))
      };
      
      (return __retres_23)
   }
}

uint32 shift_right_unsigned_safe(uint32 x_32, uint32 y_23)
  requires (C_156 : true);
behavior default:
  ensures (C_155 : true);
{  
   (var uint32 __retres_24);
   
   {  (if (y_23 >= 32) then 
      {  (C_154 : (__retres_24 = 0));
         
         (goto return_label)
      } else 
      {  
         {  
            (assert for default: (C_150 : (jessie : (y_23 < 32))));
            (C_153 : (__retres_24 = (C_152 : ((C_151 : (x_32 >> y_23)) :> uint32))))
         };
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_24))
   }
}

int32 null_ptr_wrong(intP[..] x_15)
behavior default:
  ensures (C_160 : true);
{  
   (var int32 __retres_25);
   
   {  (C_157 : (x_15 = null));
      (C_159 : (__retres_25 = (C_158 : x_15.intM)));
      
      (return __retres_25)
   }
}

int32 null_ptr_unsafe(intP[..] x_14)
  requires (C_164 : ((C_165 : (\offset_min(x_14) <= 0)) &&
                      (C_166 : (\offset_max(x_14) >= 0))));
behavior default:
  ensures (C_163 : true);
{  
   (var int32 __retres_26);
   
   {  (C_162 : (__retres_26 = (C_161 : x_14.intM)));
      
      (return __retres_26)
   }
}

int32 null_ptr_safe(intP[..] x_13)
  requires (C_171 : (((\offset_min(x_13) <= 0) && (\offset_max(x_13) >= 0)) ||
                      (x_13 == null)));
behavior default:
  ensures (C_170 : true);
{  
   (var int32 __retres_27);
   
   {  (if (x_13 == null) then 
      {  (C_169 : (__retres_27 = 0));
         
         (goto return_label)
      } else 
      {  (C_168 : (__retres_27 = (C_167 : x_13.intM)));
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_27))
   }
}

intP[..] bad_local_pointer()
behavior default:
  ensures (C_176 : ((C_177 : (\offset_min(\result) <= 0)) &&
                     (C_178 : (\offset_max(\result) >= 0))));
{  
   (var intP[0] x_41);
   
   (var intP[..] __retres_28);
   
   {  (C_173 : (x_41 = (C_172 : (new intP[1]))));
      (C_174 : (__retres_28 = x_41));
      
      {  (C_175 : (free(x_41)));
         
         (return __retres_28)
      }
   }
}

int32 stack_access_wrong()
behavior default:
  ensures (C_183 : true);
{  
   (var intP[..] x_42);
   
   (var int32 __retres_29);
   
   {  (C_180 : (x_42 = (C_179 : bad_local_pointer())));
      (C_182 : (__retres_29 = (C_181 : x_42.intM)));
      
      (return __retres_29)
   }
}

int32 ptr_sub_wrong()
behavior default:
  ensures (C_196 : true);
{  
   (var intP[0..19] a_0);
   
   (var intP[0..9] b);
   
   (var intP[..] x_43);
   
   (var intP[..] y_29);
   
   (var int32 __retres_30);
   
   {  (C_185 : (a_0 = (C_184 : (new intP[20]))));
      (C_187 : (b = (C_186 : (new intP[10]))));
      (C_189 : (x_43 = (C_188 : (a_0 + 2))));
      (C_190 : (y_29 = b));
      (C_193 : (__retres_30 = (C_192 : ((C_191 : (x_43 - y_29)) :> int32))));
      
      {  (C_194 : (free(a_0)));
         (C_195 : (free(b)));
         
         (return __retres_30)
      }
   }
}

int32 ptr_sub_unsafe(intP[..] x_19, intP[..] y_10)
  requires (C_201 : (((C_203 : (\offset_min(x_19) <= 0)) &&
                       (C_204 : (\offset_max(x_19) >= 0))) &&
                      ((C_206 : (\offset_min(y_10) <= 0)) &&
                        (C_207 : (\offset_max(y_10) >= 0)))));
behavior default:
  ensures (C_200 : true);
{  
   (var int32 __retres_31);
   
   {  (C_199 : (__retres_31 = (C_198 : ((C_197 : (x_19 - y_10)) :> int32))));
      
      (return __retres_31)
   }
}

int32 ptr_sub_safe()
  requires (C_218 : true);
behavior default:
  ensures (C_217 : true);
{  
   (var intP[0..2] a_0_0);
   
   (var intP[..] x_44);
   
   (var intP[..] y_30);
   
   (var int32 __retres_32);
   
   {  (C_209 : (a_0_0 = (C_208 : (new intP[3]))));
      (C_211 : (x_44 = (C_210 : (a_0_0 + 2))));
      (C_212 : (y_30 = a_0_0));
      (C_215 : (__retres_32 = (C_214 : ((C_213 : (x_44 - y_30)) :> int32))));
      
      {  (C_216 : (free(a_0_0)));
         
         (return __retres_32)
      }
   }
}

intP[0..1] a;

invariant valid_a :
((\offset_min(a) <= 0) && (\offset_max(a) >= 1))

int32 oob_pointer_wrong(uint32 x_18)
behavior default:
  ensures (C_224 : true);
{  
   (var intP[..] i_6);
   
   (var int32 __retres_33);
   
   {  (C_221 : (i_6 = (C_220 : ((C_219 : (a + x_18)) + 2))));
      (C_223 : (__retres_33 = (C_222 : i_6.intM)));
      
      (return __retres_33)
   }
}

int32 oob_pointer_unsafe(uint32 x_17)
  requires (C_230 : ((C_231 : (0 <= x_17)) && (C_232 : (x_17 < 2))));
behavior default:
  ensures (C_229 : true);
{  
   (var intP[..] i_7);
   
   (var int32 __retres_34);
   
   {  (C_226 : (i_7 = (C_225 : (a + x_17))));
      (C_228 : (__retres_34 = (C_227 : i_7.intM)));
      
      (return __retres_34)
   }
}

int32 oob_pointer_safe(uint32 x_16)
behavior default:
  ensures (C_238 : true);
{  
   (var intP[..] i_8);
   
   (var int32 __retres_35);
   
   {  (if (x_16 < 2) then 
      {  (C_235 : (i_8 = (C_234 : (a + x_16))));
         (C_237 : (__retres_35 = (C_236 : i_8.intM)));
         
         (goto return_label)
      } else 
      {  (C_233 : (__retres_35 = 0));
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_35))
   }
}

int32 array_bounds_wrong(uint32 i_1)
behavior default:
  ensures (C_243 : true);
{  
   (var int32 __retres_36);
   
   {  (C_242 : (__retres_36 = (C_241 : (a +
                                         (C_240 : ((C_239 : (2 + i_1)) :> uint32))).intM)));
      
      (return __retres_36)
   }
}

int32 array_bounds_unsafe(uint32 i_0)
  requires (C_247 : (i_0 < 2));
behavior default:
  ensures (C_246 : true);
{  
   (var int32 __retres_37);
   
   {  (C_245 : (__retres_37 = (C_244 : (a + i_0).intM)));
      
      (return __retres_37)
   }
}

int32 array_bounds_safe(uint32 i)
  requires (C_253 : true);
behavior default:
  ensures (C_252 : true);
{  
   (var int32 __retres_38);
   
   {  (if (i < 2) then 
      {  (C_251 : (__retres_38 = (C_250 : (a + i).intM)));
         
         (goto return_label)
      } else 
      {  (C_249 : (__retres_38 = (C_248 : (a + 0).intM)));
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_38))
   }
}

int32 initialization_wrong()
behavior default:
  ensures (C_254 : true);
{  
   (var int32 x_45);
   
   {  
      (return x_45)
   }
}

int32 initialization_unsafe(int32 i_3)
  requires (C_257 : (i_3 != 0));
behavior default:
  ensures (C_256 : true);
{  
   (var int32 x_46);
   
   {  (if (i_3 != 0) then (C_255 : (x_46 = 1)) else ());
      
      (return x_46)
   }
}

int32 initialization_safe(int32 i_2)
  requires (C_261 : true);
behavior default:
  ensures (C_260 : true);
{  
   (var int32 x_47);
   
   {  (if (i_2 != 0) then (C_259 : (x_47 = 1)) else (C_258 : (x_47 = 2)));
      
      (return x_47)
   }
}

int32 signed_overflow_wrong(int32 x_37)
behavior default:
  ensures (C_270 : true);
{  
   (var int32 __retres_39);
   
   {  (if (x_37 > 0) then 
      {  (C_269 : (__retres_39 = (C_268 : ((C_267 : (x_37 + 2147483647)) :> int32))));
         
         (goto return_label)
      } else 
      {  (C_266 : (__retres_39 = (C_265 : ((C_264 : ((C_263 : ((C_262 : 
                                                               (x_37 -
                                                                 1)) :> int32)) -
                                                      2147483647)) :> int32))));
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_39))
   }
}

int32 signed_overflow_unsafe(int32 x_36)
  requires (C_275 : (x_36 <= (2147483647 - 10)));
behavior default:
  ensures (C_274 : true);
{  
   (var int32 __retres_40);
   
   {  (C_273 : (__retres_40 = (C_272 : ((C_271 : (x_36 + 10)) :> int32))));
      
      (return __retres_40)
   }
}

int32 signed_overflow_safe(int32 x_35)
  requires (C_283 : true);
behavior default:
  ensures (C_282 : true);
{  
   (var int32 __retres_41);
   
   {  (if (x_35 < 0) then 
      {  (C_281 : (__retres_41 = (C_280 : ((C_279 : (x_35 + 2147483647)) :> int32))));
         
         (goto return_label)
      } else 
      {  (C_278 : (__retres_41 = (C_277 : ((C_276 : (x_35 - 2147483647)) :> int32))));
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_41))
   }
}

int32 missing_return_wrong(int32 x_6)
behavior default:
  ensures (C_286 : true);
{  
   (var int32 __retres_42);
   
   {  
      {  
         (assert for default: (C_284 : (jessie : false)));
         ()
      };
      (C_285 : (__retres_42 = 0));
      
      (return __retres_42)
   }
}

int32 missing_return_unsafe(int32 x_5)
  requires (C_291 : (x_5 < 0));
behavior default:
  ensures (C_290 : true);
{  
   (var int32 __retres_43);
   
   {  (if (x_5 < 0) then 
      {  (C_287 : (__retres_43 = 0));
         
         (goto return_label)
      } else ());
      
      {  
         (assert for default: (C_288 : (jessie : false)));
         ()
      };
      (C_289 : (__retres_43 = 0));
      (return_label : 
      (return __retres_43))
   }
}

int32 missing_return_safe(int32 x_4)
  requires (C_295 : true);
behavior default:
  ensures (C_294 : true);
{  
   (var int32 __retres_44);
   
   {  (if (x_4 < 0) then 
      {  (C_293 : (__retres_44 = 0));
         
         (goto return_label)
      } else 
      {  (C_292 : (__retres_44 = 1));
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_44))
   }
}

int32 multiple_update_wrong_1(intP[..] x_12, intP[..] y_9)
behavior default:
  ensures (C_305 : true);
{  
   (var int32 tmp);
   
   (var int32 tmp_0);
   
   (var int32 __retres_45);
   
   {  
      {  
         {  (C_296 : (tmp = 0));
            (C_298 : ((C_297 : x_12.intM) = tmp))
         };
         
         {  (C_299 : (tmp_0 = 0));
            (C_301 : ((C_300 : x_12.intM) = tmp_0))
         }
      };
      (C_304 : (__retres_45 = (C_303 : ((C_302 : (tmp + tmp_0)) :> int32))));
      
      (return __retres_45)
   }
}

int32 multiple_update_wrong_2(int32 i_4)
behavior default:
  ensures (C_312 : true);
{  
   {  
      {  (C_308 : (i_4 = (C_307 : ((C_306 : (i_4 + 1)) :> int32))));
         (C_311 : (i_4 = (C_310 : ((C_309 : (i_4 + 1)) :> int32))))
      };
      
      (return i_4)
   }
}

int32 multiple_update_wrong_3(int32 i_5)
behavior default:
  ensures (C_319 : true);
{  
   (var int32 tmp_0_0);
   
   {  
      {  (C_313 : (tmp_0_0 = i_5));
         (C_316 : (i_5 = (C_315 : ((C_314 : (i_5 + 1)) :> int32))));
         (C_318 : ((C_317 : (a + tmp_0_0).intM) = i_5))
      };
      
      (return i_5)
   }
}

int32 multiple_update_unsafe(intP[..] x_11, intP[..] y_8)
  requires (C_330 : (x_11 != y_8));
behavior default:
  ensures (C_329 : true);
{  
   (var int32 tmp_0_1);
   
   (var int32 tmp_0_2);
   
   (var int32 __retres_46);
   
   {  
      {  
         {  (C_320 : (tmp_0_1 = 0));
            (C_322 : ((C_321 : x_11.intM) = tmp_0_1))
         };
         
         {  (C_323 : (tmp_0_2 = 0));
            (C_325 : ((C_324 : y_8.intM) = tmp_0_2))
         }
      };
      (C_328 : (__retres_46 = (C_327 : ((C_326 : (tmp_0_1 + tmp_0_2)) :> int32))));
      
      (return __retres_46)
   }
}

int32 multiple_update_safe(intP[..] x_10, intP[..] y_7)
  requires (C_342 : true);
behavior default:
  ensures (C_341 : true);
{  
   (var int32 tmp_0_3);
   
   (var int32 tmp_0_4);
   
   (var int32 __retres_47);
   
   {  (if (x_10 == y_7) then 
      {  (C_340 : (__retres_47 = 0));
         
         (goto return_label)
      } else 
      {  
         {  
            {  (C_331 : (tmp_0_3 = 0));
               (C_333 : ((C_332 : x_10.intM) = tmp_0_3))
            };
            
            {  (C_334 : (tmp_0_4 = 0));
               (C_336 : ((C_335 : y_7.intM) = tmp_0_4))
            }
         };
         (C_339 : (__retres_47 = (C_338 : ((C_337 : (tmp_0_3 + tmp_0_4)) :> int32))));
         
         (goto return_label)
      });
      (return_label : 
      (return __retres_47))
   }
}

int32 foo(int32 unnamed, int32 unnamed_0)
behavior default:
  assigns \nothing;
  ensures (C_343 : true);
;

int32 bar()
behavior default:
  assigns \nothing;
  ensures (C_344 : true);
;

int32 baz()
behavior default:
  assigns \nothing;
  ensures (C_345 : true);
;

int32 order_of_arg_eval()
behavior default:
  ensures (C_352 : true);
{  
   (var int32 tmp_0_5);
   
   (var int32 tmp_0_6);
   
   (var int32 tmp_1);
   
   {  
      {  (C_347 : (tmp_0_5 = (C_346 : baz())));
         (C_349 : (tmp_0_6 = (C_348 : bar())))
      };
      (C_351 : (tmp_1 = (C_350 : foo(tmp_0_6, tmp_0_5))));
      
      (return tmp_1)
   }
}

int32 volatile_cast_wrong(intP[..] ip_0)
behavior default:
  ensures (C_356 : true);
{  
   (var intP[..] x_48);
   
   (var int32 __retres_48);
   
   {  (C_353 : (x_48 = ip_0));
      (C_355 : (__retres_48 = (C_354 : x_48.intM)));
      
      (return __retres_48)
   }
}

int32 const_cast_wrong(intP[..] ip)
behavior default:
  ensures (C_361 : true);
{  
   (var intP[..] x_49);
   
   (var int32 __retres_49);
   
   {  (C_357 : (x_49 = ip));
      (C_359 : ((C_358 : x_49.intM) = 1));
      (C_360 : (__retres_49 = 1));
      
      (return __retres_49)
   }
}

unit mod_string()
behavior default:
  ensures (C_366 : true);
{  
   (var charP[..] str);
   
   {  (C_362 : (str = __string_abc));
      (C_365 : ((C_364 : (C_363 : (str + 2)).charM) = 122));
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs undef.jessie/undef.cloc undef.jessie/undef.jc
type __string_abc_1

type a_2

type charP

type int32

type int8

type intP

type padding

type uint16

type uint32

type uint8

type unsigned_charP

type unsigned_shortP

type voidP

logic __string_abc:  -> charP pointer

logic a:  -> intP pointer

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16, y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32, y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_shortP(p:unsigned_shortP pointer, a:int,
 unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 (offset_min(unsigned_shortP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

logic memchr: charP pointer, int, int, (charP, int8) memory -> bool

logic memcmp: charP pointer, charP pointer, int, (charP, int8) memory,
 (charP, int8) memory -> int

logic memset: charP pointer, int, int, (charP, int8) memory -> bool

axiom no_assign_memchr_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s_5_at_L:(charP, int8) memory.
     (forall n_2:int.
      (forall c:int.
       (forall s_0:charP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s_0), (0), sub_int(n_2, (1))))
         and not_assigns(tmpalloc, charP_charM_s_5_at_L, tmpmem, tmp)) ->
         (memchr(s_0, c, n_2, charP_charM_s_5_at_L) = memchr(s_0, c, n_2,
                                                      tmpmem))))))))))

axiom no_assign_memcmp_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_3_at_L:(charP, int8) memory.
     (forall charP_charM_s2_4_at_L:(charP, int8) memory.
      (forall n:int.
       (forall s2_1:charP pointer.
        (forall s1_1:charP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s2_1), (0), sub_int(n, (1))))
          and not_assigns(tmpalloc, charP_charM_s2_4_at_L, tmpmem, tmp)) ->
          (memcmp(s1_1, s2_1, n, charP_charM_s2_4_at_L,
           charP_charM_s1_3_at_L) = memcmp(s1_1, s2_1, n, tmpmem,
                                    charP_charM_s1_3_at_L)))))))))))

axiom no_assign_memcmp_1 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_3_at_L:(charP, int8) memory.
     (forall charP_charM_s2_4_at_L:(charP, int8) memory.
      (forall n:int.
       (forall s2_1:charP pointer.
        (forall s1_1:charP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s1_1), (0), sub_int(n, (1))))
          and not_assigns(tmpalloc, charP_charM_s1_3_at_L, tmpmem, tmp)) ->
          (memcmp(s1_1, s2_1, n, charP_charM_s2_4_at_L,
           charP_charM_s1_3_at_L) = memcmp(s1_1, s2_1, n,
                                    charP_charM_s2_4_at_L, tmpmem)))))))))))

axiom no_assign_memset_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s_1_6_at_L:(charP, int8) memory.
     (forall n_4:int.
      (forall c_1:int.
       (forall s_1:charP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s_1), (0), sub_int(n_4, (1))))
         and not_assigns(tmpalloc, charP_charM_s_1_6_at_L, tmpmem, tmp)) ->
         (memset(s_1, c_1, n_4, charP_charM_s_1_6_at_L) = memset(s_1, c_1,
                                                          n_4, tmpmem))))))))))

logic strlen: charP pointer, (charP, int8) memory -> int

logic strchr: charP pointer, int, (charP, int8) memory -> bool

axiom no_assign_strchr_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s_15_12_at_L:(charP, int8) memory.
     (forall c_3:int.
      (forall s_15:charP pointer.
       ((pset_disjoint(tmp,
         pset_range(pset_singleton(s_15), (0),
         strlen(s_15, charP_charM_s_15_12_at_L)))
        and not_assigns(tmpalloc, charP_charM_s_15_12_at_L, tmpmem, tmp)) ->
        (strchr(s_15, c_3, charP_charM_s_15_12_at_L) = strchr(s_15, c_3,
                                                       tmpmem)))))))))

logic strcmp: charP pointer, charP pointer, (charP, int8) memory,
 (charP, int8) memory -> int

axiom no_assign_strcmp_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_6_8_at_L:(charP, int8) memory.
     (forall charP_charM_s2_6_9_at_L:(charP, int8) memory.
      (forall s2_6:charP pointer.
       (forall s1_6:charP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s2_6), (0),
          strlen(s2_6, charP_charM_s2_6_9_at_L)))
         and not_assigns(tmpalloc, charP_charM_s2_6_9_at_L, tmpmem, tmp)) ->
         (strcmp(s1_6, s2_6, charP_charM_s2_6_9_at_L,
          charP_charM_s1_6_8_at_L) = strcmp(s1_6, s2_6, tmpmem,
                                     charP_charM_s1_6_8_at_L))))))))))

axiom no_assign_strcmp_1 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_6_8_at_L:(charP, int8) memory.
     (forall charP_charM_s2_6_9_at_L:(charP, int8) memory.
      (forall s2_6:charP pointer.
       (forall s1_6:charP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s1_6), (0),
          strlen(s1_6, charP_charM_s1_6_8_at_L)))
         and not_assigns(tmpalloc, charP_charM_s1_6_8_at_L, tmpmem, tmp)) ->
         (strcmp(s1_6, s2_6, charP_charM_s2_6_9_at_L,
          charP_charM_s1_6_8_at_L) = strcmp(s1_6, s2_6,
                                     charP_charM_s2_6_9_at_L, tmpmem))))))))))

axiom no_assign_strlen_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
     (forall s_3:charP pointer.
      ((pset_disjoint(tmp, pset_range_right(pset_singleton(s_3), (0)))
       and not_assigns(tmpalloc, charP_charM_s_3_7_at_L, tmpmem, tmp)) ->
       (strlen(s_3, charP_charM_s_3_7_at_L) = strlen(s_3, tmpmem))))))))

logic strncmp: charP pointer, charP pointer, int, (charP, int8) memory,
 (charP, int8) memory -> int

axiom no_assign_strncmp_0 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_9_10_at_L:(charP, int8) memory.
     (forall charP_charM_s2_9_11_at_L:(charP, int8) memory.
      (forall n_10:int.
       (forall s2_9:charP pointer.
        (forall s1_9:charP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s2_9), (0), sub_int(n_10, (1))))
          and not_assigns(tmpalloc, charP_charM_s2_9_11_at_L, tmpmem, tmp)) ->
          (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_11_at_L,
           charP_charM_s1_9_10_at_L) = strncmp(s1_9, s2_9, n_10, tmpmem,
                                       charP_charM_s1_9_10_at_L)))))))))))

axiom no_assign_strncmp_1 :
 (forall tmp:charP pset.
  (forall tmpmem:(charP, int8) memory.
   (forall tmpalloc:charP alloc_table.
    (forall charP_charM_s1_9_10_at_L:(charP, int8) memory.
     (forall charP_charM_s2_9_11_at_L:(charP, int8) memory.
      (forall n_10:int.
       (forall s2_9:charP pointer.
        (forall s1_9:charP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s1_9), (0), sub_int(n_10, (1))))
          and not_assigns(tmpalloc, charP_charM_s1_9_10_at_L, tmpmem, tmp)) ->
          (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_11_at_L,
           charP_charM_s1_9_10_at_L) = strncmp(s1_9, s2_9, n_10,
                                       charP_charM_s2_9_11_at_L, tmpmem)))))))))))

logic wcslen: unsigned_shortP pointer,
 (unsigned_shortP, uint16) memory -> int

logic wcscmp: unsigned_shortP pointer, unsigned_shortP pointer,
 (unsigned_shortP, uint16) memory, (unsigned_shortP, uint16) memory -> int

axiom no_assign_wcscmp_0 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s1_11_14_at_L:
     (unsigned_shortP, uint16) memory.
     (forall unsigned_shortP_unsigned_shortM_s2_11_15_at_L:
      (unsigned_shortP, uint16) memory.
      (forall s2_11:unsigned_shortP pointer.
       (forall s1_11:unsigned_shortP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s2_11), (0),
          wcslen(s2_11, unsigned_shortP_unsigned_shortM_s2_11_15_at_L)))
         and not_assigns(tmpalloc,
             unsigned_shortP_unsigned_shortM_s2_11_15_at_L, tmpmem, tmp)) ->
         (wcscmp(s1_11, s2_11, unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
          unsigned_shortP_unsigned_shortM_s1_11_14_at_L) = wcscmp(s1_11,
                                                           s2_11, tmpmem,
                                                           unsigned_shortP_unsigned_shortM_s1_11_14_at_L))))))))))

axiom no_assign_wcscmp_1 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s1_11_14_at_L:
     (unsigned_shortP, uint16) memory.
     (forall unsigned_shortP_unsigned_shortM_s2_11_15_at_L:
      (unsigned_shortP, uint16) memory.
      (forall s2_11:unsigned_shortP pointer.
       (forall s1_11:unsigned_shortP pointer.
        ((pset_disjoint(tmp,
          pset_range(pset_singleton(s1_11), (0),
          wcslen(s1_11, unsigned_shortP_unsigned_shortM_s1_11_14_at_L)))
         and not_assigns(tmpalloc,
             unsigned_shortP_unsigned_shortM_s1_11_14_at_L, tmpmem, tmp)) ->
         (wcscmp(s1_11, s2_11, unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
          unsigned_shortP_unsigned_shortM_s1_11_14_at_L) = wcscmp(s1_11,
                                                           s2_11,
                                                           unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
                                                           tmpmem))))))))))

axiom no_assign_wcslen_0 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:
     (unsigned_shortP, uint16) memory.
     (forall s_17:unsigned_shortP pointer.
      ((pset_disjoint(tmp, pset_range_right(pset_singleton(s_17), (0)))
       and not_assigns(tmpalloc,
           unsigned_shortP_unsigned_shortM_s_17_13_at_L, tmpmem, tmp)) ->
       (wcslen(s_17, unsigned_shortP_unsigned_shortM_s_17_13_at_L) = 
       wcslen(s_17, tmpmem))))))))

logic wcsncmp: unsigned_shortP pointer, unsigned_shortP pointer, int,
 (unsigned_shortP, uint16) memory, (unsigned_shortP, uint16) memory -> int

axiom no_assign_wcsncmp_0 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s1_13_16_at_L:
     (unsigned_shortP, uint16) memory.
     (forall unsigned_shortP_unsigned_shortM_s2_13_17_at_L:
      (unsigned_shortP, uint16) memory.
      (forall n_12:int.
       (forall s2_13:unsigned_shortP pointer.
        (forall s1_13:unsigned_shortP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s2_13), (0), sub_int(n_12, (1))))
          and not_assigns(tmpalloc,
              unsigned_shortP_unsigned_shortM_s2_13_17_at_L, tmpmem, tmp)) ->
          (wcsncmp(s1_13, s2_13, n_12,
           unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
           unsigned_shortP_unsigned_shortM_s1_13_16_at_L) = wcsncmp(s1_13,
                                                            s2_13, n_12,
                                                            tmpmem,
                                                            unsigned_shortP_unsigned_shortM_s1_13_16_at_L)))))))))))

axiom no_assign_wcsncmp_1 :
 (forall tmp:unsigned_shortP pset.
  (forall tmpmem:(unsigned_shortP, uint16) memory.
   (forall tmpalloc:unsigned_shortP alloc_table.
    (forall unsigned_shortP_unsigned_shortM_s1_13_16_at_L:
     (unsigned_shortP, uint16) memory.
     (forall unsigned_shortP_unsigned_shortM_s2_13_17_at_L:
      (unsigned_shortP, uint16) memory.
      (forall n_12:int.
       (forall s2_13:unsigned_shortP pointer.
        (forall s1_13:unsigned_shortP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(s1_13), (0), sub_int(n_12, (1))))
          and not_assigns(tmpalloc,
              unsigned_shortP_unsigned_shortM_s1_13_16_at_L, tmpmem, tmp)) ->
          (wcsncmp(s1_13, s2_13, n_12,
           unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
           unsigned_shortP_unsigned_shortM_s1_13_16_at_L) = wcsncmp(s1_13,
                                                            s2_13, n_12,
                                                            unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
                                                            tmpmem)))))))))))

axiom no_update_memchr_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s_5_at_L:(charP, int8) memory.
    (forall n_2:int.
     (forall c:int.
      (forall s_0:charP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s_0), (0), sub_int(n_2, (1))))) ->
        (memchr(s_0, c, n_2, charP_charM_s_5_at_L) = memchr(s_0, c, n_2,
                                                     store(charP_charM_s_5_at_L,
                                                     tmp, tmpval))))))))))

axiom no_update_memcmp_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_3_at_L:(charP, int8) memory.
    (forall charP_charM_s2_4_at_L:(charP, int8) memory.
     (forall n:int.
      (forall s2_1:charP pointer.
       (forall s1_1:charP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s2_1), (0), sub_int(n, (1))))) ->
         (memcmp(s1_1, s2_1, n, charP_charM_s2_4_at_L, charP_charM_s1_3_at_L) = 
         memcmp(s1_1, s2_1, n, store(charP_charM_s2_4_at_L, tmp, tmpval),
         charP_charM_s1_3_at_L))))))))))

axiom no_update_memcmp_1 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_3_at_L:(charP, int8) memory.
    (forall charP_charM_s2_4_at_L:(charP, int8) memory.
     (forall n:int.
      (forall s2_1:charP pointer.
       (forall s1_1:charP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s1_1), (0), sub_int(n, (1))))) ->
         (memcmp(s1_1, s2_1, n, charP_charM_s2_4_at_L, charP_charM_s1_3_at_L) = 
         memcmp(s1_1, s2_1, n, charP_charM_s2_4_at_L,
         store(charP_charM_s1_3_at_L, tmp, tmpval)))))))))))

axiom no_update_memset_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s_1_6_at_L:(charP, int8) memory.
    (forall n_4:int.
     (forall c_1:int.
      (forall s_1:charP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s_1), (0), sub_int(n_4, (1))))) ->
        (memset(s_1, c_1, n_4, charP_charM_s_1_6_at_L) = memset(s_1, c_1,
                                                         n_4,
                                                         store(charP_charM_s_1_6_at_L,
                                                         tmp, tmpval))))))))))

axiom no_update_strchr_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s_15_12_at_L:(charP, int8) memory.
    (forall c_3:int.
     (forall s_15:charP pointer.
      ((not in_pset(tmp,
            pset_range(pset_singleton(s_15), (0),
            strlen(s_15, charP_charM_s_15_12_at_L)))) ->
       (strchr(s_15, c_3, charP_charM_s_15_12_at_L) = strchr(s_15, c_3,
                                                      store(charP_charM_s_15_12_at_L,
                                                      tmp, tmpval)))))))))

axiom no_update_strcmp_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_6_8_at_L:(charP, int8) memory.
    (forall charP_charM_s2_6_9_at_L:(charP, int8) memory.
     (forall s2_6:charP pointer.
      (forall s1_6:charP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s2_6), (0),
             strlen(s2_6, charP_charM_s2_6_9_at_L)))) ->
        (strcmp(s1_6, s2_6, charP_charM_s2_6_9_at_L, charP_charM_s1_6_8_at_L) = 
        strcmp(s1_6, s2_6, store(charP_charM_s2_6_9_at_L, tmp, tmpval),
        charP_charM_s1_6_8_at_L)))))))))

axiom no_update_strcmp_1 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_6_8_at_L:(charP, int8) memory.
    (forall charP_charM_s2_6_9_at_L:(charP, int8) memory.
     (forall s2_6:charP pointer.
      (forall s1_6:charP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s1_6), (0),
             strlen(s1_6, charP_charM_s1_6_8_at_L)))) ->
        (strcmp(s1_6, s2_6, charP_charM_s2_6_9_at_L, charP_charM_s1_6_8_at_L) = 
        strcmp(s1_6, s2_6, charP_charM_s2_6_9_at_L,
        store(charP_charM_s1_6_8_at_L, tmp, tmpval))))))))))

axiom no_update_strlen_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s_3:charP pointer.
     ((not in_pset(tmp, pset_range_right(pset_singleton(s_3), (0)))) ->
      (strlen(s_3, charP_charM_s_3_7_at_L) = strlen(s_3,
                                             store(charP_charM_s_3_7_at_L,
                                             tmp, tmpval))))))))

axiom no_update_strncmp_0 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_9_10_at_L:(charP, int8) memory.
    (forall charP_charM_s2_9_11_at_L:(charP, int8) memory.
     (forall n_10:int.
      (forall s2_9:charP pointer.
       (forall s1_9:charP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s2_9), (0), sub_int(n_10, (1))))) ->
         (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_11_at_L,
          charP_charM_s1_9_10_at_L) = strncmp(s1_9, s2_9, n_10,
                                      store(charP_charM_s2_9_11_at_L, tmp,
                                      tmpval), charP_charM_s1_9_10_at_L))))))))))

axiom no_update_strncmp_1 :
 (forall tmp:charP pointer.
  (forall tmpval:int8.
   (forall charP_charM_s1_9_10_at_L:(charP, int8) memory.
    (forall charP_charM_s2_9_11_at_L:(charP, int8) memory.
     (forall n_10:int.
      (forall s2_9:charP pointer.
       (forall s1_9:charP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s1_9), (0), sub_int(n_10, (1))))) ->
         (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_11_at_L,
          charP_charM_s1_9_10_at_L) = strncmp(s1_9, s2_9, n_10,
                                      charP_charM_s2_9_11_at_L,
                                      store(charP_charM_s1_9_10_at_L, tmp,
                                      tmpval)))))))))))

axiom no_update_wcscmp_0 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s1_11_14_at_L:
    (unsigned_shortP, uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s2_11_15_at_L:
     (unsigned_shortP, uint16) memory.
     (forall s2_11:unsigned_shortP pointer.
      (forall s1_11:unsigned_shortP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s2_11), (0),
             wcslen(s2_11, unsigned_shortP_unsigned_shortM_s2_11_15_at_L)))) ->
        (wcscmp(s1_11, s2_11, unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
         unsigned_shortP_unsigned_shortM_s1_11_14_at_L) = wcscmp(s1_11,
                                                          s2_11,
                                                          store(unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
                                                          tmp, tmpval),
                                                          unsigned_shortP_unsigned_shortM_s1_11_14_at_L)))))))))

axiom no_update_wcscmp_1 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s1_11_14_at_L:
    (unsigned_shortP, uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s2_11_15_at_L:
     (unsigned_shortP, uint16) memory.
     (forall s2_11:unsigned_shortP pointer.
      (forall s1_11:unsigned_shortP pointer.
       ((not in_pset(tmp,
             pset_range(pset_singleton(s1_11), (0),
             wcslen(s1_11, unsigned_shortP_unsigned_shortM_s1_11_14_at_L)))) ->
        (wcscmp(s1_11, s2_11, unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
         unsigned_shortP_unsigned_shortM_s1_11_14_at_L) = wcscmp(s1_11,
                                                          s2_11,
                                                          unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
                                                          store(unsigned_shortP_unsigned_shortM_s1_11_14_at_L,
                                                          tmp, tmpval))))))))))

axiom no_update_wcslen_0 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:
    (unsigned_shortP, uint16) memory.
    (forall s_17:unsigned_shortP pointer.
     ((not in_pset(tmp, pset_range_right(pset_singleton(s_17), (0)))) ->
      (wcslen(s_17, unsigned_shortP_unsigned_shortM_s_17_13_at_L) = wcslen(s_17,
                                                                    store(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
                                                                    tmp,
                                                                    tmpval))))))))

axiom no_update_wcsncmp_0 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s1_13_16_at_L:
    (unsigned_shortP, uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s2_13_17_at_L:
     (unsigned_shortP, uint16) memory.
     (forall n_12:int.
      (forall s2_13:unsigned_shortP pointer.
       (forall s1_13:unsigned_shortP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s2_13), (0), sub_int(n_12, (1))))) ->
         (wcsncmp(s1_13, s2_13, n_12,
          unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
          unsigned_shortP_unsigned_shortM_s1_13_16_at_L) = wcsncmp(s1_13,
                                                           s2_13, n_12,
                                                           store(unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
                                                           tmp, tmpval),
                                                           unsigned_shortP_unsigned_shortM_s1_13_16_at_L))))))))))

axiom no_update_wcsncmp_1 :
 (forall tmp:unsigned_shortP pointer.
  (forall tmpval:uint16.
   (forall unsigned_shortP_unsigned_shortM_s1_13_16_at_L:
    (unsigned_shortP, uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s2_13_17_at_L:
     (unsigned_shortP, uint16) memory.
     (forall n_12:int.
      (forall s2_13:unsigned_shortP pointer.
       (forall s1_13:unsigned_shortP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(s1_13), (0), sub_int(n_12, (1))))) ->
         (wcsncmp(s1_13, s2_13, n_12,
          unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
          unsigned_shortP_unsigned_shortM_s1_13_16_at_L) = wcsncmp(s1_13,
                                                           s2_13, n_12,
                                                           unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
                                                           store(unsigned_shortP_unsigned_shortM_s1_13_16_at_L,
                                                           tmp, tmpval)))))))))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic unsigned_shortP_of_pointer_address: unit pointer -> unsigned_shortP pointer

axiom pointer_addr_of_unsigned_shortP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_shortP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_shortP(p:unsigned_shortP pointer,
 b:int, unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 (offset_max(unsigned_shortP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_shortP(p:unsigned_shortP pointer, a:int,
 b:int, unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 ((offset_min(unsigned_shortP_alloc_table, p) = a)
 and (offset_max(unsigned_shortP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_shortP(p:unsigned_shortP pointer,
 a:int, b:int, unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 ((offset_min(unsigned_shortP_alloc_table, p) = a)
 and (offset_max(unsigned_shortP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_extensionality :
 (forall x:uint16.
  (forall y:uint16[eq_int(integer_of_uint16(x), integer_of_uint16(y))].
   (eq_int(integer_of_uint16(x), integer_of_uint16(y)) -> (x = y))))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_extensionality :
 (forall x:uint32.
  (forall y:uint32[eq_int(integer_of_uint32(x), integer_of_uint32(y))].
   (eq_int(integer_of_uint32(x), integer_of_uint32(y)) -> (x = y))))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

logic unsigned_shortP_tag:  -> unsigned_shortP tag_id

axiom unsigned_shortP_int : (int_of_tag(unsigned_shortP_tag) = (1))

axiom unsigned_shortP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_shortP pointer.
  (p = unsigned_shortP_of_pointer_address(pointer_address(p))))

axiom unsigned_shortP_parenttag_bottom :
 parenttag(unsigned_shortP_tag, bottom_tag)

axiom unsigned_shortP_tags :
 (forall x:unsigned_shortP pointer.
  (forall unsigned_shortP_tag_table:unsigned_shortP tag_table.
   instanceof(unsigned_shortP_tag_table, x, unsigned_shortP_tag)))

predicate valid___string_abc(charP___string_abc_1_alloc_table:charP alloc_table) =
 (le_int(offset_min(charP___string_abc_1_alloc_table, __string_abc), (0))
 and ge_int(offset_max(charP___string_abc_1_alloc_table, __string_abc), (3)))

predicate valid_a(intP_a_2_alloc_table:intP alloc_table) =
 (le_int(offset_min(intP_a_2_alloc_table, a), (0))
 and ge_int(offset_max(intP_a_2_alloc_table, a), (1)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_unsigned_shortP(p:unsigned_shortP pointer, a:int, b:int,
 unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 ((offset_min(unsigned_shortP_alloc_table, p) <= a)
 and (offset_max(unsigned_shortP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_unsigned_shortP(p:unsigned_shortP pointer, a:int,
 b:int, unsigned_shortP_alloc_table:unsigned_shortP alloc_table) =
 ((offset_min(unsigned_shortP_alloc_table, p) <= a)
 and (offset_max(unsigned_shortP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

axiom memcmp_range :
 (forall charP_charM_s2_4_at_L:(charP, int8) memory.
  (forall charP_charM_s1_3_at_L:(charP, int8) memory.
   (forall s1_0_0:charP pointer.
    (forall s2_0_0:charP pointer.
     (forall n_0:int.
      (le_int(sub_int(neg_int((2147483647)), (1)),
       memcmp(s1_0_0, s2_0_0, n_0, charP_charM_s2_4_at_L,
       charP_charM_s1_3_at_L))
      and le_int(memcmp(s1_0_0, s2_0_0, n_0, charP_charM_s2_4_at_L,
                 charP_charM_s1_3_at_L),
          (2147483647))))))))

axiom memcmp_zero :
 (forall charP_charM_s2_4_at_L:(charP, int8) memory.
  (forall charP_charM_s1_3_at_L:(charP, int8) memory.
   (forall s1_1_0:charP pointer.
    (forall s2_1_0:charP pointer.
     (forall n_1:int.
      ((memcmp(s1_1_0, s2_1_0, n_1, charP_charM_s2_4_at_L,
        charP_charM_s1_3_at_L) = (0))
      <-> (forall i_1_0:int.
           ((le_int((0), i_1_0) and lt_int(i_1_0, n_1)) ->
            (integer_of_int8(select(charP_charM_s1_3_at_L,
                             shift(s1_1_0, i_1_0))) = integer_of_int8(
                                                      select(charP_charM_s2_4_at_L,
                                                      shift(s2_1_0, i_1_0))))))))))))

axiom memchr_def :
 (forall charP_charM_s_5_at_L:(charP, int8) memory.
  (forall s_0_0:charP pointer.
   (forall c_0:int.
    (forall n_3:int.
     ((memchr(s_0_0, c_0, n_3, charP_charM_s_5_at_L) = true)
     <-> (exists i_2_0:int32.
          (le_int((0), integer_of_int32(i_2_0))
          and (lt_int(integer_of_int32(i_2_0), n_3)
              and (integer_of_int8(select(charP_charM_s_5_at_L,
                                   shift(s_0_0, integer_of_int32(i_2_0)))) = c_0)))))))))

axiom memset_def :
 (forall charP_charM_s_1_6_at_L:(charP, int8) memory.
  (forall s_2:charP pointer.
   (forall c_2:int.
    (forall n_5:int.
     ((memset(s_2, c_2, n_5, charP_charM_s_1_6_at_L) = true)
     <-> (forall i_3_0:int.
          ((le_int((0), i_3_0) and lt_int(i_3_0, n_5)) ->
           (integer_of_int8(select(charP_charM_s_1_6_at_L, shift(s_2, i_3_0))) = c_2))))))))

axiom strlen_pos_or_null :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s_4:charP pointer.
   (forall i_4_0:int.
    ((le_int((0), i_4_0)
     and (le_int(i_4_0, (2147483647))
         and ((forall j_0:int.
               ((le_int((0), j_0) and lt_int(j_0, i_4_0)) ->
                (integer_of_int8(select(charP_charM_s_3_7_at_L,
                                 shift(s_4, j_0))) <> (0))))
             and (integer_of_int8(select(charP_charM_s_3_7_at_L,
                                  shift(s_4, i_4_0))) = (0))))) ->
     (strlen(s_4, charP_charM_s_3_7_at_L) = i_4_0)))))

axiom strlen_neg :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s_5:charP pointer.
   ((forall i_5_0:int.
     ((le_int((0), i_5_0) and le_int(i_5_0, (2147483647))) ->
      (integer_of_int8(select(charP_charM_s_3_7_at_L, shift(s_5, i_5_0))) <> (0)))) ->
    lt_int(strlen(s_5, charP_charM_s_3_7_at_L), (0)))))

axiom strlen_range :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s_6:charP pointer.
   le_int(strlen(s_6, charP_charM_s_3_7_at_L), (2147483647))))

axiom strlen_before_null :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s_7:charP pointer.
   (forall i_6:int.
    ((le_int((0), i_6) and lt_int(i_6, strlen(s_7, charP_charM_s_3_7_at_L))) ->
     (integer_of_int8(select(charP_charM_s_3_7_at_L, shift(s_7, i_6))) <> (0))))))

axiom strlen_at_null :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s_8:charP pointer.
   (le_int((0), strlen(s_8, charP_charM_s_3_7_at_L)) ->
    (integer_of_int8(select(charP_charM_s_3_7_at_L,
                     shift(s_8, strlen(s_8, charP_charM_s_3_7_at_L)))) = (0)))))

axiom strlen_not_zero :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s_9:charP pointer.
   (forall i_7:int.
    ((le_int((0), i_7)
     and (le_int(i_7, strlen(s_9, charP_charM_s_3_7_at_L))
         and (integer_of_int8(select(charP_charM_s_3_7_at_L, shift(s_9, i_7))) <> (0)))) ->
     lt_int(i_7, strlen(s_9, charP_charM_s_3_7_at_L))))))

axiom strlen_zero :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s_10:charP pointer.
   (forall i_8:int.
    ((le_int((0), i_8)
     and (le_int(i_8, strlen(s_10, charP_charM_s_3_7_at_L))
         and (integer_of_int8(select(charP_charM_s_3_7_at_L,
                              shift(s_10, i_8))) = (0)))) ->
     (i_8 = strlen(s_10, charP_charM_s_3_7_at_L))))))

axiom strlen_sup :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s_11:charP pointer.
   (forall i_9:int.
    ((le_int((0), i_9)
     and (integer_of_int8(select(charP_charM_s_3_7_at_L, shift(s_11, i_9))) = (0))) ->
     (le_int((0), strlen(s_11, charP_charM_s_3_7_at_L))
     and le_int(strlen(s_11, charP_charM_s_3_7_at_L), i_9))))))

axiom strlen_shift :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s_12:charP pointer.
   (forall i_10:int.
    ((le_int((0), i_10)
     and le_int(i_10, strlen(s_12, charP_charM_s_3_7_at_L))) ->
     (strlen(shift(s_12, i_10), charP_charM_s_3_7_at_L) = sub_int(strlen(s_12,
                                                                  charP_charM_s_3_7_at_L),
                                                          i_10))))))

axiom strlen_create :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s_13:charP pointer.
   (forall i_11:int.
    ((le_int((0), i_11)
     and (le_int(i_11, (2147483647))
         and (integer_of_int8(select(charP_charM_s_3_7_at_L,
                              shift(s_13, i_11))) = (0)))) ->
     (le_int((0), strlen(s_13, charP_charM_s_3_7_at_L))
     and le_int(strlen(s_13, charP_charM_s_3_7_at_L), i_11))))))

axiom strlen_create_shift :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s_14:charP pointer.
   (forall i_12:int.
    (forall k:int.
     ((le_int((0), k)
      and (le_int(k, i_12)
          and (le_int(i_12, (2147483647))
              and (integer_of_int8(select(charP_charM_s_3_7_at_L,
                                   shift(s_14, i_12))) = (0))))) ->
      (le_int((0), strlen(shift(s_14, k), charP_charM_s_3_7_at_L))
      and le_int(strlen(shift(s_14, k), charP_charM_s_3_7_at_L),
          sub_int(i_12, k))))))))

axiom memcmp_strlen_left :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s1_2:charP pointer.
   (forall s2_2:charP pointer.
    (forall n_6:int.
     (((memcmp(s1_2, s2_2, n_6, charP_charM_s_3_7_at_L,
        charP_charM_s_3_7_at_L) = (0))
      and lt_int(strlen(s1_2, charP_charM_s_3_7_at_L), n_6)) ->
      (strlen(s1_2, charP_charM_s_3_7_at_L) = strlen(s2_2,
                                              charP_charM_s_3_7_at_L)))))))

axiom memcmp_strlen_right :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s1_3:charP pointer.
   (forall s2_3:charP pointer.
    (forall n_7:int.
     (((memcmp(s1_3, s2_3, n_7, charP_charM_s_3_7_at_L,
        charP_charM_s_3_7_at_L) = (0))
      and lt_int(strlen(s2_3, charP_charM_s_3_7_at_L), n_7)) ->
      (strlen(s1_3, charP_charM_s_3_7_at_L) = strlen(s2_3,
                                              charP_charM_s_3_7_at_L)))))))

axiom memcmp_strlen_shift_left :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s1_4:charP pointer.
   (forall s2_4:charP pointer.
    (forall k_0:int.
     (forall n_8:int.
      (((memcmp(s1_4, shift(s2_4, k_0), n_8, charP_charM_s_3_7_at_L,
         charP_charM_s_3_7_at_L) = (0))
       and (le_int((0), k_0)
           and lt_int(strlen(s1_4, charP_charM_s_3_7_at_L), n_8))) ->
       (le_int((0), strlen(s2_4, charP_charM_s_3_7_at_L))
       and le_int(strlen(s2_4, charP_charM_s_3_7_at_L),
           add_int(k_0, strlen(s1_4, charP_charM_s_3_7_at_L))))))))))

axiom memcmp_strlen_shift_right :
 (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
  (forall s1_5:charP pointer.
   (forall s2_5:charP pointer.
    (forall k_1:int.
     (forall n_9:int.
      (((memcmp(shift(s1_5, k_1), s2_5, n_9, charP_charM_s_3_7_at_L,
         charP_charM_s_3_7_at_L) = (0))
       and (le_int((0), k_1)
           and lt_int(strlen(s2_5, charP_charM_s_3_7_at_L), n_9))) ->
       (le_int((0), strlen(s1_5, charP_charM_s_3_7_at_L))
       and le_int(strlen(s1_5, charP_charM_s_3_7_at_L),
           add_int(k_1, strlen(s2_5, charP_charM_s_3_7_at_L))))))))))

axiom strcmp_range :
 (forall charP_charM_s2_6_9_at_L:(charP, int8) memory.
  (forall charP_charM_s1_6_8_at_L:(charP, int8) memory.
   (forall s1_7:charP pointer.
    (forall s2_7:charP pointer.
     (le_int(sub_int(neg_int((2147483647)), (1)),
      strcmp(s1_7, s2_7, charP_charM_s2_6_9_at_L, charP_charM_s1_6_8_at_L))
     and le_int(strcmp(s1_7, s2_7, charP_charM_s2_6_9_at_L,
                charP_charM_s1_6_8_at_L),
         (2147483647)))))))

axiom strcmp_zero :
 (forall charP_charM_s2_6_9_at_L:(charP, int8) memory.
  (forall charP_charM_s1_6_8_at_L:(charP, int8) memory.
   (forall s1_8:charP pointer.
    (forall s2_8:charP pointer.
     ((strcmp(s1_8, s2_8, charP_charM_s2_6_9_at_L, charP_charM_s1_6_8_at_L) = (0))
     <-> ((strlen(s1_8, charP_charM_s1_6_8_at_L) = strlen(s2_8,
                                                   charP_charM_s2_6_9_at_L))
         and (forall i_13:int.
              ((le_int((0), i_13)
               and le_int(i_13, strlen(s1_8, charP_charM_s1_6_8_at_L))) ->
               (integer_of_int8(select(charP_charM_s1_6_8_at_L,
                                shift(s1_8, i_13))) = integer_of_int8(
                                                      select(charP_charM_s2_6_9_at_L,
                                                      shift(s2_8, i_13))))))))))))

axiom strncmp_zero :
 (forall charP_charM_s2_9_11_at_L:(charP, int8) memory.
  (forall charP_charM_s1_9_10_at_L:(charP, int8) memory.
   (forall s1_10:charP pointer.
    (forall s2_10:charP pointer.
     (forall n_11:int.
      ((strncmp(s1_10, s2_10, n_11, charP_charM_s2_9_11_at_L,
        charP_charM_s1_9_10_at_L) = (0))
      <-> ((lt_int(strlen(s1_10, charP_charM_s1_9_10_at_L), n_11)
           and (strcmp(s1_10, s2_10, charP_charM_s2_9_11_at_L,
                charP_charM_s1_9_10_at_L) = (0)))
          or (forall i_14:int.
              ((le_int((0), i_14) and lt_int(i_14, n_11)) ->
               (integer_of_int8(select(charP_charM_s1_9_10_at_L,
                                shift(s1_10, i_14))) = integer_of_int8(
                                                       select(charP_charM_s2_9_11_at_L,
                                                       shift(s2_10, i_14)))))))))))))

axiom strchr_def :
 (forall charP_charM_s_15_12_at_L:(charP, int8) memory.
  (forall s_16:charP pointer.
   (forall c_4:int.
    ((strchr(s_16, c_4, charP_charM_s_15_12_at_L) = true)
    <-> (exists i_15:int.
         (le_int((0), i_15)
         and (le_int(i_15, strlen(s_16, charP_charM_s_15_12_at_L))
             and (integer_of_int8(select(charP_charM_s_15_12_at_L,
                                  shift(s_16, i_15))) = c_4))))))))

axiom wcslen_pos_or_null :
 (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_18:unsigned_shortP pointer.
   (forall i_16:int.
    ((le_int((0), i_16)
     and ((forall j_1:int.
           ((le_int((0), j_1) and lt_int(j_1, i_16)) ->
            (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
                               shift(s_18, j_1))) <> (0))))
         and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
                                shift(s_18, i_16))) = (0)))) ->
     (wcslen(s_18, unsigned_shortP_unsigned_shortM_s_17_13_at_L) = i_16)))))

axiom wcslen_neg :
 (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_19:unsigned_shortP pointer.
   ((forall i_17:int.
     (le_int((0), i_17) ->
      (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
                         shift(s_19, i_17))) <> (0)))) ->
    lt_int(wcslen(s_19, unsigned_shortP_unsigned_shortM_s_17_13_at_L), (0)))))

axiom wcslen_before_null :
 (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_20:unsigned_shortP pointer.
   (forall i_18:int32.
    ((le_int((0), integer_of_int32(i_18))
     and lt_int(integer_of_int32(i_18),
         wcslen(s_20, unsigned_shortP_unsigned_shortM_s_17_13_at_L))) ->
     (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
                        shift(s_20, integer_of_int32(i_18)))) <> (0))))))

axiom wcslen_at_null :
 (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_21:unsigned_shortP pointer.
   (le_int((0), wcslen(s_21, unsigned_shortP_unsigned_shortM_s_17_13_at_L)) ->
    (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
                       shift(s_21,
                       wcslen(s_21,
                       unsigned_shortP_unsigned_shortM_s_17_13_at_L)))) = (0)))))

axiom wcslen_not_zero :
 (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_22:unsigned_shortP pointer.
   (forall i_19:int32.
    ((le_int((0), integer_of_int32(i_19))
     and (le_int(integer_of_int32(i_19),
          wcslen(s_22, unsigned_shortP_unsigned_shortM_s_17_13_at_L))
         and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
                                shift(s_22, integer_of_int32(i_19)))) <> (0)))) ->
     lt_int(integer_of_int32(i_19),
     wcslen(s_22, unsigned_shortP_unsigned_shortM_s_17_13_at_L))))))

axiom wcslen_zero :
 (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_23:unsigned_shortP pointer.
   (forall i_20:int32.
    ((le_int((0), integer_of_int32(i_20))
     and (le_int(integer_of_int32(i_20),
          wcslen(s_23, unsigned_shortP_unsigned_shortM_s_17_13_at_L))
         and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
                                shift(s_23, integer_of_int32(i_20)))) = (0)))) ->
     (integer_of_int32(i_20) = wcslen(s_23,
                               unsigned_shortP_unsigned_shortM_s_17_13_at_L))))))

axiom wcslen_sup :
 (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_24:unsigned_shortP pointer.
   (forall i_21:int32.
    ((le_int((0), integer_of_int32(i_21))
     and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
                            shift(s_24, integer_of_int32(i_21)))) = (0))) ->
     (le_int((0), wcslen(s_24, unsigned_shortP_unsigned_shortM_s_17_13_at_L))
     and le_int(wcslen(s_24, unsigned_shortP_unsigned_shortM_s_17_13_at_L),
         integer_of_int32(i_21)))))))

axiom wcslen_shift :
 (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_25:unsigned_shortP pointer.
   (forall i_22:int32.
    ((le_int((0), integer_of_int32(i_22))
     and le_int(integer_of_int32(i_22),
         wcslen(s_25, unsigned_shortP_unsigned_shortM_s_17_13_at_L))) ->
     (wcslen(shift(s_25, integer_of_int32(i_22)),
      unsigned_shortP_unsigned_shortM_s_17_13_at_L) = sub_int(wcslen(s_25,
                                                              unsigned_shortP_unsigned_shortM_s_17_13_at_L),
                                                      integer_of_int32(i_22)))))))

axiom wcslen_create :
 (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_26:unsigned_shortP pointer.
   (forall i_23:int32.
    ((le_int((0), integer_of_int32(i_23))
     and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
                            shift(s_26, integer_of_int32(i_23)))) = (0))) ->
     (le_int((0), wcslen(s_26, unsigned_shortP_unsigned_shortM_s_17_13_at_L))
     and le_int(wcslen(s_26, unsigned_shortP_unsigned_shortM_s_17_13_at_L),
         integer_of_int32(i_23)))))))

axiom wcslen_create_shift :
 (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:
  (unsigned_shortP, uint16) memory.
  (forall s_27:unsigned_shortP pointer.
   (forall i_24:int32.
    (forall k_2:int32.
     ((le_int((0), integer_of_int32(k_2))
      and (le_int(integer_of_int32(k_2), integer_of_int32(i_24))
          and (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
                                 shift(s_27, integer_of_int32(i_24)))) = (0)))) ->
      (le_int((0),
       wcslen(shift(s_27, integer_of_int32(k_2)),
       unsigned_shortP_unsigned_shortM_s_17_13_at_L))
      and le_int(wcslen(shift(s_27, integer_of_int32(k_2)),
                 unsigned_shortP_unsigned_shortM_s_17_13_at_L),
          sub_int(integer_of_int32(i_24), integer_of_int32(k_2)))))))))

axiom wcscmp_zero :
 (forall unsigned_shortP_unsigned_shortM_s2_11_15_at_L:
  (unsigned_shortP, uint16) memory.
  (forall unsigned_shortP_unsigned_shortM_s1_11_14_at_L:
   (unsigned_shortP, uint16) memory.
   (forall s1_12:unsigned_shortP pointer.
    (forall s2_12:unsigned_shortP pointer.
     ((wcscmp(s1_12, s2_12, unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
       unsigned_shortP_unsigned_shortM_s1_11_14_at_L) = (0))
     <-> ((wcslen(s1_12, unsigned_shortP_unsigned_shortM_s1_11_14_at_L) = 
          wcslen(s2_12, unsigned_shortP_unsigned_shortM_s2_11_15_at_L))
         and (forall i_25:int.
              ((le_int((0), i_25)
               and le_int(i_25,
                   wcslen(s1_12,
                   unsigned_shortP_unsigned_shortM_s1_11_14_at_L))) ->
               (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s1_11_14_at_L,
                                  shift(s1_12, i_25))) = integer_of_uint16(
                                                         select(unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
                                                         shift(s2_12, i_25))))))))))))

axiom wcsncmp_zero :
 (forall unsigned_shortP_unsigned_shortM_s2_13_17_at_L:
  (unsigned_shortP, uint16) memory.
  (forall unsigned_shortP_unsigned_shortM_s1_13_16_at_L:
   (unsigned_shortP, uint16) memory.
   (forall s1_14:unsigned_shortP pointer.
    (forall s2_14:unsigned_shortP pointer.
     (forall n_13:int.
      ((wcsncmp(s1_14, s2_14, n_13,
        unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
        unsigned_shortP_unsigned_shortM_s1_13_16_at_L) = (0))
      <-> ((lt_int(wcslen(s1_14,
                   unsigned_shortP_unsigned_shortM_s1_13_16_at_L),
            n_13)
           and (wcscmp(s1_14, s2_14,
                unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
                unsigned_shortP_unsigned_shortM_s1_13_16_at_L) = (0)))
          or (forall i_26:int.
              ((le_int((0), i_26) and lt_int(i_26, n_13)) ->
               (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s1_13_16_at_L,
                                  shift(s1_14, i_26))) = integer_of_uint16(
                                                         select(unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
                                                         shift(s2_14, i_26)))))))))))))

exception Goto__LOR_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter unsigned_shortP_alloc_table : unsigned_shortP alloc_table ref

parameter unsigned_shortP_tag_table : unsigned_shortP tag_table ref

parameter alloc_struct_unsigned_shortP :
 n:int ->
  unsigned_shortP_alloc_table:unsigned_shortP alloc_table ref ->
   unsigned_shortP_tag_table:unsigned_shortP tag_table ref ->
    { } unsigned_shortP pointer
    writes unsigned_shortP_alloc_table,unsigned_shortP_tag_table
    { (strict_valid_struct_unsigned_shortP(result, (0), sub_int(n, (1)),
       unsigned_shortP_alloc_table)
      and (alloc_extends(unsigned_shortP_alloc_table@,
           unsigned_shortP_alloc_table)
          and (alloc_fresh(unsigned_shortP_alloc_table@, result, n)
              and instanceof(unsigned_shortP_tag_table, result,
                  unsigned_shortP_tag)))) }

parameter alloc_struct_unsigned_shortP_requires :
 n:int ->
  unsigned_shortP_alloc_table:unsigned_shortP alloc_table ref ->
   unsigned_shortP_tag_table:unsigned_shortP tag_table ref ->
    { ge_int(n, (0))} unsigned_shortP pointer
    writes unsigned_shortP_alloc_table,unsigned_shortP_tag_table
    { (strict_valid_struct_unsigned_shortP(result, (0), sub_int(n, (1)),
       unsigned_shortP_alloc_table)
      and (alloc_extends(unsigned_shortP_alloc_table@,
           unsigned_shortP_alloc_table)
          and (alloc_fresh(unsigned_shortP_alloc_table@, result, n)
              and instanceof(unsigned_shortP_tag_table, result,
                  unsigned_shortP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter intP_a_2_alloc_table : intP alloc_table ref

parameter charP___string_abc_1_alloc_table : charP alloc_table ref

parameter intP_intM_a_2 : (intP, int32) memory ref

parameter array_bounds_safe :
 i:uint32 ->
  { } int32
  reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter array_bounds_safe_requires :
 i:uint32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32
  reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter array_bounds_unsafe :
 i_0:uint32 ->
  { } int32
  reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter array_bounds_unsafe_requires :
 i_0:uint32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: lt_int(integer_of_uint32(i_0), (2)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))))}
  int32
  reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter array_bounds_wrong :
 i_1:uint32 ->
  { } int32
  reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter array_bounds_wrong_requires :
 i_1:uint32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32
  reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter bad_local_pointer :
 intP_result_21_alloc_table:intP alloc_table ref ->
  intP_result_21_tag_table:intP tag_table ref ->
   { } intP pointer
   reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_result_21_alloc_table
   writes intP_result_21_alloc_table,intP_result_21_tag_table
   { ((JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))
     and (JC_<somenum>:
         ((JC_<somenum>:
          le_int(offset_min(intP_result_21_alloc_table, result), (0)))
         and (JC_<somenum>:
             ge_int(offset_max(intP_result_21_alloc_table, result), (0)))))) }

parameter bad_local_pointer_requires :
 intP_result_21_alloc_table:intP alloc_table ref ->
  intP_result_21_tag_table:intP tag_table ref ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   intP pointer
   reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_result_21_alloc_table
   writes intP_result_21_alloc_table,intP_result_21_tag_table
   { ((JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))
     and (JC_<somenum>:
         ((JC_<somenum>:
          le_int(offset_min(intP_result_21_alloc_table, result), (0)))
         and (JC_<somenum>:
             ge_int(offset_max(intP_result_21_alloc_table, result), (0)))))) }

parameter bar :
 tt:unit ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter bar_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter baz :
 tt:unit ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter baz_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter charP_charM___string_abc_1 : (charP, int8) memory ref

parameter const_cast_wrong :
 ip:intP pointer ->
  intP_intM_ip_32:(intP, int32) memory ref ->
   intP_ip_32_alloc_table:intP alloc_table ->
    { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
    writes intP_intM_ip_32
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter const_cast_wrong_requires :
 ip:intP pointer ->
  intP_intM_ip_32:(intP, int32) memory ref ->
   intP_ip_32_alloc_table:intP alloc_table ->
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
    int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
    writes intP_intM_ip_32
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter div0_safe :
 x_0:int32 ->
  y:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter div0_safe_pos :
 x_0_0:int32 ->
  y_0:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter div0_safe_pos_requires :
 x_0_0:int32 ->
  y_0:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter div0_safe_requires :
 x_0:int32 ->
  y:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter div0_unsafe :
 x_1:int32 ->
  y_1:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter div0_unsafe_pos :
 x_2:int32 ->
  y_2:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter div0_unsafe_pos_requires :
 x_2:int32 ->
  y_2:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: gt_int(integer_of_int32(y_2), (0)))
     and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
         and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter div0_unsafe_requires :
 x_1:int32 ->
  y_1:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: (integer_of_int32(y_1) <> (0)))
     and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
         and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter div0_wrong :
 x_3:int32 ->
  y_3:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter div0_wrong_requires :
 x_3:int32 ->
  y_3:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter foo :
 unnamed:int32 ->
  unnamed_0:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter foo_requires :
 unnamed:int32 ->
  unnamed_0:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter initialization_safe :
 i_2:int32 ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter initialization_safe_requires :
 i_2:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter initialization_unsafe :
 i_3:int32 ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter initialization_unsafe_requires :
 i_3:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: (integer_of_int32(i_3) <> (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter initialization_wrong :
 tt:unit ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter initialization_wrong_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter missing_return_safe :
 x_4:int32 ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter missing_return_safe_requires :
 x_4:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter missing_return_unsafe :
 x_5:int32 ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter missing_return_unsafe_requires :
 x_5:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: lt_int(integer_of_int32(x_5), (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter missing_return_wrong :
 x_6:int32 ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter missing_return_wrong_requires :
 x_6:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter mod0_safe :
 x_7:int32 ->
  y_4:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter mod0_safe_requires :
 x_7:int32 ->
  y_4:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter mod0_unsafe :
 x_8:int32 ->
  y_5:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter mod0_unsafe_requires :
 x_8:int32 ->
  y_5:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: (integer_of_int32(y_5) <> (0)))
     and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
         and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter mod0_wrong :
 x_9:int32 ->
  y_6:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter mod0_wrong_requires :
 x_9:int32 ->
  y_6:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter mod_string :
 tt:unit ->
  { } unit reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  writes charP_charM___string_abc_1
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter mod_string_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  unit reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  writes charP_charM___string_abc_1
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter multiple_update_safe :
 x_10:intP pointer ->
  y_7:intP pointer ->
   intP_intM_x_10_29:(intP, int32) memory ref ->
    intP_x_10_29_alloc_table:intP alloc_table ->
     { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
     writes intP_intM_x_10_29
     { (JC_<somenum>:
       ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
       and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter multiple_update_safe_requires :
 x_10:intP pointer ->
  y_7:intP pointer ->
   intP_intM_x_10_29:(intP, int32) memory ref ->
    intP_x_10_29_alloc_table:intP alloc_table ->
     { (JC_<somenum>:
       ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
       and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
     int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
     writes intP_intM_x_10_29
     { (JC_<somenum>:
       ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
       and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter multiple_update_unsafe :
 x_11:intP pointer ->
  y_8:intP pointer ->
   intP_intM_x_11_27:(intP, int32) memory ref ->
    intP_x_11_27_alloc_table:intP alloc_table ->
     { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
     writes intP_intM_x_11_27
     { (JC_<somenum>:
       ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
       and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter multiple_update_unsafe_requires :
 x_11:intP pointer ->
  y_8:intP pointer ->
   intP_intM_x_11_27:(intP, int32) memory ref ->
    intP_x_11_27_alloc_table:intP alloc_table ->
     { (JC_<somenum>:
       ((JC_<somenum>: (x_11 <> y_8))
       and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
           and (JC_<somenum>:
               valid___string_abc(charP___string_abc_1_alloc_table)))))}
     int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
     writes intP_intM_x_11_27
     { (JC_<somenum>:
       ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
       and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter multiple_update_wrong_1 :
 x_12:intP pointer ->
  y_9:intP pointer ->
   intP_intM_x_12_25:(intP, int32) memory ref ->
    intP_x_12_25_alloc_table:intP alloc_table ->
     { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
     writes intP_intM_x_12_25
     { (JC_<somenum>:
       ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
       and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter multiple_update_wrong_1_requires :
 x_12:intP pointer ->
  y_9:intP pointer ->
   intP_intM_x_12_25:(intP, int32) memory ref ->
    intP_x_12_25_alloc_table:intP alloc_table ->
     { (JC_<somenum>:
       ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
       and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
     int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
     writes intP_intM_x_12_25
     { (JC_<somenum>:
       ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
       and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter multiple_update_wrong_2 :
 i_4:int32 ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter multiple_update_wrong_2_requires :
 i_4:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter multiple_update_wrong_3 :
 i_5:int32 ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  writes intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter multiple_update_wrong_3_requires :
 i_5:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  writes intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter null_ptr_safe :
 x_13:intP pointer ->
  intP_x_13_20_alloc_table:intP alloc_table ->
   intP_intM_x_13_20:(intP, int32) memory ->
    { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter null_ptr_safe_requires :
 x_13:intP pointer ->
  intP_x_13_20_alloc_table:intP alloc_table ->
   intP_intM_x_13_20:(intP, int32) memory ->
    { (JC_<somenum>:
      ((JC_<somenum>:
       ((le_int(offset_min(intP_x_13_20_alloc_table, x_13), (0))
        and ge_int(offset_max(intP_x_13_20_alloc_table, x_13), (0)))
       or (x_13 = null)))
      and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
          and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))))}
    int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter null_ptr_unsafe :
 x_14:intP pointer ->
  intP_x_14_19_alloc_table:intP alloc_table ->
   intP_intM_x_14_19:(intP, int32) memory ->
    { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter null_ptr_unsafe_requires :
 x_14:intP pointer ->
  intP_x_14_19_alloc_table:intP alloc_table ->
   intP_intM_x_14_19:(intP, int32) memory ->
    { (JC_<somenum>:
      ((JC_<somenum>:
       ((JC_<somenum>: le_int(offset_min(intP_x_14_19_alloc_table, x_14), (0)))
       and (JC_<somenum>: ge_int(offset_max(intP_x_14_19_alloc_table, x_14), (0)))))
      and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
          and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))))}
    int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter null_ptr_wrong :
 x_15:intP pointer ->
  intP_x_15_18_alloc_table:intP alloc_table ->
   intP_intM_x_15_18:(intP, int32) memory ->
    { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter null_ptr_wrong_requires :
 x_15:intP pointer ->
  intP_x_15_18_alloc_table:intP alloc_table ->
   intP_intM_x_15_18:(intP, int32) memory ->
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
    int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter oob_pointer_safe :
 x_16:uint32 ->
  { } int32
  reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter oob_pointer_safe_requires :
 x_16:uint32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32
  reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter oob_pointer_unsafe :
 x_17:uint32 ->
  { } int32
  reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter oob_pointer_unsafe_requires :
 x_17:uint32 ->
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>: le_int((0), integer_of_uint32(x_17)))
     and (JC_<somenum>: lt_int(integer_of_uint32(x_17), (2)))))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))))}
  int32
  reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter oob_pointer_wrong :
 x_18:uint32 ->
  { } int32
  reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter oob_pointer_wrong_requires :
 x_18:uint32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32
  reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table,intP_intM_a_2
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter order_of_arg_eval :
 tt:unit ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter order_of_arg_eval_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter ptr_sub_safe :
 tt:unit ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter ptr_sub_safe_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter ptr_sub_unsafe :
 x_19:intP pointer ->
  y_10:intP pointer ->
   intP_x_19_23_alloc_table:intP alloc_table ->
    { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter ptr_sub_unsafe_requires :
 x_19:intP pointer ->
  y_10:intP pointer ->
   intP_x_19_23_alloc_table:intP alloc_table ->
    { (JC_<somenum>:
      ((JC_<somenum>:
       ((JC_<somenum>: le_int(offset_min(intP_x_19_23_alloc_table, x_19), (0)))
       and ((JC_<somenum>: ge_int(offset_max(intP_x_19_23_alloc_table, x_19), (0)))
           and ((JC_<somenum>:
                le_int(offset_min(intP_x_19_23_alloc_table, y_10), (0)))
               and (JC_<somenum>:
                   ge_int(offset_max(intP_x_19_23_alloc_table, y_10), (0)))))))
      and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
          and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))))}
    int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter ptr_sub_wrong :
 tt:unit ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter ptr_sub_wrong_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter shift_left_signed_safe :
 x_20:int32 ->
  y_11:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_signed_safe_requires :
 x_20:int32 ->
  y_11:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_signed_unsafe :
 x_21:int32 ->
  y_12:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_signed_unsafe_requires :
 x_21:int32 ->
  y_12:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_signed_wrong_1 :
 x_22:int32 ->
  y_13:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_signed_wrong_1_requires :
 x_22:int32 ->
  y_13:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_signed_wrong_2 :
 x_23:int32 ->
  y_14:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_signed_wrong_2_requires :
 x_23:int32 ->
  y_14:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_signed_wrong_3 :
 x_24:int32 ->
  y_15:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_signed_wrong_3_requires :
 x_24:int32 ->
  y_15:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_unsigned_safe :
 x_25:uint32 ->
  y_16:uint32 ->
   { } uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_unsigned_safe_requires :
 x_25:uint32 ->
  y_16:uint32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_unsigned_unsafe :
 x_26:uint32 ->
  y_17:uint32 ->
   { } uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_unsigned_unsafe_requires :
 x_26:uint32 ->
  y_17:uint32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_unsigned_wrong :
 x_27:uint32 ->
  y_18:uint32 ->
   { } uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_left_unsigned_wrong_requires :
 x_27:uint32 ->
  y_18:uint32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_signed_safe :
 x_28:int32 ->
  y_19:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_signed_safe_requires :
 x_28:int32 ->
  y_19:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_signed_unsafe :
 x_29:int32 ->
  y_20:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_signed_unsafe_requires :
 x_29:int32 ->
  y_20:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_signed_wrong_1 :
 x_30:int32 ->
  y_21:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_signed_wrong_1_requires :
 x_30:int32 ->
  y_21:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_signed_wrong_2 :
 x_31:int32 ->
  y_22:int32 ->
   { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_signed_wrong_2_requires :
 x_31:int32 ->
  y_22:int32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_unsigned_safe :
 x_32:uint32 ->
  y_23:uint32 ->
   { } uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_unsigned_safe_requires :
 x_32:uint32 ->
  y_23:uint32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_unsigned_unsafe :
 x_33:uint32 ->
  y_24:uint32 ->
   { } uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_unsigned_unsafe_requires :
 x_33:uint32 ->
  y_24:uint32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_unsigned_wrong :
 x_34:uint32 ->
  y_25:uint32 ->
   { } uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter shift_right_unsigned_wrong_requires :
 x_34:uint32 ->
  y_25:uint32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter signed_overflow_safe :
 x_35:int32 ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter signed_overflow_safe_requires :
 x_35:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter signed_overflow_unsafe :
 x_36:int32 ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter signed_overflow_unsafe_requires :
 x_36:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(integer_of_int32(x_36), sub_int((2147483647), (10))))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter signed_overflow_wrong :
 x_37:int32 ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter signed_overflow_wrong_requires :
 x_37:int32 ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter stack_access_wrong :
 tt:unit ->
  { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter stack_access_wrong_requires :
 tt:unit ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
  int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter udiv0_safe :
 x_38:uint32 ->
  y_26:uint32 ->
   { } uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter udiv0_safe_requires :
 x_38:uint32 ->
  y_26:uint32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter udiv0_unsafe :
 x_39:uint32 ->
  y_27:uint32 ->
   { } uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter udiv0_unsafe_requires :
 x_39:uint32 ->
  y_27:uint32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: (integer_of_uint32(y_27) <> (0)))
     and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
         and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))))}
   uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter udiv0_wrong :
 x_40:uint32 ->
  y_28:uint32 ->
   { } uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter udiv0_wrong_requires :
 x_40:uint32 ->
  y_28:uint32 ->
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
   uint32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
   { (JC_<somenum>:
     ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
     and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

parameter volatile_cast_wrong :
 ip_0:intP pointer ->
  intP_ip_0_31_alloc_table:intP alloc_table ->
   intP_intM_ip_0_31:(intP, int32) memory ->
    { } int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

parameter volatile_cast_wrong_requires :
 ip_0:intP pointer ->
  intP_ip_0_31_alloc_table:intP alloc_table ->
   intP_intM_ip_0_31:(intP, int32) memory ->
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))}
    int32 reads charP___string_abc_1_alloc_table,intP_a_2_alloc_table
    { (JC_<somenum>:
      ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
      and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let array_bounds_safe_ensures_default =
 fun (i : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_38 = ref (any_int32 void) in
     try
      begin
        (if ((lt_int_ (integer_of_uint32 i)) (2))
        then
         (C_251:
         begin
           (let jessie_<somenum> =
           (__retres_38 := (C_250:
                           ((safe_acc_ !intP_intM_a_2) ((shift a) (integer_of_uint32 i))))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_249:
         begin
           (let jessie_<somenum> =
           (__retres_38 := (C_248:
                           ((safe_acc_ !intP_intM_a_2) ((shift a) (0))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_38); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let array_bounds_safe_safety =
 fun (i : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_38 = ref (any_int32 void) in
     try
      begin
        (if ((lt_int_ (integer_of_uint32 i)) (2))
        then
         (C_251:
         begin
           (let jessie_<somenum> =
           (__retres_38 := (C_250:
                           (JC_<somenum>:
                           ((((offset_acc_ !intP_a_2_alloc_table) !intP_intM_a_2) a) 
                            (integer_of_uint32 i))))) in void);
          (raise (Return_label_exc void)) end)
        else
         (C_249:
         begin
           (let jessie_<somenum> =
           (__retres_38 := (C_248:
                           ((safe_acc_ !intP_intM_a_2) ((shift a) (0))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_38); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let array_bounds_unsafe_ensures_default =
 fun (i_0 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: lt_int(integer_of_uint32(i_0), (2)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_37 = ref (any_int32 void) in
     (C_245:
     begin
       (let jessie_<somenum> =
       (__retres_37 := (C_244:
                       ((safe_acc_ !intP_intM_a_2) ((shift a) (integer_of_uint32 i_0))))) in
       void); (return := !__retres_37); (raise Return) end)); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let array_bounds_unsafe_safety =
 fun (i_0 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: lt_int(integer_of_uint32(i_0), (2)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_37 = ref (any_int32 void) in
     (C_245:
     begin
       (let jessie_<somenum> =
       (__retres_37 := (C_244:
                       (JC_<somenum>:
                       ((((offset_acc_ !intP_a_2_alloc_table) !intP_intM_a_2) a) 
                        (integer_of_uint32 i_0))))) in void);
      (return := !__retres_37); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let array_bounds_wrong_ensures_default =
 fun (i_1 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_36 = ref (any_int32 void) in
     (C_242:
     begin
       (let jessie_<somenum> =
       (__retres_36 := (C_241:
                       ((safe_acc_ !intP_intM_a_2) ((shift a) (integer_of_uint32 
                                                               (C_240:
                                                               (safe_uint32_of_integer_ 
                                                                (C_239:
                                                                ((add_int (2)) 
                                                                 (integer_of_uint32 i_1)))))))))) in
       void); (return := !__retres_36); (raise Return) end)); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let array_bounds_wrong_safety =
 fun (i_1 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_36 = ref (any_int32 void) in
     (C_242:
     begin
       (let jessie_<somenum> =
       (__retres_36 := (C_241:
                       (JC_<somenum>:
                       ((((offset_acc_ !intP_a_2_alloc_table) !intP_intM_a_2) a) 
                        (integer_of_uint32 (C_240:
                                           (JC_<somenum>:
                                           (uint32_of_integer_ (C_239:
                                                               ((add_int (2)) 
                                                                (integer_of_uint32 i_1))))))))))) in
       void); (return := !__retres_36); (raise Return) end)); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let bad_local_pointer_ensures_default =
 fun (intP_result_21_alloc_table : intP alloc_table ref) (intP_result_21_tag_table : intP tag_table ref) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let x_41 = ref (any_pointer void) in
     (let __retres_28 = ref (any_pointer void) in
     (C_173:
     (C_174:
     (C_175:
     begin
       (let jessie_<somenum> =
       (x_41 := (C_172:
                (JC_<somenum>:
                (((alloc_struct_intP (1)) intP_result_21_alloc_table) intP_result_21_tag_table)))) in
       void); (let jessie_<somenum> = (__retres_28 := !x_41) in void);
      ((safe_free_parameter intP_result_21_alloc_table) !x_41);
      (return := !__retres_28); (raise Return) end))))); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(intP_result_21_alloc_table, result), (0)))
    and (JC_<somenum>: ge_int(offset_max(intP_result_21_alloc_table, result), (0))))) }

let bad_local_pointer_safety =
 fun (intP_result_21_alloc_table : intP alloc_table ref) (intP_result_21_tag_table : intP tag_table ref) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let x_41 = ref (any_pointer void) in
     (let __retres_28 = ref (any_pointer void) in
     (C_173:
     (C_174:
     (C_175:
     begin
       (let jessie_<somenum> =
       (x_41 := (let jessie_<somenum> =
                (C_172:
                (JC_<somenum>:
                (((alloc_struct_intP_requires (1)) intP_result_21_alloc_table) intP_result_21_tag_table))) in
                (JC_<somenum>:
                (assert
                { ge_int(offset_max(intP_result_21_alloc_table, jessie_<somenum>),
                  (0)) }; jessie_<somenum>)))) in void);
      (let jessie_<somenum> = (__retres_28 := !x_41) in void);
      ((free_parameter intP_result_21_alloc_table) !x_41);
      (return := !__retres_28); (raise Return) end))))); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let const_cast_wrong_ensures_default =
 fun (ip : intP pointer) (intP_intM_ip_32 : (intP, int32) memory ref) (intP_ip_32_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let x_49 = ref (any_pointer void) in
     (let __retres_49 = ref (any_int32 void) in
     (C_357:
     (C_359:
     (C_360:
     begin
       (let jessie_<somenum> = (x_49 := ip) in void);
      (let jessie_<somenum> = (safe_int32_of_integer_ (1)) in
      (let jessie_<somenum> = !x_49 in
      (((safe_upd_ intP_intM_ip_32) jessie_<somenum>) jessie_<somenum>)));
      (let jessie_<somenum> = (__retres_49 := (safe_int32_of_integer_ (1))) in
      void); (return := !__retres_49); (raise Return) end))))); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let const_cast_wrong_safety =
 fun (ip : intP pointer) (intP_intM_ip_32 : (intP, int32) memory ref) (intP_ip_32_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let x_49 = ref (any_pointer void) in
     (let __retres_49 = ref (any_int32 void) in
     (C_357:
     (C_359:
     (C_360:
     begin
       (let jessie_<somenum> = (x_49 := ip) in void);
      (let jessie_<somenum> = (safe_int32_of_integer_ (1)) in
      (let jessie_<somenum> = !x_49 in
      (JC_<somenum>:
      ((((upd_ intP_ip_32_alloc_table) intP_intM_ip_32) jessie_<somenum>) jessie_<somenum>))));
      (let jessie_<somenum> = (__retres_49 := (safe_int32_of_integer_ (1))) in
      void); (return := !__retres_49); (raise Return) end))))); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let div0_safe_ensures_default =
 fun (x_0 : int32) (y : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_2 = ref (any_int32 void) in
     try
      begin
        (if ((eq_int_ (integer_of_int32 y)) (0))
        then
         (C_18:
         begin
           (let jessie_<somenum> = (__retres_2 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_17:
         begin
           (let jessie_<somenum> =
           (__retres_2 := (C_16:
                          (safe_int32_of_integer_ (C_15:
                                                  (JC_<somenum>:
                                                  ((computer_div (integer_of_int32 x_0)) 
                                                   (integer_of_int32 y))))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_2); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let div0_safe_pos_ensures_default =
 fun (x_0_0 : int32) (y_0 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_3 = ref (any_int32 void) in
     try
      begin
        (if ((le_int_ (integer_of_int32 y_0)) (0))
        then
         (C_24:
         begin
           (let jessie_<somenum> = (__retres_3 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_23:
         begin
           (let jessie_<somenum> =
           (__retres_3 := (C_22:
                          (safe_int32_of_integer_ (C_21:
                                                  (JC_<somenum>:
                                                  ((computer_div (integer_of_int32 x_0_0)) 
                                                   (integer_of_int32 y_0))))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_3); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let div0_safe_pos_safety =
 fun (x_0_0 : int32) (y_0 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_3 = ref (any_int32 void) in
     try
      begin
        (if ((le_int_ (integer_of_int32 y_0)) (0))
        then
         (C_24:
         begin
           (let jessie_<somenum> = (__retres_3 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_23:
         begin
           (let jessie_<somenum> =
           (__retres_3 := (C_22:
                          (JC_<somenum>:
                          (int32_of_integer_ (C_21:
                                             (JC_<somenum>:
                                             ((computer_div_ (integer_of_int32 x_0_0)) 
                                              (integer_of_int32 y_0)))))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_3); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let div0_safe_safety =
 fun (x_0 : int32) (y : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_2 = ref (any_int32 void) in
     try
      begin
        (if ((eq_int_ (integer_of_int32 y)) (0))
        then
         (C_18:
         begin
           (let jessie_<somenum> = (__retres_2 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_17:
         begin
           (let jessie_<somenum> =
           (__retres_2 := (C_16:
                          (JC_<somenum>:
                          (int32_of_integer_ (C_15:
                                             (JC_<somenum>:
                                             ((computer_div_ (integer_of_int32 x_0)) 
                                              (integer_of_int32 y)))))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_2); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let div0_unsafe_ensures_default =
 fun (x_1 : int32) (y_1 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (integer_of_int32(y_1) <> (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_0 = ref (any_int32 void) in
     (C_7:
     begin
       (let jessie_<somenum> =
       (__retres_0 := (C_6:
                      (safe_int32_of_integer_ (C_5:
                                              (JC_<somenum>:
                                              ((computer_div (integer_of_int32 x_1)) 
                                               (integer_of_int32 y_1))))))) in
       void); (return := !__retres_0); (raise Return) end)); absurd  end with
   Return -> !return end)) { (JC_<somenum>: true) }

let div0_unsafe_pos_ensures_default =
 fun (x_2 : int32) (y_2 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: gt_int(integer_of_int32(y_2), (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_1 = ref (any_int32 void) in
     (C_12:
     begin
       (let jessie_<somenum> =
       (__retres_1 := (C_11:
                      (safe_int32_of_integer_ (C_10:
                                              (JC_<somenum>:
                                              ((computer_div (integer_of_int32 x_2)) 
                                               (integer_of_int32 y_2))))))) in
       void); (return := !__retres_1); (raise Return) end)); absurd  end with
   Return -> !return end)) { (JC_<somenum>: true) }

let div0_unsafe_pos_safety =
 fun (x_2 : int32) (y_2 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: gt_int(integer_of_int32(y_2), (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_1 = ref (any_int32 void) in
     (C_12:
     begin
       (let jessie_<somenum> =
       (__retres_1 := (C_11:
                      (JC_<somenum>:
                      (int32_of_integer_ (C_10:
                                         (JC_<somenum>:
                                         ((computer_div_ (integer_of_int32 x_2)) 
                                          (integer_of_int32 y_2)))))))) in
       void); (return := !__retres_1); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let div0_unsafe_safety =
 fun (x_1 : int32) (y_1 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (integer_of_int32(y_1) <> (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_0 = ref (any_int32 void) in
     (C_7:
     begin
       (let jessie_<somenum> =
       (__retres_0 := (C_6:
                      (JC_<somenum>:
                      (int32_of_integer_ (C_5:
                                         (JC_<somenum>:
                                         ((computer_div_ (integer_of_int32 x_1)) 
                                          (integer_of_int32 y_1)))))))) in
       void); (return := !__retres_0); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let div0_wrong_ensures_default =
 fun (x_3 : int32) (y_3 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (C_3:
     begin
       (let jessie_<somenum> =
       (__retres := (C_2:
                    (safe_int32_of_integer_ (C_1:
                                            (JC_<somenum>:
                                            ((computer_div (integer_of_int32 x_3)) (0))))))) in
       void); (return := !__retres); (raise Return) end)); absurd  end with
   Return -> !return end)) { (JC_<somenum>: true) }

let div0_wrong_safety =
 fun (x_3 : int32) (y_3 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (C_3:
     begin
       (let jessie_<somenum> =
       (__retres := (C_2:
                    (JC_<somenum>:
                    (int32_of_integer_ (C_1:
                                       (JC_<somenum>:
                                       ((computer_div_ (integer_of_int32 x_3)) (0)))))))) in
       void); (return := !__retres); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let initialization_safe_ensures_default =
 fun (i_2 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let x_47 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (if ((neq_int_ (integer_of_int32 i_2)) (0))
       then
        (C_259: begin   (x_47 := (safe_int32_of_integer_ (1))); !x_47 end)
       else
        (C_258: begin   (x_47 := (safe_int32_of_integer_ (2))); !x_47 end)) in
       void); (return := !x_47); (raise Return) end); absurd  end with
   Return -> !return end)) { (JC_<somenum>: true) }

let initialization_safe_safety =
 fun (i_2 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let x_47 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (if ((neq_int_ (integer_of_int32 i_2)) (0))
       then
        (C_259: begin   (x_47 := (safe_int32_of_integer_ (1))); !x_47 end)
       else
        (C_258: begin   (x_47 := (safe_int32_of_integer_ (2))); !x_47 end)) in
       void); (return := !x_47); (raise Return) end); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let initialization_unsafe_ensures_default =
 fun (i_3 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (integer_of_int32(i_3) <> (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let x_46 = ref (any_int32 void) in
     begin
       (if ((neq_int_ (integer_of_int32 i_3)) (0))
       then
        (let jessie_<somenum> = (C_255: (x_46 := (safe_int32_of_integer_ (1)))) in
        void) else void); (return := !x_46); (raise Return) end); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let initialization_unsafe_safety =
 fun (i_3 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (integer_of_int32(i_3) <> (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let x_46 = ref (any_int32 void) in
     begin
       (if ((neq_int_ (integer_of_int32 i_3)) (0))
       then
        (let jessie_<somenum> = (C_255: (x_46 := (safe_int32_of_integer_ (1)))) in
        void) else void); (return := !x_46); (raise Return) end); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let initialization_wrong_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let x_45 = (any_int32 void) in
     begin   (return := x_45); (raise Return) end); absurd  end with
   Return -> !return end)) { (JC_<somenum>: true) }

let initialization_wrong_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let x_45 = (any_int32 void) in
     begin   (return := x_45); (raise Return) end); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let missing_return_safe_ensures_default =
 fun (x_4 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_44 = ref (any_int32 void) in
     try
      begin
        (if ((lt_int_ (integer_of_int32 x_4)) (0))
        then
         (C_293:
         begin
           (let jessie_<somenum> = (__retres_44 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_292:
         begin
           (let jessie_<somenum> = (__retres_44 := (safe_int32_of_integer_ (1))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_44); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let missing_return_safe_safety =
 fun (x_4 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_44 = ref (any_int32 void) in
     try
      begin
        (if ((lt_int_ (integer_of_int32 x_4)) (0))
        then
         (C_293:
         begin
           (let jessie_<somenum> = (__retres_44 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_292:
         begin
           (let jessie_<somenum> = (__retres_44 := (safe_int32_of_integer_ (1))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_44); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let missing_return_unsafe_ensures_default =
 fun (x_5 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: lt_int(integer_of_int32(x_5), (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_43 = ref (any_int32 void) in
     try
      begin
        (if ((lt_int_ (integer_of_int32 x_5)) (0))
        then
         (C_287:
         begin
           (let jessie_<somenum> = (__retres_43 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end) else void);
       (assert { (JC_<somenum>: (false = true)) }; void);
       (C_289:
       begin
         void;
        (let jessie_<somenum> = (__retres_43 := (safe_int32_of_integer_ (0))) in
        void); (raise (Return_label_exc void)) end) end with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_43); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let missing_return_unsafe_safety =
 fun (x_5 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: lt_int(integer_of_int32(x_5), (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_43 = ref (any_int32 void) in
     try
      begin
        (if ((lt_int_ (integer_of_int32 x_5)) (0))
        then
         (C_287:
         begin
           (let jessie_<somenum> = (__retres_43 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end) else void);
       [ { } unit { (JC_<somenum>: (false = true)) } ];
       (C_289:
       begin
         void;
        (let jessie_<somenum> = (__retres_43 := (safe_int32_of_integer_ (0))) in
        void); (raise (Return_label_exc void)) end) end with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_43); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let missing_return_wrong_ensures_default =
 fun (x_6 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_42 = ref (any_int32 void) in
     begin
       (assert { (JC_<somenum>: (false = true)) }; void);
      (C_285:
      begin
        void;
       (let jessie_<somenum> = (__retres_42 := (safe_int32_of_integer_ (0))) in
       void); (return := !__retres_42); (raise Return) end) end); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let missing_return_wrong_safety =
 fun (x_6 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_42 = ref (any_int32 void) in
     begin
       [ { } unit { (JC_<somenum>: (false = true)) } ];
      (C_285:
      begin
        void;
       (let jessie_<somenum> = (__retres_42 := (safe_int32_of_integer_ (0))) in
       void); (return := !__retres_42); (raise Return) end) end); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let mod0_safe_ensures_default =
 fun (x_7 : int32) (y_4 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_9 = ref (any_int32 void) in
     try
      begin
        (if ((eq_int_ (integer_of_int32 y_4)) (0))
        then
         (C_54:
         begin
           (let jessie_<somenum> = (__retres_9 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_53:
         begin
           (let jessie_<somenum> =
           (__retres_9 := (C_52:
                          (safe_int32_of_integer_ (C_51:
                                                  (JC_<somenum>:
                                                  ((computer_mod (integer_of_int32 x_7)) 
                                                   (integer_of_int32 y_4))))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_9); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let mod0_safe_safety =
 fun (x_7 : int32) (y_4 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_9 = ref (any_int32 void) in
     try
      begin
        (if ((eq_int_ (integer_of_int32 y_4)) (0))
        then
         (C_54:
         begin
           (let jessie_<somenum> = (__retres_9 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_53:
         begin
           (let jessie_<somenum> =
           (__retres_9 := (C_52:
                          (JC_<somenum>:
                          (int32_of_integer_ (C_51:
                                             (JC_<somenum>:
                                             ((computer_mod_ (integer_of_int32 x_7)) 
                                              (integer_of_int32 y_4)))))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_9); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let mod0_unsafe_ensures_default =
 fun (x_8 : int32) (y_5 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (integer_of_int32(y_5) <> (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_8 = ref (any_int32 void) in
     (C_48:
     begin
       (let jessie_<somenum> =
       (__retres_8 := (C_47:
                      (safe_int32_of_integer_ (C_46:
                                              (JC_<somenum>:
                                              ((computer_mod (integer_of_int32 x_8)) 
                                               (integer_of_int32 y_5))))))) in
       void); (return := !__retres_8); (raise Return) end)); absurd  end with
   Return -> !return end)) { (JC_<somenum>: true) }

let mod0_unsafe_safety =
 fun (x_8 : int32) (y_5 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (integer_of_int32(y_5) <> (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_8 = ref (any_int32 void) in
     (C_48:
     begin
       (let jessie_<somenum> =
       (__retres_8 := (C_47:
                      (JC_<somenum>:
                      (int32_of_integer_ (C_46:
                                         (JC_<somenum>:
                                         ((computer_mod_ (integer_of_int32 x_8)) 
                                          (integer_of_int32 y_5)))))))) in
       void); (return := !__retres_8); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let mod0_wrong_ensures_default =
 fun (x_9 : int32) (y_6 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_7 = ref (any_int32 void) in
     (C_44:
     begin
       (let jessie_<somenum> =
       (__retres_7 := (C_43:
                      (safe_int32_of_integer_ (C_42:
                                              (JC_<somenum>:
                                              ((computer_mod (integer_of_int32 x_9)) (0))))))) in
       void); (return := !__retres_7); (raise Return) end)); absurd  end with
   Return -> !return end)) { (JC_<somenum>: true) }

let mod0_wrong_safety =
 fun (x_9 : int32) (y_6 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_7 = ref (any_int32 void) in
     (C_44:
     begin
       (let jessie_<somenum> =
       (__retres_7 := (C_43:
                      (JC_<somenum>:
                      (int32_of_integer_ (C_42:
                                         (JC_<somenum>:
                                         ((computer_mod_ (integer_of_int32 x_9)) (0)))))))) in
       void); (return := !__retres_7); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let mod_string_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  try
   begin
     (let str = ref (any_pointer void) in
     (C_362:
     (C_365:
     begin
       (let jessie_<somenum> = (str := __string_abc) in void);
      (let jessie_<somenum> = (safe_int8_of_integer_ (122)) in
      (let jessie_<somenum> = !str in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
      (((safe_upd_ charP_charM___string_abc_1) jessie_<somenum>) jessie_<somenum>))))));
      (raise Return) end))); (raise Return) end with Return -> void end)
  { (JC_<somenum>: true) }

let mod_string_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  try
   begin
     (let str = ref (any_pointer void) in
     (C_362:
     (C_365:
     begin
       (let jessie_<somenum> = (str := __string_abc) in void);
      (let jessie_<somenum> = (safe_int8_of_integer_ (122)) in
      (let jessie_<somenum> = !str in
      (let jessie_<somenum> = (2) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
      (let jessie_<somenum> = ((shift jessie_<somenum>) (2)) in
      (JC_<somenum>:
      ((((upd_ !charP___string_abc_1_alloc_table) charP_charM___string_abc_1) jessie_<somenum>) jessie_<somenum>)))))));
      (raise Return) end))); (raise Return) end with Return -> void end)
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let multiple_update_safe_ensures_default =
 fun (x_10 : intP pointer) (y_7 : intP pointer) (intP_intM_x_10_29 : (intP, int32) memory ref) (intP_x_10_29_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp_0_3 = ref (any_int32 void) in
     (let tmp_0_4 = ref (any_int32 void) in
     (let __retres_47 = ref (any_int32 void) in
     try
      begin
        (if ((safe_eq_pointer x_10) y_7)
        then
         (C_340:
         begin
           (let jessie_<somenum> = (__retres_47 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_339:
         begin
           (let jessie_<somenum> =
           (C_334:
           begin
             (let jessie_<somenum> =
             (C_331:
             begin
               (let jessie_<somenum> = (tmp_0_3 := (safe_int32_of_integer_ (0))) in
               void);
              (C_333:
              (let jessie_<somenum> = !tmp_0_3 in
              begin
                (let jessie_<somenum> = x_10 in
                (((safe_upd_ intP_intM_x_10_29) jessie_<somenum>) jessie_<somenum>));
               jessie_<somenum> end)) end) in void);
            (let jessie_<somenum> = (tmp_0_4 := (safe_int32_of_integer_ (0))) in
            void);
            (C_336:
            (let jessie_<somenum> = !tmp_0_4 in
            begin
              (let jessie_<somenum> = y_7 in
              (((safe_upd_ intP_intM_x_10_29) jessie_<somenum>) jessie_<somenum>));
             jessie_<somenum> end)) end) in void);
          (let jessie_<somenum> =
          (__retres_47 := (C_338:
                          (safe_int32_of_integer_ (C_337:
                                                  ((add_int (integer_of_int32 !tmp_0_3)) 
                                                   (integer_of_int32 !tmp_0_4)))))) in
          void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_47); (raise Return) end) end)));
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let multiple_update_safe_safety =
 fun (x_10 : intP pointer) (y_7 : intP pointer) (intP_intM_x_10_29 : (intP, int32) memory ref) (intP_x_10_29_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp_0_3 = ref (any_int32 void) in
     (let tmp_0_4 = ref (any_int32 void) in
     (let __retres_47 = ref (any_int32 void) in
     try
      begin
        (if ((eq_pointer x_10) y_7)
        then
         (C_340:
         begin
           (let jessie_<somenum> = (__retres_47 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_339:
         begin
           (let jessie_<somenum> =
           (C_334:
           begin
             (let jessie_<somenum> =
             (C_331:
             begin
               (let jessie_<somenum> = (tmp_0_3 := (safe_int32_of_integer_ (0))) in
               void);
              (C_333:
              (let jessie_<somenum> = !tmp_0_3 in
              begin
                (let jessie_<somenum> = x_10 in
                (JC_<somenum>:
                ((((upd_ intP_x_10_29_alloc_table) intP_intM_x_10_29) jessie_<somenum>) jessie_<somenum>)));
               jessie_<somenum> end)) end) in void);
            (let jessie_<somenum> = (tmp_0_4 := (safe_int32_of_integer_ (0))) in
            void);
            (C_336:
            (let jessie_<somenum> = !tmp_0_4 in
            begin
              (let jessie_<somenum> = y_7 in
              (JC_<somenum>:
              ((((upd_ intP_x_10_29_alloc_table) intP_intM_x_10_29) jessie_<somenum>) jessie_<somenum>)));
             jessie_<somenum> end)) end) in void);
          (let jessie_<somenum> =
          (__retres_47 := (C_338:
                          (JC_<somenum>:
                          (int32_of_integer_ (C_337:
                                             ((add_int (integer_of_int32 !tmp_0_3)) 
                                              (integer_of_int32 !tmp_0_4))))))) in
          void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_47); (raise Return) end) end)));
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let multiple_update_unsafe_ensures_default =
 fun (x_11 : intP pointer) (y_8 : intP pointer) (intP_intM_x_11_27 : (intP, int32) memory ref) (intP_x_11_27_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (x_11 <> y_8))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp_0_1 = ref (any_int32 void) in
     (let tmp_0_2 = ref (any_int32 void) in
     (let __retres_46 = ref (any_int32 void) in
     (C_328:
     begin
       (let jessie_<somenum> =
       (C_323:
       begin
         (let jessie_<somenum> =
         (C_320:
         begin
           (let jessie_<somenum> = (tmp_0_1 := (safe_int32_of_integer_ (0))) in
           void);
          (C_322:
          (let jessie_<somenum> = !tmp_0_1 in
          begin
            (let jessie_<somenum> = x_11 in
            (((safe_upd_ intP_intM_x_11_27) jessie_<somenum>) jessie_<somenum>));
           jessie_<somenum> end)) end) in void);
        (let jessie_<somenum> = (tmp_0_2 := (safe_int32_of_integer_ (0))) in void);
        (C_325:
        (let jessie_<somenum> = !tmp_0_2 in
        begin
          (let jessie_<somenum> = y_8 in
          (((safe_upd_ intP_intM_x_11_27) jessie_<somenum>) jessie_<somenum>));
         jessie_<somenum> end)) end) in void);
      (let jessie_<somenum> =
      (__retres_46 := (C_327:
                      (safe_int32_of_integer_ (C_326:
                                              ((add_int (integer_of_int32 !tmp_0_1)) 
                                               (integer_of_int32 !tmp_0_2)))))) in
      void); (return := !__retres_46); (raise Return) end)))); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let multiple_update_unsafe_safety =
 fun (x_11 : intP pointer) (y_8 : intP pointer) (intP_intM_x_11_27 : (intP, int32) memory ref) (intP_x_11_27_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (x_11 <> y_8))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp_0_1 = ref (any_int32 void) in
     (let tmp_0_2 = ref (any_int32 void) in
     (let __retres_46 = ref (any_int32 void) in
     (C_328:
     begin
       (let jessie_<somenum> =
       (C_323:
       begin
         (let jessie_<somenum> =
         (C_320:
         begin
           (let jessie_<somenum> = (tmp_0_1 := (safe_int32_of_integer_ (0))) in
           void);
          (C_322:
          (let jessie_<somenum> = !tmp_0_1 in
          begin
            (let jessie_<somenum> = x_11 in
            (JC_<somenum>:
            ((((upd_ intP_x_11_27_alloc_table) intP_intM_x_11_27) jessie_<somenum>) jessie_<somenum>)));
           jessie_<somenum> end)) end) in void);
        (let jessie_<somenum> = (tmp_0_2 := (safe_int32_of_integer_ (0))) in void);
        (C_325:
        (let jessie_<somenum> = !tmp_0_2 in
        begin
          (let jessie_<somenum> = y_8 in
          (JC_<somenum>:
          ((((upd_ intP_x_11_27_alloc_table) intP_intM_x_11_27) jessie_<somenum>) jessie_<somenum>)));
         jessie_<somenum> end)) end) in void);
      (let jessie_<somenum> =
      (__retres_46 := (C_327:
                      (JC_<somenum>:
                      (int32_of_integer_ (C_326:
                                         ((add_int (integer_of_int32 !tmp_0_1)) 
                                          (integer_of_int32 !tmp_0_2))))))) in
      void); (return := !__retres_46); (raise Return) end)))); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let multiple_update_wrong_1_ensures_default =
 fun (x_12 : intP pointer) (y_9 : intP pointer) (intP_intM_x_12_25 : (intP, int32) memory ref) (intP_x_12_25_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp = ref (any_int32 void) in
     (let tmp_0 = ref (any_int32 void) in
     (let __retres_45 = ref (any_int32 void) in
     (C_304:
     begin
       (let jessie_<somenum> =
       (C_299:
       begin
         (let jessie_<somenum> =
         (C_296:
         begin
           (let jessie_<somenum> = (tmp := (safe_int32_of_integer_ (0))) in void);
          (C_298:
          (let jessie_<somenum> = !tmp in
          begin
            (let jessie_<somenum> = x_12 in
            (((safe_upd_ intP_intM_x_12_25) jessie_<somenum>) jessie_<somenum>));
           jessie_<somenum> end)) end) in void);
        (let jessie_<somenum> = (tmp_0 := (safe_int32_of_integer_ (0))) in void);
        (C_301:
        (let jessie_<somenum> = !tmp_0 in
        begin
          (let jessie_<somenum> = x_12 in
          (((safe_upd_ intP_intM_x_12_25) jessie_<somenum>) jessie_<somenum>));
         jessie_<somenum> end)) end) in void);
      (let jessie_<somenum> =
      (__retres_45 := (C_303:
                      (safe_int32_of_integer_ (C_302:
                                              ((add_int (integer_of_int32 !tmp)) 
                                               (integer_of_int32 !tmp_0)))))) in
      void); (return := !__retres_45); (raise Return) end)))); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let multiple_update_wrong_1_safety =
 fun (x_12 : intP pointer) (y_9 : intP pointer) (intP_intM_x_12_25 : (intP, int32) memory ref) (intP_x_12_25_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp = ref (any_int32 void) in
     (let tmp_0 = ref (any_int32 void) in
     (let __retres_45 = ref (any_int32 void) in
     (C_304:
     begin
       (let jessie_<somenum> =
       (C_299:
       begin
         (let jessie_<somenum> =
         (C_296:
         begin
           (let jessie_<somenum> = (tmp := (safe_int32_of_integer_ (0))) in void);
          (C_298:
          (let jessie_<somenum> = !tmp in
          begin
            (let jessie_<somenum> = x_12 in
            (JC_<somenum>:
            ((((upd_ intP_x_12_25_alloc_table) intP_intM_x_12_25) jessie_<somenum>) jessie_<somenum>)));
           jessie_<somenum> end)) end) in void);
        (let jessie_<somenum> = (tmp_0 := (safe_int32_of_integer_ (0))) in void);
        (C_301:
        (let jessie_<somenum> = !tmp_0 in
        begin
          (let jessie_<somenum> = x_12 in
          (JC_<somenum>:
          ((((upd_ intP_x_12_25_alloc_table) intP_intM_x_12_25) jessie_<somenum>) jessie_<somenum>)));
         jessie_<somenum> end)) end) in void);
      (let jessie_<somenum> =
      (__retres_45 := (C_303:
                      (JC_<somenum>:
                      (int32_of_integer_ (C_302:
                                         ((add_int (integer_of_int32 !tmp)) 
                                          (integer_of_int32 !tmp_0))))))) in
      void); (return := !__retres_45); (raise Return) end)))); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let multiple_update_wrong_2_ensures_default =
 fun (i_4 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (let mutable_i_4 = ref i_4 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let jessie_<somenum> =
     (C_308:
     (C_311:
     begin
       (let jessie_<somenum> =
       (mutable_i_4 := (C_307:
                       (safe_int32_of_integer_ (C_306:
                                               ((add_int (integer_of_int32 !mutable_i_4)) (1)))))) in
       void);
      (mutable_i_4 := (C_310:
                      (safe_int32_of_integer_ (C_309:
                                              ((add_int (integer_of_int32 !mutable_i_4)) (1))))));
      !mutable_i_4 end)) in void); (return := !mutable_i_4); (raise Return);
    absurd  end with Return -> !return end))) { (JC_<somenum>: true) }

let multiple_update_wrong_2_safety =
 fun (i_4 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (let mutable_i_4 = ref i_4 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let jessie_<somenum> =
     (C_308:
     (C_311:
     begin
       (let jessie_<somenum> =
       (mutable_i_4 := (C_307:
                       (JC_<somenum>:
                       (int32_of_integer_ (C_306:
                                          ((add_int (integer_of_int32 !mutable_i_4)) (1))))))) in
       void);
      (mutable_i_4 := (C_310:
                      (JC_<somenum>:
                      (int32_of_integer_ (C_309:
                                         ((add_int (integer_of_int32 !mutable_i_4)) (1)))))));
      !mutable_i_4 end)) in void); (return := !mutable_i_4); (raise Return);
    absurd  end with Return -> !return end)))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let multiple_update_wrong_3_ensures_default =
 fun (i_5 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (let mutable_i_5 = ref i_5 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp_0_0 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_313:
       (C_316:
       begin
         (let jessie_<somenum> = (tmp_0_0 := !mutable_i_5) in void);
        (let jessie_<somenum> =
        (mutable_i_5 := (C_315:
                        (safe_int32_of_integer_ (C_314:
                                                ((add_int (integer_of_int32 !mutable_i_5)) (1)))))) in
        void);
        (C_318:
        (let jessie_<somenum> = !mutable_i_5 in
        (let jessie_<somenum> = a in
        (let jessie_<somenum> = (integer_of_int32 !tmp_0_0) in
        (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
        begin
          (((safe_upd_ intP_intM_a_2) jessie_<somenum>) jessie_<somenum>); jessie_<somenum> end)))))
       end)) in void); (return := !mutable_i_5); (raise Return) end); 
    absurd  end with Return -> !return end))) { (JC_<somenum>: true) }

let multiple_update_wrong_3_safety =
 fun (i_5 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (let mutable_i_5 = ref i_5 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp_0_0 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_313:
       (C_316:
       begin
         (let jessie_<somenum> = (tmp_0_0 := !mutable_i_5) in void);
        (let jessie_<somenum> =
        (mutable_i_5 := (C_315:
                        (JC_<somenum>:
                        (int32_of_integer_ (C_314:
                                           ((add_int (integer_of_int32 !mutable_i_5)) (1))))))) in
        void);
        (C_318:
        (let jessie_<somenum> = !mutable_i_5 in
        (let jessie_<somenum> = a in
        (let jessie_<somenum> = (integer_of_int32 !tmp_0_0) in
        (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
        (JC_<somenum>:
        begin
          (((((offset_upd_ !intP_a_2_alloc_table) intP_intM_a_2) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>);
         jessie_<somenum> end)))))) end)) in void); (return := !mutable_i_5);
      (raise Return) end); absurd  end with Return -> !return end)))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let null_ptr_safe_ensures_default =
 fun (x_13 : intP pointer) (intP_x_13_20_alloc_table : intP alloc_table) (intP_intM_x_13_20 : (intP, int32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((le_int(offset_min(intP_x_13_20_alloc_table, x_13), (0))
      and ge_int(offset_max(intP_x_13_20_alloc_table, x_13), (0)))
     or (x_13 = null)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_27 = ref (any_int32 void) in
     try
      begin
        (if ((safe_eq_pointer x_13) null)
        then
         (C_169:
         begin
           (let jessie_<somenum> = (__retres_27 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_168:
         begin
           (let jessie_<somenum> =
           (__retres_27 := (C_167: ((safe_acc_ intP_intM_x_13_20) x_13))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_27); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let null_ptr_safe_safety =
 fun (x_13 : intP pointer) (intP_x_13_20_alloc_table : intP alloc_table) (intP_intM_x_13_20 : (intP, int32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((le_int(offset_min(intP_x_13_20_alloc_table, x_13), (0))
      and ge_int(offset_max(intP_x_13_20_alloc_table, x_13), (0)))
     or (x_13 = null)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_27 = ref (any_int32 void) in
     try
      begin
        (if ((eq_pointer x_13) null)
        then
         (C_169:
         begin
           (let jessie_<somenum> = (__retres_27 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_168:
         begin
           (let jessie_<somenum> =
           (__retres_27 := (C_167:
                           (JC_<somenum>:
                           (((acc_ intP_x_13_20_alloc_table) intP_intM_x_13_20) x_13)))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_27); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let null_ptr_unsafe_ensures_default =
 fun (x_14 : intP pointer) (intP_x_14_19_alloc_table : intP alloc_table) (intP_intM_x_14_19 : (intP, int32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>: le_int(offset_min(intP_x_14_19_alloc_table, x_14), (0)))
     and (JC_<somenum>: ge_int(offset_max(intP_x_14_19_alloc_table, x_14), (0)))))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_26 = ref (any_int32 void) in
     (C_162:
     begin
       (let jessie_<somenum> =
       (__retres_26 := (C_161: ((safe_acc_ intP_intM_x_14_19) x_14))) in
       void); (return := !__retres_26); (raise Return) end)); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let null_ptr_unsafe_safety =
 fun (x_14 : intP pointer) (intP_x_14_19_alloc_table : intP alloc_table) (intP_intM_x_14_19 : (intP, int32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>: le_int(offset_min(intP_x_14_19_alloc_table, x_14), (0)))
     and (JC_<somenum>: ge_int(offset_max(intP_x_14_19_alloc_table, x_14), (0)))))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_26 = ref (any_int32 void) in
     (C_162:
     begin
       (let jessie_<somenum> =
       (__retres_26 := (C_161:
                       (JC_<somenum>:
                       (((acc_ intP_x_14_19_alloc_table) intP_intM_x_14_19) x_14)))) in
       void); (return := !__retres_26); (raise Return) end)); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let null_ptr_wrong_ensures_default =
 fun (x_15 : intP pointer) (intP_x_15_18_alloc_table : intP alloc_table) (intP_intM_x_15_18 : (intP, int32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (let mutable_x_15 = ref x_15 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_25 = ref (any_int32 void) in
     (C_157:
     (C_159:
     begin
       (let jessie_<somenum> = (mutable_x_15 := null) in void);
      (let jessie_<somenum> =
      (__retres_25 := (C_158: ((safe_acc_ intP_intM_x_15_18) !mutable_x_15))) in
      void); (return := !__retres_25); (raise Return) end))); absurd  end
   with Return -> !return end))) { (JC_<somenum>: true) }

let null_ptr_wrong_safety =
 fun (x_15 : intP pointer) (intP_x_15_18_alloc_table : intP alloc_table) (intP_intM_x_15_18 : (intP, int32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (let mutable_x_15 = ref x_15 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_25 = ref (any_int32 void) in
     (C_157:
     (C_159:
     begin
       (let jessie_<somenum> = (mutable_x_15 := null) in void);
      (let jessie_<somenum> =
      (__retres_25 := (C_158:
                      (JC_<somenum>:
                      (((acc_ intP_x_15_18_alloc_table) intP_intM_x_15_18) !mutable_x_15)))) in
      void); (return := !__retres_25); (raise Return) end))); absurd  end
   with Return -> !return end)))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let oob_pointer_safe_ensures_default =
 fun (x_16 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let i_8_0 = ref (any_pointer void) in
     (let __retres_35 = ref (any_int32 void) in
     try
      begin
        (if ((lt_int_ (integer_of_uint32 x_16)) (2))
        then
         (C_235:
         (C_237:
         begin
           (let jessie_<somenum> =
           (i_8_0 := (C_234: ((shift a) (integer_of_uint32 x_16)))) in void);
          (let jessie_<somenum> =
          (__retres_35 := (C_236: ((safe_acc_ !intP_intM_a_2) !i_8_0))) in
          void); (raise (Return_label_exc void)) end))
        else
         (C_233:
         begin
           (let jessie_<somenum> = (__retres_35 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_35); (raise Return) end) end));
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let oob_pointer_safe_safety =
 fun (x_16 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let i_8_0 = ref (any_pointer void) in
     (let __retres_35 = ref (any_int32 void) in
     try
      begin
        (if ((lt_int_ (integer_of_uint32 x_16)) (2))
        then
         (C_235:
         (C_237:
         begin
           (let jessie_<somenum> =
           (i_8_0 := (C_234: ((shift a) (integer_of_uint32 x_16)))) in void);
          (let jessie_<somenum> =
          (__retres_35 := (C_236:
                          (JC_<somenum>:
                          (((acc_ !intP_a_2_alloc_table) !intP_intM_a_2) !i_8_0)))) in
          void); (raise (Return_label_exc void)) end))
        else
         (C_233:
         begin
           (let jessie_<somenum> = (__retres_35 := (safe_int32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_35); (raise Return) end) end));
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let oob_pointer_unsafe_ensures_default =
 fun (x_17 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>: le_int((0), integer_of_uint32(x_17)))
     and (JC_<somenum>: lt_int(integer_of_uint32(x_17), (2)))))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let i_7_0 = ref (any_pointer void) in
     (let __retres_34 = ref (any_int32 void) in
     (C_226:
     (C_228:
     begin
       (let jessie_<somenum> =
       (i_7_0 := (C_225: ((shift a) (integer_of_uint32 x_17)))) in void);
      (let jessie_<somenum> =
      (__retres_34 := (C_227: ((safe_acc_ !intP_intM_a_2) !i_7_0))) in void);
      (return := !__retres_34); (raise Return) end)))); absurd  end with
   Return -> !return end)) { (JC_<somenum>: true) }

let oob_pointer_unsafe_safety =
 fun (x_17 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>: le_int((0), integer_of_uint32(x_17)))
     and (JC_<somenum>: lt_int(integer_of_uint32(x_17), (2)))))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let i_7_0 = ref (any_pointer void) in
     (let __retres_34 = ref (any_int32 void) in
     (C_226:
     (C_228:
     begin
       (let jessie_<somenum> =
       (i_7_0 := (C_225: ((shift a) (integer_of_uint32 x_17)))) in void);
      (let jessie_<somenum> =
      (__retres_34 := (C_227:
                      (JC_<somenum>:
                      (((acc_ !intP_a_2_alloc_table) !intP_intM_a_2) !i_7_0)))) in
      void); (return := !__retres_34); (raise Return) end)))); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let oob_pointer_wrong_ensures_default =
 fun (x_18 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let i_6_0 = ref (any_pointer void) in
     (let __retres_33 = ref (any_int32 void) in
     (C_221:
     (C_223:
     begin
       (let jessie_<somenum> =
       (i_6_0 := (C_220:
                 ((shift (C_219: ((shift a) (integer_of_uint32 x_18)))) (2)))) in
       void);
      (let jessie_<somenum> =
      (__retres_33 := (C_222: ((safe_acc_ !intP_intM_a_2) !i_6_0))) in void);
      (return := !__retres_33); (raise Return) end)))); absurd  end with
   Return -> !return end)) { (JC_<somenum>: true) }

let oob_pointer_wrong_safety =
 fun (x_18 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let i_6_0 = ref (any_pointer void) in
     (let __retres_33 = ref (any_int32 void) in
     (C_221:
     (C_223:
     begin
       (let jessie_<somenum> =
       (i_6_0 := (C_220:
                 ((shift (C_219: ((shift a) (integer_of_uint32 x_18)))) (2)))) in
       void);
      (let jessie_<somenum> =
      (__retres_33 := (C_222:
                      (JC_<somenum>:
                      (((acc_ !intP_a_2_alloc_table) !intP_intM_a_2) !i_6_0)))) in
      void); (return := !__retres_33); (raise Return) end)))); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let order_of_arg_eval_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp_0_5 = ref (any_int32 void) in
     (let tmp_0_6 = ref (any_int32 void) in
     (let tmp_1 = ref (any_int32 void) in
     (C_351:
     begin
       (let jessie_<somenum> =
       (C_347:
       (C_349:
       begin
         (let jessie_<somenum> = (tmp_0_5 := (C_346: (JC_<somenum>: (baz void)))) in
         void); (tmp_0_6 := (C_348: (JC_<somenum>: (bar void)))); !tmp_0_6 end)) in
       void);
      (let jessie_<somenum> =
      (tmp_1 := (C_350:
                (let jessie_<somenum> = !tmp_0_6 in
                (let jessie_<somenum> = !tmp_0_5 in
                (JC_<somenum>: ((foo jessie_<somenum>) jessie_<somenum>)))))) in void);
      (return := !tmp_1); (raise Return) end)))); absurd  end with Return ->
   !return end)) { (JC_<somenum>: true) }

let order_of_arg_eval_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let tmp_0_5 = ref (any_int32 void) in
     (let tmp_0_6 = ref (any_int32 void) in
     (let tmp_1 = ref (any_int32 void) in
     (C_351:
     begin
       (let jessie_<somenum> =
       (C_347:
       (C_349:
       begin
         (let jessie_<somenum> =
         (tmp_0_5 := (C_346: (JC_<somenum>: (baz_requires void)))) in void);
        (tmp_0_6 := (C_348: (JC_<somenum>: (bar_requires void)))); !tmp_0_6 end)) in
       void);
      (let jessie_<somenum> =
      (tmp_1 := (C_350:
                (let jessie_<somenum> = !tmp_0_6 in
                (let jessie_<somenum> = !tmp_0_5 in
                (JC_<somenum>: ((foo_requires jessie_<somenum>) jessie_<somenum>)))))) in
      void); (return := !tmp_1); (raise Return) end)))); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let ptr_sub_safe_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let intP_a_0_0_93_tag_table = ref (any_tag_table void) in
     (let intP_a_0_0_93_alloc_table = ref (any_alloc_table void) in
     (let a_0_0 = ref (any_pointer void) in
     (let x_44 = ref (any_pointer void) in
     (let y_30 = ref (any_pointer void) in
     (let __retres_32 = ref (any_int32 void) in
     (C_209:
     (C_211:
     (C_212:
     (C_215:
     (C_216:
     begin
       (let jessie_<somenum> =
       (a_0_0 := (C_208:
                 (JC_<somenum>:
                 (((alloc_struct_intP (3)) intP_a_0_0_93_alloc_table) intP_a_0_0_93_tag_table)))) in
       void);
      (let jessie_<somenum> = (x_44 := (C_210: ((shift !a_0_0) (2)))) in void);
      (let jessie_<somenum> = (y_30 := !a_0_0) in void);
      (let jessie_<somenum> =
      (__retres_32 := (C_214:
                      (safe_int32_of_integer_ (C_213:
                                              ((safe_sub_pointer_ !x_44) !y_30))))) in
      void); ((safe_free_parameter intP_a_0_0_93_alloc_table) !a_0_0);
      (return := !__retres_32); (raise Return) end))))))))))); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let ptr_sub_safe_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let intP_a_0_0_93_tag_table = ref (any_tag_table void) in
     (let intP_a_0_0_93_alloc_table = ref (any_alloc_table void) in
     (let a_0_0 = ref (any_pointer void) in
     (let x_44 = ref (any_pointer void) in
     (let y_30 = ref (any_pointer void) in
     (let __retres_32 = ref (any_int32 void) in
     (C_209:
     (C_211:
     (C_212:
     (C_215:
     (C_216:
     begin
       (let jessie_<somenum> =
       (a_0_0 := (let jessie_<somenum> =
                 (C_208:
                 (JC_<somenum>:
                 (((alloc_struct_intP_requires (3)) intP_a_0_0_93_alloc_table) intP_a_0_0_93_tag_table))) in
                 (JC_<somenum>:
                 (assert
                 { ge_int(offset_max(intP_a_0_0_93_alloc_table, jessie_<somenum>),
                   (2)) }; jessie_<somenum>)))) in void);
      (let jessie_<somenum> = (x_44 := (C_210: ((shift !a_0_0) (2)))) in void);
      (let jessie_<somenum> = (y_30 := !a_0_0) in void);
      (let jessie_<somenum> =
      (__retres_32 := (C_214:
                      (JC_<somenum>:
                      (int32_of_integer_ (C_213:
                                         ((sub_pointer_ !x_44) !y_30)))))) in
      void); ((free_parameter intP_a_0_0_93_alloc_table) !a_0_0);
      (return := !__retres_32); (raise Return) end))))))))))); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let ptr_sub_unsafe_ensures_default =
 fun (x_19 : intP pointer) (y_10 : intP pointer) (intP_x_19_23_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>: le_int(offset_min(intP_x_19_23_alloc_table, x_19), (0)))
     and ((JC_<somenum>: ge_int(offset_max(intP_x_19_23_alloc_table, x_19), (0)))
         and ((JC_<somenum>:
              le_int(offset_min(intP_x_19_23_alloc_table, y_10), (0)))
             and (JC_<somenum>:
                 ge_int(offset_max(intP_x_19_23_alloc_table, y_10), (0)))))))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_31 = ref (any_int32 void) in
     (C_199:
     begin
       (let jessie_<somenum> =
       (__retres_31 := (C_198:
                       (safe_int32_of_integer_ (C_197:
                                               ((safe_sub_pointer_ x_19) y_10))))) in
       void); (return := !__retres_31); (raise Return) end)); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let ptr_sub_unsafe_safety =
 fun (x_19 : intP pointer) (y_10 : intP pointer) (intP_x_19_23_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>:
     ((JC_<somenum>: le_int(offset_min(intP_x_19_23_alloc_table, x_19), (0)))
     and ((JC_<somenum>: ge_int(offset_max(intP_x_19_23_alloc_table, x_19), (0)))
         and ((JC_<somenum>:
              le_int(offset_min(intP_x_19_23_alloc_table, y_10), (0)))
             and (JC_<somenum>:
                 ge_int(offset_max(intP_x_19_23_alloc_table, y_10), (0)))))))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_31 = ref (any_int32 void) in
     (C_199:
     begin
       (let jessie_<somenum> =
       (__retres_31 := (C_198:
                       (JC_<somenum>:
                       (int32_of_integer_ (C_197: ((sub_pointer_ x_19) y_10)))))) in
       void); (return := !__retres_31); (raise Return) end)); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let ptr_sub_wrong_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let intP_a_0_87_tag_table = ref (any_tag_table void) in
     (let intP_a_0_87_alloc_table = ref (any_alloc_table void) in
     (let a_0 = ref (any_pointer void) in
     (let b = ref (any_pointer void) in
     (let x_43 = ref (any_pointer void) in
     (let y_29 = ref (any_pointer void) in
     (let __retres_30 = ref (any_int32 void) in
     (C_185:
     (C_187:
     (C_189:
     (C_190:
     (C_193:
     (C_194:
     (C_195:
     begin
       (let jessie_<somenum> =
       (a_0 := (C_184:
               (JC_<somenum>:
               (((alloc_struct_intP (20)) intP_a_0_87_alloc_table) intP_a_0_87_tag_table)))) in
       void);
      (let jessie_<somenum> =
      (b := (C_186:
            (JC_<somenum>:
            (((alloc_struct_intP (10)) intP_a_0_87_alloc_table) intP_a_0_87_tag_table)))) in
      void);
      (let jessie_<somenum> = (x_43 := (C_188: ((shift !a_0) (2)))) in void);
      (let jessie_<somenum> = (y_29 := !b) in void);
      (let jessie_<somenum> =
      (__retres_30 := (C_192:
                      (safe_int32_of_integer_ (C_191:
                                              ((safe_sub_pointer_ !x_43) !y_29))))) in
      void); ((safe_free_parameter intP_a_0_87_alloc_table) !a_0);
      ((safe_free_parameter intP_a_0_87_alloc_table) !b);
      (return := !__retres_30); (raise Return) end)))))))))))))); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let ptr_sub_wrong_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let intP_a_0_87_tag_table = ref (any_tag_table void) in
     (let intP_a_0_87_alloc_table = ref (any_alloc_table void) in
     (let a_0 = ref (any_pointer void) in
     (let b = ref (any_pointer void) in
     (let x_43 = ref (any_pointer void) in
     (let y_29 = ref (any_pointer void) in
     (let __retres_30 = ref (any_int32 void) in
     (C_185:
     (C_187:
     (C_189:
     (C_190:
     (C_193:
     (C_194:
     (C_195:
     begin
       (let jessie_<somenum> =
       (a_0 := (let jessie_<somenum> =
               (C_184:
               (JC_<somenum>:
               (((alloc_struct_intP_requires (20)) intP_a_0_87_alloc_table) intP_a_0_87_tag_table))) in
               (JC_<somenum>:
               (assert
               { ge_int(offset_max(intP_a_0_87_alloc_table, jessie_<somenum>),
                 (19)) }; jessie_<somenum>)))) in void);
      (let jessie_<somenum> =
      (b := (let jessie_<somenum> =
            (C_186:
            (JC_<somenum>:
            (((alloc_struct_intP_requires (10)) intP_a_0_87_alloc_table) intP_a_0_87_tag_table))) in
            (JC_<somenum>:
            (assert
            { ge_int(offset_max(intP_a_0_87_alloc_table, jessie_<somenum>), (9)) };
            jessie_<somenum>)))) in void);
      (let jessie_<somenum> = (x_43 := (C_188: ((shift !a_0) (2)))) in void);
      (let jessie_<somenum> = (y_29 := !b) in void);
      (let jessie_<somenum> =
      (__retres_30 := (C_192:
                      (JC_<somenum>:
                      (int32_of_integer_ (C_191:
                                         ((sub_pointer_ !x_43) !y_29)))))) in
      void); ((free_parameter intP_a_0_87_alloc_table) !a_0);
      ((free_parameter intP_a_0_87_alloc_table) !b);
      (return := !__retres_30); (raise Return) end)))))))))))))); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_left_signed_safe_ensures_default =
 fun (x_20 : int32) (y_11 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_14 = ref (any_int32 void) in
     try
      begin
        try
         begin
           (if ((lt_int_ (integer_of_int32 x_20)) (0))
           then (raise (Goto__LOR_exc void))
           else
            (if ((lt_int_ (integer_of_int32 y_11)) (0))
            then (raise (Goto__LOR_exc void))
            else
             (if ((ge_int_ (integer_of_uint32 (C_92:
                                              (safe_uint32_of_integer_ 
                                               (integer_of_int32 y_11))))) (32))
             then (raise (Goto__LOR_exc void))
             else
              begin
                (assert { (JC_<somenum>: ge_int(integer_of_int32(y_11), (0))) };
                void);
               (assert { (JC_<somenum>: lt_int(integer_of_int32(y_11), (32))) };
               void);
               (if ((gt_int_ (integer_of_int32 x_20)) (integer_of_int32 
                                                       (C_91:
                                                       (safe_int32_of_integer_ 
                                                        (C_90:
                                                        ((asr (2147483647)) 
                                                         (integer_of_int32 y_11)))))))
               then (raise (Goto__LOR_exc void))
               else
                begin
                  (let jessie_<somenum> =
                  (C_89:
                  begin
                    (assert
                    { (JC_<somenum>: ge_int(integer_of_int32(y_11), (0))) }; void);
                   (assert
                   { (JC_<somenum>: lt_int(integer_of_int32(y_11), (32))) }; void);
                   (assert { (JC_<somenum>: ge_int(integer_of_int32(x_20), (0))) };
                   void);
                   (assert
                   { (JC_<somenum>:
                     le_int(integer_of_int32(x_20),
                     asr((2147483647), integer_of_int32(y_11)))) }; void);
                   (__retres_14 := (C_88:
                                   (safe_int32_of_integer_ (C_87:
                                                           ((lsl (integer_of_int32 x_20)) 
                                                            (integer_of_int32 y_11))))));
                   !__retres_14 end) in void);
                 (raise (Return_label_exc void)) end) end)));
          (raise (Goto__LOR_exc void)) end with Goto__LOR_exc jessie_<somenum> ->
         (let jessie_<somenum> =
         (_LOR:
         (C_93:
         begin
           (let jessie_<somenum> = (__retres_14 := (safe_int32_of_integer_ (0))) in
           void);
          (C_94:
          begin
            (raise (Return_label_exc void));
           (__retres_14 := (safe_int32_of_integer_ (0))); !__retres_14 end)
         end)) in void) end; (raise (Return_label_exc void)) end with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_14); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_left_signed_safe_safety =
 fun (x_20 : int32) (y_11 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_14 = ref (any_int32 void) in
     try
      begin
        try
         begin
           (if ((lt_int_ (integer_of_int32 x_20)) (0))
           then (raise (Goto__LOR_exc void))
           else
            (if ((lt_int_ (integer_of_int32 y_11)) (0))
            then (raise (Goto__LOR_exc void))
            else
             (if ((ge_int_ (integer_of_uint32 (C_92:
                                              (JC_<somenum>:
                                              (uint32_of_integer_ (integer_of_int32 y_11)))))) (32))
             then (raise (Goto__LOR_exc void))
             else
              begin
                [ { } unit { (JC_<somenum>: ge_int(integer_of_int32(y_11), (0))) } ];
               [ { } unit { (JC_<somenum>: lt_int(integer_of_int32(y_11), (32))) } ];
               (if ((gt_int_ (integer_of_int32 x_20)) (integer_of_int32 
                                                       (C_91:
                                                       (JC_<somenum>:
                                                       (int32_of_integer_ 
                                                        (C_90:
                                                        ((asr (2147483647)) 
                                                         (integer_of_int32 y_11))))))))
               then (raise (Goto__LOR_exc void))
               else
                begin
                  (let jessie_<somenum> =
                  (C_89:
                  begin
                    [ { } unit
                      { (JC_<somenum>: ge_int(integer_of_int32(y_11), (0))) } ];
                   [ { } unit
                     { (JC_<somenum>: lt_int(integer_of_int32(y_11), (32))) } ];
                   [ { } unit
                     { (JC_<somenum>: ge_int(integer_of_int32(x_20), (0))) } ];
                   [ { } unit
                     { (JC_<somenum>:
                       le_int(integer_of_int32(x_20),
                       asr((2147483647), integer_of_int32(y_11)))) } ];
                   (__retres_14 := (C_88:
                                   (JC_<somenum>:
                                   (int32_of_integer_ (C_87:
                                                      ((lsl (integer_of_int32 x_20)) 
                                                       (integer_of_int32 y_11)))))));
                   !__retres_14 end) in void);
                 (raise (Return_label_exc void)) end) end)));
          (raise (Goto__LOR_exc void)) end with Goto__LOR_exc jessie_<somenum> ->
         (let jessie_<somenum> =
         (_LOR:
         (C_93:
         begin
           (let jessie_<somenum> = (__retres_14 := (safe_int32_of_integer_ (0))) in
           void);
          (C_94:
          begin
            (raise (Return_label_exc void));
           (__retres_14 := (safe_int32_of_integer_ (0))); !__retres_14 end)
         end)) in void) end; (raise (Return_label_exc void)) end with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_14); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_left_signed_unsafe_ensures_default =
 fun (x_21 : int32) (y_12 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_13 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_79:
       begin
         (assert { (JC_<somenum>: ge_int(integer_of_int32(y_12), (0))) }; void);
        (assert { (JC_<somenum>: lt_int(integer_of_int32(y_12), (32))) }; void);
        (assert { (JC_<somenum>: ge_int(integer_of_int32(x_21), (0))) }; void);
        (assert
        { (JC_<somenum>:
          le_int(integer_of_int32(x_21),
          asr((2147483647), integer_of_int32(y_12)))) }; void);
        (__retres_13 := (C_78:
                        (safe_int32_of_integer_ (C_77:
                                                ((lsl (integer_of_int32 x_21)) 
                                                 (integer_of_int32 y_12))))));
        !__retres_13 end) in void); (return := !__retres_13); (raise Return)
     end); absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_left_signed_unsafe_safety =
 fun (x_21 : int32) (y_12 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_13 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_79:
       begin
         [ { } unit { (JC_<somenum>: ge_int(integer_of_int32(y_12), (0))) } ];
        [ { } unit { (JC_<somenum>: lt_int(integer_of_int32(y_12), (32))) } ];
        [ { } unit { (JC_<somenum>: ge_int(integer_of_int32(x_21), (0))) } ];
        [ { } unit
          { (JC_<somenum>:
            le_int(integer_of_int32(x_21),
            asr((2147483647), integer_of_int32(y_12)))) } ];
        (__retres_13 := (C_78:
                        (JC_<somenum>:
                        (int32_of_integer_ (C_77:
                                           ((lsl (integer_of_int32 x_21)) 
                                            (integer_of_int32 y_12)))))));
        !__retres_13 end) in void); (return := !__retres_13); (raise Return)
     end); absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_left_signed_wrong_1_ensures_default =
 fun (x_22 : int32) (y_13 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_10 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_62:
       begin
         (assert { (JC_<somenum>: lt_int((32), (32))) }; void);
        (assert { (JC_<somenum>: ge_int(integer_of_int32(x_22), (0))) }; void);
        (assert { (JC_<somenum>: le_int(integer_of_int32(x_22), (0))) }; void);
        (__retres_10 := (C_61:
                        (safe_int32_of_integer_ (C_60:
                                                ((mul_int (integer_of_int32 x_22)) (4294967296))))));
        !__retres_10 end) in void); (return := !__retres_10); (raise Return)
     end); absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_left_signed_wrong_1_safety =
 fun (x_22 : int32) (y_13 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_10 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_62:
       begin
         [ { } unit { (JC_<somenum>: lt_int((32), (32))) } ];
        [ { } unit { (JC_<somenum>: ge_int(integer_of_int32(x_22), (0))) } ];
        [ { } unit { (JC_<somenum>: le_int(integer_of_int32(x_22), (0))) } ];
        (__retres_10 := (C_61:
                        (JC_<somenum>:
                        (int32_of_integer_ (C_60:
                                           ((mul_int (integer_of_int32 x_22)) (4294967296)))))));
        !__retres_10 end) in void); (return := !__retres_10); (raise Return)
     end); absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_left_signed_wrong_2_ensures_default =
 fun (x_23 : int32) (y_14 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_11 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_69:
       begin
         (assert { (JC_<somenum>: ge_int(neg_int((1)), (0))) }; void);
        (assert { (JC_<somenum>: ge_int(integer_of_int32(x_23), (0))) }; void);
        (assert
        { (JC_<somenum>:
          le_int(integer_of_int32(x_23), asr((2147483647), neg_int((1))))) };
        void);
        (__retres_11 := (C_68:
                        (safe_int32_of_integer_ (C_67:
                                                ((lsl (integer_of_int32 x_23)) 
                                                 (neg_int (1)))))));
        !__retres_11 end) in void); (return := !__retres_11); (raise Return)
     end); absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_left_signed_wrong_2_safety =
 fun (x_23 : int32) (y_14 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_11 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_69:
       begin
         [ { } unit { (JC_<somenum>: ge_int(neg_int((1)), (0))) } ];
        [ { } unit { (JC_<somenum>: ge_int(integer_of_int32(x_23), (0))) } ];
        [ { } unit
          { (JC_<somenum>:
            le_int(integer_of_int32(x_23), asr((2147483647), neg_int((1))))) } ];
        (__retres_11 := (C_68:
                        (JC_<somenum>:
                        (int32_of_integer_ (C_67:
                                           ((lsl (integer_of_int32 x_23)) 
                                            (neg_int (1)))))))); !__retres_11
       end) in void); (return := !__retres_11); (raise Return) end); 
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_left_signed_wrong_3_ensures_default =
 fun (x_24 : int32) (y_15 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_12 = ref (any_int32 void) in
     (C_71:
     begin
       (let jessie_<somenum> =
       (__retres_12 := (safe_int32_of_integer_ (neg_int (64)))) in void);
      (return := !__retres_12); (raise Return) end)); absurd  end with
   Return -> !return end)) { (JC_<somenum>: true) }

let shift_left_signed_wrong_3_safety =
 fun (x_24 : int32) (y_15 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_12 = ref (any_int32 void) in
     (C_71:
     begin
       (let jessie_<somenum> =
       (__retres_12 := (safe_int32_of_integer_ (neg_int (64)))) in void);
      (return := !__retres_12); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_left_unsigned_safe_ensures_default =
 fun (x_25 : uint32) (y_16 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_17 = ref (any_uint32 void) in
     try
      begin
        (if ((ge_int_ (integer_of_uint32 y_16)) (32))
        then
         (C_111:
         begin
           (let jessie_<somenum> =
           (__retres_17 := (safe_uint32_of_integer_ (0))) in void);
          (raise (Return_label_exc void)) end)
        else
         begin
           (let jessie_<somenum> =
           (C_110:
           begin
             (assert { (JC_<somenum>: lt_int(integer_of_uint32(y_16), (32))) };
             void);
            (__retres_17 := (C_109:
                            (safe_uint32_of_integer_ (C_108:
                                                     ((lsl (integer_of_uint32 x_25)) 
                                                      (integer_of_uint32 y_16))))));
            !__retres_17 end) in void); (raise (Return_label_exc void)) end);
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_17); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_left_unsigned_safe_safety =
 fun (x_25 : uint32) (y_16 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_17 = ref (any_uint32 void) in
     try
      begin
        (if ((ge_int_ (integer_of_uint32 y_16)) (32))
        then
         (C_111:
         begin
           (let jessie_<somenum> =
           (__retres_17 := (safe_uint32_of_integer_ (0))) in void);
          (raise (Return_label_exc void)) end)
        else
         begin
           (let jessie_<somenum> =
           (C_110:
           begin
             [ { } unit { (JC_<somenum>: lt_int(integer_of_uint32(y_16), (32))) } ];
            (__retres_17 := (C_109:
                            (JC_<somenum>:
                            (uint32_of_integer_ (C_108:
                                                ((lsl (integer_of_uint32 x_25)) 
                                                 (integer_of_uint32 y_16)))))));
            !__retres_17 end) in void); (raise (Return_label_exc void)) end);
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_17); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_left_unsigned_unsafe_ensures_default =
 fun (x_26 : uint32) (y_17 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_16 = ref (any_uint32 void) in
     begin
       (let jessie_<somenum> =
       (C_105:
       begin
         (assert { (JC_<somenum>: lt_int(integer_of_uint32(y_17), (32))) }; void);
        (__retres_16 := (C_104:
                        (safe_uint32_of_integer_ (C_103:
                                                 ((lsl (integer_of_uint32 x_26)) 
                                                  (integer_of_uint32 y_17))))));
        !__retres_16 end) in void); (return := !__retres_16); (raise Return)
     end); absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_left_unsigned_unsafe_safety =
 fun (x_26 : uint32) (y_17 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_16 = ref (any_uint32 void) in
     begin
       (let jessie_<somenum> =
       (C_105:
       begin
         [ { } unit { (JC_<somenum>: lt_int(integer_of_uint32(y_17), (32))) } ];
        (__retres_16 := (C_104:
                        (JC_<somenum>:
                        (uint32_of_integer_ (C_103:
                                            ((lsl (integer_of_uint32 x_26)) 
                                             (integer_of_uint32 y_17)))))));
        !__retres_16 end) in void); (return := !__retres_16); (raise Return)
     end); absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_left_unsigned_wrong_ensures_default =
 fun (x_27 : uint32) (y_18 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_15 = ref (any_uint32 void) in
     begin
       (let jessie_<somenum> =
       (C_100:
       begin
         (assert { (JC_<somenum>: lt_int((32), (32))) }; void);
        (__retres_15 := (C_99:
                        (safe_uint32_of_integer_ (C_98:
                                                 ((mul_int (integer_of_uint32 x_27)) (4294967296))))));
        !__retres_15 end) in void); (return := !__retres_15); (raise Return)
     end); absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_left_unsigned_wrong_safety =
 fun (x_27 : uint32) (y_18 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_15 = ref (any_uint32 void) in
     begin
       (let jessie_<somenum> =
       (C_100:
       begin
         [ { } unit { (JC_<somenum>: lt_int((32), (32))) } ];
        (__retres_15 := (C_99:
                        (JC_<somenum>:
                        (uint32_of_integer_ (C_98:
                                            ((mul_int (integer_of_uint32 x_27)) (4294967296)))))));
        !__retres_15 end) in void); (return := !__retres_15); (raise Return)
     end); absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_right_signed_safe_ensures_default =
 fun (x_28 : int32) (y_19 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_21 = ref (any_int32 void) in
     try
      begin
        try
         begin
           (if ((lt_int_ (integer_of_int32 y_19)) (0))
           then (raise (Goto__LOR_exc void))
           else
            (if ((ge_int_ (integer_of_uint32 (C_135:
                                             (safe_uint32_of_integer_ 
                                              (integer_of_int32 y_19))))) (32))
            then (raise (Goto__LOR_exc void))
            else
             begin
               (let jessie_<somenum> =
               (C_134:
               begin
                 (assert { (JC_<somenum>: ge_int(integer_of_int32(y_19), (0))) };
                 void);
                (assert { (JC_<somenum>: lt_int(integer_of_int32(y_19), (32))) };
                void);
                (__retres_21 := (C_133:
                                (safe_int32_of_integer_ (C_132:
                                                        ((asr (integer_of_int32 x_28)) 
                                                         (integer_of_int32 y_19))))));
                !__retres_21 end) in void); (raise (Return_label_exc void))
             end)); (raise (Goto__LOR_exc void)) end with
         Goto__LOR_exc jessie_<somenum> ->
         (let jessie_<somenum> =
         (_LOR:
         (C_136:
         begin
           (let jessie_<somenum> = (__retres_21 := (safe_int32_of_integer_ (0))) in
           void);
          (C_137:
          begin
            (raise (Return_label_exc void));
           (__retres_21 := (safe_int32_of_integer_ (0))); !__retres_21 end)
         end)) in void) end; (raise (Return_label_exc void)) end with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_21); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_right_signed_safe_safety =
 fun (x_28 : int32) (y_19 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_21 = ref (any_int32 void) in
     try
      begin
        try
         begin
           (if ((lt_int_ (integer_of_int32 y_19)) (0))
           then (raise (Goto__LOR_exc void))
           else
            (if ((ge_int_ (integer_of_uint32 (C_135:
                                             (JC_<somenum>:
                                             (uint32_of_integer_ (integer_of_int32 y_19)))))) (32))
            then (raise (Goto__LOR_exc void))
            else
             begin
               (let jessie_<somenum> =
               (C_134:
               begin
                 [ { } unit { (JC_<somenum>: ge_int(integer_of_int32(y_19), (0))) } ];
                [ { } unit { (JC_<somenum>: lt_int(integer_of_int32(y_19), (32))) } ];
                (__retres_21 := (C_133:
                                (JC_<somenum>:
                                (int32_of_integer_ (C_132:
                                                   ((asr (integer_of_int32 x_28)) 
                                                    (integer_of_int32 y_19)))))));
                !__retres_21 end) in void); (raise (Return_label_exc void))
             end)); (raise (Goto__LOR_exc void)) end with
         Goto__LOR_exc jessie_<somenum> ->
         (let jessie_<somenum> =
         (_LOR:
         (C_136:
         begin
           (let jessie_<somenum> = (__retres_21 := (safe_int32_of_integer_ (0))) in
           void);
          (C_137:
          begin
            (raise (Return_label_exc void));
           (__retres_21 := (safe_int32_of_integer_ (0))); !__retres_21 end)
         end)) in void) end; (raise (Return_label_exc void)) end with
      Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_21); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_right_signed_unsafe_ensures_default =
 fun (x_29 : int32) (y_20 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_20 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_128:
       begin
         (assert { (JC_<somenum>: ge_int(integer_of_int32(y_20), (0))) }; void);
        (assert { (JC_<somenum>: lt_int(integer_of_int32(y_20), (32))) }; void);
        (__retres_20 := (C_127:
                        (safe_int32_of_integer_ (C_126:
                                                ((asr (integer_of_int32 x_29)) 
                                                 (integer_of_int32 y_20))))));
        !__retres_20 end) in void); (return := !__retres_20); (raise Return)
     end); absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_right_signed_unsafe_safety =
 fun (x_29 : int32) (y_20 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_20 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_128:
       begin
         [ { } unit { (JC_<somenum>: ge_int(integer_of_int32(y_20), (0))) } ];
        [ { } unit { (JC_<somenum>: lt_int(integer_of_int32(y_20), (32))) } ];
        (__retres_20 := (C_127:
                        (JC_<somenum>:
                        (int32_of_integer_ (C_126:
                                           ((asr (integer_of_int32 x_29)) 
                                            (integer_of_int32 y_20)))))));
        !__retres_20 end) in void); (return := !__retres_20); (raise Return)
     end); absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_right_signed_wrong_1_ensures_default =
 fun (x_30 : int32) (y_21 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_18 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_117:
       begin
         (assert { (JC_<somenum>: ge_int(neg_int((1)), (0))) }; void);
        (__retres_18 := (C_116:
                        (safe_int32_of_integer_ (C_115:
                                                ((asr (integer_of_int32 x_30)) 
                                                 (neg_int (1)))))));
        !__retres_18 end) in void); (return := !__retres_18); (raise Return)
     end); absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_right_signed_wrong_1_safety =
 fun (x_30 : int32) (y_21 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_18 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_117:
       begin
         [ { } unit { (JC_<somenum>: ge_int(neg_int((1)), (0))) } ];
        (__retres_18 := (C_116:
                        (JC_<somenum>:
                        (int32_of_integer_ (C_115:
                                           ((asr (integer_of_int32 x_30)) 
                                            (neg_int (1)))))))); !__retres_18
       end) in void); (return := !__retres_18); (raise Return) end); 
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_right_signed_wrong_2_ensures_default =
 fun (x_31 : int32) (y_22 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_19 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_122:
       begin
         (assert { (JC_<somenum>: lt_int((32), (32))) }; void);
        (__retres_19 := (C_121:
                        (safe_int32_of_integer_ (C_120:
                                                (JC_<somenum>:
                                                ((computer_div (integer_of_int32 x_31)) (4294967296)))))));
        !__retres_19 end) in void); (return := !__retres_19); (raise Return)
     end); absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_right_signed_wrong_2_safety =
 fun (x_31 : int32) (y_22 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_19 = ref (any_int32 void) in
     begin
       (let jessie_<somenum> =
       (C_122:
       begin
         [ { } unit { (JC_<somenum>: lt_int((32), (32))) } ];
        (__retres_19 := (C_121:
                        (JC_<somenum>:
                        (int32_of_integer_ (C_120:
                                           (JC_<somenum>:
                                           ((computer_div_ (integer_of_int32 x_31)) (4294967296))))))));
        !__retres_19 end) in void); (return := !__retres_19); (raise Return)
     end); absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_right_unsigned_safe_ensures_default =
 fun (x_32 : uint32) (y_23 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_24 = ref (any_uint32 void) in
     try
      begin
        (if ((ge_int_ (integer_of_uint32 y_23)) (32))
        then
         (C_154:
         begin
           (let jessie_<somenum> =
           (__retres_24 := (safe_uint32_of_integer_ (0))) in void);
          (raise (Return_label_exc void)) end)
        else
         begin
           (let jessie_<somenum> =
           (C_153:
           begin
             (assert { (JC_<somenum>: lt_int(integer_of_uint32(y_23), (32))) };
             void);
            (__retres_24 := (C_152:
                            (safe_uint32_of_integer_ (C_151:
                                                     ((lsr (integer_of_uint32 x_32)) 
                                                      (integer_of_uint32 y_23))))));
            !__retres_24 end) in void); (raise (Return_label_exc void)) end);
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_24); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_right_unsigned_safe_safety =
 fun (x_32 : uint32) (y_23 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_24 = ref (any_uint32 void) in
     try
      begin
        (if ((ge_int_ (integer_of_uint32 y_23)) (32))
        then
         (C_154:
         begin
           (let jessie_<somenum> =
           (__retres_24 := (safe_uint32_of_integer_ (0))) in void);
          (raise (Return_label_exc void)) end)
        else
         begin
           (let jessie_<somenum> =
           (C_153:
           begin
             [ { } unit { (JC_<somenum>: lt_int(integer_of_uint32(y_23), (32))) } ];
            (__retres_24 := (C_152:
                            (JC_<somenum>:
                            (uint32_of_integer_ (C_151:
                                                ((lsr (integer_of_uint32 x_32)) 
                                                 (integer_of_uint32 y_23)))))));
            !__retres_24 end) in void); (raise (Return_label_exc void)) end);
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_24); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_right_unsigned_unsafe_ensures_default =
 fun (x_33 : uint32) (y_24 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_23 = ref (any_uint32 void) in
     begin
       (let jessie_<somenum> =
       (C_148:
       begin
         (assert { (JC_<somenum>: lt_int(integer_of_uint32(y_24), (32))) }; void);
        (__retres_23 := (C_147:
                        (safe_uint32_of_integer_ (C_146:
                                                 ((lsr (integer_of_uint32 x_33)) 
                                                  (integer_of_uint32 y_24))))));
        !__retres_23 end) in void); (return := !__retres_23); (raise Return)
     end); absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_right_unsigned_unsafe_safety =
 fun (x_33 : uint32) (y_24 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_23 = ref (any_uint32 void) in
     begin
       (let jessie_<somenum> =
       (C_148:
       begin
         [ { } unit { (JC_<somenum>: lt_int(integer_of_uint32(y_24), (32))) } ];
        (__retres_23 := (C_147:
                        (JC_<somenum>:
                        (uint32_of_integer_ (C_146:
                                            ((lsr (integer_of_uint32 x_33)) 
                                             (integer_of_uint32 y_24)))))));
        !__retres_23 end) in void); (return := !__retres_23); (raise Return)
     end); absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let shift_right_unsigned_wrong_ensures_default =
 fun (x_34 : uint32) (y_25 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_22 = ref (any_uint32 void) in
     begin
       (let jessie_<somenum> =
       (C_143:
       begin
         (assert { (JC_<somenum>: lt_int((32), (32))) }; void);
        (__retres_22 := (C_142:
                        (safe_uint32_of_integer_ (C_141:
                                                 (JC_<somenum>:
                                                 ((computer_div (integer_of_uint32 x_34)) (4294967296)))))));
        !__retres_22 end) in void); (return := !__retres_22); (raise Return)
     end); absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let shift_right_unsigned_wrong_safety =
 fun (x_34 : uint32) (y_25 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_22 = ref (any_uint32 void) in
     begin
       (let jessie_<somenum> =
       (C_143:
       begin
         [ { } unit { (JC_<somenum>: lt_int((32), (32))) } ];
        (__retres_22 := (C_142:
                        (JC_<somenum>:
                        (uint32_of_integer_ (C_141:
                                            (JC_<somenum>:
                                            ((computer_div_ (integer_of_uint32 x_34)) (4294967296))))))));
        !__retres_22 end) in void); (return := !__retres_22); (raise Return)
     end); absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let signed_overflow_safe_ensures_default =
 fun (x_35 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_41 = ref (any_int32 void) in
     try
      begin
        (if ((lt_int_ (integer_of_int32 x_35)) (0))
        then
         (C_281:
         begin
           (let jessie_<somenum> =
           (__retres_41 := (C_280:
                           (safe_int32_of_integer_ (C_279:
                                                   ((add_int (integer_of_int32 x_35)) (2147483647)))))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_278:
         begin
           (let jessie_<somenum> =
           (__retres_41 := (C_277:
                           (safe_int32_of_integer_ (C_276:
                                                   ((sub_int (integer_of_int32 x_35)) (2147483647)))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_41); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let signed_overflow_safe_safety =
 fun (x_35 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_41 = ref (any_int32 void) in
     try
      begin
        (if ((lt_int_ (integer_of_int32 x_35)) (0))
        then
         (C_281:
         begin
           (let jessie_<somenum> =
           (__retres_41 := (C_280:
                           (JC_<somenum>:
                           (int32_of_integer_ (C_279:
                                              ((add_int (integer_of_int32 x_35)) (2147483647))))))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_278:
         begin
           (let jessie_<somenum> =
           (__retres_41 := (C_277:
                           (JC_<somenum>:
                           (int32_of_integer_ (C_276:
                                              ((sub_int (integer_of_int32 x_35)) (2147483647))))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_41); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let signed_overflow_unsafe_ensures_default =
 fun (x_36 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(integer_of_int32(x_36), sub_int((2147483647), (10))))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_40 = ref (any_int32 void) in
     (C_273:
     begin
       (let jessie_<somenum> =
       (__retres_40 := (C_272:
                       (safe_int32_of_integer_ (C_271:
                                               ((add_int (integer_of_int32 x_36)) (10)))))) in
       void); (return := !__retres_40); (raise Return) end)); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let signed_overflow_unsafe_safety =
 fun (x_36 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(integer_of_int32(x_36), sub_int((2147483647), (10))))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_40 = ref (any_int32 void) in
     (C_273:
     begin
       (let jessie_<somenum> =
       (__retres_40 := (C_272:
                       (JC_<somenum>:
                       (int32_of_integer_ (C_271:
                                          ((add_int (integer_of_int32 x_36)) (10))))))) in
       void); (return := !__retres_40); (raise Return) end)); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let signed_overflow_wrong_ensures_default =
 fun (x_37 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_39 = ref (any_int32 void) in
     try
      begin
        (if ((gt_int_ (integer_of_int32 x_37)) (0))
        then
         (C_269:
         begin
           (let jessie_<somenum> =
           (__retres_39 := (C_268:
                           (safe_int32_of_integer_ (C_267:
                                                   ((add_int (integer_of_int32 x_37)) (2147483647)))))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_266:
         begin
           (let jessie_<somenum> =
           (__retres_39 := (C_265:
                           (safe_int32_of_integer_ (C_264:
                                                   ((sub_int (integer_of_int32 
                                                              (C_263:
                                                              (safe_int32_of_integer_ 
                                                               (C_262:
                                                               ((sub_int 
                                                                 (integer_of_int32 x_37)) (1))))))) (2147483647)))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_39); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let signed_overflow_wrong_safety =
 fun (x_37 : int32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres_39 = ref (any_int32 void) in
     try
      begin
        (if ((gt_int_ (integer_of_int32 x_37)) (0))
        then
         (C_269:
         begin
           (let jessie_<somenum> =
           (__retres_39 := (C_268:
                           (JC_<somenum>:
                           (int32_of_integer_ (C_267:
                                              ((add_int (integer_of_int32 x_37)) (2147483647))))))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_266:
         begin
           (let jessie_<somenum> =
           (__retres_39 := (C_265:
                           (JC_<somenum>:
                           (int32_of_integer_ (C_264:
                                              ((sub_int (integer_of_int32 
                                                         (C_263:
                                                         (JC_<somenum>:
                                                         (int32_of_integer_ 
                                                          (C_262:
                                                          ((sub_int (integer_of_int32 x_37)) (1)))))))) (2147483647))))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_39); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let stack_access_wrong_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let intP_x_42_85_tag_table = ref (any_tag_table void) in
     (let intP_x_42_85_alloc_table = ref (any_alloc_table void) in
     (let intP_intM_x_42_85 = (any_memory void) in
     (let x_42 = ref (any_pointer void) in
     (let __retres_29 = ref (any_int32 void) in
     (C_180:
     (C_182:
     begin
       (let jessie_<somenum> =
       (x_42 := (C_179:
                (JC_<somenum>:
                ((bad_local_pointer intP_x_42_85_alloc_table) intP_x_42_85_tag_table)))) in
       void);
      (let jessie_<somenum> =
      (__retres_29 := (C_181: ((safe_acc_ intP_intM_x_42_85) !x_42))) in
      void); (return := !__retres_29); (raise Return) end))))))); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let stack_access_wrong_safety =
 fun (tt : unit) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let intP_x_42_85_tag_table = ref (any_tag_table void) in
     (let intP_x_42_85_alloc_table = ref (any_alloc_table void) in
     (let intP_intM_x_42_85 = (any_memory void) in
     (let x_42 = ref (any_pointer void) in
     (let __retres_29 = ref (any_int32 void) in
     (C_180:
     (C_182:
     begin
       (let jessie_<somenum> =
       (x_42 := (C_179:
                (JC_<somenum>:
                ((bad_local_pointer_requires intP_x_42_85_alloc_table) intP_x_42_85_tag_table)))) in
       void);
      (let jessie_<somenum> =
      (__retres_29 := (C_181:
                      (JC_<somenum>:
                      (((acc_ !intP_x_42_85_alloc_table) intP_intM_x_42_85) !x_42)))) in
      void); (return := !__retres_29); (raise Return) end))))))); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let udiv0_safe_ensures_default =
 fun (x_38 : uint32) (y_26 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_6 = ref (any_uint32 void) in
     try
      begin
        (if ((eq_int_ (integer_of_uint32 y_26)) (0))
        then
         (C_39:
         begin
           (let jessie_<somenum> = (__retres_6 := (safe_uint32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_38:
         begin
           (let jessie_<somenum> =
           (__retres_6 := (C_37:
                          (safe_uint32_of_integer_ (C_36:
                                                   (JC_<somenum>:
                                                   ((computer_div (integer_of_uint32 x_38)) 
                                                    (integer_of_uint32 y_26))))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_6); (raise Return) end) end);
    absurd  end with Return -> !return end)) { (JC_<somenum>: true) }

let udiv0_safe_safety =
 fun (x_38 : uint32) (y_26 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_6 = ref (any_uint32 void) in
     try
      begin
        (if ((eq_int_ (integer_of_uint32 y_26)) (0))
        then
         (C_39:
         begin
           (let jessie_<somenum> = (__retres_6 := (safe_uint32_of_integer_ (0))) in
           void); (raise (Return_label_exc void)) end)
        else
         (C_38:
         begin
           (let jessie_<somenum> =
           (__retres_6 := (C_37:
                          (JC_<somenum>:
                          (uint32_of_integer_ (C_36:
                                              (JC_<somenum>:
                                              ((computer_div_ (integer_of_uint32 x_38)) 
                                               (integer_of_uint32 y_26)))))))) in
           void); (raise (Return_label_exc void)) end));
       (raise (Return_label_exc void)) end with Return_label_exc jessie_<somenum> ->
      (return_label: begin   (return := !__retres_6); (raise Return) end) end);
    absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let udiv0_unsafe_ensures_default =
 fun (x_39 : uint32) (y_27 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (integer_of_uint32(y_27) <> (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_5 = ref (any_uint32 void) in
     (C_33:
     begin
       (let jessie_<somenum> =
       (__retres_5 := (C_32:
                      (safe_uint32_of_integer_ (C_31:
                                               (JC_<somenum>:
                                               ((computer_div (integer_of_uint32 x_39)) 
                                                (integer_of_uint32 y_27))))))) in
       void); (return := !__retres_5); (raise Return) end)); absurd  end with
   Return -> !return end)) { (JC_<somenum>: true) }

let udiv0_unsafe_safety =
 fun (x_39 : uint32) (y_27 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: (integer_of_uint32(y_27) <> (0)))
    and ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
        and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table))))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_5 = ref (any_uint32 void) in
     (C_33:
     begin
       (let jessie_<somenum> =
       (__retres_5 := (C_32:
                      (JC_<somenum>:
                      (uint32_of_integer_ (C_31:
                                          (JC_<somenum>:
                                          ((computer_div_ (integer_of_uint32 x_39)) 
                                           (integer_of_uint32 y_27)))))))) in
       void); (return := !__retres_5); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let udiv0_wrong_ensures_default =
 fun (x_40 : uint32) (y_28 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_4 = ref (any_uint32 void) in
     (C_29:
     begin
       (let jessie_<somenum> =
       (__retres_4 := (C_28:
                      (safe_uint32_of_integer_ (C_27:
                                               (JC_<somenum>:
                                               ((computer_div (integer_of_uint32 x_40)) (0))))))) in
       void); (return := !__retres_4); (raise Return) end)); absurd  end with
   Return -> !return end)) { (JC_<somenum>: true) }

let udiv0_wrong_safety =
 fun (x_40 : uint32) (y_28 : uint32) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_uint32 void) in
  try
   begin
     (let __retres_4 = ref (any_uint32 void) in
     (C_29:
     begin
       (let jessie_<somenum> =
       (__retres_4 := (C_28:
                      (JC_<somenum>:
                      (uint32_of_integer_ (C_27:
                                          (JC_<somenum>:
                                          ((computer_div_ (integer_of_uint32 x_40)) (0)))))))) in
       void); (return := !__retres_4); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }

let volatile_cast_wrong_ensures_default =
 fun (ip_0 : intP pointer) (intP_ip_0_31_alloc_table : intP alloc_table) (intP_intM_ip_0_31 : (intP, int32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let x_48 = ref (any_pointer void) in
     (let __retres_48 = ref (any_int32 void) in
     (C_353:
     (C_355:
     begin
       (let jessie_<somenum> = (x_48 := ip_0) in void);
      (let jessie_<somenum> =
      (__retres_48 := (C_354: ((safe_acc_ intP_intM_ip_0_31) !x_48))) in
      void); (return := !__retres_48); (raise Return) end)))); absurd  end
   with Return -> !return end)) { (JC_<somenum>: true) }

let volatile_cast_wrong_safety =
 fun (ip_0 : intP pointer) (intP_ip_0_31_alloc_table : intP alloc_table) (intP_intM_ip_0_31 : (intP, int32) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let x_48 = ref (any_pointer void) in
     (let __retres_48 = ref (any_int32 void) in
     (C_353:
     (C_355:
     begin
       (let jessie_<somenum> = (x_48 := ip_0) in void);
      (let jessie_<somenum> =
      (__retres_48 := (C_354:
                      (JC_<somenum>:
                      (((acc_ intP_ip_0_31_alloc_table) intP_intM_ip_0_31) !x_48)))) in
      void); (return := !__retres_48); (raise Return) end)))); absurd  end
   with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: valid_a(intP_a_2_alloc_table))
    and (JC_<somenum>: valid___string_abc(charP___string_abc_1_alloc_table)))) }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C undef.jessie --quiet -f undef.makefile project
why --project [...] why/undef.why
<project name="undef" context="why/undef_ctx.why">
  <function name="Function volatile_cast_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po213.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "639" begin = "9" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po214.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "639" begin = "9" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
  <function name="Function udiv0_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po210.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "74" begin = "9" end = "20"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/undef_po211.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "74" begin = "9" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po212.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "74" begin = "9" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function udiv0_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po205.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "81" begin = "9" end = "14"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/undef_po206.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "81" begin = "9" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po207.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "81" begin = "9" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po208.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "79" begin = "0" end = "12"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po209.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "79" begin = "0" end = "12"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function udiv0_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po202.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "94" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/undef_po203.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "94" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po204.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "94" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function stack_access_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po200.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "331" begin = "9" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po201.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "331" begin = "9" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
  <function name="Function signed_overflow_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po194.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "511" begin = "13" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po195.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "511" begin = "13" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po196.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "515" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po197.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "515" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po198.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "515" begin = "13" end = "31"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po199.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "515" begin = "13" end = "31"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function signed_overflow_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po190.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "523" begin = "9" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po191.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "523" begin = "9" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po192.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "521" begin = "0" end = "22"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po193.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "521" begin = "0" end = "22"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function signed_overflow_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po186.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "532" begin = "13" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po187.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "532" begin = "13" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po188.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "536" begin = "13" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po189.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "536" begin = "13" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_right_unsigned_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po182.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "260" begin = "9" end = "35"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po183.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "260" begin = "9" end = "35"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/undef_po184.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "260" begin = "9" end = "35"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po185.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "260" begin = "9" end = "35"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_right_unsigned_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po179.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "268" begin = "9" end = "15"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po180.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "268" begin = "9" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po181.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "268" begin = "9" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_right_unsigned_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po176.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "281" begin = "13" end = "19"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po177.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "281" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po178.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "281" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_right_signed_wrong_2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po172.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "227" begin = "9" end = "30"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po173.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "227" begin = "9" end = "30"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/undef_po174.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "227" begin = "9" end = "30"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po175.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "227" begin = "9" end = "30"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_right_signed_wrong_1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po169.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "220" begin = "9" end = "16"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po170.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "220" begin = "9" end = "16"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po171.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "220" begin = "9" end = "16"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_right_signed_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po165.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "235" begin = "9" end = "15"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po166.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "235" begin = "9" end = "15"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po167.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "235" begin = "9" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po168.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "235" begin = "9" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_right_signed_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po159.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "248" begin = "13" end = "19"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po160.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "248" begin = "13" end = "19"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po161.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "242" begin = "18" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po162.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "242" begin = "18" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po163.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "248" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po164.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "248" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_left_unsigned_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po156.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "184" begin = "9" end = "35"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po157.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "184" begin = "9" end = "35"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po158.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "184" begin = "9" end = "35"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_left_unsigned_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po153.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "192" begin = "9" end = "15"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po154.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "192" begin = "9" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po155.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "192" begin = "9" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_left_unsigned_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po150.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "205" begin = "13" end = "19"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po151.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "205" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po152.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "205" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_left_signed_wrong_3">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Function shift_left_signed_wrong_2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po145.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "141" begin = "9" end = "16"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po146.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "141" begin = "9" end = "16"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po147.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "141" begin = "9" end = "16"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po148.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "141" begin = "9" end = "16"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po149.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "141" begin = "9" end = "16"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_left_signed_wrong_1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po140.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "134" begin = "9" end = "32"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po141.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "134" begin = "9" end = "32"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po142.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "134" begin = "9" end = "32"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po143.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "134" begin = "9" end = "32"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po144.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "134" begin = "9" end = "32"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_left_signed_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po134.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "158" begin = "9" end = "15"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po135.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "158" begin = "9" end = "15"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po136.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "158" begin = "9" end = "15"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po137.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "158" begin = "9" end = "15"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po138.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "158" begin = "9" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po139.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "158" begin = "9" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function shift_left_signed_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po124.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "166" begin = "50" end = "65"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po125.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "166" begin = "50" end = "65"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po126.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "172" begin = "13" end = "19"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po127.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "172" begin = "13" end = "19"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po128.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "166" begin = "18" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po129.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "166" begin = "18" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po130.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "166" begin = "50" end = "65"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po131.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "166" begin = "50" end = "65"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po132.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "172" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po133.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "172" begin = "13" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function ptr_sub_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po115.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "374" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/undef_po116.why">
      <location file = "why/undef.why" line = "4774" begin = "17" end = "95"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po117.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "375" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/undef_po118.why">
      <location file = "why/undef.why" line = "4783" begin = "14" end = "74"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po119.why">
      <location file = "why/undef.why" line = "4791" begin = "42" end = "68"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/undef_po120.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "379" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po121.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "379" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po122.why">
      <location file = "why/undef.why" line = "4792" begin = "14" end = "59"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/undef_po123.why">
      <location file = "why/undef.why" line = "4793" begin = "7" end = "50"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
  </function>
  <function name="Function ptr_sub_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po110.why">
      <location file = "why/undef.why" line = "4691" begin = "51" end = "75"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/undef_po111.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "388" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po112.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "388" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po113.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "386" begin = "0" end = "14"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po114.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "386" begin = "0" end = "14"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function ptr_sub_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po104.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "395" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/undef_po105.why">
      <location file = "why/undef.why" line = "4627" begin = "19" end = "100"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po106.why">
      <location file = "why/undef.why" line = "4635" begin = "42" end = "68"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/undef_po107.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "399" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po108.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "399" begin = "10" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po109.why">
      <location file = "why/undef.why" line = "4636" begin = "14" end = "63"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
  </function>
  <function name="Function order_of_arg_eval">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Function oob_pointer_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po102.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "411" begin = "9" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po103.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "411" begin = "9" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
  <function name="Function oob_pointer_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po98.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "419" begin = "9" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po99.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "419" begin = "9" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po100.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "416" begin = "0" end = "18"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po101.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "416" begin = "0" end = "18"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function oob_pointer_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po96.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "429" begin = "13" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po97.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "429" begin = "13" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
  <function name="Function null_ptr_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po94.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "292" begin = "9" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po95.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "292" begin = "9" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
  <function name="Function null_ptr_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po90.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "299" begin = "9" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po91.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "299" begin = "9" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po92.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "297" begin = "0" end = "15"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po93.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "297" begin = "0" end = "15"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function null_ptr_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po85.why">
      <location file = "why/undef.why" line = "4217" begin = "13" end = "35"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/undef_po86.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "312" begin = "13" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po87.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "312" begin = "13" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po88.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "304" begin = "0" end = "13"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po89.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "304" begin = "0" end = "13"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function multiple_update_wrong_3">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po81.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "591" begin = "4" end = "7"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po82.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "591" begin = "4" end = "7"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po83.why">
      <location file = "why/undef.why" line = "4162" begin = "11" end = "99"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/undef_po84.why">
      <location file = "why/undef.why" line = "4162" begin = "11" end = "99"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
  </function>
  <function name="Function multiple_update_wrong_2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po77.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "583" begin = "6" end = "9"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po78.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "583" begin = "6" end = "9"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po79.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "583" begin = "6" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po80.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "583" begin = "6" end = "13"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function multiple_update_wrong_1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po71.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1322" begin = "22" end = "47"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po72.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1322" begin = "22" end = "47"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po73.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1326" begin = "22" end = "49"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po74.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1326" begin = "22" end = "49"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po75.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "576" begin = "9" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po76.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "576" begin = "9" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function multiple_update_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po63.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1378" begin = "22" end = "51"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po64.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1378" begin = "22" end = "51"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po65.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1382" begin = "22" end = "50"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po66.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1382" begin = "22" end = "50"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po67.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "599" begin = "9" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po68.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "599" begin = "9" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po69.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "597" begin = "0" end = "22"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po70.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "597" begin = "0" end = "22"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function multiple_update_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po56.why">
      <location file = "why/undef.why" line = "3814" begin = "13" end = "34"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/undef_po57.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1410" begin = "25" end = "54"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po58.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1410" begin = "25" end = "54"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po59.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1414" begin = "25" end = "53"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po60.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1414" begin = "25" end = "53"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po61.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "612" begin = "13" end = "32"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po62.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "612" begin = "13" end = "32"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function mod_string">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po54.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1502" begin = "16" end = "57"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po55.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1502" begin = "16" end = "57"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
  <function name="Function mod0_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po51.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "104" begin = "9" end = "20"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/undef_po52.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "104" begin = "9" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po53.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "104" begin = "9" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function mod0_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po46.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "111" begin = "9" end = "14"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/undef_po47.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "111" begin = "9" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po48.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "111" begin = "9" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po49.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "109" begin = "0" end = "11"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po50.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "109" begin = "0" end = "11"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function mod0_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po43.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "124" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/undef_po44.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "124" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po45.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "124" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function missing_return_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po42.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "546" begin = "0" end = "1"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
  </function>
  <function name="Function missing_return_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po39.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "554" begin = "0" end = "1"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po40.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "550" begin = "0" end = "21"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po41.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "550" begin = "0" end = "21"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function missing_return_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Function initialization_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Function initialization_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po37.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "479" begin = "0" end = "21"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po38.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "479" begin = "0" end = "21"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function initialization_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Function div0_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po34.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "25" begin = "9" end = "20"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/undef_po35.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "25" begin = "9" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po36.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "25" begin = "9" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function div0_unsafe_pos">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po24.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "39" begin = "9" end = "14"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/undef_po25.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "39" begin = "9" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po26.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "39" begin = "9" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po27.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "37" begin = "0" end = "15"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po28.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "37" begin = "0" end = "15"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function div0_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po29.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "32" begin = "9" end = "14"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/undef_po30.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "32" begin = "9" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po31.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "32" begin = "9" end = "14"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po32.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "30" begin = "0" end = "11"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po33.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "30" begin = "0" end = "11"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function div0_safe_pos">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po18.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "66" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/undef_po19.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "66" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po20.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "66" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function div0_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po21.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "52" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/undef_po22.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "52" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po23.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "52" begin = "13" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
  </function>
  <function name="Function const_cast_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po16.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1488" begin = "16" end = "39"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po17.why">
      <location file = "PPCHOME/tests/jessie/undef.jessie/undef.jc" line = "1488" begin = "16" end = "39"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
  <function name="Function bad_local_pointer">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/undef_po11.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "318" begin = "12" end = "27"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po12.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "318" begin = "12" end = "27"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/undef_po13.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "322" begin = "6" end = "7"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/undef_po14.why">
      <location file = "why/undef.why" line = "2932" begin = "18" end = "99"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/undef_po15.why">
      <location file = "why/undef.why" line = "2935" begin = "7" end = "56"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
  </function>
  <function name="Function array_bounds_wrong">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po7.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "443" begin = "11" end = "16"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po8.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "443" begin = "11" end = "16"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/undef_po9.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "443" begin = "9" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po10.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "443" begin = "9" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
  <function name="Function array_bounds_unsafe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po3.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "450" begin = "9" end = "13"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po4.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "450" begin = "9" end = "13"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po5.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "448" begin = "0" end = "19"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/undef_po6.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "448" begin = "0" end = "19"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function array_bounds_safe">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/undef_po1.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "459" begin = "13" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/undef_po2.why">
      <location file = "PPCHOME/tests/jessie/undef.c" line = "459" begin = "13" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type __string_abc_1

type a_2

type charP

type int32

type int8

type intP

type padding

type uint16

type uint32

type uint8

type unsigned_charP

type unsigned_shortP

type voidP

logic __string_abc : charP pointer

logic a : intP pointer

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint16 : uint16 -> int

predicate eq_uint16(x: uint16, y: uint16) =
  (integer_of_uint16(x) = integer_of_uint16(y))

logic integer_of_uint32 : uint32 -> int

predicate eq_uint32(x: uint32, y: uint32) =
  (integer_of_uint32(x) = integer_of_uint32(y))

logic integer_of_uint8 : uint8 -> int

predicate eq_uint8(x: uint8, y: uint8) =
  (integer_of_uint8(x) = integer_of_uint8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32 [(integer_of_int32(x) = integer_of_int32(y))].
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8 [(integer_of_int8(x) = integer_of_int8(y))].
      ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_shortP(p: unsigned_shortP pointer,
  a: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  (offset_min(unsigned_shortP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

logic memchr : charP pointer, int, int, (charP, int8) memory -> bool

logic memcmp : charP pointer, charP pointer, int, (charP, int8) memory,
(charP, int8) memory -> int

logic memset : charP pointer, int, int, (charP, int8) memory -> bool

axiom no_assign_memchr_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s_5_at_L:(charP, int8) memory.
          (forall n_2:int.
            (forall c:int.
              (forall s_0:charP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s_0), 0,
                  (n_2 - 1))) and not_assigns(tmpalloc, charP_charM_s_5_at_L,
                  tmpmem, tmp)) ->
                 (memchr(s_0, c, n_2, charP_charM_s_5_at_L) = memchr(s_0, c,
                 n_2, tmpmem))))))))))

axiom no_assign_memcmp_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_3_at_L:(charP, int8) memory.
          (forall charP_charM_s2_4_at_L:(charP, int8) memory.
            (forall n:int.
              (forall s2_1:charP pointer.
                (forall s1_1:charP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s2_1), 0,
                    (n - 1))) and not_assigns(tmpalloc,
                    charP_charM_s2_4_at_L, tmpmem, tmp)) ->
                   (memcmp(s1_1, s2_1, n, charP_charM_s2_4_at_L,
                   charP_charM_s1_3_at_L) = memcmp(s1_1, s2_1, n, tmpmem,
                   charP_charM_s1_3_at_L)))))))))))

axiom no_assign_memcmp_1:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_3_at_L:(charP, int8) memory.
          (forall charP_charM_s2_4_at_L:(charP, int8) memory.
            (forall n:int.
              (forall s2_1:charP pointer.
                (forall s1_1:charP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s1_1), 0,
                    (n - 1))) and not_assigns(tmpalloc,
                    charP_charM_s1_3_at_L, tmpmem, tmp)) ->
                   (memcmp(s1_1, s2_1, n, charP_charM_s2_4_at_L,
                   charP_charM_s1_3_at_L) = memcmp(s1_1, s2_1, n,
                   charP_charM_s2_4_at_L, tmpmem)))))))))))

axiom no_assign_memset_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s_1_6_at_L:(charP, int8) memory.
          (forall n_4:int.
            (forall c_1:int.
              (forall s_1:charP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s_1), 0,
                  (n_4 - 1))) and not_assigns(tmpalloc,
                  charP_charM_s_1_6_at_L, tmpmem, tmp)) ->
                 (memset(s_1, c_1, n_4, charP_charM_s_1_6_at_L) = memset(s_1,
                 c_1, n_4, tmpmem))))))))))

logic strlen : charP pointer, (charP, int8) memory -> int

logic strchr : charP pointer, int, (charP, int8) memory -> bool

axiom no_assign_strchr_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s_15_12_at_L:(charP, int8) memory.
          (forall c_3:int.
            (forall s_15:charP pointer.
              ((pset_disjoint(tmp, pset_range(pset_singleton(s_15), 0,
                strlen(s_15, charP_charM_s_15_12_at_L))) and
                not_assigns(tmpalloc, charP_charM_s_15_12_at_L, tmpmem, tmp)) ->
               (strchr(s_15, c_3, charP_charM_s_15_12_at_L) = strchr(s_15,
               c_3, tmpmem)))))))))

logic strcmp : charP pointer, charP pointer, (charP, int8) memory, (charP,
int8) memory -> int

axiom no_assign_strcmp_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_6_8_at_L:(charP, int8) memory.
          (forall charP_charM_s2_6_9_at_L:(charP, int8) memory.
            (forall s2_6:charP pointer.
              (forall s1_6:charP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s2_6), 0,
                  strlen(s2_6, charP_charM_s2_6_9_at_L))) and
                  not_assigns(tmpalloc, charP_charM_s2_6_9_at_L, tmpmem, tmp)) ->
                 (strcmp(s1_6, s2_6, charP_charM_s2_6_9_at_L,
                 charP_charM_s1_6_8_at_L) = strcmp(s1_6, s2_6, tmpmem,
                 charP_charM_s1_6_8_at_L))))))))))

axiom no_assign_strcmp_1:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_6_8_at_L:(charP, int8) memory.
          (forall charP_charM_s2_6_9_at_L:(charP, int8) memory.
            (forall s2_6:charP pointer.
              (forall s1_6:charP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s1_6), 0,
                  strlen(s1_6, charP_charM_s1_6_8_at_L))) and
                  not_assigns(tmpalloc, charP_charM_s1_6_8_at_L, tmpmem, tmp)) ->
                 (strcmp(s1_6, s2_6, charP_charM_s2_6_9_at_L,
                 charP_charM_s1_6_8_at_L) = strcmp(s1_6, s2_6,
                 charP_charM_s2_6_9_at_L, tmpmem))))))))))

axiom no_assign_strlen_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
          (forall s_3:charP pointer.
            ((pset_disjoint(tmp, pset_range_right(pset_singleton(s_3),
              0)) and not_assigns(tmpalloc, charP_charM_s_3_7_at_L, tmpmem,
              tmp)) ->
             (strlen(s_3, charP_charM_s_3_7_at_L) = strlen(s_3, tmpmem))))))))

logic strncmp : charP pointer, charP pointer, int, (charP, int8) memory,
(charP, int8) memory -> int

axiom no_assign_strncmp_0:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_9_10_at_L:(charP, int8) memory.
          (forall charP_charM_s2_9_11_at_L:(charP, int8) memory.
            (forall n_10:int.
              (forall s2_9:charP pointer.
                (forall s1_9:charP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s2_9), 0,
                    (n_10 - 1))) and not_assigns(tmpalloc,
                    charP_charM_s2_9_11_at_L, tmpmem, tmp)) ->
                   (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_11_at_L,
                   charP_charM_s1_9_10_at_L) = strncmp(s1_9, s2_9, n_10,
                   tmpmem, charP_charM_s1_9_10_at_L)))))))))))

axiom no_assign_strncmp_1:
  (forall tmp:charP pset.
    (forall tmpmem:(charP, int8) memory.
      (forall tmpalloc:charP alloc_table.
        (forall charP_charM_s1_9_10_at_L:(charP, int8) memory.
          (forall charP_charM_s2_9_11_at_L:(charP, int8) memory.
            (forall n_10:int.
              (forall s2_9:charP pointer.
                (forall s1_9:charP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s1_9), 0,
                    (n_10 - 1))) and not_assigns(tmpalloc,
                    charP_charM_s1_9_10_at_L, tmpmem, tmp)) ->
                   (strncmp(s1_9, s2_9, n_10, charP_charM_s2_9_11_at_L,
                   charP_charM_s1_9_10_at_L) = strncmp(s1_9, s2_9, n_10,
                   charP_charM_s2_9_11_at_L, tmpmem)))))))))))

logic wcslen : unsigned_shortP pointer, (unsigned_shortP,
uint16) memory -> int

logic wcscmp : unsigned_shortP pointer, unsigned_shortP pointer,
(unsigned_shortP, uint16) memory, (unsigned_shortP, uint16) memory -> int

axiom no_assign_wcscmp_0:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s1_11_14_at_L:(unsigned_shortP,
          uint16) memory.
          (forall unsigned_shortP_unsigned_shortM_s2_11_15_at_L:(unsigned_shortP,
            uint16) memory.
            (forall s2_11:unsigned_shortP pointer.
              (forall s1_11:unsigned_shortP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s2_11), 0,
                  wcslen(s2_11,
                  unsigned_shortP_unsigned_shortM_s2_11_15_at_L))) and
                  not_assigns(tmpalloc,
                  unsigned_shortP_unsigned_shortM_s2_11_15_at_L, tmpmem, tmp)) ->
                 (wcscmp(s1_11, s2_11,
                 unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
                 unsigned_shortP_unsigned_shortM_s1_11_14_at_L) = wcscmp(s1_11,
                 s2_11, tmpmem,
                 unsigned_shortP_unsigned_shortM_s1_11_14_at_L))))))))))

axiom no_assign_wcscmp_1:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s1_11_14_at_L:(unsigned_shortP,
          uint16) memory.
          (forall unsigned_shortP_unsigned_shortM_s2_11_15_at_L:(unsigned_shortP,
            uint16) memory.
            (forall s2_11:unsigned_shortP pointer.
              (forall s1_11:unsigned_shortP pointer.
                ((pset_disjoint(tmp, pset_range(pset_singleton(s1_11), 0,
                  wcslen(s1_11,
                  unsigned_shortP_unsigned_shortM_s1_11_14_at_L))) and
                  not_assigns(tmpalloc,
                  unsigned_shortP_unsigned_shortM_s1_11_14_at_L, tmpmem, tmp)) ->
                 (wcscmp(s1_11, s2_11,
                 unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
                 unsigned_shortP_unsigned_shortM_s1_11_14_at_L) = wcscmp(s1_11,
                 s2_11, unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
                 tmpmem))))))))))

axiom no_assign_wcslen_0:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:(unsigned_shortP,
          uint16) memory.
          (forall s_17:unsigned_shortP pointer.
            ((pset_disjoint(tmp, pset_range_right(pset_singleton(s_17),
              0)) and not_assigns(tmpalloc,
              unsigned_shortP_unsigned_shortM_s_17_13_at_L, tmpmem, tmp)) ->
             (wcslen(s_17,
             unsigned_shortP_unsigned_shortM_s_17_13_at_L) = wcslen(s_17,
             tmpmem))))))))

logic wcsncmp : unsigned_shortP pointer, unsigned_shortP pointer, int,
(unsigned_shortP, uint16) memory, (unsigned_shortP, uint16) memory -> int

axiom no_assign_wcsncmp_0:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s1_13_16_at_L:(unsigned_shortP,
          uint16) memory.
          (forall unsigned_shortP_unsigned_shortM_s2_13_17_at_L:(unsigned_shortP,
            uint16) memory.
            (forall n_12:int.
              (forall s2_13:unsigned_shortP pointer.
                (forall s1_13:unsigned_shortP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s2_13), 0,
                    (n_12 - 1))) and not_assigns(tmpalloc,
                    unsigned_shortP_unsigned_shortM_s2_13_17_at_L, tmpmem,
                    tmp)) ->
                   (wcsncmp(s1_13, s2_13, n_12,
                   unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
                   unsigned_shortP_unsigned_shortM_s1_13_16_at_L) = wcsncmp(s1_13,
                   s2_13, n_12, tmpmem,
                   unsigned_shortP_unsigned_shortM_s1_13_16_at_L)))))))))))

axiom no_assign_wcsncmp_1:
  (forall tmp:unsigned_shortP pset.
    (forall tmpmem:(unsigned_shortP, uint16) memory.
      (forall tmpalloc:unsigned_shortP alloc_table.
        (forall unsigned_shortP_unsigned_shortM_s1_13_16_at_L:(unsigned_shortP,
          uint16) memory.
          (forall unsigned_shortP_unsigned_shortM_s2_13_17_at_L:(unsigned_shortP,
            uint16) memory.
            (forall n_12:int.
              (forall s2_13:unsigned_shortP pointer.
                (forall s1_13:unsigned_shortP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(s1_13), 0,
                    (n_12 - 1))) and not_assigns(tmpalloc,
                    unsigned_shortP_unsigned_shortM_s1_13_16_at_L, tmpmem,
                    tmp)) ->
                   (wcsncmp(s1_13, s2_13, n_12,
                   unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
                   unsigned_shortP_unsigned_shortM_s1_13_16_at_L) = wcsncmp(s1_13,
                   s2_13, n_12,
                   unsigned_shortP_unsigned_shortM_s2_13_17_at_L, tmpmem)))))))))))

axiom no_update_memchr_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s_5_at_L:(charP, int8) memory.
        (forall n_2:int.
          (forall c:int.
            (forall s_0:charP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s_0), 0,
               (n_2 - 1)))) -> (memchr(s_0, c, n_2,
               charP_charM_s_5_at_L) = memchr(s_0, c, n_2,
               store(charP_charM_s_5_at_L, tmp, tmpval))))))))))

axiom no_update_memcmp_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_3_at_L:(charP, int8) memory.
        (forall charP_charM_s2_4_at_L:(charP, int8) memory.
          (forall n:int.
            (forall s2_1:charP pointer.
              (forall s1_1:charP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s2_1), 0,
                 (n - 1)))) -> (memcmp(s1_1, s2_1, n, charP_charM_s2_4_at_L,
                 charP_charM_s1_3_at_L) = memcmp(s1_1, s2_1, n,
                 store(charP_charM_s2_4_at_L, tmp, tmpval),
                 charP_charM_s1_3_at_L))))))))))

axiom no_update_memcmp_1:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_3_at_L:(charP, int8) memory.
        (forall charP_charM_s2_4_at_L:(charP, int8) memory.
          (forall n:int.
            (forall s2_1:charP pointer.
              (forall s1_1:charP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s1_1), 0,
                 (n - 1)))) -> (memcmp(s1_1, s2_1, n, charP_charM_s2_4_at_L,
                 charP_charM_s1_3_at_L) = memcmp(s1_1, s2_1, n,
                 charP_charM_s2_4_at_L, store(charP_charM_s1_3_at_L, tmp,
                 tmpval)))))))))))

axiom no_update_memset_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s_1_6_at_L:(charP, int8) memory.
        (forall n_4:int.
          (forall c_1:int.
            (forall s_1:charP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s_1), 0,
               (n_4 - 1)))) -> (memset(s_1, c_1, n_4,
               charP_charM_s_1_6_at_L) = memset(s_1, c_1, n_4,
               store(charP_charM_s_1_6_at_L, tmp, tmpval))))))))))

axiom no_update_strchr_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s_15_12_at_L:(charP, int8) memory.
        (forall c_3:int.
          (forall s_15:charP pointer.
            ((not in_pset(tmp, pset_range(pset_singleton(s_15), 0,
             strlen(s_15, charP_charM_s_15_12_at_L)))) -> (strchr(s_15, c_3,
             charP_charM_s_15_12_at_L) = strchr(s_15, c_3,
             store(charP_charM_s_15_12_at_L, tmp, tmpval)))))))))

axiom no_update_strcmp_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_6_8_at_L:(charP, int8) memory.
        (forall charP_charM_s2_6_9_at_L:(charP, int8) memory.
          (forall s2_6:charP pointer.
            (forall s1_6:charP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s2_6), 0,
               strlen(s2_6, charP_charM_s2_6_9_at_L)))) -> (strcmp(s1_6,
               s2_6, charP_charM_s2_6_9_at_L,
               charP_charM_s1_6_8_at_L) = strcmp(s1_6, s2_6,
               store(charP_charM_s2_6_9_at_L, tmp, tmpval),
               charP_charM_s1_6_8_at_L)))))))))

axiom no_update_strcmp_1:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_6_8_at_L:(charP, int8) memory.
        (forall charP_charM_s2_6_9_at_L:(charP, int8) memory.
          (forall s2_6:charP pointer.
            (forall s1_6:charP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s1_6), 0,
               strlen(s1_6, charP_charM_s1_6_8_at_L)))) -> (strcmp(s1_6,
               s2_6, charP_charM_s2_6_9_at_L,
               charP_charM_s1_6_8_at_L) = strcmp(s1_6, s2_6,
               charP_charM_s2_6_9_at_L, store(charP_charM_s1_6_8_at_L, tmp,
               tmpval))))))))))

axiom no_update_strlen_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
        (forall s_3:charP pointer.
          ((not in_pset(tmp, pset_range_right(pset_singleton(s_3), 0))) ->
           (strlen(s_3, charP_charM_s_3_7_at_L) = strlen(s_3,
           store(charP_charM_s_3_7_at_L, tmp, tmpval))))))))

axiom no_update_strncmp_0:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_9_10_at_L:(charP, int8) memory.
        (forall charP_charM_s2_9_11_at_L:(charP, int8) memory.
          (forall n_10:int.
            (forall s2_9:charP pointer.
              (forall s1_9:charP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s2_9), 0,
                 (n_10 - 1)))) -> (strncmp(s1_9, s2_9, n_10,
                 charP_charM_s2_9_11_at_L,
                 charP_charM_s1_9_10_at_L) = strncmp(s1_9, s2_9, n_10,
                 store(charP_charM_s2_9_11_at_L, tmp, tmpval),
                 charP_charM_s1_9_10_at_L))))))))))

axiom no_update_strncmp_1:
  (forall tmp:charP pointer.
    (forall tmpval:int8.
      (forall charP_charM_s1_9_10_at_L:(charP, int8) memory.
        (forall charP_charM_s2_9_11_at_L:(charP, int8) memory.
          (forall n_10:int.
            (forall s2_9:charP pointer.
              (forall s1_9:charP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s1_9), 0,
                 (n_10 - 1)))) -> (strncmp(s1_9, s2_9, n_10,
                 charP_charM_s2_9_11_at_L,
                 charP_charM_s1_9_10_at_L) = strncmp(s1_9, s2_9, n_10,
                 charP_charM_s2_9_11_at_L, store(charP_charM_s1_9_10_at_L,
                 tmp, tmpval)))))))))))

axiom no_update_wcscmp_0:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s1_11_14_at_L:(unsigned_shortP,
        uint16) memory.
        (forall unsigned_shortP_unsigned_shortM_s2_11_15_at_L:(unsigned_shortP,
          uint16) memory.
          (forall s2_11:unsigned_shortP pointer.
            (forall s1_11:unsigned_shortP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s2_11), 0,
               wcslen(s2_11,
               unsigned_shortP_unsigned_shortM_s2_11_15_at_L)))) ->
               (wcscmp(s1_11, s2_11,
               unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
               unsigned_shortP_unsigned_shortM_s1_11_14_at_L) = wcscmp(s1_11,
               s2_11, store(unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
               tmp, tmpval), unsigned_shortP_unsigned_shortM_s1_11_14_at_L)))))))))

axiom no_update_wcscmp_1:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s1_11_14_at_L:(unsigned_shortP,
        uint16) memory.
        (forall unsigned_shortP_unsigned_shortM_s2_11_15_at_L:(unsigned_shortP,
          uint16) memory.
          (forall s2_11:unsigned_shortP pointer.
            (forall s1_11:unsigned_shortP pointer.
              ((not in_pset(tmp, pset_range(pset_singleton(s1_11), 0,
               wcslen(s1_11,
               unsigned_shortP_unsigned_shortM_s1_11_14_at_L)))) ->
               (wcscmp(s1_11, s2_11,
               unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
               unsigned_shortP_unsigned_shortM_s1_11_14_at_L) = wcscmp(s1_11,
               s2_11, unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
               store(unsigned_shortP_unsigned_shortM_s1_11_14_at_L, tmp,
               tmpval))))))))))

axiom no_update_wcslen_0:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:(unsigned_shortP,
        uint16) memory.
        (forall s_17:unsigned_shortP pointer.
          ((not in_pset(tmp, pset_range_right(pset_singleton(s_17), 0))) ->
           (wcslen(s_17,
           unsigned_shortP_unsigned_shortM_s_17_13_at_L) = wcslen(s_17,
           store(unsigned_shortP_unsigned_shortM_s_17_13_at_L, tmp, tmpval))))))))

axiom no_update_wcsncmp_0:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s1_13_16_at_L:(unsigned_shortP,
        uint16) memory.
        (forall unsigned_shortP_unsigned_shortM_s2_13_17_at_L:(unsigned_shortP,
          uint16) memory.
          (forall n_12:int.
            (forall s2_13:unsigned_shortP pointer.
              (forall s1_13:unsigned_shortP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s2_13), 0,
                 (n_12 - 1)))) -> (wcsncmp(s1_13, s2_13, n_12,
                 unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
                 unsigned_shortP_unsigned_shortM_s1_13_16_at_L) = wcsncmp(s1_13,
                 s2_13, n_12,
                 store(unsigned_shortP_unsigned_shortM_s2_13_17_at_L, tmp,
                 tmpval), unsigned_shortP_unsigned_shortM_s1_13_16_at_L))))))))))

axiom no_update_wcsncmp_1:
  (forall tmp:unsigned_shortP pointer.
    (forall tmpval:uint16.
      (forall unsigned_shortP_unsigned_shortM_s1_13_16_at_L:(unsigned_shortP,
        uint16) memory.
        (forall unsigned_shortP_unsigned_shortM_s2_13_17_at_L:(unsigned_shortP,
          uint16) memory.
          (forall n_12:int.
            (forall s2_13:unsigned_shortP pointer.
              (forall s1_13:unsigned_shortP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(s1_13), 0,
                 (n_12 - 1)))) -> (wcsncmp(s1_13, s2_13, n_12,
                 unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
                 unsigned_shortP_unsigned_shortM_s1_13_16_at_L) = wcsncmp(s1_13,
                 s2_13, n_12, unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
                 store(unsigned_shortP_unsigned_shortM_s1_13_16_at_L, tmp,
                 tmpval)))))))))))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic unsigned_shortP_of_pointer_address : unit pointer -> unsigned_shortP pointer

axiom pointer_addr_of_unsigned_shortP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_shortP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_shortP(p: unsigned_shortP pointer,
  b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  (offset_max(unsigned_shortP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_shortP(p: unsigned_shortP pointer,
  a: int, b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  ((offset_min(unsigned_shortP_alloc_table, p) = a) and
   (offset_max(unsigned_shortP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_shortP(p: unsigned_shortP pointer,
  a: int, b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  ((offset_min(unsigned_shortP_alloc_table, p) = a) and
   (offset_max(unsigned_shortP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint16_of_integer : int -> uint16

axiom uint16_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 65535)) ->
     (integer_of_uint16(uint16_of_integer(x)) = x)))

axiom uint16_extensionality:
  (forall x:uint16.
    (forall y:uint16 [(integer_of_uint16(x) = integer_of_uint16(y))].
      ((integer_of_uint16(x) = integer_of_uint16(y)) -> (x = y))))

axiom uint16_range:
  (forall x:uint16.
    ((0 <= integer_of_uint16(x)) and (integer_of_uint16(x) <= 65535)))

logic uint32_of_integer : int -> uint32

axiom uint32_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 4294967295)) ->
     (integer_of_uint32(uint32_of_integer(x)) = x)))

axiom uint32_extensionality:
  (forall x:uint32.
    (forall y:uint32 [(integer_of_uint32(x) = integer_of_uint32(y))].
      ((integer_of_uint32(x) = integer_of_uint32(y)) -> (x = y))))

axiom uint32_range:
  (forall x:uint32.
    ((0 <= integer_of_uint32(x)) and (integer_of_uint32(x) <= 4294967295)))

logic uint8_of_integer : int -> uint8

axiom uint8_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 255)) -> (integer_of_uint8(uint8_of_integer(x)) = x)))

axiom uint8_extensionality:
  (forall x:uint8.
    (forall y:uint8 [(integer_of_uint8(x) = integer_of_uint8(y))].
      ((integer_of_uint8(x) = integer_of_uint8(y)) -> (x = y))))

axiom uint8_range:
  (forall x:uint8.
    ((0 <= integer_of_uint8(x)) and (integer_of_uint8(x) <= 255)))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

logic unsigned_shortP_tag : unsigned_shortP tag_id

axiom unsigned_shortP_int: (int_of_tag(unsigned_shortP_tag) = 1)

axiom unsigned_shortP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_shortP pointer.
    (p = unsigned_shortP_of_pointer_address(pointer_address(p))))

axiom unsigned_shortP_parenttag_bottom: parenttag(unsigned_shortP_tag,
  bottom_tag)

axiom unsigned_shortP_tags:
  (forall x:unsigned_shortP pointer.
    (forall unsigned_shortP_tag_table:unsigned_shortP tag_table.
      instanceof(unsigned_shortP_tag_table, x, unsigned_shortP_tag)))

predicate valid___string_abc(charP___string_abc_1_alloc_table: charP alloc_table) =
  ((offset_min(charP___string_abc_1_alloc_table, __string_abc) <= 0) and
   (offset_max(charP___string_abc_1_alloc_table, __string_abc) >= 3))

predicate valid_a(intP_a_2_alloc_table: intP alloc_table) =
  ((offset_min(intP_a_2_alloc_table, a) <= 0) and
   (offset_max(intP_a_2_alloc_table, a) >= 1))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_unsigned_shortP(p: unsigned_shortP pointer, a: int,
  b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  ((offset_min(unsigned_shortP_alloc_table, p) <= a) and
   (offset_max(unsigned_shortP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_unsigned_shortP(p: unsigned_shortP pointer, a: int,
  b: int, unsigned_shortP_alloc_table: unsigned_shortP alloc_table) =
  ((offset_min(unsigned_shortP_alloc_table, p) <= a) and
   (offset_max(unsigned_shortP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

axiom memcmp_range:
  (forall charP_charM_s2_4_at_L:(charP, int8) memory.
    (forall charP_charM_s1_3_at_L:(charP, int8) memory.
      (forall s1_0_0:charP pointer.
        (forall s2_0_0:charP pointer.
          (forall n_0:int.
            ((((-2147483647) - 1) <= memcmp(s1_0_0, s2_0_0, n_0,
             charP_charM_s2_4_at_L, charP_charM_s1_3_at_L)) and
             (memcmp(s1_0_0, s2_0_0, n_0, charP_charM_s2_4_at_L,
             charP_charM_s1_3_at_L) <= 2147483647)))))))

axiom memcmp_zero:
  (forall charP_charM_s2_4_at_L:(charP, int8) memory.
    (forall charP_charM_s1_3_at_L:(charP, int8) memory.
      (forall s1_1_0:charP pointer.
        (forall s2_1_0:charP pointer.
          (forall n_1:int.
            ((memcmp(s1_1_0, s2_1_0, n_1, charP_charM_s2_4_at_L,
             charP_charM_s1_3_at_L) = 0) <->
             (forall i_1_0:int.
               (((0 <= i_1_0) and (i_1_0 < n_1)) ->
                (integer_of_int8(select(charP_charM_s1_3_at_L, shift(s1_1_0,
                i_1_0))) = integer_of_int8(select(charP_charM_s2_4_at_L,
                shift(s2_1_0, i_1_0))))))))))))

axiom memchr_def:
  (forall charP_charM_s_5_at_L:(charP, int8) memory.
    (forall s_0_0:charP pointer.
      (forall c_0:int.
        (forall n_3:int.
          ((memchr(s_0_0, c_0, n_3, charP_charM_s_5_at_L) = true) <->
           (exists i_2_0:int32.
             ((0 <= integer_of_int32(i_2_0)) and
              ((integer_of_int32(i_2_0) < n_3) and
               (integer_of_int8(select(charP_charM_s_5_at_L, shift(s_0_0,
               integer_of_int32(i_2_0)))) = c_0)))))))))

axiom memset_def:
  (forall charP_charM_s_1_6_at_L:(charP, int8) memory.
    (forall s_2:charP pointer.
      (forall c_2:int.
        (forall n_5:int.
          ((memset(s_2, c_2, n_5, charP_charM_s_1_6_at_L) = true) <->
           (forall i_3_0:int.
             (((0 <= i_3_0) and (i_3_0 < n_5)) ->
              (integer_of_int8(select(charP_charM_s_1_6_at_L, shift(s_2,
              i_3_0))) = c_2))))))))

axiom strlen_pos_or_null:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s_4:charP pointer.
      (forall i_4_0:int.
        (((0 <= i_4_0) and
          ((i_4_0 <= 2147483647) and
           ((forall j_0:int.
              (((0 <= j_0) and (j_0 < i_4_0)) ->
               (integer_of_int8(select(charP_charM_s_3_7_at_L, shift(s_4,
               j_0))) <> 0))) and
            (integer_of_int8(select(charP_charM_s_3_7_at_L, shift(s_4,
            i_4_0))) = 0)))) ->
         (strlen(s_4, charP_charM_s_3_7_at_L) = i_4_0)))))

axiom strlen_neg:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s_5:charP pointer.
      ((forall i_5_0:int.
         (((0 <= i_5_0) and (i_5_0 <= 2147483647)) ->
          (integer_of_int8(select(charP_charM_s_3_7_at_L, shift(s_5,
          i_5_0))) <> 0))) ->
       (strlen(s_5, charP_charM_s_3_7_at_L) < 0))))

axiom strlen_range:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s_6:charP pointer. (strlen(s_6,
      charP_charM_s_3_7_at_L) <= 2147483647)))

axiom strlen_before_null:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s_7:charP pointer.
      (forall i_6:int.
        (((0 <= i_6) and (i_6 < strlen(s_7, charP_charM_s_3_7_at_L))) ->
         (integer_of_int8(select(charP_charM_s_3_7_at_L, shift(s_7,
         i_6))) <> 0)))))

axiom strlen_at_null:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s_8:charP pointer.
      ((0 <= strlen(s_8, charP_charM_s_3_7_at_L)) ->
       (integer_of_int8(select(charP_charM_s_3_7_at_L, shift(s_8, strlen(s_8,
       charP_charM_s_3_7_at_L)))) = 0))))

axiom strlen_not_zero:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s_9:charP pointer.
      (forall i_7:int.
        (((0 <= i_7) and
          ((i_7 <= strlen(s_9, charP_charM_s_3_7_at_L)) and
           (integer_of_int8(select(charP_charM_s_3_7_at_L, shift(s_9,
           i_7))) <> 0))) ->
         (i_7 < strlen(s_9, charP_charM_s_3_7_at_L))))))

axiom strlen_zero:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s_10:charP pointer.
      (forall i_8:int.
        (((0 <= i_8) and
          ((i_8 <= strlen(s_10, charP_charM_s_3_7_at_L)) and
           (integer_of_int8(select(charP_charM_s_3_7_at_L, shift(s_10,
           i_8))) = 0))) ->
         (i_8 = strlen(s_10, charP_charM_s_3_7_at_L))))))

axiom strlen_sup:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s_11:charP pointer.
      (forall i_9:int.
        (((0 <= i_9) and (integer_of_int8(select(charP_charM_s_3_7_at_L,
          shift(s_11, i_9))) = 0)) ->
         ((0 <= strlen(s_11, charP_charM_s_3_7_at_L)) and (strlen(s_11,
          charP_charM_s_3_7_at_L) <= i_9))))))

axiom strlen_shift:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s_12:charP pointer.
      (forall i_10:int.
        (((0 <= i_10) and (i_10 <= strlen(s_12, charP_charM_s_3_7_at_L))) ->
         (strlen(shift(s_12, i_10), charP_charM_s_3_7_at_L) = (strlen(s_12,
         charP_charM_s_3_7_at_L) - i_10))))))

axiom strlen_create:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s_13:charP pointer.
      (forall i_11:int.
        (((0 <= i_11) and
          ((i_11 <= 2147483647) and
           (integer_of_int8(select(charP_charM_s_3_7_at_L, shift(s_13,
           i_11))) = 0))) ->
         ((0 <= strlen(s_13, charP_charM_s_3_7_at_L)) and (strlen(s_13,
          charP_charM_s_3_7_at_L) <= i_11))))))

axiom strlen_create_shift:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s_14:charP pointer.
      (forall i_12:int.
        (forall k:int.
          (((0 <= k) and
            ((k <= i_12) and
             ((i_12 <= 2147483647) and
              (integer_of_int8(select(charP_charM_s_3_7_at_L, shift(s_14,
              i_12))) = 0)))) ->
           ((0 <= strlen(shift(s_14, k), charP_charM_s_3_7_at_L)) and
            (strlen(shift(s_14, k), charP_charM_s_3_7_at_L) <= (i_12 - k))))))))

axiom memcmp_strlen_left:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s1_2:charP pointer.
      (forall s2_2:charP pointer.
        (forall n_6:int.
          (((memcmp(s1_2, s2_2, n_6, charP_charM_s_3_7_at_L,
            charP_charM_s_3_7_at_L) = 0) and (strlen(s1_2,
            charP_charM_s_3_7_at_L) < n_6)) ->
           (strlen(s1_2, charP_charM_s_3_7_at_L) = strlen(s2_2,
           charP_charM_s_3_7_at_L)))))))

axiom memcmp_strlen_right:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s1_3:charP pointer.
      (forall s2_3:charP pointer.
        (forall n_7:int.
          (((memcmp(s1_3, s2_3, n_7, charP_charM_s_3_7_at_L,
            charP_charM_s_3_7_at_L) = 0) and (strlen(s2_3,
            charP_charM_s_3_7_at_L) < n_7)) ->
           (strlen(s1_3, charP_charM_s_3_7_at_L) = strlen(s2_3,
           charP_charM_s_3_7_at_L)))))))

axiom memcmp_strlen_shift_left:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s1_4:charP pointer.
      (forall s2_4:charP pointer.
        (forall k_0:int.
          (forall n_8:int.
            (((memcmp(s1_4, shift(s2_4, k_0), n_8, charP_charM_s_3_7_at_L,
              charP_charM_s_3_7_at_L) = 0) and
              ((0 <= k_0) and (strlen(s1_4, charP_charM_s_3_7_at_L) < n_8))) ->
             ((0 <= strlen(s2_4, charP_charM_s_3_7_at_L)) and (strlen(s2_4,
              charP_charM_s_3_7_at_L) <= (k_0 + strlen(s1_4,
              charP_charM_s_3_7_at_L))))))))))

axiom memcmp_strlen_shift_right:
  (forall charP_charM_s_3_7_at_L:(charP, int8) memory.
    (forall s1_5:charP pointer.
      (forall s2_5:charP pointer.
        (forall k_1:int.
          (forall n_9:int.
            (((memcmp(shift(s1_5, k_1), s2_5, n_9, charP_charM_s_3_7_at_L,
              charP_charM_s_3_7_at_L) = 0) and
              ((0 <= k_1) and (strlen(s2_5, charP_charM_s_3_7_at_L) < n_9))) ->
             ((0 <= strlen(s1_5, charP_charM_s_3_7_at_L)) and (strlen(s1_5,
              charP_charM_s_3_7_at_L) <= (k_1 + strlen(s2_5,
              charP_charM_s_3_7_at_L))))))))))

axiom strcmp_range:
  (forall charP_charM_s2_6_9_at_L:(charP, int8) memory.
    (forall charP_charM_s1_6_8_at_L:(charP, int8) memory.
      (forall s1_7:charP pointer.
        (forall s2_7:charP pointer.
          ((((-2147483647) - 1) <= strcmp(s1_7, s2_7,
           charP_charM_s2_6_9_at_L, charP_charM_s1_6_8_at_L)) and
           (strcmp(s1_7, s2_7, charP_charM_s2_6_9_at_L,
           charP_charM_s1_6_8_at_L) <= 2147483647))))))

axiom strcmp_zero:
  (forall charP_charM_s2_6_9_at_L:(charP, int8) memory.
    (forall charP_charM_s1_6_8_at_L:(charP, int8) memory.
      (forall s1_8:charP pointer.
        (forall s2_8:charP pointer.
          ((strcmp(s1_8, s2_8, charP_charM_s2_6_9_at_L,
           charP_charM_s1_6_8_at_L) = 0) <->
           ((strlen(s1_8, charP_charM_s1_6_8_at_L) = strlen(s2_8,
            charP_charM_s2_6_9_at_L)) and
            (forall i_13:int.
              (((0 <= i_13) and (i_13 <= strlen(s1_8,
                charP_charM_s1_6_8_at_L))) ->
               (integer_of_int8(select(charP_charM_s1_6_8_at_L, shift(s1_8,
               i_13))) = integer_of_int8(select(charP_charM_s2_6_9_at_L,
               shift(s2_8, i_13))))))))))))

axiom strncmp_zero:
  (forall charP_charM_s2_9_11_at_L:(charP, int8) memory.
    (forall charP_charM_s1_9_10_at_L:(charP, int8) memory.
      (forall s1_10:charP pointer.
        (forall s2_10:charP pointer.
          (forall n_11:int.
            ((strncmp(s1_10, s2_10, n_11, charP_charM_s2_9_11_at_L,
             charP_charM_s1_9_10_at_L) = 0) <->
             (((strlen(s1_10, charP_charM_s1_9_10_at_L) < n_11) and
               (strcmp(s1_10, s2_10, charP_charM_s2_9_11_at_L,
               charP_charM_s1_9_10_at_L) = 0)) or
              (forall i_14:int.
                (((0 <= i_14) and (i_14 < n_11)) ->
                 (integer_of_int8(select(charP_charM_s1_9_10_at_L,
                 shift(s1_10,
                 i_14))) = integer_of_int8(select(charP_charM_s2_9_11_at_L,
                 shift(s2_10, i_14)))))))))))))

axiom strchr_def:
  (forall charP_charM_s_15_12_at_L:(charP, int8) memory.
    (forall s_16:charP pointer.
      (forall c_4:int.
        ((strchr(s_16, c_4, charP_charM_s_15_12_at_L) = true) <->
         (exists i_15:int.
           ((0 <= i_15) and
            ((i_15 <= strlen(s_16, charP_charM_s_15_12_at_L)) and
             (integer_of_int8(select(charP_charM_s_15_12_at_L, shift(s_16,
             i_15))) = c_4))))))))

axiom wcslen_pos_or_null:
  (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_18:unsigned_shortP pointer.
      (forall i_16:int.
        (((0 <= i_16) and
          ((forall j_1:int.
             (((0 <= j_1) and (j_1 < i_16)) ->
              (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
              shift(s_18, j_1))) <> 0))) and
           (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
           shift(s_18, i_16))) = 0))) ->
         (wcslen(s_18, unsigned_shortP_unsigned_shortM_s_17_13_at_L) = i_16)))))

axiom wcslen_neg:
  (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_19:unsigned_shortP pointer.
      ((forall i_17:int.
         ((0 <= i_17) ->
          (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
          shift(s_19, i_17))) <> 0))) ->
       (wcslen(s_19, unsigned_shortP_unsigned_shortM_s_17_13_at_L) < 0))))

axiom wcslen_before_null:
  (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_20:unsigned_shortP pointer.
      (forall i_18:int32.
        (((0 <= integer_of_int32(i_18)) and
          (integer_of_int32(i_18) < wcslen(s_20,
          unsigned_shortP_unsigned_shortM_s_17_13_at_L))) ->
         (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
         shift(s_20, integer_of_int32(i_18)))) <> 0)))))

axiom wcslen_at_null:
  (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_21:unsigned_shortP pointer.
      ((0 <= wcslen(s_21, unsigned_shortP_unsigned_shortM_s_17_13_at_L)) ->
       (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
       shift(s_21, wcslen(s_21,
       unsigned_shortP_unsigned_shortM_s_17_13_at_L)))) = 0))))

axiom wcslen_not_zero:
  (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_22:unsigned_shortP pointer.
      (forall i_19:int32.
        (((0 <= integer_of_int32(i_19)) and
          ((integer_of_int32(i_19) <= wcslen(s_22,
           unsigned_shortP_unsigned_shortM_s_17_13_at_L)) and
           (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
           shift(s_22, integer_of_int32(i_19)))) <> 0))) ->
         (integer_of_int32(i_19) < wcslen(s_22,
         unsigned_shortP_unsigned_shortM_s_17_13_at_L))))))

axiom wcslen_zero:
  (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_23:unsigned_shortP pointer.
      (forall i_20:int32.
        (((0 <= integer_of_int32(i_20)) and
          ((integer_of_int32(i_20) <= wcslen(s_23,
           unsigned_shortP_unsigned_shortM_s_17_13_at_L)) and
           (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
           shift(s_23, integer_of_int32(i_20)))) = 0))) ->
         (integer_of_int32(i_20) = wcslen(s_23,
         unsigned_shortP_unsigned_shortM_s_17_13_at_L))))))

axiom wcslen_sup:
  (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_24:unsigned_shortP pointer.
      (forall i_21:int32.
        (((0 <= integer_of_int32(i_21)) and
          (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
          shift(s_24, integer_of_int32(i_21)))) = 0)) ->
         ((0 <= wcslen(s_24,
          unsigned_shortP_unsigned_shortM_s_17_13_at_L)) and (wcslen(s_24,
          unsigned_shortP_unsigned_shortM_s_17_13_at_L) <= integer_of_int32(i_21)))))))

axiom wcslen_shift:
  (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_25:unsigned_shortP pointer.
      (forall i_22:int32.
        (((0 <= integer_of_int32(i_22)) and
          (integer_of_int32(i_22) <= wcslen(s_25,
          unsigned_shortP_unsigned_shortM_s_17_13_at_L))) ->
         (wcslen(shift(s_25, integer_of_int32(i_22)),
         unsigned_shortP_unsigned_shortM_s_17_13_at_L) = (wcslen(s_25,
         unsigned_shortP_unsigned_shortM_s_17_13_at_L) - integer_of_int32(i_22)))))))

axiom wcslen_create:
  (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_26:unsigned_shortP pointer.
      (forall i_23:int32.
        (((0 <= integer_of_int32(i_23)) and
          (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
          shift(s_26, integer_of_int32(i_23)))) = 0)) ->
         ((0 <= wcslen(s_26,
          unsigned_shortP_unsigned_shortM_s_17_13_at_L)) and (wcslen(s_26,
          unsigned_shortP_unsigned_shortM_s_17_13_at_L) <= integer_of_int32(i_23)))))))

axiom wcslen_create_shift:
  (forall unsigned_shortP_unsigned_shortM_s_17_13_at_L:(unsigned_shortP,
    uint16) memory.
    (forall s_27:unsigned_shortP pointer.
      (forall i_24:int32.
        (forall k_2:int32.
          (((0 <= integer_of_int32(k_2)) and
            ((integer_of_int32(k_2) <= integer_of_int32(i_24)) and
             (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s_17_13_at_L,
             shift(s_27, integer_of_int32(i_24)))) = 0))) ->
           ((0 <= wcslen(shift(s_27, integer_of_int32(k_2)),
            unsigned_shortP_unsigned_shortM_s_17_13_at_L)) and
            (wcslen(shift(s_27, integer_of_int32(k_2)),
            unsigned_shortP_unsigned_shortM_s_17_13_at_L) <= (integer_of_int32(i_24) - integer_of_int32(k_2)))))))))

axiom wcscmp_zero:
  (forall unsigned_shortP_unsigned_shortM_s2_11_15_at_L:(unsigned_shortP,
    uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s1_11_14_at_L:(unsigned_shortP,
      uint16) memory.
      (forall s1_12:unsigned_shortP pointer.
        (forall s2_12:unsigned_shortP pointer.
          ((wcscmp(s1_12, s2_12,
           unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
           unsigned_shortP_unsigned_shortM_s1_11_14_at_L) = 0) <->
           ((wcslen(s1_12,
            unsigned_shortP_unsigned_shortM_s1_11_14_at_L) = wcslen(s2_12,
            unsigned_shortP_unsigned_shortM_s2_11_15_at_L)) and
            (forall i_25:int.
              (((0 <= i_25) and (i_25 <= wcslen(s1_12,
                unsigned_shortP_unsigned_shortM_s1_11_14_at_L))) ->
               (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s1_11_14_at_L,
               shift(s1_12,
               i_25))) = integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s2_11_15_at_L,
               shift(s2_12, i_25))))))))))))

axiom wcsncmp_zero:
  (forall unsigned_shortP_unsigned_shortM_s2_13_17_at_L:(unsigned_shortP,
    uint16) memory.
    (forall unsigned_shortP_unsigned_shortM_s1_13_16_at_L:(unsigned_shortP,
      uint16) memory.
      (forall s1_14:unsigned_shortP pointer.
        (forall s2_14:unsigned_shortP pointer.
          (forall n_13:int.
            ((wcsncmp(s1_14, s2_14, n_13,
             unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
             unsigned_shortP_unsigned_shortM_s1_13_16_at_L) = 0) <->
             (((wcslen(s1_14,
               unsigned_shortP_unsigned_shortM_s1_13_16_at_L) < n_13) and
               (wcscmp(s1_14, s2_14,
               unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
               unsigned_shortP_unsigned_shortM_s1_13_16_at_L) = 0)) or
              (forall i_26:int.
                (((0 <= i_26) and (i_26 < n_13)) ->
                 (integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s1_13_16_at_L,
                 shift(s1_14,
                 i_26))) = integer_of_uint16(select(unsigned_shortP_unsigned_shortM_s2_13_17_at_L,
                 shift(s2_14, i_26)))))))))))))

