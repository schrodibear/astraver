Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only union.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD union.c"
[jessie] Starting Jessie translation
[kernel] No code for function malloc, default assigns generated
[jessie] Producing Jessie files in subdir union.jessie
[jessie] File union.jessie/union.jc written.
[jessie] File union.jessie/union.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int16 = -32768..32767

type int8 = -128..127

type int32 = -2147483648..2147483647

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

tag _Decomp2 = {
  int8 c1: 8; 
  int8 c2: 8;
}

type _Decomp2 = [_Decomp2]

type _Integer2 = [_Integer2 & xP & cP]

tag _Integer2 = {
  padding padding: 16;
}

tag xP = {
  int16 xM: 16;
}

tag cP = {
  _Decomp2[0] cM: 16;
}

tag _Decomp = {
  int8 c1_0: 8; 
  int8 c2_0: 8; 
  int8 c3: 8; 
  int8 c4: 8;
}

type _Decomp = [_Decomp]

type _Integer = [_Integer & x_0P & c_0P]

tag _Integer = {
  padding padding_0: 32;
}

tag x_0P = {
  int32 x_0M: 32;
}

tag c_0P = {
  _Decomp[0] c_0M: 32;
}

tag _S1 = {
  int8 c_1: 8; 
  padding padding_1: 24; 
  int32 i_2: 32;
}

type _S1 = [_S1]

tag _S2 = {
  int8 c_2: 8; 
  padding padding_2: 24; 
  float f: 32;
}

type _S2 = [_S2]

type _U = [_U & s1P & s2P]

tag _U = {
  padding padding_3: 64;
}

tag s1P = {
  _S1[0] s1M: 64;
}

tag s2P = {
  _S2[0] s2M: 64;
}

_Integer2[..] endianness(_Integer2[..] i_0)
  requires (C_17 : ((C_18 : (\offset_min(i_0) <= 0)) &&
                     (C_19 : (\offset_max(i_0) >= 0))));
behavior default:
  ensures (C_20 : ((i_0 :> xP[0]).xM == (\result :> xP[0]).xM));
{  
   (var _Integer2[..] j);
   
   {  (C_2 : (j = (C_1 : (new _Integer2[1]))));
      (C_9 : ((C_8 : (C_7 : (C_6 : (j :> cP[0])).cM).c1) = (C_5 : (C_4 : 
                                                                  (C_3 : (i_0 :> cP[0])).cM).c1)));
      (C_16 : ((C_15 : (C_14 : (C_13 : (j :> cP[0])).cM).c2) = (C_12 : 
                                                               (C_11 : 
                                                               (C_10 : (i_0 :> cP[0])).cM).c2)));
      
      (return j)
   }
}

_Integer[0] endianness2(_Integer[0] v_i_1)
behavior default:
  ensures (C_123 : ((v_i_1 :> x_0P[0]).x_0M == (\result :> x_0P[0]).x_0M));
{  
   (var _Integer[0] i_1);
   
   (var _Integer[0] j_0);
   
   (var _Integer[0] __cil_tmp);
   
   {  (C_22 : (i_1 = (C_21 : (new _Integer[1]))));
      (C_24 : (j_0 = (C_23 : (new _Integer[1]))));
      (C_26 : (__cil_tmp = (C_25 : (new _Integer[1]))));
      
      {  (C_31 : ((C_30 : (C_29 : (i_1 :> x_0P[0])).x_0M) = (C_28 : (C_27 : (v_i_1 :> x_0P[0])).x_0M)));
         (C_38 : ((C_37 : (C_36 : (C_35 : (i_1 :> c_0P[0])).c_0M).c1_0) = 
         (C_34 : (C_33 : (C_32 : (v_i_1 :> c_0P[0])).c_0M).c1_0)));
         (C_45 : ((C_44 : (C_43 : (C_42 : (i_1 :> c_0P[0])).c_0M).c2_0) = 
         (C_41 : (C_40 : (C_39 : (v_i_1 :> c_0P[0])).c_0M).c2_0)));
         (C_52 : ((C_51 : (C_50 : (C_49 : (i_1 :> c_0P[0])).c_0M).c3) = 
         (C_48 : (C_47 : (C_46 : (v_i_1 :> c_0P[0])).c_0M).c3)));
         (C_59 : ((C_58 : (C_57 : (C_56 : (i_1 :> c_0P[0])).c_0M).c4) = 
         (C_55 : (C_54 : (C_53 : (v_i_1 :> c_0P[0])).c_0M).c4)))
      };
      (C_66 : ((C_65 : (C_64 : (C_63 : (j_0 :> c_0P[0])).c_0M).c1_0) = 
      (C_62 : (C_61 : (C_60 : (i_1 :> c_0P[0])).c_0M).c1_0)));
      (C_73 : ((C_72 : (C_71 : (C_70 : (j_0 :> c_0P[0])).c_0M).c2_0) = 
      (C_69 : (C_68 : (C_67 : (i_1 :> c_0P[0])).c_0M).c2_0)));
      (C_80 : ((C_79 : (C_78 : (C_77 : (j_0 :> c_0P[0])).c_0M).c3) = 
      (C_76 : (C_75 : (C_74 : (i_1 :> c_0P[0])).c_0M).c3)));
      (C_87 : ((C_86 : (C_85 : (C_84 : (j_0 :> c_0P[0])).c_0M).c4) = 
      (C_83 : (C_82 : (C_81 : (i_1 :> c_0P[0])).c_0M).c4)));
      
      {  (C_92 : ((C_91 : (C_90 : (__cil_tmp :> x_0P[0])).x_0M) = (C_89 : 
                                                                  (C_88 : (j_0 :> x_0P[0])).x_0M)));
         (C_99 : ((C_98 : (C_97 : (C_96 : (__cil_tmp :> c_0P[0])).c_0M).c1_0) = 
         (C_95 : (C_94 : (C_93 : (j_0 :> c_0P[0])).c_0M).c1_0)));
         (C_106 : ((C_105 : (C_104 : (C_103 : (__cil_tmp :> c_0P[0])).c_0M).c2_0) = 
         (C_102 : (C_101 : (C_100 : (j_0 :> c_0P[0])).c_0M).c2_0)));
         (C_113 : ((C_112 : (C_111 : (C_110 : (__cil_tmp :> c_0P[0])).c_0M).c3) = 
         (C_109 : (C_108 : (C_107 : (j_0 :> c_0P[0])).c_0M).c3)));
         (C_120 : ((C_119 : (C_118 : (C_117 : (__cil_tmp :> c_0P[0])).c_0M).c4) = 
         (C_116 : (C_115 : (C_114 : (j_0 :> c_0P[0])).c_0M).c4)));
         
         {  (C_121 : (free(i_1)));
            (C_122 : (free(j_0)));
            
            (return __cil_tmp)
         }
      }
   }
}

_Integer[..] endianness3(_Integer[..] i)
  requires (C_154 : ((C_155 : (\offset_min(i) <= 0)) &&
                      (C_156 : (\offset_max(i) >= 0))));
behavior default:
  ensures (C_157 : ((i :> x_0P[0]).x_0M == (\result :> x_0P[0]).x_0M));
{  
   (var _Integer[..] j_1);
   
   {  (C_125 : (j_1 = (C_124 : (new _Integer[1]))));
      (C_132 : ((C_131 : (C_130 : (C_129 : (j_1 :> c_0P[0])).c_0M).c1_0) = 
      (C_128 : (C_127 : (C_126 : (i :> c_0P[0])).c_0M).c1_0)));
      (C_139 : ((C_138 : (C_137 : (C_136 : (j_1 :> c_0P[0])).c_0M).c2_0) = 
      (C_135 : (C_134 : (C_133 : (i :> c_0P[0])).c_0M).c2_0)));
      (C_146 : ((C_145 : (C_144 : (C_143 : (j_1 :> c_0P[0])).c_0M).c3) = 
      (C_142 : (C_141 : (C_140 : (i :> c_0P[0])).c_0M).c3)));
      (C_153 : ((C_152 : (C_151 : (C_150 : (j_1 :> c_0P[0])).c_0M).c4) = 
      (C_149 : (C_148 : (C_147 : (i :> c_0P[0])).c_0M).c4)));
      
      (return j_1)
   }
}

int32 test()
behavior default:
  ensures (C_174 : (\result == 1));
{  
   (var _U[0] u);
   
   (var int32 __retres);
   
   {  (C_159 : (u = (C_158 : (new _U[1]))));
      (C_163 : ((C_162 : (C_161 : (C_160 : (u :> s1P[0])).s1M).i_2) = 1));
      (C_167 : ((C_166 : (C_165 : (C_164 : (u :> s1P[0])).s1M).c_1) = 2));
      
      {  
         (assert for default: (C_168 : ((u :> s2P[0]).s2M.c_2 == 2)));
         ()
      };
      (C_172 : (__retres = (C_171 : (C_170 : (C_169 : (u :> s1P[0])).s1M).i_2)));
      
      {  (C_173 : (free(u)));
         
         (return __retres)
      }
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs union.jessie/union.cloc union.jessie/union.jc
type _Decomp

type _Decomp2

type _Integer

type _Integer2

type _S1

type _S2

type _U

type char_P

type int16

type int32

type int8

type padding

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic _Decomp2_tag:  -> _Decomp2 tag_id

axiom _Decomp2_int : (int_of_tag(_Decomp2_tag) = (1))

logic _Decomp2_of_bitvector: bitvector -> _Decomp2 pointer

logic bitvector_of__Decomp2: _Decomp2 pointer -> bitvector

axiom _Decomp2_of_bitvector_of_bitvector_of__Decomp2 :
 (forall x:_Decomp2 pointer.
  (_Decomp2_of_bitvector(bitvector_of__Decomp2(x)) = x))

logic _Decomp2_of_pointer_address: unit pointer -> _Decomp2 pointer

axiom _Decomp2_of_pointer_address_of_pointer_addr :
 (forall p:_Decomp2 pointer.
  (p = _Decomp2_of_pointer_address(pointer_address(p))))

axiom _Decomp2_parenttag_bottom : parenttag(_Decomp2_tag, bottom_tag)

axiom _Decomp2_tags :
 (forall x:_Decomp2 pointer.
  (forall _Decomp2_tag_table:_Decomp2 tag_table.
   instanceof(_Decomp2_tag_table, x, _Decomp2_tag)))

logic _Decomp_tag:  -> _Decomp tag_id

axiom _Decomp_int : (int_of_tag(_Decomp_tag) = (1))

logic _Decomp_of_bitvector: bitvector -> _Decomp pointer

logic bitvector_of__Decomp: _Decomp pointer -> bitvector

axiom _Decomp_of_bitvector_of_bitvector_of__Decomp :
 (forall x:_Decomp pointer.
  (_Decomp_of_bitvector(bitvector_of__Decomp(x)) = x))

logic _Decomp_of_pointer_address: unit pointer -> _Decomp pointer

axiom _Decomp_of_pointer_address_of_pointer_addr :
 (forall p:_Decomp pointer.
  (p = _Decomp_of_pointer_address(pointer_address(p))))

axiom _Decomp_parenttag_bottom : parenttag(_Decomp_tag, bottom_tag)

axiom _Decomp_tags :
 (forall x:_Decomp pointer.
  (forall _Decomp_tag_table:_Decomp tag_table.
   instanceof(_Decomp_tag_table, x, _Decomp_tag)))

logic _Integer2_tag:  -> _Integer2 tag_id

axiom _Integer2_int : (int_of_tag(_Integer2_tag) = (1))

logic _Integer2_of_bitvector: bitvector -> _Integer2 pointer

logic bitvector_of__Integer2: _Integer2 pointer -> bitvector

axiom _Integer2_of_bitvector_of_bitvector_of__Integer2 :
 (forall x:_Integer2 pointer.
  (_Integer2_of_bitvector(bitvector_of__Integer2(x)) = x))

logic _Integer2_of_pointer_address: unit pointer -> _Integer2 pointer

axiom _Integer2_of_pointer_address_of_pointer_addr :
 (forall p:_Integer2 pointer.
  (p = _Integer2_of_pointer_address(pointer_address(p))))

axiom _Integer2_parenttag_bottom : parenttag(_Integer2_tag, bottom_tag)

logic xP_tag:  -> _Integer2 tag_id

logic cP_tag:  -> _Integer2 tag_id

axiom _Integer2_tags :
 (forall x:_Integer2 pointer.
  (forall _Integer2_tag_table:_Integer2 tag_table.
   (instanceof(_Integer2_tag_table, x, _Integer2_tag)
   or (instanceof(_Integer2_tag_table, x, xP_tag)
      or instanceof(_Integer2_tag_table, x, cP_tag)))))

logic _Integer_tag:  -> _Integer tag_id

axiom _Integer_int : (int_of_tag(_Integer_tag) = (1))

logic _Integer_of_bitvector: bitvector -> _Integer pointer

logic bitvector_of__Integer: _Integer pointer -> bitvector

axiom _Integer_of_bitvector_of_bitvector_of__Integer :
 (forall x:_Integer pointer.
  (_Integer_of_bitvector(bitvector_of__Integer(x)) = x))

logic _Integer_of_pointer_address: unit pointer -> _Integer pointer

axiom _Integer_of_pointer_address_of_pointer_addr :
 (forall p:_Integer pointer.
  (p = _Integer_of_pointer_address(pointer_address(p))))

axiom _Integer_parenttag_bottom : parenttag(_Integer_tag, bottom_tag)

logic x_0P_tag:  -> _Integer tag_id

logic c_0P_tag:  -> _Integer tag_id

axiom _Integer_tags :
 (forall x:_Integer pointer.
  (forall _Integer_tag_table:_Integer tag_table.
   (instanceof(_Integer_tag_table, x, _Integer_tag)
   or (instanceof(_Integer_tag_table, x, x_0P_tag)
      or instanceof(_Integer_tag_table, x, c_0P_tag)))))

logic _S1_tag:  -> _S1 tag_id

axiom _S1_int : (int_of_tag(_S1_tag) = (1))

logic _S1_of_bitvector: bitvector -> _S1 pointer

logic bitvector_of__S1: _S1 pointer -> bitvector

axiom _S1_of_bitvector_of_bitvector_of__S1 :
 (forall x:_S1 pointer. (_S1_of_bitvector(bitvector_of__S1(x)) = x))

logic _S1_of_pointer_address: unit pointer -> _S1 pointer

axiom _S1_of_pointer_address_of_pointer_addr :
 (forall p:_S1 pointer. (p = _S1_of_pointer_address(pointer_address(p))))

axiom _S1_parenttag_bottom : parenttag(_S1_tag, bottom_tag)

axiom _S1_tags :
 (forall x:_S1 pointer.
  (forall _S1_tag_table:_S1 tag_table. instanceof(_S1_tag_table, x, _S1_tag)))

logic _S2_tag:  -> _S2 tag_id

axiom _S2_int : (int_of_tag(_S2_tag) = (1))

logic _S2_of_bitvector: bitvector -> _S2 pointer

logic bitvector_of__S2: _S2 pointer -> bitvector

axiom _S2_of_bitvector_of_bitvector_of__S2 :
 (forall x:_S2 pointer. (_S2_of_bitvector(bitvector_of__S2(x)) = x))

logic _S2_of_pointer_address: unit pointer -> _S2 pointer

axiom _S2_of_pointer_address_of_pointer_addr :
 (forall p:_S2 pointer. (p = _S2_of_pointer_address(pointer_address(p))))

axiom _S2_parenttag_bottom : parenttag(_S2_tag, bottom_tag)

axiom _S2_tags :
 (forall x:_S2 pointer.
  (forall _S2_tag_table:_S2 tag_table. instanceof(_S2_tag_table, x, _S2_tag)))

logic _U_tag:  -> _U tag_id

axiom _U_int : (int_of_tag(_U_tag) = (1))

logic _U_of_bitvector: bitvector -> _U pointer

logic bitvector_of__U: _U pointer -> bitvector

axiom _U_of_bitvector_of_bitvector_of__U :
 (forall x:_U pointer. (_U_of_bitvector(bitvector_of__U(x)) = x))

logic _U_of_pointer_address: unit pointer -> _U pointer

axiom _U_of_pointer_address_of_pointer_addr :
 (forall p:_U pointer. (p = _U_of_pointer_address(pointer_address(p))))

axiom _U_parenttag_bottom : parenttag(_U_tag, bottom_tag)

logic s1P_tag:  -> _U tag_id

logic s2P_tag:  -> _U tag_id

axiom _U_tags :
 (forall x:_U pointer.
  (forall _U_tag_table:_U tag_table.
   (instanceof(_U_tag_table, x, _U_tag)
   or (instanceof(_U_tag_table, x, s1P_tag)
      or instanceof(_U_tag_table, x, s2P_tag)))))

axiom bitvector_of__Decomp2_of__Decomp2_of_bitvector :
 (forall x:bitvector. (bitvector_of__Decomp2(_Decomp2_of_bitvector(x)) = x))

axiom bitvector_of__Decomp_of__Decomp_of_bitvector :
 (forall x:bitvector. (bitvector_of__Decomp(_Decomp_of_bitvector(x)) = x))

axiom bitvector_of__Integer2_of__Integer2_of_bitvector :
 (forall x:bitvector.
  (bitvector_of__Integer2(_Integer2_of_bitvector(x)) = x))

axiom bitvector_of__Integer_of__Integer_of_bitvector :
 (forall x:bitvector. (bitvector_of__Integer(_Integer_of_bitvector(x)) = x))

axiom bitvector_of__S1_of__S1_of_bitvector :
 (forall x:bitvector. (bitvector_of__S1(_S1_of_bitvector(x)) = x))

axiom bitvector_of__S2_of__S2_of_bitvector :
 (forall x:bitvector. (bitvector_of__S2(_S2_of_bitvector(x)) = x))

axiom bitvector_of__U_of__U_of_bitvector :
 (forall x:bitvector. (bitvector_of__U(_U_of_bitvector(x)) = x))

logic bitvector_of_cM: _Decomp2 pointer -> bitvector

logic bitvector_of_c_0M: _Decomp pointer -> bitvector

logic bitvector_of_char_P: char_P pointer -> bitvector

logic char_P_of_bitvector: bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_int16: int16 -> bitvector

logic int16_of_bitvector: bitvector -> int16

axiom bitvector_of_int16_of_int16_of_bitvector :
 (forall x:bitvector. (bitvector_of_int16(int16_of_bitvector(x)) = x))

logic bitvector_of_int32: int32 -> bitvector

logic int32_of_bitvector: bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector :
 (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_int8: int8 -> bitvector

logic int8_of_bitvector: bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector :
 (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_s1M: _S1 pointer -> bitvector

logic bitvector_of_s2M: _S2 pointer -> bitvector

logic bitvector_of_void_P: void_P pointer -> bitvector

logic void_P_of_bitvector: bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic bitvector_of_xM: int16 -> bitvector

logic bitvector_of_x_0M: int32 -> bitvector

logic cM_of_bitvector: bitvector -> _Decomp2 pointer

axiom cM_of_bitvector_of_bitvector_of_cM :
 (forall x:_Decomp2 pointer. (cM_of_bitvector(bitvector_of_cM(x)) = x))

axiom cP_int : (int_of_tag(cP_tag) = (3))

axiom cP_parenttag_bottom : parenttag(cP_tag, bottom_tag)

logic c_0M_of_bitvector: bitvector -> _Decomp pointer

axiom c_0M_of_bitvector_of_bitvector_of_c_0M :
 (forall x:_Decomp pointer. (c_0M_of_bitvector(bitvector_of_c_0M(x)) = x))

axiom c_0P_int : (int_of_tag(c_0P_tag) = (3))

axiom c_0P_parenttag_bottom : parenttag(c_0P_tag, bottom_tag)

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_of_bitvector_of_bitvector_of_char_P :
 (forall x:char_P pointer. (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_of_bitvector_of_bitvector_of_int16 :
 (forall x:int16. eq_int16(int16_of_bitvector(bitvector_of_int16(x)), x))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_of_bitvector_of_bitvector_of_int32 :
 (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_of_bitvector_of_bitvector_of_int8 :
 (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_root__Integer(p:_Integer pointer,
 a:int,
 _Integer_alloc_table:_Integer alloc_table) =
 (offset_min(_Integer_alloc_table, p) <= a)

predicate left_valid_root__Integer2(p:_Integer2 pointer,
 a:int,
 _Integer2_alloc_table:_Integer2 alloc_table) =
 (offset_min(_Integer2_alloc_table, p) <= a)

predicate left_valid_root__U(p:_U pointer,
 a:int,
 _U_alloc_table:_U alloc_table) =
 (offset_min(_U_alloc_table, p) <= a)

predicate left_valid_struct__Decomp(p:_Decomp pointer,
 a:int,
 _Decomp_alloc_table:_Decomp alloc_table) =
 (offset_min(_Decomp_alloc_table, p) <= a)

predicate left_valid_struct__Decomp2(p:_Decomp2 pointer,
 a:int,
 _Decomp2_alloc_table:_Decomp2 alloc_table) =
 (offset_min(_Decomp2_alloc_table, p) <= a)

predicate left_valid_struct__S1(p:_S1 pointer,
 a:int,
 _S1_alloc_table:_S1 alloc_table) =
 (offset_min(_S1_alloc_table, p) <= a)

predicate left_valid_struct__S2(p:_S2 pointer,
 a:int,
 _S2_alloc_table:_S2 alloc_table) =
 (offset_min(_S2_alloc_table, p) <= a)

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of__Decomp2_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(_Decomp2_of_pointer_address(p))))

axiom pointer_addr_of__Decomp_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(_Decomp_of_pointer_address(p))))

axiom pointer_addr_of__Integer2_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(_Integer2_of_pointer_address(p))))

axiom pointer_addr_of__Integer_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(_Integer_of_pointer_address(p))))

axiom pointer_addr_of__S1_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(_S1_of_pointer_address(p))))

axiom pointer_addr_of__S2_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(_S2_of_pointer_address(p))))

axiom pointer_addr_of__U_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(_U_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_root__Integer(p:_Integer pointer,
 b:int,
 _Integer_alloc_table:_Integer alloc_table) =
 (offset_max(_Integer_alloc_table, p) >= b)

predicate right_valid_root__Integer2(p:_Integer2 pointer,
 b:int,
 _Integer2_alloc_table:_Integer2 alloc_table) =
 (offset_max(_Integer2_alloc_table, p) >= b)

predicate right_valid_root__U(p:_U pointer,
 b:int,
 _U_alloc_table:_U alloc_table) =
 (offset_max(_U_alloc_table, p) >= b)

predicate right_valid_struct__Decomp(p:_Decomp pointer,
 b:int,
 _Decomp_alloc_table:_Decomp alloc_table) =
 (offset_max(_Decomp_alloc_table, p) >= b)

predicate right_valid_struct__Decomp2(p:_Decomp2 pointer,
 b:int,
 _Decomp2_alloc_table:_Decomp2 alloc_table) =
 (offset_max(_Decomp2_alloc_table, p) >= b)

predicate right_valid_struct__S1(p:_S1 pointer,
 b:int,
 _S1_alloc_table:_S1 alloc_table) =
 (offset_max(_S1_alloc_table, p) >= b)

predicate right_valid_struct__S2(p:_S2 pointer,
 b:int,
 _S2_alloc_table:_S2 alloc_table) =
 (offset_max(_S2_alloc_table, p) >= b)

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

logic s1M_of_bitvector: bitvector -> _S1 pointer

axiom s1M_of_bitvector_of_bitvector_of_s1M :
 (forall x:_S1 pointer. (s1M_of_bitvector(bitvector_of_s1M(x)) = x))

axiom s1P_int : (int_of_tag(s1P_tag) = (2))

axiom s1P_parenttag_bottom : parenttag(s1P_tag, bottom_tag)

logic s2M_of_bitvector: bitvector -> _S2 pointer

axiom s2M_of_bitvector_of_bitvector_of_s2M :
 (forall x:_S2 pointer. (s2M_of_bitvector(bitvector_of_s2M(x)) = x))

axiom s2P_int : (int_of_tag(s2P_tag) = (3))

axiom s2P_parenttag_bottom : parenttag(s2P_tag, bottom_tag)

predicate strict_valid_root__Decomp(p:_Decomp pointer,
 a:int,
 b:int,
 _Decomp_alloc_table:_Decomp alloc_table) =
 ((offset_min(_Decomp_alloc_table, p) = a)
 and (offset_max(_Decomp_alloc_table, p) = b))

predicate strict_valid_root__Decomp2(p:_Decomp2 pointer,
 a:int,
 b:int,
 _Decomp2_alloc_table:_Decomp2 alloc_table) =
 ((offset_min(_Decomp2_alloc_table, p) = a)
 and (offset_max(_Decomp2_alloc_table, p) = b))

predicate strict_valid_root__Integer(p:_Integer pointer,
 a:int,
 b:int,
 _Integer_alloc_table:_Integer alloc_table) =
 ((offset_min(_Integer_alloc_table, p) = a)
 and (offset_max(_Integer_alloc_table, p) = b))

predicate strict_valid_root__Integer2(p:_Integer2 pointer,
 a:int,
 b:int,
 _Integer2_alloc_table:_Integer2 alloc_table) =
 ((offset_min(_Integer2_alloc_table, p) = a)
 and (offset_max(_Integer2_alloc_table, p) = b))

predicate strict_valid_root__S1(p:_S1 pointer,
 a:int,
 b:int,
 _S1_alloc_table:_S1 alloc_table) =
 ((offset_min(_S1_alloc_table, p) = a)
 and (offset_max(_S1_alloc_table, p) = b))

predicate strict_valid_root__S2(p:_S2 pointer,
 a:int,
 b:int,
 _S2_alloc_table:_S2 alloc_table) =
 ((offset_min(_S2_alloc_table, p) = a)
 and (offset_max(_S2_alloc_table, p) = b))

predicate strict_valid_root__U(p:_U pointer,
 a:int,
 b:int,
 _U_alloc_table:_U alloc_table) =
 ((offset_min(_U_alloc_table, p) = a)
 and (offset_max(_U_alloc_table, p) = b))

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct__Decomp(p:_Decomp pointer,
 a:int,
 b:int,
 _Decomp_alloc_table:_Decomp alloc_table) =
 ((offset_min(_Decomp_alloc_table, p) = a)
 and (offset_max(_Decomp_alloc_table, p) = b))

predicate strict_valid_struct__Decomp2(p:_Decomp2 pointer,
 a:int,
 b:int,
 _Decomp2_alloc_table:_Decomp2 alloc_table) =
 ((offset_min(_Decomp2_alloc_table, p) = a)
 and (offset_max(_Decomp2_alloc_table, p) = b))

predicate strict_valid_struct__S1(p:_S1 pointer,
 a:int,
 b:int,
 _S1_alloc_table:_S1 alloc_table) =
 ((offset_min(_S1_alloc_table, p) = a)
 and (offset_max(_S1_alloc_table, p) = b))

predicate strict_valid_struct__S2(p:_S2 pointer,
 a:int,
 b:int,
 _S2_alloc_table:_S2 alloc_table) =
 ((offset_min(_S2_alloc_table, p) = a)
 and (offset_max(_S2_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_root__Integer(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) <= a)
 and (offset_max(bitvector_alloc_table, p) >= b))

predicate valid_bitvector_root__Integer2(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) <= a)
 and (offset_max(bitvector_alloc_table, p) >= b))

predicate valid_bitvector_root__U(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) <= a)
 and (offset_max(bitvector_alloc_table, p) >= b))

predicate valid_bitvector_struct__Decomp(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct__Decomp2(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct__S1(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct__S2(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root__Decomp(p:_Decomp pointer,
 a:int,
 b:int,
 _Decomp_alloc_table:_Decomp alloc_table) =
 ((offset_min(_Decomp_alloc_table, p) <= a)
 and (offset_max(_Decomp_alloc_table, p) >= b))

predicate valid_root__Decomp2(p:_Decomp2 pointer,
 a:int,
 b:int,
 _Decomp2_alloc_table:_Decomp2 alloc_table) =
 ((offset_min(_Decomp2_alloc_table, p) <= a)
 and (offset_max(_Decomp2_alloc_table, p) >= b))

predicate valid_root__Integer(p:_Integer pointer,
 a:int,
 b:int,
 _Integer_alloc_table:_Integer alloc_table) =
 ((offset_min(_Integer_alloc_table, p) <= a)
 and (offset_max(_Integer_alloc_table, p) >= b))

predicate valid_root__Integer2(p:_Integer2 pointer,
 a:int,
 b:int,
 _Integer2_alloc_table:_Integer2 alloc_table) =
 ((offset_min(_Integer2_alloc_table, p) <= a)
 and (offset_max(_Integer2_alloc_table, p) >= b))

predicate valid_root__S1(p:_S1 pointer,
 a:int,
 b:int,
 _S1_alloc_table:_S1 alloc_table) =
 ((offset_min(_S1_alloc_table, p) <= a)
 and (offset_max(_S1_alloc_table, p) >= b))

predicate valid_root__S2(p:_S2 pointer,
 a:int,
 b:int,
 _S2_alloc_table:_S2 alloc_table) =
 ((offset_min(_S2_alloc_table, p) <= a)
 and (offset_max(_S2_alloc_table, p) >= b))

predicate valid_root__U(p:_U pointer,
 a:int,
 b:int,
 _U_alloc_table:_U alloc_table) =
 ((offset_min(_U_alloc_table, p) <= a)
 and (offset_max(_U_alloc_table, p) >= b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct__Decomp(p:_Decomp pointer,
 a:int,
 b:int,
 _Decomp_alloc_table:_Decomp alloc_table) =
 ((offset_min(_Decomp_alloc_table, p) <= a)
 and (offset_max(_Decomp_alloc_table, p) >= b))

predicate valid_struct__Decomp2(p:_Decomp2 pointer,
 a:int,
 b:int,
 _Decomp2_alloc_table:_Decomp2 alloc_table) =
 ((offset_min(_Decomp2_alloc_table, p) <= a)
 and (offset_max(_Decomp2_alloc_table, p) >= b))

predicate valid_struct__S1(p:_S1 pointer,
 a:int,
 b:int,
 _S1_alloc_table:_S1 alloc_table) =
 ((offset_min(_S1_alloc_table, p) <= a)
 and (offset_max(_S1_alloc_table, p) >= b))

predicate valid_struct__S2(p:_S2 pointer,
 a:int,
 b:int,
 _S2_alloc_table:_S2 alloc_table) =
 ((offset_min(_S2_alloc_table, p) <= a)
 and (offset_max(_S2_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_bitvector_of_bitvector_of_void_P :
 (forall x:void_P pointer. (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

logic xM_of_bitvector: bitvector -> int16

axiom xM_of_bitvector_of_bitvector_of_xM :
 (forall x:int16. eq_int16(xM_of_bitvector(bitvector_of_xM(x)), x))

axiom xP_int : (int_of_tag(xP_tag) = (2))

axiom xP_parenttag_bottom : parenttag(xP_tag, bottom_tag)

logic x_0M_of_bitvector: bitvector -> int32

axiom x_0M_of_bitvector_of_bitvector_of_x_0M :
 (forall x:int32. eq_int32(x_0M_of_bitvector(bitvector_of_x_0M(x)), x))

axiom x_0P_int : (int_of_tag(x_0P_tag) = (2))

axiom x_0P_parenttag_bottom : parenttag(x_0P_tag, bottom_tag)

parameter _Decomp2_alloc_table : _Decomp2 alloc_table ref

parameter _Decomp2_tag_table : _Decomp2 tag_table ref

parameter _Decomp_alloc_table : _Decomp alloc_table ref

parameter _Decomp_tag_table : _Decomp tag_table ref

parameter _Integer2_alloc_table : _Integer2 alloc_table ref

parameter _Integer2_tag_table : _Integer2 tag_table ref

parameter _Integer_alloc_table : _Integer alloc_table ref

parameter _Integer_tag_table : _Integer tag_table ref

parameter _S1_alloc_table : _S1 alloc_table ref

parameter _S1_tag_table : _S1 tag_table ref

parameter _S2_alloc_table : _S2 alloc_table ref

parameter _S2_tag_table : _S2 tag_table ref

parameter _U_alloc_table : _U alloc_table ref

parameter _U_tag_table : _U tag_table ref

parameter alloc_bitvector_root__Integer :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_root__Integer(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_root__Integer2 :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_root__Integer2(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_root__Integer2_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_root__Integer2(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_root__Integer_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_root__Integer(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_root__U :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_root__U(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_root__U_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_root__U(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct__Decomp :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct__Decomp(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct__Decomp2 :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct__Decomp2(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct__Decomp2_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct__Decomp2(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct__Decomp_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct__Decomp(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct__S1 :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct__S1(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct__S1_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct__S1(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct__S2 :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct__S2(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct__S2_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct__S2(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_root__Integer :
 n:int ->
  _Integer_alloc_table:_Integer alloc_table ref ->
   { } _Integer pointer writes _Integer_alloc_table
   { (strict_valid_root__Integer(result, (0), sub_int(n, (1)),
      _Integer_alloc_table)
     and (alloc_extends(_Integer_alloc_table@, _Integer_alloc_table)
         and alloc_fresh(_Integer_alloc_table@, result, n))) }

parameter alloc_root__Integer2 :
 n:int ->
  _Integer2_alloc_table:_Integer2 alloc_table ref ->
   { } _Integer2 pointer writes _Integer2_alloc_table
   { (strict_valid_root__Integer2(result, (0), sub_int(n, (1)),
      _Integer2_alloc_table)
     and (alloc_extends(_Integer2_alloc_table@, _Integer2_alloc_table)
         and alloc_fresh(_Integer2_alloc_table@, result, n))) }

parameter alloc_root__Integer2_requires :
 n:int ->
  _Integer2_alloc_table:_Integer2 alloc_table ref ->
   { ge_int(n, (0))} _Integer2 pointer writes _Integer2_alloc_table
   { (strict_valid_root__Integer2(result, (0), sub_int(n, (1)),
      _Integer2_alloc_table)
     and (alloc_extends(_Integer2_alloc_table@, _Integer2_alloc_table)
         and alloc_fresh(_Integer2_alloc_table@, result, n))) }

parameter alloc_root__Integer_requires :
 n:int ->
  _Integer_alloc_table:_Integer alloc_table ref ->
   { ge_int(n, (0))} _Integer pointer writes _Integer_alloc_table
   { (strict_valid_root__Integer(result, (0), sub_int(n, (1)),
      _Integer_alloc_table)
     and (alloc_extends(_Integer_alloc_table@, _Integer_alloc_table)
         and alloc_fresh(_Integer_alloc_table@, result, n))) }

parameter alloc_root__U :
 n:int ->
  _U_alloc_table:_U alloc_table ref ->
   { } _U pointer writes _U_alloc_table
   { (strict_valid_root__U(result, (0), sub_int(n, (1)), _U_alloc_table)
     and (alloc_extends(_U_alloc_table@, _U_alloc_table)
         and alloc_fresh(_U_alloc_table@, result, n))) }

parameter alloc_root__U_requires :
 n:int ->
  _U_alloc_table:_U alloc_table ref ->
   { ge_int(n, (0))} _U pointer writes _U_alloc_table
   { (strict_valid_root__U(result, (0), sub_int(n, (1)), _U_alloc_table)
     and (alloc_extends(_U_alloc_table@, _U_alloc_table)
         and alloc_fresh(_U_alloc_table@, result, n))) }

parameter alloc_struct__Decomp :
 n:int ->
  _Decomp_alloc_table:_Decomp alloc_table ref ->
   _Decomp_tag_table:_Decomp tag_table ref ->
    { } _Decomp pointer writes _Decomp_alloc_table,_Decomp_tag_table
    { (strict_valid_struct__Decomp(result, (0), sub_int(n, (1)),
       _Decomp_alloc_table)
      and (alloc_extends(_Decomp_alloc_table@, _Decomp_alloc_table)
          and (alloc_fresh(_Decomp_alloc_table@, result, n)
              and instanceof(_Decomp_tag_table, result, _Decomp_tag)))) }

parameter alloc_struct__Decomp2 :
 n:int ->
  _Decomp2_alloc_table:_Decomp2 alloc_table ref ->
   _Decomp2_tag_table:_Decomp2 tag_table ref ->
    { } _Decomp2 pointer writes _Decomp2_alloc_table,_Decomp2_tag_table
    { (strict_valid_struct__Decomp2(result, (0), sub_int(n, (1)),
       _Decomp2_alloc_table)
      and (alloc_extends(_Decomp2_alloc_table@, _Decomp2_alloc_table)
          and (alloc_fresh(_Decomp2_alloc_table@, result, n)
              and instanceof(_Decomp2_tag_table, result, _Decomp2_tag)))) }

parameter alloc_struct__Decomp2_requires :
 n:int ->
  _Decomp2_alloc_table:_Decomp2 alloc_table ref ->
   _Decomp2_tag_table:_Decomp2 tag_table ref ->
    { ge_int(n, (0))} _Decomp2 pointer
    writes _Decomp2_alloc_table,_Decomp2_tag_table
    { (strict_valid_struct__Decomp2(result, (0), sub_int(n, (1)),
       _Decomp2_alloc_table)
      and (alloc_extends(_Decomp2_alloc_table@, _Decomp2_alloc_table)
          and (alloc_fresh(_Decomp2_alloc_table@, result, n)
              and instanceof(_Decomp2_tag_table, result, _Decomp2_tag)))) }

parameter alloc_struct__Decomp_requires :
 n:int ->
  _Decomp_alloc_table:_Decomp alloc_table ref ->
   _Decomp_tag_table:_Decomp tag_table ref ->
    { ge_int(n, (0))} _Decomp pointer
    writes _Decomp_alloc_table,_Decomp_tag_table
    { (strict_valid_struct__Decomp(result, (0), sub_int(n, (1)),
       _Decomp_alloc_table)
      and (alloc_extends(_Decomp_alloc_table@, _Decomp_alloc_table)
          and (alloc_fresh(_Decomp_alloc_table@, result, n)
              and instanceof(_Decomp_tag_table, result, _Decomp_tag)))) }

parameter alloc_struct__S1 :
 n:int ->
  _S1_alloc_table:_S1 alloc_table ref ->
   _S1_tag_table:_S1 tag_table ref ->
    { } _S1 pointer writes _S1_alloc_table,_S1_tag_table
    { (strict_valid_struct__S1(result, (0), sub_int(n, (1)), _S1_alloc_table)
      and (alloc_extends(_S1_alloc_table@, _S1_alloc_table)
          and (alloc_fresh(_S1_alloc_table@, result, n)
              and instanceof(_S1_tag_table, result, _S1_tag)))) }

parameter alloc_struct__S1_requires :
 n:int ->
  _S1_alloc_table:_S1 alloc_table ref ->
   _S1_tag_table:_S1 tag_table ref ->
    { ge_int(n, (0))} _S1 pointer writes _S1_alloc_table,_S1_tag_table
    { (strict_valid_struct__S1(result, (0), sub_int(n, (1)), _S1_alloc_table)
      and (alloc_extends(_S1_alloc_table@, _S1_alloc_table)
          and (alloc_fresh(_S1_alloc_table@, result, n)
              and instanceof(_S1_tag_table, result, _S1_tag)))) }

parameter alloc_struct__S2 :
 n:int ->
  _S2_alloc_table:_S2 alloc_table ref ->
   _S2_tag_table:_S2 tag_table ref ->
    { } _S2 pointer writes _S2_alloc_table,_S2_tag_table
    { (strict_valid_struct__S2(result, (0), sub_int(n, (1)), _S2_alloc_table)
      and (alloc_extends(_S2_alloc_table@, _S2_alloc_table)
          and (alloc_fresh(_S2_alloc_table@, result, n)
              and instanceof(_S2_tag_table, result, _S2_tag)))) }

parameter alloc_struct__S2_requires :
 n:int ->
  _S2_alloc_table:_S2 alloc_table ref ->
   _S2_tag_table:_S2 tag_table ref ->
    { ge_int(n, (0))} _S2 pointer writes _S2_alloc_table,_S2_tag_table
    { (strict_valid_struct__S2(result, (0), sub_int(n, (1)), _S2_alloc_table)
      and (alloc_extends(_S2_alloc_table@, _S2_alloc_table)
          and (alloc_fresh(_S2_alloc_table@, result, n)
              and instanceof(_S2_tag_table, result, _S2_tag)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter endianness :
 i_0:_Integer2 pointer ->
  _Integer2_result_2_alloc_table:_Integer2 alloc_table ref ->
   _Integer2_result_2_tag_table:_Integer2 tag_table ref ->
    _Integer2_fields_result_2:(_Integer2, bitvector) memory ref ->
     _Integer2_i_0_1_alloc_table:_Integer2 alloc_table ->
      _Integer2_fields_i_0_1:(_Integer2, bitvector) memory ->
       { } _Integer2 pointer
       reads _Integer2_fields_result_2,_Integer2_result_2_alloc_table
       writes _Integer2_fields_result_2,_Integer2_result_2_alloc_table,_Integer2_result_2_tag_table
       { (JC_10:
         eq_int(integer_of_int16(int16_of_bitvector(extract_bytes(select(_Integer2_fields_i_0_1,
                                                                  i_0),
                                                    (0), (2)))),
         integer_of_int16(int16_of_bitvector(extract_bytes(select(_Integer2_fields_result_2,
                                                           result),
                                             (0), (2)))))) }

parameter endianness2 :
 v_i_1:_Integer pointer ->
  _Integer_result_5_alloc_table:_Integer alloc_table ref ->
   _Integer_result_5_tag_table:_Integer tag_table ref ->
    _Integer_fields_result_5:(_Integer, bitvector) memory ref ->
     _Integer_v_i_1_4_alloc_table:_Integer alloc_table ->
      _Integer_fields_v_i_1_4:(_Integer, bitvector) memory ->
       { } _Integer pointer
       reads _Integer_fields_result_5,_Integer_result_5_alloc_table
       writes _Integer_fields_result_5,_Integer_result_5_alloc_table,_Integer_result_5_tag_table
       { (JC_26:
         eq_int(integer_of_int32(int32_of_bitvector(extract_bytes(select(_Integer_fields_v_i_1_4,
                                                                  v_i_1),
                                                    (0), (4)))),
         integer_of_int32(int32_of_bitvector(extract_bytes(select(_Integer_fields_result_5,
                                                           result),
                                             (0), (4)))))) }

parameter endianness2_requires :
 v_i_1:_Integer pointer ->
  _Integer_result_5_alloc_table:_Integer alloc_table ref ->
   _Integer_result_5_tag_table:_Integer tag_table ref ->
    _Integer_fields_result_5:(_Integer, bitvector) memory ref ->
     _Integer_v_i_1_4_alloc_table:_Integer alloc_table ->
      _Integer_fields_v_i_1_4:(_Integer, bitvector) memory ->
       { } _Integer pointer
       reads _Integer_fields_result_5,_Integer_result_5_alloc_table
       writes _Integer_fields_result_5,_Integer_result_5_alloc_table,_Integer_result_5_tag_table
       { (JC_26:
         eq_int(integer_of_int32(int32_of_bitvector(extract_bytes(select(_Integer_fields_v_i_1_4,
                                                                  v_i_1),
                                                    (0), (4)))),
         integer_of_int32(int32_of_bitvector(extract_bytes(select(_Integer_fields_result_5,
                                                           result),
                                             (0), (4)))))) }

parameter endianness3 :
 i:_Integer pointer ->
  _Integer_result_8_alloc_table:_Integer alloc_table ref ->
   _Integer_result_8_tag_table:_Integer tag_table ref ->
    _Integer_fields_result_8:(_Integer, bitvector) memory ref ->
     _Integer_i_7_alloc_table:_Integer alloc_table ->
      _Integer_fields_i_7:(_Integer, bitvector) memory ->
       { } _Integer pointer
       reads _Integer_fields_result_8,_Integer_result_8_alloc_table
       writes _Integer_fields_result_8,_Integer_result_8_alloc_table,_Integer_result_8_tag_table
       { (JC_47:
         eq_int(integer_of_int32(int32_of_bitvector(extract_bytes(select(_Integer_fields_i_7,
                                                                  i),
                                                    (0), (4)))),
         integer_of_int32(int32_of_bitvector(extract_bytes(select(_Integer_fields_result_8,
                                                           result),
                                             (0), (4)))))) }

parameter endianness3_requires :
 i:_Integer pointer ->
  _Integer_result_8_alloc_table:_Integer alloc_table ref ->
   _Integer_result_8_tag_table:_Integer tag_table ref ->
    _Integer_fields_result_8:(_Integer, bitvector) memory ref ->
     _Integer_i_7_alloc_table:_Integer alloc_table ->
      _Integer_fields_i_7:(_Integer, bitvector) memory ->
       { (JC_40:
         ((JC_38: le_int(offset_min(_Integer_i_7_alloc_table, i), (0)))
         and (JC_39: ge_int(offset_max(_Integer_i_7_alloc_table, i), (0)))))}
       _Integer pointer
       reads _Integer_fields_result_8,_Integer_result_8_alloc_table
       writes _Integer_fields_result_8,_Integer_result_8_alloc_table,_Integer_result_8_tag_table
       { (JC_47:
         eq_int(integer_of_int32(int32_of_bitvector(extract_bytes(select(_Integer_fields_i_7,
                                                                  i),
                                                    (0), (4)))),
         integer_of_int32(int32_of_bitvector(extract_bytes(select(_Integer_fields_result_8,
                                                           result),
                                             (0), (4)))))) }

parameter endianness_requires :
 i_0:_Integer2 pointer ->
  _Integer2_result_2_alloc_table:_Integer2 alloc_table ref ->
   _Integer2_result_2_tag_table:_Integer2 tag_table ref ->
    _Integer2_fields_result_2:(_Integer2, bitvector) memory ref ->
     _Integer2_i_0_1_alloc_table:_Integer2 alloc_table ->
      _Integer2_fields_i_0_1:(_Integer2, bitvector) memory ->
       { (JC_3:
         ((JC_1: le_int(offset_min(_Integer2_i_0_1_alloc_table, i_0), (0)))
         and (JC_2:
             ge_int(offset_max(_Integer2_i_0_1_alloc_table, i_0), (0)))))}
       _Integer2 pointer
       reads _Integer2_fields_result_2,_Integer2_result_2_alloc_table
       writes _Integer2_fields_result_2,_Integer2_result_2_alloc_table,_Integer2_result_2_tag_table
       { (JC_10:
         eq_int(integer_of_int16(int16_of_bitvector(extract_bytes(select(_Integer2_fields_i_0_1,
                                                                  i_0),
                                                    (0), (2)))),
         integer_of_int16(int16_of_bitvector(extract_bytes(select(_Integer2_fields_result_2,
                                                           result),
                                             (0), (2)))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter struct__Decomp2_alloc_of_bitvector :
 _Decomp2_alloc_table:_Decomp2 alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes _Decomp2_alloc_table
   { (forall p:_Decomp2 pointer.
      (eq_int(offset_min(_Decomp2_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (2)))
      and eq_int(offset_max(_Decomp2_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (2))))) }

parameter struct__Decomp2_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  _Decomp2_alloc_table:_Decomp2 alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:_Decomp2 pointer.
      (eq_int(offset_min(_Decomp2_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (2)))
      and eq_int(offset_max(_Decomp2_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (2))))) }

parameter struct__Decomp2_mem_of_bitvector :
 _Decomp2_c1:(_Decomp2, int8) memory ref ->
  _Decomp2_c2:(_Decomp2, int8) memory ref ->
   bitvector:(unit, bitvector) memory ->
    { } unit writes _Decomp2_c1,_Decomp2_c2
    { ((forall p0:_Decomp2 pointer.
        eq_int8(select(_Decomp2_c1, p0),
        int8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                          (1)))))
      and (forall p1:_Decomp2 pointer.
           eq_int8(select(_Decomp2_c2, p1),
           int8_of_bitvector(select_bytes(bitvector, pointer_address(p1),
                             (1), (1)))))) }

parameter struct__Decomp2_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref ->
  _Decomp2_c1:(_Decomp2, int8) memory ->
   _Decomp2_c2:(_Decomp2, int8) memory ->
    { } unit writes bitvector
    { ((forall p0:_Decomp2 pointer.
        eq_int8(select(_Decomp2_c1, p0),
        int8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                          (1)))))
      and (forall p1:_Decomp2 pointer.
           eq_int8(select(_Decomp2_c2, p1),
           int8_of_bitvector(select_bytes(bitvector, pointer_address(p1),
                             (1), (1)))))) }

parameter struct__Decomp_alloc_of_bitvector :
 _Decomp_alloc_table:_Decomp alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes _Decomp_alloc_table
   { (forall p:_Decomp pointer.
      (eq_int(offset_min(_Decomp_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (4)))
      and eq_int(offset_max(_Decomp_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (4))))) }

parameter struct__Decomp_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  _Decomp_alloc_table:_Decomp alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:_Decomp pointer.
      (eq_int(offset_min(_Decomp_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (4)))
      and eq_int(offset_max(_Decomp_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (4))))) }

parameter struct__Decomp_mem_of_bitvector :
 _Decomp_c1_0:(_Decomp, int8) memory ref ->
  _Decomp_c2_0:(_Decomp, int8) memory ref ->
   _Decomp_c3:(_Decomp, int8) memory ref ->
    _Decomp_c4:(_Decomp, int8) memory ref ->
     bitvector:(unit, bitvector) memory ->
      { } unit writes _Decomp_c1_0,_Decomp_c2_0,_Decomp_c3,_Decomp_c4
      { ((((forall p0:_Decomp pointer.
            eq_int8(select(_Decomp_c1_0, p0),
            int8_of_bitvector(select_bytes(bitvector, pointer_address(p0),
                              (0), (1)))))
          and (forall p1:_Decomp pointer.
               eq_int8(select(_Decomp_c2_0, p1),
               int8_of_bitvector(select_bytes(bitvector, pointer_address(p1),
                                 (1), (1))))))
         and (forall p2:_Decomp pointer.
              eq_int8(select(_Decomp_c3, p2),
              int8_of_bitvector(select_bytes(bitvector, pointer_address(p2),
                                (2), (1))))))
        and (forall p3:_Decomp pointer.
             eq_int8(select(_Decomp_c4, p3),
             int8_of_bitvector(select_bytes(bitvector, pointer_address(p3),
                               (3), (1)))))) }

parameter struct__Decomp_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref ->
  _Decomp_c1_0:(_Decomp, int8) memory ->
   _Decomp_c2_0:(_Decomp, int8) memory ->
    _Decomp_c3:(_Decomp, int8) memory ->
     _Decomp_c4:(_Decomp, int8) memory ->
      { } unit writes bitvector
      { ((((forall p0:_Decomp pointer.
            eq_int8(select(_Decomp_c1_0, p0),
            int8_of_bitvector(select_bytes(bitvector, pointer_address(p0),
                              (0), (1)))))
          and (forall p1:_Decomp pointer.
               eq_int8(select(_Decomp_c2_0, p1),
               int8_of_bitvector(select_bytes(bitvector, pointer_address(p1),
                                 (1), (1))))))
         and (forall p2:_Decomp pointer.
              eq_int8(select(_Decomp_c3, p2),
              int8_of_bitvector(select_bytes(bitvector, pointer_address(p2),
                                (2), (1))))))
        and (forall p3:_Decomp pointer.
             eq_int8(select(_Decomp_c4, p3),
             int8_of_bitvector(select_bytes(bitvector, pointer_address(p3),
                               (3), (1)))))) }

parameter struct__S1_alloc_of_bitvector :
 _S1_alloc_table:_S1 alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes _S1_alloc_table
   { (forall p:_S1 pointer.
      (eq_int(offset_min(_S1_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (8)))
      and eq_int(offset_max(_S1_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (8))))) }

parameter struct__S1_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  _S1_alloc_table:_S1 alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:_S1 pointer.
      (eq_int(offset_min(_S1_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (8)))
      and eq_int(offset_max(_S1_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (8))))) }

parameter struct__S1_mem_of_bitvector :
 _S1_c_1:(_S1, int8) memory ref ->
  _S1_i_2:(_S1, int32) memory ref ->
   _S1_padding_1:(_S1, padding) memory ref ->
    bitvector:(unit, bitvector) memory ->
     { } unit writes _S1_c_1,_S1_i_2,_S1_padding_1
     { ((forall p0:_S1 pointer.
         eq_int8(select(_S1_c_1, p0),
         int8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                           (1)))))
       and (forall p1:_S1 pointer.
            eq_int32(select(_S1_i_2, p1),
            int32_of_bitvector(select_bytes(bitvector, pointer_address(p1),
                               (4), (4)))))) }

parameter struct__S1_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref ->
  _S1_c_1:(_S1, int8) memory ->
   _S1_i_2:(_S1, int32) memory ->
    _S1_padding_1:(_S1, padding) memory ->
     { } unit writes bitvector
     { ((forall p0:_S1 pointer.
         eq_int8(select(_S1_c_1, p0),
         int8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                           (1)))))
       and (forall p1:_S1 pointer.
            eq_int32(select(_S1_i_2, p1),
            int32_of_bitvector(select_bytes(bitvector, pointer_address(p1),
                               (4), (4)))))) }

parameter struct__S2_alloc_of_bitvector :
 _S2_alloc_table:_S2 alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes _S2_alloc_table
   { (forall p:_S2 pointer.
      (eq_int(offset_min(_S2_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (8)))
      and eq_int(offset_max(_S2_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (8))))) }

parameter struct__S2_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  _S2_alloc_table:_S2 alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:_S2 pointer.
      (eq_int(offset_min(_S2_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (8)))
      and eq_int(offset_max(_S2_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (8))))) }

parameter struct__S2_mem_of_bitvector :
 _S2_c_2:(_S2, int8) memory ref ->
  _S2_f:(_S2, single) memory ref ->
   _S2_padding_2:(_S2, padding) memory ref ->
    bitvector:(unit, bitvector) memory ->
     { } unit writes _S2_c_2,_S2_f,_S2_padding_2
     { (forall p0:_S2 pointer.
        eq_int8(select(_S2_c_2, p0),
        int8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                          (1))))) }

parameter struct__S2_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref ->
  _S2_c_2:(_S2, int8) memory ->
   _S2_f:(_S2, single) memory ->
    _S2_padding_2:(_S2, padding) memory ->
     { } unit writes bitvector
     { (forall p0:_S2 pointer.
        eq_int8(select(_S2_c_2, p0),
        int8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                          (1))))) }

parameter struct_char_P_alloc_of_bitvector :
 char_P_alloc_table:char_P alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes char_P_alloc_table
   { (forall p:char_P pointer.
      (eq_int(offset_min(char_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (1)))
      and eq_int(offset_max(char_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (1))))) }

parameter struct_char_P_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  char_P_alloc_table:char_P alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:char_P pointer.
      (eq_int(offset_min(char_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (1)))
      and eq_int(offset_max(char_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (1))))) }

parameter struct_char_P_mem_of_bitvector :
 char_P_char_M:(char_P, int8) memory ref ->
  bitvector:(unit, bitvector) memory ->
   { } unit writes char_P_char_M
   { (forall p0:char_P pointer.
      eq_int8(select(char_P_char_M, p0),
      int8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                        (1))))) }

parameter struct_char_P_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref ->
  char_P_char_M:(char_P, int8) memory ->
   { } unit writes bitvector
   { (forall p0:char_P pointer.
      eq_int8(select(char_P_char_M, p0),
      int8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                        (1))))) }

parameter struct_void_P_alloc_of_bitvector :
 void_P_alloc_table:void_P alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes void_P_alloc_table
   { (forall p:void_P pointer.
      (eq_int(offset_min(void_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(void_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_void_P_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  void_P_alloc_table:void_P alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:void_P pointer.
      (eq_int(offset_min(void_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(void_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_void_P_mem_of_bitvector :
 bitvector:(unit, bitvector) memory -> { } unit { true }

parameter struct_void_P_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref -> { } unit writes bitvector { true }

parameter test :
 tt:unit -> { } int32 { (JC_69: eq_int(integer_of_int32(result), (1))) }

parameter test_requires :
 tt:unit -> { } int32 { (JC_69: eq_int(integer_of_int32(result), (1))) }

let endianness2_ensures_default =
 fun (v_i_1 : _Integer pointer) (_Integer_result_5_alloc_table : _Integer alloc_table ref) (_Integer_result_5_tag_table : _Integer tag_table ref) (_Integer_fields_result_5 : (_Integer, bitvector) memory ref) (_Integer_v_i_1_4_alloc_table : _Integer alloc_table) (_Integer_fields_v_i_1_4 : (_Integer, bitvector) memory) ->
  { valid_root__Integer(v_i_1, (0), (0), _Integer_v_i_1_4_alloc_table) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let _Integer_fields_j_0_13 = ref (any_memory void) in
     (let _Integer_fields_i_1_12 = ref (any_memory void) in
     (let _Integer_i_1_12_tag_table = ref (any_tag_table void) in
     (let _Integer_j_0_13_tag_table = ref (any_tag_table void) in
     (let _Integer_j_0_13_alloc_table = ref (any_alloc_table void) in
     (let _Integer_i_1_12_alloc_table = ref (any_alloc_table void) in
     (let i_1 = ref (any_pointer void) in
     (let j_0 = ref (any_pointer void) in
     (let __cil_tmp = ref (any_pointer void) in
     (C_22:
     begin
       (let jessie_159 = (i_1 := (C_21:
                                 (JC_35:
                                 ((alloc_root__Integer (1)) _Integer_i_1_12_alloc_table)))) in
       void);
      (C_24:
      begin
        (let jessie_161 = (j_0 := (C_23:
                                  (JC_36:
                                  ((alloc_root__Integer (1)) _Integer_j_0_13_alloc_table)))) in
        void);
       (C_26:
       begin
         (let jessie_163 = (__cil_tmp := (C_25:
                                         (JC_37:
                                         ((alloc_root__Integer (1)) _Integer_result_5_alloc_table)))) in
         void);
        (let jessie_203 = (C_31:
                          begin
                            (let jessie_171 = (let jessie_165 = (C_28:
                                                                (int32_of_bitvector 
                                                                 (((extract_bytes 
                                                                    ((safe_acc_ _Integer_fields_v_i_1_4) 
                                                                    (C_27:
                                                                    v_i_1))) (0)) (4)))) in
                                              (let jessie_166 = (C_29: !i_1) in
                                              (let jessie_167 = ((((replace_bytes 
                                                                    ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                    (C_29:
                                                                    jessie_166))) (0)) (4)) 
                                                                 (bitvector_of_int32 jessie_165)) in
                                              (let jessie_170 = (C_29:
                                                                jessie_166) in
                                              (((safe_upd_ _Integer_fields_i_1_12) jessie_170) jessie_167))))) in
                            void);
                           (C_38:
                           begin
                             (let jessie_179 = (let jessie_173 = (C_34:
                                                                 (int8_of_bitvector 
                                                                  (((extract_bytes 
                                                                    ((safe_acc_ _Integer_fields_v_i_1_4) 
                                                                    (C_32:
                                                                    v_i_1))) (0)) (1)))) in
                                               (let jessie_174 = (C_35: !i_1) in
                                               (let jessie_175 = ((((replace_bytes 
                                                                    ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                    (C_35:
                                                                    jessie_174))) (0)) (1)) 
                                                                  (bitvector_of_int8 jessie_173)) in
                                               (let jessie_178 = (C_35:
                                                                 jessie_174) in
                                               (((safe_upd_ _Integer_fields_i_1_12) jessie_178) jessie_175))))) in
                             void);
                            (C_45:
                            begin
                              (let jessie_187 = (let jessie_181 = (C_41:
                                                                  (int8_of_bitvector 
                                                                   (((extract_bytes 
                                                                    ((safe_acc_ _Integer_fields_v_i_1_4) 
                                                                    (C_39:
                                                                    v_i_1))) (1)) (1)))) in
                                                (let jessie_182 = (C_42:
                                                                  !i_1) in
                                                (let jessie_183 = ((((replace_bytes 
                                                                    ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                    (C_42:
                                                                    jessie_182))) (1)) (1)) 
                                                                   (bitvector_of_int8 jessie_181)) in
                                                (let jessie_186 = (C_42:
                                                                  jessie_182) in
                                                (((safe_upd_ _Integer_fields_i_1_12) jessie_186) jessie_183))))) in
                              void);
                             (C_52:
                             begin
                               (let jessie_195 = (let jessie_189 = (C_48:
                                                                   (int8_of_bitvector 
                                                                    (((extract_bytes 
                                                                    ((safe_acc_ _Integer_fields_v_i_1_4) 
                                                                    (C_46:
                                                                    v_i_1))) (2)) (1)))) in
                                                 (let jessie_190 = (C_49:
                                                                   !i_1) in
                                                 (let jessie_191 = ((((replace_bytes 
                                                                    ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                    (C_49:
                                                                    jessie_190))) (2)) (1)) 
                                                                    (bitvector_of_int8 jessie_189)) in
                                                 (let jessie_194 = (C_49:
                                                                   jessie_190) in
                                                 (((safe_upd_ _Integer_fields_i_1_12) jessie_194) jessie_191))))) in
                               void);
                              (C_59:
                              (let jessie_197 = (C_55:
                                                (int8_of_bitvector (((extract_bytes 
                                                                    ((safe_acc_ _Integer_fields_v_i_1_4) 
                                                                    (C_53:
                                                                    v_i_1))) (3)) (1)))) in
                              (let jessie_198 = (C_56: !i_1) in
                              (let jessie_199 = ((((replace_bytes ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                   (C_56:
                                                                   jessie_198))) (3)) (1)) 
                                                 (bitvector_of_int8 jessie_197)) in
                              (let jessie_202 = (C_56: jessie_198) in
                              begin
                                (((safe_upd_ _Integer_fields_i_1_12) jessie_202) jessie_199);
                               jessie_197
                              end)))))
                             end)
                            end)
                           end)
                          end) in
        void);
        (C_66:
        begin
          (let jessie_211 = (let jessie_205 = (C_62:
                                              (int8_of_bitvector (((extract_bytes 
                                                                    ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                    (C_60:
                                                                    !i_1))) (0)) (1)))) in
                            (let jessie_206 = (C_63: !j_0) in
                            (let jessie_207 = ((((replace_bytes ((safe_acc_ !_Integer_fields_j_0_13) 
                                                                 (C_63:
                                                                 jessie_206))) (0)) (1)) 
                                               (bitvector_of_int8 jessie_205)) in
                            (let jessie_210 = (C_63: jessie_206) in
                            (((safe_upd_ _Integer_fields_j_0_13) jessie_210) jessie_207))))) in
          void);
         (C_73:
         begin
           (let jessie_219 = (let jessie_213 = (C_69:
                                               (int8_of_bitvector (((extract_bytes 
                                                                    ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                    (C_67:
                                                                    !i_1))) (1)) (1)))) in
                             (let jessie_214 = (C_70: !j_0) in
                             (let jessie_215 = ((((replace_bytes ((safe_acc_ !_Integer_fields_j_0_13) 
                                                                  (C_70:
                                                                  jessie_214))) (1)) (1)) 
                                                (bitvector_of_int8 jessie_213)) in
                             (let jessie_218 = (C_70: jessie_214) in
                             (((safe_upd_ _Integer_fields_j_0_13) jessie_218) jessie_215))))) in
           void);
          (C_80:
          begin
            (let jessie_227 = (let jessie_221 = (C_76:
                                                (int8_of_bitvector (((extract_bytes 
                                                                    ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                    (C_74:
                                                                    !i_1))) (2)) (1)))) in
                              (let jessie_222 = (C_77: !j_0) in
                              (let jessie_223 = ((((replace_bytes ((safe_acc_ !_Integer_fields_j_0_13) 
                                                                   (C_77:
                                                                   jessie_222))) (2)) (1)) 
                                                 (bitvector_of_int8 jessie_221)) in
                              (let jessie_226 = (C_77: jessie_222) in
                              (((safe_upd_ _Integer_fields_j_0_13) jessie_226) jessie_223))))) in
            void);
           (C_87:
           begin
             (let jessie_235 = (let jessie_229 = (C_83:
                                                 (int8_of_bitvector (((extract_bytes 
                                                                    ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                    (C_81:
                                                                    !i_1))) (3)) (1)))) in
                               (let jessie_230 = (C_84: !j_0) in
                               (let jessie_231 = ((((replace_bytes ((safe_acc_ !_Integer_fields_j_0_13) 
                                                                    (C_84:
                                                                    jessie_230))) (3)) (1)) 
                                                  (bitvector_of_int8 jessie_229)) in
                               (let jessie_234 = (C_84: jessie_230) in
                               (((safe_upd_ _Integer_fields_j_0_13) jessie_234) jessie_231))))) in
             void);
            (C_92:
            begin
              (let jessie_243 = (let jessie_237 = (C_89:
                                                  (int32_of_bitvector 
                                                   (((extract_bytes ((safe_acc_ !_Integer_fields_j_0_13) 
                                                                    (C_88:
                                                                    !j_0))) (0)) (4)))) in
                                (let jessie_238 = (C_90: !__cil_tmp) in
                                (let jessie_239 = ((((replace_bytes ((safe_acc_ !_Integer_fields_result_5) 
                                                                    (C_90:
                                                                    jessie_238))) (0)) (4)) 
                                                   (bitvector_of_int32 jessie_237)) in
                                (let jessie_242 = (C_90: jessie_238) in
                                (((safe_upd_ _Integer_fields_result_5) jessie_242) jessie_239))))) in
              void);
             (C_99:
             begin
               (let jessie_251 = (let jessie_245 = (C_95:
                                                   (int8_of_bitvector 
                                                    (((extract_bytes 
                                                       ((safe_acc_ !_Integer_fields_j_0_13) 
                                                        (C_93:
                                                        !j_0))) (0)) (1)))) in
                                 (let jessie_246 = (C_96: !__cil_tmp) in
                                 (let jessie_247 = ((((replace_bytes 
                                                       ((safe_acc_ !_Integer_fields_result_5) 
                                                        (C_96:
                                                        jessie_246))) (0)) (1)) 
                                                    (bitvector_of_int8 jessie_245)) in
                                 (let jessie_250 = (C_96: jessie_246) in
                                 (((safe_upd_ _Integer_fields_result_5) jessie_250) jessie_247))))) in
               void);
              (C_106:
              begin
                (let jessie_259 = (let jessie_253 = (C_102:
                                                    (int8_of_bitvector 
                                                     (((extract_bytes 
                                                        ((safe_acc_ !_Integer_fields_j_0_13) 
                                                         (C_100:
                                                         !j_0))) (1)) (1)))) in
                                  (let jessie_254 = (C_103: !__cil_tmp) in
                                  (let jessie_255 = ((((replace_bytes 
                                                        ((safe_acc_ !_Integer_fields_result_5) 
                                                         (C_103:
                                                         jessie_254))) (1)) (1)) 
                                                     (bitvector_of_int8 jessie_253)) in
                                  (let jessie_258 = (C_103: jessie_254) in
                                  (((safe_upd_ _Integer_fields_result_5) jessie_258) jessie_255))))) in
                void);
               (C_113:
               begin
                 (let jessie_267 = (let jessie_261 = (C_109:
                                                     (int8_of_bitvector 
                                                      (((extract_bytes 
                                                         ((safe_acc_ !_Integer_fields_j_0_13) 
                                                          (C_107:
                                                          !j_0))) (2)) (1)))) in
                                   (let jessie_262 = (C_110: !__cil_tmp) in
                                   (let jessie_263 = ((((replace_bytes 
                                                         ((safe_acc_ !_Integer_fields_result_5) 
                                                          (C_110:
                                                          jessie_262))) (2)) (1)) 
                                                      (bitvector_of_int8 jessie_261)) in
                                   (let jessie_266 = (C_110: jessie_262) in
                                   (((safe_upd_ _Integer_fields_result_5) jessie_266) jessie_263))))) in
                 void);
                (C_120:
                begin
                  (let jessie_275 = (let jessie_269 = (C_116:
                                                      (int8_of_bitvector 
                                                       (((extract_bytes 
                                                          ((safe_acc_ !_Integer_fields_j_0_13) 
                                                           (C_114:
                                                           !j_0))) (3)) (1)))) in
                                    (let jessie_270 = (C_117: !__cil_tmp) in
                                    (let jessie_271 = ((((replace_bytes 
                                                          ((safe_acc_ !_Integer_fields_result_5) 
                                                           (C_117:
                                                           jessie_270))) (3)) (1)) 
                                                       (bitvector_of_int8 jessie_269)) in
                                    (let jessie_274 = (C_117: jessie_270) in
                                    (((safe_upd_ _Integer_fields_result_5) jessie_274) jessie_271))))) in
                  void);
                 (C_121:
                 begin
                   ((safe_free_parameter _Integer_i_1_12_alloc_table) !i_1);
                  (C_122:
                  begin
                    ((safe_free_parameter _Integer_j_0_13_alloc_table) !j_0);
                   (return := !__cil_tmp);
                   (raise Return)
                  end)
                 end)
                end)
               end)
              end)
             end)
            end)
           end)
          end)
         end)
        end)
       end)
      end)
     end))))))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_25:
    eq_int(integer_of_int32(int32_of_bitvector(extract_bytes(select(_Integer_fields_v_i_1_4,
                                                             v_i_1),
                                               (0), (4)))),
    integer_of_int32(int32_of_bitvector(extract_bytes(select(_Integer_fields_result_5,
                                                      result),
                                        (0), (4)))))) }

let endianness2_safety =
 fun (v_i_1 : _Integer pointer) (_Integer_result_5_alloc_table : _Integer alloc_table ref) (_Integer_result_5_tag_table : _Integer tag_table ref) (_Integer_fields_result_5 : (_Integer, bitvector) memory ref) (_Integer_v_i_1_4_alloc_table : _Integer alloc_table) (_Integer_fields_v_i_1_4 : (_Integer, bitvector) memory) ->
  { valid_root__Integer(v_i_1, (0), (0), _Integer_v_i_1_4_alloc_table) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let _Integer_fields_j_0_13 = ref (any_memory void) in
     (let _Integer_fields_i_1_12 = ref (any_memory void) in
     (let _Integer_i_1_12_tag_table = ref (any_tag_table void) in
     (let _Integer_j_0_13_tag_table = ref (any_tag_table void) in
     (let _Integer_j_0_13_alloc_table = ref (any_alloc_table void) in
     (let _Integer_i_1_12_alloc_table = ref (any_alloc_table void) in
     (let i_1 = ref (any_pointer void) in
     (let j_0 = ref (any_pointer void) in
     (let __cil_tmp = ref (any_pointer void) in
     (C_22:
     begin
       (let jessie_40 = (i_1 := (let jessie_39 = (C_21:
                                                 (JC_29:
                                                 ((alloc_root__Integer_requires (1)) _Integer_i_1_12_alloc_table))) in
                                (JC_30:
                                (assert
                                { ge_int(offset_max(_Integer_i_1_12_alloc_table,
                                         jessie_39),
                                  (0)) };
                                jessie_39)))) in
       void);
      (C_24:
      begin
        (let jessie_42 = (j_0 := (let jessie_41 = (C_23:
                                                  (JC_31:
                                                  ((alloc_root__Integer_requires (1)) _Integer_j_0_13_alloc_table))) in
                                 (JC_32:
                                 (assert
                                 { ge_int(offset_max(_Integer_j_0_13_alloc_table,
                                          jessie_41),
                                   (0)) };
                                 jessie_41)))) in
        void);
       (C_26:
       begin
         (let jessie_44 = (__cil_tmp := (let jessie_43 = (C_25:
                                                         (JC_33:
                                                         ((alloc_root__Integer_requires (1)) _Integer_result_5_alloc_table))) in
                                        (JC_34:
                                        (assert
                                        { ge_int(offset_max(_Integer_result_5_alloc_table,
                                                 jessie_43),
                                          (0)) };
                                        jessie_43)))) in
         void);
        (let jessie_84 = (C_31:
                         begin
                           (let jessie_52 = (let jessie_46 = (C_28:
                                                             (int32_of_bitvector 
                                                              (((extract_bytes 
                                                                 ((safe_acc_ _Integer_fields_v_i_1_4) 
                                                                  (C_27:
                                                                  v_i_1))) (0)) (4)))) in
                                            (let jessie_47 = (C_29: !i_1) in
                                            (let jessie_48 = ((((replace_bytes 
                                                                 ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                  (C_29:
                                                                  jessie_47))) (0)) (4)) 
                                                              (bitvector_of_int32 jessie_46)) in
                                            (let jessie_51 = (C_29:
                                                             jessie_47) in
                                            (((safe_upd_ _Integer_fields_i_1_12) jessie_51) jessie_48))))) in
                           void);
                          (C_38:
                          begin
                            (let jessie_60 = (let jessie_54 = (C_34:
                                                              (int8_of_bitvector 
                                                               (((extract_bytes 
                                                                  ((safe_acc_ _Integer_fields_v_i_1_4) 
                                                                   (C_32:
                                                                   v_i_1))) (0)) (1)))) in
                                             (let jessie_55 = (C_35: !i_1) in
                                             (let jessie_56 = ((((replace_bytes 
                                                                  ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                   (C_35:
                                                                   jessie_55))) (0)) (1)) 
                                                               (bitvector_of_int8 jessie_54)) in
                                             (let jessie_59 = (C_35:
                                                              jessie_55) in
                                             (((safe_upd_ _Integer_fields_i_1_12) jessie_59) jessie_56))))) in
                            void);
                           (C_45:
                           begin
                             (let jessie_68 = (let jessie_62 = (C_41:
                                                               (int8_of_bitvector 
                                                                (((extract_bytes 
                                                                   ((safe_acc_ _Integer_fields_v_i_1_4) 
                                                                    (C_39:
                                                                    v_i_1))) (1)) (1)))) in
                                              (let jessie_63 = (C_42: !i_1) in
                                              (let jessie_64 = ((((replace_bytes 
                                                                   ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                    (C_42:
                                                                    jessie_63))) (1)) (1)) 
                                                                (bitvector_of_int8 jessie_62)) in
                                              (let jessie_67 = (C_42:
                                                               jessie_63) in
                                              (((safe_upd_ _Integer_fields_i_1_12) jessie_67) jessie_64))))) in
                             void);
                            (C_52:
                            begin
                              (let jessie_76 = (let jessie_70 = (C_48:
                                                                (int8_of_bitvector 
                                                                 (((extract_bytes 
                                                                    ((safe_acc_ _Integer_fields_v_i_1_4) 
                                                                    (C_46:
                                                                    v_i_1))) (2)) (1)))) in
                                               (let jessie_71 = (C_49: !i_1) in
                                               (let jessie_72 = ((((replace_bytes 
                                                                    ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                    (C_49:
                                                                    jessie_71))) (2)) (1)) 
                                                                 (bitvector_of_int8 jessie_70)) in
                                               (let jessie_75 = (C_49:
                                                                jessie_71) in
                                               (((safe_upd_ _Integer_fields_i_1_12) jessie_75) jessie_72))))) in
                              void);
                             (C_59:
                             (let jessie_78 = (C_55:
                                              (int8_of_bitvector (((extract_bytes 
                                                                    ((safe_acc_ _Integer_fields_v_i_1_4) 
                                                                    (C_53:
                                                                    v_i_1))) (3)) (1)))) in
                             (let jessie_79 = (C_56: !i_1) in
                             (let jessie_80 = ((((replace_bytes ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                 (C_56:
                                                                 jessie_79))) (3)) (1)) 
                                               (bitvector_of_int8 jessie_78)) in
                             (let jessie_83 = (C_56: jessie_79) in
                             begin
                               (((safe_upd_ _Integer_fields_i_1_12) jessie_83) jessie_80);
                              jessie_78
                             end)))))
                            end)
                           end)
                          end)
                         end) in
        void);
        (C_66:
        begin
          (let jessie_92 = (let jessie_86 = (C_62:
                                            (int8_of_bitvector (((extract_bytes 
                                                                  ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                   (C_60:
                                                                   !i_1))) (0)) (1)))) in
                           (let jessie_87 = (C_63: !j_0) in
                           (let jessie_88 = ((((replace_bytes ((safe_acc_ !_Integer_fields_j_0_13) 
                                                               (C_63:
                                                               jessie_87))) (0)) (1)) 
                                             (bitvector_of_int8 jessie_86)) in
                           (let jessie_91 = (C_63: jessie_87) in
                           (((safe_upd_ _Integer_fields_j_0_13) jessie_91) jessie_88))))) in
          void);
         (C_73:
         begin
           (let jessie_100 = (let jessie_94 = (C_69:
                                              (int8_of_bitvector (((extract_bytes 
                                                                    ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                    (C_67:
                                                                    !i_1))) (1)) (1)))) in
                             (let jessie_95 = (C_70: !j_0) in
                             (let jessie_96 = ((((replace_bytes ((safe_acc_ !_Integer_fields_j_0_13) 
                                                                 (C_70:
                                                                 jessie_95))) (1)) (1)) 
                                               (bitvector_of_int8 jessie_94)) in
                             (let jessie_99 = (C_70: jessie_95) in
                             (((safe_upd_ _Integer_fields_j_0_13) jessie_99) jessie_96))))) in
           void);
          (C_80:
          begin
            (let jessie_108 = (let jessie_102 = (C_76:
                                                (int8_of_bitvector (((extract_bytes 
                                                                    ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                    (C_74:
                                                                    !i_1))) (2)) (1)))) in
                              (let jessie_103 = (C_77: !j_0) in
                              (let jessie_104 = ((((replace_bytes ((safe_acc_ !_Integer_fields_j_0_13) 
                                                                   (C_77:
                                                                   jessie_103))) (2)) (1)) 
                                                 (bitvector_of_int8 jessie_102)) in
                              (let jessie_107 = (C_77: jessie_103) in
                              (((safe_upd_ _Integer_fields_j_0_13) jessie_107) jessie_104))))) in
            void);
           (C_87:
           begin
             (let jessie_116 = (let jessie_110 = (C_83:
                                                 (int8_of_bitvector (((extract_bytes 
                                                                    ((safe_acc_ !_Integer_fields_i_1_12) 
                                                                    (C_81:
                                                                    !i_1))) (3)) (1)))) in
                               (let jessie_111 = (C_84: !j_0) in
                               (let jessie_112 = ((((replace_bytes ((safe_acc_ !_Integer_fields_j_0_13) 
                                                                    (C_84:
                                                                    jessie_111))) (3)) (1)) 
                                                  (bitvector_of_int8 jessie_110)) in
                               (let jessie_115 = (C_84: jessie_111) in
                               (((safe_upd_ _Integer_fields_j_0_13) jessie_115) jessie_112))))) in
             void);
            (C_92:
            begin
              (let jessie_124 = (let jessie_118 = (C_89:
                                                  (int32_of_bitvector 
                                                   (((extract_bytes ((safe_acc_ !_Integer_fields_j_0_13) 
                                                                    (C_88:
                                                                    !j_0))) (0)) (4)))) in
                                (let jessie_119 = (C_90: !__cil_tmp) in
                                (let jessie_120 = ((((replace_bytes ((safe_acc_ !_Integer_fields_result_5) 
                                                                    (C_90:
                                                                    jessie_119))) (0)) (4)) 
                                                   (bitvector_of_int32 jessie_118)) in
                                (let jessie_123 = (C_90: jessie_119) in
                                (((safe_upd_ _Integer_fields_result_5) jessie_123) jessie_120))))) in
              void);
             (C_99:
             begin
               (let jessie_132 = (let jessie_126 = (C_95:
                                                   (int8_of_bitvector 
                                                    (((extract_bytes 
                                                       ((safe_acc_ !_Integer_fields_j_0_13) 
                                                        (C_93:
                                                        !j_0))) (0)) (1)))) in
                                 (let jessie_127 = (C_96: !__cil_tmp) in
                                 (let jessie_128 = ((((replace_bytes 
                                                       ((safe_acc_ !_Integer_fields_result_5) 
                                                        (C_96:
                                                        jessie_127))) (0)) (1)) 
                                                    (bitvector_of_int8 jessie_126)) in
                                 (let jessie_131 = (C_96: jessie_127) in
                                 (((safe_upd_ _Integer_fields_result_5) jessie_131) jessie_128))))) in
               void);
              (C_106:
              begin
                (let jessie_140 = (let jessie_134 = (C_102:
                                                    (int8_of_bitvector 
                                                     (((extract_bytes 
                                                        ((safe_acc_ !_Integer_fields_j_0_13) 
                                                         (C_100:
                                                         !j_0))) (1)) (1)))) in
                                  (let jessie_135 = (C_103: !__cil_tmp) in
                                  (let jessie_136 = ((((replace_bytes 
                                                        ((safe_acc_ !_Integer_fields_result_5) 
                                                         (C_103:
                                                         jessie_135))) (1)) (1)) 
                                                     (bitvector_of_int8 jessie_134)) in
                                  (let jessie_139 = (C_103: jessie_135) in
                                  (((safe_upd_ _Integer_fields_result_5) jessie_139) jessie_136))))) in
                void);
               (C_113:
               begin
                 (let jessie_148 = (let jessie_142 = (C_109:
                                                     (int8_of_bitvector 
                                                      (((extract_bytes 
                                                         ((safe_acc_ !_Integer_fields_j_0_13) 
                                                          (C_107:
                                                          !j_0))) (2)) (1)))) in
                                   (let jessie_143 = (C_110: !__cil_tmp) in
                                   (let jessie_144 = ((((replace_bytes 
                                                         ((safe_acc_ !_Integer_fields_result_5) 
                                                          (C_110:
                                                          jessie_143))) (2)) (1)) 
                                                      (bitvector_of_int8 jessie_142)) in
                                   (let jessie_147 = (C_110: jessie_143) in
                                   (((safe_upd_ _Integer_fields_result_5) jessie_147) jessie_144))))) in
                 void);
                (C_120:
                begin
                  (let jessie_156 = (let jessie_150 = (C_116:
                                                      (int8_of_bitvector 
                                                       (((extract_bytes 
                                                          ((safe_acc_ !_Integer_fields_j_0_13) 
                                                           (C_114:
                                                           !j_0))) (3)) (1)))) in
                                    (let jessie_151 = (C_117: !__cil_tmp) in
                                    (let jessie_152 = ((((replace_bytes 
                                                          ((safe_acc_ !_Integer_fields_result_5) 
                                                           (C_117:
                                                           jessie_151))) (3)) (1)) 
                                                       (bitvector_of_int8 jessie_150)) in
                                    (let jessie_155 = (C_117: jessie_151) in
                                    (((safe_upd_ _Integer_fields_result_5) jessie_155) jessie_152))))) in
                  void);
                 (C_121:
                 begin
                   ((free_parameter _Integer_i_1_12_alloc_table) !i_1);
                  (C_122:
                  begin
                    ((free_parameter _Integer_j_0_13_alloc_table) !j_0);
                   (return := !__cil_tmp);
                   (raise Return)
                  end)
                 end)
                end)
               end)
              end)
             end)
            end)
           end)
          end)
         end)
        end)
       end)
      end)
     end))))))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let endianness3_ensures_default =
 fun (i : _Integer pointer) (_Integer_result_8_alloc_table : _Integer alloc_table ref) (_Integer_result_8_tag_table : _Integer tag_table ref) (_Integer_fields_result_8 : (_Integer, bitvector) memory ref) (_Integer_i_7_alloc_table : _Integer alloc_table) (_Integer_fields_i_7 : (_Integer, bitvector) memory) ->
  { (JC_44:
    ((JC_42: le_int(offset_min(_Integer_i_7_alloc_table, i), (0)))
    and (JC_43: ge_int(offset_max(_Integer_i_7_alloc_table, i), (0))))) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let j_1 = ref (any_pointer void) in
     (C_125:
     begin
       (let jessie_313 = (j_1 := (C_124:
                                 (JC_63:
                                 ((alloc_root__Integer (1)) _Integer_result_8_alloc_table)))) in
       void);
      (C_132:
      begin
        (let jessie_321 = (let jessie_315 = (C_128:
                                            (int8_of_bitvector (((extract_bytes 
                                                                  ((safe_acc_ _Integer_fields_i_7) 
                                                                   (C_126:
                                                                   i))) (0)) (1)))) in
                          (let jessie_316 = (C_129: !j_1) in
                          (let jessie_317 = ((((replace_bytes ((safe_acc_ !_Integer_fields_result_8) 
                                                               (C_129:
                                                               jessie_316))) (0)) (1)) 
                                             (bitvector_of_int8 jessie_315)) in
                          (let jessie_320 = (C_129: jessie_316) in
                          (((safe_upd_ _Integer_fields_result_8) jessie_320) jessie_317))))) in
        void);
       (C_139:
       begin
         (let jessie_329 = (let jessie_323 = (C_135:
                                             (int8_of_bitvector (((extract_bytes 
                                                                   ((safe_acc_ _Integer_fields_i_7) 
                                                                    (C_133:
                                                                    i))) (1)) (1)))) in
                           (let jessie_324 = (C_136: !j_1) in
                           (let jessie_325 = ((((replace_bytes ((safe_acc_ !_Integer_fields_result_8) 
                                                                (C_136:
                                                                jessie_324))) (1)) (1)) 
                                              (bitvector_of_int8 jessie_323)) in
                           (let jessie_328 = (C_136: jessie_324) in
                           (((safe_upd_ _Integer_fields_result_8) jessie_328) jessie_325))))) in
         void);
        (C_146:
        begin
          (let jessie_337 = (let jessie_331 = (C_142:
                                              (int8_of_bitvector (((extract_bytes 
                                                                    ((safe_acc_ _Integer_fields_i_7) 
                                                                    (C_140:
                                                                    i))) (2)) (1)))) in
                            (let jessie_332 = (C_143: !j_1) in
                            (let jessie_333 = ((((replace_bytes ((safe_acc_ !_Integer_fields_result_8) 
                                                                 (C_143:
                                                                 jessie_332))) (2)) (1)) 
                                               (bitvector_of_int8 jessie_331)) in
                            (let jessie_336 = (C_143: jessie_332) in
                            (((safe_upd_ _Integer_fields_result_8) jessie_336) jessie_333))))) in
          void);
         (C_153:
         begin
           (let jessie_345 = (let jessie_339 = (C_149:
                                               (int8_of_bitvector (((extract_bytes 
                                                                    ((safe_acc_ _Integer_fields_i_7) 
                                                                    (C_147:
                                                                    i))) (3)) (1)))) in
                             (let jessie_340 = (C_150: !j_1) in
                             (let jessie_341 = ((((replace_bytes ((safe_acc_ !_Integer_fields_result_8) 
                                                                  (C_150:
                                                                  jessie_340))) (3)) (1)) 
                                                (bitvector_of_int8 jessie_339)) in
                             (let jessie_344 = (C_150: jessie_340) in
                             (((safe_upd_ _Integer_fields_result_8) jessie_344) jessie_341))))) in
           void);
          (return := !j_1);
          (raise Return)
         end)
        end)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_46:
    eq_int(integer_of_int32(int32_of_bitvector(extract_bytes(select(_Integer_fields_i_7,
                                                             i),
                                               (0), (4)))),
    integer_of_int32(int32_of_bitvector(extract_bytes(select(_Integer_fields_result_8,
                                                      result),
                                        (0), (4)))))) }

let endianness3_safety =
 fun (i : _Integer pointer) (_Integer_result_8_alloc_table : _Integer alloc_table ref) (_Integer_result_8_tag_table : _Integer tag_table ref) (_Integer_fields_result_8 : (_Integer, bitvector) memory ref) (_Integer_i_7_alloc_table : _Integer alloc_table) (_Integer_fields_i_7 : (_Integer, bitvector) memory) ->
  { (JC_44:
    ((JC_42: le_int(offset_min(_Integer_i_7_alloc_table, i), (0)))
    and (JC_43: ge_int(offset_max(_Integer_i_7_alloc_table, i), (0))))) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let j_1 = ref (any_pointer void) in
     (C_125:
     begin
       (let jessie_278 = (j_1 := (C_124:
                                 (JC_50:
                                 ((alloc_root__Integer_requires (1)) _Integer_result_8_alloc_table)))) in
       void);
      (C_132:
      begin
        (let jessie_286 = (let jessie_280 = (C_128:
                                            (int8_of_bitvector (((extract_bytes 
                                                                  (JC_51:
                                                                  (((acc_ _Integer_i_7_alloc_table) _Integer_fields_i_7) 
                                                                   (C_126:
                                                                   i)))) (0)) (1)))) in
                          (let jessie_281 = (C_129: !j_1) in
                          (let jessie_282 = ((((replace_bytes (JC_52:
                                                              (((acc_ !_Integer_result_8_alloc_table) !_Integer_fields_result_8) 
                                                               (C_129:
                                                               jessie_281)))) (0)) (1)) 
                                             (bitvector_of_int8 jessie_280)) in
                          (let jessie_285 = (C_129: jessie_281) in
                          (JC_53:
                          ((((upd_ !_Integer_result_8_alloc_table) _Integer_fields_result_8) jessie_285) jessie_282)))))) in
        void);
       (C_139:
       begin
         (let jessie_294 = (let jessie_288 = (C_135:
                                             (int8_of_bitvector (((extract_bytes 
                                                                   (JC_54:
                                                                   (((acc_ _Integer_i_7_alloc_table) _Integer_fields_i_7) 
                                                                    (C_133:
                                                                    i)))) (1)) (1)))) in
                           (let jessie_289 = (C_136: !j_1) in
                           (let jessie_290 = ((((replace_bytes (JC_55:
                                                               (((acc_ !_Integer_result_8_alloc_table) !_Integer_fields_result_8) 
                                                                (C_136:
                                                                jessie_289)))) (1)) (1)) 
                                              (bitvector_of_int8 jessie_288)) in
                           (let jessie_293 = (C_136: jessie_289) in
                           (JC_56:
                           ((((upd_ !_Integer_result_8_alloc_table) _Integer_fields_result_8) jessie_293) jessie_290)))))) in
         void);
        (C_146:
        begin
          (let jessie_302 = (let jessie_296 = (C_142:
                                              (int8_of_bitvector (((extract_bytes 
                                                                    (JC_57:
                                                                    (((acc_ _Integer_i_7_alloc_table) _Integer_fields_i_7) 
                                                                    (C_140:
                                                                    i)))) (2)) (1)))) in
                            (let jessie_297 = (C_143: !j_1) in
                            (let jessie_298 = ((((replace_bytes (JC_58:
                                                                (((acc_ !_Integer_result_8_alloc_table) !_Integer_fields_result_8) 
                                                                 (C_143:
                                                                 jessie_297)))) (2)) (1)) 
                                               (bitvector_of_int8 jessie_296)) in
                            (let jessie_301 = (C_143: jessie_297) in
                            (JC_59:
                            ((((upd_ !_Integer_result_8_alloc_table) _Integer_fields_result_8) jessie_301) jessie_298)))))) in
          void);
         (C_153:
         begin
           (let jessie_310 = (let jessie_304 = (C_149:
                                               (int8_of_bitvector (((extract_bytes 
                                                                    (JC_60:
                                                                    (((acc_ _Integer_i_7_alloc_table) _Integer_fields_i_7) 
                                                                    (C_147:
                                                                    i)))) (3)) (1)))) in
                             (let jessie_305 = (C_150: !j_1) in
                             (let jessie_306 = ((((replace_bytes (JC_61:
                                                                 (((acc_ !_Integer_result_8_alloc_table) !_Integer_fields_result_8) 
                                                                  (C_150:
                                                                  jessie_305)))) (3)) (1)) 
                                                (bitvector_of_int8 jessie_304)) in
                             (let jessie_309 = (C_150: jessie_305) in
                             (JC_62:
                             ((((upd_ !_Integer_result_8_alloc_table) _Integer_fields_result_8) jessie_309) jessie_306)))))) in
           void);
          (return := !j_1);
          (raise Return)
         end)
        end)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let endianness_ensures_default =
 fun (i_0 : _Integer2 pointer) (_Integer2_result_2_alloc_table : _Integer2 alloc_table ref) (_Integer2_result_2_tag_table : _Integer2 tag_table ref) (_Integer2_fields_result_2 : (_Integer2, bitvector) memory ref) (_Integer2_i_0_1_alloc_table : _Integer2 alloc_table) (_Integer2_fields_i_0_1 : (_Integer2, bitvector) memory) ->
  { (JC_7:
    ((JC_5: le_int(offset_min(_Integer2_i_0_1_alloc_table, i_0), (0)))
    and (JC_6: ge_int(offset_max(_Integer2_i_0_1_alloc_table, i_0), (0))))) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let j = ref (any_pointer void) in
     (C_2:
     begin
       (let jessie_21 = (j := (C_1:
                              (JC_20:
                              ((alloc_root__Integer2 (1)) _Integer2_result_2_alloc_table)))) in
       void);
      (C_9:
      begin
        (let jessie_29 = (let jessie_23 = (C_5:
                                          (int8_of_bitvector (((extract_bytes 
                                                                ((safe_acc_ _Integer2_fields_i_0_1) 
                                                                 (C_3:
                                                                 i_0))) (0)) (1)))) in
                         (let jessie_24 = (C_6: !j) in
                         (let jessie_25 = ((((replace_bytes ((safe_acc_ !_Integer2_fields_result_2) 
                                                             (C_6:
                                                             jessie_24))) (0)) (1)) 
                                           (bitvector_of_int8 jessie_23)) in
                         (let jessie_28 = (C_6: jessie_24) in
                         (((safe_upd_ _Integer2_fields_result_2) jessie_28) jessie_25))))) in
        void);
       (C_16:
       begin
         (let jessie_37 = (let jessie_31 = (C_12:
                                           (int8_of_bitvector (((extract_bytes 
                                                                 ((safe_acc_ _Integer2_fields_i_0_1) 
                                                                  (C_10:
                                                                  i_0))) (1)) (1)))) in
                          (let jessie_32 = (C_13: !j) in
                          (let jessie_33 = ((((replace_bytes ((safe_acc_ !_Integer2_fields_result_2) 
                                                              (C_13:
                                                              jessie_32))) (1)) (1)) 
                                            (bitvector_of_int8 jessie_31)) in
                          (let jessie_36 = (C_13: jessie_32) in
                          (((safe_upd_ _Integer2_fields_result_2) jessie_36) jessie_33))))) in
         void);
        (return := !j);
        (raise Return)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_9:
    eq_int(integer_of_int16(int16_of_bitvector(extract_bytes(select(_Integer2_fields_i_0_1,
                                                             i_0),
                                               (0), (2)))),
    integer_of_int16(int16_of_bitvector(extract_bytes(select(_Integer2_fields_result_2,
                                                      result),
                                        (0), (2)))))) }

let endianness_safety =
 fun (i_0 : _Integer2 pointer) (_Integer2_result_2_alloc_table : _Integer2 alloc_table ref) (_Integer2_result_2_tag_table : _Integer2 tag_table ref) (_Integer2_fields_result_2 : (_Integer2, bitvector) memory ref) (_Integer2_i_0_1_alloc_table : _Integer2 alloc_table) (_Integer2_fields_i_0_1 : (_Integer2, bitvector) memory) ->
  { (JC_7:
    ((JC_5: le_int(offset_min(_Integer2_i_0_1_alloc_table, i_0), (0)))
    and (JC_6: ge_int(offset_max(_Integer2_i_0_1_alloc_table, i_0), (0))))) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let j = ref (any_pointer void) in
     (C_2:
     begin
       (let jessie_2 = (j := (C_1:
                             (JC_13:
                             ((alloc_root__Integer2_requires (1)) _Integer2_result_2_alloc_table)))) in
       void);
      (C_9:
      begin
        (let jessie_10 = (let jessie_4 = (C_5:
                                         (int8_of_bitvector (((extract_bytes 
                                                               (JC_14:
                                                               (((acc_ _Integer2_i_0_1_alloc_table) _Integer2_fields_i_0_1) 
                                                                (C_3:
                                                                i_0)))) (0)) (1)))) in
                         (let jessie_5 = (C_6: !j) in
                         (let jessie_6 = ((((replace_bytes (JC_15:
                                                           (((acc_ !_Integer2_result_2_alloc_table) !_Integer2_fields_result_2) 
                                                            (C_6:
                                                            jessie_5)))) (0)) (1)) 
                                          (bitvector_of_int8 jessie_4)) in
                         (let jessie_9 = (C_6: jessie_5) in
                         (JC_16:
                         ((((upd_ !_Integer2_result_2_alloc_table) _Integer2_fields_result_2) jessie_9) jessie_6)))))) in
        void);
       (C_16:
       begin
         (let jessie_18 = (let jessie_12 = (C_12:
                                           (int8_of_bitvector (((extract_bytes 
                                                                 (JC_17:
                                                                 (((acc_ _Integer2_i_0_1_alloc_table) _Integer2_fields_i_0_1) 
                                                                  (C_10:
                                                                  i_0)))) (1)) (1)))) in
                          (let jessie_13 = (C_13: !j) in
                          (let jessie_14 = ((((replace_bytes (JC_18:
                                                             (((acc_ !_Integer2_result_2_alloc_table) !_Integer2_fields_result_2) 
                                                              (C_13:
                                                              jessie_13)))) (1)) (1)) 
                                            (bitvector_of_int8 jessie_12)) in
                          (let jessie_17 = (C_13: jessie_13) in
                          (JC_19:
                          ((((upd_ !_Integer2_result_2_alloc_table) _Integer2_fields_result_2) jessie_17) jessie_14)))))) in
         void);
        (return := !j);
        (raise Return)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let test_ensures_default =
 fun (tt : unit) ->
  { (JC_67: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let _U_fields_u_20 = ref (any_memory void) in
     (let _U_u_20_tag_table = ref (any_tag_table void) in
     (let _U_u_20_alloc_table = ref (any_alloc_table void) in
     (let u = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_159:
     begin
       (let jessie_369 = (u := (C_158:
                               (JC_75:
                               ((alloc_root__U (1)) _U_u_20_alloc_table)))) in
       void);
      (C_163:
      begin
        (let jessie_377 = (let jessie_371 = (safe_int32_of_integer_ (1)) in
                          (let jessie_372 = (C_160: !u) in
                          (let jessie_373 = ((((replace_bytes ((safe_acc_ !_U_fields_u_20) 
                                                               (C_160:
                                                               jessie_372))) (4)) (4)) 
                                             (bitvector_of_int32 jessie_371)) in
                          (let jessie_376 = (C_160: jessie_372) in
                          (((safe_upd_ _U_fields_u_20) jessie_376) jessie_373))))) in
        void);
       (C_167:
       begin
         (let jessie_385 = (let jessie_379 = (safe_int8_of_integer_ (2)) in
                           (let jessie_380 = (C_164: !u) in
                           (let jessie_381 = ((((replace_bytes ((safe_acc_ !_U_fields_u_20) 
                                                                (C_164:
                                                                jessie_380))) (0)) (1)) 
                                              (bitvector_of_int8 jessie_379)) in
                           (let jessie_384 = (C_164: jessie_380) in
                           (((safe_upd_ _U_fields_u_20) jessie_384) jessie_381))))) in
         void);
        (assert
        { (JC_76:
          eq_int(integer_of_int8(int8_of_bitvector(extract_bytes(select(_U_fields_u_20,
                                                                 u),
                                                   (0), (1)))),
          (2))) };
        void);
        void;
        (C_172:
        begin
          (let jessie_387 = (__retres := (C_171:
                                         (int32_of_bitvector (((extract_bytes 
                                                                ((safe_acc_ !_U_fields_u_20) 
                                                                 (C_169:
                                                                 !u))) (4)) (4))))) in
          void);
         (C_173:
         begin
           ((safe_free_parameter _U_u_20_alloc_table) !u);
          (return := !__retres);
          (raise Return)
         end)
        end)
       end)
      end)
     end))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_68: eq_int(integer_of_int32(result), (1))) }

let test_safety =
 fun (tt : unit) ->
  { (JC_67: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let _U_fields_u_20 = ref (any_memory void) in
     (let _U_u_20_tag_table = ref (any_tag_table void) in
     (let _U_u_20_alloc_table = ref (any_alloc_table void) in
     (let u = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_159:
     begin
       (let jessie_348 = (u := (let jessie_347 = (C_158:
                                                 (JC_72:
                                                 ((alloc_root__U_requires (1)) _U_u_20_alloc_table))) in
                               (JC_73:
                               (assert
                               { ge_int(offset_max(_U_u_20_alloc_table,
                                        jessie_347),
                                 (0)) };
                               jessie_347)))) in
       void);
      (C_163:
      begin
        (let jessie_356 = (let jessie_350 = (safe_int32_of_integer_ (1)) in
                          (let jessie_351 = (C_160: !u) in
                          (let jessie_352 = ((((replace_bytes ((safe_acc_ !_U_fields_u_20) 
                                                               (C_160:
                                                               jessie_351))) (4)) (4)) 
                                             (bitvector_of_int32 jessie_350)) in
                          (let jessie_355 = (C_160: jessie_351) in
                          (((safe_upd_ _U_fields_u_20) jessie_355) jessie_352))))) in
        void);
       (C_167:
       begin
         (let jessie_364 = (let jessie_358 = (safe_int8_of_integer_ (2)) in
                           (let jessie_359 = (C_164: !u) in
                           (let jessie_360 = ((((replace_bytes ((safe_acc_ !_U_fields_u_20) 
                                                                (C_164:
                                                                jessie_359))) (0)) (1)) 
                                              (bitvector_of_int8 jessie_358)) in
                           (let jessie_363 = (C_164: jessie_359) in
                           (((safe_upd_ _U_fields_u_20) jessie_363) jessie_360))))) in
         void);
        [ { } unit reads _U_fields_u_20
          { (JC_74:
            eq_int(integer_of_int8(int8_of_bitvector(extract_bytes(select(_U_fields_u_20,
                                                                   u),
                                                     (0), (1)))),
            (2))) } ];
        void;
        (C_172:
        begin
          (let jessie_366 = (__retres := (C_171:
                                         (int32_of_bitvector (((extract_bytes 
                                                                ((safe_acc_ !_U_fields_u_20) 
                                                                 (C_169:
                                                                 !u))) (4)) (4))))) in
          void);
         (C_173:
         begin
           ((free_parameter _U_u_20_alloc_table) !u);
          (return := !__retres);
          (raise Return)
         end)
        end)
       end)
      end)
     end))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C union.jessie --quiet -f union.makefile project
why --project [...] why/union.why
<project name="union" context="why/union_ctx.why">
  <function name="Function test">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/union_po52.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "46" begin = "4" end = "5"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/union_po53.why">
      <location file = "why/union.why" line = "2684" begin = "33" end = "162"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/union_po54.why">
      <location file = "why/union.why" line = "2728" begin = "12" end = "51"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/union_po50.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "49" begin = "13" end = "24"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/union_po51.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "44" begin = "12" end = "24"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function endianness3">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/union_po11.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "32" begin = "2" end = "9"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/union_po12.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "33" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po13.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "33" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po14.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "185" begin = "16" end = "136"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po15.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "185" begin = "16" end = "136"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po16.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "185" begin = "16" end = "136"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po17.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "185" begin = "16" end = "136"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po18.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "34" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po19.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "34" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po20.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "187" begin = "16" end = "136"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po21.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "187" begin = "16" end = "136"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po22.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "187" begin = "16" end = "136"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po23.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "187" begin = "16" end = "136"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po24.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "35" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po25.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "35" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po26.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "189" begin = "16" end = "132"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po27.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "189" begin = "16" end = "132"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po28.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "189" begin = "16" end = "132"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po29.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "189" begin = "16" end = "132"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po30.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "36" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po31.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "36" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po32.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "191" begin = "16" end = "132"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po33.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "191" begin = "16" end = "132"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po34.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "191" begin = "16" end = "132"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po35.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "191" begin = "16" end = "132"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/union_po10.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "29" begin = "12" end = "30"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function endianness2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/union_po2.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "19" begin = "28" end = "29"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/union_po3.why">
      <location file = "why/union.why" line = "1972" begin = "34" end = "172"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/union_po4.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "20" begin = "10" end = "11"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/union_po5.why">
      <location file = "why/union.why" line = "1984" begin = "35" end = "175"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/union_po6.why">
      <location file = "PPCHOME/tests/jessie/" line = "0" begin = "-1" end = "-1"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/union_po7.why">
      <location file = "why/union.why" line = "1996" begin = "42" end = "198"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/union_po8.why">
      <location file = "why/union.why" line = "2239" begin = "20" end = "69"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/union_po9.why">
      <location file = "why/union.why" line = "2242" begin = "21" end = "70"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/union_po1.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "18" begin = "12" end = "28"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function endianness">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/union_po37.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "9" begin = "2" end = "10"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/union_po38.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "10" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po39.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "10" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po40.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "113" begin = "14" end = "170"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po41.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "113" begin = "14" end = "170"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po42.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "113" begin = "14" end = "170"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po43.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "113" begin = "14" end = "170"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po44.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "11" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po45.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "11" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po46.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "115" begin = "15" end = "238"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po47.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "115" begin = "15" end = "238"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po48.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "115" begin = "15" end = "238"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/union_po49.why">
      <location file = "PPCHOME/tests/jessie/union.jessie/union.jc" line = "115" begin = "15" end = "238"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/union_po36.why">
      <location file = "PPCHOME/tests/jessie/union.c" line = "6" begin = "12" end = "30"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type mode =
  | nearest_even
  | to_zero
  | up
  | down
  | nearest_away

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

logic single_to_double : mode, single -> double

logic double_to_single : mode, double -> single

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom double_to_single_val:
  (forall m:mode.
    (forall s:single. (double_value(single_to_double(m,
      s)) = single_value(s))))

axiom single_to_double_val:
  (forall m:mode.
    (forall d:double. (single_value(double_to_single(m, d)) = round_single(m,
      double_value(d)))))

predicate single_of_real_post(m: mode, x: real, res: single) =
  ((single_value(res) = round_single(m, x)) and
   ((single_exact(res) = x) and (single_model(res) = x)))

predicate add_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) + single_value(y)))) and
   ((single_exact(res) = (single_exact(x) + single_exact(y))) and
    (single_model(res) = (single_model(x) + single_model(y)))))

predicate sub_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) - single_value(y)))) and
   ((single_exact(res) = (single_exact(x) - single_exact(y))) and
    (single_model(res) = (single_model(x) - single_model(y)))))

predicate mul_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) * single_value(y)))) and
   ((single_exact(res) = (single_exact(x) * single_exact(y))) and
    (single_model(res) = (single_model(x) * single_model(y)))))

predicate div_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) / single_value(y)))) and
   ((single_exact(res) = (single_exact(x) / single_exact(y))) and
    (single_model(res) = (single_model(x) / single_model(y)))))

predicate sqrt_single_post(m: mode, x: single, res: single) =
  ((single_value(res) = round_single(m, sqrt_real(single_value(x)))) and
   ((single_exact(res) = sqrt_real(single_exact(x))) and
    (single_model(res) = sqrt_real(single_model(x)))))

predicate neg_single_post(x: single, res: single) =
  ((single_value(res) = (-single_value(x))) and
   ((single_exact(res) = (-single_exact(x))) and
    (single_model(res) = (-single_model(x)))))

predicate abs_single_post(x: single, res: single) =
  ((single_value(res) = abs_real(single_value(x))) and
   ((single_exact(res) = abs_real(single_exact(x))) and
    (single_model(res) = abs_real(single_model(x)))))

predicate double_of_real_post(m: mode, x: real, res: double) =
  ((double_value(res) = round_double(m, x)) and
   ((double_exact(res) = x) and (double_model(res) = x)))

predicate add_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) + double_value(y)))) and
   ((double_exact(res) = (double_exact(x) + double_exact(y))) and
    (double_model(res) = (double_model(x) + double_model(y)))))

predicate sub_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) - double_value(y)))) and
   ((double_exact(res) = (double_exact(x) - double_exact(y))) and
    (double_model(res) = (double_model(x) - double_model(y)))))

predicate mul_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) * double_value(y)))) and
   ((double_exact(res) = (double_exact(x) * double_exact(y))) and
    (double_model(res) = (double_model(x) * double_model(y)))))

predicate div_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) / double_value(y)))) and
   ((double_exact(res) = (double_exact(x) / double_exact(y))) and
    (double_model(res) = (double_model(x) / double_model(y)))))

predicate sqrt_double_post(m: mode, x: double, res: double) =
  ((double_value(res) = round_double(m, sqrt_real(double_value(x)))) and
   ((double_exact(res) = sqrt_real(double_exact(x))) and
    (double_model(res) = sqrt_real(double_model(x)))))

predicate neg_double_post(x: double, res: double) =
  ((double_value(res) = (-double_value(x))) and
   ((double_exact(res) = (-double_exact(x))) and
    (double_model(res) = (-double_model(x)))))

predicate abs_double_post(x: double, res: double) =
  ((double_value(res) = abs_real(double_value(x))) and
   ((double_exact(res) = abs_real(double_exact(x))) and
    (double_model(res) = abs_real(double_model(x)))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

logic integer_of_bitvector : bitvector -> int

logic bitvector_of_integer : int -> bitvector

logic real_of_bitvector : bitvector -> real

type _Decomp

type _Decomp2

type _Integer

type _Integer2

type _S1

type _S2

type _U

type char_P

type int16

type int32

type int8

type padding

type void_P

logic _Decomp2_tag : _Decomp2 tag_id

axiom _Decomp2_int: (int_of_tag(_Decomp2_tag) = 1)

logic _Decomp2_of_bitvector : bitvector -> _Decomp2 pointer

logic bitvector_of__Decomp2 : _Decomp2 pointer -> bitvector

axiom _Decomp2_of_bitvector_of_bitvector_of__Decomp2:
  (forall x:_Decomp2 pointer.
    (_Decomp2_of_bitvector(bitvector_of__Decomp2(x)) = x))

logic _Decomp2_of_pointer_address : unit pointer -> _Decomp2 pointer

axiom _Decomp2_of_pointer_address_of_pointer_addr:
  (forall p:_Decomp2 pointer.
    (p = _Decomp2_of_pointer_address(pointer_address(p))))

axiom _Decomp2_parenttag_bottom: parenttag(_Decomp2_tag, bottom_tag)

axiom _Decomp2_tags:
  (forall x:_Decomp2 pointer.
    (forall _Decomp2_tag_table:_Decomp2 tag_table.
      instanceof(_Decomp2_tag_table, x, _Decomp2_tag)))

logic _Decomp_tag : _Decomp tag_id

axiom _Decomp_int: (int_of_tag(_Decomp_tag) = 1)

logic _Decomp_of_bitvector : bitvector -> _Decomp pointer

logic bitvector_of__Decomp : _Decomp pointer -> bitvector

axiom _Decomp_of_bitvector_of_bitvector_of__Decomp:
  (forall x:_Decomp pointer.
    (_Decomp_of_bitvector(bitvector_of__Decomp(x)) = x))

logic _Decomp_of_pointer_address : unit pointer -> _Decomp pointer

axiom _Decomp_of_pointer_address_of_pointer_addr:
  (forall p:_Decomp pointer.
    (p = _Decomp_of_pointer_address(pointer_address(p))))

axiom _Decomp_parenttag_bottom: parenttag(_Decomp_tag, bottom_tag)

axiom _Decomp_tags:
  (forall x:_Decomp pointer.
    (forall _Decomp_tag_table:_Decomp tag_table.
      instanceof(_Decomp_tag_table, x, _Decomp_tag)))

logic _Integer2_tag : _Integer2 tag_id

axiom _Integer2_int: (int_of_tag(_Integer2_tag) = 1)

logic _Integer2_of_bitvector : bitvector -> _Integer2 pointer

logic bitvector_of__Integer2 : _Integer2 pointer -> bitvector

axiom _Integer2_of_bitvector_of_bitvector_of__Integer2:
  (forall x:_Integer2 pointer.
    (_Integer2_of_bitvector(bitvector_of__Integer2(x)) = x))

logic _Integer2_of_pointer_address : unit pointer -> _Integer2 pointer

axiom _Integer2_of_pointer_address_of_pointer_addr:
  (forall p:_Integer2 pointer.
    (p = _Integer2_of_pointer_address(pointer_address(p))))

axiom _Integer2_parenttag_bottom: parenttag(_Integer2_tag, bottom_tag)

logic xP_tag : _Integer2 tag_id

logic cP_tag : _Integer2 tag_id

axiom _Integer2_tags:
  (forall x:_Integer2 pointer.
    (forall _Integer2_tag_table:_Integer2 tag_table.
      (instanceof(_Integer2_tag_table, x, _Integer2_tag) or
       (instanceof(_Integer2_tag_table, x, xP_tag) or
        instanceof(_Integer2_tag_table, x, cP_tag)))))

logic _Integer_tag : _Integer tag_id

axiom _Integer_int: (int_of_tag(_Integer_tag) = 1)

logic _Integer_of_bitvector : bitvector -> _Integer pointer

logic bitvector_of__Integer : _Integer pointer -> bitvector

axiom _Integer_of_bitvector_of_bitvector_of__Integer:
  (forall x:_Integer pointer.
    (_Integer_of_bitvector(bitvector_of__Integer(x)) = x))

logic _Integer_of_pointer_address : unit pointer -> _Integer pointer

axiom _Integer_of_pointer_address_of_pointer_addr:
  (forall p:_Integer pointer.
    (p = _Integer_of_pointer_address(pointer_address(p))))

axiom _Integer_parenttag_bottom: parenttag(_Integer_tag, bottom_tag)

logic x_0P_tag : _Integer tag_id

logic c_0P_tag : _Integer tag_id

axiom _Integer_tags:
  (forall x:_Integer pointer.
    (forall _Integer_tag_table:_Integer tag_table.
      (instanceof(_Integer_tag_table, x, _Integer_tag) or
       (instanceof(_Integer_tag_table, x, x_0P_tag) or
        instanceof(_Integer_tag_table, x, c_0P_tag)))))

logic _S1_tag : _S1 tag_id

axiom _S1_int: (int_of_tag(_S1_tag) = 1)

logic _S1_of_bitvector : bitvector -> _S1 pointer

logic bitvector_of__S1 : _S1 pointer -> bitvector

axiom _S1_of_bitvector_of_bitvector_of__S1:
  (forall x:_S1 pointer. (_S1_of_bitvector(bitvector_of__S1(x)) = x))

logic _S1_of_pointer_address : unit pointer -> _S1 pointer

axiom _S1_of_pointer_address_of_pointer_addr:
  (forall p:_S1 pointer. (p = _S1_of_pointer_address(pointer_address(p))))

axiom _S1_parenttag_bottom: parenttag(_S1_tag, bottom_tag)

axiom _S1_tags:
  (forall x:_S1 pointer.
    (forall _S1_tag_table:_S1 tag_table. instanceof(_S1_tag_table, x,
      _S1_tag)))

logic _S2_tag : _S2 tag_id

axiom _S2_int: (int_of_tag(_S2_tag) = 1)

logic _S2_of_bitvector : bitvector -> _S2 pointer

logic bitvector_of__S2 : _S2 pointer -> bitvector

axiom _S2_of_bitvector_of_bitvector_of__S2:
  (forall x:_S2 pointer. (_S2_of_bitvector(bitvector_of__S2(x)) = x))

logic _S2_of_pointer_address : unit pointer -> _S2 pointer

axiom _S2_of_pointer_address_of_pointer_addr:
  (forall p:_S2 pointer. (p = _S2_of_pointer_address(pointer_address(p))))

axiom _S2_parenttag_bottom: parenttag(_S2_tag, bottom_tag)

axiom _S2_tags:
  (forall x:_S2 pointer.
    (forall _S2_tag_table:_S2 tag_table. instanceof(_S2_tag_table, x,
      _S2_tag)))

logic _U_tag : _U tag_id

axiom _U_int: (int_of_tag(_U_tag) = 1)

logic _U_of_bitvector : bitvector -> _U pointer

logic bitvector_of__U : _U pointer -> bitvector

axiom _U_of_bitvector_of_bitvector_of__U:
  (forall x:_U pointer. (_U_of_bitvector(bitvector_of__U(x)) = x))

logic _U_of_pointer_address : unit pointer -> _U pointer

axiom _U_of_pointer_address_of_pointer_addr:
  (forall p:_U pointer. (p = _U_of_pointer_address(pointer_address(p))))

axiom _U_parenttag_bottom: parenttag(_U_tag, bottom_tag)

logic s1P_tag : _U tag_id

logic s2P_tag : _U tag_id

axiom _U_tags:
  (forall x:_U pointer.
    (forall _U_tag_table:_U tag_table.
      (instanceof(_U_tag_table, x, _U_tag) or
       (instanceof(_U_tag_table, x, s1P_tag) or instanceof(_U_tag_table, x,
        s2P_tag)))))

axiom bitvector_of__Decomp2_of__Decomp2_of_bitvector:
  (forall x:bitvector. (bitvector_of__Decomp2(_Decomp2_of_bitvector(x)) = x))

axiom bitvector_of__Decomp_of__Decomp_of_bitvector:
  (forall x:bitvector. (bitvector_of__Decomp(_Decomp_of_bitvector(x)) = x))

axiom bitvector_of__Integer2_of__Integer2_of_bitvector:
  (forall x:bitvector.
    (bitvector_of__Integer2(_Integer2_of_bitvector(x)) = x))

axiom bitvector_of__Integer_of__Integer_of_bitvector:
  (forall x:bitvector. (bitvector_of__Integer(_Integer_of_bitvector(x)) = x))

axiom bitvector_of__S1_of__S1_of_bitvector:
  (forall x:bitvector. (bitvector_of__S1(_S1_of_bitvector(x)) = x))

axiom bitvector_of__S2_of__S2_of_bitvector:
  (forall x:bitvector. (bitvector_of__S2(_S2_of_bitvector(x)) = x))

axiom bitvector_of__U_of__U_of_bitvector:
  (forall x:bitvector. (bitvector_of__U(_U_of_bitvector(x)) = x))

logic bitvector_of_cM : _Decomp2 pointer -> bitvector

logic bitvector_of_c_0M : _Decomp pointer -> bitvector

logic bitvector_of_char_P : char_P pointer -> bitvector

logic char_P_of_bitvector : bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector:
  (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_int16 : int16 -> bitvector

logic int16_of_bitvector : bitvector -> int16

axiom bitvector_of_int16_of_int16_of_bitvector:
  (forall x:bitvector. (bitvector_of_int16(int16_of_bitvector(x)) = x))

logic bitvector_of_int32 : int32 -> bitvector

logic int32_of_bitvector : bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector:
  (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_int8 : int8 -> bitvector

logic int8_of_bitvector : bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector:
  (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_s1M : _S1 pointer -> bitvector

logic bitvector_of_s2M : _S2 pointer -> bitvector

logic bitvector_of_void_P : void_P pointer -> bitvector

logic void_P_of_bitvector : bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector:
  (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic bitvector_of_xM : int16 -> bitvector

logic bitvector_of_x_0M : int32 -> bitvector

logic cM_of_bitvector : bitvector -> _Decomp2 pointer

axiom cM_of_bitvector_of_bitvector_of_cM:
  (forall x:_Decomp2 pointer. (cM_of_bitvector(bitvector_of_cM(x)) = x))

axiom cP_int: (int_of_tag(cP_tag) = 3)

axiom cP_parenttag_bottom: parenttag(cP_tag, bottom_tag)

logic c_0M_of_bitvector : bitvector -> _Decomp pointer

axiom c_0M_of_bitvector_of_bitvector_of_c_0M:
  (forall x:_Decomp pointer. (c_0M_of_bitvector(bitvector_of_c_0M(x)) = x))

axiom c_0P_int: (int_of_tag(c_0P_tag) = 3)

axiom c_0P_parenttag_bottom: parenttag(c_0P_tag, bottom_tag)

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

axiom char_P_of_bitvector_of_bitvector_of_char_P:
  (forall x:char_P pointer.
    (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic integer_of_int16 : int16 -> int

predicate eq_int16(x: int16, y: int16) =
  (integer_of_int16(x) = integer_of_int16(y))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int16_of_integer : int -> int16

axiom int16_coerce:
  (forall x:int.
    ((((-32768) <= x) and (x <= 32767)) ->
     (integer_of_int16(int16_of_integer(x)) = x)))

axiom int16_of_bitvector_of_bitvector_of_int16:
  (forall x:int16. eq_int16(int16_of_bitvector(bitvector_of_int16(x)), x))

axiom int16_range:
  (forall x:int16.
    (((-32768) <= integer_of_int16(x)) and (integer_of_int16(x) <= 32767)))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_of_bitvector_of_bitvector_of_int32:
  (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_of_bitvector_of_bitvector_of_int8:
  (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_root__Integer(p: _Integer pointer, a: int,
  _Integer_alloc_table: _Integer alloc_table) =
  (offset_min(_Integer_alloc_table, p) <= a)

predicate left_valid_root__Integer2(p: _Integer2 pointer, a: int,
  _Integer2_alloc_table: _Integer2 alloc_table) =
  (offset_min(_Integer2_alloc_table, p) <= a)

predicate left_valid_root__U(p: _U pointer, a: int,
  _U_alloc_table: _U alloc_table) = (offset_min(_U_alloc_table, p) <= a)

predicate left_valid_struct__Decomp(p: _Decomp pointer, a: int,
  _Decomp_alloc_table: _Decomp alloc_table) =
  (offset_min(_Decomp_alloc_table, p) <= a)

predicate left_valid_struct__Decomp2(p: _Decomp2 pointer, a: int,
  _Decomp2_alloc_table: _Decomp2 alloc_table) =
  (offset_min(_Decomp2_alloc_table, p) <= a)

predicate left_valid_struct__S1(p: _S1 pointer, a: int,
  _S1_alloc_table: _S1 alloc_table) = (offset_min(_S1_alloc_table, p) <= a)

predicate left_valid_struct__S2(p: _S2 pointer, a: int,
  _S2_alloc_table: _S2 alloc_table) = (offset_min(_S2_alloc_table, p) <= a)

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of__Decomp2_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(_Decomp2_of_pointer_address(p))))

axiom pointer_addr_of__Decomp_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(_Decomp_of_pointer_address(p))))

axiom pointer_addr_of__Integer2_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(_Integer2_of_pointer_address(p))))

axiom pointer_addr_of__Integer_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(_Integer_of_pointer_address(p))))

axiom pointer_addr_of__S1_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(_S1_of_pointer_address(p))))

axiom pointer_addr_of__S2_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(_S2_of_pointer_address(p))))

axiom pointer_addr_of__U_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(_U_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_root__Integer(p: _Integer pointer, b: int,
  _Integer_alloc_table: _Integer alloc_table) =
  (offset_max(_Integer_alloc_table, p) >= b)

predicate right_valid_root__Integer2(p: _Integer2 pointer, b: int,
  _Integer2_alloc_table: _Integer2 alloc_table) =
  (offset_max(_Integer2_alloc_table, p) >= b)

predicate right_valid_root__U(p: _U pointer, b: int,
  _U_alloc_table: _U alloc_table) = (offset_max(_U_alloc_table, p) >= b)

predicate right_valid_struct__Decomp(p: _Decomp pointer, b: int,
  _Decomp_alloc_table: _Decomp alloc_table) =
  (offset_max(_Decomp_alloc_table, p) >= b)

predicate right_valid_struct__Decomp2(p: _Decomp2 pointer, b: int,
  _Decomp2_alloc_table: _Decomp2 alloc_table) =
  (offset_max(_Decomp2_alloc_table, p) >= b)

predicate right_valid_struct__S1(p: _S1 pointer, b: int,
  _S1_alloc_table: _S1 alloc_table) = (offset_max(_S1_alloc_table, p) >= b)

predicate right_valid_struct__S2(p: _S2 pointer, b: int,
  _S2_alloc_table: _S2 alloc_table) = (offset_max(_S2_alloc_table, p) >= b)

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

logic s1M_of_bitvector : bitvector -> _S1 pointer

axiom s1M_of_bitvector_of_bitvector_of_s1M:
  (forall x:_S1 pointer. (s1M_of_bitvector(bitvector_of_s1M(x)) = x))

axiom s1P_int: (int_of_tag(s1P_tag) = 2)

axiom s1P_parenttag_bottom: parenttag(s1P_tag, bottom_tag)

logic s2M_of_bitvector : bitvector -> _S2 pointer

axiom s2M_of_bitvector_of_bitvector_of_s2M:
  (forall x:_S2 pointer. (s2M_of_bitvector(bitvector_of_s2M(x)) = x))

axiom s2P_int: (int_of_tag(s2P_tag) = 3)

axiom s2P_parenttag_bottom: parenttag(s2P_tag, bottom_tag)

predicate strict_valid_root__Decomp(p: _Decomp pointer, a: int, b: int,
  _Decomp_alloc_table: _Decomp alloc_table) =
  ((offset_min(_Decomp_alloc_table, p) = a) and
   (offset_max(_Decomp_alloc_table, p) = b))

predicate strict_valid_root__Decomp2(p: _Decomp2 pointer, a: int, b: int,
  _Decomp2_alloc_table: _Decomp2 alloc_table) =
  ((offset_min(_Decomp2_alloc_table, p) = a) and
   (offset_max(_Decomp2_alloc_table, p) = b))

predicate strict_valid_root__Integer(p: _Integer pointer, a: int, b: int,
  _Integer_alloc_table: _Integer alloc_table) =
  ((offset_min(_Integer_alloc_table, p) = a) and
   (offset_max(_Integer_alloc_table, p) = b))

predicate strict_valid_root__Integer2(p: _Integer2 pointer, a: int, b: int,
  _Integer2_alloc_table: _Integer2 alloc_table) =
  ((offset_min(_Integer2_alloc_table, p) = a) and
   (offset_max(_Integer2_alloc_table, p) = b))

predicate strict_valid_root__S1(p: _S1 pointer, a: int, b: int,
  _S1_alloc_table: _S1 alloc_table) =
  ((offset_min(_S1_alloc_table, p) = a) and (offset_max(_S1_alloc_table,
   p) = b))

predicate strict_valid_root__S2(p: _S2 pointer, a: int, b: int,
  _S2_alloc_table: _S2 alloc_table) =
  ((offset_min(_S2_alloc_table, p) = a) and (offset_max(_S2_alloc_table,
   p) = b))

predicate strict_valid_root__U(p: _U pointer, a: int, b: int,
  _U_alloc_table: _U alloc_table) =
  ((offset_min(_U_alloc_table, p) = a) and (offset_max(_U_alloc_table,
   p) = b))

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct__Decomp(p: _Decomp pointer, a: int, b: int,
  _Decomp_alloc_table: _Decomp alloc_table) =
  ((offset_min(_Decomp_alloc_table, p) = a) and
   (offset_max(_Decomp_alloc_table, p) = b))

predicate strict_valid_struct__Decomp2(p: _Decomp2 pointer, a: int, b: int,
  _Decomp2_alloc_table: _Decomp2 alloc_table) =
  ((offset_min(_Decomp2_alloc_table, p) = a) and
   (offset_max(_Decomp2_alloc_table, p) = b))

predicate strict_valid_struct__S1(p: _S1 pointer, a: int, b: int,
  _S1_alloc_table: _S1 alloc_table) =
  ((offset_min(_S1_alloc_table, p) = a) and (offset_max(_S1_alloc_table,
   p) = b))

predicate strict_valid_struct__S2(p: _S2 pointer, a: int, b: int,
  _S2_alloc_table: _S2 alloc_table) =
  ((offset_min(_S2_alloc_table, p) = a) and (offset_max(_S2_alloc_table,
   p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_root__Integer(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) <= a) and
   (offset_max(bitvector_alloc_table, p) >= b))

predicate valid_bitvector_root__Integer2(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) <= a) and
   (offset_max(bitvector_alloc_table, p) >= b))

predicate valid_bitvector_root__U(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) <= a) and
   (offset_max(bitvector_alloc_table, p) >= b))

predicate valid_bitvector_struct__Decomp(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct__Decomp2(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct__S1(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct__S2(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root__Decomp(p: _Decomp pointer, a: int, b: int,
  _Decomp_alloc_table: _Decomp alloc_table) =
  ((offset_min(_Decomp_alloc_table, p) <= a) and
   (offset_max(_Decomp_alloc_table, p) >= b))

predicate valid_root__Decomp2(p: _Decomp2 pointer, a: int, b: int,
  _Decomp2_alloc_table: _Decomp2 alloc_table) =
  ((offset_min(_Decomp2_alloc_table, p) <= a) and
   (offset_max(_Decomp2_alloc_table, p) >= b))

predicate valid_root__Integer(p: _Integer pointer, a: int, b: int,
  _Integer_alloc_table: _Integer alloc_table) =
  ((offset_min(_Integer_alloc_table, p) <= a) and
   (offset_max(_Integer_alloc_table, p) >= b))

predicate valid_root__Integer2(p: _Integer2 pointer, a: int, b: int,
  _Integer2_alloc_table: _Integer2 alloc_table) =
  ((offset_min(_Integer2_alloc_table, p) <= a) and
   (offset_max(_Integer2_alloc_table, p) >= b))

predicate valid_root__S1(p: _S1 pointer, a: int, b: int,
  _S1_alloc_table: _S1 alloc_table) =
  ((offset_min(_S1_alloc_table, p) <= a) and (offset_max(_S1_alloc_table,
   p) >= b))

predicate valid_root__S2(p: _S2 pointer, a: int, b: int,
  _S2_alloc_table: _S2 alloc_table) =
  ((offset_min(_S2_alloc_table, p) <= a) and (offset_max(_S2_alloc_table,
   p) >= b))

predicate valid_root__U(p: _U pointer, a: int, b: int,
  _U_alloc_table: _U alloc_table) =
  ((offset_min(_U_alloc_table, p) <= a) and (offset_max(_U_alloc_table,
   p) >= b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct__Decomp(p: _Decomp pointer, a: int, b: int,
  _Decomp_alloc_table: _Decomp alloc_table) =
  ((offset_min(_Decomp_alloc_table, p) <= a) and
   (offset_max(_Decomp_alloc_table, p) >= b))

predicate valid_struct__Decomp2(p: _Decomp2 pointer, a: int, b: int,
  _Decomp2_alloc_table: _Decomp2 alloc_table) =
  ((offset_min(_Decomp2_alloc_table, p) <= a) and
   (offset_max(_Decomp2_alloc_table, p) >= b))

predicate valid_struct__S1(p: _S1 pointer, a: int, b: int,
  _S1_alloc_table: _S1 alloc_table) =
  ((offset_min(_S1_alloc_table, p) <= a) and (offset_max(_S1_alloc_table,
   p) >= b))

predicate valid_struct__S2(p: _S2 pointer, a: int, b: int,
  _S2_alloc_table: _S2 alloc_table) =
  ((offset_min(_S2_alloc_table, p) <= a) and (offset_max(_S2_alloc_table,
   p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_bitvector_of_bitvector_of_void_P:
  (forall x:void_P pointer.
    (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

logic xM_of_bitvector : bitvector -> int16

axiom xM_of_bitvector_of_bitvector_of_xM:
  (forall x:int16. eq_int16(xM_of_bitvector(bitvector_of_xM(x)), x))

axiom xP_int: (int_of_tag(xP_tag) = 2)

axiom xP_parenttag_bottom: parenttag(xP_tag, bottom_tag)

logic x_0M_of_bitvector : bitvector -> int32

axiom x_0M_of_bitvector_of_bitvector_of_x_0M:
  (forall x:int32. eq_int32(x_0M_of_bitvector(bitvector_of_x_0M(x)), x))

axiom x_0P_int: (int_of_tag(x_0P_tag) = 2)

axiom x_0P_parenttag_bottom: parenttag(x_0P_tag, bottom_tag)

