Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only bts0038.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD bts0038.c"
bts0038.c:29:[kernel] warning: Body of function main falls-through. Adding a return statement
[jessie] Starting Jessie translation
[kernel] No code for function printf, default assigns generated
bts0038.c:29:[jessie] warning: skipping all arguments of implicit prototype printf
[jessie] Producing Jessie files in subdir bts0038.jessie
[jessie] File bts0038.jessie/bts0038.jc written.
[jessie] File bts0038.jessie/bts0038.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag int_P = {
  int32 int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

char_P[0..3] __string__d_;

invariant valid___string__d_ :
((\offset_min(__string__d_) <= 0) && (\offset_max(__string__d_) >= 3))

unit Copy(int_P[..] p, int_P[..] q)
behavior default:
  assumes true;
  ensures (C_4 : true);
{  
   {  (C_3 : ((C_2 : q.int_M) = (C_1 : p.int_M)));
      
      (return ())
   }
}

int32 foo(int_P[..] a)
behavior default:
  assumes true;
  ensures (C_9 : true);
{  
   (var int32 i);
   
   {  (C_5 : (i = 1));
      (C_8 : Copy((C_6 : (a + 0)), (C_7 : (a + i))));
      
      (return i)
   }
}

int32 printf()
behavior default:
  assumes true;
  assigns \nothing;
  ensures (C_10 : true);
;

int32 main()
behavior default:
  assumes true;
  ensures (C_22 : true);
{  
   (var int_P[0..1] a_0);
   
   (var int32 tmp);
   
   (var int32 __retres);
   
   {  (C_12 : (a_0 = (C_11 : (new int_P[2]))));
      (C_14 : ((C_13 : (a_0 + 0).int_M) = 1));
      (C_16 : ((C_15 : (a_0 + 1).int_M) = 2));
      (C_18 : (tmp = (C_17 : foo(a_0))));
      (C_19 : printf());
      (C_20 : (__retres = 0));
      
      {  (C_21 : (free(a_0)));
         
         (return __retres)
      }
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs bts0038.jessie/bts0038.cloc bts0038.jessie/bts0038.jc
type __string__d__1

type char_P

type int32

type int8

type int_P

type padding

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic __string__d_:  -> char_P pointer

logic bitvector_of_char_P: char_P pointer -> bitvector

logic char_P_of_bitvector: bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_int32: int32 -> bitvector

logic int32_of_bitvector: bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector :
 (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_int8: int8 -> bitvector

logic int8_of_bitvector: bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector :
 (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_int_P: int_P pointer -> bitvector

logic int_P_of_bitvector: bitvector -> int_P pointer

axiom bitvector_of_int_P_of_int_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_int_P(int_P_of_bitvector(x)) = x))

logic bitvector_of_void_P: void_P pointer -> bitvector

logic void_P_of_bitvector: bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_of_bitvector_of_bitvector_of_char_P :
 (forall x:char_P pointer. (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_of_bitvector_of_bitvector_of_int32 :
 (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_of_bitvector_of_bitvector_of_int8 :
 (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_of_bitvector_of_bitvector_of_int_P :
 (forall x:int_P pointer. (int_P_of_bitvector(bitvector_of_int_P(x)) = x))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_int_P(p:int_P pointer,
 a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_int_P(p:int_P pointer,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid___string__d_(char_P___string__d__1_alloc_table:char_P alloc_table) =
 (le_int(offset_min(char_P___string__d__1_alloc_table, __string__d_), (0))
 and ge_int(offset_max(char_P___string__d__1_alloc_table, __string__d_), (3)))

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_bitvector_of_bitvector_of_void_P :
 (forall x:void_P pointer. (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter char_P___string__d__1_alloc_table : char_P alloc_table ref

parameter Copy :
 p:int_P pointer ->
  q:int_P pointer ->
   int_P_int_M_q_3:(int_P, int32) memory ref ->
    int_P_q_3_alloc_table:int_P alloc_table ->
     int_P_p_2_alloc_table:int_P alloc_table ->
      int_P_int_M_p_2:(int_P, int32) memory ->
       { } unit reads char_P___string__d__1_alloc_table
       writes int_P_int_M_q_3
       { (JC_12: valid___string__d_(char_P___string__d__1_alloc_table)) }

parameter Copy_requires :
 p:int_P pointer ->
  q:int_P pointer ->
   int_P_int_M_q_3:(int_P, int32) memory ref ->
    int_P_q_3_alloc_table:int_P alloc_table ->
     int_P_p_2_alloc_table:int_P alloc_table ->
      int_P_int_M_p_2:(int_P, int32) memory ->
       { (JC_5: valid___string__d_(char_P___string__d__1_alloc_table))} unit
       reads char_P___string__d__1_alloc_table writes int_P_int_M_q_3
       { (JC_12: valid___string__d_(char_P___string__d__1_alloc_table)) }

parameter Copy_requires_specialized :
 p:int_P pointer ->
  q:int_P pointer ->
   int_P_int_M_q_3:(int_P, int32) memory ref ->
    int_P_q_3_alloc_table:int_P alloc_table ->
     int_P_p_2_alloc_table:int_P alloc_table ->
      { (JC_5: valid___string__d_(char_P___string__d__1_alloc_table))} unit
      reads char_P___string__d__1_alloc_table writes int_P_int_M_q_3
      { (JC_12: valid___string__d_(char_P___string__d__1_alloc_table)) }

parameter Copy_specialized :
 p:int_P pointer ->
  q:int_P pointer ->
   int_P_int_M_q_3:(int_P, int32) memory ref ->
    int_P_q_3_alloc_table:int_P alloc_table ->
     int_P_p_2_alloc_table:int_P alloc_table ->
      { } unit reads char_P___string__d__1_alloc_table writes int_P_int_M_q_3
      { (JC_12: valid___string__d_(char_P___string__d__1_alloc_table)) }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter foo :
 a:int_P pointer ->
  int_P_int_M_a_4:(int_P, int32) memory ref ->
   int_P_a_4_alloc_table:int_P alloc_table ->
    { } int32 reads char_P___string__d__1_alloc_table,int_P_int_M_a_4
    writes int_P_int_M_a_4
    { (JC_22: valid___string__d_(char_P___string__d__1_alloc_table)) }

parameter foo_requires :
 a:int_P pointer ->
  int_P_int_M_a_4:(int_P, int32) memory ref ->
   int_P_a_4_alloc_table:int_P alloc_table ->
    { (JC_15: valid___string__d_(char_P___string__d__1_alloc_table))} int32
    reads char_P___string__d__1_alloc_table,int_P_int_M_a_4
    writes int_P_int_M_a_4
    { (JC_22: valid___string__d_(char_P___string__d__1_alloc_table)) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter main :
 tt:unit ->
  { } int32 reads char_P___string__d__1_alloc_table
  { (JC_43: valid___string__d_(char_P___string__d__1_alloc_table)) }

parameter main_requires :
 tt:unit ->
  { (JC_36: valid___string__d_(char_P___string__d__1_alloc_table))} int32
  reads char_P___string__d__1_alloc_table
  { (JC_43: valid___string__d_(char_P___string__d__1_alloc_table)) }

parameter printf :
 tt:unit ->
  { } int32 reads char_P___string__d__1_alloc_table
  { (JC_35: valid___string__d_(char_P___string__d__1_alloc_table)) }

parameter printf_requires :
 tt:unit ->
  { (JC_26: valid___string__d_(char_P___string__d__1_alloc_table))} int32
  reads char_P___string__d__1_alloc_table
  { (JC_35: valid___string__d_(char_P___string__d__1_alloc_table)) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let Copy_ensures_default =
 fun (p : int_P pointer) (q : int_P pointer) (int_P_int_M_q_3 : (int_P, int32) memory ref) (int_P_p_2_alloc_table : int_P alloc_table) (int_P_q_3_alloc_table : int_P alloc_table) (int_P_int_M_p_2 : (int_P, int32) memory) ->
  { ((true = true)
    and (JC_7: valid___string__d_(char_P___string__d__1_alloc_table))) }
  (init:
  try
   begin
     (C_3:
     begin
       (let jessie_12 = (let jessie_8 = (C_1:
                                        ((safe_acc_ int_P_int_M_p_2) p)) in
                        (let jessie_11 = q in
                        (((safe_upd_ int_P_int_M_q_3) jessie_11) jessie_8))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_9: true) }

let Copy_safety =
 fun (p : int_P pointer) (q : int_P pointer) (int_P_int_M_q_3 : (int_P, int32) memory ref) (int_P_p_2_alloc_table : int_P alloc_table) (int_P_q_3_alloc_table : int_P alloc_table) (int_P_int_M_p_2 : (int_P, int32) memory) ->
  { (JC_7: valid___string__d_(char_P___string__d__1_alloc_table)) }
  (init:
  try
   begin
     (C_3:
     begin
       (let jessie_6 = (let jessie_2 = (C_1:
                                       (JC_13:
                                       (((acc_ int_P_p_2_alloc_table) int_P_int_M_p_2) p))) in
                       (let jessie_5 = q in
                       (JC_14:
                       ((((upd_ int_P_q_3_alloc_table) int_P_int_M_q_3) jessie_5) jessie_2)))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_11: valid___string__d_(char_P___string__d__1_alloc_table)) }

let foo_ensures_default =
 fun (a : int_P pointer) (int_P_int_M_a_4 : (int_P, int32) memory ref) (int_P_a_4_alloc_table : int_P alloc_table) ->
  { ((true = true)
    and (JC_17: valid___string__d_(char_P___string__d__1_alloc_table))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let i = ref (any_int32 void) in
     (C_5:
     begin
       (let jessie_19 = (i := (safe_int32_of_integer_ (1))) in void);
      (C_8:
      begin
        (let jessie_21 = (C_6: ((shift a) (0))) in
        (let jessie_20 = (C_7: ((shift a) (integer_of_int32 !i))) in
        (JC_25:
        (((((Copy_specialized jessie_21) jessie_20) int_P_int_M_a_4) int_P_a_4_alloc_table) int_P_a_4_alloc_table))));
       (return := !i);
       (raise Return)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_19: true) }

let foo_safety =
 fun (a : int_P pointer) (int_P_int_M_a_4 : (int_P, int32) memory ref) (int_P_a_4_alloc_table : int_P alloc_table) ->
  { (JC_17: valid___string__d_(char_P___string__d__1_alloc_table)) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let i = ref (any_int32 void) in
     (C_5:
     begin
       (let jessie_14 = (i := (safe_int32_of_integer_ (1))) in void);
      (C_8:
      begin
        (let jessie_16 = (C_6: ((shift a) (0))) in
        (let jessie_15 = (C_7: ((shift a) (integer_of_int32 !i))) in
        (JC_24:
        (assert
        { pset_disjoint(pset_range(pset_singleton(a), (0), (0)),
          pset_range(pset_singleton(a), i, i)) };
        (JC_23:
        (((((Copy_requires_specialized jessie_16) jessie_15) int_P_int_M_a_4) int_P_a_4_alloc_table) int_P_a_4_alloc_table))))));
       (return := !i);
       (raise Return)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_21: valid___string__d_(char_P___string__d__1_alloc_table)) }

let main_ensures_default =
 fun (tt : unit) ->
  { ((true = true)
    and (JC_38: valid___string__d_(char_P___string__d__1_alloc_table))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_a_0_5 = ref (any_memory void) in
     (let int_P_a_0_5_tag_table = ref (any_tag_table void) in
     (let int_P_a_0_5_alloc_table = ref (any_alloc_table void) in
     (let a_0 = ref (any_pointer void) in
     (let tmp = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     (C_12:
     begin
       (let jessie_45 = (a_0 := (C_11:
                                (JC_48:
                                (((alloc_struct_int_P (2)) int_P_a_0_5_alloc_table) int_P_a_0_5_tag_table)))) in
       void);
      (C_14:
      begin
        (let jessie_51 = (let jessie_47 = (safe_int32_of_integer_ (1)) in
                         (let jessie_50 = ((shift !a_0) (0)) in
                         (((safe_upd_ int_P_int_M_a_0_5) jessie_50) jessie_47))) in
        void);
       (C_16:
       begin
         (let jessie_57 = (let jessie_53 = (safe_int32_of_integer_ (2)) in
                          (let jessie_56 = ((shift !a_0) (1)) in
                          (((safe_upd_ int_P_int_M_a_0_5) jessie_56) jessie_53))) in
         void);
        (C_18:
        begin
          (let jessie_60 = (tmp := (C_17:
                                   (let jessie_59 = !a_0 in
                                   (JC_49:
                                   (((foo jessie_59) int_P_int_M_a_0_5) !int_P_a_0_5_alloc_table))))) in
          void);
         (C_19:
         begin
           (let jessie_61 = (JC_50: (printf void)) in void);
          (C_20:
          begin
            (let jessie_63 = (__retres := (safe_int32_of_integer_ (0))) in
            void);
           (C_21:
           begin
             ((safe_free_parameter int_P_a_0_5_alloc_table) !a_0);
            (return := !__retres);
            (raise Return)
           end)
          end)
         end)
        end)
       end)
      end)
     end)))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_40: true) }

let main_safety =
 fun (tt : unit) ->
  { (JC_38: valid___string__d_(char_P___string__d__1_alloc_table)) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let int_P_int_M_a_0_5 = ref (any_memory void) in
     (let int_P_a_0_5_tag_table = ref (any_tag_table void) in
     (let int_P_a_0_5_alloc_table = ref (any_alloc_table void) in
     (let a_0 = ref (any_pointer void) in
     (let tmp = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     (C_12:
     begin
       (let jessie_24 = (a_0 := (let jessie_23 = (C_11:
                                                 (JC_44:
                                                 (((alloc_struct_int_P_requires (2)) int_P_a_0_5_alloc_table) int_P_a_0_5_tag_table))) in
                                (JC_45:
                                (assert
                                { ge_int(offset_max(int_P_a_0_5_alloc_table,
                                         jessie_23),
                                  (1)) };
                                jessie_23)))) in
       void);
      (C_14:
      begin
        (let jessie_30 = (let jessie_26 = (safe_int32_of_integer_ (1)) in
                         (let jessie_29 = ((shift !a_0) (0)) in
                         (((safe_upd_ int_P_int_M_a_0_5) jessie_29) jessie_26))) in
        void);
       (C_16:
       begin
         (let jessie_36 = (let jessie_32 = (safe_int32_of_integer_ (2)) in
                          (let jessie_35 = ((shift !a_0) (1)) in
                          (((safe_upd_ int_P_int_M_a_0_5) jessie_35) jessie_32))) in
         void);
        (C_18:
        begin
          (let jessie_39 = (tmp := (C_17:
                                   (let jessie_38 = !a_0 in
                                   (JC_46:
                                   (((foo_requires jessie_38) int_P_int_M_a_0_5) !int_P_a_0_5_alloc_table))))) in
          void);
         (C_19:
         begin
           (let jessie_40 = (JC_47: (printf_requires void)) in void);
          (C_20:
          begin
            (let jessie_42 = (__retres := (safe_int32_of_integer_ (0))) in
            void);
           (C_21:
           begin
             ((free_parameter int_P_a_0_5_alloc_table) !a_0);
            (return := !__retres);
            (raise Return)
           end)
          end)
         end)
        end)
       end)
      end)
     end)))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_42: valid___string__d_(char_P___string__d__1_alloc_table)) }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C bts0038.jessie --quiet -f bts0038.makefile project
why --project [...] why/bts0038.why
