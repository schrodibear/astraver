Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -jessie -jessie-gen-only dillon1.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -dD dillon1.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir dillon1.jessie
[jessie] File dillon1.jessie/dillon1.jc written.
[jessie] File dillon1.jessie/dillon1.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

unit f2(intP[..] p)
  requires (C_4 : ((C_5 : (\offset_min(p) <= 0)) &&
                    (C_6 : (\offset_max(p) >= 0))));
behavior default:
  assigns p.intM;
  ensures (C_3 : true);
{  
   {  (C_2 : ((C_1 : p.intM) = 3));
      
      (return ())
   }
}

unit main2()
behavior default:
  assigns \nothing;
  ensures (C_13 : true);
{  
   (var intP[0] c);
   
   {  (C_8 : (c = (C_7 : (new intP[1]))));
      (C_10 : ((C_9 : c.intM) = 2));
      (C_11 : f2(c));
      
      {  (C_12 : (free(c)));
         
         (return ())
      }
   }
}

unit f2b()
behavior default:
  assigns \nothing;
  ensures (C_19 : true);
{  
   (var intP[0..1] t);
   
   {  (C_15 : (t = (C_14 : (new intP[2]))));
      (C_17 : ((C_16 : (t + 0).intM) = 2));
      
      {  (C_18 : (free(t)));
         
         (return ())
      }
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs dillon1.jessie/dillon1.cloc dillon1.jessie/dillon1.jc
type charP

type int32

type int8

type intP

type padding

type uint8

type unsigned_charP

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter f2 :
 p:intP pointer ->
  intP_intM_p_1:(intP, int32) memory ref ->
   intP_p_1_alloc_table:intP alloc_table ->
    { } unit writes intP_intM_p_1
    { (JC_<somenum>:
      not_assigns(intP_p_1_alloc_table, intP_intM_p_1@, intP_intM_p_1,
      pset_singleton(p))) }

parameter f2_requires :
 p:intP pointer ->
  intP_intM_p_1:(intP, int32) memory ref ->
   intP_p_1_alloc_table:intP alloc_table ->
    { (JC_<somenum>:
      ((JC_<somenum>: le_int(offset_min(intP_p_1_alloc_table, p), (0)))
      and (JC_<somenum>: ge_int(offset_max(intP_p_1_alloc_table, p), (0)))))}
    unit writes intP_intM_p_1
    { (JC_<somenum>:
      not_assigns(intP_p_1_alloc_table, intP_intM_p_1@, intP_intM_p_1,
      pset_singleton(p))) }

parameter f2b :
 tt:unit ->
  { } unit
  { (JC_<somenum>:
    not_assigns(intP_t_4_alloc_table@, intP_intM_t_4@, intP_intM_t_4,
    pset_empty)) }

parameter f2b_requires :
 tt:unit ->
  { } unit
  { (JC_<somenum>:
    not_assigns(intP_t_4_alloc_table@, intP_intM_t_4@, intP_intM_t_4,
    pset_empty)) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter main2 :
 tt:unit ->
  { } unit
  { (JC_<somenum>:
    not_assigns(intP_c_2_alloc_table@, intP_intM_c_2@, intP_intM_c_2,
    pset_empty)) }

parameter main2_requires :
 tt:unit ->
  { } unit
  { (JC_<somenum>:
    not_assigns(intP_c_2_alloc_table@, intP_intM_c_2@, intP_intM_c_2,
    pset_empty)) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f2_ensures_default =
 fun (p : intP pointer) (intP_intM_p_1 : (intP, int32) memory ref) (intP_p_1_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(intP_p_1_alloc_table, p), (0)))
    and (JC_<somenum>: ge_int(offset_max(intP_p_1_alloc_table, p), (0))))) }
  (init:
  try
   (C_2:
   begin
     (let jessie_<somenum> = (safe_int32_of_integer_ (3)) in
     (let jessie_<somenum> = p in (((safe_upd_ intP_intM_p_1) jessie_<somenum>) jessie_<somenum>)));
    (raise Return); (raise Return) end) with Return -> void end)
  { (JC_<somenum>:
    not_assigns(intP_p_1_alloc_table, intP_intM_p_1@, intP_intM_p_1,
    pset_singleton(p))) }

let f2_safety =
 fun (p : intP pointer) (intP_intM_p_1 : (intP, int32) memory ref) (intP_p_1_alloc_table : intP alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(intP_p_1_alloc_table, p), (0)))
    and (JC_<somenum>: ge_int(offset_max(intP_p_1_alloc_table, p), (0))))) }
  (init:
  try
   (C_2:
   begin
     (let jessie_<somenum> = (safe_int32_of_integer_ (3)) in
     (let jessie_<somenum> = p in
     (JC_<somenum>:
     ((((upd_ intP_p_1_alloc_table) intP_intM_p_1) jessie_<somenum>) jessie_<somenum>))));
    (raise Return); (raise Return) end) with Return -> void end) { true }

let f2b_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>: true) }
  (init:
  try
   begin
     (let intP_intM_t_4 = ref (any_memory void) in
     (let intP_t_4_tag_table = ref (any_tag_table void) in
     (let intP_t_4_alloc_table = ref (any_alloc_table void) in
     (let t = ref (any_pointer void) in
     (C_15:
     (C_17:
     (C_18:
     begin
       (let jessie_<somenum> =
       (t := (C_14:
             (JC_<somenum>:
             (((alloc_struct_intP (2)) intP_t_4_alloc_table) intP_t_4_tag_table)))) in
       void);
      (let jessie_<somenum> = (safe_int32_of_integer_ (2)) in
      (let jessie_<somenum> = !t in
      (((safe_upd_ intP_intM_t_4) jessie_<somenum>) jessie_<somenum>)));
      ((safe_free_parameter intP_t_4_alloc_table) !t); (raise Return) end)))))));
    (raise Return) end with Return -> void end)
  { (JC_<somenum>:
    not_assigns(intP_t_4_alloc_table@, intP_intM_t_4@, intP_intM_t_4,
    pset_empty)) }

let f2b_safety =
 fun (tt : unit) ->
  { (JC_<somenum>: true) }
  (init:
  try
   begin
     (let intP_intM_t_4 = ref (any_memory void) in
     (let intP_t_4_tag_table = ref (any_tag_table void) in
     (let intP_t_4_alloc_table = ref (any_alloc_table void) in
     (let t = ref (any_pointer void) in
     (C_15:
     (C_17:
     (C_18:
     begin
       (let jessie_<somenum> =
       (t := (let jessie_<somenum> =
             (C_14:
             (JC_<somenum>:
             (((alloc_struct_intP_requires (2)) intP_t_4_alloc_table) intP_t_4_tag_table))) in
             (JC_<somenum>:
             (assert
             { ge_int(offset_max(intP_t_4_alloc_table, jessie_<somenum>), (1)) };
             jessie_<somenum>)))) in void);
      (let jessie_<somenum> = (safe_int32_of_integer_ (2)) in
      (let jessie_<somenum> = !t in
      (((safe_upd_ intP_intM_t_4) jessie_<somenum>) jessie_<somenum>)));
      ((free_parameter intP_t_4_alloc_table) !t); (raise Return) end)))))));
    (raise Return) end with Return -> void end) { true }

let main2_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>: true) }
  (init:
  try
   begin
     (let intP_intM_c_2 = ref (any_memory void) in
     (let intP_c_2_tag_table = ref (any_tag_table void) in
     (let intP_c_2_alloc_table = ref (any_alloc_table void) in
     (let c = ref (any_pointer void) in
     (C_8:
     (C_10:
     (C_11:
     (C_12:
     begin
       (let jessie_<somenum> =
       (c := (C_7:
             (JC_<somenum>:
             (((alloc_struct_intP (1)) intP_c_2_alloc_table) intP_c_2_tag_table)))) in
       void);
      (let jessie_<somenum> = (safe_int32_of_integer_ (2)) in
      (let jessie_<somenum> = !c in
      (((safe_upd_ intP_intM_c_2) jessie_<somenum>) jessie_<somenum>)));
      (let jessie_<somenum> = !c in
      (JC_<somenum>: (((f2 jessie_<somenum>) intP_intM_c_2) !intP_c_2_alloc_table)));
      ((safe_free_parameter intP_c_2_alloc_table) !c); (raise Return) end))))))));
    (raise Return) end with Return -> void end)
  { (JC_<somenum>:
    not_assigns(intP_c_2_alloc_table@, intP_intM_c_2@, intP_intM_c_2,
    pset_empty)) }

let main2_safety =
 fun (tt : unit) ->
  { (JC_<somenum>: true) }
  (init:
  try
   begin
     (let intP_intM_c_2 = ref (any_memory void) in
     (let intP_c_2_tag_table = ref (any_tag_table void) in
     (let intP_c_2_alloc_table = ref (any_alloc_table void) in
     (let c = ref (any_pointer void) in
     (C_8:
     (C_10:
     (C_11:
     (C_12:
     begin
       (let jessie_<somenum> =
       (c := (let jessie_<somenum> =
             (C_7:
             (JC_<somenum>:
             (((alloc_struct_intP_requires (1)) intP_c_2_alloc_table) intP_c_2_tag_table))) in
             (JC_<somenum>:
             (assert
             { ge_int(offset_max(intP_c_2_alloc_table, jessie_<somenum>), (0)) };
             jessie_<somenum>)))) in void);
      (let jessie_<somenum> = (safe_int32_of_integer_ (2)) in
      (let jessie_<somenum> = !c in
      (((safe_upd_ intP_intM_c_2) jessie_<somenum>) jessie_<somenum>)));
      (let jessie_<somenum> = !c in
      (JC_<somenum>:
      (((f2_requires jessie_<somenum>) intP_intM_c_2) !intP_c_2_alloc_table)));
      ((free_parameter intP_c_2_alloc_table) !c); (raise Return) end))))))));
    (raise Return) end with Return -> void end) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C dillon1.jessie --quiet -f dillon1.makefile project
why --project [...] why/dillon1.why
