Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only dillon1.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD dillon1.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir dillon1.jessie
[jessie] File dillon1.jessie/dillon1.jc written.
[jessie] File dillon1.jessie/dillon1.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag int_P = {
  int32 int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

unit f2(int_P[..] p)
  requires (C_4 : ((C_5 : (\offset_min(p) <= 0)) &&
                    (C_6 : (\offset_max(p) >= 0))));
behavior default:
  assigns p.int_M;
  ensures (C_3 : true);
{  
   {  (C_2 : ((C_1 : p.int_M) = 3));
      
      (return ())
   }
}

unit main2()
behavior default:
  assigns \nothing;
  ensures (C_13 : true);
{  
   (var int_P[0] c);
   
   {  (C_8 : (c = (C_7 : (new int_P[1]))));
      (C_10 : ((C_9 : c.int_M) = 2));
      (C_11 : f2(c));
      
      {  (C_12 : (free(c)));
         
         (return ())
      }
   }
}

unit f2b()
behavior default:
  assigns \nothing;
  ensures (C_19 : true);
{  
   (var int_P[0..1] t);
   
   {  (C_15 : (t = (C_14 : (new int_P[2]))));
      (C_17 : ((C_16 : (t + 0).int_M) = 2));
      
      {  (C_18 : (free(t)));
         
         (return ())
      }
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs dillon1.jessie/dillon1.cloc dillon1.jessie/dillon1.jc
type char_P

type int32

type int8

type int_P

type padding

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

predicate left_valid_struct_char_P(p:char_P pointer, a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_int_P(p:int_P pointer, a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer, a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer, b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_int_P(p:int_P pointer, b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer, b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter f2 :
 p:int_P pointer ->
  int_P_int_M_p_1:(int_P, int32) memory ref ->
   int_P_p_1_alloc_table:int_P alloc_table ->
    { } unit writes int_P_int_M_p_1
    { (JC_<somenum>:
      not_assigns(int_P_p_1_alloc_table@, int_P_int_M_p_1@, int_P_int_M_p_1,
      pset_singleton(p@))) }

parameter f2_requires :
 p:int_P pointer ->
  int_P_int_M_p_1:(int_P, int32) memory ref ->
   int_P_p_1_alloc_table:int_P alloc_table ->
    { (JC_<somenum>:
      ((JC_<somenum>: le_int(offset_min(int_P_p_1_alloc_table, p), (0)))
      and (JC_<somenum>: ge_int(offset_max(int_P_p_1_alloc_table, p), (0)))))}
    unit writes int_P_int_M_p_1
    { (JC_<somenum>:
      not_assigns(int_P_p_1_alloc_table@, int_P_int_M_p_1@, int_P_int_M_p_1,
      pset_singleton(p@))) }

parameter f2b :
 tt:unit ->
  { } unit
  { (JC_<somenum>:
    not_assigns(int_P_t_4_alloc_table@, int_P_int_M_t_4@, int_P_int_M_t_4,
    pset_empty)) }

parameter f2b_requires :
 tt:unit ->
  { } unit
  { (JC_<somenum>:
    not_assigns(int_P_t_4_alloc_table@, int_P_int_M_t_4@, int_P_int_M_t_4,
    pset_empty)) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter main2 :
 tt:unit ->
  { } unit
  { (JC_<somenum>:
    not_assigns(int_P_c_2_alloc_table@, int_P_int_M_c_2@, int_P_int_M_c_2,
    pset_empty)) }

parameter main2_requires :
 tt:unit ->
  { } unit
  { (JC_<somenum>:
    not_assigns(int_P_c_2_alloc_table@, int_P_int_M_c_2@, int_P_int_M_c_2,
    pset_empty)) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let f2_ensures_default =
 fun (p : int_P pointer) (int_P_int_M_p_1 : (int_P, int32) memory ref) (int_P_p_1_alloc_table : int_P alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(int_P_p_1_alloc_table, p), (0)))
    and (JC_<somenum>: ge_int(offset_max(int_P_p_1_alloc_table, p), (0))))) }
  (init:
  try
   (C_2:
   begin
     (let jessie_<somenum> = (safe_int32_of_integer_ (3)) in
     (let jessie_<somenum> = p in (((safe_upd_ int_P_int_M_p_1) jessie_<somenum>) jessie_<somenum>)));
    (raise Return); (raise Return) end) with Return -> void end)
  { (JC_<somenum>:
    not_assigns(int_P_p_1_alloc_table@, int_P_int_M_p_1@, int_P_int_M_p_1,
    pset_singleton(p@))) }

let f2_safety =
 fun (p : int_P pointer) (int_P_int_M_p_1 : (int_P, int32) memory ref) (int_P_p_1_alloc_table : int_P alloc_table) ->
  { (JC_<somenum>:
    ((JC_<somenum>: le_int(offset_min(int_P_p_1_alloc_table, p), (0)))
    and (JC_<somenum>: ge_int(offset_max(int_P_p_1_alloc_table, p), (0))))) }
  (init:
  try
   (C_2:
   begin
     (let jessie_<somenum> = (safe_int32_of_integer_ (3)) in
     (let jessie_<somenum> = p in
     (JC_<somenum>:
     ((((upd_ int_P_p_1_alloc_table) int_P_int_M_p_1) jessie_<somenum>) jessie_<somenum>))));
    (raise Return); (raise Return) end) with Return -> void end) { true }

let f2b_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>: true) }
  (init:
  try
   begin
     (let int_P_int_M_t_4 = ref (any_memory void) in
     (let int_P_t_4_tag_table = ref (any_tag_table void) in
     (let int_P_t_4_alloc_table = ref (any_alloc_table void) in
     (let t = ref (any_pointer void) in
     (C_15:
     (C_17:
     (C_18:
     begin
       (let jessie_<somenum> =
       (t := (C_14:
             (JC_<somenum>:
             (((alloc_struct_int_P (2)) int_P_t_4_alloc_table) int_P_t_4_tag_table)))) in
       void);
      (let jessie_<somenum> = (safe_int32_of_integer_ (2)) in
      (let jessie_<somenum> = !t in
      (((safe_upd_ int_P_int_M_t_4) jessie_<somenum>) jessie_<somenum>)));
      ((safe_free_parameter int_P_t_4_alloc_table) !t); (raise Return) end)))))));
    (raise Return) end with Return -> void end)
  { (JC_<somenum>:
    not_assigns(int_P_t_4_alloc_table@, int_P_int_M_t_4@, int_P_int_M_t_4,
    pset_empty)) }

let f2b_safety =
 fun (tt : unit) ->
  { (JC_<somenum>: true) }
  (init:
  try
   begin
     (let int_P_int_M_t_4 = ref (any_memory void) in
     (let int_P_t_4_tag_table = ref (any_tag_table void) in
     (let int_P_t_4_alloc_table = ref (any_alloc_table void) in
     (let t = ref (any_pointer void) in
     (C_15:
     (C_17:
     (C_18:
     begin
       (let jessie_<somenum> =
       (t := (let jessie_<somenum> =
             (C_14:
             (JC_<somenum>:
             (((alloc_struct_int_P_requires (2)) int_P_t_4_alloc_table) int_P_t_4_tag_table))) in
             (JC_<somenum>:
             (assert
             { ge_int(offset_max(int_P_t_4_alloc_table, jessie_<somenum>), (1)) };
             jessie_<somenum>)))) in void);
      (let jessie_<somenum> = (safe_int32_of_integer_ (2)) in
      (let jessie_<somenum> = !t in
      (((safe_upd_ int_P_int_M_t_4) jessie_<somenum>) jessie_<somenum>)));
      ((free_parameter int_P_t_4_alloc_table) !t); (raise Return) end)))))));
    (raise Return) end with Return -> void end) { true }

let main2_ensures_default =
 fun (tt : unit) ->
  { (JC_<somenum>: true) }
  (init:
  try
   begin
     (let int_P_int_M_c_2 = ref (any_memory void) in
     (let int_P_c_2_tag_table = ref (any_tag_table void) in
     (let int_P_c_2_alloc_table = ref (any_alloc_table void) in
     (let c = ref (any_pointer void) in
     (C_8:
     (C_10:
     (C_11:
     (C_12:
     begin
       (let jessie_<somenum> =
       (c := (C_7:
             (JC_<somenum>:
             (((alloc_struct_int_P (1)) int_P_c_2_alloc_table) int_P_c_2_tag_table)))) in
       void);
      (let jessie_<somenum> = (safe_int32_of_integer_ (2)) in
      (let jessie_<somenum> = !c in
      (((safe_upd_ int_P_int_M_c_2) jessie_<somenum>) jessie_<somenum>)));
      (let jessie_<somenum> = !c in
      (JC_<somenum>: (((f2 jessie_<somenum>) int_P_int_M_c_2) !int_P_c_2_alloc_table)));
      ((safe_free_parameter int_P_c_2_alloc_table) !c); (raise Return) end))))))));
    (raise Return) end with Return -> void end)
  { (JC_<somenum>:
    not_assigns(int_P_c_2_alloc_table@, int_P_int_M_c_2@, int_P_int_M_c_2,
    pset_empty)) }

let main2_safety =
 fun (tt : unit) ->
  { (JC_<somenum>: true) }
  (init:
  try
   begin
     (let int_P_int_M_c_2 = ref (any_memory void) in
     (let int_P_c_2_tag_table = ref (any_tag_table void) in
     (let int_P_c_2_alloc_table = ref (any_alloc_table void) in
     (let c = ref (any_pointer void) in
     (C_8:
     (C_10:
     (C_11:
     (C_12:
     begin
       (let jessie_<somenum> =
       (c := (let jessie_<somenum> =
             (C_7:
             (JC_<somenum>:
             (((alloc_struct_int_P_requires (1)) int_P_c_2_alloc_table) int_P_c_2_tag_table))) in
             (JC_<somenum>:
             (assert
             { ge_int(offset_max(int_P_c_2_alloc_table, jessie_<somenum>), (0)) };
             jessie_<somenum>)))) in void);
      (let jessie_<somenum> = (safe_int32_of_integer_ (2)) in
      (let jessie_<somenum> = !c in
      (((safe_upd_ int_P_int_M_c_2) jessie_<somenum>) jessie_<somenum>)));
      (let jessie_<somenum> = !c in
      (JC_<somenum>:
      (((f2_requires jessie_<somenum>) int_P_int_M_c_2) !int_P_c_2_alloc_table)));
      ((free_parameter int_P_c_2_alloc_table) !c); (raise Return) end))))))));
    (raise Return) end with Return -> void end) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C dillon1.jessie --quiet -f dillon1.makefile project
why --project [...] why/dillon1.why
