Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only pointer_union.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD pointer_union.c"
[jessie] Starting Jessie translation
[kernel] No code for function malloc, default assigns generated
[jessie] Producing Jessie files in subdir pointer_union.jessie
[jessie] File pointer_union.jessie/pointer_union.jc written.
[jessie] File pointer_union.jessie/pointer_union.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag int_P = {
  int32 int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

type U = [U ^ iP ^ pP]

tag U = {
  padding padding: 32;
}

tag iP = {
  int32 iM: 32;
}

tag pP = {
  int_P[..] pM: 32;
}

unit zero(U[..] x)
  requires (C_15 : ((C_16 : (\offset_min(x) <= 0)) &&
                     (C_17 : (\offset_max(x) >= 0))));
behavior default:
  ensures (C_14 : true);
{  
   {  (C_3 : ((C_2 : (C_1 : (x :> iP[0])).iM) = 0));
      
      {  
         (assert for default: (C_4 : ((x :> iP[0]).iM == 0)));
         ()
      };
      (C_8 : ((C_7 : (C_6 : (x :> pP[0])).pM) = (C_5 : (new int_P[1]))));
      (C_12 : ((C_11 : (C_10 : (C_9 : (x :> pP[0])).pM).int_M) = 1));
      
      {  
         (assert for default: (C_13 : ((x :> pP[0]).pM.int_M == 1)));
         ()
      };
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs pointer_union.jessie/pointer_union.cloc pointer_union.jessie/pointer_union.jc
