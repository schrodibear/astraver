Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -add-symbolic-path PPCHOME:PPCHOME -jessie -jessie-gen-only floats_interp2.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -IFRAMAC_SHARE/libc -dD PPCHOME/tests/jessie/floats_interp2.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir floats_interp2.jessie
[jessie] File floats_interp2.jessie/floats_interp2.jc written.
[jessie] File floats_interp2.jessie/floats_interp2.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

type int32 = -2147483648..2147483647

tag doubleP = {
  double doubleM: 64;
}

type doubleP = [doubleP]

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

predicate min_step{L}(doubleP[..] t, integer a, integer b, real bound) =
(\forall integer i_1;
  (((a < i_1) && (i_1 <= b)) ==>
    ((((t + i_1).doubleM :> real) - ((t + (i_1 - 1)).doubleM :> real)) >=
      bound)))

lemma min_step_increasing{L} :
(\forall doubleP[..] t_0;
  (\forall integer a_0;
    (\forall integer b_0;
      (\forall real bound_0;
        (((bound_0 >= 0.0) && min_step{L}(t_0, a_0, b_0, bound_0)) ==>
          (\forall integer i_2;
            (\forall integer j_0;
              (((a_0 <= i_2) && ((i_2 <= j_0) && (j_0 <= b_0))) ==>
                (((t_0 + i_2).doubleM :> real) <=
                  ((t_0 + j_0).doubleM :> real))))))))))

predicate bounded(double z, real bound_1) =
(((- bound_1) <= (z :> real)) && ((z :> real) <= bound_1))

predicate array_bounded{L}(doubleP[..] t_1, int32 n, real bound_2) =
(\forall integer i_3;
  (((0 <= i_3) && (i_3 < n)) ==> bounded((t_1 + i_3).doubleM, bound_2)))

lemma div_bounds :
(\forall real a_1;
  (\forall real b_1;
    (((0.0 < b_1) && ((0.0 <= a_1) && (a_1 <= b_1))) ==>
      ((0.0 <= (a_1 / b_1)) && ((a_1 / b_1) <= 1.0)))))

lemma round_0 :
((\round_double(\NearestEven(), 0.0) :> real) == 0.0)

lemma round_1 :
((\round_double(\NearestEven(), 1.0) :> real) == 1.0)

lemma round_div :
(\forall real a_2;
  (\forall real b_2;
    (((0.0 < b_2) && ((0.0 <= a_2) && (a_2 <= b_2))) ==>
      ((0.0 <= (\round_double(\NearestEven(), (a_2 / b_2)) :> real)) &&
        ((\round_double(\NearestEven(), (a_2 / b_2)) :> real) <= 1.0)))))

int32 i_interp;

double interp_lin(doubleP[..] x, doubleP[..] y, int32 n_1, double z)
  requires (C_78 : (((C_80 : (n_1 >= 1)) &&
                      ((C_82 : (\offset_min(x) <= 0)) &&
                        (C_83 : (\offset_max(x) >= (n_1 - 1))))) &&
                     ((C_85 : (\offset_min(y) <= 0)) &&
                       (C_86 : (\offset_max(y) >= (n_1 - 1))))));
  requires (C_77 : min_step{Here}(x, 0, (n_1 - 1), 0x1p-900));
  requires (C_76 : bounded(z, 0x1p1022));
  requires (C_75 : array_bounded{Here}(x, n_1, 0x1p1022));
  requires (C_74 : array_bounded{Here}(y, n_1, 0x1p1022));
behavior default:
  assigns i_interp;
  ensures (C_62 : true);
behavior too_low:
  assumes ((z :> real) <= ((x + 0).doubleM :> real));
  ensures (C_63 : ((\result :> real) == ((\at(y,Old) + 0).doubleM :> real)));
behavior too_high:
  assumes ((z :> real) > ((x + (n_1 - 1)).doubleM :> real));
  ensures (C_64 : ((\result :> real) ==
                    ((\at(y,Old) + (\at(n_1,Old) - 1)).doubleM :> real)));
behavior in_interval:
  assumes ((((x + 0).doubleM :> real) < (z :> real)) &&
            ((z :> real) <= ((x + (n_1 - 1)).doubleM :> real)));
  ensures (C_65 : (((C_67 : (1 <= i_interp)) &&
                     (C_68 : (i_interp <= (\at(n_1,Old) - 1)))) &&
                    (((C_71 : (((\at(x,Old) + (i_interp - 1)).doubleM :> real) <
                                (\at(z,Old) :> real))) &&
                       (C_72 : ((\at(z,Old) :> real) <=
                                 ((\at(x,Old) + i_interp).doubleM :> real)))) &&
                      (C_73 : (let real k =
                              (((\at(z,Old) :> real) -
                                 ((\at(x,Old) + (i_interp - 1)).doubleM :> real)) /
                                (((\at(x,Old) + i_interp).doubleM :> real) -
                                  ((\at(x,Old) + (i_interp - 1)).doubleM :> real)))
                              in (let real exact_result_0 =
                                 (((\at(y,Old) + (i_interp - 1)).doubleM :> real) +
                                   (k *
                                     (((\at(y,Old) + i_interp).doubleM :> real) -
                                       ((\at(y,Old) + (i_interp - 1)).doubleM :> real))))
                                 in (\real_abs(((\result :> real) -
                                                 exact_result_0)) <=
                                      0x1p-10)))))));
{  
   (var int32 i);
   
   (var double xim1);
   
   (var double yim1);
   
   (var double yi);
   
   (var double b);
   
   (var double a);
   
   (var double k);
   
   (var double r);
   
   (var double __retres);
   
   {  (if (z <= (C_5 : (C_4 : (x + 0)).doubleM)) then 
      {  (C_3 : (__retres = (C_2 : (C_1 : (y + 0)).doubleM)));
         
         (goto return_label)
      } else ());
      (C_6 : (i = 1));
      
      loop 
      behavior default:
        invariant (C_9 : ((C_10 : (1 <= i)) && (C_11 : (i <= n_1))));
      behavior default:
        invariant (C_8 : (\forall integer j_1;
                           (((0 <= j_1) && (j_1 < i)) ==>
                             ((z :> real) > ((x + j_1).doubleM :> real)))));
      variant (C_7 : (n_1 - i));
      while (true)
      {  
         {  (if (i < n_1) then () else 
            (goto while_0_break));
            
            {  (if (z <= (C_13 : (C_12 : (x + i)).doubleM)) then 
               (goto while_0_break) else ())
            };
            (C_16 : (i = (C_15 : ((C_14 : (i + 1)) :> int32))))
         }
      };
      (while_0_break : ());
      (if (i == n_1) then 
      {  (C_21 : (__retres = (C_20 : (C_19 : (y +
                                               (C_18 : ((C_17 : (n_1 - 1)) :> int32)))).doubleM)));
         
         (goto return_label)
      } else ());
      (C_22 : (i_interp = i));
      (C_27 : (xim1 = (C_26 : (C_25 : (x +
                                        (C_24 : ((C_23 : (i - 1)) :> int32)))).doubleM)));
      
      {  
         (assert for default: (C_28 : (jessie : bounded(xim1, 0x1p1022))));
         ()
      };
      
      {  
         (assert for default: (C_29 : (jessie : bounded((x + i).doubleM,
                                                        0x1p1022))));
         ()
      };
      
      {  
         (assert for default: (C_30 : (jessie : ((((x + i).doubleM :> real) -
                                                   (xim1 :> real)) >=
                                                  0x1p-900))));
         ()
      };
      
      {  (C_35 : (yim1 = (C_34 : (C_33 : (y +
                                           (C_32 : ((C_31 : (i - 1)) :> int32)))).doubleM)))
      };
      
      {  
         (assert for default: (C_36 : (jessie : bounded(yim1, 0x1p1022))));
         ()
      };
      
      {  (C_39 : (yi = (C_38 : (C_37 : (y + i)).doubleM)))
      };
      
      {  
         (assert for default: (C_40 : (jessie : bounded(yi, 0x1p1022))));
         ()
      };
      
      {  
         (assert for default: (C_41 : (jessie : (((xim1 :> real) <=
                                                   (z :> real)) &&
                                                  ((z :> real) <=
                                                    ((x + i).doubleM :> real))))));
         ()
      };
      
      {  (C_45 : (b = (C_44 : ((C_43 : (C_42 : (x + i)).doubleM) - xim1))))
      };
      
      {  
         (assert for default: (C_46 : (jessie : (0x1p-900 <= (b :> real)))));
         ()
      };
      
      {  
         (assert for default: (C_47 : (jessie : (0.0 < (b :> real)))));
         ()
      };
      
      {  (C_49 : (a = (C_48 : (z - xim1))))
      };
      
      {  
         (assert for default: (C_50 : (jessie : ((0 <=
                                                   ((z :> real) -
                                                     (xim1 :> real))) &&
                                                  (((z :> real) -
                                                     (xim1 :> real)) <=
                                                    (((x + i).doubleM :> real) -
                                                      (xim1 :> real)))))));
         ()
      };
      
      {  
         (assert for default: (C_51 : (jessie : ((0.0 <= (a :> real)) &&
                                                  ((a :> real) <=
                                                    (b :> real))))));
         ()
      };
      
      {  (C_53 : (k = (C_52 : (a / b))))
      };
      
      {  
         (assert for default: (C_54 : (jessie : ((0.0 <= (k :> real)) &&
                                                  ((k :> real) <= 1.0)))));
         ()
      };
      
      {  (C_58 : (r = (C_57 : (yim1 + (C_56 : (k * (C_55 : (yi - yim1))))))))
      };
      
      {  
         (assert for default: (C_59 : (jessie : (let real k2 =
                                                (((z :> real) -
                                                   ((x + (i - 1)).doubleM :> real)) /
                                                  (((x + i).doubleM :> real) -
                                                    ((x + (i - 1)).doubleM :> real)))
                                                in ((0.0 <= k2) &&
                                                     (k2 <= 1.0))))));
         ()
      };
      
      {  
         (assert for default: (C_60 : (jessie : (let real k2_0 =
                                                (((z :> real) -
                                                   ((x + (i - 1)).doubleM :> real)) /
                                                  (((x + i).doubleM :> real) -
                                                    ((x + (i - 1)).doubleM :> real)))
                                                in (let real exact_result =
                                                   (((y + (i - 1)).doubleM :> real) +
                                                     (k2_0 *
                                                       (((y + i).doubleM :> real) -
                                                         ((y + (i - 1)).doubleM :> real))))
                                                   in (\real_abs(((r :> real) -
                                                                   exact_result)) <=
                                                        0x1p-10))))));
         ()
      };
      
      {  (C_61 : (__retres = r));
         (return_label : 
         (return __retres))
      }
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs floats_interp2.jessie/floats_interp2.cloc floats_interp2.jessie/floats_interp2.jc
type charP

type doubleP

type int32

type int8

type padding

type uint8

type unsigned_charP

type voidP

logic integer_of_int32: int32 -> int

predicate bounded(z:double, bound_1:real) =
 (le_real(neg_real(bound_1), double_value(z))
 and le_real(double_value(z), bound_1))

predicate array_bounded(t_1:doubleP pointer, n:int32, bound_2:real,
 doubleP_doubleM_t_1_2_at_L:(doubleP, double) memory) =
 (forall i_3:int.
  ((le_int((0), i_3) and lt_int(i_3, integer_of_int32(n))) ->
   bounded(select(doubleP_doubleM_t_1_2_at_L, shift(t_1, i_3)), bound_2)))

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic doubleP_tag:  -> doubleP tag_id

axiom doubleP_int : (int_of_tag(doubleP_tag) = (1))

logic doubleP_of_pointer_address: unit pointer -> doubleP pointer

axiom doubleP_of_pointer_address_of_pointer_addr :
 (forall p:doubleP pointer.
  (p = doubleP_of_pointer_address(pointer_address(p))))

axiom doubleP_parenttag_bottom : parenttag(doubleP_tag, bottom_tag)

axiom doubleP_tags :
 (forall x:doubleP pointer.
  (forall doubleP_tag_table:doubleP tag_table.
   instanceof(doubleP_tag_table, x, doubleP_tag)))

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_doubleP(p:doubleP pointer, a:int,
 doubleP_alloc_table:doubleP alloc_table) =
 (offset_min(doubleP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

predicate min_step(t:doubleP pointer, a:int, b:int, bound:real,
 doubleP_doubleM_t_1_at_L:(doubleP, double) memory) =
 (forall i_1:int.
  ((lt_int(a, i_1) and le_int(i_1, b)) ->
   ge_real(sub_real(double_value(select(doubleP_doubleM_t_1_at_L,
                                 shift(t, i_1))),
           double_value(select(doubleP_doubleM_t_1_at_L,
                        shift(t, sub_int(i_1, (1)))))),
   bound)))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_doubleP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(doubleP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_doubleP(p:doubleP pointer, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 (offset_max(doubleP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_doubleP(p:doubleP pointer, a:int, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 ((offset_min(doubleP_alloc_table, p) = a)
 and (offset_max(doubleP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_doubleP(p:doubleP pointer, a:int, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 ((offset_min(doubleP_alloc_table, p) = a)
 and (offset_max(doubleP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_doubleP(p:doubleP pointer, a:int, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 ((offset_min(doubleP_alloc_table, p) <= a)
 and (offset_max(doubleP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_doubleP(p:doubleP pointer, a:int, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 ((offset_min(doubleP_alloc_table, p) <= a)
 and (offset_max(doubleP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

lemma min_step_increasing :
 (forall doubleP_doubleM_t_0_5_at_L:(doubleP, double) memory.
  (forall t_0:doubleP pointer.
   (forall a_0:int.
    (forall b_0:int.
     (forall bound_0:real.
      ((ge_real(bound_0, 0.0)
       and min_step(t_0, a_0, b_0, bound_0, doubleP_doubleM_t_0_5_at_L)) ->
       (forall i_2:int.
        (forall j_0:int.
         ((le_int(a_0, i_2) and (le_int(i_2, j_0) and le_int(j_0, b_0))) ->
          le_real(double_value(select(doubleP_doubleM_t_0_5_at_L,
                               shift(t_0, i_2))),
          double_value(select(doubleP_doubleM_t_0_5_at_L, shift(t_0, j_0)))))))))))))

lemma div_bounds :
 (forall a_1:real.
  (forall b_1:real.
   ((lt_real(0.0, b_1) and (le_real(0.0, a_1) and le_real(a_1, b_1))) ->
    (le_real(0.0, div_real(a_1, b_1)) and le_real(div_real(a_1, b_1), 1.0)))))

lemma round_0 : (round_double(nearest_even, 0.0) = 0.0)

lemma round_1 : (round_double(nearest_even, 1.0) = 1.0)

lemma round_div :
 (forall a_2:real.
  (forall b_2:real.
   ((lt_real(0.0, b_2) and (le_real(0.0, a_2) and le_real(a_2, b_2))) ->
    (le_real(0.0, round_double(nearest_even, div_real(a_2, b_2)))
    and le_real(round_double(nearest_even, div_real(a_2, b_2)), 1.0)))))

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter doubleP_alloc_table : doubleP alloc_table ref

parameter doubleP_tag_table : doubleP tag_table ref

parameter alloc_struct_doubleP :
 n:int ->
  doubleP_alloc_table:doubleP alloc_table ref ->
   doubleP_tag_table:doubleP tag_table ref ->
    { } doubleP pointer writes doubleP_alloc_table,doubleP_tag_table
    { (strict_valid_struct_doubleP(result, (0), sub_int(n, (1)),
       doubleP_alloc_table)
      and (alloc_extends(doubleP_alloc_table@, doubleP_alloc_table)
          and (alloc_fresh(doubleP_alloc_table@, result, n)
              and instanceof(doubleP_tag_table, result, doubleP_tag)))) }

parameter alloc_struct_doubleP_requires :
 n:int ->
  doubleP_alloc_table:doubleP alloc_table ref ->
   doubleP_tag_table:doubleP tag_table ref ->
    { ge_int(n, (0))} doubleP pointer
    writes doubleP_alloc_table,doubleP_tag_table
    { (strict_valid_struct_doubleP(result, (0), sub_int(n, (1)),
       doubleP_alloc_table)
      and (alloc_extends(doubleP_alloc_table@, doubleP_alloc_table)
          and (alloc_fresh(doubleP_alloc_table@, result, n)
              and instanceof(doubleP_tag_table, result, doubleP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter i_interp : int32 ref

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter interp_lin :
 x_0:doubleP pointer ->
  y:doubleP pointer ->
   n_1:int32 ->
    z_0:double ->
     doubleP_y_4_alloc_table:doubleP alloc_table ->
      doubleP_x_3_alloc_table:doubleP alloc_table ->
       doubleP_doubleM_y_4:(doubleP, double) memory ->
        doubleP_doubleM_x_3:(doubleP, double) memory ->
         { } double reads i_interp writes i_interp
         { (((lt_real(double_value(select(doubleP_doubleM_x_3,
                                   shift(x_0, (0)))),
              double_value(z_0))
             and le_real(double_value(z_0),
                 double_value(select(doubleP_doubleM_x_3,
                              shift(x_0, sub_int(integer_of_int32(n_1), (1))))))) ->
             (JC_<somenum>:
             ((JC_<somenum>: le_int((1), integer_of_int32(i_interp)))
             and ((JC_<somenum>:
                  le_int(integer_of_int32(i_interp),
                  sub_int(integer_of_int32(n_1), (1))))
                 and ((JC_<somenum>:
                      lt_real(double_value(select(doubleP_doubleM_x_3,
                                           shift(x_0,
                                           sub_int(integer_of_int32(i_interp),
                                           (1))))),
                      double_value(z_0)))
                     and ((JC_<somenum>:
                          le_real(double_value(z_0),
                          double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0, integer_of_int32(i_interp))))))
                         and (JC_<somenum>:
                             (let k =
                                   div_real(sub_real(double_value(z_0),
                                            double_value(select(doubleP_doubleM_x_3,
                                                         shift(x_0,
                                                         sub_int(integer_of_int32(i_interp),
                                                         (1)))))),
                                   sub_real(double_value(select(doubleP_doubleM_x_3,
                                                         shift(x_0,
                                                         integer_of_int32(i_interp)))),
                                   double_value(select(doubleP_doubleM_x_3,
                                                shift(x_0,
                                                sub_int(integer_of_int32(i_interp),
                                                (1))))))) in
                              (let exact_result_0 =
                                    add_real(double_value(select(doubleP_doubleM_y_4,
                                                          shift(y,
                                                          sub_int(integer_of_int32(i_interp),
                                                          (1))))),
                                    mul_real(k,
                                    sub_real(double_value(select(doubleP_doubleM_y_4,
                                                          shift(y,
                                                          integer_of_int32(i_interp)))),
                                    double_value(select(doubleP_doubleM_y_4,
                                                 shift(y,
                                                 sub_int(integer_of_int32(i_interp),
                                                 (1)))))))) in
                               le_real(abs_real(sub_real(double_value(result),
                                                exact_result_0)),
                               0x1p-10))))))))))
           and ((gt_real(double_value(z_0),
                 double_value(select(doubleP_doubleM_x_3,
                              shift(x_0, sub_int(integer_of_int32(n_1), (1)))))) ->
                 (JC_<somenum>:
                 (double_value(result) = double_value(select(doubleP_doubleM_y_4,
                                                      shift(y,
                                                      sub_int(integer_of_int32(n_1),
                                                      (1))))))))
               and (le_real(double_value(z_0),
                    double_value(select(doubleP_doubleM_x_3, shift(x_0, (0))))) ->
                    (JC_<somenum>:
                    (double_value(result) = double_value(select(doubleP_doubleM_y_4,
                                                         shift(y, (0))))))))) }

parameter interp_lin_requires :
 x_0:doubleP pointer ->
  y:doubleP pointer ->
   n_1:int32 ->
    z_0:double ->
     doubleP_y_4_alloc_table:doubleP alloc_table ->
      doubleP_x_3_alloc_table:doubleP alloc_table ->
       doubleP_doubleM_y_4:(doubleP, double) memory ->
        doubleP_doubleM_x_3:(doubleP, double) memory ->
         { (JC_<somenum>:
           ((JC_<somenum>: ge_int(integer_of_int32(n_1), (1)))
           and ((JC_<somenum>: le_int(offset_min(doubleP_x_3_alloc_table, x_0), (0)))
               and ((JC_<somenum>:
                    ge_int(offset_max(doubleP_x_3_alloc_table, x_0),
                    sub_int(integer_of_int32(n_1), (1))))
                   and ((JC_<somenum>:
                        le_int(offset_min(doubleP_y_4_alloc_table, y), (0)))
                       and ((JC_<somenum>:
                            ge_int(offset_max(doubleP_y_4_alloc_table, y),
                            sub_int(integer_of_int32(n_1), (1))))
                           and ((JC_<somenum>:
                                min_step(x_0, (0),
                                sub_int(integer_of_int32(n_1), (1)),
                                0x1p-900, doubleP_doubleM_x_3))
                               and ((JC_<somenum>: bounded(z_0, 0x1p1022))
                                   and ((JC_<somenum>:
                                        array_bounded(x_0, n_1, 0x1p1022,
                                        doubleP_doubleM_x_3))
                                       and (JC_<somenum>:
                                           array_bounded(y, n_1, 0x1p1022,
                                           doubleP_doubleM_y_4)))))))))))}
         double reads i_interp writes i_interp
         { (((lt_real(double_value(select(doubleP_doubleM_x_3,
                                   shift(x_0, (0)))),
              double_value(z_0))
             and le_real(double_value(z_0),
                 double_value(select(doubleP_doubleM_x_3,
                              shift(x_0, sub_int(integer_of_int32(n_1), (1))))))) ->
             (JC_<somenum>:
             ((JC_<somenum>: le_int((1), integer_of_int32(i_interp)))
             and ((JC_<somenum>:
                  le_int(integer_of_int32(i_interp),
                  sub_int(integer_of_int32(n_1), (1))))
                 and ((JC_<somenum>:
                      lt_real(double_value(select(doubleP_doubleM_x_3,
                                           shift(x_0,
                                           sub_int(integer_of_int32(i_interp),
                                           (1))))),
                      double_value(z_0)))
                     and ((JC_<somenum>:
                          le_real(double_value(z_0),
                          double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0, integer_of_int32(i_interp))))))
                         and (JC_<somenum>:
                             (let k =
                                   div_real(sub_real(double_value(z_0),
                                            double_value(select(doubleP_doubleM_x_3,
                                                         shift(x_0,
                                                         sub_int(integer_of_int32(i_interp),
                                                         (1)))))),
                                   sub_real(double_value(select(doubleP_doubleM_x_3,
                                                         shift(x_0,
                                                         integer_of_int32(i_interp)))),
                                   double_value(select(doubleP_doubleM_x_3,
                                                shift(x_0,
                                                sub_int(integer_of_int32(i_interp),
                                                (1))))))) in
                              (let exact_result_0 =
                                    add_real(double_value(select(doubleP_doubleM_y_4,
                                                          shift(y,
                                                          sub_int(integer_of_int32(i_interp),
                                                          (1))))),
                                    mul_real(k,
                                    sub_real(double_value(select(doubleP_doubleM_y_4,
                                                          shift(y,
                                                          integer_of_int32(i_interp)))),
                                    double_value(select(doubleP_doubleM_y_4,
                                                 shift(y,
                                                 sub_int(integer_of_int32(i_interp),
                                                 (1)))))))) in
                               le_real(abs_real(sub_real(double_value(result),
                                                exact_result_0)),
                               0x1p-10))))))))))
           and ((gt_real(double_value(z_0),
                 double_value(select(doubleP_doubleM_x_3,
                              shift(x_0, sub_int(integer_of_int32(n_1), (1)))))) ->
                 (JC_<somenum>:
                 (double_value(result) = double_value(select(doubleP_doubleM_y_4,
                                                      shift(y,
                                                      sub_int(integer_of_int32(n_1),
                                                      (1))))))))
               and (le_real(double_value(z_0),
                    double_value(select(doubleP_doubleM_x_3, shift(x_0, (0))))) ->
                    (JC_<somenum>:
                    (double_value(result) = double_value(select(doubleP_doubleM_y_4,
                                                         shift(y, (0))))))))) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let interp_lin_ensures_default =
 fun (x_0 : doubleP pointer) (y : doubleP pointer) (n_1 : int32) (z_0 : double) (doubleP_x_3_alloc_table : doubleP alloc_table) (doubleP_y_4_alloc_table : doubleP alloc_table) (doubleP_doubleM_x_3 : (doubleP, double) memory) (doubleP_doubleM_y_4 : (doubleP, double) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: ge_int(integer_of_int32(n_1), (1)))
    and ((JC_<somenum>: le_int(offset_min(doubleP_x_3_alloc_table, x_0), (0)))
        and ((JC_<somenum>:
             ge_int(offset_max(doubleP_x_3_alloc_table, x_0),
             sub_int(integer_of_int32(n_1), (1))))
            and ((JC_<somenum>: le_int(offset_min(doubleP_y_4_alloc_table, y), (0)))
                and ((JC_<somenum>:
                     ge_int(offset_max(doubleP_y_4_alloc_table, y),
                     sub_int(integer_of_int32(n_1), (1))))
                    and ((JC_<somenum>:
                         min_step(x_0, (0),
                         sub_int(integer_of_int32(n_1), (1)), 0x1p-900,
                         doubleP_doubleM_x_3))
                        and ((JC_<somenum>: bounded(z_0, 0x1p1022))
                            and ((JC_<somenum>:
                                 array_bounded(x_0, n_1, 0x1p1022,
                                 doubleP_doubleM_x_3))
                                and (JC_<somenum>:
                                    array_bounded(y, n_1, 0x1p1022,
                                    doubleP_doubleM_y_4))))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let i = ref (any_int32 void) in
     (let xim1 = ref (any_double void) in
     (let yim1 = ref (any_double void) in
     (let yi = ref (any_double void) in
     (let b_3 = ref (any_double void) in
     (let a_3 = ref (any_double void) in
     (let k_0 = ref (any_double void) in
     (let r = ref (any_double void) in
     (let __retres = ref (any_double void) in
     try
      (C_6:
      (loop_2:
      begin
        (if ((le_double_ z_0) (C_5:
                              ((safe_acc_ doubleP_doubleM_x_3) (C_4:
                                                               ((shift x_0) (0))))))
        then
         (C_3:
         begin
           (let jessie_<somenum> =
           (__retres := (C_2:
                        ((safe_acc_ doubleP_doubleM_y_4) (C_1:
                                                         ((shift y) (0)))))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (i := (safe_int32_of_integer_ (1))) in void);
       while true do
       { invariant
           ((JC_<somenum>:
            (forall j_1:int.
             ((le_int((0), j_1) and lt_int(j_1, integer_of_int32(i))) ->
              gt_real(double_value(z_0),
              double_value(select(doubleP_doubleM_x_3, shift(x_0, j_1)))))))
           and (JC_<somenum>:
               ((JC_<somenum>: le_int((1), integer_of_int32(i)))
               and (JC_<somenum>:
                   le_int(integer_of_int32(i), integer_of_int32(n_1)))))) 
          }
        begin
          [ { } unit { true } ];
         try
          begin
            (let jessie_<somenum> =
            (C_16:
            begin
              (if ((lt_int_ (integer_of_int32 !i)) (integer_of_int32 n_1))
              then void else (raise (Goto_while_0_break_exc void)));
             (if ((le_double_ z_0) (C_13:
                                   ((safe_acc_ doubleP_doubleM_x_3) (C_12:
                                                                    ((shift x_0) 
                                                                    (integer_of_int32 !i))))))
             then (raise (Goto_while_0_break_exc void)) else void);
             (i := (C_15:
                   (safe_int32_of_integer_ (C_14:
                                           ((add_int (integer_of_int32 !i)) (1))))));
             !i end) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<somenum> -> void end end done;
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_22:
      (C_27:
      begin
        void;
       (if ((eq_int_ (integer_of_int32 !i)) (integer_of_int32 n_1))
       then
        (C_21:
        begin
          (let jessie_<somenum> =
          (__retres := (C_20:
                       ((safe_acc_ doubleP_doubleM_y_4) (C_19:
                                                        ((shift y) (integer_of_int32 
                                                                    (C_18:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_17:
                                                                    ((sub_int 
                                                                    (integer_of_int32 n_1)) (1))))))))))) in
          void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (i_interp := !i) in void);
       (let jessie_<somenum> =
       (xim1 := (C_26:
                ((safe_acc_ doubleP_doubleM_x_3) (C_25:
                                                 ((shift x_0) (integer_of_int32 
                                                               (C_24:
                                                               (safe_int32_of_integer_ 
                                                                (C_23:
                                                                ((sub_int 
                                                                  (integer_of_int32 !i)) (1))))))))))) in
       void); (assert { (JC_<somenum>: bounded(xim1, 0x1p1022)) }; void); void;
       (assert
       { (JC_<somenum>:
         bounded(select(doubleP_doubleM_x_3, shift(x_0, integer_of_int32(i))),
         0x1p1022)) }; void); void;
       (assert
       { (JC_<somenum>:
         ge_real(sub_real(double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0, integer_of_int32(i)))),
                 double_value(xim1)),
         0x1p-900)) }; void); void;
       (let jessie_<somenum> =
       (C_35:
       begin
         (yim1 := (C_34:
                  ((safe_acc_ doubleP_doubleM_y_4) (C_33:
                                                   ((shift y) (integer_of_int32 
                                                               (C_32:
                                                               (safe_int32_of_integer_ 
                                                                (C_31:
                                                                ((sub_int 
                                                                  (integer_of_int32 !i)) (1)))))))))));
        !yim1 end) in void);
       (assert { (JC_<somenum>: bounded(yim1, 0x1p1022)) }; void); void;
       (let jessie_<somenum> =
       (C_39:
       begin
         (yi := (C_38:
                ((safe_acc_ doubleP_doubleM_y_4) (C_37:
                                                 ((shift y) (integer_of_int32 !i))))));
        !yi end) in void); (assert { (JC_<somenum>: bounded(yi, 0x1p1022)) }; void);
       void;
       (assert
       { (JC_<somenum>:
         (le_real(double_value(xim1), double_value(z_0))
         and le_real(double_value(z_0),
             double_value(select(doubleP_doubleM_x_3,
                          shift(x_0, integer_of_int32(i))))))) }; void);
       void;
       (let jessie_<somenum> =
       (C_45:
       begin
         (b_3 := (C_44:
                 (JC_<somenum>:
                 (((sub_double_safe nearest_even) (C_43:
                                                  ((safe_acc_ doubleP_doubleM_x_3) 
                                                   (C_42:
                                                   ((shift x_0) (integer_of_int32 !i)))))) !xim1))));
        !b_3 end) in void);
       (assert { (JC_<somenum>: le_real(0x1p-900, double_value(b_3))) }; void);
       void; (assert { (JC_<somenum>: lt_real(0.0, double_value(b_3))) }; void);
       void;
       (let jessie_<somenum> =
       (C_49:
       begin
         (a_3 := (C_48:
                 (JC_<somenum>: (((sub_double_safe nearest_even) z_0) !xim1))));
        !a_3 end) in void);
       (assert
       { (JC_<somenum>:
         (le_real(0.0, sub_real(double_value(z_0), double_value(xim1)))
         and le_real(sub_real(double_value(z_0), double_value(xim1)),
             sub_real(double_value(select(doubleP_doubleM_x_3,
                                   shift(x_0, integer_of_int32(i)))),
             double_value(xim1))))) }; void); void;
       (assert
       { (JC_<somenum>:
         (le_real(0.0, double_value(a_3))
         and le_real(double_value(a_3), double_value(b_3)))) }; void); void;
       (let jessie_<somenum> =
       (C_53:
       begin
         (k_0 := (C_52:
                 (JC_<somenum>: (((div_double_safe nearest_even) !a_3) !b_3))));
        !k_0 end) in void);
       (assert
       { (JC_<somenum>:
         (le_real(0.0, double_value(k_0))
         and le_real(double_value(k_0), 1.0))) }; void); void;
       (let jessie_<somenum> =
       (C_58:
       begin
         (r := (C_57:
               (JC_<somenum>:
               (((add_double_safe nearest_even) !yim1) (C_56:
                                                       (JC_<somenum>:
                                                       (((mul_double_safe nearest_even) !k_0) 
                                                        (C_55:
                                                        (JC_<somenum>:
                                                        (((sub_double_safe nearest_even) !yi) !yim1))))))))));
        !r end) in void);
       (assert
       { (JC_<somenum>:
         (let k2 =
               div_real(sub_real(double_value(z_0),
                        double_value(select(doubleP_doubleM_x_3,
                                     shift(x_0,
                                     sub_int(integer_of_int32(i), (1)))))),
               sub_real(double_value(select(doubleP_doubleM_x_3,
                                     shift(x_0, integer_of_int32(i)))),
               double_value(select(doubleP_doubleM_x_3,
                            shift(x_0, sub_int(integer_of_int32(i), (1))))))) in
          (le_real(0.0, k2) and le_real(k2, 1.0)))) }; void); void;
       (assert
       { (JC_<somenum>:
         (let k2_0 =
               div_real(sub_real(double_value(z_0),
                        double_value(select(doubleP_doubleM_x_3,
                                     shift(x_0,
                                     sub_int(integer_of_int32(i), (1)))))),
               sub_real(double_value(select(doubleP_doubleM_x_3,
                                     shift(x_0, integer_of_int32(i)))),
               double_value(select(doubleP_doubleM_x_3,
                            shift(x_0, sub_int(integer_of_int32(i), (1))))))) in
          (let exact_result =
                add_real(double_value(select(doubleP_doubleM_y_4,
                                      shift(y,
                                      sub_int(integer_of_int32(i), (1))))),
                mul_real(k2_0,
                sub_real(double_value(select(doubleP_doubleM_y_4,
                                      shift(y, integer_of_int32(i)))),
                double_value(select(doubleP_doubleM_y_4,
                             shift(y, sub_int(integer_of_int32(i), (1)))))))) in
           le_real(abs_real(sub_real(double_value(r), exact_result)),
           0x1p-10)))) }; void); void;
       try
        (C_61:
        begin
          (let jessie_<somenum> = (__retres := !r) in void);
         (raise (Return_label_exc void)) end) with
        Return_label_exc jessie_<somenum> ->
        (return_label: begin   (return := !__retres); (raise Return) end) end
      end))) end))))))))); absurd  end with Return -> !return end))
  { (JC_<somenum>: true) }

let interp_lin_ensures_in_interval =
 fun (x_0 : doubleP pointer) (y : doubleP pointer) (n_1 : int32) (z_0 : double) (doubleP_x_3_alloc_table : doubleP alloc_table) (doubleP_y_4_alloc_table : doubleP alloc_table) (doubleP_doubleM_x_3 : (doubleP, double) memory) (doubleP_doubleM_y_4 : (doubleP, double) memory) ->
  { ((lt_real(double_value(select(doubleP_doubleM_x_3, shift(x_0, (0)))),
      double_value(z_0))
     and le_real(double_value(z_0),
         double_value(select(doubleP_doubleM_x_3,
                      shift(x_0, sub_int(integer_of_int32(n_1), (1)))))))
    and (JC_<somenum>:
        ((JC_<somenum>: ge_int(integer_of_int32(n_1), (1)))
        and ((JC_<somenum>: le_int(offset_min(doubleP_x_3_alloc_table, x_0), (0)))
            and ((JC_<somenum>:
                 ge_int(offset_max(doubleP_x_3_alloc_table, x_0),
                 sub_int(integer_of_int32(n_1), (1))))
                and ((JC_<somenum>:
                     le_int(offset_min(doubleP_y_4_alloc_table, y), (0)))
                    and ((JC_<somenum>:
                         ge_int(offset_max(doubleP_y_4_alloc_table, y),
                         sub_int(integer_of_int32(n_1), (1))))
                        and ((JC_<somenum>:
                             min_step(x_0, (0),
                             sub_int(integer_of_int32(n_1), (1)), 0x1p-900,
                             doubleP_doubleM_x_3))
                            and ((JC_<somenum>: bounded(z_0, 0x1p1022))
                                and ((JC_<somenum>:
                                     array_bounded(x_0, n_1, 0x1p1022,
                                     doubleP_doubleM_x_3))
                                    and (JC_<somenum>:
                                        array_bounded(y, n_1, 0x1p1022,
                                        doubleP_doubleM_y_4)))))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let i = ref (any_int32 void) in
     (let xim1 = ref (any_double void) in
     (let yim1 = ref (any_double void) in
     (let yi = ref (any_double void) in
     (let b_3 = ref (any_double void) in
     (let a_3 = ref (any_double void) in
     (let k_0 = ref (any_double void) in
     (let r = ref (any_double void) in
     (let __retres = ref (any_double void) in
     try
      (C_6:
      (loop_5:
      begin
        (if ((le_double_ z_0) (C_5:
                              ((safe_acc_ doubleP_doubleM_x_3) (C_4:
                                                               ((shift x_0) (0))))))
        then
         (C_3:
         begin
           (let jessie_<somenum> =
           (__retres := (C_2:
                        ((safe_acc_ doubleP_doubleM_y_4) (C_1:
                                                         ((shift y) (0)))))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (i := (safe_int32_of_integer_ (1))) in void);
       while true do
       { invariant (JC_<somenum>: true)  }
        begin
          [ { } unit reads i
            { ((JC_<somenum>:
               (forall j_1:int.
                ((le_int((0), j_1) and lt_int(j_1, integer_of_int32(i))) ->
                 gt_real(double_value(z_0),
                 double_value(select(doubleP_doubleM_x_3, shift(x_0, j_1)))))))
              and (JC_<somenum>:
                  ((JC_<somenum>: le_int((1), integer_of_int32(i)))
                  and (JC_<somenum>:
                      le_int(integer_of_int32(i), integer_of_int32(n_1)))))) } ];
         try
          begin
            (let jessie_<somenum> =
            (C_16:
            begin
              (if ((lt_int_ (integer_of_int32 !i)) (integer_of_int32 n_1))
              then void else (raise (Goto_while_0_break_exc void)));
             (if ((le_double_ z_0) (C_13:
                                   ((safe_acc_ doubleP_doubleM_x_3) (C_12:
                                                                    ((shift x_0) 
                                                                    (integer_of_int32 !i))))))
             then (raise (Goto_while_0_break_exc void)) else void);
             (i := (C_15:
                   (safe_int32_of_integer_ (C_14:
                                           ((add_int (integer_of_int32 !i)) (1))))));
             !i end) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<somenum> -> void end end done;
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_22:
      (C_27:
      begin
        void;
       (if ((eq_int_ (integer_of_int32 !i)) (integer_of_int32 n_1))
       then
        (C_21:
        begin
          (let jessie_<somenum> =
          (__retres := (C_20:
                       ((safe_acc_ doubleP_doubleM_y_4) (C_19:
                                                        ((shift y) (integer_of_int32 
                                                                    (C_18:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_17:
                                                                    ((sub_int 
                                                                    (integer_of_int32 n_1)) (1))))))))))) in
          void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (i_interp := !i) in void);
       (let jessie_<somenum> =
       (xim1 := (C_26:
                ((safe_acc_ doubleP_doubleM_x_3) (C_25:
                                                 ((shift x_0) (integer_of_int32 
                                                               (C_24:
                                                               (safe_int32_of_integer_ 
                                                                (C_23:
                                                                ((sub_int 
                                                                  (integer_of_int32 !i)) (1))))))))))) in
       void); [ { } unit reads xim1 { (JC_<somenum>: bounded(xim1, 0x1p1022)) } ];
       void;
       [ { } unit reads i
         { (JC_<somenum>:
           bounded(select(doubleP_doubleM_x_3,
                   shift(x_0, integer_of_int32(i))),
           0x1p1022)) } ]; void;
       [ { } unit reads i,xim1
         { (JC_<somenum>:
           ge_real(sub_real(double_value(select(doubleP_doubleM_x_3,
                                         shift(x_0, integer_of_int32(i)))),
                   double_value(xim1)),
           0x1p-900)) } ]; void;
       (let jessie_<somenum> =
       (C_35:
       begin
         (yim1 := (C_34:
                  ((safe_acc_ doubleP_doubleM_y_4) (C_33:
                                                   ((shift y) (integer_of_int32 
                                                               (C_32:
                                                               (safe_int32_of_integer_ 
                                                                (C_31:
                                                                ((sub_int 
                                                                  (integer_of_int32 !i)) (1)))))))))));
        !yim1 end) in void);
       [ { } unit reads yim1 { (JC_<somenum>: bounded(yim1, 0x1p1022)) } ]; void;
       (let jessie_<somenum> =
       (C_39:
       begin
         (yi := (C_38:
                ((safe_acc_ doubleP_doubleM_y_4) (C_37:
                                                 ((shift y) (integer_of_int32 !i))))));
        !yi end) in void);
       [ { } unit reads yi { (JC_<somenum>: bounded(yi, 0x1p1022)) } ]; void;
       [ { } unit reads i,xim1
         { (JC_<somenum>:
           (le_real(double_value(xim1), double_value(z_0))
           and le_real(double_value(z_0),
               double_value(select(doubleP_doubleM_x_3,
                            shift(x_0, integer_of_int32(i))))))) } ]; void;
       (let jessie_<somenum> =
       (C_45:
       begin
         (b_3 := (C_44:
                 (JC_<somenum>:
                 (((sub_double_safe nearest_even) (C_43:
                                                  ((safe_acc_ doubleP_doubleM_x_3) 
                                                   (C_42:
                                                   ((shift x_0) (integer_of_int32 !i)))))) !xim1))));
        !b_3 end) in void);
       [ { } unit reads b_3
         { (JC_<somenum>: le_real(0x1p-900, double_value(b_3))) } ]; void;
       [ { } unit reads b_3 { (JC_<somenum>: lt_real(0.0, double_value(b_3))) } ];
       void;
       (let jessie_<somenum> =
       (C_49:
       begin
         (a_3 := (C_48:
                 (JC_<somenum>: (((sub_double_safe nearest_even) z_0) !xim1))));
        !a_3 end) in void);
       [ { } unit reads i,xim1
         { (JC_<somenum>:
           (le_real(0.0, sub_real(double_value(z_0), double_value(xim1)))
           and le_real(sub_real(double_value(z_0), double_value(xim1)),
               sub_real(double_value(select(doubleP_doubleM_x_3,
                                     shift(x_0, integer_of_int32(i)))),
               double_value(xim1))))) } ]; void;
       [ { } unit reads a_3,b_3
         { (JC_<somenum>:
           (le_real(0.0, double_value(a_3))
           and le_real(double_value(a_3), double_value(b_3)))) } ]; void;
       (let jessie_<somenum> =
       (C_53:
       begin
         (k_0 := (C_52:
                 (JC_<somenum>: (((div_double_safe nearest_even) !a_3) !b_3))));
        !k_0 end) in void);
       [ { } unit reads k_0
         { (JC_<somenum>:
           (le_real(0.0, double_value(k_0))
           and le_real(double_value(k_0), 1.0))) } ]; void;
       (let jessie_<somenum> =
       (C_58:
       begin
         (r := (C_57:
               (JC_<somenum>:
               (((add_double_safe nearest_even) !yim1) (C_56:
                                                       (JC_<somenum>:
                                                       (((mul_double_safe nearest_even) !k_0) 
                                                        (C_55:
                                                        (JC_<somenum>:
                                                        (((sub_double_safe nearest_even) !yi) !yim1))))))))));
        !r end) in void);
       [ { } unit reads i
         { (JC_<somenum>:
           (let k2 =
                 div_real(sub_real(double_value(z_0),
                          double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0,
                                       sub_int(integer_of_int32(i), (1)))))),
                 sub_real(double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0, integer_of_int32(i)))),
                 double_value(select(doubleP_doubleM_x_3,
                              shift(x_0, sub_int(integer_of_int32(i), (1))))))) in
            (le_real(0.0, k2) and le_real(k2, 1.0)))) } ]; void;
       [ { } unit reads i,r
         { (JC_<somenum>:
           (let k2_0 =
                 div_real(sub_real(double_value(z_0),
                          double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0,
                                       sub_int(integer_of_int32(i), (1)))))),
                 sub_real(double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0, integer_of_int32(i)))),
                 double_value(select(doubleP_doubleM_x_3,
                              shift(x_0, sub_int(integer_of_int32(i), (1))))))) in
            (let exact_result =
                  add_real(double_value(select(doubleP_doubleM_y_4,
                                        shift(y,
                                        sub_int(integer_of_int32(i), (1))))),
                  mul_real(k2_0,
                  sub_real(double_value(select(doubleP_doubleM_y_4,
                                        shift(y, integer_of_int32(i)))),
                  double_value(select(doubleP_doubleM_y_4,
                               shift(y, sub_int(integer_of_int32(i), (1)))))))) in
             le_real(abs_real(sub_real(double_value(r), exact_result)),
             0x1p-10)))) } ]; void;
       try
        (C_61:
        begin
          (let jessie_<somenum> = (__retres := !r) in void);
         (raise (Return_label_exc void)) end) with
        Return_label_exc jessie_<somenum> ->
        (return_label: begin   (return := !__retres); (raise Return) end) end
      end))) end))))))))); absurd  end with Return -> !return end))
  { (JC_<somenum>:
    ((JC_<somenum>: le_int((1), integer_of_int32(i_interp)))
    and ((JC_<somenum>:
         le_int(integer_of_int32(i_interp),
         sub_int(integer_of_int32(n_1), (1))))
        and ((JC_<somenum>:
             lt_real(double_value(select(doubleP_doubleM_x_3,
                                  shift(x_0,
                                  sub_int(integer_of_int32(i_interp), (1))))),
             double_value(z_0)))
            and ((JC_<somenum>:
                 le_real(double_value(z_0),
                 double_value(select(doubleP_doubleM_x_3,
                              shift(x_0, integer_of_int32(i_interp))))))
                and (JC_<somenum>:
                    (let k =
                          div_real(sub_real(double_value(z_0),
                                   double_value(select(doubleP_doubleM_x_3,
                                                shift(x_0,
                                                sub_int(integer_of_int32(i_interp),
                                                (1)))))),
                          sub_real(double_value(select(doubleP_doubleM_x_3,
                                                shift(x_0,
                                                integer_of_int32(i_interp)))),
                          double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0,
                                       sub_int(integer_of_int32(i_interp),
                                       (1))))))) in
                     (let exact_result_0 =
                           add_real(double_value(select(doubleP_doubleM_y_4,
                                                 shift(y,
                                                 sub_int(integer_of_int32(i_interp),
                                                 (1))))),
                           mul_real(k,
                           sub_real(double_value(select(doubleP_doubleM_y_4,
                                                 shift(y,
                                                 integer_of_int32(i_interp)))),
                           double_value(select(doubleP_doubleM_y_4,
                                        shift(y,
                                        sub_int(integer_of_int32(i_interp),
                                        (1)))))))) in
                      le_real(abs_real(sub_real(double_value(result),
                                       exact_result_0)),
                      0x1p-10))))))))) }

let interp_lin_ensures_too_high =
 fun (x_0 : doubleP pointer) (y : doubleP pointer) (n_1 : int32) (z_0 : double) (doubleP_x_3_alloc_table : doubleP alloc_table) (doubleP_y_4_alloc_table : doubleP alloc_table) (doubleP_doubleM_x_3 : (doubleP, double) memory) (doubleP_doubleM_y_4 : (doubleP, double) memory) ->
  { (gt_real(double_value(z_0),
     double_value(select(doubleP_doubleM_x_3,
                  shift(x_0, sub_int(integer_of_int32(n_1), (1))))))
    and (JC_<somenum>:
        ((JC_<somenum>: ge_int(integer_of_int32(n_1), (1)))
        and ((JC_<somenum>: le_int(offset_min(doubleP_x_3_alloc_table, x_0), (0)))
            and ((JC_<somenum>:
                 ge_int(offset_max(doubleP_x_3_alloc_table, x_0),
                 sub_int(integer_of_int32(n_1), (1))))
                and ((JC_<somenum>:
                     le_int(offset_min(doubleP_y_4_alloc_table, y), (0)))
                    and ((JC_<somenum>:
                         ge_int(offset_max(doubleP_y_4_alloc_table, y),
                         sub_int(integer_of_int32(n_1), (1))))
                        and ((JC_<somenum>:
                             min_step(x_0, (0),
                             sub_int(integer_of_int32(n_1), (1)), 0x1p-900,
                             doubleP_doubleM_x_3))
                            and ((JC_<somenum>: bounded(z_0, 0x1p1022))
                                and ((JC_<somenum>:
                                     array_bounded(x_0, n_1, 0x1p1022,
                                     doubleP_doubleM_x_3))
                                    and (JC_<somenum>:
                                        array_bounded(y, n_1, 0x1p1022,
                                        doubleP_doubleM_y_4)))))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let i = ref (any_int32 void) in
     (let xim1 = ref (any_double void) in
     (let yim1 = ref (any_double void) in
     (let yi = ref (any_double void) in
     (let b_3 = ref (any_double void) in
     (let a_3 = ref (any_double void) in
     (let k_0 = ref (any_double void) in
     (let r = ref (any_double void) in
     (let __retres = ref (any_double void) in
     try
      (C_6:
      (loop_4:
      begin
        (if ((le_double_ z_0) (C_5:
                              ((safe_acc_ doubleP_doubleM_x_3) (C_4:
                                                               ((shift x_0) (0))))))
        then
         (C_3:
         begin
           (let jessie_<somenum> =
           (__retres := (C_2:
                        ((safe_acc_ doubleP_doubleM_y_4) (C_1:
                                                         ((shift y) (0)))))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (i := (safe_int32_of_integer_ (1))) in void);
       while true do
       { invariant (JC_<somenum>: true)  }
        begin
          [ { } unit reads i
            { ((JC_<somenum>:
               (forall j_1:int.
                ((le_int((0), j_1) and lt_int(j_1, integer_of_int32(i))) ->
                 gt_real(double_value(z_0),
                 double_value(select(doubleP_doubleM_x_3, shift(x_0, j_1)))))))
              and (JC_<somenum>:
                  ((JC_<somenum>: le_int((1), integer_of_int32(i)))
                  and (JC_<somenum>:
                      le_int(integer_of_int32(i), integer_of_int32(n_1)))))) } ];
         try
          begin
            (let jessie_<somenum> =
            (C_16:
            begin
              (if ((lt_int_ (integer_of_int32 !i)) (integer_of_int32 n_1))
              then void else (raise (Goto_while_0_break_exc void)));
             (if ((le_double_ z_0) (C_13:
                                   ((safe_acc_ doubleP_doubleM_x_3) (C_12:
                                                                    ((shift x_0) 
                                                                    (integer_of_int32 !i))))))
             then (raise (Goto_while_0_break_exc void)) else void);
             (i := (C_15:
                   (safe_int32_of_integer_ (C_14:
                                           ((add_int (integer_of_int32 !i)) (1))))));
             !i end) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<somenum> -> void end end done;
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_22:
      (C_27:
      begin
        void;
       (if ((eq_int_ (integer_of_int32 !i)) (integer_of_int32 n_1))
       then
        (C_21:
        begin
          (let jessie_<somenum> =
          (__retres := (C_20:
                       ((safe_acc_ doubleP_doubleM_y_4) (C_19:
                                                        ((shift y) (integer_of_int32 
                                                                    (C_18:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_17:
                                                                    ((sub_int 
                                                                    (integer_of_int32 n_1)) (1))))))))))) in
          void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (i_interp := !i) in void);
       (let jessie_<somenum> =
       (xim1 := (C_26:
                ((safe_acc_ doubleP_doubleM_x_3) (C_25:
                                                 ((shift x_0) (integer_of_int32 
                                                               (C_24:
                                                               (safe_int32_of_integer_ 
                                                                (C_23:
                                                                ((sub_int 
                                                                  (integer_of_int32 !i)) (1))))))))))) in
       void); [ { } unit reads xim1 { (JC_<somenum>: bounded(xim1, 0x1p1022)) } ];
       void;
       [ { } unit reads i
         { (JC_<somenum>:
           bounded(select(doubleP_doubleM_x_3,
                   shift(x_0, integer_of_int32(i))),
           0x1p1022)) } ]; void;
       [ { } unit reads i,xim1
         { (JC_<somenum>:
           ge_real(sub_real(double_value(select(doubleP_doubleM_x_3,
                                         shift(x_0, integer_of_int32(i)))),
                   double_value(xim1)),
           0x1p-900)) } ]; void;
       (let jessie_<somenum> =
       (C_35:
       begin
         (yim1 := (C_34:
                  ((safe_acc_ doubleP_doubleM_y_4) (C_33:
                                                   ((shift y) (integer_of_int32 
                                                               (C_32:
                                                               (safe_int32_of_integer_ 
                                                                (C_31:
                                                                ((sub_int 
                                                                  (integer_of_int32 !i)) (1)))))))))));
        !yim1 end) in void);
       [ { } unit reads yim1 { (JC_<somenum>: bounded(yim1, 0x1p1022)) } ]; void;
       (let jessie_<somenum> =
       (C_39:
       begin
         (yi := (C_38:
                ((safe_acc_ doubleP_doubleM_y_4) (C_37:
                                                 ((shift y) (integer_of_int32 !i))))));
        !yi end) in void);
       [ { } unit reads yi { (JC_<somenum>: bounded(yi, 0x1p1022)) } ]; void;
       [ { } unit reads i,xim1
         { (JC_<somenum>:
           (le_real(double_value(xim1), double_value(z_0))
           and le_real(double_value(z_0),
               double_value(select(doubleP_doubleM_x_3,
                            shift(x_0, integer_of_int32(i))))))) } ]; void;
       (let jessie_<somenum> =
       (C_45:
       begin
         (b_3 := (C_44:
                 (JC_<somenum>:
                 (((sub_double_safe nearest_even) (C_43:
                                                  ((safe_acc_ doubleP_doubleM_x_3) 
                                                   (C_42:
                                                   ((shift x_0) (integer_of_int32 !i)))))) !xim1))));
        !b_3 end) in void);
       [ { } unit reads b_3
         { (JC_<somenum>: le_real(0x1p-900, double_value(b_3))) } ]; void;
       [ { } unit reads b_3 { (JC_<somenum>: lt_real(0.0, double_value(b_3))) } ];
       void;
       (let jessie_<somenum> =
       (C_49:
       begin
         (a_3 := (C_48:
                 (JC_<somenum>: (((sub_double_safe nearest_even) z_0) !xim1))));
        !a_3 end) in void);
       [ { } unit reads i,xim1
         { (JC_<somenum>:
           (le_real(0.0, sub_real(double_value(z_0), double_value(xim1)))
           and le_real(sub_real(double_value(z_0), double_value(xim1)),
               sub_real(double_value(select(doubleP_doubleM_x_3,
                                     shift(x_0, integer_of_int32(i)))),
               double_value(xim1))))) } ]; void;
       [ { } unit reads a_3,b_3
         { (JC_<somenum>:
           (le_real(0.0, double_value(a_3))
           and le_real(double_value(a_3), double_value(b_3)))) } ]; void;
       (let jessie_<somenum> =
       (C_53:
       begin
         (k_0 := (C_52:
                 (JC_<somenum>: (((div_double_safe nearest_even) !a_3) !b_3))));
        !k_0 end) in void);
       [ { } unit reads k_0
         { (JC_<somenum>:
           (le_real(0.0, double_value(k_0))
           and le_real(double_value(k_0), 1.0))) } ]; void;
       (let jessie_<somenum> =
       (C_58:
       begin
         (r := (C_57:
               (JC_<somenum>:
               (((add_double_safe nearest_even) !yim1) (C_56:
                                                       (JC_<somenum>:
                                                       (((mul_double_safe nearest_even) !k_0) 
                                                        (C_55:
                                                        (JC_<somenum>:
                                                        (((sub_double_safe nearest_even) !yi) !yim1))))))))));
        !r end) in void);
       [ { } unit reads i
         { (JC_<somenum>:
           (let k2 =
                 div_real(sub_real(double_value(z_0),
                          double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0,
                                       sub_int(integer_of_int32(i), (1)))))),
                 sub_real(double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0, integer_of_int32(i)))),
                 double_value(select(doubleP_doubleM_x_3,
                              shift(x_0, sub_int(integer_of_int32(i), (1))))))) in
            (le_real(0.0, k2) and le_real(k2, 1.0)))) } ]; void;
       [ { } unit reads i,r
         { (JC_<somenum>:
           (let k2_0 =
                 div_real(sub_real(double_value(z_0),
                          double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0,
                                       sub_int(integer_of_int32(i), (1)))))),
                 sub_real(double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0, integer_of_int32(i)))),
                 double_value(select(doubleP_doubleM_x_3,
                              shift(x_0, sub_int(integer_of_int32(i), (1))))))) in
            (let exact_result =
                  add_real(double_value(select(doubleP_doubleM_y_4,
                                        shift(y,
                                        sub_int(integer_of_int32(i), (1))))),
                  mul_real(k2_0,
                  sub_real(double_value(select(doubleP_doubleM_y_4,
                                        shift(y, integer_of_int32(i)))),
                  double_value(select(doubleP_doubleM_y_4,
                               shift(y, sub_int(integer_of_int32(i), (1)))))))) in
             le_real(abs_real(sub_real(double_value(r), exact_result)),
             0x1p-10)))) } ]; void;
       try
        (C_61:
        begin
          (let jessie_<somenum> = (__retres := !r) in void);
         (raise (Return_label_exc void)) end) with
        Return_label_exc jessie_<somenum> ->
        (return_label: begin   (return := !__retres); (raise Return) end) end
      end))) end))))))))); absurd  end with Return -> !return end))
  { (JC_<somenum>:
    (double_value(result) = double_value(select(doubleP_doubleM_y_4,
                                         shift(y,
                                         sub_int(integer_of_int32(n_1), (1))))))) }

let interp_lin_ensures_too_low =
 fun (x_0 : doubleP pointer) (y : doubleP pointer) (n_1 : int32) (z_0 : double) (doubleP_x_3_alloc_table : doubleP alloc_table) (doubleP_y_4_alloc_table : doubleP alloc_table) (doubleP_doubleM_x_3 : (doubleP, double) memory) (doubleP_doubleM_y_4 : (doubleP, double) memory) ->
  { (le_real(double_value(z_0),
     double_value(select(doubleP_doubleM_x_3, shift(x_0, (0)))))
    and (JC_<somenum>:
        ((JC_<somenum>: ge_int(integer_of_int32(n_1), (1)))
        and ((JC_<somenum>: le_int(offset_min(doubleP_x_3_alloc_table, x_0), (0)))
            and ((JC_<somenum>:
                 ge_int(offset_max(doubleP_x_3_alloc_table, x_0),
                 sub_int(integer_of_int32(n_1), (1))))
                and ((JC_<somenum>:
                     le_int(offset_min(doubleP_y_4_alloc_table, y), (0)))
                    and ((JC_<somenum>:
                         ge_int(offset_max(doubleP_y_4_alloc_table, y),
                         sub_int(integer_of_int32(n_1), (1))))
                        and ((JC_<somenum>:
                             min_step(x_0, (0),
                             sub_int(integer_of_int32(n_1), (1)), 0x1p-900,
                             doubleP_doubleM_x_3))
                            and ((JC_<somenum>: bounded(z_0, 0x1p1022))
                                and ((JC_<somenum>:
                                     array_bounded(x_0, n_1, 0x1p1022,
                                     doubleP_doubleM_x_3))
                                    and (JC_<somenum>:
                                        array_bounded(y, n_1, 0x1p1022,
                                        doubleP_doubleM_y_4)))))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let i = ref (any_int32 void) in
     (let xim1 = ref (any_double void) in
     (let yim1 = ref (any_double void) in
     (let yi = ref (any_double void) in
     (let b_3 = ref (any_double void) in
     (let a_3 = ref (any_double void) in
     (let k_0 = ref (any_double void) in
     (let r = ref (any_double void) in
     (let __retres = ref (any_double void) in
     try
      (C_6:
      (loop_3:
      begin
        (if ((le_double_ z_0) (C_5:
                              ((safe_acc_ doubleP_doubleM_x_3) (C_4:
                                                               ((shift x_0) (0))))))
        then
         (C_3:
         begin
           (let jessie_<somenum> =
           (__retres := (C_2:
                        ((safe_acc_ doubleP_doubleM_y_4) (C_1:
                                                         ((shift y) (0)))))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (i := (safe_int32_of_integer_ (1))) in void);
       while true do
       { invariant (JC_<somenum>: true)  }
        begin
          [ { } unit reads i
            { ((JC_<somenum>:
               (forall j_1:int.
                ((le_int((0), j_1) and lt_int(j_1, integer_of_int32(i))) ->
                 gt_real(double_value(z_0),
                 double_value(select(doubleP_doubleM_x_3, shift(x_0, j_1)))))))
              and (JC_<somenum>:
                  ((JC_<somenum>: le_int((1), integer_of_int32(i)))
                  and (JC_<somenum>:
                      le_int(integer_of_int32(i), integer_of_int32(n_1)))))) } ];
         try
          begin
            (let jessie_<somenum> =
            (C_16:
            begin
              (if ((lt_int_ (integer_of_int32 !i)) (integer_of_int32 n_1))
              then void else (raise (Goto_while_0_break_exc void)));
             (if ((le_double_ z_0) (C_13:
                                   ((safe_acc_ doubleP_doubleM_x_3) (C_12:
                                                                    ((shift x_0) 
                                                                    (integer_of_int32 !i))))))
             then (raise (Goto_while_0_break_exc void)) else void);
             (i := (C_15:
                   (safe_int32_of_integer_ (C_14:
                                           ((add_int (integer_of_int32 !i)) (1))))));
             !i end) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<somenum> -> void end end done;
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_22:
      (C_27:
      begin
        void;
       (if ((eq_int_ (integer_of_int32 !i)) (integer_of_int32 n_1))
       then
        (C_21:
        begin
          (let jessie_<somenum> =
          (__retres := (C_20:
                       ((safe_acc_ doubleP_doubleM_y_4) (C_19:
                                                        ((shift y) (integer_of_int32 
                                                                    (C_18:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_17:
                                                                    ((sub_int 
                                                                    (integer_of_int32 n_1)) (1))))))))))) in
          void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (i_interp := !i) in void);
       (let jessie_<somenum> =
       (xim1 := (C_26:
                ((safe_acc_ doubleP_doubleM_x_3) (C_25:
                                                 ((shift x_0) (integer_of_int32 
                                                               (C_24:
                                                               (safe_int32_of_integer_ 
                                                                (C_23:
                                                                ((sub_int 
                                                                  (integer_of_int32 !i)) (1))))))))))) in
       void); [ { } unit reads xim1 { (JC_<somenum>: bounded(xim1, 0x1p1022)) } ];
       void;
       [ { } unit reads i
         { (JC_<somenum>:
           bounded(select(doubleP_doubleM_x_3,
                   shift(x_0, integer_of_int32(i))),
           0x1p1022)) } ]; void;
       [ { } unit reads i,xim1
         { (JC_<somenum>:
           ge_real(sub_real(double_value(select(doubleP_doubleM_x_3,
                                         shift(x_0, integer_of_int32(i)))),
                   double_value(xim1)),
           0x1p-900)) } ]; void;
       (let jessie_<somenum> =
       (C_35:
       begin
         (yim1 := (C_34:
                  ((safe_acc_ doubleP_doubleM_y_4) (C_33:
                                                   ((shift y) (integer_of_int32 
                                                               (C_32:
                                                               (safe_int32_of_integer_ 
                                                                (C_31:
                                                                ((sub_int 
                                                                  (integer_of_int32 !i)) (1)))))))))));
        !yim1 end) in void);
       [ { } unit reads yim1 { (JC_<somenum>: bounded(yim1, 0x1p1022)) } ]; void;
       (let jessie_<somenum> =
       (C_39:
       begin
         (yi := (C_38:
                ((safe_acc_ doubleP_doubleM_y_4) (C_37:
                                                 ((shift y) (integer_of_int32 !i))))));
        !yi end) in void);
       [ { } unit reads yi { (JC_<somenum>: bounded(yi, 0x1p1022)) } ]; void;
       [ { } unit reads i,xim1
         { (JC_<somenum>:
           (le_real(double_value(xim1), double_value(z_0))
           and le_real(double_value(z_0),
               double_value(select(doubleP_doubleM_x_3,
                            shift(x_0, integer_of_int32(i))))))) } ]; void;
       (let jessie_<somenum> =
       (C_45:
       begin
         (b_3 := (C_44:
                 (JC_<somenum>:
                 (((sub_double_safe nearest_even) (C_43:
                                                  ((safe_acc_ doubleP_doubleM_x_3) 
                                                   (C_42:
                                                   ((shift x_0) (integer_of_int32 !i)))))) !xim1))));
        !b_3 end) in void);
       [ { } unit reads b_3
         { (JC_<somenum>: le_real(0x1p-900, double_value(b_3))) } ]; void;
       [ { } unit reads b_3 { (JC_<somenum>: lt_real(0.0, double_value(b_3))) } ];
       void;
       (let jessie_<somenum> =
       (C_49:
       begin
         (a_3 := (C_48:
                 (JC_<somenum>: (((sub_double_safe nearest_even) z_0) !xim1))));
        !a_3 end) in void);
       [ { } unit reads i,xim1
         { (JC_<somenum>:
           (le_real(0.0, sub_real(double_value(z_0), double_value(xim1)))
           and le_real(sub_real(double_value(z_0), double_value(xim1)),
               sub_real(double_value(select(doubleP_doubleM_x_3,
                                     shift(x_0, integer_of_int32(i)))),
               double_value(xim1))))) } ]; void;
       [ { } unit reads a_3,b_3
         { (JC_<somenum>:
           (le_real(0.0, double_value(a_3))
           and le_real(double_value(a_3), double_value(b_3)))) } ]; void;
       (let jessie_<somenum> =
       (C_53:
       begin
         (k_0 := (C_52:
                 (JC_<somenum>: (((div_double_safe nearest_even) !a_3) !b_3))));
        !k_0 end) in void);
       [ { } unit reads k_0
         { (JC_<somenum>:
           (le_real(0.0, double_value(k_0))
           and le_real(double_value(k_0), 1.0))) } ]; void;
       (let jessie_<somenum> =
       (C_58:
       begin
         (r := (C_57:
               (JC_<somenum>:
               (((add_double_safe nearest_even) !yim1) (C_56:
                                                       (JC_<somenum>:
                                                       (((mul_double_safe nearest_even) !k_0) 
                                                        (C_55:
                                                        (JC_<somenum>:
                                                        (((sub_double_safe nearest_even) !yi) !yim1))))))))));
        !r end) in void);
       [ { } unit reads i
         { (JC_<somenum>:
           (let k2 =
                 div_real(sub_real(double_value(z_0),
                          double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0,
                                       sub_int(integer_of_int32(i), (1)))))),
                 sub_real(double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0, integer_of_int32(i)))),
                 double_value(select(doubleP_doubleM_x_3,
                              shift(x_0, sub_int(integer_of_int32(i), (1))))))) in
            (le_real(0.0, k2) and le_real(k2, 1.0)))) } ]; void;
       [ { } unit reads i,r
         { (JC_<somenum>:
           (let k2_0 =
                 div_real(sub_real(double_value(z_0),
                          double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0,
                                       sub_int(integer_of_int32(i), (1)))))),
                 sub_real(double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0, integer_of_int32(i)))),
                 double_value(select(doubleP_doubleM_x_3,
                              shift(x_0, sub_int(integer_of_int32(i), (1))))))) in
            (let exact_result =
                  add_real(double_value(select(doubleP_doubleM_y_4,
                                        shift(y,
                                        sub_int(integer_of_int32(i), (1))))),
                  mul_real(k2_0,
                  sub_real(double_value(select(doubleP_doubleM_y_4,
                                        shift(y, integer_of_int32(i)))),
                  double_value(select(doubleP_doubleM_y_4,
                               shift(y, sub_int(integer_of_int32(i), (1)))))))) in
             le_real(abs_real(sub_real(double_value(r), exact_result)),
             0x1p-10)))) } ]; void;
       try
        (C_61:
        begin
          (let jessie_<somenum> = (__retres := !r) in void);
         (raise (Return_label_exc void)) end) with
        Return_label_exc jessie_<somenum> ->
        (return_label: begin   (return := !__retres); (raise Return) end) end
      end))) end))))))))); absurd  end with Return -> !return end))
  { (JC_<somenum>:
    (double_value(result) = double_value(select(doubleP_doubleM_y_4,
                                         shift(y, (0)))))) }

let interp_lin_safety =
 fun (x_0 : doubleP pointer) (y : doubleP pointer) (n_1 : int32) (z_0 : double) (doubleP_x_3_alloc_table : doubleP alloc_table) (doubleP_y_4_alloc_table : doubleP alloc_table) (doubleP_doubleM_x_3 : (doubleP, double) memory) (doubleP_doubleM_y_4 : (doubleP, double) memory) ->
  { (JC_<somenum>:
    ((JC_<somenum>: ge_int(integer_of_int32(n_1), (1)))
    and ((JC_<somenum>: le_int(offset_min(doubleP_x_3_alloc_table, x_0), (0)))
        and ((JC_<somenum>:
             ge_int(offset_max(doubleP_x_3_alloc_table, x_0),
             sub_int(integer_of_int32(n_1), (1))))
            and ((JC_<somenum>: le_int(offset_min(doubleP_y_4_alloc_table, y), (0)))
                and ((JC_<somenum>:
                     ge_int(offset_max(doubleP_y_4_alloc_table, y),
                     sub_int(integer_of_int32(n_1), (1))))
                    and ((JC_<somenum>:
                         min_step(x_0, (0),
                         sub_int(integer_of_int32(n_1), (1)), 0x1p-900,
                         doubleP_doubleM_x_3))
                        and ((JC_<somenum>: bounded(z_0, 0x1p1022))
                            and ((JC_<somenum>:
                                 array_bounded(x_0, n_1, 0x1p1022,
                                 doubleP_doubleM_x_3))
                                and (JC_<somenum>:
                                    array_bounded(y, n_1, 0x1p1022,
                                    doubleP_doubleM_y_4))))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let i = ref (any_int32 void) in
     (let xim1 = ref (any_double void) in
     (let yim1 = ref (any_double void) in
     (let yi = ref (any_double void) in
     (let b_3 = ref (any_double void) in
     (let a_3 = ref (any_double void) in
     (let k_0 = ref (any_double void) in
     (let r = ref (any_double void) in
     (let __retres = ref (any_double void) in
     try
      (C_6:
      (loop_1:
      begin
        (if ((le_double_ z_0) (C_5:
                              (JC_<somenum>:
                              (((acc_ doubleP_x_3_alloc_table) doubleP_doubleM_x_3) x_0))))
        then
         (C_3:
         begin
           (let jessie_<somenum> =
           (__retres := (C_2:
                        (JC_<somenum>:
                        (((acc_ doubleP_y_4_alloc_table) doubleP_doubleM_y_4) y)))) in
           void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (i := (safe_int32_of_integer_ (1))) in void);
       while true do
       { invariant (JC_<somenum>: true)
         variant (JC_<somenum> : sub_int(integer_of_int32(n_1), integer_of_int32(i))) }
        begin
          [ { } unit reads i
            { ((JC_<somenum>:
               (forall j_1:int.
                ((le_int((0), j_1) and lt_int(j_1, integer_of_int32(i))) ->
                 gt_real(double_value(z_0),
                 double_value(select(doubleP_doubleM_x_3, shift(x_0, j_1)))))))
              and (JC_<somenum>:
                  ((JC_<somenum>: le_int((1), integer_of_int32(i)))
                  and (JC_<somenum>:
                      le_int(integer_of_int32(i), integer_of_int32(n_1)))))) } ];
         try
          begin
            (let jessie_<somenum> =
            (C_16:
            begin
              (if ((lt_int_ (integer_of_int32 !i)) (integer_of_int32 n_1))
              then void else (raise (Goto_while_0_break_exc void)));
             (if ((le_double_ z_0) (C_13:
                                   (JC_<somenum>:
                                   ((((offset_acc_ doubleP_x_3_alloc_table) doubleP_doubleM_x_3) x_0) 
                                    (integer_of_int32 !i)))))
             then (raise (Goto_while_0_break_exc void)) else void);
             (i := (C_15:
                   (JC_<somenum>:
                   (int32_of_integer_ (C_14:
                                      ((add_int (integer_of_int32 !i)) (1)))))));
             !i end) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<somenum> -> void end end done;
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_22:
      (C_27:
      begin
        void;
       (if ((eq_int_ (integer_of_int32 !i)) (integer_of_int32 n_1))
       then
        (C_21:
        begin
          (let jessie_<somenum> =
          (__retres := (C_20:
                       (JC_<somenum>:
                       ((((offset_acc_ doubleP_y_4_alloc_table) doubleP_doubleM_y_4) y) 
                        (integer_of_int32 (C_18:
                                          (JC_<somenum>:
                                          (int32_of_integer_ (C_17:
                                                             ((sub_int 
                                                               (integer_of_int32 n_1)) (1))))))))))) in
          void); (raise (Return_label_exc void)) end) else void);
       (let jessie_<somenum> = (i_interp := !i) in void);
       (let jessie_<somenum> =
       (xim1 := (C_26:
                (JC_<somenum>:
                ((((offset_acc_ doubleP_x_3_alloc_table) doubleP_doubleM_x_3) x_0) 
                 (integer_of_int32 (C_24:
                                   (JC_<somenum>:
                                   (int32_of_integer_ (C_23:
                                                      ((sub_int (integer_of_int32 !i)) (1))))))))))) in
       void); [ { } unit reads xim1 { (JC_<somenum>: bounded(xim1, 0x1p1022)) } ];
       void;
       [ { } unit reads i
         { (JC_<somenum>:
           bounded(select(doubleP_doubleM_x_3,
                   shift(x_0, integer_of_int32(i))),
           0x1p1022)) } ]; void;
       [ { } unit reads i,xim1
         { (JC_<somenum>:
           ge_real(sub_real(double_value(select(doubleP_doubleM_x_3,
                                         shift(x_0, integer_of_int32(i)))),
                   double_value(xim1)),
           0x1p-900)) } ]; void;
       (let jessie_<somenum> =
       (C_35:
       begin
         (yim1 := (C_34:
                  (JC_<somenum>:
                  ((((offset_acc_ doubleP_y_4_alloc_table) doubleP_doubleM_y_4) y) 
                   (integer_of_int32 (C_32:
                                     (JC_<somenum>:
                                     (int32_of_integer_ (C_31:
                                                        ((sub_int (integer_of_int32 !i)) (1)))))))))));
        !yim1 end) in void);
       [ { } unit reads yim1 { (JC_<somenum>: bounded(yim1, 0x1p1022)) } ]; void;
       (let jessie_<somenum> =
       (C_39:
       begin
         (yi := (C_38:
                (JC_<somenum>:
                ((((offset_acc_ doubleP_y_4_alloc_table) doubleP_doubleM_y_4) y) 
                 (integer_of_int32 !i))))); !yi end) in void);
       [ { } unit reads yi { (JC_<somenum>: bounded(yi, 0x1p1022)) } ]; void;
       [ { } unit reads i,xim1
         { (JC_<somenum>:
           (le_real(double_value(xim1), double_value(z_0))
           and le_real(double_value(z_0),
               double_value(select(doubleP_doubleM_x_3,
                            shift(x_0, integer_of_int32(i))))))) } ]; void;
       (let jessie_<somenum> =
       (C_45:
       begin
         (b_3 := (C_44:
                 (JC_<somenum>:
                 (((sub_double nearest_even) (C_43:
                                             (JC_<somenum>:
                                             ((((offset_acc_ doubleP_x_3_alloc_table) doubleP_doubleM_x_3) x_0) 
                                              (integer_of_int32 !i))))) !xim1))));
        !b_3 end) in void);
       [ { } unit reads b_3 { (JC_<somenum>: le_real(0x1p-900, double_value(b_3))) } ];
       void;
       [ { } unit reads b_3 { (JC_<somenum>: lt_real(0.0, double_value(b_3))) } ];
       void;
       (let jessie_<somenum> =
       (C_49:
       begin
         (a_3 := (C_48: (JC_<somenum>: (((sub_double nearest_even) z_0) !xim1))));
        !a_3 end) in void);
       [ { } unit reads i,xim1
         { (JC_<somenum>:
           (le_real(0.0, sub_real(double_value(z_0), double_value(xim1)))
           and le_real(sub_real(double_value(z_0), double_value(xim1)),
               sub_real(double_value(select(doubleP_doubleM_x_3,
                                     shift(x_0, integer_of_int32(i)))),
               double_value(xim1))))) } ]; void;
       [ { } unit reads a_3,b_3
         { (JC_<somenum>:
           (le_real(0.0, double_value(a_3))
           and le_real(double_value(a_3), double_value(b_3)))) } ]; void;
       (let jessie_<somenum> =
       (C_53:
       begin
         (k_0 := (C_52: (JC_<somenum>: (((div_double nearest_even) !a_3) !b_3))));
        !k_0 end) in void);
       [ { } unit reads k_0
         { (JC_<somenum>:
           (le_real(0.0, double_value(k_0))
           and le_real(double_value(k_0), 1.0))) } ]; void;
       (let jessie_<somenum> =
       (C_58:
       begin
         (r := (C_57:
               (JC_<somenum>:
               (((add_double nearest_even) !yim1) (C_56:
                                                  (JC_<somenum>:
                                                  (((mul_double nearest_even) !k_0) 
                                                   (C_55:
                                                   (JC_<somenum>:
                                                   (((sub_double nearest_even) !yi) !yim1))))))))));
        !r end) in void);
       [ { } unit reads i
         { (JC_<somenum>:
           (let k2 =
                 div_real(sub_real(double_value(z_0),
                          double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0,
                                       sub_int(integer_of_int32(i), (1)))))),
                 sub_real(double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0, integer_of_int32(i)))),
                 double_value(select(doubleP_doubleM_x_3,
                              shift(x_0, sub_int(integer_of_int32(i), (1))))))) in
            (le_real(0.0, k2) and le_real(k2, 1.0)))) } ]; void;
       [ { } unit reads i,r
         { (JC_<somenum>:
           (let k2_0 =
                 div_real(sub_real(double_value(z_0),
                          double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0,
                                       sub_int(integer_of_int32(i), (1)))))),
                 sub_real(double_value(select(doubleP_doubleM_x_3,
                                       shift(x_0, integer_of_int32(i)))),
                 double_value(select(doubleP_doubleM_x_3,
                              shift(x_0, sub_int(integer_of_int32(i), (1))))))) in
            (let exact_result =
                  add_real(double_value(select(doubleP_doubleM_y_4,
                                        shift(y,
                                        sub_int(integer_of_int32(i), (1))))),
                  mul_real(k2_0,
                  sub_real(double_value(select(doubleP_doubleM_y_4,
                                        shift(y, integer_of_int32(i)))),
                  double_value(select(doubleP_doubleM_y_4,
                               shift(y, sub_int(integer_of_int32(i), (1)))))))) in
             le_real(abs_real(sub_real(double_value(r), exact_result)),
             0x1p-10)))) } ]; void;
       try
        (C_61:
        begin
          (let jessie_<somenum> = (__retres := !r) in void);
         (raise (Return_label_exc void)) end) with
        Return_label_exc jessie_<somenum> ->
        (return_label: begin   (return := !__retres); (raise Return) end) end
      end))) end))))))))); absurd  end with Return -> !return end)) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C floats_interp2.jessie --quiet -f floats_interp2.makefile project
why --project [...] why/floats_interp2.why
<project name="floats_interp2" context="why/floats_interp2_ctx.why">
  <lemma name="min_step_increasing">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/floats_interp2_po1.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "40" begin = "4" end = "211"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="div_bounds">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/floats_interp2_po2.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "54" begin = "4" end = "100"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="round_0">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/floats_interp2_po3.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "60" begin = "4" end = "59"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="round_1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/floats_interp2_po4.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "61" begin = "4" end = "59"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="round_div">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/floats_interp2_po5.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "65" begin = "4" end = "127"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <function name="Lemma round_div">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Lemma round_1">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Lemma round_0">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Lemma min_step_increasing">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Lemma div_bounds">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Function interp_lin">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/floats_interp2_po6.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "98" begin = "21" end = "63"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/floats_interp2_po7.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "97" begin = "21" end = "27"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/floats_interp2_po8.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "97" begin = "26" end = "32"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/floats_interp2_po9.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "98" begin = "21" end = "63"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/floats_interp2_po10.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "97" begin = "21" end = "27"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/floats_interp2_po11.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "97" begin = "26" end = "32"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/floats_interp2_po12.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "105" begin = "13" end = "35"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po13.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "106" begin = "13" end = "35"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po14.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "107" begin = "13" end = "36"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po15.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "109" begin = "13" end = "35"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po16.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "111" begin = "13" end = "33"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po17.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "112" begin = "13" end = "30"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po18.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "112" begin = "13" end = "30"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po19.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "114" begin = "13" end = "26"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po20.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "115" begin = "13" end = "20"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po21.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "117" begin = "13" end = "41"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po22.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "117" begin = "13" end = "41"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po23.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "118" begin = "13" end = "26"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po24.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "118" begin = "13" end = "26"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po25.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "120" begin = "13" end = "28"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po26.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "120" begin = "13" end = "28"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po27.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "123" begin = "10" end = "75"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po28.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "127" begin = "10" end = "152"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp2_po29.why">
      <location file = "why/floats_interp2.why" line = "896" begin = "5" end = "16"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/floats_interp2_po40.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "95" begin = "11" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po41.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "95" begin = "11" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po42.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "95" begin = "24" end = "28"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po43.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "95" begin = "24" end = "28"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po44.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "101" begin = "32" end = "36"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po45.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "101" begin = "32" end = "36"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po46.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "101" begin = "17" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po47.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "101" begin = "17" end = "20"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po48.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "99" begin = "19" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/floats_interp2_po49.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "99" begin = "19" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/floats_interp2_po50.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "102" begin = "21" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po51.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "102" begin = "21" end = "24"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po52.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "102" begin = "19" end = "25"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po53.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "102" begin = "19" end = "25"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po54.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "104" begin = "18" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po55.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "104" begin = "18" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po56.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "104" begin = "16" end = "22"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po57.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "104" begin = "16" end = "22"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po58.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "108" begin = "18" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po59.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "108" begin = "18" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po60.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "108" begin = "16" end = "22"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po61.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "108" begin = "16" end = "22"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po62.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "110" begin = "14" end = "18"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po63.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "110" begin = "14" end = "18"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po64.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "113" begin = "13" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po65.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "113" begin = "13" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp2_po66.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "113" begin = "13" end = "24"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po67.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "116" begin = "13" end = "21"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po68.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "119" begin = "13" end = "16"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po69.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "119" begin = "13" end = "16"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po70.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "121" begin = "21" end = "28"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po71.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "121" begin = "18" end = "29"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po72.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "121" begin = "13" end = "29"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/floats_interp2_po73.why">
      <location file = "why/floats_interp2.why" line = "1954" begin = "70" end = "74"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Behavior `too_low'">
    <goal why_file="why/floats_interp2_po38.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "80" begin = "14" end = "29"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/floats_interp2_po39.why">
      <location file = "why/floats_interp2.why" line = "1705" begin = "5" end = "138"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Behavior `too_high'">
    <goal why_file="why/floats_interp2_po36.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "83" begin = "14" end = "31"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/floats_interp2_po37.why">
      <location file = "why/floats_interp2.why" line = "1449" begin = "5" end = "211"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Behavior `in_interval'">
    <goal why_file="why/floats_interp2_po30.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "86" begin = "14" end = "27"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/floats_interp2_po31.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "86" begin = "19" end = "34"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/floats_interp2_po32.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "87" begin = "14" end = "31"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/floats_interp2_po33.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "87" begin = "30" end = "46"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/floats_interp2_po34.why">
      <location file = "PPCHOME/tests/jessie/floats_interp2.c" line = "89" begin = "8" end = "192"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/floats_interp2_po35.why">
      <location file = "why/floats_interp2.why" line = "1152" begin = "5" end = "2455"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type mode =
  | nearest_even
  | to_zero
  | up
  | down
  | nearest_away

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom exact_round_double_for_doubles:
  (forall x:double.
    (forall m:mode. (round_double(m, double_value(x)) = double_value(x))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom exact_round_single_for_singles:
  (forall x:single.
    (forall m:mode. (round_single(m, single_value(x)) = single_value(x))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

axiom single_value_is_bounded:
  (forall x:single. (abs_real(single_value(x)) <= max_single))

axiom double_value_is_bounded:
  (forall x:double. (abs_real(double_value(x)) <= max_double))

predicate single_of_real_post(m: mode, x: real, res: single) =
  ((single_value(res) = round_single(m, x)) and
   ((single_exact(res) = x) and (single_model(res) = x)))

predicate single_of_double_post(m: mode, x: double, res: single) =
  ((single_value(res) = round_single(m, double_value(x))) and
   ((single_exact(res) = double_exact(x)) and
    (single_model(res) = double_model(x))))

predicate add_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) + single_value(y)))) and
   ((single_exact(res) = (single_exact(x) + single_exact(y))) and
    (single_model(res) = (single_model(x) + single_model(y)))))

predicate sub_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) - single_value(y)))) and
   ((single_exact(res) = (single_exact(x) - single_exact(y))) and
    (single_model(res) = (single_model(x) - single_model(y)))))

predicate mul_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) * single_value(y)))) and
   ((single_exact(res) = (single_exact(x) * single_exact(y))) and
    (single_model(res) = (single_model(x) * single_model(y)))))

predicate div_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m, div_real(single_value(x),
   single_value(y)))) and
   ((single_exact(res) = div_real(single_exact(x), single_exact(y))) and
    (single_model(res) = div_real(single_model(x), single_model(y)))))

predicate sqrt_single_post(m: mode, x: single, res: single) =
  ((single_value(res) = round_single(m, sqrt_real(single_value(x)))) and
   ((single_exact(res) = sqrt_real(single_exact(x))) and
    (single_model(res) = sqrt_real(single_model(x)))))

predicate neg_single_post(x: single, res: single) =
  ((single_value(res) = (-single_value(x))) and
   ((single_exact(res) = (-single_exact(x))) and
    (single_model(res) = (-single_model(x)))))

predicate abs_single_post(x: single, res: single) =
  ((single_value(res) = abs_real(single_value(x))) and
   ((single_exact(res) = abs_real(single_exact(x))) and
    (single_model(res) = abs_real(single_model(x)))))

predicate double_of_real_post(m: mode, x: real, res: double) =
  ((double_value(res) = round_double(m, x)) and
   ((double_exact(res) = x) and (double_model(res) = x)))

predicate double_of_single_post(x: single, res: double) =
  ((double_value(res) = single_value(x)) and
   ((double_exact(res) = single_exact(x)) and
    (double_model(res) = single_model(x))))

predicate add_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) + double_value(y)))) and
   ((double_exact(res) = (double_exact(x) + double_exact(y))) and
    (double_model(res) = (double_model(x) + double_model(y)))))

predicate sub_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) - double_value(y)))) and
   ((double_exact(res) = (double_exact(x) - double_exact(y))) and
    (double_model(res) = (double_model(x) - double_model(y)))))

predicate mul_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) * double_value(y)))) and
   ((double_exact(res) = (double_exact(x) * double_exact(y))) and
    (double_model(res) = (double_model(x) * double_model(y)))))

predicate div_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m, div_real(double_value(x),
   double_value(y)))) and
   ((double_exact(res) = div_real(double_exact(x), double_exact(y))) and
    (double_model(res) = div_real(double_model(x), double_model(y)))))

predicate sqrt_double_post(m: mode, x: double, res: double) =
  ((double_value(res) = round_double(m, sqrt_real(double_value(x)))) and
   ((double_exact(res) = sqrt_real(double_exact(x))) and
    (double_model(res) = sqrt_real(double_model(x)))))

predicate neg_double_post(x: double, res: double) =
  ((double_value(res) = (-double_value(x))) and
   ((double_exact(res) = (-double_exact(x))) and
    (double_model(res) = (-double_model(x)))))

predicate abs_double_post(x: double, res: double) =
  ((double_value(res) = abs_real(double_value(x))) and
   ((double_exact(res) = abs_real(double_exact(x))) and
    (double_model(res) = abs_real(double_model(x)))))

type charP

type doubleP

type int32

type int8

type padding

type uint8

type unsigned_charP

type voidP

logic integer_of_int32 : int32 -> int

predicate bounded(z: double, bound_1: real) =
  (((-bound_1) <= double_value(z)) and (double_value(z) <= bound_1))

predicate array_bounded(t_1: doubleP pointer, n: int32, bound_2: real,
  doubleP_doubleM_t_1_2_at_L: (doubleP, double) memory) =
  (forall i_3:int.
    (((0 <= i_3) and (i_3 < integer_of_int32(n))) ->
     bounded(select(doubleP_doubleM_t_1_2_at_L, shift(t_1, i_3)), bound_2)))

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic doubleP_tag : doubleP tag_id

axiom doubleP_int: (int_of_tag(doubleP_tag) = 1)

logic doubleP_of_pointer_address : unit pointer -> doubleP pointer

axiom doubleP_of_pointer_address_of_pointer_addr:
  (forall p:doubleP pointer.
    (p = doubleP_of_pointer_address(pointer_address(p))))

axiom doubleP_parenttag_bottom: parenttag(doubleP_tag, bottom_tag)

axiom doubleP_tags:
  (forall x:doubleP pointer.
    (forall doubleP_tag_table:doubleP tag_table.
      instanceof(doubleP_tag_table, x, doubleP_tag)))

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint8 : uint8 -> int

predicate eq_uint8(x: uint8, y: uint8) =
  (integer_of_uint8(x) = integer_of_uint8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32 [(integer_of_int32(x) = integer_of_int32(y))].
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8 [(integer_of_int8(x) = integer_of_int8(y))].
      ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_doubleP(p: doubleP pointer, a: int,
  doubleP_alloc_table: doubleP alloc_table) =
  (offset_min(doubleP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

predicate min_step(t: doubleP pointer, a: int, b: int, bound: real,
  doubleP_doubleM_t_1_at_L: (doubleP, double) memory) =
  (forall i_1:int.
    (((a < i_1) and (i_1 <= b)) ->
     ((double_value(select(doubleP_doubleM_t_1_at_L, shift(t,
     i_1))) - double_value(select(doubleP_doubleM_t_1_at_L, shift(t,
     (i_1 - 1))))) >= bound)))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_doubleP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(doubleP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_doubleP(p: doubleP pointer, b: int,
  doubleP_alloc_table: doubleP alloc_table) =
  (offset_max(doubleP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_doubleP(p: doubleP pointer, a: int, b: int,
  doubleP_alloc_table: doubleP alloc_table) =
  ((offset_min(doubleP_alloc_table, p) = a) and
   (offset_max(doubleP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_doubleP(p: doubleP pointer, a: int, b: int,
  doubleP_alloc_table: doubleP alloc_table) =
  ((offset_min(doubleP_alloc_table, p) = a) and
   (offset_max(doubleP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint8_of_integer : int -> uint8

axiom uint8_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 255)) -> (integer_of_uint8(uint8_of_integer(x)) = x)))

axiom uint8_extensionality:
  (forall x:uint8.
    (forall y:uint8 [(integer_of_uint8(x) = integer_of_uint8(y))].
      ((integer_of_uint8(x) = integer_of_uint8(y)) -> (x = y))))

axiom uint8_range:
  (forall x:uint8.
    ((0 <= integer_of_uint8(x)) and (integer_of_uint8(x) <= 255)))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_doubleP(p: doubleP pointer, a: int, b: int,
  doubleP_alloc_table: doubleP alloc_table) =
  ((offset_min(doubleP_alloc_table, p) <= a) and
   (offset_max(doubleP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_doubleP(p: doubleP pointer, a: int, b: int,
  doubleP_alloc_table: doubleP alloc_table) =
  ((offset_min(doubleP_alloc_table, p) <= a) and
   (offset_max(doubleP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

