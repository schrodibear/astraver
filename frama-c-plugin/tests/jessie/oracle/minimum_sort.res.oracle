Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only minimum_sort.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD minimum_sort.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir minimum_sort.jessie
[jessie] File minimum_sort.jessie/minimum_sort.jc written.
[jessie] File minimum_sort.jessie/minimum_sort.cloc written.
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

tag int_P = {
  integer int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  integer char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

predicate Swap{L1, L2}(int_P[..] a, integer i, integer j) =
(((\at((a + i).int_M,L1) == \at((a + j).int_M,L2)) &&
   (\at((a + j).int_M,L1) == \at((a + i).int_M,L2))) &&
  (\forall integer k;
    (((k != i) && (k != j)) ==>
      (\at((a + k).int_M,L1) == \at((a + k).int_M,L2)))))

predicate Permut{L1, L2}(int_P[..] a_0, integer l, integer h) {
case Permut_refl{L}: (\forall int_P[..] a_1;
                       (\forall integer l_0;
                         (\forall integer h_0;
                           Permut{L, L}(a_1, l_0, h_0))));
  
  case Permut_sym{L1, L2}: (\forall int_P[..] a_2;
                             (\forall integer l_1;
                               (\forall integer h_1;
                                 (Permut{L1,
                                   L2}(a_2, l_1, h_1) ==>
                                   Permut{L2,
                                   L1}(a_2, l_1, h_1)))));
  
  case Permut_trans{L1, L2, L3}: (\forall int_P[..] a_3;
                                   (\forall integer l_2;
                                     (\forall integer h_2;
                                       ((Permut{L1,
                                          L2}(a_3, l_2, h_2) &&
                                          Permut{L2,
                                          L3}(a_3, l_2, h_2)) ==>
                                         Permut{L1,
                                         L3}(a_3, l_2, h_2)))));
  
  case Permut_swap{L1, L2}: (\forall int_P[..] a_4;
                              (\forall integer l_3;
                                (\forall integer h_3;
                                  (\forall integer i_0;
                                    (\forall integer j_0;
                                      (((((l_3 <= i_0) && (i_0 <= h_3)) &&
                                          ((l_3 <= j_0) && (j_0 <= h_3))) &&
                                         Swap{L1,
                                         L2}(a_4, i_0, j_0)) ==>
                                        Permut{L1,
                                        L2}(a_4, l_3, h_3)))))));
  
}

predicate Sorted{L}(int_P[..] a_5, integer l_4, integer h_4) =
(\forall integer i_1;
  (((l_4 <= i_1) && (i_1 < h_4)) ==>
    ((a_5 + i_1).int_M <= (a_5 + (i_1 + 1)).int_M)))

unit swap(int_P[..] t, integer i, integer j)
  requires (C_13 : (((C_15 : (\offset_min(t) <= i)) &&
                      (C_16 : (\offset_max(t) >= i))) &&
                     ((C_18 : (\offset_min(t) <= j)) &&
                       (C_19 : (\offset_max(t) >= j)))));
behavior default:
  assigns (t + i).int_M,
  (t + j).int_M;
  ensures (C_12 : Swap{Old, Here}(\at(t,Old), \at(i,Old), \at(j,Old)));
{  
   (var integer tmp);
   
   {  (C_3 : (tmp = (C_2 : (C_1 : (t + i)).int_M)));
      (C_8 : ((C_7 : (C_6 : (t + i)).int_M) = (C_5 : (C_4 : (t + j)).int_M)));
      (C_11 : ((C_10 : (C_9 : (t + j)).int_M) = tmp));
      
      (return ())
   }
}

unit min_sort(int_P[..] t_0, integer n)
  requires (C_60 : ((C_61 : (\offset_min(t_0) <= 0)) &&
                     (C_62 : (\offset_max(t_0) >= (n - 1)))));
behavior default:
  ensures (C_57 : true);
behavior sorted:
  ensures (C_58 : Sorted{Here}(\at(t_0,Old), 0, (\at(n,Old) - 1)));
behavior permutation:
  ensures (C_59 : Permut{Old, Here}(\at(t_0,Old), 0, (\at(n,Old) - 1)));
{  
   (var integer i_0);
   
   (var integer j_0);
   
   (var integer mi);
   
   (var integer mv);
   
   {  (if (n <= 0) then 
      (goto return_label) else ());
      (C_20 : (i_0 = 0));
      
      {  
         loop 
         behavior default:
           invariant (C_26 : ((C_27 : (0 <= i_0)) && (C_28 : (i_0 < n))));
         behavior sorted:
           invariant (C_23 : ((C_24 : Sorted{Here}(t_0, 0, i_0)) &&
                               (C_25 : (\forall integer k1;
                                         (\forall integer k2;
                                           (((0 <= k1) &&
                                              ((k1 < i_0) &&
                                                ((i_0 <= k2) && (k2 < n)))) ==>
                                             ((t_0 + k1).int_M <=
                                               (t_0 + k2).int_M)))))));
         behavior permutation:
           invariant (C_22 : Permut{Pre, Here}(t_0, 0, (n - 1)));
         variant (C_21 : (n - i_0));
         while (true)
         {  
            {  (if (i_0 < (C_29 : (n - 1))) then () else 
               (goto while_0_break));
               
               {  (C_32 : (mv = (C_31 : (C_30 : (t_0 + i_0)).int_M)));
                  (C_33 : (mi = i_0));
                  (C_35 : (j_0 = (C_34 : (i_0 + 1))));
                  
                  {  
                     loop 
                     behavior default:
                       invariant (C_41 : ((C_42 : (i_0 < j_0)) &&
                                           ((C_44 : (i_0 <= mi)) &&
                                             (C_45 : (mi < n)))));
                     behavior sorted:
                       invariant (C_38 : ((C_39 : (mv == (t_0 + mi).int_M)) &&
                                           (C_40 : (\forall integer k_0;
                                                     (((i_0 <= k_0) &&
                                                        (k_0 < j_0)) ==>
                                                       ((t_0 + k_0).int_M >=
                                                         mv))))));
                     behavior permutation:
                       invariant (C_37 : Permut{Pre, Here}(t_0, 0, (n - 1)));
                     variant (C_36 : (n - j_0));
                     while (true)
                     {  
                        {  (if (j_0 < n) then () else 
                           (goto while_1_break));
                           
                           {  (if ((C_51 : (C_50 : (t_0 + j_0)).int_M) < mv) then 
                              {  (C_46 : (mi = j_0));
                                 (C_49 : (mv = (C_48 : (C_47 : (t_0 + j_0)).int_M)))
                              } else ())
                           };
                           (C_53 : (j_0 = (C_52 : (j_0 + 1))))
                        }
                     };
                     (while_1_break : ())
                  };
                  (C_54 : swap(t_0, i_0, mi))
               };
               (C_56 : (i_0 = (C_55 : (i_0 + 1))))
            }
         };
         (while_0_break : ())
      };
      (return_label : 
      (return ()))
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs minimum_sort.jessie/minimum_sort.cloc minimum_sort.jessie/minimum_sort.jc
type char_P

type int_P

type padding

type void_P

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

predicate Swap(a:int_P pointer, i:int, j:int,
 int_P_int_M_a_1_at_L2:(int_P, int) memory,
 int_P_int_M_a_1_at_L1:(int_P, int) memory) =
 (eq_int(select(int_P_int_M_a_1_at_L1, shift(a, i)),
  select(int_P_int_M_a_1_at_L2, shift(a, j)))
 and (eq_int(select(int_P_int_M_a_1_at_L1, shift(a, j)),
      select(int_P_int_M_a_1_at_L2, shift(a, i)))
     and (forall k:int.
          ((neq_int(k, i) and neq_int(k, j)) ->
           eq_int(select(int_P_int_M_a_1_at_L1, shift(a, k)),
           select(int_P_int_M_a_1_at_L2, shift(a, k)))))))

inductive Permut: int_P pointer, int, int, (int_P, int) memory,
                  (int_P, int) memory -> prop =
 | Permut_refl: (forall int_P_int_M_a_0_2_at_L:(int_P, int) memory.
                 (forall a_1:int_P pointer.
                  (forall l_0:int.
                   (forall h_0:int.
                    Permut(a_1, l_0, h_0, int_P_int_M_a_0_2_at_L,
                    int_P_int_M_a_0_2_at_L)))))
 | Permut_sym: (forall int_P_int_M_a_0_2_at_L2:(int_P, int) memory.
                (forall int_P_int_M_a_0_2_at_L1:(int_P, int) memory.
                 (forall a_2:int_P pointer.
                  (forall l_1:int.
                   (forall h_1:int.
                    (Permut(a_2, l_1, h_1, int_P_int_M_a_0_2_at_L2,
                     int_P_int_M_a_0_2_at_L1) ->
                     Permut(a_2, l_1, h_1, int_P_int_M_a_0_2_at_L1,
                     int_P_int_M_a_0_2_at_L2)))))))
 | Permut_trans: (forall int_P_int_M_a_0_2_at_L3:(int_P, int) memory.
                  (forall int_P_int_M_a_0_2_at_L2:(int_P, int) memory.
                   (forall int_P_int_M_a_0_2_at_L1:(int_P, int) memory.
                    (forall a_3:int_P pointer.
                     (forall l_2:int.
                      (forall h_2:int.
                       ((Permut(a_3, l_2, h_2, int_P_int_M_a_0_2_at_L2,
                         int_P_int_M_a_0_2_at_L1)
                        and Permut(a_3, l_2, h_2, int_P_int_M_a_0_2_at_L3,
                            int_P_int_M_a_0_2_at_L2)) ->
                        Permut(a_3, l_2, h_2, int_P_int_M_a_0_2_at_L3,
                        int_P_int_M_a_0_2_at_L1))))))))
 | Permut_swap: (forall int_P_int_M_a_0_2_at_L2:(int_P, int) memory.
                 (forall int_P_int_M_a_0_2_at_L1:(int_P, int) memory.
                  (forall a_4:int_P pointer.
                   (forall l_3:int.
                    (forall h_3:int.
                     (forall i_0_0:int.
                      (forall j_0_0:int.
                       ((le_int(l_3, i_0_0)
                        and (le_int(i_0_0, h_3)
                            and (le_int(l_3, j_0_0)
                                and (le_int(j_0_0, h_3)
                                    and Swap(a_4, i_0_0, j_0_0,
                                        int_P_int_M_a_0_2_at_L2,
                                        int_P_int_M_a_0_2_at_L1))))) ->
                        Permut(a_4, l_3, h_3, int_P_int_M_a_0_2_at_L2,
                        int_P_int_M_a_0_2_at_L1)))))))))
 
exception Return_label_exc of unit

predicate Sorted(a_5:int_P pointer, l_4:int, h_4:int,
 int_P_int_M_a_5_3_at_L:(int_P, int) memory) =
 (forall i_1:int.
  ((le_int(l_4, i_1) and lt_int(i_1, h_4)) ->
   le_int(select(int_P_int_M_a_5_3_at_L, shift(a_5, i_1)),
   select(int_P_int_M_a_5_3_at_L, shift(a_5, add_int(i_1, (1)))))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

predicate left_valid_struct_char_P(p:char_P pointer, a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_int_P(p:int_P pointer, a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer, a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer, b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_int_P(p:int_P pointer, b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer, b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter min_sort :
 t_0:int_P pointer ->
  n:int ->
   int_P_int_M_t_0_5:(int_P, int) memory ref ->
    int_P_t_0_5_alloc_table:int_P alloc_table ->
     { } unit reads int_P_int_M_t_0_5 writes int_P_int_M_t_0_5
     { ((JC_40:
        Permut(t_0@, (0), sub_int(n@, (1)), int_P_int_M_t_0_5,
        int_P_int_M_t_0_5@))
       and (JC_38: Sorted(t_0@, (0), sub_int(n@, (1)), int_P_int_M_t_0_5))) }

parameter min_sort_requires :
 t_0:int_P pointer ->
  n:int ->
   int_P_int_M_t_0_5:(int_P, int) memory ref ->
    int_P_t_0_5_alloc_table:int_P alloc_table ->
     { (JC_27:
       ((JC_25: le_int(offset_min(int_P_t_0_5_alloc_table, t_0), (0)))
       and (JC_26:
           ge_int(offset_max(int_P_t_0_5_alloc_table, t_0), sub_int(n, (1))))))}
     unit reads int_P_int_M_t_0_5 writes int_P_int_M_t_0_5
     { ((JC_40:
        Permut(t_0@, (0), sub_int(n@, (1)), int_P_int_M_t_0_5,
        int_P_int_M_t_0_5@))
       and (JC_38: Sorted(t_0@, (0), sub_int(n@, (1)), int_P_int_M_t_0_5))) }

parameter swap :
 t:int_P pointer ->
  i_0:int ->
   j_0:int ->
    int_P_int_M_t_4:(int_P, int) memory ref ->
     int_P_t_4_alloc_table:int_P alloc_table ->
      { } unit reads int_P_int_M_t_4 writes int_P_int_M_t_4
      { (JC_18:
        ((JC_16: Swap(t@, i_0@, j_0@, int_P_int_M_t_4, int_P_int_M_t_4@))
        and (JC_17:
            not_assigns(int_P_t_4_alloc_table@, int_P_int_M_t_4@,
            int_P_int_M_t_4,
            pset_union(pset_range(pset_singleton(t@), j_0@, j_0@),
            pset_range(pset_singleton(t@), i_0@, i_0@)))))) }

parameter swap_requires :
 t:int_P pointer ->
  i_0:int ->
   j_0:int ->
    int_P_int_M_t_4:(int_P, int) memory ref ->
     int_P_t_4_alloc_table:int_P alloc_table ->
      { (JC_5:
        ((JC_1: le_int(offset_min(int_P_t_4_alloc_table, t), i_0))
        and ((JC_2: ge_int(offset_max(int_P_t_4_alloc_table, t), i_0))
            and ((JC_3: le_int(offset_min(int_P_t_4_alloc_table, t), j_0))
                and (JC_4: ge_int(offset_max(int_P_t_4_alloc_table, t), j_0))))))}
      unit reads int_P_int_M_t_4 writes int_P_int_M_t_4
      { (JC_18:
        ((JC_16: Swap(t@, i_0@, j_0@, int_P_int_M_t_4, int_P_int_M_t_4@))
        and (JC_17:
            not_assigns(int_P_t_4_alloc_table@, int_P_int_M_t_4@,
            int_P_int_M_t_4,
            pset_union(pset_range(pset_singleton(t@), j_0@, j_0@),
            pset_range(pset_singleton(t@), i_0@, i_0@)))))) }

let min_sort_ensures_default =
 fun (t_0 : int_P pointer) (n : int) (int_P_int_M_t_0_5 : (int_P, int) memory ref) (int_P_t_0_5_alloc_table : int_P alloc_table) ->
  { (JC_31:
    ((JC_29: le_int(offset_min(int_P_t_0_5_alloc_table, t_0), (0)))
    and (JC_30:
        ge_int(offset_max(int_P_t_0_5_alloc_table, t_0), sub_int(n, (1)))))) }
  (init:
  try
   begin
     (let i_0_1 = ref (any_int void) in
     (let j_0_1 = ref (any_int void) in
     (let mi = ref (any_int void) in
     (let mv = ref (any_int void) in
     try
      (let jessie_89 =
      begin
        (if ((le_int_ n) (0))
        then (let jessie_63 = (raise (Return_label_exc void)) in void)
        else void);
       (C_20:
       begin
         (let jessie_65 = (i_0_1 := (0)) in void);
        try
         (let jessie_88 =
         begin
           (loop_3:
           while true do
           { invariant
               (JC_62:
               ((JC_60: le_int((0), i_0_1)) and (JC_61: lt_int(i_0_1, n))))
              }
            begin
              [ { } unit { true } ];
             try
              (let jessie_87 =
              begin
                (let jessie_86 =
                begin
                  (if ((lt_int_ !i_0_1) (C_29: ((sub_int n) (1)))) then void
                  else
                   (let jessie_66 = (raise (Goto_while_0_break_exc void)) in
                   void));
                 (C_32:
                 begin
                   (let jessie_68 =
                   (mv := (C_31:
                          ((safe_acc_ !int_P_int_M_t_0_5) (C_30:
                                                          ((shift t_0) !i_0_1))))) in
                   void);
                  (C_33:
                  begin
                    (let jessie_70 = (mi := !i_0_1) in void);
                   (C_35:
                   begin
                     (let jessie_72 =
                     (j_0_1 := (C_34: ((add_int !i_0_1) (1)))) in void);
                    try
                     (let jessie_81 =
                     begin
                       (loop_4:
                       while true do
                       { invariant
                           (JC_69:
                           ((JC_66: lt_int(i_0_1, j_0_1))
                           and ((JC_67: le_int(i_0_1, mi))
                               and (JC_68: lt_int(mi, n)))))  }
                        begin
                          [ { } unit { true } ];
                         try
                          (let jessie_80 =
                          begin
                            (let jessie_79 =
                            begin
                              (if ((lt_int_ !j_0_1) n) then void
                              else
                               (let jessie_73 =
                               (raise (Goto_while_1_break_exc void)) in void));
                             (if ((lt_int_ (C_51:
                                           ((safe_acc_ !int_P_int_M_t_0_5) 
                                            (C_50: ((shift t_0) !j_0_1))))) !mv)
                             then
                              (let jessie_77 =
                              (C_46:
                              begin
                                (let jessie_75 = (mi := !j_0_1) in void);
                               (C_49:
                               begin
                                 (mv := (C_48:
                                        ((safe_acc_ !int_P_int_M_t_0_5) 
                                         (C_47: ((shift t_0) !j_0_1))))); !mv
                               end) end) in void) else void);
                             (C_53:
                             begin
                               (j_0_1 := (C_52: ((add_int !j_0_1) (1))));
                              !j_0_1 end) end in void);
                           (raise (Loop_continue_exc void)) end in void) with
                          Loop_continue_exc jessie_5 -> void end end done);
                      (raise (Goto_while_1_break_exc void)) end in void) with
                     Goto_while_1_break_exc jessie_1 ->
                     (while_1_break: void) end;
                    (C_54:
                    (let jessie_84 = t_0 in
                    (let jessie_83 = !i_0_1 in
                    (let jessie_82 = !mi in
                    (JC_73:
                    (((((swap jessie_84) jessie_83) jessie_82) int_P_int_M_t_0_5) int_P_t_0_5_alloc_table))))))
                   end) end) end);
                 (C_56:
                 begin   (i_0_1 := (C_55: ((add_int !i_0_1) (1)))); !i_0_1
                 end) end in void); (raise (Loop_continue_exc void)) end in
              void) with Loop_continue_exc jessie_7 -> void end end done);
          (raise (Goto_while_0_break_exc void)) end in void) with
         Goto_while_0_break_exc jessie_2 -> (while_0_break: void) end;
        (raise (Return_label_exc void)) end) end in void) with
      Return_label_exc jessie_3 -> (return_label: (raise Return)) end))));
    (raise Return) end with Return -> void end) { (JC_33: true) }

let min_sort_ensures_permutation =
 fun (t_0 : int_P pointer) (n : int) (int_P_int_M_t_0_5 : (int_P, int) memory ref) (int_P_t_0_5_alloc_table : int_P alloc_table) ->
  { (JC_31:
    ((JC_29: le_int(offset_min(int_P_t_0_5_alloc_table, t_0), (0)))
    and (JC_30:
        ge_int(offset_max(int_P_t_0_5_alloc_table, t_0), sub_int(n, (1)))))) }
  (init:
  try
   begin
     (let i_0_1 = ref (any_int void) in
     (let j_0_1 = ref (any_int void) in
     (let mi = ref (any_int void) in
     (let mv = ref (any_int void) in
     try
      (let jessie_143 =
      begin
        (if ((le_int_ n) (0))
        then (let jessie_117 = (raise (Return_label_exc void)) in void)
        else void);
       (C_20:
       begin
         (let jessie_119 = (i_0_1 := (0)) in void);
        try
         (let jessie_142 =
         begin
           (loop_7:
           while true do
           { invariant
               (JC_94:
               Permut(t_0, (0), sub_int(n, (1)), int_P_int_M_t_0_5,
               int_P_int_M_t_0_5@init))  }
            begin
              [ { } unit reads i_0_1
                { (JC_97:
                  ((JC_95: le_int((0), i_0_1)) and (JC_96: lt_int(i_0_1, n)))) } ];
             try
              (let jessie_141 =
              begin
                (let jessie_140 =
                begin
                  (if ((lt_int_ !i_0_1) (C_29: ((sub_int n) (1)))) then void
                  else
                   (let jessie_120 = (raise (Goto_while_0_break_exc void)) in
                   void));
                 (C_32:
                 begin
                   (let jessie_122 =
                   (mv := (C_31:
                          ((safe_acc_ !int_P_int_M_t_0_5) (C_30:
                                                          ((shift t_0) !i_0_1))))) in
                   void);
                  (C_33:
                  begin
                    (let jessie_124 = (mi := !i_0_1) in void);
                   (C_35:
                   begin
                     (let jessie_126 =
                     (j_0_1 := (C_34: ((add_int !i_0_1) (1)))) in void);
                    try
                     (let jessie_135 =
                     begin
                       (loop_8:
                       while true do
                       { invariant
                           (JC_101:
                           Permut(t_0, (0), sub_int(n, (1)),
                           int_P_int_M_t_0_5, int_P_int_M_t_0_5@init)) 
                          }
                        begin
                          [ { } unit reads i_0_1,j_0_1,mi
                            { (JC_105:
                              ((JC_102: lt_int(i_0_1, j_0_1))
                              and ((JC_103: le_int(i_0_1, mi))
                                  and (JC_104: lt_int(mi, n))))) } ];
                         try
                          (let jessie_134 =
                          begin
                            (let jessie_133 =
                            begin
                              (if ((lt_int_ !j_0_1) n) then void
                              else
                               (let jessie_127 =
                               (raise (Goto_while_1_break_exc void)) in void));
                             (if ((lt_int_ (C_51:
                                           ((safe_acc_ !int_P_int_M_t_0_5) 
                                            (C_50: ((shift t_0) !j_0_1))))) !mv)
                             then
                              (let jessie_131 =
                              (C_46:
                              begin
                                (let jessie_129 = (mi := !j_0_1) in void);
                               (C_49:
                               begin
                                 (mv := (C_48:
                                        ((safe_acc_ !int_P_int_M_t_0_5) 
                                         (C_47: ((shift t_0) !j_0_1))))); !mv
                               end) end) in void) else void);
                             (C_53:
                             begin
                               (j_0_1 := (C_52: ((add_int !j_0_1) (1))));
                              !j_0_1 end) end in void);
                           (raise (Loop_continue_exc void)) end in void) with
                          Loop_continue_exc jessie_5 -> void end end done);
                      (raise (Goto_while_1_break_exc void)) end in void) with
                     Goto_while_1_break_exc jessie_1 ->
                     (while_1_break: void) end;
                    (C_54:
                    (let jessie_138 = t_0 in
                    (let jessie_137 = !i_0_1 in
                    (let jessie_136 = !mi in
                    (JC_109:
                    (((((swap jessie_138) jessie_137) jessie_136) int_P_int_M_t_0_5) int_P_t_0_5_alloc_table))))))
                   end) end) end);
                 (C_56:
                 begin   (i_0_1 := (C_55: ((add_int !i_0_1) (1)))); !i_0_1
                 end) end in void); (raise (Loop_continue_exc void)) end in
              void) with Loop_continue_exc jessie_7 -> void end end done);
          (raise (Goto_while_0_break_exc void)) end in void) with
         Goto_while_0_break_exc jessie_2 -> (while_0_break: void) end;
        (raise (Return_label_exc void)) end) end in void) with
      Return_label_exc jessie_3 -> (return_label: (raise Return)) end))));
    (raise Return) end with Return -> void end)
  { (JC_39:
    Permut(t_0@, (0), sub_int(n@, (1)), int_P_int_M_t_0_5,
    int_P_int_M_t_0_5@)) }

let min_sort_ensures_sorted =
 fun (t_0 : int_P pointer) (n : int) (int_P_int_M_t_0_5 : (int_P, int) memory ref) (int_P_t_0_5_alloc_table : int_P alloc_table) ->
  { (JC_31:
    ((JC_29: le_int(offset_min(int_P_t_0_5_alloc_table, t_0), (0)))
    and (JC_30:
        ge_int(offset_max(int_P_t_0_5_alloc_table, t_0), sub_int(n, (1)))))) }
  (init:
  try
   begin
     (let i_0_1 = ref (any_int void) in
     (let j_0_1 = ref (any_int void) in
     (let mi = ref (any_int void) in
     (let mv = ref (any_int void) in
     try
      (let jessie_116 =
      begin
        (if ((le_int_ n) (0))
        then (let jessie_90 = (raise (Return_label_exc void)) in void)
        else void);
       (C_20:
       begin
         (let jessie_92 = (i_0_1 := (0)) in void);
        try
         (let jessie_115 =
         begin
           (loop_5:
           while true do
           { invariant
               (JC_76:
               ((JC_74: Sorted(t_0, (0), i_0_1, int_P_int_M_t_0_5))
               and (JC_75:
                   (forall k1:int.
                    (forall k2:int.
                     ((le_int((0), k1)
                      and (lt_int(k1, i_0_1)
                          and (le_int(i_0_1, k2) and lt_int(k2, n)))) ->
                      le_int(select(int_P_int_M_t_0_5, shift(t_0, k1)),
                      select(int_P_int_M_t_0_5, shift(t_0, k2))))))))) 
              }
            begin
              [ { } unit reads i_0_1
                { (JC_79:
                  ((JC_77: le_int((0), i_0_1)) and (JC_78: lt_int(i_0_1, n)))) } ];
             try
              (let jessie_114 =
              begin
                (let jessie_113 =
                begin
                  (if ((lt_int_ !i_0_1) (C_29: ((sub_int n) (1)))) then void
                  else
                   (let jessie_93 = (raise (Goto_while_0_break_exc void)) in
                   void));
                 (C_32:
                 begin
                   (let jessie_95 =
                   (mv := (C_31:
                          ((safe_acc_ !int_P_int_M_t_0_5) (C_30:
                                                          ((shift t_0) !i_0_1))))) in
                   void);
                  (C_33:
                  begin
                    (let jessie_97 = (mi := !i_0_1) in void);
                   (C_35:
                   begin
                     (let jessie_99 =
                     (j_0_1 := (C_34: ((add_int !i_0_1) (1)))) in void);
                    try
                     (let jessie_108 =
                     begin
                       (loop_6:
                       while true do
                       { invariant
                           (JC_85:
                           ((JC_83:
                            eq_int(mv,
                            select(int_P_int_M_t_0_5, shift(t_0, mi))))
                           and (JC_84:
                               (forall k_0:int.
                                ((le_int(i_0_1, k_0) and lt_int(k_0, j_0_1)) ->
                                 ge_int(select(int_P_int_M_t_0_5,
                                        shift(t_0, k_0)),
                                 mv))))))  }
                        begin
                          [ { } unit reads i_0_1,j_0_1,mi
                            { (JC_89:
                              ((JC_86: lt_int(i_0_1, j_0_1))
                              and ((JC_87: le_int(i_0_1, mi))
                                  and (JC_88: lt_int(mi, n))))) } ];
                         try
                          (let jessie_107 =
                          begin
                            (let jessie_106 =
                            begin
                              (if ((lt_int_ !j_0_1) n) then void
                              else
                               (let jessie_100 =
                               (raise (Goto_while_1_break_exc void)) in void));
                             (if ((lt_int_ (C_51:
                                           ((safe_acc_ !int_P_int_M_t_0_5) 
                                            (C_50: ((shift t_0) !j_0_1))))) !mv)
                             then
                              (let jessie_104 =
                              (C_46:
                              begin
                                (let jessie_102 = (mi := !j_0_1) in void);
                               (C_49:
                               begin
                                 (mv := (C_48:
                                        ((safe_acc_ !int_P_int_M_t_0_5) 
                                         (C_47: ((shift t_0) !j_0_1))))); !mv
                               end) end) in void) else void);
                             (C_53:
                             begin
                               (j_0_1 := (C_52: ((add_int !j_0_1) (1))));
                              !j_0_1 end) end in void);
                           (raise (Loop_continue_exc void)) end in void) with
                          Loop_continue_exc jessie_5 -> void end end done);
                      (raise (Goto_while_1_break_exc void)) end in void) with
                     Goto_while_1_break_exc jessie_1 ->
                     (while_1_break: void) end;
                    (C_54:
                    (let jessie_111 = t_0 in
                    (let jessie_110 = !i_0_1 in
                    (let jessie_109 = !mi in
                    (JC_93:
                    (((((swap jessie_111) jessie_110) jessie_109) int_P_int_M_t_0_5) int_P_t_0_5_alloc_table))))))
                   end) end) end);
                 (C_56:
                 begin   (i_0_1 := (C_55: ((add_int !i_0_1) (1)))); !i_0_1
                 end) end in void); (raise (Loop_continue_exc void)) end in
              void) with Loop_continue_exc jessie_7 -> void end end done);
          (raise (Goto_while_0_break_exc void)) end in void) with
         Goto_while_0_break_exc jessie_2 -> (while_0_break: void) end;
        (raise (Return_label_exc void)) end) end in void) with
      Return_label_exc jessie_3 -> (return_label: (raise Return)) end))));
    (raise Return) end with Return -> void end)
  { (JC_37: Sorted(t_0@, (0), sub_int(n@, (1)), int_P_int_M_t_0_5)) }

let min_sort_safety =
 fun (t_0 : int_P pointer) (n : int) (int_P_int_M_t_0_5 : (int_P, int) memory ref) (int_P_t_0_5_alloc_table : int_P alloc_table) ->
  { (JC_31:
    ((JC_29: le_int(offset_min(int_P_t_0_5_alloc_table, t_0), (0)))
    and (JC_30:
        ge_int(offset_max(int_P_t_0_5_alloc_table, t_0), sub_int(n, (1)))))) }
  (init:
  try
   begin
     (let i_0_1 = ref (any_int void) in
     (let j_0_1 = ref (any_int void) in
     (let mi = ref (any_int void) in
     (let mv = ref (any_int void) in
     try
      (let jessie_62 =
      begin
        (if ((le_int_ n) (0))
        then (let jessie_36 = (raise (Return_label_exc void)) in void)
        else void);
       (C_20:
       begin
         (let jessie_38 = (i_0_1 := (0)) in void);
        try
         (let jessie_61 =
         begin
           (loop_1:
           while true do
           { invariant (JC_45: true) variant (JC_59 : sub_int(n, i_0_1)) }
            begin
              [ { } unit reads i_0_1
                { (JC_43:
                  ((JC_41: le_int((0), i_0_1)) and (JC_42: lt_int(i_0_1, n)))) } ];
             try
              (let jessie_60 =
              begin
                (let jessie_59 =
                begin
                  (if ((lt_int_ !i_0_1) (C_29: ((sub_int n) (1)))) then void
                  else
                   (let jessie_39 = (raise (Goto_while_0_break_exc void)) in
                   void));
                 (C_32:
                 begin
                   (let jessie_41 =
                   (mv := (C_31:
                          (JC_47:
                          ((((offset_acc_ int_P_t_0_5_alloc_table) !int_P_int_M_t_0_5) t_0) !i_0_1)))) in
                   void);
                  (C_33:
                  begin
                    (let jessie_43 = (mi := !i_0_1) in void);
                   (C_35:
                   begin
                     (let jessie_45 =
                     (j_0_1 := (C_34: ((add_int !i_0_1) (1)))) in void);
                    try
                     (let jessie_54 =
                     begin
                       (loop_2:
                       while true do
                       { invariant (JC_53: true)
                         variant (JC_57 : sub_int(n, j_0_1)) }
                        begin
                          [ { } unit reads i_0_1,j_0_1,mi
                            { (JC_51:
                              ((JC_48: lt_int(i_0_1, j_0_1))
                              and ((JC_49: le_int(i_0_1, mi))
                                  and (JC_50: lt_int(mi, n))))) } ];
                         try
                          (let jessie_53 =
                          begin
                            (let jessie_52 =
                            begin
                              (if ((lt_int_ !j_0_1) n) then void
                              else
                               (let jessie_46 =
                               (raise (Goto_while_1_break_exc void)) in void));
                             (if ((lt_int_ (C_51:
                                           (JC_55:
                                           ((((offset_acc_ int_P_t_0_5_alloc_table) !int_P_int_M_t_0_5) t_0) !j_0_1)))) !mv)
                             then
                              (let jessie_50 =
                              (C_46:
                              begin
                                (let jessie_48 = (mi := !j_0_1) in void);
                               (C_49:
                               begin
                                 (mv := (C_48:
                                        (JC_56:
                                        ((((offset_acc_ int_P_t_0_5_alloc_table) !int_P_int_M_t_0_5) t_0) !j_0_1))));
                                !mv end) end) in void) else void);
                             (C_53:
                             begin
                               (j_0_1 := (C_52: ((add_int !j_0_1) (1))));
                              !j_0_1 end) end in void);
                           (raise (Loop_continue_exc void)) end in void) with
                          Loop_continue_exc jessie_5 -> void end end done);
                      (raise (Goto_while_1_break_exc void)) end in void) with
                     Goto_while_1_break_exc jessie_1 ->
                     (while_1_break: void) end;
                    (C_54:
                    (let jessie_57 = t_0 in
                    (let jessie_56 = !i_0_1 in
                    (let jessie_55 = !mi in
                    (JC_58:
                    (((((swap_requires jessie_57) jessie_56) jessie_55) int_P_int_M_t_0_5) int_P_t_0_5_alloc_table))))))
                   end) end) end);
                 (C_56:
                 begin   (i_0_1 := (C_55: ((add_int !i_0_1) (1)))); !i_0_1
                 end) end in void); (raise (Loop_continue_exc void)) end in
              void) with Loop_continue_exc jessie_7 -> void end end done);
          (raise (Goto_while_0_break_exc void)) end in void) with
         Goto_while_0_break_exc jessie_2 -> (while_0_break: void) end;
        (raise (Return_label_exc void)) end) end in void) with
      Return_label_exc jessie_3 -> (return_label: (raise Return)) end))));
    (raise Return) end with Return -> void end) { true }

let swap_ensures_default =
 fun (t : int_P pointer) (i_0 : int) (j_0 : int) (int_P_int_M_t_4 : (int_P, int) memory ref) (int_P_t_4_alloc_table : int_P alloc_table) ->
  { (JC_11:
    ((JC_7: le_int(offset_min(int_P_t_4_alloc_table, t), i_0))
    and ((JC_8: ge_int(offset_max(int_P_t_4_alloc_table, t), i_0))
        and ((JC_9: le_int(offset_min(int_P_t_4_alloc_table, t), j_0))
            and (JC_10: ge_int(offset_max(int_P_t_4_alloc_table, t), j_0)))))) }
  (init:
  try
   begin
     (let tmp = ref (any_int void) in
     (C_3:
     begin
       (let jessie_23 =
       (tmp := (C_2: ((safe_acc_ !int_P_int_M_t_4) (C_1: ((shift t) i_0))))) in
       void);
      (C_8:
      begin
        (let jessie_29 =
        (let jessie_25 =
        (C_5: ((safe_acc_ !int_P_int_M_t_4) (C_4: ((shift t) j_0)))) in
        (let jessie_28 = (C_6: ((shift t) i_0)) in
        (((safe_upd_ int_P_int_M_t_4) jessie_28) jessie_25))) in void);
       (C_11:
       begin
         (let jessie_35 =
         (let jessie_31 = !tmp in
         (let jessie_34 = (C_9: ((shift t) j_0)) in
         (((safe_upd_ int_P_int_M_t_4) jessie_34) jessie_31))) in void);
        (raise Return) end) end) end)); (raise Return) end with Return ->
   void end)
  { (JC_15:
    ((JC_13: Swap(t@, i_0@, j_0@, int_P_int_M_t_4, int_P_int_M_t_4@))
    and (JC_14:
        not_assigns(int_P_t_4_alloc_table@, int_P_int_M_t_4@,
        int_P_int_M_t_4,
        pset_union(pset_range(pset_singleton(t@), j_0@, j_0@),
        pset_range(pset_singleton(t@), i_0@, i_0@)))))) }

let swap_safety =
 fun (t : int_P pointer) (i_0 : int) (j_0 : int) (int_P_int_M_t_4 : (int_P, int) memory ref) (int_P_t_4_alloc_table : int_P alloc_table) ->
  { (JC_11:
    ((JC_7: le_int(offset_min(int_P_t_4_alloc_table, t), i_0))
    and ((JC_8: ge_int(offset_max(int_P_t_4_alloc_table, t), i_0))
        and ((JC_9: le_int(offset_min(int_P_t_4_alloc_table, t), j_0))
            and (JC_10: ge_int(offset_max(int_P_t_4_alloc_table, t), j_0)))))) }
  (init:
  try
   begin
     (let tmp = ref (any_int void) in
     (C_3:
     begin
       (let jessie_9 =
       (tmp := (C_2:
               (JC_21:
               ((((offset_acc_ int_P_t_4_alloc_table) !int_P_int_M_t_4) t) i_0)))) in
       void);
      (C_8:
      begin
        (let jessie_15 =
        (let jessie_11 =
        (C_5:
        (JC_22:
        ((((offset_acc_ int_P_t_4_alloc_table) !int_P_int_M_t_4) t) j_0))) in
        (let jessie_12 = t in
        (let jessie_13 = i_0 in
        (let jessie_14 = ((shift jessie_12) jessie_13) in
        (JC_23:
        (((((offset_upd_ int_P_t_4_alloc_table) int_P_int_M_t_4) jessie_12) jessie_13) jessie_11)))))) in
        void);
       (C_11:
       begin
         (let jessie_21 =
         (let jessie_17 = !tmp in
         (let jessie_18 = t in
         (let jessie_19 = j_0 in
         (let jessie_20 = ((shift jessie_18) jessie_19) in
         (JC_24:
         (((((offset_upd_ int_P_t_4_alloc_table) int_P_int_M_t_4) jessie_18) jessie_19) jessie_17)))))) in
         void); (raise Return) end) end) end)); (raise Return) end with
   Return -> void end) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C minimum_sort.jessie --quiet -f minimum_sort.makefile project
why --project [...] why/minimum_sort.why
<project name="minimum_sort" context="why/minimum_sort_ctx.why">
  <function name="Function swap">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/minimum_sort_po39.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "10" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/minimum_sort_po40.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "11" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/minimum_sort_po41.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "11" begin = "2" end = "3"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/minimum_sort_po42.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.jessie/minimum_sort.jc" line = "92" begin = "14" end = "75"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/minimum_sort_po43.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.jessie/minimum_sort.jc" line = "92" begin = "14" end = "75"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/minimum_sort_po44.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.jessie/minimum_sort.jc" line = "93" begin = "15" end = "51"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/minimum_sort_po45.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.jessie/minimum_sort.jc" line = "93" begin = "15" end = "51"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/minimum_sort_po37.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "7" begin = "12" end = "33"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/minimum_sort_po38.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "9" begin = "5" end = "9"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function min_sort">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/minimum_sort_po23.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "37" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/minimum_sort_po24.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "37" begin = "4" end = "6"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/minimum_sort_po25.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "49" begin = "6" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/minimum_sort_po26.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "49" begin = "6" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/minimum_sort_po27.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "50" begin = "10" end = "12"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/minimum_sort_po28.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "50" begin = "10" end = "12"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/minimum_sort_po29.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "46" begin = "21" end = "24"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/minimum_sort_po30.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "46" begin = "21" end = "24"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/minimum_sort_po31.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.jessie/minimum_sort.jc" line = "177" begin = "26" end = "44"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/minimum_sort_po32.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.jessie/minimum_sort.jc" line = "177" begin = "26" end = "44"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/minimum_sort_po33.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.jessie/minimum_sort.jc" line = "177" begin = "26" end = "44"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/minimum_sort_po34.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.jessie/minimum_sort.jc" line = "177" begin = "26" end = "44"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/minimum_sort_po35.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "33" begin = "19" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/minimum_sort_po36.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "33" begin = "19" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `sorted'">
    <goal why_file="why/minimum_sort_po14.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "28" begin = "8" end = "21"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/minimum_sort_po15.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "29" begin = "8" end = "86"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/minimum_sort_po16.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "41" begin = "11" end = "22"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/minimum_sort_po17.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "42" begin = "11" end = "57"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/minimum_sort_po18.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "41" begin = "11" end = "22"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/minimum_sort_po19.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "42" begin = "11" end = "57"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/minimum_sort_po20.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "28" begin = "8" end = "21"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/minimum_sort_po21.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "29" begin = "8" end = "86"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/minimum_sort_po22.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "17" begin = "14" end = "29"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `permutation'">
    <goal why_file="why/minimum_sort_po11.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "32" begin = "22" end = "47"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/minimum_sort_po12.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "32" begin = "22" end = "47"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/minimum_sort_po13.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "19" begin = "14" end = "39"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/minimum_sort_po1.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "25" begin = "21" end = "27"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/minimum_sort_po2.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "25" begin = "26" end = "31"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/minimum_sort_po3.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "38" begin = "23" end = "28"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/minimum_sort_po4.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "38" begin = "32" end = "39"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/minimum_sort_po5.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "38" begin = "37" end = "43"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/minimum_sort_po6.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "38" begin = "23" end = "28"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/minimum_sort_po7.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "38" begin = "32" end = "39"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/minimum_sort_po8.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "38" begin = "37" end = "43"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/minimum_sort_po9.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "25" begin = "21" end = "27"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/minimum_sort_po10.why">
      <location file = "PPCHOME/tests/jessie/minimum_sort.c" line = "25" begin = "26" end = "31"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s2) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s3))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type char_P

type int_P

type padding

type void_P

predicate Swap(a: int_P pointer, i: int, j: int,
  int_P_int_M_a_1_at_L2: (int_P, int) memory, int_P_int_M_a_1_at_L1: (int_P,
  int) memory) =
  ((select(int_P_int_M_a_1_at_L1, shift(a,
   i)) = select(int_P_int_M_a_1_at_L2, shift(a, j))) and
   ((select(int_P_int_M_a_1_at_L1, shift(a,
    j)) = select(int_P_int_M_a_1_at_L2, shift(a, i))) and
    (forall k:int.
      (((k <> i) and (k <> j)) -> (select(int_P_int_M_a_1_at_L1, shift(a,
       k)) = select(int_P_int_M_a_1_at_L2, shift(a, k)))))))

inductive Permut: int_P pointer, int, int, (int_P, int) memory, (int_P,
                  int) memory -> prop =
  | Permut_refl: (forall int_P_int_M_a_0_2_at_L:(int_P, int) memory.
                   (forall a_1:int_P pointer.
                     (forall l_0:int.
                       (forall h_0:int. Permut(a_1, l_0, h_0,
                         int_P_int_M_a_0_2_at_L, int_P_int_M_a_0_2_at_L)))))
  | Permut_sym: (forall int_P_int_M_a_0_2_at_L2:(int_P, int) memory.
                  (forall int_P_int_M_a_0_2_at_L1:(int_P, int) memory.
                    (forall a_2:int_P pointer.
                      (forall l_1:int.
                        (forall h_1:int.
                          (Permut(a_2, l_1, h_1, int_P_int_M_a_0_2_at_L2,
                           int_P_int_M_a_0_2_at_L1) -> Permut(a_2, l_1, h_1,
                           int_P_int_M_a_0_2_at_L1, int_P_int_M_a_0_2_at_L2)))))))
  | Permut_trans: (forall int_P_int_M_a_0_2_at_L3:(int_P, int) memory.
                    (forall int_P_int_M_a_0_2_at_L2:(int_P, int) memory.
                      (forall int_P_int_M_a_0_2_at_L1:(int_P, int) memory.
                        (forall a_3:int_P pointer.
                          (forall l_2:int.
                            (forall h_2:int.
                              ((Permut(a_3, l_2, h_2,
                                int_P_int_M_a_0_2_at_L2,
                                int_P_int_M_a_0_2_at_L1) and Permut(a_3, l_2,
                                h_2, int_P_int_M_a_0_2_at_L3,
                                int_P_int_M_a_0_2_at_L2)) ->
                               Permut(a_3, l_2, h_2, int_P_int_M_a_0_2_at_L3,
                               int_P_int_M_a_0_2_at_L1))))))))
  | Permut_swap: (forall int_P_int_M_a_0_2_at_L2:(int_P, int) memory.
                   (forall int_P_int_M_a_0_2_at_L1:(int_P, int) memory.
                     (forall a_4:int_P pointer.
                       (forall l_3:int.
                         (forall h_3:int.
                           (forall i_0_0:int.
                             (forall j_0_0:int.
                               (((l_3 <= i_0_0) and
                                 ((i_0_0 <= h_3) and
                                  ((l_3 <= j_0_0) and
                                   ((j_0_0 <= h_3) and Swap(a_4, i_0_0,
                                    j_0_0, int_P_int_M_a_0_2_at_L2,
                                    int_P_int_M_a_0_2_at_L1))))) ->
                                Permut(a_4, l_3, h_3,
                                int_P_int_M_a_0_2_at_L2,
                                int_P_int_M_a_0_2_at_L1)))))))))



predicate Sorted(a_5: int_P pointer, l_4: int, h_4: int,
  int_P_int_M_a_5_3_at_L: (int_P, int) memory) =
  (forall i_1:int.
    (((l_4 <= i_1) and (i_1 < h_4)) -> (select(int_P_int_M_a_5_3_at_L,
     shift(a_5, i_1)) <= select(int_P_int_M_a_5_3_at_L, shift(a_5,
     (i_1 + 1))))))

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic int_P_tag : int_P tag_id

axiom int_P_int: (int_of_tag(int_P_tag) = 1)

logic int_P_of_pointer_address : unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr:
  (forall p:int_P pointer.
    (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom: parenttag(int_P_tag, bottom_tag)

axiom int_P_tags:
  (forall x:int_P pointer.
    (forall int_P_tag_table:int_P tag_table. instanceof(int_P_tag_table, x,
      int_P_tag)))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_int_P(p: int_P pointer, a: int,
  int_P_alloc_table: int_P alloc_table) = (offset_min(int_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_int_P(p: int_P pointer, b: int,
  int_P_alloc_table: int_P alloc_table) = (offset_max(int_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

