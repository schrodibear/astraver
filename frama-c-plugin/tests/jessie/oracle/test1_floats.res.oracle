Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only test1_floats.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD test1_floats.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir test1_floats.jessie
[jessie] File test1_floats.jessie/test1_floats.jc written.
[jessie] File test1_floats.jessie/test1_floats.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

float moncos(float x_1)
  requires (C_6 : (\real_abs((x_1 :> real)) <= 0x1p-5));
behavior default:
  ensures (C_7 : (\real_abs(((\result :> real) - \cos((x_1 :> real)))) <=
                   0x1p-23));
{  
   (var float __retres);
   
   {  
      {  
         (assert for default: (C_1 : (\real_abs(((1.0 -
                                                   (((x_1 :> real) *
                                                      (x_1 :> real)) *
                                                     0.5)) -
                                                  \cos((x_1 :> real)))) <=
                                       0x1p-24)));
         ()
      };
      (C_5 : (__retres = (C_4 : ((1.0 :> float) -
                                  (C_3 : ((C_2 : (x_1 * x_1)) *
                                           (0.5 :> float)))))));
      
      (return __retres)
   }
}

float cosine2(float x)
  requires (C_13 : ((C_14 : (\real_abs((x :> real)) <= 0x1p-5)) &&
                     (C_15 : (\single_round_error(x) == 0.0))));
behavior default:
  ensures (C_16 : (\real_abs(((\result :> real) - \cos((x :> real)))) <=
                    0x1p-23));
{  
   (var float r);
   
   {  (C_11 : (r = (C_10 : ((1.0 :> float) -
                             (C_9 : ((C_8 : (x * x)) * (0.5 :> float)))))));
      
      {  
         (assert for default: (C_12 : (\real_abs((\single_exact(r) -
                                                   \cos((x :> real)))) <=
                                        0x1p-24)));
         ()
      };
      
      (return r)
   }
}

lemma abs_triangle :
(\forall real x;
  (\forall real y;
    (\forall real z;
      (\real_abs((x - y)) <= (\real_abs((x - z)) + \real_abs((z - y)))))))

lemma cos_lipschitz :
(\forall real x_0;
  (\forall real y_0;
    (\real_abs((\cos(x_0) - \cos(y_0))) <= \real_abs((x_0 - y_0)))))

float cosine1a(float x_0)
  requires (C_25 : ((C_26 : (\real_abs(\single_exact(x_0)) <= 0x1p-5)) &&
                     (C_27 : (\single_round_error(x_0) <= 0x1p-20))));
behavior default:
  ensures (C_28 : ((C_29 : (\real_abs((\single_exact(\result) -
                                        \cos(\single_exact(x_0)))) <=
                             0x1p-24)) &&
                    (C_30 : (\single_round_error(\result) <=
                              (\single_round_error(x_0) + 0x3p-24)))));
{  
   (var float r_0);
   
   {  
      {  
         (assert for default: (C_17 : (\real_abs((x_0 :> real)) <=
                                        0x1.0002p-5)));
         ()
      };
      
      {  (C_21 : (r_0 = (C_20 : ((1.0 :> float) -
                                  (C_19 : ((C_18 : (x_0 * x_0)) *
                                            (0.5 :> float)))))))
      };
      
      {  
         (assert for default: (C_22 : (\real_abs((\single_exact(r_0) -
                                                   \cos(\single_exact(x_0)))) <=
                                        0x1p-24)));
         ()
      };
      
      {  
         (assert for default: (C_23 : (\real_abs(((1.0 -
                                                    (((x_0 :> real) *
                                                       (x_0 :> real)) *
                                                      0.5)) -
                                                   \cos((x_0 :> real)))) <=
                                        0x1p-24)));
         ()
      };
      
      {  
         (assert for default: (C_24 : (\real_abs(((r_0 :> real) -
                                                   \cos((x_0 :> real)))) <=
                                        0x1p-23)));
         ()
      };
      
      (return r_0)
   }
}

float cosine1b(float x_2)
  requires (C_36 : (\real_abs((x_2 :> real)) <= 0.07));
behavior default:
  ensures (C_37 : (\real_abs(((\result :> real) - \cos((x_2 :> real)))) <=
                    0x1p-20));
{  
   (var float __retres_0);
   
   {  
      {  
         (assert for default: (C_31 : (\real_abs(((1.0 -
                                                    (((x_2 :> real) *
                                                       (x_2 :> real)) *
                                                      0.5)) -
                                                   \cos((x_2 :> real)))) <=
                                        0x0.Fp-20)));
         ()
      };
      (C_35 : (__retres_0 = (C_34 : ((1.0 :> float) -
                                      (C_33 : ((C_32 : (x_2 * x_2)) *
                                                (0.5 :> float)))))));
      
      (return __retres_0)
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs test1_floats.jessie/test1_floats.cloc test1_floats.jessie/test1_floats.jc
type char_P

type int8

type padding

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

goal abs_triangle :
 (forall x_3:real.
  (forall y:real.
   (forall z:real.
    le_real(abs_real(sub_real(x_3, y)),
    add_real(abs_real(sub_real(x_3, z)), abs_real(sub_real(z, y)))))))

axiom abs_triangle_as_axiom :
 (forall x_3:real.
  (forall y:real.
   (forall z:real.
    le_real(abs_real(sub_real(x_3, y)),
    add_real(abs_real(sub_real(x_3, z)), abs_real(sub_real(z, y)))))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

goal cos_lipschitz :
 (forall x_0_0:real.
  (forall y_0:real.
   le_real(abs_real(sub_real(cos(x_0_0), cos(y_0))),
   abs_real(sub_real(x_0_0, y_0)))))

axiom cos_lipschitz_as_axiom :
 (forall x_0_0:real.
  (forall y_0:real.
   le_real(abs_real(sub_real(cos(x_0_0), cos(y_0))),
   abs_real(sub_real(x_0_0, y_0)))))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int8 : unit -> { } int8 { true }

parameter cosine1a :
 x_0:single ->
  { } single
  { (JC_50:
    ((JC_48:
     le_real(abs_real(sub_real(single_exact(result), cos(single_exact(x_0)))),
     0x1p-24))
    and (JC_49:
        le_real(single_round_error(result),
        add_real(single_round_error(x_0), 0x3p-24))))) }

parameter cosine1a_requires :
 x_0:single ->
  { (JC_39:
    ((JC_37: le_real(abs_real(single_exact(x_0)), 0x1p-5))
    and (JC_38: le_real(single_round_error(x_0), 0x1p-20))))}
  single
  { (JC_50:
    ((JC_48:
     le_real(abs_real(sub_real(single_exact(result), cos(single_exact(x_0)))),
     0x1p-24))
    and (JC_49:
        le_real(single_round_error(result),
        add_real(single_round_error(x_0), 0x3p-24))))) }

parameter cosine1b :
 x_2:single ->
  { } single
  { (JC_72:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_2)))),
    0x1p-20)) }

parameter cosine1b_requires :
 x_2:single ->
  { (JC_67: le_real(abs_real(single_value(x_2)), 0.07))} single
  { (JC_72:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_2)))),
    0x1p-20)) }

parameter cosine2 :
 x:single ->
  { } single
  { (JC_26:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x)))),
    0x1p-23)) }

parameter cosine2_requires :
 x:single ->
  { (JC_19:
    ((JC_17: le_real(abs_real(single_value(x)), 0x1p-5))
    and (JC_18: eq_real(single_round_error(x), 0.0))))}
  single
  { (JC_26:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x)))),
    0x1p-23)) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter moncos :
 x_1:single ->
  { } single
  { (JC_6:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_1)))),
    0x1p-23)) }

parameter moncos_requires :
 x_1:single ->
  { (JC_1: le_real(abs_real(single_value(x_1)), 0x1p-5))} single
  { (JC_6:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_1)))),
    0x1p-23)) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let cosine1a_ensures_default =
 fun (x_0 : single) ->
  { (JC_43:
    ((JC_41: le_real(abs_real(single_exact(x_0)), 0x1p-5))
    and (JC_42: le_real(single_round_error(x_0), 0x1p-20)))) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let r_0 = ref (any_single void) in
     begin
       (assert
       { (JC_60: le_real(abs_real(single_value(x_0)), 0x1.0002p-5)) };
       void);
      void;
      (let jessie_17 = (C_21:
                       begin
                         (r_0 := (C_20:
                                 (JC_63:
                                 (((sub_single_safe nearest_even) (single_of_real_exact 1.0)) 
                                  (C_19:
                                  (JC_62:
                                  (((mul_single_safe nearest_even) (C_18:
                                                                   (JC_61:
                                                                   (((mul_single_safe nearest_even) x_0) x_0)))) 
                                   (single_of_real_exact 0.5))))))));
                        !r_0
                       end) in
      void);
      (assert
      { (JC_64:
        le_real(abs_real(sub_real(single_exact(r_0), cos(single_exact(x_0)))),
        0x1p-24)) };
      void);
      void;
      (assert
      { (JC_65:
        le_real(abs_real(sub_real(sub_real(1.0,
                                  mul_real(mul_real(single_value(x_0),
                                           single_value(x_0)),
                                  0.5)),
                         cos(single_value(x_0)))),
        0x1p-24)) };
      void);
      void;
      (assert
      { (JC_66:
        le_real(abs_real(sub_real(single_value(r_0), cos(single_value(x_0)))),
        0x1p-23)) };
      void);
      void;
      (return := !r_0);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_47:
    ((JC_45:
     le_real(abs_real(sub_real(single_exact(result), cos(single_exact(x_0)))),
     0x1p-24))
    and (JC_46:
        le_real(single_round_error(result),
        add_real(single_round_error(x_0), 0x3p-24))))) }

let cosine1a_safety =
 fun (x_0 : single) ->
  { (JC_43:
    ((JC_41: le_real(abs_real(single_exact(x_0)), 0x1p-5))
    and (JC_42: le_real(single_round_error(x_0), 0x1p-20)))) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let r_0 = ref (any_single void) in
     begin
       [ { } unit
         { (JC_53: le_real(abs_real(single_value(x_0)), 0x1.0002p-5)) } ];
      void;
      (let jessie_14 = (C_21:
                       begin
                         (r_0 := (C_20:
                                 (JC_56:
                                 (((sub_single nearest_even) (single_of_real_exact 1.0)) 
                                  (C_19:
                                  (JC_55:
                                  (((mul_single nearest_even) (C_18:
                                                              (JC_54:
                                                              (((mul_single nearest_even) x_0) x_0)))) 
                                   (single_of_real_exact 0.5))))))));
                        !r_0
                       end) in
      void);
      [ { } unit reads r_0
        { (JC_57:
          le_real(abs_real(sub_real(single_exact(r_0),
                           cos(single_exact(x_0)))),
          0x1p-24)) } ];
      void;
      [ { } unit
        { (JC_58:
          le_real(abs_real(sub_real(sub_real(1.0,
                                    mul_real(mul_real(single_value(x_0),
                                             single_value(x_0)),
                                    0.5)),
                           cos(single_value(x_0)))),
          0x1p-24)) } ];
      void;
      [ { } unit reads r_0
        { (JC_59:
          le_real(abs_real(sub_real(single_value(r_0),
                           cos(single_value(x_0)))),
          0x1p-23)) } ];
      void;
      (return := !r_0);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let cosine1b_ensures_default =
 fun (x_2 : single) ->
  { (JC_69: le_real(abs_real(single_value(x_2)), 0.07)) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let __retres_0 = ref (any_single void) in
     begin
       (assert
       { (JC_79:
         le_real(abs_real(sub_real(sub_real(1.0,
                                   mul_real(mul_real(single_value(x_2),
                                            single_value(x_2)),
                                   0.5)),
                          cos(single_value(x_2)))),
         0x0.Fp-20)) };
       void);
      void;
      (C_35:
      begin
        (let jessie_23 = (__retres_0 := (C_34:
                                        (JC_82:
                                        (((sub_single_safe nearest_even) 
                                          (single_of_real_exact 1.0)) 
                                         (C_33:
                                         (JC_81:
                                         (((mul_single_safe nearest_even) 
                                           (C_32:
                                           (JC_80:
                                           (((mul_single_safe nearest_even) x_2) x_2)))) 
                                          (single_of_real_exact 0.5)))))))) in
        void);
       (return := !__retres_0);
       (raise Return)
      end)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_71:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_2)))),
    0x1p-20)) }

let cosine1b_safety =
 fun (x_2 : single) ->
  { (JC_69: le_real(abs_real(single_value(x_2)), 0.07)) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let __retres_0 = ref (any_single void) in
     begin
       [ { } unit
         { (JC_75:
           le_real(abs_real(sub_real(sub_real(1.0,
                                     mul_real(mul_real(single_value(x_2),
                                              single_value(x_2)),
                                     0.5)),
                            cos(single_value(x_2)))),
           0x0.Fp-20)) } ];
      void;
      (C_35:
      begin
        (let jessie_20 = (__retres_0 := (C_34:
                                        (JC_78:
                                        (((sub_single nearest_even) (single_of_real_exact 1.0)) 
                                         (C_33:
                                         (JC_77:
                                         (((mul_single nearest_even) 
                                           (C_32:
                                           (JC_76:
                                           (((mul_single nearest_even) x_2) x_2)))) 
                                          (single_of_real_exact 0.5)))))))) in
        void);
       (return := !__retres_0);
       (raise Return)
      end)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let cosine2_ensures_default =
 fun (x : single) ->
  { (JC_23:
    ((JC_21: le_real(abs_real(single_value(x)), 0x1p-5))
    and (JC_22: eq_real(single_round_error(x), 0.0)))) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let r = ref (any_single void) in
     (C_11:
     begin
       (let jessie_11 = (r := (C_10:
                              (JC_35:
                              (((sub_single_safe nearest_even) (single_of_real_exact 1.0)) 
                               (C_9:
                               (JC_34:
                               (((mul_single_safe nearest_even) (C_8:
                                                                (JC_33:
                                                                (((mul_single_safe nearest_even) x) x)))) 
                                (single_of_real_exact 0.5)))))))) in
       void);
      (assert
      { (JC_36:
        le_real(abs_real(sub_real(single_exact(r), cos(single_value(x)))),
        0x1p-24)) };
      void);
      void;
      (return := !r);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_25:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x)))),
    0x1p-23)) }

let cosine2_safety =
 fun (x : single) ->
  { (JC_23:
    ((JC_21: le_real(abs_real(single_value(x)), 0x1p-5))
    and (JC_22: eq_real(single_round_error(x), 0.0)))) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let r = ref (any_single void) in
     (C_11:
     begin
       (let jessie_8 = (r := (C_10:
                             (JC_31:
                             (((sub_single nearest_even) (single_of_real_exact 1.0)) 
                              (C_9:
                              (JC_30:
                              (((mul_single nearest_even) (C_8:
                                                          (JC_29:
                                                          (((mul_single nearest_even) x) x)))) 
                               (single_of_real_exact 0.5)))))))) in
       void);
      [ { } unit reads r
        { (JC_32:
          le_real(abs_real(sub_real(single_exact(r), cos(single_value(x)))),
          0x1p-24)) } ];
      void;
      (return := !r);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let moncos_ensures_default =
 fun (x_1 : single) ->
  { (JC_3: le_real(abs_real(single_value(x_1)), 0x1p-5)) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let __retres = ref (any_single void) in
     begin
       (assert
       { (JC_13:
         le_real(abs_real(sub_real(sub_real(1.0,
                                   mul_real(mul_real(single_value(x_1),
                                            single_value(x_1)),
                                   0.5)),
                          cos(single_value(x_1)))),
         0x1p-24)) };
       void);
      void;
      (C_5:
      begin
        (let jessie_5 = (__retres := (C_4:
                                     (JC_16:
                                     (((sub_single_safe nearest_even) 
                                       (single_of_real_exact 1.0)) (C_3:
                                                                   (JC_15:
                                                                   (((mul_single_safe nearest_even) 
                                                                    (C_2:
                                                                    (JC_14:
                                                                    (((mul_single_safe nearest_even) x_1) x_1)))) 
                                                                    (single_of_real_exact 0.5)))))))) in
        void);
       (return := !__retres);
       (raise Return)
      end)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_5:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_1)))),
    0x1p-23)) }

let moncos_safety =
 fun (x_1 : single) ->
  { (JC_3: le_real(abs_real(single_value(x_1)), 0x1p-5)) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let __retres = ref (any_single void) in
     begin
       [ { } unit
         { (JC_9:
           le_real(abs_real(sub_real(sub_real(1.0,
                                     mul_real(mul_real(single_value(x_1),
                                              single_value(x_1)),
                                     0.5)),
                            cos(single_value(x_1)))),
           0x1p-24)) } ];
      void;
      (C_5:
      begin
        (let jessie_2 = (__retres := (C_4:
                                     (JC_12:
                                     (((sub_single nearest_even) (single_of_real_exact 1.0)) 
                                      (C_3:
                                      (JC_11:
                                      (((mul_single nearest_even) (C_2:
                                                                  (JC_10:
                                                                  (((mul_single nearest_even) x_1) x_1)))) 
                                       (single_of_real_exact 0.5)))))))) in
        void);
       (return := !__retres);
       (raise Return)
      end)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C test1_floats.jessie --quiet -f test1_floats.makefile project
why --project [...] why/test1_floats.why
<project name="test1_floats" context="why/test1_floats_ctx.why">
  <lemma name="abs_triangle">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/test1_floats_po1.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.jessie/test1_floats.jc" line = "75" begin = "0" end = "152"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="cos_lipschitz">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/test1_floats_po2.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.jessie/test1_floats.jc" line = "81" begin = "0" end = "130"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <function name="cos_lipschitz">
    <location file = "PPCHOME/tests/jessie/test1_floats.jessie/test1_floats.jc" line = "81" begin = "0" end = "130"/>
  </function>
  <function name="abs_triangle">
    <location file = "PPCHOME/tests/jessie/test1_floats.jessie/test1_floats.jc" line = "75" begin = "0" end = "152"/>
  </function>
  <function name="Function moncos">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/test1_floats_po24.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "7" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/test1_floats_po25.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "7" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/test1_floats_po26.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "7" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/test1_floats_po22.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "6" begin = "13" end = "53"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/test1_floats_po23.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "3" begin = "12" end = "46"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function cosine2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/test1_floats_po19.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "15" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/test1_floats_po20.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "15" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/test1_floats_po21.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "15" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/test1_floats_po17.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "16" begin = "13" end = "49"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/test1_floats_po18.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "12" begin = "12" end = "46"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function cosine1b">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/test1_floats_po14.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "51" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/test1_floats_po15.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "51" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/test1_floats_po16.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "51" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/test1_floats_po12.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "50" begin = "13" end = "55"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/test1_floats_po13.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "47" begin = "12" end = "46"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function cosine1a">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/test1_floats_po9.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "34" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/test1_floats_po10.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "34" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/test1_floats_po11.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "34" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/test1_floats_po3.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "33" begin = "13" end = "35"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/test1_floats_po4.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "35" begin = "13" end = "57"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/test1_floats_po5.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "36" begin = "13" end = "53"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/test1_floats_po6.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "37" begin = "13" end = "41"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/test1_floats_po7.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "29" begin = "12" end = "62"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/test1_floats_po8.why">
      <location file = "PPCHOME/tests/jessie/test1_floats.c" line = "30" begin = "11" end = "61"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type mode =
  | nearest_even
  | to_zero
  | up
  | down
  | nearest_away

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

logic single_to_double : mode, single -> double

logic double_to_single : mode, double -> single

axiom double_to_single_val:
  (forall m:mode.
    (forall s:single. (double_value(single_to_double(m,
      s)) = single_value(s))))

axiom single_to_double_val:
  (forall m:mode.
    (forall d:double. (single_value(double_to_single(m, d)) = round_single(m,
      double_value(d)))))

predicate single_of_real_post(m: mode, x: real, res: single) =
  ((single_value(res) = round_single(m, x)) and
   ((single_exact(res) = x) and (single_model(res) = x)))

predicate add_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) + single_value(y)))) and
   ((single_exact(res) = (single_exact(x) + single_exact(y))) and
    (single_model(res) = (single_model(x) + single_model(y)))))

predicate sub_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) - single_value(y)))) and
   ((single_exact(res) = (single_exact(x) - single_exact(y))) and
    (single_model(res) = (single_model(x) - single_model(y)))))

predicate mul_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) * single_value(y)))) and
   ((single_exact(res) = (single_exact(x) * single_exact(y))) and
    (single_model(res) = (single_model(x) * single_model(y)))))

predicate div_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) / single_value(y)))) and
   ((single_exact(res) = (single_exact(x) / single_exact(y))) and
    (single_model(res) = (single_model(x) / single_model(y)))))

predicate sqrt_single_post(m: mode, x: single, res: single) =
  ((single_value(res) = round_single(m, sqrt_real(single_value(x)))) and
   ((single_exact(res) = sqrt_real(single_exact(x))) and
    (single_model(res) = sqrt_real(single_model(x)))))

predicate neg_single_post(x: single, res: single) =
  ((single_value(res) = (-single_value(x))) and
   ((single_exact(res) = (-single_exact(x))) and
    (single_model(res) = (-single_model(x)))))

predicate abs_single_post(x: single, res: single) =
  ((single_value(res) = abs_real(single_value(x))) and
   ((single_exact(res) = abs_real(single_exact(x))) and
    (single_model(res) = abs_real(single_model(x)))))

predicate double_of_real_post(m: mode, x: real, res: double) =
  ((double_value(res) = round_double(m, x)) and
   ((double_exact(res) = x) and (double_model(res) = x)))

predicate add_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) + double_value(y)))) and
   ((double_exact(res) = (double_exact(x) + double_exact(y))) and
    (double_model(res) = (double_model(x) + double_model(y)))))

predicate sub_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) - double_value(y)))) and
   ((double_exact(res) = (double_exact(x) - double_exact(y))) and
    (double_model(res) = (double_model(x) - double_model(y)))))

predicate mul_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) * double_value(y)))) and
   ((double_exact(res) = (double_exact(x) * double_exact(y))) and
    (double_model(res) = (double_model(x) * double_model(y)))))

predicate div_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) / double_value(y)))) and
   ((double_exact(res) = (double_exact(x) / double_exact(y))) and
    (double_model(res) = (double_model(x) / double_model(y)))))

predicate sqrt_double_post(m: mode, x: double, res: double) =
  ((double_value(res) = round_double(m, sqrt_real(double_value(x)))) and
   ((double_exact(res) = sqrt_real(double_exact(x))) and
    (double_model(res) = sqrt_real(double_model(x)))))

predicate neg_double_post(x: double, res: double) =
  ((double_value(res) = (-double_value(x))) and
   ((double_exact(res) = (-double_exact(x))) and
    (double_model(res) = (-double_model(x)))))

predicate abs_double_post(x: double, res: double) =
  ((double_value(res) = abs_real(double_value(x))) and
   ((double_exact(res) = abs_real(double_exact(x))) and
    (double_model(res) = abs_real(double_model(x)))))

type char_P

type int8

type padding

type void_P

axiom abs_triangle_as_axiom:
  (forall x_3:real.
    (forall y:real.
      (forall z:real.
        (abs_real((x_3 - y)) <= (abs_real((x_3 - z)) + abs_real((z - y)))))))

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

axiom cos_lipschitz_as_axiom:
  (forall x_0_0:real.
    (forall y_0:real.
      (abs_real((cos(x_0_0) - cos(y_0))) <= abs_real((x_0_0 - y_0)))))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

