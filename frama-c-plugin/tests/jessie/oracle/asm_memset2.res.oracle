Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only asm_memset2.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD asm_memset2.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir asm_memset2.jessie
[jessie] File asm_memset2.jessie/asm_memset2.jc written.
[jessie] File asm_memset2.jessie/asm_memset2.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint32 = 0..4294967295

type uint8 = 0..255

type int8 = -128..127

tag unsigned_long_P = {
  uint32 unsigned_long_M: 32;
}

type unsigned_long_P = [unsigned_long_P]

tag unsigned_char_P = {
  uint8 unsigned_char_M: 8;
}

type unsigned_char_P = [unsigned_char_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

lemma div4 :
(\forall integer x;
  ((x >= 0) ==> ((4 * (x / 4)) <= x)))

lemma div4_not_mod4 :
(\forall integer x_0;
  (((x_0 > 0) && ((x_0 % 4) != 0)) ==> ((4 * (x_0 / 4)) < x_0)))

unit memset_uchar(unsigned_char_P[..] Adresse_0, uint8 ValOct,
                  uint32 i_min_0, uint32 i_max_0)
  requires (C_14 : ((C_15 : (i_min_0 <= i_max_0)) &&
                     (C_16 : (i_max_0 <= 4294967294))));
  requires (C_17 : ((C_18 : (\offset_min(Adresse_0) <= i_min_0)) &&
                     (C_19 : (\offset_max(Adresse_0) >= i_max_0))));
behavior default:
  assigns (Adresse_0 + [i_min_0..i_max_0]).unsigned_char_M;
  ensures (C_20 : (\forall integer k_0;
                    (((i_min_0 <= k_0) && (k_0 <= i_max_0)) ==>
                      ((Adresse_0 + k_0).unsigned_char_M == ValOct))));
{  
   (var uint32 i);
   
   {  (C_1 : (i = i_min_0));
      
      {  
         loop 
         behavior default:
           invariant (C_7 : (\forall integer k;
                              (((i_min_0 <= k) && (k < i)) ==>
                                ((Adresse_0 + k).unsigned_char_M == ValOct))));
         behavior default:
           invariant (C_2 : ((C_3 : (i_min_0 <= i)) &&
                              ((C_5 : (i <= (i_max_0 + 1))) &&
                                (C_6 : ((i_max_0 + 1) <= 4294967295)))));
         while (true)
         {  
            {  (if (i <= i_max_0) then () else 
               (goto while_0_break));
               (C_10 : ((C_9 : (C_8 : (Adresse_0 + i)).unsigned_char_M) = ValOct));
               (C_13 : (i = (C_12 : ((C_11 : (i + 1)) :> uint32))))
            }
         };
         (while_0_break : ())
      };
      
      (return ())
   }
}

unit memset_uint(unsigned_long_P[..] Adresse, uint32 ValMot, uint32 i_min,
                 uint32 i_max)
  requires (C_35 : ((C_36 : (i_min <= i_max)) &&
                     (C_37 : (i_max <= 4294967294))));
  requires (C_38 : ((C_39 : (\offset_min(Adresse) <= i_min)) &&
                     (C_40 : (\offset_max(Adresse) >= i_max))));
behavior default:
  ensures (C_41 : (\forall integer k_2;
                    (((i_min <= k_2) && (k_2 <= i_max)) ==>
                      ((Adresse + k_2).unsigned_long_M == ValMot))));
{  
   (var uint32 i_0);
   
   {  (C_21 : (i_0 = i_min));
      
      {  
         loop 
         behavior default:
           invariant (C_27 : (\forall integer k_1;
                               (((i_min <= k_1) && (k_1 < i_0)) ==>
                                 ((Adresse + k_1).unsigned_long_M == ValMot))));
         behavior default:
           invariant (C_22 : ((C_23 : (i_min <= i_0)) &&
                               ((C_25 : (i_0 <= (i_max + 1))) &&
                                 (C_26 : ((i_max + 1) <= 4294967295)))));
         while (true)
         {  
            {  (if (i_0 <= i_max) then () else 
               (goto while_1_break));
               (C_31 : ((C_30 : (C_29 : (Adresse + i_0)).unsigned_long_M) = 
               (C_28 : (ValMot :> uint32))));
               (C_34 : (i_0 = (C_33 : ((C_32 : (i_0 + 1)) :> uint32))))
            }
         };
         (while_1_break : ())
      };
      
      (return ())
   }
}

uint32 addr_mod4;

unit memset_burst4(char_P[..] Adresse_1, uint8 ValOct_0, uint32 NbOct)
  requires (C_68 : ((C_69 : (0 <= addr_mod4)) && (C_70 : (addr_mod4 <= 3))));
  requires (C_71 : (1 <= NbOct));
  requires (C_72 : ((C_73 : (\offset_min(Adresse_1) <= 0)) &&
                     (C_74 : (\offset_max(Adresse_1) >= (NbOct - 1)))));
behavior default:
  ensures (C_75 : true);
behavior small_data:
  assumes (NbOct < 4);
  ensures (C_76 : (\forall integer k_4;
                    (((0 <= k_4) && (k_4 <= (NbOct - 1))) ==>
                      ((Adresse_1 + k_4).char_M == ValOct_0))));
behavior misaligned_data:
  assumes ((NbOct >= 4) && (addr_mod4 != 0));
  ensures (C_77 : ((C_78 : (\forall integer k_5;
                             (((0 <= k_5) && (k_5 <= (3 - addr_mod4))) ==>
                               ((Adresse_1 + k_5).char_M == ValOct_0)))) &&
                    (C_79 : (\forall integer k_6;
                              (((((4 - addr_mod4) +
                                   (4 * ((NbOct - (4 - addr_mod4)) / 4))) <=
                                  k_6) &&
                                 (k_6 <= (NbOct - 1))) ==>
                                ((Adresse_1 + k_6).char_M == ValOct_0))))));
behavior aligned_data:
  assumes ((NbOct >= 4) && (addr_mod4 == 0));
  ensures (C_80 : (\forall integer k_7;
                    ((((4 * (NbOct / 4)) <= k_7) && (k_7 <= (NbOct - 1))) ==>
                      ((Adresse_1 + k_7).char_M == ValOct_0))));
{  
   (var unsigned_char_P[..] s);
   
   (var uint32 index_oct);
   
   (var uint32 align);
   
   (var uint32 nb_mots_alignes);
   
   {  (C_43 : (s = (C_42 : (Adresse_1 :> unsigned_char_P[..]))));
      (C_44 : (index_oct = 0));
      (if (NbOct >= 4) then 
      {  (C_47 : (align = (C_46 : ((C_45 : (4 - addr_mod4)) :> uint32))));
         (if (align < 4) then 
         {  (C_50 : memset_uchar(s, ValOct_0, index_oct,
                                 (C_49 : ((C_48 : (align - 1)) :> uint32))));
            
            {  
               (assert for misaligned_data: (C_51 : (\forall integer k_3;
                                                      (((0 <= k_3) &&
                                                         (k_3 <=
                                                           (3 - addr_mod4))) ==>
                                                        ((s + k_3).unsigned_char_M ==
                                                          ValOct_0)))));
               ()
            };
            (C_54 : (index_oct = (C_53 : ((C_52 : (index_oct + align)) :> uint32))))
         } else ());
         (C_59 : (nb_mots_alignes = (C_58 : ((C_57 : ((C_56 : ((C_55 : 
                                                               (NbOct -
                                                                 index_oct)) :> uint32)) /
                                                       4)) :> uint32))));
         (C_64 : (index_oct = (C_63 : ((C_62 : (index_oct +
                                                 (C_61 : ((C_60 : (4 *
                                                                    nb_mots_alignes)) :> uint32)))) :> uint32))))
      } else ());
      (C_67 : memset_uchar(s, ValOct_0, index_oct,
                           (C_66 : ((C_65 : (NbOct - 1)) :> uint32))));
      
      (return ())
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs asm_memset2.jessie/asm_memset2.cloc asm_memset2.jessie/asm_memset2.jc
type char_P

type int8

type padding

type uint32

type uint8

type unsigned_char_P

type unsigned_long_P

type void_P

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic addr_mod4:  -> uint32

logic bitvector_of_char_P: char_P pointer -> bitvector

logic char_P_of_bitvector: bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_int8: int8 -> bitvector

logic int8_of_bitvector: bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector :
 (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_uint32: uint32 -> bitvector

logic uint32_of_bitvector: bitvector -> uint32

axiom bitvector_of_uint32_of_uint32_of_bitvector :
 (forall x:bitvector. (bitvector_of_uint32(uint32_of_bitvector(x)) = x))

logic bitvector_of_uint8: uint8 -> bitvector

logic uint8_of_bitvector: bitvector -> uint8

axiom bitvector_of_uint8_of_uint8_of_bitvector :
 (forall x:bitvector. (bitvector_of_uint8(uint8_of_bitvector(x)) = x))

logic bitvector_of_unsigned_char_P: unsigned_char_P pointer -> bitvector

logic unsigned_char_P_of_bitvector: bitvector -> unsigned_char_P pointer

axiom bitvector_of_unsigned_char_P_of_unsigned_char_P_of_bitvector :
 (forall x:bitvector.
  (bitvector_of_unsigned_char_P(unsigned_char_P_of_bitvector(x)) = x))

logic bitvector_of_unsigned_long_P: unsigned_long_P pointer -> bitvector

logic unsigned_long_P_of_bitvector: bitvector -> unsigned_long_P pointer

axiom bitvector_of_unsigned_long_P_of_unsigned_long_P_of_bitvector :
 (forall x:bitvector.
  (bitvector_of_unsigned_long_P(unsigned_long_P_of_bitvector(x)) = x))

logic bitvector_of_void_P: void_P pointer -> bitvector

logic void_P_of_bitvector: bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_of_bitvector_of_bitvector_of_char_P :
 (forall x:char_P pointer. (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

goal div4 :
 (forall x:int. (ge_int(x, (0)) -> le_int(mul_int((4), div_int(x, (4))), x)))

axiom div4_as_axiom :
 (forall x:int. (ge_int(x, (0)) -> le_int(mul_int((4), div_int(x, (4))), x)))

goal div4_not_mod4 :
 (forall x_0:int.
  ((gt_int(x_0, (0)) and neq_int(mod_int(x_0, (4)), (0))) ->
   lt_int(mul_int((4), div_int(x_0, (4))), x_0)))

axiom div4_not_mod4_as_axiom :
 (forall x_0:int.
  ((gt_int(x_0, (0)) and neq_int(mod_int(x_0, (4)), (0))) ->
   lt_int(mul_int((4), div_int(x_0, (4))), x_0)))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_of_bitvector_of_bitvector_of_int8 :
 (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_char_P(p:unsigned_char_P pointer,
 a:int,
 unsigned_char_P_alloc_table:unsigned_char_P alloc_table) =
 (offset_min(unsigned_char_P_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_long_P(p:unsigned_long_P pointer,
 a:int,
 unsigned_long_P_alloc_table:unsigned_long_P alloc_table) =
 (offset_min(unsigned_long_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

logic unsigned_char_P_of_pointer_address: unit pointer -> unsigned_char_P pointer

axiom pointer_addr_of_unsigned_char_P_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_char_P_of_pointer_address(p))))

logic unsigned_long_P_of_pointer_address: unit pointer -> unsigned_long_P pointer

axiom pointer_addr_of_unsigned_long_P_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_long_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_char_P(p:unsigned_char_P pointer,
 b:int,
 unsigned_char_P_alloc_table:unsigned_char_P alloc_table) =
 (offset_max(unsigned_char_P_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_long_P(p:unsigned_long_P pointer,
 b:int,
 unsigned_long_P_alloc_table:unsigned_long_P alloc_table) =
 (offset_max(unsigned_long_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_unsigned_char_P(p:unsigned_char_P pointer,
 a:int,
 b:int,
 unsigned_char_P_alloc_table:unsigned_char_P alloc_table) =
 ((offset_min(unsigned_char_P_alloc_table, p) = a)
 and (offset_max(unsigned_char_P_alloc_table, p) = b))

predicate strict_valid_root_unsigned_long_P(p:unsigned_long_P pointer,
 a:int,
 b:int,
 unsigned_long_P_alloc_table:unsigned_long_P alloc_table) =
 ((offset_min(unsigned_long_P_alloc_table, p) = a)
 and (offset_max(unsigned_long_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_char_P(p:unsigned_char_P pointer,
 a:int,
 b:int,
 unsigned_char_P_alloc_table:unsigned_char_P alloc_table) =
 ((offset_min(unsigned_char_P_alloc_table, p) = a)
 and (offset_max(unsigned_char_P_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_long_P(p:unsigned_long_P pointer,
 a:int,
 b:int,
 unsigned_long_P_alloc_table:unsigned_long_P alloc_table) =
 ((offset_min(unsigned_long_P_alloc_table, p) = a)
 and (offset_max(unsigned_long_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_of_bitvector_of_bitvector_of_uint32 :
 (forall x:uint32. eq_uint32(uint32_of_bitvector(bitvector_of_uint32(x)), x))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_of_bitvector_of_bitvector_of_uint8 :
 (forall x:uint8. eq_uint8(uint8_of_bitvector(bitvector_of_uint8(x)), x))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_char_P_tag:  -> unsigned_char_P tag_id

axiom unsigned_char_P_int : (int_of_tag(unsigned_char_P_tag) = (1))

axiom unsigned_char_P_of_bitvector_of_bitvector_of_unsigned_char_P :
 (forall x:unsigned_char_P pointer.
  (unsigned_char_P_of_bitvector(bitvector_of_unsigned_char_P(x)) = x))

axiom unsigned_char_P_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_char_P pointer.
  (p = unsigned_char_P_of_pointer_address(pointer_address(p))))

axiom unsigned_char_P_parenttag_bottom :
 parenttag(unsigned_char_P_tag, bottom_tag)

axiom unsigned_char_P_tags :
 (forall x:unsigned_char_P pointer.
  (forall unsigned_char_P_tag_table:unsigned_char_P tag_table.
   instanceof(unsigned_char_P_tag_table, x, unsigned_char_P_tag)))

logic unsigned_long_P_tag:  -> unsigned_long_P tag_id

axiom unsigned_long_P_int : (int_of_tag(unsigned_long_P_tag) = (1))

axiom unsigned_long_P_of_bitvector_of_bitvector_of_unsigned_long_P :
 (forall x:unsigned_long_P pointer.
  (unsigned_long_P_of_bitvector(bitvector_of_unsigned_long_P(x)) = x))

axiom unsigned_long_P_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_long_P pointer.
  (p = unsigned_long_P_of_pointer_address(pointer_address(p))))

axiom unsigned_long_P_parenttag_bottom :
 parenttag(unsigned_long_P_tag, bottom_tag)

axiom unsigned_long_P_tags :
 (forall x:unsigned_long_P pointer.
  (forall unsigned_long_P_tag_table:unsigned_long_P tag_table.
   instanceof(unsigned_long_P_tag_table, x, unsigned_long_P_tag)))

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_unsigned_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_unsigned_long_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_unsigned_char_P(p:unsigned_char_P pointer,
 a:int,
 b:int,
 unsigned_char_P_alloc_table:unsigned_char_P alloc_table) =
 ((offset_min(unsigned_char_P_alloc_table, p) <= a)
 and (offset_max(unsigned_char_P_alloc_table, p) >= b))

predicate valid_root_unsigned_long_P(p:unsigned_long_P pointer,
 a:int,
 b:int,
 unsigned_long_P_alloc_table:unsigned_long_P alloc_table) =
 ((offset_min(unsigned_long_P_alloc_table, p) <= a)
 and (offset_max(unsigned_long_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_unsigned_char_P(p:unsigned_char_P pointer,
 a:int,
 b:int,
 unsigned_char_P_alloc_table:unsigned_char_P alloc_table) =
 ((offset_min(unsigned_char_P_alloc_table, p) <= a)
 and (offset_max(unsigned_char_P_alloc_table, p) >= b))

predicate valid_struct_unsigned_long_P(p:unsigned_long_P pointer,
 a:int,
 b:int,
 unsigned_long_P_alloc_table:unsigned_long_P alloc_table) =
 ((offset_min(unsigned_long_P_alloc_table, p) <= a)
 and (offset_max(unsigned_long_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_bitvector_of_bitvector_of_void_P :
 (forall x:void_P pointer. (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_unsigned_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_unsigned_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_unsigned_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_unsigned_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_unsigned_long_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_unsigned_long_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_unsigned_long_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_unsigned_long_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter unsigned_char_P_alloc_table : unsigned_char_P alloc_table ref

parameter unsigned_char_P_tag_table : unsigned_char_P tag_table ref

parameter alloc_struct_unsigned_char_P :
 n:int ->
  unsigned_char_P_alloc_table:unsigned_char_P alloc_table ref ->
   unsigned_char_P_tag_table:unsigned_char_P tag_table ref ->
    { } unsigned_char_P pointer
    writes unsigned_char_P_alloc_table,unsigned_char_P_tag_table
    { (strict_valid_struct_unsigned_char_P(result, (0), sub_int(n, (1)),
       unsigned_char_P_alloc_table)
      and (alloc_extends(unsigned_char_P_alloc_table@,
           unsigned_char_P_alloc_table)
          and (alloc_fresh(unsigned_char_P_alloc_table@, result, n)
              and instanceof(unsigned_char_P_tag_table, result,
                  unsigned_char_P_tag)))) }

parameter alloc_struct_unsigned_char_P_requires :
 n:int ->
  unsigned_char_P_alloc_table:unsigned_char_P alloc_table ref ->
   unsigned_char_P_tag_table:unsigned_char_P tag_table ref ->
    { ge_int(n, (0))} unsigned_char_P pointer
    writes unsigned_char_P_alloc_table,unsigned_char_P_tag_table
    { (strict_valid_struct_unsigned_char_P(result, (0), sub_int(n, (1)),
       unsigned_char_P_alloc_table)
      and (alloc_extends(unsigned_char_P_alloc_table@,
           unsigned_char_P_alloc_table)
          and (alloc_fresh(unsigned_char_P_alloc_table@, result, n)
              and instanceof(unsigned_char_P_tag_table, result,
                  unsigned_char_P_tag)))) }

parameter unsigned_long_P_alloc_table : unsigned_long_P alloc_table ref

parameter unsigned_long_P_tag_table : unsigned_long_P tag_table ref

parameter alloc_struct_unsigned_long_P :
 n:int ->
  unsigned_long_P_alloc_table:unsigned_long_P alloc_table ref ->
   unsigned_long_P_tag_table:unsigned_long_P tag_table ref ->
    { } unsigned_long_P pointer
    writes unsigned_long_P_alloc_table,unsigned_long_P_tag_table
    { (strict_valid_struct_unsigned_long_P(result, (0), sub_int(n, (1)),
       unsigned_long_P_alloc_table)
      and (alloc_extends(unsigned_long_P_alloc_table@,
           unsigned_long_P_alloc_table)
          and (alloc_fresh(unsigned_long_P_alloc_table@, result, n)
              and instanceof(unsigned_long_P_tag_table, result,
                  unsigned_long_P_tag)))) }

parameter alloc_struct_unsigned_long_P_requires :
 n:int ->
  unsigned_long_P_alloc_table:unsigned_long_P alloc_table ref ->
   unsigned_long_P_tag_table:unsigned_long_P tag_table ref ->
    { ge_int(n, (0))} unsigned_long_P pointer
    writes unsigned_long_P_alloc_table,unsigned_long_P_tag_table
    { (strict_valid_struct_unsigned_long_P(result, (0), sub_int(n, (1)),
       unsigned_long_P_alloc_table)
      and (alloc_extends(unsigned_long_P_alloc_table@,
           unsigned_long_P_alloc_table)
          and (alloc_fresh(unsigned_long_P_alloc_table@, result, n)
              and instanceof(unsigned_long_P_tag_table, result,
                  unsigned_long_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter memset_burst4 :
 Adresse_1:char_P pointer ->
  ValOct_0:uint8 ->
   NbOct:uint32 ->
    char_P_char_M_Adresse_1_3:(char_P, int8) memory ref ->
     char_P_Adresse_1_3_alloc_table:char_P alloc_table ->
      { } unit reads char_P_char_M_Adresse_1_3
      writes char_P_char_M_Adresse_1_3
      { (((ge_int(integer_of_uint32(NbOct@), (4))
          and eq_int(integer_of_uint32(addr_mod4@), (0))) ->
          (JC_100:
          (forall k_7:int.
           ((le_int(mul_int((4), div_int(integer_of_uint32(NbOct), (4))),
             k_7)
            and le_int(k_7, sub_int(integer_of_uint32(NbOct), (1)))) ->
            eq_int(integer_of_int8(select(char_P_char_M_Adresse_1_3,
                                   shift(Adresse_1, k_7))),
            integer_of_uint8(ValOct_0))))))
        and (((ge_int(integer_of_uint32(NbOct@), (4))
              and neq_int(integer_of_uint32(addr_mod4@), (0))) ->
              (JC_98:
              ((JC_96:
               (forall k_5:int.
                ((le_int((0), k_5)
                 and le_int(k_5, sub_int((3), integer_of_uint32(addr_mod4)))) ->
                 eq_int(integer_of_int8(select(char_P_char_M_Adresse_1_3,
                                        shift(Adresse_1, k_5))),
                 integer_of_uint8(ValOct_0)))))
              and (JC_97:
                  (forall k_6:int.
                   ((le_int(add_int(sub_int((4),
                                    integer_of_uint32(addr_mod4)),
                            mul_int((4),
                            div_int(sub_int(integer_of_uint32(NbOct),
                                    sub_int((4),
                                    integer_of_uint32(addr_mod4))),
                            (4)))),
                     k_6)
                    and le_int(k_6, sub_int(integer_of_uint32(NbOct), (1)))) ->
                    eq_int(integer_of_int8(select(char_P_char_M_Adresse_1_3,
                                           shift(Adresse_1, k_6))),
                    integer_of_uint8(ValOct_0))))))))
            and (lt_int(integer_of_uint32(NbOct@), (4)) ->
                 (JC_92:
                 (forall k_4:int.
                  ((le_int((0), k_4)
                   and le_int(k_4, sub_int(integer_of_uint32(NbOct), (1)))) ->
                   eq_int(integer_of_int8(select(char_P_char_M_Adresse_1_3,
                                          shift(Adresse_1, k_4))),
                   integer_of_uint8(ValOct_0)))))))) }

parameter memset_burst4_requires :
 Adresse_1:char_P pointer ->
  ValOct_0:uint8 ->
   NbOct:uint32 ->
    char_P_char_M_Adresse_1_3:(char_P, int8) memory ref ->
     char_P_Adresse_1_3_alloc_table:char_P alloc_table ->
      { (JC_78:
        ((JC_73: le_int((0), integer_of_uint32(addr_mod4)))
        and ((JC_74: le_int(integer_of_uint32(addr_mod4), (3)))
            and ((JC_75: le_int((1), integer_of_uint32(NbOct)))
                and ((JC_76:
                     le_int(offset_min(char_P_Adresse_1_3_alloc_table,
                            Adresse_1),
                     (0)))
                    and (JC_77:
                        ge_int(offset_max(char_P_Adresse_1_3_alloc_table,
                               Adresse_1),
                        sub_int(integer_of_uint32(NbOct), (1)))))))))}
      unit reads char_P_char_M_Adresse_1_3 writes char_P_char_M_Adresse_1_3
      { (((ge_int(integer_of_uint32(NbOct@), (4))
          and eq_int(integer_of_uint32(addr_mod4@), (0))) ->
          (JC_100:
          (forall k_7:int.
           ((le_int(mul_int((4), div_int(integer_of_uint32(NbOct), (4))),
             k_7)
            and le_int(k_7, sub_int(integer_of_uint32(NbOct), (1)))) ->
            eq_int(integer_of_int8(select(char_P_char_M_Adresse_1_3,
                                   shift(Adresse_1, k_7))),
            integer_of_uint8(ValOct_0))))))
        and (((ge_int(integer_of_uint32(NbOct@), (4))
              and neq_int(integer_of_uint32(addr_mod4@), (0))) ->
              (JC_98:
              ((JC_96:
               (forall k_5:int.
                ((le_int((0), k_5)
                 and le_int(k_5, sub_int((3), integer_of_uint32(addr_mod4)))) ->
                 eq_int(integer_of_int8(select(char_P_char_M_Adresse_1_3,
                                        shift(Adresse_1, k_5))),
                 integer_of_uint8(ValOct_0)))))
              and (JC_97:
                  (forall k_6:int.
                   ((le_int(add_int(sub_int((4),
                                    integer_of_uint32(addr_mod4)),
                            mul_int((4),
                            div_int(sub_int(integer_of_uint32(NbOct),
                                    sub_int((4),
                                    integer_of_uint32(addr_mod4))),
                            (4)))),
                     k_6)
                    and le_int(k_6, sub_int(integer_of_uint32(NbOct), (1)))) ->
                    eq_int(integer_of_int8(select(char_P_char_M_Adresse_1_3,
                                           shift(Adresse_1, k_6))),
                    integer_of_uint8(ValOct_0))))))))
            and (lt_int(integer_of_uint32(NbOct@), (4)) ->
                 (JC_92:
                 (forall k_4:int.
                  ((le_int((0), k_4)
                   and le_int(k_4, sub_int(integer_of_uint32(NbOct), (1)))) ->
                   eq_int(integer_of_int8(select(char_P_char_M_Adresse_1_3,
                                          shift(Adresse_1, k_4))),
                   integer_of_uint8(ValOct_0)))))))) }

parameter memset_uchar :
 Adresse_0:unsigned_char_P pointer ->
  ValOct:uint8 ->
   i_min_0:uint32 ->
    i_max_0:uint32 ->
     unsigned_char_P_unsigned_char_M_Adresse_0_1:(unsigned_char_P, uint8) memory ref ->
      unsigned_char_P_Adresse_0_1_alloc_table:unsigned_char_P alloc_table ->
       { } unit reads unsigned_char_P_unsigned_char_M_Adresse_0_1
       writes unsigned_char_P_unsigned_char_M_Adresse_0_1
       { (JC_18:
         ((JC_16:
          (forall k_0:int.
           ((le_int(integer_of_uint32(i_min_0), k_0)
            and le_int(k_0, integer_of_uint32(i_max_0))) ->
            eq_int(integer_of_uint8(select(unsigned_char_P_unsigned_char_M_Adresse_0_1,
                                    shift(Adresse_0, k_0))),
            integer_of_uint8(ValOct)))))
         and (JC_17:
             not_assigns(unsigned_char_P_Adresse_0_1_alloc_table@,
             unsigned_char_P_unsigned_char_M_Adresse_0_1@,
             unsigned_char_P_unsigned_char_M_Adresse_0_1,
             pset_range(pset_singleton(Adresse_0@),
             integer_of_uint32(i_min_0@), integer_of_uint32(i_max_0@)))))) }

parameter memset_uchar_requires :
 Adresse_0:unsigned_char_P pointer ->
  ValOct:uint8 ->
   i_min_0:uint32 ->
    i_max_0:uint32 ->
     unsigned_char_P_unsigned_char_M_Adresse_0_1:(unsigned_char_P, uint8) memory ref ->
      unsigned_char_P_Adresse_0_1_alloc_table:unsigned_char_P alloc_table ->
       { (JC_5:
         ((JC_1:
          le_int(integer_of_uint32(i_min_0), integer_of_uint32(i_max_0)))
         and ((JC_2: le_int(integer_of_uint32(i_max_0), (4294967294)))
             and ((JC_3:
                  le_int(offset_min(unsigned_char_P_Adresse_0_1_alloc_table,
                         Adresse_0),
                  integer_of_uint32(i_min_0)))
                 and (JC_4:
                     ge_int(offset_max(unsigned_char_P_Adresse_0_1_alloc_table,
                            Adresse_0),
                     integer_of_uint32(i_max_0)))))))}
       unit reads unsigned_char_P_unsigned_char_M_Adresse_0_1
       writes unsigned_char_P_unsigned_char_M_Adresse_0_1
       { (JC_18:
         ((JC_16:
          (forall k_0:int.
           ((le_int(integer_of_uint32(i_min_0), k_0)
            and le_int(k_0, integer_of_uint32(i_max_0))) ->
            eq_int(integer_of_uint8(select(unsigned_char_P_unsigned_char_M_Adresse_0_1,
                                    shift(Adresse_0, k_0))),
            integer_of_uint8(ValOct)))))
         and (JC_17:
             not_assigns(unsigned_char_P_Adresse_0_1_alloc_table@,
             unsigned_char_P_unsigned_char_M_Adresse_0_1@,
             unsigned_char_P_unsigned_char_M_Adresse_0_1,
             pset_range(pset_singleton(Adresse_0@),
             integer_of_uint32(i_min_0@), integer_of_uint32(i_max_0@)))))) }

parameter memset_uint :
 Adresse:unsigned_long_P pointer ->
  ValMot:uint32 ->
   i_min:uint32 ->
    i_max:uint32 ->
     unsigned_long_P_unsigned_long_M_Adresse_2:(unsigned_long_P, uint32) memory ref ->
      unsigned_long_P_Adresse_2_alloc_table:unsigned_long_P alloc_table ->
       { } unit reads unsigned_long_P_unsigned_long_M_Adresse_2
       writes unsigned_long_P_unsigned_long_M_Adresse_2
       { (JC_52:
         (forall k_2:int.
          ((le_int(integer_of_uint32(i_min), k_2)
           and le_int(k_2, integer_of_uint32(i_max))) ->
           eq_int(integer_of_uint32(select(unsigned_long_P_unsigned_long_M_Adresse_2,
                                    shift(Adresse, k_2))),
           integer_of_uint32(ValMot))))) }

parameter memset_uint_requires :
 Adresse:unsigned_long_P pointer ->
  ValMot:uint32 ->
   i_min:uint32 ->
    i_max:uint32 ->
     unsigned_long_P_unsigned_long_M_Adresse_2:(unsigned_long_P, uint32) memory ref ->
      unsigned_long_P_Adresse_2_alloc_table:unsigned_long_P alloc_table ->
       { (JC_43:
         ((JC_39: le_int(integer_of_uint32(i_min), integer_of_uint32(i_max)))
         and ((JC_40: le_int(integer_of_uint32(i_max), (4294967294)))
             and ((JC_41:
                  le_int(offset_min(unsigned_long_P_Adresse_2_alloc_table,
                         Adresse),
                  integer_of_uint32(i_min)))
                 and (JC_42:
                     ge_int(offset_max(unsigned_long_P_Adresse_2_alloc_table,
                            Adresse),
                     integer_of_uint32(i_max)))))))}
       unit reads unsigned_long_P_unsigned_long_M_Adresse_2
       writes unsigned_long_P_unsigned_long_M_Adresse_2
       { (JC_52:
         (forall k_2:int.
          ((le_int(integer_of_uint32(i_min), k_2)
           and le_int(k_2, integer_of_uint32(i_max))) ->
           eq_int(integer_of_uint32(select(unsigned_long_P_unsigned_long_M_Adresse_2,
                                    shift(Adresse, k_2))),
           integer_of_uint32(ValMot))))) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter struct_char_P_alloc_of_bitvector :
 char_P_alloc_table:char_P alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes char_P_alloc_table
   { (forall p:char_P pointer.
      (eq_int(offset_min(char_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (1)))
      and eq_int(offset_max(char_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (1))))) }

parameter struct_char_P_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  char_P_alloc_table:char_P alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:char_P pointer.
      (eq_int(offset_min(char_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (1)))
      and eq_int(offset_max(char_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (1))))) }

parameter struct_char_P_mem_of_bitvector :
 char_P_char_M:(char_P, int8) memory ref ->
  bitvector:(unit, bitvector) memory ->
   { } unit writes char_P_char_M
   { (forall p0:char_P pointer.
      eq_int8(select(char_P_char_M, p0),
      int8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                        (1))))) }

parameter struct_char_P_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref ->
  char_P_char_M:(char_P, int8) memory ->
   { } unit writes bitvector
   { (forall p0:char_P pointer.
      eq_int8(select(char_P_char_M, p0),
      int8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                        (1))))) }

parameter struct_unsigned_char_P_alloc_of_bitvector :
 unsigned_char_P_alloc_table:unsigned_char_P alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes unsigned_char_P_alloc_table
   { (forall p:unsigned_char_P pointer.
      (eq_int(offset_min(unsigned_char_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (1)))
      and eq_int(offset_max(unsigned_char_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (1))))) }

parameter struct_unsigned_char_P_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  unsigned_char_P_alloc_table:unsigned_char_P alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:unsigned_char_P pointer.
      (eq_int(offset_min(unsigned_char_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (1)))
      and eq_int(offset_max(unsigned_char_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (1))))) }

parameter struct_unsigned_char_P_mem_of_bitvector :
 unsigned_char_P_unsigned_char_M:(unsigned_char_P, uint8) memory ref ->
  bitvector:(unit, bitvector) memory ->
   { } unit writes unsigned_char_P_unsigned_char_M
   { (forall p0:unsigned_char_P pointer.
      eq_uint8(select(unsigned_char_P_unsigned_char_M, p0),
      uint8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                         (1))))) }

parameter struct_unsigned_char_P_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref ->
  unsigned_char_P_unsigned_char_M:(unsigned_char_P, uint8) memory ->
   { } unit writes bitvector
   { (forall p0:unsigned_char_P pointer.
      eq_uint8(select(unsigned_char_P_unsigned_char_M, p0),
      uint8_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                         (1))))) }

parameter struct_unsigned_long_P_alloc_of_bitvector :
 unsigned_long_P_alloc_table:unsigned_long_P alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes unsigned_long_P_alloc_table
   { (forall p:unsigned_long_P pointer.
      (eq_int(offset_min(unsigned_long_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (4)))
      and eq_int(offset_max(unsigned_long_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (4))))) }

parameter struct_unsigned_long_P_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  unsigned_long_P_alloc_table:unsigned_long_P alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:unsigned_long_P pointer.
      (eq_int(offset_min(unsigned_long_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (4)))
      and eq_int(offset_max(unsigned_long_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (4))))) }

parameter struct_unsigned_long_P_mem_of_bitvector :
 unsigned_long_P_unsigned_long_M:(unsigned_long_P, uint32) memory ref ->
  bitvector:(unit, bitvector) memory ->
   { } unit writes unsigned_long_P_unsigned_long_M
   { (forall p0:unsigned_long_P pointer.
      eq_uint32(select(unsigned_long_P_unsigned_long_M, p0),
      uint32_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                          (4))))) }

parameter struct_unsigned_long_P_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref ->
  unsigned_long_P_unsigned_long_M:(unsigned_long_P, uint32) memory ->
   { } unit writes bitvector
   { (forall p0:unsigned_long_P pointer.
      eq_uint32(select(unsigned_long_P_unsigned_long_M, p0),
      uint32_of_bitvector(select_bytes(bitvector, pointer_address(p0), (0),
                          (4))))) }

parameter struct_void_P_alloc_of_bitvector :
 void_P_alloc_table:void_P alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes void_P_alloc_table
   { (forall p:void_P pointer.
      (eq_int(offset_min(void_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(void_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_void_P_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  void_P_alloc_table:void_P alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:void_P pointer.
      (eq_int(offset_min(void_P_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(void_P_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_void_P_mem_of_bitvector :
 bitvector:(unit, bitvector) memory -> { } unit { true }

parameter struct_void_P_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref -> { } unit writes bitvector { true }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let memset_burst4_ensures_aligned_data =
 fun (Adresse_1 : unit pointer) (ValOct_0 : uint8) (NbOct : uint32) (bitvector_Adresse_1_3 : (unit, bitvector) memory ref) (bitvector_Adresse_1_3_alloc_table : unit alloc_table) ->
  { ((ge_int(integer_of_uint32(NbOct), (4))
     and eq_int(integer_of_uint32(addr_mod4), (0)))
    and (JC_85:
        ((JC_80: le_int((0), integer_of_uint32(addr_mod4)))
        and ((JC_81: le_int(integer_of_uint32(addr_mod4), (3)))
            and ((JC_82: le_int((1), integer_of_uint32(NbOct)))
                and ((JC_83:
                     le_int(offset_min_bytes(bitvector_Adresse_1_3_alloc_table,
                            Adresse_1, (1)),
                     (0)))
                    and (JC_84:
                        ge_int(offset_max_bytes(bitvector_Adresse_1_3_alloc_table,
                               Adresse_1, (1)),
                        sub_int(integer_of_uint32(NbOct), (1)))))))))) }
  (init:
  try
   begin
     (let s = ref (any_pointer void) in
     (let index_oct = ref (any_uint32 void) in
     (let align = ref (any_uint32 void) in
     (let nb_mots_alignes = ref (any_uint32 void) in
     (C_43:
     begin
       (let jessie_148 = (s := (C_42: Adresse_1)) in void);
      (C_44:
      begin
        (let jessie_150 = (index_oct := (safe_uint32_of_integer_ (0))) in
        void);
       (if ((ge_int_ (integer_of_uint32 NbOct)) (4))
       then
        (let jessie_163 = (C_47:
                          begin
                            (let jessie_152 = (align := (C_46:
                                                        (safe_uint32_of_integer_ 
                                                         (C_45:
                                                         ((sub_int (4)) 
                                                          (integer_of_uint32 addr_mod4)))))) in
                            void);
                           (if ((lt_int_ (integer_of_uint32 !align)) (4))
                           then
                            (let jessie_159 = (C_50:
                                              begin
                                                (let unsigned_char_P_Adresse_1_3_alloc_table = ref 
                                                (any_alloc_table void) in
                                                (let unsigned_char_P_unsigned_char_M_Adresse_1_3 = ref 
                                                (any_memory void) in
                                                (let jessie_157 = begin
                                                                    ((struct_unsigned_char_P_alloc_of_bitvector unsigned_char_P_Adresse_1_3_alloc_table) bitvector_Adresse_1_3_alloc_table);
                                                                   ((struct_unsigned_char_P_mem_of_bitvector unsigned_char_P_unsigned_char_M_Adresse_1_3) !bitvector_Adresse_1_3);
                                                                   (let jessie_156 = !s in
                                                                   (let jessie_155 = ValOct_0 in
                                                                   (let jessie_154 = !index_oct in
                                                                   (let jessie_153 = 
                                                                   (C_49:
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_48:
                                                                    ((sub_int 
                                                                    (integer_of_uint32 !align)) (1))))) in
                                                                   (JC_125:
                                                                   ((((((memset_uchar 
                                                                    (unsigned_char_P_of_pointer_address jessie_156)) jessie_155) jessie_154) jessie_153) unsigned_char_P_unsigned_char_M_Adresse_1_3) !unsigned_char_P_Adresse_1_3_alloc_table))))))
                                                                  end in
                                                begin
                                                  ((struct_unsigned_char_P_mem_to_bitvector bitvector_Adresse_1_3) !unsigned_char_P_unsigned_char_M_Adresse_1_3);
                                                 jessie_157
                                                end)));
                                               void;
                                               (C_54:
                                               begin
                                                 (index_oct := (C_53:
                                                               (safe_uint32_of_integer_ 
                                                                (C_52:
                                                                ((add_int 
                                                                  (integer_of_uint32 !index_oct)) 
                                                                 (integer_of_uint32 !align))))));
                                                !index_oct
                                               end)
                                              end) in
                            void)
                           else void);
                           (C_59:
                           begin
                             (let jessie_161 = (nb_mots_alignes := (C_58:
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_57:
                                                                    (JC_127:
                                                                    ((div_int 
                                                                    (integer_of_uint32 
                                                                    (C_56:
                                                                    (safe_uint32_of_integer_ 
                                                                    (C_55:
                                                                    ((sub_int 
                                                                    (integer_of_uint32 NbOct)) 
                                                                    (integer_of_uint32 !index_oct))))))) (4))))))) in
                             void);
                            (C_64:
                            begin
                              (index_oct := (C_63:
                                            (safe_uint32_of_integer_ 
                                             (C_62:
                                             ((add_int (integer_of_uint32 !index_oct)) 
                                              (integer_of_uint32 (C_61:
                                                                 (safe_uint32_of_integer_ 
                                                                  (C_60:
                                                                  ((mul_int (4)) 
                                                                   (integer_of_uint32 !nb_mots_alignes)))))))))));
                             !index_oct
                            end)
                           end)
                          end) in
        void)
       else void);
       (C_67:
       begin
         (let unsigned_char_P_Adresse_1_3_alloc_table = ref (any_alloc_table void) in
         (let unsigned_char_P_unsigned_char_M_Adresse_1_3 = ref (any_memory void) in
         (let jessie_168 = begin
                             ((struct_unsigned_char_P_alloc_of_bitvector unsigned_char_P_Adresse_1_3_alloc_table) bitvector_Adresse_1_3_alloc_table);
                            ((struct_unsigned_char_P_mem_of_bitvector unsigned_char_P_unsigned_char_M_Adresse_1_3) !bitvector_Adresse_1_3);
                            (let jessie_167 = !s in
                            (let jessie_166 = ValOct_0 in
                            (let jessie_165 = !index_oct in
                            (let jessie_164 = (C_66:
                                              (safe_uint32_of_integer_ 
                                               (C_65:
                                               ((sub_int (integer_of_uint32 NbOct)) (1))))) in
                            (JC_128:
                            ((((((memset_uchar (unsigned_char_P_of_pointer_address jessie_167)) jessie_166) jessie_165) jessie_164) unsigned_char_P_unsigned_char_M_Adresse_1_3) !unsigned_char_P_Adresse_1_3_alloc_table))))))
                           end in
         begin
           ((struct_unsigned_char_P_mem_to_bitvector bitvector_Adresse_1_3) !unsigned_char_P_unsigned_char_M_Adresse_1_3);
          jessie_168
         end)));
        (raise Return)
       end)
      end)
     end)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_99:
    (forall k_7:int.
     ((le_int(mul_int((4), div_int(integer_of_uint32(NbOct), (4))), k_7)
      and le_int(k_7, sub_int(integer_of_uint32(NbOct), (1)))) ->
      eq_int(integer_of_int8(int8_of_bitvector(select_bytes(bitvector_Adresse_1_3,
                                               shift(Adresse_1, k_7), (0),
                                               (1)))),
      integer_of_uint8(ValOct_0))))) }

let memset_burst4_ensures_default =
 fun (Adresse_1 : unit pointer) (ValOct_0 : uint8) (NbOct : uint32) (bitvector_Adresse_1_3 : (unit, bitvector) memory ref) (bitvector_Adresse_1_3_alloc_table : unit alloc_table) ->
  { (JC_85:
    ((JC_80: le_int((0), integer_of_uint32(addr_mod4)))
    and ((JC_81: le_int(integer_of_uint32(addr_mod4), (3)))
        and ((JC_82: le_int((1), integer_of_uint32(NbOct)))
            and ((JC_83:
                 le_int(offset_min_bytes(bitvector_Adresse_1_3_alloc_table,
                        Adresse_1, (1)),
                 (0)))
                and (JC_84:
                    ge_int(offset_max_bytes(bitvector_Adresse_1_3_alloc_table,
                           Adresse_1, (1)),
                    sub_int(integer_of_uint32(NbOct), (1))))))))) }
  (init:
  try
   begin
     (let s = ref (any_pointer void) in
     (let index_oct = ref (any_uint32 void) in
     (let align = ref (any_uint32 void) in
     (let nb_mots_alignes = ref (any_uint32 void) in
     (C_43:
     begin
       (let jessie_82 = (s := (C_42: Adresse_1)) in void);
      (C_44:
      begin
        (let jessie_84 = (index_oct := (safe_uint32_of_integer_ (0))) in
        void);
       (if ((ge_int_ (integer_of_uint32 NbOct)) (4))
       then
        (let jessie_97 = (C_47:
                         begin
                           (let jessie_86 = (align := (C_46:
                                                      (safe_uint32_of_integer_ 
                                                       (C_45:
                                                       ((sub_int (4)) 
                                                        (integer_of_uint32 addr_mod4)))))) in
                           void);
                          (if ((lt_int_ (integer_of_uint32 !align)) (4))
                          then
                           (let jessie_93 = (C_50:
                                            begin
                                              (let unsigned_char_P_Adresse_1_3_alloc_table = ref 
                                              (any_alloc_table void) in
                                              (let unsigned_char_P_unsigned_char_M_Adresse_1_3 = ref 
                                              (any_memory void) in
                                              (let jessie_91 = begin
                                                                 ((struct_unsigned_char_P_alloc_of_bitvector unsigned_char_P_Adresse_1_3_alloc_table) bitvector_Adresse_1_3_alloc_table);
                                                                ((struct_unsigned_char_P_mem_of_bitvector unsigned_char_P_unsigned_char_M_Adresse_1_3) !bitvector_Adresse_1_3);
                                                                (let jessie_90 = !s in
                                                                (let jessie_89 = ValOct_0 in
                                                                (let jessie_88 = !index_oct in
                                                                (let jessie_87 = 
                                                                (C_49:
                                                                (safe_uint32_of_integer_ 
                                                                 (C_48:
                                                                 ((sub_int 
                                                                   (integer_of_uint32 !align)) (1))))) in
                                                                (JC_113:
                                                                ((((((memset_uchar 
                                                                    (unsigned_char_P_of_pointer_address jessie_90)) jessie_89) jessie_88) jessie_87) unsigned_char_P_unsigned_char_M_Adresse_1_3) !unsigned_char_P_Adresse_1_3_alloc_table))))))
                                                               end in
                                              begin
                                                ((struct_unsigned_char_P_mem_to_bitvector bitvector_Adresse_1_3) !unsigned_char_P_unsigned_char_M_Adresse_1_3);
                                               jessie_91
                                              end)));
                                             void;
                                             (C_54:
                                             begin
                                               (index_oct := (C_53:
                                                             (safe_uint32_of_integer_ 
                                                              (C_52:
                                                              ((add_int 
                                                                (integer_of_uint32 !index_oct)) 
                                                               (integer_of_uint32 !align))))));
                                              !index_oct
                                             end)
                                            end) in
                           void)
                          else void);
                          (C_59:
                          begin
                            (let jessie_95 = (nb_mots_alignes := (C_58:
                                                                 (safe_uint32_of_integer_ 
                                                                  (C_57:
                                                                  (JC_115:
                                                                  ((div_int 
                                                                    (integer_of_uint32 
                                                                    (C_56:
                                                                    (safe_uint32_of_integer_ 
                                                                    (C_55:
                                                                    ((sub_int 
                                                                    (integer_of_uint32 NbOct)) 
                                                                    (integer_of_uint32 !index_oct))))))) (4))))))) in
                            void);
                           (C_64:
                           begin
                             (index_oct := (C_63:
                                           (safe_uint32_of_integer_ (C_62:
                                                                    ((add_int 
                                                                    (integer_of_uint32 !index_oct)) 
                                                                    (integer_of_uint32 
                                                                    (C_61:
                                                                    (safe_uint32_of_integer_ 
                                                                    (C_60:
                                                                    ((mul_int (4)) 
                                                                    (integer_of_uint32 !nb_mots_alignes)))))))))));
                            !index_oct
                           end)
                          end)
                         end) in
        void)
       else void);
       (C_67:
       begin
         (let unsigned_char_P_Adresse_1_3_alloc_table = ref (any_alloc_table void) in
         (let unsigned_char_P_unsigned_char_M_Adresse_1_3 = ref (any_memory void) in
         (let jessie_102 = begin
                             ((struct_unsigned_char_P_alloc_of_bitvector unsigned_char_P_Adresse_1_3_alloc_table) bitvector_Adresse_1_3_alloc_table);
                            ((struct_unsigned_char_P_mem_of_bitvector unsigned_char_P_unsigned_char_M_Adresse_1_3) !bitvector_Adresse_1_3);
                            (let jessie_101 = !s in
                            (let jessie_100 = ValOct_0 in
                            (let jessie_99 = !index_oct in
                            (let jessie_98 = (C_66:
                                             (safe_uint32_of_integer_ 
                                              (C_65:
                                              ((sub_int (integer_of_uint32 NbOct)) (1))))) in
                            (JC_116:
                            ((((((memset_uchar (unsigned_char_P_of_pointer_address jessie_101)) jessie_100) jessie_99) jessie_98) unsigned_char_P_unsigned_char_M_Adresse_1_3) !unsigned_char_P_Adresse_1_3_alloc_table))))))
                           end in
         begin
           ((struct_unsigned_char_P_mem_to_bitvector bitvector_Adresse_1_3) !unsigned_char_P_unsigned_char_M_Adresse_1_3);
          jessie_102
         end)));
        (raise Return)
       end)
      end)
     end)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_87: true) }

let memset_burst4_ensures_misaligned_data =
 fun (Adresse_1 : unit pointer) (ValOct_0 : uint8) (NbOct : uint32) (bitvector_Adresse_1_3 : (unit, bitvector) memory ref) (bitvector_Adresse_1_3_alloc_table : unit alloc_table) ->
  { ((ge_int(integer_of_uint32(NbOct), (4))
     and neq_int(integer_of_uint32(addr_mod4), (0)))
    and (JC_85:
        ((JC_80: le_int((0), integer_of_uint32(addr_mod4)))
        and ((JC_81: le_int(integer_of_uint32(addr_mod4), (3)))
            and ((JC_82: le_int((1), integer_of_uint32(NbOct)))
                and ((JC_83:
                     le_int(offset_min_bytes(bitvector_Adresse_1_3_alloc_table,
                            Adresse_1, (1)),
                     (0)))
                    and (JC_84:
                        ge_int(offset_max_bytes(bitvector_Adresse_1_3_alloc_table,
                               Adresse_1, (1)),
                        sub_int(integer_of_uint32(NbOct), (1)))))))))) }
  (init:
  try
   begin
     (let s = ref (any_pointer void) in
     (let index_oct = ref (any_uint32 void) in
     (let align = ref (any_uint32 void) in
     (let nb_mots_alignes = ref (any_uint32 void) in
     (C_43:
     begin
       (let jessie_126 = (s := (C_42: Adresse_1)) in void);
      (C_44:
      begin
        (let jessie_128 = (index_oct := (safe_uint32_of_integer_ (0))) in
        void);
       (if ((ge_int_ (integer_of_uint32 NbOct)) (4))
       then
        (let jessie_141 = (C_47:
                          begin
                            (let jessie_130 = (align := (C_46:
                                                        (safe_uint32_of_integer_ 
                                                         (C_45:
                                                         ((sub_int (4)) 
                                                          (integer_of_uint32 addr_mod4)))))) in
                            void);
                           (if ((lt_int_ (integer_of_uint32 !align)) (4))
                           then
                            (let jessie_137 = (C_50:
                                              begin
                                                (let unsigned_char_P_Adresse_1_3_alloc_table = ref 
                                                (any_alloc_table void) in
                                                (let unsigned_char_P_unsigned_char_M_Adresse_1_3 = ref 
                                                (any_memory void) in
                                                (let jessie_135 = begin
                                                                    ((struct_unsigned_char_P_alloc_of_bitvector unsigned_char_P_Adresse_1_3_alloc_table) bitvector_Adresse_1_3_alloc_table);
                                                                   ((struct_unsigned_char_P_mem_of_bitvector unsigned_char_P_unsigned_char_M_Adresse_1_3) !bitvector_Adresse_1_3);
                                                                   (let jessie_134 = !s in
                                                                   (let jessie_133 = ValOct_0 in
                                                                   (let jessie_132 = !index_oct in
                                                                   (let jessie_131 = 
                                                                   (C_49:
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_48:
                                                                    ((sub_int 
                                                                    (integer_of_uint32 !align)) (1))))) in
                                                                   (JC_121:
                                                                   ((((((memset_uchar 
                                                                    (unsigned_char_P_of_pointer_address jessie_134)) jessie_133) jessie_132) jessie_131) unsigned_char_P_unsigned_char_M_Adresse_1_3) !unsigned_char_P_Adresse_1_3_alloc_table))))))
                                                                  end in
                                                begin
                                                  ((struct_unsigned_char_P_mem_to_bitvector bitvector_Adresse_1_3) !unsigned_char_P_unsigned_char_M_Adresse_1_3);
                                                 jessie_135
                                                end)));
                                               (assert
                                               { (JC_122:
                                                 (forall k_3:int.
                                                  ((le_int((0), k_3)
                                                   and le_int(k_3,
                                                       sub_int((3),
                                                       integer_of_uint32(addr_mod4)))) ->
                                                   eq_int(integer_of_uint8(
                                                          uint8_of_bitvector(
                                                          select_bytes(bitvector_Adresse_1_3,
                                                          shift(s, k_3), (0),
                                                          (1)))),
                                                   integer_of_uint8(ValOct_0))))) };
                                               void);
                                               void;
                                               (C_54:
                                               begin
                                                 (index_oct := (C_53:
                                                               (safe_uint32_of_integer_ 
                                                                (C_52:
                                                                ((add_int 
                                                                  (integer_of_uint32 !index_oct)) 
                                                                 (integer_of_uint32 !align))))));
                                                !index_oct
                                               end)
                                              end) in
                            void)
                           else void);
                           (C_59:
                           begin
                             (let jessie_139 = (nb_mots_alignes := (C_58:
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_57:
                                                                    (JC_123:
                                                                    ((div_int 
                                                                    (integer_of_uint32 
                                                                    (C_56:
                                                                    (safe_uint32_of_integer_ 
                                                                    (C_55:
                                                                    ((sub_int 
                                                                    (integer_of_uint32 NbOct)) 
                                                                    (integer_of_uint32 !index_oct))))))) (4))))))) in
                             void);
                            (C_64:
                            begin
                              (index_oct := (C_63:
                                            (safe_uint32_of_integer_ 
                                             (C_62:
                                             ((add_int (integer_of_uint32 !index_oct)) 
                                              (integer_of_uint32 (C_61:
                                                                 (safe_uint32_of_integer_ 
                                                                  (C_60:
                                                                  ((mul_int (4)) 
                                                                   (integer_of_uint32 !nb_mots_alignes)))))))))));
                             !index_oct
                            end)
                           end)
                          end) in
        void)
       else void);
       (C_67:
       begin
         (let unsigned_char_P_Adresse_1_3_alloc_table = ref (any_alloc_table void) in
         (let unsigned_char_P_unsigned_char_M_Adresse_1_3 = ref (any_memory void) in
         (let jessie_146 = begin
                             ((struct_unsigned_char_P_alloc_of_bitvector unsigned_char_P_Adresse_1_3_alloc_table) bitvector_Adresse_1_3_alloc_table);
                            ((struct_unsigned_char_P_mem_of_bitvector unsigned_char_P_unsigned_char_M_Adresse_1_3) !bitvector_Adresse_1_3);
                            (let jessie_145 = !s in
                            (let jessie_144 = ValOct_0 in
                            (let jessie_143 = !index_oct in
                            (let jessie_142 = (C_66:
                                              (safe_uint32_of_integer_ 
                                               (C_65:
                                               ((sub_int (integer_of_uint32 NbOct)) (1))))) in
                            (JC_124:
                            ((((((memset_uchar (unsigned_char_P_of_pointer_address jessie_145)) jessie_144) jessie_143) jessie_142) unsigned_char_P_unsigned_char_M_Adresse_1_3) !unsigned_char_P_Adresse_1_3_alloc_table))))))
                           end in
         begin
           ((struct_unsigned_char_P_mem_to_bitvector bitvector_Adresse_1_3) !unsigned_char_P_unsigned_char_M_Adresse_1_3);
          jessie_146
         end)));
        (raise Return)
       end)
      end)
     end)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_95:
    ((JC_93:
     (forall k_5:int.
      ((le_int((0), k_5)
       and le_int(k_5, sub_int((3), integer_of_uint32(addr_mod4)))) ->
       eq_int(integer_of_int8(int8_of_bitvector(select_bytes(bitvector_Adresse_1_3,
                                                shift(Adresse_1, k_5), (0),
                                                (1)))),
       integer_of_uint8(ValOct_0)))))
    and (JC_94:
        (forall k_6:int.
         ((le_int(add_int(sub_int((4), integer_of_uint32(addr_mod4)),
                  mul_int((4),
                  div_int(sub_int(integer_of_uint32(NbOct),
                          sub_int((4), integer_of_uint32(addr_mod4))),
                  (4)))),
           k_6)
          and le_int(k_6, sub_int(integer_of_uint32(NbOct), (1)))) ->
          eq_int(integer_of_int8(int8_of_bitvector(select_bytes(bitvector_Adresse_1_3,
                                                   shift(Adresse_1, k_6),
                                                   (0), (1)))),
          integer_of_uint8(ValOct_0))))))) }

let memset_burst4_ensures_small_data =
 fun (Adresse_1 : unit pointer) (ValOct_0 : uint8) (NbOct : uint32) (bitvector_Adresse_1_3 : (unit, bitvector) memory ref) (bitvector_Adresse_1_3_alloc_table : unit alloc_table) ->
  { (lt_int(integer_of_uint32(NbOct), (4))
    and (JC_85:
        ((JC_80: le_int((0), integer_of_uint32(addr_mod4)))
        and ((JC_81: le_int(integer_of_uint32(addr_mod4), (3)))
            and ((JC_82: le_int((1), integer_of_uint32(NbOct)))
                and ((JC_83:
                     le_int(offset_min_bytes(bitvector_Adresse_1_3_alloc_table,
                            Adresse_1, (1)),
                     (0)))
                    and (JC_84:
                        ge_int(offset_max_bytes(bitvector_Adresse_1_3_alloc_table,
                               Adresse_1, (1)),
                        sub_int(integer_of_uint32(NbOct), (1)))))))))) }
  (init:
  try
   begin
     (let s = ref (any_pointer void) in
     (let index_oct = ref (any_uint32 void) in
     (let align = ref (any_uint32 void) in
     (let nb_mots_alignes = ref (any_uint32 void) in
     (C_43:
     begin
       (let jessie_104 = (s := (C_42: Adresse_1)) in void);
      (C_44:
      begin
        (let jessie_106 = (index_oct := (safe_uint32_of_integer_ (0))) in
        void);
       (if ((ge_int_ (integer_of_uint32 NbOct)) (4))
       then
        (let jessie_119 = (C_47:
                          begin
                            (let jessie_108 = (align := (C_46:
                                                        (safe_uint32_of_integer_ 
                                                         (C_45:
                                                         ((sub_int (4)) 
                                                          (integer_of_uint32 addr_mod4)))))) in
                            void);
                           (if ((lt_int_ (integer_of_uint32 !align)) (4))
                           then
                            (let jessie_115 = (C_50:
                                              begin
                                                (let unsigned_char_P_Adresse_1_3_alloc_table = ref 
                                                (any_alloc_table void) in
                                                (let unsigned_char_P_unsigned_char_M_Adresse_1_3 = ref 
                                                (any_memory void) in
                                                (let jessie_113 = begin
                                                                    ((struct_unsigned_char_P_alloc_of_bitvector unsigned_char_P_Adresse_1_3_alloc_table) bitvector_Adresse_1_3_alloc_table);
                                                                   ((struct_unsigned_char_P_mem_of_bitvector unsigned_char_P_unsigned_char_M_Adresse_1_3) !bitvector_Adresse_1_3);
                                                                   (let jessie_112 = !s in
                                                                   (let jessie_111 = ValOct_0 in
                                                                   (let jessie_110 = !index_oct in
                                                                   (let jessie_109 = 
                                                                   (C_49:
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_48:
                                                                    ((sub_int 
                                                                    (integer_of_uint32 !align)) (1))))) in
                                                                   (JC_117:
                                                                   ((((((memset_uchar 
                                                                    (unsigned_char_P_of_pointer_address jessie_112)) jessie_111) jessie_110) jessie_109) unsigned_char_P_unsigned_char_M_Adresse_1_3) !unsigned_char_P_Adresse_1_3_alloc_table))))))
                                                                  end in
                                                begin
                                                  ((struct_unsigned_char_P_mem_to_bitvector bitvector_Adresse_1_3) !unsigned_char_P_unsigned_char_M_Adresse_1_3);
                                                 jessie_113
                                                end)));
                                               void;
                                               (C_54:
                                               begin
                                                 (index_oct := (C_53:
                                                               (safe_uint32_of_integer_ 
                                                                (C_52:
                                                                ((add_int 
                                                                  (integer_of_uint32 !index_oct)) 
                                                                 (integer_of_uint32 !align))))));
                                                !index_oct
                                               end)
                                              end) in
                            void)
                           else void);
                           (C_59:
                           begin
                             (let jessie_117 = (nb_mots_alignes := (C_58:
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_57:
                                                                    (JC_119:
                                                                    ((div_int 
                                                                    (integer_of_uint32 
                                                                    (C_56:
                                                                    (safe_uint32_of_integer_ 
                                                                    (C_55:
                                                                    ((sub_int 
                                                                    (integer_of_uint32 NbOct)) 
                                                                    (integer_of_uint32 !index_oct))))))) (4))))))) in
                             void);
                            (C_64:
                            begin
                              (index_oct := (C_63:
                                            (safe_uint32_of_integer_ 
                                             (C_62:
                                             ((add_int (integer_of_uint32 !index_oct)) 
                                              (integer_of_uint32 (C_61:
                                                                 (safe_uint32_of_integer_ 
                                                                  (C_60:
                                                                  ((mul_int (4)) 
                                                                   (integer_of_uint32 !nb_mots_alignes)))))))))));
                             !index_oct
                            end)
                           end)
                          end) in
        void)
       else void);
       (C_67:
       begin
         (let unsigned_char_P_Adresse_1_3_alloc_table = ref (any_alloc_table void) in
         (let unsigned_char_P_unsigned_char_M_Adresse_1_3 = ref (any_memory void) in
         (let jessie_124 = begin
                             ((struct_unsigned_char_P_alloc_of_bitvector unsigned_char_P_Adresse_1_3_alloc_table) bitvector_Adresse_1_3_alloc_table);
                            ((struct_unsigned_char_P_mem_of_bitvector unsigned_char_P_unsigned_char_M_Adresse_1_3) !bitvector_Adresse_1_3);
                            (let jessie_123 = !s in
                            (let jessie_122 = ValOct_0 in
                            (let jessie_121 = !index_oct in
                            (let jessie_120 = (C_66:
                                              (safe_uint32_of_integer_ 
                                               (C_65:
                                               ((sub_int (integer_of_uint32 NbOct)) (1))))) in
                            (JC_120:
                            ((((((memset_uchar (unsigned_char_P_of_pointer_address jessie_123)) jessie_122) jessie_121) jessie_120) unsigned_char_P_unsigned_char_M_Adresse_1_3) !unsigned_char_P_Adresse_1_3_alloc_table))))))
                           end in
         begin
           ((struct_unsigned_char_P_mem_to_bitvector bitvector_Adresse_1_3) !unsigned_char_P_unsigned_char_M_Adresse_1_3);
          jessie_124
         end)));
        (raise Return)
       end)
      end)
     end)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_91:
    (forall k_4:int.
     ((le_int((0), k_4)
      and le_int(k_4, sub_int(integer_of_uint32(NbOct), (1)))) ->
      eq_int(integer_of_int8(int8_of_bitvector(select_bytes(bitvector_Adresse_1_3,
                                               shift(Adresse_1, k_4), (0),
                                               (1)))),
      integer_of_uint8(ValOct_0))))) }

let memset_burst4_safety =
 fun (Adresse_1 : unit pointer) (ValOct_0 : uint8) (NbOct : uint32) (bitvector_Adresse_1_3 : (unit, bitvector) memory ref) (bitvector_Adresse_1_3_alloc_table : unit alloc_table) ->
  { (JC_85:
    ((JC_80: le_int((0), integer_of_uint32(addr_mod4)))
    and ((JC_81: le_int(integer_of_uint32(addr_mod4), (3)))
        and ((JC_82: le_int((1), integer_of_uint32(NbOct)))
            and ((JC_83:
                 le_int(offset_min_bytes(bitvector_Adresse_1_3_alloc_table,
                        Adresse_1, (1)),
                 (0)))
                and (JC_84:
                    ge_int(offset_max_bytes(bitvector_Adresse_1_3_alloc_table,
                           Adresse_1, (1)),
                    sub_int(integer_of_uint32(NbOct), (1))))))))) }
  (init:
  try
   begin
     (let s = ref (any_pointer void) in
     (let index_oct = ref (any_uint32 void) in
     (let align = ref (any_uint32 void) in
     (let nb_mots_alignes = ref (any_uint32 void) in
     (C_43:
     begin
       (let jessie_60 = (s := (C_42: Adresse_1)) in void);
      (C_44:
      begin
        (let jessie_62 = (index_oct := (safe_uint32_of_integer_ (0))) in
        void);
       (if ((ge_int_ (integer_of_uint32 NbOct)) (4))
       then
        (let jessie_75 = (C_47:
                         begin
                           (let jessie_64 = (align := (C_46:
                                                      (JC_101:
                                                      (uint32_of_integer_ 
                                                       (C_45:
                                                       ((sub_int (4)) 
                                                        (integer_of_uint32 addr_mod4))))))) in
                           void);
                          (if ((lt_int_ (integer_of_uint32 !align)) (4))
                          then
                           (let jessie_71 = (C_50:
                                            begin
                                              (let unsigned_char_P_Adresse_1_3_alloc_table = ref 
                                              (any_alloc_table void) in
                                              (let unsigned_char_P_unsigned_char_M_Adresse_1_3 = ref 
                                              (any_memory void) in
                                              (let jessie_69 = begin
                                                                 ((struct_unsigned_char_P_alloc_of_bitvector unsigned_char_P_Adresse_1_3_alloc_table) bitvector_Adresse_1_3_alloc_table);
                                                                ((struct_unsigned_char_P_mem_of_bitvector unsigned_char_P_unsigned_char_M_Adresse_1_3) !bitvector_Adresse_1_3);
                                                                (let jessie_68 = !s in
                                                                (let jessie_67 = ValOct_0 in
                                                                (let jessie_66 = !index_oct in
                                                                (let jessie_65 = 
                                                                (C_49:
                                                                (JC_102:
                                                                (uint32_of_integer_ 
                                                                 (C_48:
                                                                 ((sub_int 
                                                                   (integer_of_uint32 !align)) (1)))))) in
                                                                (JC_103:
                                                                ((((((memset_uchar_requires 
                                                                    (unsigned_char_P_of_pointer_address jessie_68)) jessie_67) jessie_66) jessie_65) unsigned_char_P_unsigned_char_M_Adresse_1_3) !unsigned_char_P_Adresse_1_3_alloc_table))))))
                                                               end in
                                              begin
                                                ((struct_unsigned_char_P_mem_to_bitvector bitvector_Adresse_1_3) !unsigned_char_P_unsigned_char_M_Adresse_1_3);
                                               jessie_69
                                              end)));
                                             void;
                                             (C_54:
                                             begin
                                               (index_oct := (C_53:
                                                             (JC_105:
                                                             (uint32_of_integer_ 
                                                              (C_52:
                                                              ((add_int 
                                                                (integer_of_uint32 !index_oct)) 
                                                               (integer_of_uint32 !align)))))));
                                              !index_oct
                                             end)
                                            end) in
                           void)
                          else void);
                          (C_59:
                          begin
                            (let jessie_73 = (nb_mots_alignes := (C_58:
                                                                 (JC_108:
                                                                 (uint32_of_integer_ 
                                                                  (C_57:
                                                                  (JC_107:
                                                                  ((div_int_ 
                                                                    (integer_of_uint32 
                                                                    (C_56:
                                                                    (JC_106:
                                                                    (uint32_of_integer_ 
                                                                    (C_55:
                                                                    ((sub_int 
                                                                    (integer_of_uint32 NbOct)) 
                                                                    (integer_of_uint32 !index_oct)))))))) (4)))))))) in
                            void);
                           (C_64:
                           begin
                             (index_oct := (C_63:
                                           (JC_110:
                                           (uint32_of_integer_ (C_62:
                                                               ((add_int 
                                                                 (integer_of_uint32 !index_oct)) 
                                                                (integer_of_uint32 
                                                                 (C_61:
                                                                 (JC_109:
                                                                 (uint32_of_integer_ 
                                                                  (C_60:
                                                                  ((mul_int (4)) 
                                                                   (integer_of_uint32 !nb_mots_alignes)))))))))))));
                            !index_oct
                           end)
                          end)
                         end) in
        void)
       else void);
       (C_67:
       begin
         (let unsigned_char_P_Adresse_1_3_alloc_table = ref (any_alloc_table void) in
         (let unsigned_char_P_unsigned_char_M_Adresse_1_3 = ref (any_memory void) in
         (let jessie_80 = begin
                            ((struct_unsigned_char_P_alloc_of_bitvector unsigned_char_P_Adresse_1_3_alloc_table) bitvector_Adresse_1_3_alloc_table);
                           ((struct_unsigned_char_P_mem_of_bitvector unsigned_char_P_unsigned_char_M_Adresse_1_3) !bitvector_Adresse_1_3);
                           (let jessie_79 = !s in
                           (let jessie_78 = ValOct_0 in
                           (let jessie_77 = !index_oct in
                           (let jessie_76 = (C_66:
                                            (JC_111:
                                            (uint32_of_integer_ (C_65:
                                                                ((sub_int 
                                                                  (integer_of_uint32 NbOct)) (1)))))) in
                           (JC_112:
                           ((((((memset_uchar_requires (unsigned_char_P_of_pointer_address jessie_79)) jessie_78) jessie_77) jessie_76) unsigned_char_P_unsigned_char_M_Adresse_1_3) !unsigned_char_P_Adresse_1_3_alloc_table))))))
                          end in
         begin
           ((struct_unsigned_char_P_mem_to_bitvector bitvector_Adresse_1_3) !unsigned_char_P_unsigned_char_M_Adresse_1_3);
          jessie_80
         end)));
        (raise Return)
       end)
      end)
     end)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let memset_uchar_ensures_default =
 fun (Adresse_0 : unsigned_char_P pointer) (ValOct : uint8) (i_min_0 : uint32) (i_max_0 : uint32) (unsigned_char_P_unsigned_char_M_Adresse_0_1 : (unsigned_char_P, uint8) memory ref) (unsigned_char_P_Adresse_0_1_alloc_table : unsigned_char_P alloc_table) ->
  { (JC_11:
    ((JC_7: le_int(integer_of_uint32(i_min_0), integer_of_uint32(i_max_0)))
    and ((JC_8: le_int(integer_of_uint32(i_max_0), (4294967294)))
        and ((JC_9:
             le_int(offset_min(unsigned_char_P_Adresse_0_1_alloc_table,
                    Adresse_0),
             integer_of_uint32(i_min_0)))
            and (JC_10:
                ge_int(offset_max(unsigned_char_P_Adresse_0_1_alloc_table,
                       Adresse_0),
                integer_of_uint32(i_max_0))))))) }
  (init:
  try
   begin
     (let i = ref (any_uint32 void) in
     (C_1:
     begin
       (let jessie_21 = (i := i_min_0) in void);
      try
       (let jessie_32 = begin
                          (loop_2:
                          while true do
                          { invariant
                              (((JC_34:
                                ((JC_31:
                                 le_int(integer_of_uint32(i_min_0),
                                 integer_of_uint32(i)))
                                and ((JC_32:
                                     le_int(integer_of_uint32(i),
                                     add_int(integer_of_uint32(i_max_0), (1))))
                                    and (JC_33:
                                        le_int(add_int(integer_of_uint32(i_max_0),
                                               (1)),
                                        (4294967295))))))
                               and (JC_35:
                                   (forall k:int.
                                    ((le_int(integer_of_uint32(i_min_0), k)
                                     and lt_int(k, integer_of_uint32(i))) ->
                                     eq_int(integer_of_uint8(select(unsigned_char_P_unsigned_char_M_Adresse_0_1,
                                                             shift(Adresse_0,
                                                             k))),
                                     integer_of_uint8(ValOct))))))
                              and (JC_37:
                                  not_assigns(unsigned_char_P_Adresse_0_1_alloc_table@init,
                                  unsigned_char_P_unsigned_char_M_Adresse_0_1@init,
                                  unsigned_char_P_unsigned_char_M_Adresse_0_1,
                                  pset_range(pset_singleton(Adresse_0@init),
                                  integer_of_uint32(i_min_0@init),
                                  integer_of_uint32(i_max_0@init)))))
                             }
                           begin
                             [ { } unit { true } ];
                            try
                             (let jessie_31 = begin
                                                (let jessie_30 = begin
                                                                   (if 
                                                                   ((le_int_ 
                                                                    (integer_of_uint32 !i)) 
                                                                    (integer_of_uint32 i_max_0))
                                                                   then void
                                                                   else
                                                                    (let jessie_22 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                  (C_10:
                                                                  begin
                                                                    (let jessie_28 = 
                                                                    (let jessie_24 = ValOct in
                                                                    (let jessie_27 = 
                                                                    (C_8:
                                                                    ((shift Adresse_0) 
                                                                    (integer_of_uint32 !i))) in
                                                                    (((safe_upd_ unsigned_char_P_unsigned_char_M_Adresse_0_1) jessie_27) jessie_24))) in
                                                                    void);
                                                                   (C_13:
                                                                   begin
                                                                     
                                                                    (i := 
                                                                    (C_12:
                                                                    (safe_uint32_of_integer_ 
                                                                    (C_11:
                                                                    ((add_int 
                                                                    (integer_of_uint32 !i)) (1))))));
                                                                    !i
                                                                   end)
                                                                  end)
                                                                 end in
                                                void);
                                               (raise
                                                (Loop_continue_exc
                                                void))
                                              end in
                             void)
                             with
                             Loop_continue_exc jessie_3 ->
                             void end
                           end
                          done);
                         (raise (Goto_while_0_break_exc void))
                        end in
       void)
       with
       Goto_while_0_break_exc jessie_1 ->
       (while_0_break: void) end;
      (raise Return)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_15:
    ((JC_13:
     (forall k_0:int.
      ((le_int(integer_of_uint32(i_min_0), k_0)
       and le_int(k_0, integer_of_uint32(i_max_0))) ->
       eq_int(integer_of_uint8(select(unsigned_char_P_unsigned_char_M_Adresse_0_1,
                               shift(Adresse_0, k_0))),
       integer_of_uint8(ValOct)))))
    and (JC_14:
        not_assigns(unsigned_char_P_Adresse_0_1_alloc_table@,
        unsigned_char_P_unsigned_char_M_Adresse_0_1@,
        unsigned_char_P_unsigned_char_M_Adresse_0_1,
        pset_range(pset_singleton(Adresse_0@), integer_of_uint32(i_min_0@),
        integer_of_uint32(i_max_0@)))))) }

let memset_uchar_safety =
 fun (Adresse_0 : unsigned_char_P pointer) (ValOct : uint8) (i_min_0 : uint32) (i_max_0 : uint32) (unsigned_char_P_unsigned_char_M_Adresse_0_1 : (unsigned_char_P, uint8) memory ref) (unsigned_char_P_Adresse_0_1_alloc_table : unsigned_char_P alloc_table) ->
  { (JC_11:
    ((JC_7: le_int(integer_of_uint32(i_min_0), integer_of_uint32(i_max_0)))
    and ((JC_8: le_int(integer_of_uint32(i_max_0), (4294967294)))
        and ((JC_9:
             le_int(offset_min(unsigned_char_P_Adresse_0_1_alloc_table,
                    Adresse_0),
             integer_of_uint32(i_min_0)))
            and (JC_10:
                ge_int(offset_max(unsigned_char_P_Adresse_0_1_alloc_table,
                       Adresse_0),
                integer_of_uint32(i_max_0))))))) }
  (init:
  try
   begin
     (let i = ref (any_uint32 void) in
     (C_1:
     begin
       (let jessie_8 = (i := i_min_0) in void);
      try
       (let jessie_19 = begin
                          (loop_1:
                          while true do
                          { invariant (JC_27: true) variant (0) }
                           begin
                             [ { } unit
                               reads i,unsigned_char_P_unsigned_char_M_Adresse_0_1
                               { ((JC_24:
                                  ((JC_21:
                                   le_int(integer_of_uint32(i_min_0),
                                   integer_of_uint32(i)))
                                  and ((JC_22:
                                       le_int(integer_of_uint32(i),
                                       add_int(integer_of_uint32(i_max_0),
                                       (1))))
                                      and (JC_23:
                                          le_int(add_int(integer_of_uint32(i_max_0),
                                                 (1)),
                                          (4294967295))))))
                                 and (JC_25:
                                     (forall k:int.
                                      ((le_int(integer_of_uint32(i_min_0), k)
                                       and lt_int(k, integer_of_uint32(i))) ->
                                       eq_int(integer_of_uint8(select(unsigned_char_P_unsigned_char_M_Adresse_0_1,
                                                               shift(Adresse_0,
                                                               k))),
                                       integer_of_uint8(ValOct)))))) } ];
                            try
                             (let jessie_18 = begin
                                                (let jessie_17 = begin
                                                                   (if 
                                                                   ((le_int_ 
                                                                    (integer_of_uint32 !i)) 
                                                                    (integer_of_uint32 i_max_0))
                                                                   then void
                                                                   else
                                                                    (let jessie_9 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                  (C_10:
                                                                  begin
                                                                    (let jessie_15 = 
                                                                    (let jessie_11 = ValOct in
                                                                    (let jessie_12 = Adresse_0 in
                                                                    (let jessie_13 = 
                                                                    (integer_of_uint32 !i) in
                                                                    (let jessie_14 = 
                                                                    ((shift jessie_12) jessie_13) in
                                                                    (JC_29:
                                                                    (((((offset_upd_ unsigned_char_P_Adresse_0_1_alloc_table) unsigned_char_P_unsigned_char_M_Adresse_0_1) jessie_12) jessie_13) jessie_11)))))) in
                                                                    void);
                                                                   (C_13:
                                                                   begin
                                                                     
                                                                    (i := 
                                                                    (C_12:
                                                                    (JC_30:
                                                                    (uint32_of_integer_ 
                                                                    (C_11:
                                                                    ((add_int 
                                                                    (integer_of_uint32 !i)) (1)))))));
                                                                    !i
                                                                   end)
                                                                  end)
                                                                 end in
                                                void);
                                               (raise
                                                (Loop_continue_exc
                                                void))
                                              end in
                             void)
                             with
                             Loop_continue_exc jessie_3 ->
                             void end
                           end
                          done);
                         (raise (Goto_while_0_break_exc void))
                        end in
       void)
       with
       Goto_while_0_break_exc jessie_1 ->
       (while_0_break: void) end;
      (raise Return)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let memset_uint_ensures_default =
 fun (Adresse : unsigned_long_P pointer) (ValMot : uint32) (i_min : uint32) (i_max : uint32) (unsigned_long_P_unsigned_long_M_Adresse_2 : (unsigned_long_P, uint32) memory ref) (unsigned_long_P_Adresse_2_alloc_table : unsigned_long_P alloc_table) ->
  { (JC_49:
    ((JC_45: le_int(integer_of_uint32(i_min), integer_of_uint32(i_max)))
    and ((JC_46: le_int(integer_of_uint32(i_max), (4294967294)))
        and ((JC_47:
             le_int(offset_min(unsigned_long_P_Adresse_2_alloc_table,
                    Adresse),
             integer_of_uint32(i_min)))
            and (JC_48:
                ge_int(offset_max(unsigned_long_P_Adresse_2_alloc_table,
                       Adresse),
                integer_of_uint32(i_max))))))) }
  (init:
  try
   begin
     (let i_0 = ref (any_uint32 void) in
     (C_21:
     begin
       (let jessie_47 = (i_0 := i_min) in void);
      try
       (let jessie_58 = begin
                          (loop_4:
                          while true do
                          { invariant
                              ((JC_68:
                               ((JC_65:
                                le_int(integer_of_uint32(i_min),
                                integer_of_uint32(i_0)))
                               and ((JC_66:
                                    le_int(integer_of_uint32(i_0),
                                    add_int(integer_of_uint32(i_max), (1))))
                                   and (JC_67:
                                       le_int(add_int(integer_of_uint32(i_max),
                                              (1)),
                                       (4294967295))))))
                              and (JC_69:
                                  (forall k_1:int.
                                   ((le_int(integer_of_uint32(i_min), k_1)
                                    and lt_int(k_1, integer_of_uint32(i_0))) ->
                                    eq_int(integer_of_uint32(select(unsigned_long_P_unsigned_long_M_Adresse_2,
                                                             shift(Adresse,
                                                             k_1))),
                                    integer_of_uint32(ValMot))))))
                             }
                           begin
                             [ { } unit { true } ];
                            try
                             (let jessie_57 = begin
                                                (let jessie_56 = begin
                                                                   (if 
                                                                   ((le_int_ 
                                                                    (integer_of_uint32 !i_0)) 
                                                                    (integer_of_uint32 i_max))
                                                                   then void
                                                                   else
                                                                    (let jessie_48 = 
                                                                    (raise
                                                                    (Goto_while_1_break_exc
                                                                    void)) in
                                                                    void));
                                                                  (C_31:
                                                                  begin
                                                                    (let jessie_54 = 
                                                                    (let jessie_50 = 
                                                                    (C_28:
                                                                    ValMot) in
                                                                    (let jessie_53 = 
                                                                    (C_29:
                                                                    ((shift Adresse) 
                                                                    (integer_of_uint32 !i_0))) in
                                                                    (((safe_upd_ unsigned_long_P_unsigned_long_M_Adresse_2) jessie_53) jessie_50))) in
                                                                    void);
                                                                   (C_34:
                                                                   begin
                                                                     
                                                                    (i_0 := 
                                                                    (C_33:
                                                                    (safe_uint32_of_integer_ 
                                                                    (C_32:
                                                                    ((add_int 
                                                                    (integer_of_uint32 !i_0)) (1))))));
                                                                    !i_0
                                                                   end)
                                                                  end)
                                                                 end in
                                                void);
                                               (raise
                                                (Loop_continue_exc
                                                void))
                                              end in
                             void)
                             with
                             Loop_continue_exc jessie_6 ->
                             void end
                           end
                          done);
                         (raise (Goto_while_1_break_exc void))
                        end in
       void)
       with
       Goto_while_1_break_exc jessie_4 ->
       (while_1_break: void) end;
      (raise Return)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_51:
    (forall k_2:int.
     ((le_int(integer_of_uint32(i_min), k_2)
      and le_int(k_2, integer_of_uint32(i_max))) ->
      eq_int(integer_of_uint32(select(unsigned_long_P_unsigned_long_M_Adresse_2,
                               shift(Adresse, k_2))),
      integer_of_uint32(ValMot))))) }

let memset_uint_safety =
 fun (Adresse : unsigned_long_P pointer) (ValMot : uint32) (i_min : uint32) (i_max : uint32) (unsigned_long_P_unsigned_long_M_Adresse_2 : (unsigned_long_P, uint32) memory ref) (unsigned_long_P_Adresse_2_alloc_table : unsigned_long_P alloc_table) ->
  { (JC_49:
    ((JC_45: le_int(integer_of_uint32(i_min), integer_of_uint32(i_max)))
    and ((JC_46: le_int(integer_of_uint32(i_max), (4294967294)))
        and ((JC_47:
             le_int(offset_min(unsigned_long_P_Adresse_2_alloc_table,
                    Adresse),
             integer_of_uint32(i_min)))
            and (JC_48:
                ge_int(offset_max(unsigned_long_P_Adresse_2_alloc_table,
                       Adresse),
                integer_of_uint32(i_max))))))) }
  (init:
  try
   begin
     (let i_0 = ref (any_uint32 void) in
     (C_21:
     begin
       (let jessie_34 = (i_0 := i_min) in void);
      try
       (let jessie_45 = begin
                          (loop_3:
                          while true do
                          { invariant (JC_61: true) variant (0) }
                           begin
                             [ { } unit
                               reads i_0,unsigned_long_P_unsigned_long_M_Adresse_2
                               { ((JC_58:
                                  ((JC_55:
                                   le_int(integer_of_uint32(i_min),
                                   integer_of_uint32(i_0)))
                                  and ((JC_56:
                                       le_int(integer_of_uint32(i_0),
                                       add_int(integer_of_uint32(i_max), (1))))
                                      and (JC_57:
                                          le_int(add_int(integer_of_uint32(i_max),
                                                 (1)),
                                          (4294967295))))))
                                 and (JC_59:
                                     (forall k_1:int.
                                      ((le_int(integer_of_uint32(i_min), k_1)
                                       and lt_int(k_1,
                                           integer_of_uint32(i_0))) ->
                                       eq_int(integer_of_uint32(select(unsigned_long_P_unsigned_long_M_Adresse_2,
                                                                shift(Adresse,
                                                                k_1))),
                                       integer_of_uint32(ValMot)))))) } ];
                            try
                             (let jessie_44 = begin
                                                (let jessie_43 = begin
                                                                   (if 
                                                                   ((le_int_ 
                                                                    (integer_of_uint32 !i_0)) 
                                                                    (integer_of_uint32 i_max))
                                                                   then void
                                                                   else
                                                                    (let jessie_35 = 
                                                                    (raise
                                                                    (Goto_while_1_break_exc
                                                                    void)) in
                                                                    void));
                                                                  (C_31:
                                                                  begin
                                                                    (let jessie_41 = 
                                                                    (let jessie_37 = 
                                                                    (C_28:
                                                                    ValMot) in
                                                                    (let jessie_38 = Adresse in
                                                                    (let jessie_39 = 
                                                                    (integer_of_uint32 !i_0) in
                                                                    (let jessie_40 = 
                                                                    ((shift jessie_38) jessie_39) in
                                                                    (JC_63:
                                                                    (((((offset_upd_ unsigned_long_P_Adresse_2_alloc_table) unsigned_long_P_unsigned_long_M_Adresse_2) jessie_38) jessie_39) jessie_37)))))) in
                                                                    void);
                                                                   (C_34:
                                                                   begin
                                                                     
                                                                    (i_0 := 
                                                                    (C_33:
                                                                    (JC_64:
                                                                    (uint32_of_integer_ 
                                                                    (C_32:
                                                                    ((add_int 
                                                                    (integer_of_uint32 !i_0)) (1)))))));
                                                                    !i_0
                                                                   end)
                                                                  end)
                                                                 end in
                                                void);
                                               (raise
                                                (Loop_continue_exc
                                                void))
                                              end in
                             void)
                             with
                             Loop_continue_exc jessie_6 ->
                             void end
                           end
                          done);
                         (raise (Goto_while_1_break_exc void))
                        end in
       void)
       with
       Goto_while_1_break_exc jessie_4 ->
       (while_1_break: void) end;
      (raise Return)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C asm_memset2.jessie --quiet -f asm_memset2.makefile project
why --project [...] why/asm_memset2.why
