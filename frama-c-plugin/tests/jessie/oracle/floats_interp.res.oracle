Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only floats_interp.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD floats_interp.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir floats_interp.jessie
[jessie] File floats_interp.jessie/floats_interp.jc written.
[jessie] File floats_interp.jessie/floats_interp.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag double_P = {
  double double_M: 64;
}

type double_P = [double_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

predicate min_step{L}(double_P[..] t, integer a, integer b, real bound) =
(\forall integer i;
  (((a < i) && (i <= b)) ==>
    ((((t + i).double_M :> real) - ((t + (i - 1)).double_M :> real)) >=
      bound)))

lemma min_step_increasing{L} :
(\forall double_P[..] t_0;
  (\forall integer a_0;
    (\forall integer b_0;
      (\forall real bound_0;
        (((bound_0 >= 0.0) && min_step{L}(t_0, a_0, b_0, bound_0)) ==>
          (\forall integer i_0;
            (\forall integer j;
              (((a_0 <= i_0) && ((i_0 <= j) && (j <= b_0))) ==>
                (((t_0 + i_0).double_M :> real) <=
                  ((t_0 + j).double_M :> real))))))))))

predicate bounded(double z, real bound_1) =
(((- bound_1) <= (z :> real)) && ((z :> real) <= bound_1))

predicate array_bounded{L}(double_P[..] t_1, int32 n, real bound_2) =
(\forall integer i_1;
  (((0 <= i_1) && (i_1 < n)) ==> bounded((t_1 + i_1).double_M, bound_2)))

int32 i_interp;

double interp_lin(double_P[..] x, double_P[..] y, int32 n, double z)
  requires (C_52 : (((C_54 : (n >= 1)) &&
                      ((C_56 : (\offset_min(x) <= 0)) &&
                        (C_57 : (\offset_max(x) >= (n - 1))))) &&
                     ((C_59 : (\offset_min(y) <= 0)) &&
                       (C_60 : (\offset_max(y) >= (n - 1))))));
  requires (C_61 : min_step{Here}(x, 0, (n - 1), 0x1p-341));
  requires (C_62 : bounded(z, 0x1p340));
  requires (C_63 : array_bounded{Here}(x, n, 0x1p340));
  requires (C_64 : array_bounded{Here}(y, n, 0x1p340));
behavior default:
  assigns i_interp;
  ensures (C_65 : true);
behavior too_low:
  assumes ((z :> real) <= ((x + 0).double_M :> real));
  ensures (C_66 : ((\result :> real) == ((y + 0).double_M :> real)));
behavior too_high:
  assumes ((z :> real) > ((x + (n - 1)).double_M :> real));
  ensures (C_67 : ((\result :> real) == ((y + (n - 1)).double_M :> real)));
behavior in_interval:
  assumes ((((x + 0).double_M :> real) < (z :> real)) &&
            ((z :> real) <= ((x + (n - 1)).double_M :> real)));
  ensures (C_68 : (((C_70 : (1 <= i_interp)) &&
                     (C_71 : (i_interp <= (n - 1)))) &&
                    (((C_74 : (((x + (i_interp - 1)).double_M :> real) <
                                (z :> real))) &&
                       (C_75 : ((z :> real) <=
                                 ((x + i_interp).double_M :> real)))) &&
                      (C_76 : (let real v =
                              ((((y + i_interp).double_M :> real) -
                                 ((y + (i_interp - 1)).double_M :> real)) /
                                (((x + i_interp).double_M :> real) -
                                  ((x + (i_interp - 1)).double_M :> real)))
                              in (let real exact_result =
                                 (((y + i_interp).double_M :> real) +
                                   (v *
                                     ((z :> real) -
                                       ((x + (i_interp - 1)).double_M :> real))))
                                 in (\real_abs(((\result :> real) -
                                                 exact_result)) <=
                                      0x1p-10)))))));
{  
   (var int32 i);
   
   (var double xim1);
   
   (var double xi);
   
   (var double yim1);
   
   (var double yi);
   
   (var double v);
   
   (var double __retres);
   
   {  (if (z <= (C_5 : (C_4 : (x + 0)).double_M)) then 
      {  (C_3 : (__retres = (C_2 : (C_1 : (y + 0)).double_M)));
         
         (goto return_label)
      } else ());
      (C_6 : (i = 1));
      
      {  
         loop 
         behavior default:
           invariant (C_11 : (\forall integer j_0;
                               (((0 <= j_0) && (j_0 < i)) ==>
                                 ((z :> real) > ((x + j_0).double_M :> real)))));
         behavior default:
           invariant (C_8 : ((C_9 : (1 <= i)) && (C_10 : (i <= n))));
         variant (C_7 : (n - i));
         while (true)
         {  
            {  (if (i < n) then () else 
               (goto while_0_break));
               (if (z <= (C_13 : (C_12 : (x + i)).double_M)) then 
               (goto while_0_break) else ());
               (C_16 : (i = (C_15 : ((C_14 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      (if (i == n) then 
      {  (C_21 : (__retres = (C_20 : (C_19 : (y +
                                               (C_18 : ((C_17 : (n - 1)) :> int32)))).double_M)));
         
         (goto return_label)
      } else ());
      (C_22 : (i_interp = i));
      (C_27 : (xim1 = (C_26 : (C_25 : (x +
                                        (C_24 : ((C_23 : (i - 1)) :> int32)))).double_M)));
      
      {  
         (assert for default: (C_28 : bounded(xim1, 0x1p340)));
         ()
      };
      
      {  (C_31 : (xi = (C_30 : (C_29 : (x + i)).double_M)))
      };
      
      {  
         (assert for default: (C_32 : bounded(xi, 0x1p340)));
         ()
      };
      
      {  
         (assert for default: (C_33 : (((xi :> real) - (xim1 :> real)) >=
                                        0x1p-341)));
         ()
      };
      
      {  (C_38 : (yim1 = (C_37 : (C_36 : (y +
                                           (C_35 : ((C_34 : (i - 1)) :> int32)))).double_M)))
      };
      
      {  
         (assert for default: (C_39 : bounded(yim1, 0x1p340)));
         ()
      };
      
      {  (C_42 : (yi = (C_41 : (C_40 : (y + i)).double_M)))
      };
      
      {  
         (assert for default: (C_43 : bounded(yi, 0x1p340)));
         ()
      };
      
      {  (C_47 : (v = (C_46 : ((C_45 : (yi - yim1)) / (C_44 : (xi - xim1))))))
      };
      (C_51 : (__retres = (C_50 : (yi + (C_49 : (v * (C_48 : (z - xim1))))))));
      (return_label : 
      (return __retres))
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs floats_interp.jessie/floats_interp.cloc floats_interp.jessie/floats_interp.jc
type char_P

type double_P

type int32

type int8

type padding

type void_P

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic integer_of_int32: int32 -> int

predicate bounded(z:double,
 bound_1:real) =
 (le_real(neg_real(bound_1), double_value(z))
 and le_real(double_value(z), bound_1))

predicate array_bounded(t_1:double_P pointer,
 n:int32,
 bound_2:real,
 double_P_double_M_t_1_2_at_L:(double_P, double) memory) =
 (forall i_1:int.
  ((le_int((0), i_1) and lt_int(i_1, integer_of_int32(n))) ->
   bounded(select(double_P_double_M_t_1_2_at_L, shift(t_1, i_1)), bound_2)))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic double_P_tag:  -> double_P tag_id

axiom double_P_int : (int_of_tag(double_P_tag) = (1))

logic double_P_of_pointer_address: unit pointer -> double_P pointer

axiom double_P_of_pointer_address_of_pointer_addr :
 (forall p:double_P pointer.
  (p = double_P_of_pointer_address(pointer_address(p))))

axiom double_P_parenttag_bottom : parenttag(double_P_tag, bottom_tag)

axiom double_P_tags :
 (forall x:double_P pointer.
  (forall double_P_tag_table:double_P tag_table.
   instanceof(double_P_tag_table, x, double_P_tag)))

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_double_P(p:double_P pointer,
 a:int,
 double_P_alloc_table:double_P alloc_table) =
 (offset_min(double_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

predicate min_step(t:double_P pointer,
 a:int,
 b:int,
 bound:real,
 double_P_double_M_t_1_at_L:(double_P, double) memory) =
 (forall i:int.
  ((lt_int(a, i) and le_int(i, b)) ->
   ge_real(sub_real(double_value(select(double_P_double_M_t_1_at_L,
                                 shift(t, i))),
           double_value(select(double_P_double_M_t_1_at_L,
                        shift(t, sub_int(i, (1)))))),
   bound)))

goal min_step_increasing :
 (forall double_P_double_M_t_0_5_at_L:(double_P, double) memory.
  (forall t_0:double_P pointer.
   (forall a_0:int.
    (forall b_0:int.
     (forall bound_0:real.
      ((ge_real(bound_0, 0.0)
       and min_step(t_0, a_0, b_0, bound_0, double_P_double_M_t_0_5_at_L)) ->
       (forall i_0:int.
        (forall j:int.
         ((le_int(a_0, i_0) and (le_int(i_0, j) and le_int(j, b_0))) ->
          le_real(double_value(select(double_P_double_M_t_0_5_at_L,
                               shift(t_0, i_0))),
          double_value(select(double_P_double_M_t_0_5_at_L, shift(t_0, j)))))))))))))

axiom min_step_increasing_as_axiom :
 (forall double_P_double_M_t_0_5_at_L:(double_P, double) memory.
  (forall t_0:double_P pointer.
   (forall a_0:int.
    (forall b_0:int.
     (forall bound_0:real.
      ((ge_real(bound_0, 0.0)
       and min_step(t_0, a_0, b_0, bound_0, double_P_double_M_t_0_5_at_L)) ->
       (forall i_0:int.
        (forall j:int.
         ((le_int(a_0, i_0) and (le_int(i_0, j) and le_int(j, b_0))) ->
          le_real(double_value(select(double_P_double_M_t_0_5_at_L,
                               shift(t_0, i_0))),
          double_value(select(double_P_double_M_t_0_5_at_L, shift(t_0, j)))))))))))))

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_double_P_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(double_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_double_P(p:double_P pointer,
 b:int,
 double_P_alloc_table:double_P alloc_table) =
 (offset_max(double_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_double_P(p:double_P pointer,
 a:int,
 b:int,
 double_P_alloc_table:double_P alloc_table) =
 ((offset_min(double_P_alloc_table, p) = a)
 and (offset_max(double_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_double_P(p:double_P pointer,
 a:int,
 b:int,
 double_P_alloc_table:double_P alloc_table) =
 ((offset_min(double_P_alloc_table, p) = a)
 and (offset_max(double_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_double_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_double_P(p:double_P pointer,
 a:int,
 b:int,
 double_P_alloc_table:double_P alloc_table) =
 ((offset_min(double_P_alloc_table, p) <= a)
 and (offset_max(double_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_double_P(p:double_P pointer,
 a:int,
 b:int,
 double_P_alloc_table:double_P alloc_table) =
 ((offset_min(double_P_alloc_table, p) <= a)
 and (offset_max(double_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_double_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_double_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_double_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_double_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter double_P_alloc_table : double_P alloc_table ref

parameter double_P_tag_table : double_P tag_table ref

parameter alloc_struct_double_P :
 n:int ->
  double_P_alloc_table:double_P alloc_table ref ->
   double_P_tag_table:double_P tag_table ref ->
    { } double_P pointer writes double_P_alloc_table,double_P_tag_table
    { (strict_valid_struct_double_P(result, (0), sub_int(n, (1)),
       double_P_alloc_table)
      and (alloc_extends(double_P_alloc_table@, double_P_alloc_table)
          and (alloc_fresh(double_P_alloc_table@, result, n)
              and instanceof(double_P_tag_table, result, double_P_tag)))) }

parameter alloc_struct_double_P_requires :
 n:int ->
  double_P_alloc_table:double_P alloc_table ref ->
   double_P_tag_table:double_P tag_table ref ->
    { ge_int(n, (0))} double_P pointer
    writes double_P_alloc_table,double_P_tag_table
    { (strict_valid_struct_double_P(result, (0), sub_int(n, (1)),
       double_P_alloc_table)
      and (alloc_extends(double_P_alloc_table@, double_P_alloc_table)
          and (alloc_fresh(double_P_alloc_table@, result, n)
              and instanceof(double_P_tag_table, result, double_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter i_interp : int32 ref

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter interp_lin :
 x:double_P pointer ->
  y:double_P pointer ->
   n_0:int32 ->
    z_0:double ->
     double_P_y_4_alloc_table:double_P alloc_table ->
      double_P_x_3_alloc_table:double_P alloc_table ->
       double_P_double_M_y_4:(double_P, double) memory ->
        double_P_double_M_x_3:(double_P, double) memory ->
         { } double reads i_interp writes i_interp
         { (((lt_real(double_value(select(double_P_double_M_x_3@,
                                   shift(x@, (0)))),
              double_value(z_0@))
             and le_real(double_value(z_0@),
                 double_value(select(double_P_double_M_x_3@,
                              shift(x@, sub_int(integer_of_int32(n_0@), (1))))))) ->
             (JC_44:
             ((JC_39: le_int((1), integer_of_int32(i_interp)))
             and ((JC_40:
                  le_int(integer_of_int32(i_interp),
                  sub_int(integer_of_int32(n_0), (1))))
                 and ((JC_41:
                      lt_real(double_value(select(double_P_double_M_x_3,
                                           shift(x,
                                           sub_int(integer_of_int32(i_interp),
                                           (1))))),
                      double_value(z_0)))
                     and ((JC_42:
                          le_real(double_value(z_0),
                          double_value(select(double_P_double_M_x_3,
                                       shift(x, integer_of_int32(i_interp))))))
                         and (JC_43:
                             (let v =
                                   div_real(sub_real(double_value(select(double_P_double_M_y_4,
                                                                  shift(y,
                                                                  integer_of_int32(i_interp)))),
                                            double_value(select(double_P_double_M_y_4,
                                                         shift(y,
                                                         sub_int(integer_of_int32(i_interp),
                                                         (1)))))),
                                   sub_real(double_value(select(double_P_double_M_x_3,
                                                         shift(x,
                                                         integer_of_int32(i_interp)))),
                                   double_value(select(double_P_double_M_x_3,
                                                shift(x,
                                                sub_int(integer_of_int32(i_interp),
                                                (1))))))) in
                              (let exact_result =
                                    add_real(double_value(select(double_P_double_M_y_4,
                                                          shift(y,
                                                          integer_of_int32(i_interp)))),
                                    mul_real(v,
                                    sub_real(double_value(z_0),
                                    double_value(select(double_P_double_M_x_3,
                                                 shift(x,
                                                 sub_int(integer_of_int32(i_interp),
                                                 (1)))))))) in
                               le_real(abs_real(sub_real(double_value(result),
                                                exact_result)),
                               0x1p-10))))))))))
           and ((gt_real(double_value(z_0@),
                 double_value(select(double_P_double_M_x_3@,
                              shift(x@, sub_int(integer_of_int32(n_0@), (1)))))) ->
                 (JC_32:
                 eq_real(double_value(result),
                 double_value(select(double_P_double_M_y_4,
                              shift(y, sub_int(integer_of_int32(n_0), (1))))))))
               and (le_real(double_value(z_0@),
                    double_value(select(double_P_double_M_x_3@,
                                 shift(x@, (0))))) ->
                    (JC_30:
                    eq_real(double_value(result),
                    double_value(select(double_P_double_M_y_4, shift(y, (0))))))))) }

parameter interp_lin_requires :
 x:double_P pointer ->
  y:double_P pointer ->
   n_0:int32 ->
    z_0:double ->
     double_P_y_4_alloc_table:double_P alloc_table ->
      double_P_x_3_alloc_table:double_P alloc_table ->
       double_P_double_M_y_4:(double_P, double) memory ->
        double_P_double_M_x_3:(double_P, double) memory ->
         { (JC_10:
           ((JC_1: ge_int(integer_of_int32(n_0), (1)))
           and ((JC_2: le_int(offset_min(double_P_x_3_alloc_table, x), (0)))
               and ((JC_3:
                    ge_int(offset_max(double_P_x_3_alloc_table, x),
                    sub_int(integer_of_int32(n_0), (1))))
                   and ((JC_4:
                        le_int(offset_min(double_P_y_4_alloc_table, y), (0)))
                       and ((JC_5:
                            ge_int(offset_max(double_P_y_4_alloc_table, y),
                            sub_int(integer_of_int32(n_0), (1))))
                           and ((JC_6:
                                min_step(x, (0),
                                sub_int(integer_of_int32(n_0), (1)),
                                0x1p-341, double_P_double_M_x_3))
                               and ((JC_7: bounded(z_0, 0x1p340))
                                   and ((JC_8:
                                        array_bounded(x, n_0, 0x1p340,
                                        double_P_double_M_x_3))
                                       and (JC_9:
                                           array_bounded(y, n_0, 0x1p340,
                                           double_P_double_M_y_4)))))))))))}
         double reads i_interp writes i_interp
         { (((lt_real(double_value(select(double_P_double_M_x_3@,
                                   shift(x@, (0)))),
              double_value(z_0@))
             and le_real(double_value(z_0@),
                 double_value(select(double_P_double_M_x_3@,
                              shift(x@, sub_int(integer_of_int32(n_0@), (1))))))) ->
             (JC_44:
             ((JC_39: le_int((1), integer_of_int32(i_interp)))
             and ((JC_40:
                  le_int(integer_of_int32(i_interp),
                  sub_int(integer_of_int32(n_0), (1))))
                 and ((JC_41:
                      lt_real(double_value(select(double_P_double_M_x_3,
                                           shift(x,
                                           sub_int(integer_of_int32(i_interp),
                                           (1))))),
                      double_value(z_0)))
                     and ((JC_42:
                          le_real(double_value(z_0),
                          double_value(select(double_P_double_M_x_3,
                                       shift(x, integer_of_int32(i_interp))))))
                         and (JC_43:
                             (let v =
                                   div_real(sub_real(double_value(select(double_P_double_M_y_4,
                                                                  shift(y,
                                                                  integer_of_int32(i_interp)))),
                                            double_value(select(double_P_double_M_y_4,
                                                         shift(y,
                                                         sub_int(integer_of_int32(i_interp),
                                                         (1)))))),
                                   sub_real(double_value(select(double_P_double_M_x_3,
                                                         shift(x,
                                                         integer_of_int32(i_interp)))),
                                   double_value(select(double_P_double_M_x_3,
                                                shift(x,
                                                sub_int(integer_of_int32(i_interp),
                                                (1))))))) in
                              (let exact_result =
                                    add_real(double_value(select(double_P_double_M_y_4,
                                                          shift(y,
                                                          integer_of_int32(i_interp)))),
                                    mul_real(v,
                                    sub_real(double_value(z_0),
                                    double_value(select(double_P_double_M_x_3,
                                                 shift(x,
                                                 sub_int(integer_of_int32(i_interp),
                                                 (1)))))))) in
                               le_real(abs_real(sub_real(double_value(result),
                                                exact_result)),
                               0x1p-10))))))))))
           and ((gt_real(double_value(z_0@),
                 double_value(select(double_P_double_M_x_3@,
                              shift(x@, sub_int(integer_of_int32(n_0@), (1)))))) ->
                 (JC_32:
                 eq_real(double_value(result),
                 double_value(select(double_P_double_M_y_4,
                              shift(y, sub_int(integer_of_int32(n_0), (1))))))))
               and (le_real(double_value(z_0@),
                    double_value(select(double_P_double_M_x_3@,
                                 shift(x@, (0))))) ->
                    (JC_30:
                    eq_real(double_value(result),
                    double_value(select(double_P_double_M_y_4, shift(y, (0))))))))) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let interp_lin_ensures_default =
 fun (x : double_P pointer) (y : double_P pointer) (n_0 : int32) (z_0 : double) (double_P_x_3_alloc_table : double_P alloc_table) (double_P_y_4_alloc_table : double_P alloc_table) (double_P_double_M_x_3 : (double_P, double) memory) (double_P_double_M_y_4 : (double_P, double) memory) ->
  { (JC_21:
    ((JC_12: ge_int(integer_of_int32(n_0), (1)))
    and ((JC_13: le_int(offset_min(double_P_x_3_alloc_table, x), (0)))
        and ((JC_14:
             ge_int(offset_max(double_P_x_3_alloc_table, x),
             sub_int(integer_of_int32(n_0), (1))))
            and ((JC_15:
                 le_int(offset_min(double_P_y_4_alloc_table, y), (0)))
                and ((JC_16:
                     ge_int(offset_max(double_P_y_4_alloc_table, y),
                     sub_int(integer_of_int32(n_0), (1))))
                    and ((JC_17:
                         min_step(x, (0),
                         sub_int(integer_of_int32(n_0), (1)), 0x1p-341,
                         double_P_double_M_x_3))
                        and ((JC_18: bounded(z_0, 0x1p340))
                            and ((JC_19:
                                 array_bounded(x, n_0, 0x1p340,
                                 double_P_double_M_x_3))
                                and (JC_20:
                                    array_bounded(y, n_0, 0x1p340,
                                    double_P_double_M_y_4))))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let i_2 = ref (any_int32 void) in
     (let xim1 = ref (any_double void) in
     (let xi = ref (any_double void) in
     (let yim1 = ref (any_double void) in
     (let yi = ref (any_double void) in
     (let v_0 = ref (any_double void) in
     (let __retres = ref (any_double void) in
     try
      (let jessie_63 = begin
                         (if ((le_double z_0) (C_5:
                                              ((safe_acc_ double_P_double_M_x_3) 
                                               (C_4:
                                               ((shift x) (0))))))
                         then
                          (let jessie_37 = (C_3:
                                           begin
                                             (let jessie_36 = (__retres := 
                                                               (C_2:
                                                               ((safe_acc_ double_P_double_M_y_4) 
                                                                (C_1:
                                                                ((shift y) (0)))))) in
                                             void);
                                            (raise (Return_label_exc void))
                                           end) in
                          void)
                         else void);
                        (C_6:
                        begin
                          (let jessie_39 = (i_2 := (safe_int32_of_integer_ (1))) in
                          void);
                         try
                          (let jessie_45 = begin
                                             (loop_2:
                                             while true do
                                             { invariant
                                                 ((JC_78:
                                                  ((JC_76:
                                                   le_int((1),
                                                   integer_of_int32(i_2)))
                                                  and (JC_77:
                                                      le_int(integer_of_int32(i_2),
                                                      integer_of_int32(n_0)))))
                                                 and (JC_79:
                                                     (forall j_0:int.
                                                      ((le_int((0), j_0)
                                                       and lt_int(j_0,
                                                           integer_of_int32(i_2))) ->
                                                       gt_real(double_value(z_0),
                                                       double_value(select(double_P_double_M_x_3,
                                                                    shift(x,
                                                                    j_0))))))))
                                                }
                                              begin
                                                [ { } unit { true } ];
                                               try
                                                (let jessie_44 = begin
                                                                   (let jessie_43 = 
                                                                   begin
                                                                     
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !i_2)) 
                                                                    (integer_of_int32 n_0))
                                                                    then void
                                                                    else
                                                                    (let jessie_40 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                    (if 
                                                                    ((le_double z_0) 
                                                                    (C_13:
                                                                    ((safe_acc_ double_P_double_M_x_3) 
                                                                    (C_12:
                                                                    ((shift x) 
                                                                    (integer_of_int32 !i_2))))))
                                                                    then
                                                                    (let jessie_41 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void)
                                                                    else void);
                                                                    (C_16:
                                                                    begin
                                                                      
                                                                    (i_2 := 
                                                                    (C_15:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_14:
                                                                    ((add_int 
                                                                    (integer_of_int32 !i_2)) (1))))));
                                                                    !i_2
                                                                    end)
                                                                   end in
                                                                   void);
                                                                  (raise
                                                                   (Loop_continue_exc
                                                                   void))
                                                                 end in
                                                void)
                                                with
                                                Loop_continue_exc jessie_4 ->
                                                void end
                                              end
                                             done);
                                            (raise
                                             (Goto_while_0_break_exc
                                             void))
                                           end in
                          void)
                          with
                          Goto_while_0_break_exc jessie_1 ->
                          (while_0_break: void) end;
                         (if ((eq_int_ (integer_of_int32 !i_2)) (integer_of_int32 n_0))
                         then
                          (let jessie_48 = (C_21:
                                           begin
                                             (let jessie_47 = (__retres := 
                                                               (C_20:
                                                               ((safe_acc_ double_P_double_M_y_4) 
                                                                (C_19:
                                                                ((shift y) 
                                                                 (integer_of_int32 
                                                                  (C_18:
                                                                  (safe_int32_of_integer_ 
                                                                   (C_17:
                                                                   ((sub_int 
                                                                    (integer_of_int32 n_0)) (1))))))))))) in
                                             void);
                                            (raise (Return_label_exc void))
                                           end) in
                          void)
                         else void);
                         (C_22:
                         begin
                           (let jessie_50 = (i_interp := !i_2) in void);
                          (C_27:
                          begin
                            (let jessie_52 = (xim1 := (C_26:
                                                      ((safe_acc_ double_P_double_M_x_3) 
                                                       (C_25:
                                                       ((shift x) (integer_of_int32 
                                                                   (C_24:
                                                                   (safe_int32_of_integer_ 
                                                                    (C_23:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !i_2)) (1))))))))))) in
                            void);
                           (assert { (JC_83: bounded(xim1, 0x1p340)) }; void);
                           void;
                           (let jessie_54 = (C_31:
                                            begin
                                              (xi := (C_30:
                                                     ((safe_acc_ double_P_double_M_x_3) 
                                                      (C_29:
                                                      ((shift x) (integer_of_int32 !i_2))))));
                                             !xi
                                            end) in
                           void);
                           (assert { (JC_84: bounded(xi, 0x1p340)) }; void);
                           void;
                           (assert
                           { (JC_85:
                             ge_real(sub_real(double_value(xi),
                                     double_value(xim1)),
                             0x1p-341)) };
                           void);
                           void;
                           (let jessie_56 = (C_38:
                                            begin
                                              (yim1 := (C_37:
                                                       ((safe_acc_ double_P_double_M_y_4) 
                                                        (C_36:
                                                        ((shift y) (integer_of_int32 
                                                                    (C_35:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_34:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !i_2)) (1)))))))))));
                                             !yim1
                                            end) in
                           void);
                           (assert { (JC_86: bounded(yim1, 0x1p340)) }; void);
                           void;
                           (let jessie_58 = (C_42:
                                            begin
                                              (yi := (C_41:
                                                     ((safe_acc_ double_P_double_M_y_4) 
                                                      (C_40:
                                                      ((shift y) (integer_of_int32 !i_2))))));
                                             !yi
                                            end) in
                           void);
                           (assert { (JC_87: bounded(yi, 0x1p340)) }; void);
                           void;
                           (let jessie_60 = (C_47:
                                            begin
                                              (v_0 := (C_46:
                                                      (JC_90:
                                                      (((div_double_safe nearest_even) 
                                                        (C_45:
                                                        (JC_88:
                                                        (((sub_double_safe nearest_even) !yi) !yim1)))) 
                                                       (C_44:
                                                       (JC_89:
                                                       (((sub_double_safe nearest_even) !xi) !xim1)))))));
                                             !v_0
                                            end) in
                           void);
                           (C_51:
                           begin
                             (let jessie_62 = (__retres := (C_50:
                                                           (JC_93:
                                                           (((add_double_safe nearest_even) !yi) 
                                                            (C_49:
                                                            (JC_92:
                                                            (((mul_double_safe nearest_even) !v_0) 
                                                             (C_48:
                                                             (JC_91:
                                                             (((sub_double_safe nearest_even) z_0) !xim1)))))))))) in
                             void);
                            (raise (Return_label_exc void))
                           end)
                          end)
                         end)
                        end)
                       end in
      void)
      with
      Return_label_exc jessie_2 ->
      (return_label: begin   (return := !__retres); (raise Return) end) end)))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_24: true) }

let interp_lin_ensures_in_interval =
 fun (x : double_P pointer) (y : double_P pointer) (n_0 : int32) (z_0 : double) (double_P_x_3_alloc_table : double_P alloc_table) (double_P_y_4_alloc_table : double_P alloc_table) (double_P_double_M_x_3 : (double_P, double) memory) (double_P_double_M_y_4 : (double_P, double) memory) ->
  { ((lt_real(double_value(select(double_P_double_M_x_3, shift(x, (0)))),
      double_value(z_0))
     and le_real(double_value(z_0),
         double_value(select(double_P_double_M_x_3,
                      shift(x, sub_int(integer_of_int32(n_0), (1)))))))
    and (JC_21:
        ((JC_12: ge_int(integer_of_int32(n_0), (1)))
        and ((JC_13: le_int(offset_min(double_P_x_3_alloc_table, x), (0)))
            and ((JC_14:
                 ge_int(offset_max(double_P_x_3_alloc_table, x),
                 sub_int(integer_of_int32(n_0), (1))))
                and ((JC_15:
                     le_int(offset_min(double_P_y_4_alloc_table, y), (0)))
                    and ((JC_16:
                         ge_int(offset_max(double_P_y_4_alloc_table, y),
                         sub_int(integer_of_int32(n_0), (1))))
                        and ((JC_17:
                             min_step(x, (0),
                             sub_int(integer_of_int32(n_0), (1)), 0x1p-341,
                             double_P_double_M_x_3))
                            and ((JC_18: bounded(z_0, 0x1p340))
                                and ((JC_19:
                                     array_bounded(x, n_0, 0x1p340,
                                     double_P_double_M_x_3))
                                    and (JC_20:
                                        array_bounded(y, n_0, 0x1p340,
                                        double_P_double_M_y_4)))))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let i_2 = ref (any_int32 void) in
     (let xim1 = ref (any_double void) in
     (let xi = ref (any_double void) in
     (let yim1 = ref (any_double void) in
     (let yi = ref (any_double void) in
     (let v_0 = ref (any_double void) in
     (let __retres = ref (any_double void) in
     try
      (let jessie_153 = begin
                          (if ((le_double z_0) (C_5:
                                               ((safe_acc_ double_P_double_M_x_3) 
                                                (C_4:
                                                ((shift x) (0))))))
                          then
                           (let jessie_127 = (C_3:
                                             begin
                                               (let jessie_126 = (__retres := 
                                                                  (C_2:
                                                                  ((safe_acc_ double_P_double_M_y_4) 
                                                                   (C_1:
                                                                   ((shift y) (0)))))) in
                                               void);
                                              (raise (Return_label_exc void))
                                             end) in
                           void)
                          else void);
                         (C_6:
                         begin
                           (let jessie_129 = (i_2 := (safe_int32_of_integer_ (1))) in
                           void);
                          try
                           (let jessie_135 = begin
                                               (loop_5:
                                               while true do
                                               { invariant (JC_135: true)  }
                                                begin
                                                  [ { } unit reads i_2
                                                    { ((JC_132:
                                                       ((JC_130:
                                                        le_int((1),
                                                        integer_of_int32(i_2)))
                                                       and (JC_131:
                                                           le_int(integer_of_int32(i_2),
                                                           integer_of_int32(n_0)))))
                                                      and (JC_133:
                                                          (forall j_0:int.
                                                           ((le_int((0), j_0)
                                                            and lt_int(j_0,
                                                                integer_of_int32(i_2))) ->
                                                            gt_real(double_value(z_0),
                                                            double_value(
                                                            select(double_P_double_M_x_3,
                                                            shift(x, j_0)))))))) } ];
                                                 try
                                                  (let jessie_134 = begin
                                                                      
                                                                    (let jessie_133 = 
                                                                    begin
                                                                      
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !i_2)) 
                                                                    (integer_of_int32 n_0))
                                                                    then void
                                                                    else
                                                                    (let jessie_130 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                    (if 
                                                                    ((le_double z_0) 
                                                                    (C_13:
                                                                    ((safe_acc_ double_P_double_M_x_3) 
                                                                    (C_12:
                                                                    ((shift x) 
                                                                    (integer_of_int32 !i_2))))))
                                                                    then
                                                                    (let jessie_131 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void)
                                                                    else void);
                                                                    (C_16:
                                                                    begin
                                                                      
                                                                    (i_2 := 
                                                                    (C_15:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_14:
                                                                    ((add_int 
                                                                    (integer_of_int32 !i_2)) (1))))));
                                                                    !i_2
                                                                    end)
                                                                    end in
                                                                    void);
                                                                    (raise
                                                                    (Loop_continue_exc
                                                                    void))
                                                                    end in
                                                  void)
                                                  with
                                                  Loop_continue_exc jessie_4 ->
                                                  void end
                                                end
                                               done);
                                              (raise
                                               (Goto_while_0_break_exc
                                               void))
                                             end in
                           void)
                           with
                           Goto_while_0_break_exc jessie_1 ->
                           (while_0_break: void) end;
                          (if ((eq_int_ (integer_of_int32 !i_2)) (integer_of_int32 n_0))
                          then
                           (let jessie_138 = (C_21:
                                             begin
                                               (let jessie_137 = (__retres := 
                                                                  (C_20:
                                                                  ((safe_acc_ double_P_double_M_y_4) 
                                                                   (C_19:
                                                                   ((shift y) 
                                                                    (integer_of_int32 
                                                                    (C_18:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_17:
                                                                    ((sub_int 
                                                                    (integer_of_int32 n_0)) (1))))))))))) in
                                               void);
                                              (raise (Return_label_exc void))
                                             end) in
                           void)
                          else void);
                          (C_22:
                          begin
                            (let jessie_140 = (i_interp := !i_2) in void);
                           (C_27:
                           begin
                             (let jessie_142 = (xim1 := (C_26:
                                                        ((safe_acc_ double_P_double_M_x_3) 
                                                         (C_25:
                                                         ((shift x) (integer_of_int32 
                                                                    (C_24:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_23:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !i_2)) (1))))))))))) in
                             void);
                            [ { } unit reads xim1
                              { (JC_137: bounded(xim1, 0x1p340)) } ];
                            void;
                            (let jessie_144 = (C_31:
                                              begin
                                                (xi := (C_30:
                                                       ((safe_acc_ double_P_double_M_x_3) 
                                                        (C_29:
                                                        ((shift x) (integer_of_int32 !i_2))))));
                                               !xi
                                              end) in
                            void);
                            [ { } unit reads xi
                              { (JC_138: bounded(xi, 0x1p340)) } ];
                            void;
                            [ { } unit reads xi,xim1
                              { (JC_139:
                                ge_real(sub_real(double_value(xi),
                                        double_value(xim1)),
                                0x1p-341)) } ];
                            void;
                            (let jessie_146 = (C_38:
                                              begin
                                                (yim1 := (C_37:
                                                         ((safe_acc_ double_P_double_M_y_4) 
                                                          (C_36:
                                                          ((shift y) 
                                                           (integer_of_int32 
                                                            (C_35:
                                                            (safe_int32_of_integer_ 
                                                             (C_34:
                                                             ((sub_int 
                                                               (integer_of_int32 !i_2)) (1)))))))))));
                                               !yim1
                                              end) in
                            void);
                            [ { } unit reads yim1
                              { (JC_140: bounded(yim1, 0x1p340)) } ];
                            void;
                            (let jessie_148 = (C_42:
                                              begin
                                                (yi := (C_41:
                                                       ((safe_acc_ double_P_double_M_y_4) 
                                                        (C_40:
                                                        ((shift y) (integer_of_int32 !i_2))))));
                                               !yi
                                              end) in
                            void);
                            [ { } unit reads yi
                              { (JC_141: bounded(yi, 0x1p340)) } ];
                            void;
                            (let jessie_150 = (C_47:
                                              begin
                                                (v_0 := (C_46:
                                                        (JC_144:
                                                        (((div_double_safe nearest_even) 
                                                          (C_45:
                                                          (JC_142:
                                                          (((sub_double_safe nearest_even) !yi) !yim1)))) 
                                                         (C_44:
                                                         (JC_143:
                                                         (((sub_double_safe nearest_even) !xi) !xim1)))))));
                                               !v_0
                                              end) in
                            void);
                            (C_51:
                            begin
                              (let jessie_152 = (__retres := (C_50:
                                                             (JC_147:
                                                             (((add_double_safe nearest_even) !yi) 
                                                              (C_49:
                                                              (JC_146:
                                                              (((mul_double_safe nearest_even) !v_0) 
                                                               (C_48:
                                                               (JC_145:
                                                               (((sub_double_safe nearest_even) z_0) !xim1)))))))))) in
                              void);
                             (raise (Return_label_exc void))
                            end)
                           end)
                          end)
                         end)
                        end in
      void)
      with
      Return_label_exc jessie_2 ->
      (return_label: begin   (return := !__retres); (raise Return) end) end)))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_38:
    ((JC_33: le_int((1), integer_of_int32(i_interp)))
    and ((JC_34:
         le_int(integer_of_int32(i_interp),
         sub_int(integer_of_int32(n_0), (1))))
        and ((JC_35:
             lt_real(double_value(select(double_P_double_M_x_3,
                                  shift(x,
                                  sub_int(integer_of_int32(i_interp), (1))))),
             double_value(z_0)))
            and ((JC_36:
                 le_real(double_value(z_0),
                 double_value(select(double_P_double_M_x_3,
                              shift(x, integer_of_int32(i_interp))))))
                and (JC_37:
                    (let v =
                          div_real(sub_real(double_value(select(double_P_double_M_y_4,
                                                         shift(y,
                                                         integer_of_int32(i_interp)))),
                                   double_value(select(double_P_double_M_y_4,
                                                shift(y,
                                                sub_int(integer_of_int32(i_interp),
                                                (1)))))),
                          sub_real(double_value(select(double_P_double_M_x_3,
                                                shift(x,
                                                integer_of_int32(i_interp)))),
                          double_value(select(double_P_double_M_x_3,
                                       shift(x,
                                       sub_int(integer_of_int32(i_interp),
                                       (1))))))) in
                     (let exact_result =
                           add_real(double_value(select(double_P_double_M_y_4,
                                                 shift(y,
                                                 integer_of_int32(i_interp)))),
                           mul_real(v,
                           sub_real(double_value(z_0),
                           double_value(select(double_P_double_M_x_3,
                                        shift(x,
                                        sub_int(integer_of_int32(i_interp),
                                        (1)))))))) in
                      le_real(abs_real(sub_real(double_value(result),
                                       exact_result)),
                      0x1p-10))))))))) }

let interp_lin_ensures_too_high =
 fun (x : double_P pointer) (y : double_P pointer) (n_0 : int32) (z_0 : double) (double_P_x_3_alloc_table : double_P alloc_table) (double_P_y_4_alloc_table : double_P alloc_table) (double_P_double_M_x_3 : (double_P, double) memory) (double_P_double_M_y_4 : (double_P, double) memory) ->
  { (gt_real(double_value(z_0),
     double_value(select(double_P_double_M_x_3,
                  shift(x, sub_int(integer_of_int32(n_0), (1))))))
    and (JC_21:
        ((JC_12: ge_int(integer_of_int32(n_0), (1)))
        and ((JC_13: le_int(offset_min(double_P_x_3_alloc_table, x), (0)))
            and ((JC_14:
                 ge_int(offset_max(double_P_x_3_alloc_table, x),
                 sub_int(integer_of_int32(n_0), (1))))
                and ((JC_15:
                     le_int(offset_min(double_P_y_4_alloc_table, y), (0)))
                    and ((JC_16:
                         ge_int(offset_max(double_P_y_4_alloc_table, y),
                         sub_int(integer_of_int32(n_0), (1))))
                        and ((JC_17:
                             min_step(x, (0),
                             sub_int(integer_of_int32(n_0), (1)), 0x1p-341,
                             double_P_double_M_x_3))
                            and ((JC_18: bounded(z_0, 0x1p340))
                                and ((JC_19:
                                     array_bounded(x, n_0, 0x1p340,
                                     double_P_double_M_x_3))
                                    and (JC_20:
                                        array_bounded(y, n_0, 0x1p340,
                                        double_P_double_M_y_4)))))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let i_2 = ref (any_int32 void) in
     (let xim1 = ref (any_double void) in
     (let xi = ref (any_double void) in
     (let yim1 = ref (any_double void) in
     (let yi = ref (any_double void) in
     (let v_0 = ref (any_double void) in
     (let __retres = ref (any_double void) in
     try
      (let jessie_123 = begin
                          (if ((le_double z_0) (C_5:
                                               ((safe_acc_ double_P_double_M_x_3) 
                                                (C_4:
                                                ((shift x) (0))))))
                          then
                           (let jessie_97 = (C_3:
                                            begin
                                              (let jessie_96 = (__retres := 
                                                                (C_2:
                                                                ((safe_acc_ double_P_double_M_y_4) 
                                                                 (C_1:
                                                                 ((shift y) (0)))))) in
                                              void);
                                             (raise (Return_label_exc void))
                                            end) in
                           void)
                          else void);
                         (C_6:
                         begin
                           (let jessie_99 = (i_2 := (safe_int32_of_integer_ (1))) in
                           void);
                          try
                           (let jessie_105 = begin
                                               (loop_4:
                                               while true do
                                               { invariant (JC_117: true)  }
                                                begin
                                                  [ { } unit reads i_2
                                                    { ((JC_114:
                                                       ((JC_112:
                                                        le_int((1),
                                                        integer_of_int32(i_2)))
                                                       and (JC_113:
                                                           le_int(integer_of_int32(i_2),
                                                           integer_of_int32(n_0)))))
                                                      and (JC_115:
                                                          (forall j_0:int.
                                                           ((le_int((0), j_0)
                                                            and lt_int(j_0,
                                                                integer_of_int32(i_2))) ->
                                                            gt_real(double_value(z_0),
                                                            double_value(
                                                            select(double_P_double_M_x_3,
                                                            shift(x, j_0)))))))) } ];
                                                 try
                                                  (let jessie_104 = begin
                                                                      
                                                                    (let jessie_103 = 
                                                                    begin
                                                                      
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !i_2)) 
                                                                    (integer_of_int32 n_0))
                                                                    then void
                                                                    else
                                                                    (let jessie_100 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                    (if 
                                                                    ((le_double z_0) 
                                                                    (C_13:
                                                                    ((safe_acc_ double_P_double_M_x_3) 
                                                                    (C_12:
                                                                    ((shift x) 
                                                                    (integer_of_int32 !i_2))))))
                                                                    then
                                                                    (let jessie_101 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void)
                                                                    else void);
                                                                    (C_16:
                                                                    begin
                                                                      
                                                                    (i_2 := 
                                                                    (C_15:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_14:
                                                                    ((add_int 
                                                                    (integer_of_int32 !i_2)) (1))))));
                                                                    !i_2
                                                                    end)
                                                                    end in
                                                                    void);
                                                                    (raise
                                                                    (Loop_continue_exc
                                                                    void))
                                                                    end in
                                                  void)
                                                  with
                                                  Loop_continue_exc jessie_4 ->
                                                  void end
                                                end
                                               done);
                                              (raise
                                               (Goto_while_0_break_exc
                                               void))
                                             end in
                           void)
                           with
                           Goto_while_0_break_exc jessie_1 ->
                           (while_0_break: void) end;
                          (if ((eq_int_ (integer_of_int32 !i_2)) (integer_of_int32 n_0))
                          then
                           (let jessie_108 = (C_21:
                                             begin
                                               (let jessie_107 = (__retres := 
                                                                  (C_20:
                                                                  ((safe_acc_ double_P_double_M_y_4) 
                                                                   (C_19:
                                                                   ((shift y) 
                                                                    (integer_of_int32 
                                                                    (C_18:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_17:
                                                                    ((sub_int 
                                                                    (integer_of_int32 n_0)) (1))))))))))) in
                                               void);
                                              (raise (Return_label_exc void))
                                             end) in
                           void)
                          else void);
                          (C_22:
                          begin
                            (let jessie_110 = (i_interp := !i_2) in void);
                           (C_27:
                           begin
                             (let jessie_112 = (xim1 := (C_26:
                                                        ((safe_acc_ double_P_double_M_x_3) 
                                                         (C_25:
                                                         ((shift x) (integer_of_int32 
                                                                    (C_24:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_23:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !i_2)) (1))))))))))) in
                             void);
                            [ { } unit reads xim1
                              { (JC_119: bounded(xim1, 0x1p340)) } ];
                            void;
                            (let jessie_114 = (C_31:
                                              begin
                                                (xi := (C_30:
                                                       ((safe_acc_ double_P_double_M_x_3) 
                                                        (C_29:
                                                        ((shift x) (integer_of_int32 !i_2))))));
                                               !xi
                                              end) in
                            void);
                            [ { } unit reads xi
                              { (JC_120: bounded(xi, 0x1p340)) } ];
                            void;
                            [ { } unit reads xi,xim1
                              { (JC_121:
                                ge_real(sub_real(double_value(xi),
                                        double_value(xim1)),
                                0x1p-341)) } ];
                            void;
                            (let jessie_116 = (C_38:
                                              begin
                                                (yim1 := (C_37:
                                                         ((safe_acc_ double_P_double_M_y_4) 
                                                          (C_36:
                                                          ((shift y) 
                                                           (integer_of_int32 
                                                            (C_35:
                                                            (safe_int32_of_integer_ 
                                                             (C_34:
                                                             ((sub_int 
                                                               (integer_of_int32 !i_2)) (1)))))))))));
                                               !yim1
                                              end) in
                            void);
                            [ { } unit reads yim1
                              { (JC_122: bounded(yim1, 0x1p340)) } ];
                            void;
                            (let jessie_118 = (C_42:
                                              begin
                                                (yi := (C_41:
                                                       ((safe_acc_ double_P_double_M_y_4) 
                                                        (C_40:
                                                        ((shift y) (integer_of_int32 !i_2))))));
                                               !yi
                                              end) in
                            void);
                            [ { } unit reads yi
                              { (JC_123: bounded(yi, 0x1p340)) } ];
                            void;
                            (let jessie_120 = (C_47:
                                              begin
                                                (v_0 := (C_46:
                                                        (JC_126:
                                                        (((div_double_safe nearest_even) 
                                                          (C_45:
                                                          (JC_124:
                                                          (((sub_double_safe nearest_even) !yi) !yim1)))) 
                                                         (C_44:
                                                         (JC_125:
                                                         (((sub_double_safe nearest_even) !xi) !xim1)))))));
                                               !v_0
                                              end) in
                            void);
                            (C_51:
                            begin
                              (let jessie_122 = (__retres := (C_50:
                                                             (JC_129:
                                                             (((add_double_safe nearest_even) !yi) 
                                                              (C_49:
                                                              (JC_128:
                                                              (((mul_double_safe nearest_even) !v_0) 
                                                               (C_48:
                                                               (JC_127:
                                                               (((sub_double_safe nearest_even) z_0) !xim1)))))))))) in
                              void);
                             (raise (Return_label_exc void))
                            end)
                           end)
                          end)
                         end)
                        end in
      void)
      with
      Return_label_exc jessie_2 ->
      (return_label: begin   (return := !__retres); (raise Return) end) end)))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_31:
    eq_real(double_value(result),
    double_value(select(double_P_double_M_y_4,
                 shift(y, sub_int(integer_of_int32(n_0), (1))))))) }

let interp_lin_ensures_too_low =
 fun (x : double_P pointer) (y : double_P pointer) (n_0 : int32) (z_0 : double) (double_P_x_3_alloc_table : double_P alloc_table) (double_P_y_4_alloc_table : double_P alloc_table) (double_P_double_M_x_3 : (double_P, double) memory) (double_P_double_M_y_4 : (double_P, double) memory) ->
  { (le_real(double_value(z_0),
     double_value(select(double_P_double_M_x_3, shift(x, (0)))))
    and (JC_21:
        ((JC_12: ge_int(integer_of_int32(n_0), (1)))
        and ((JC_13: le_int(offset_min(double_P_x_3_alloc_table, x), (0)))
            and ((JC_14:
                 ge_int(offset_max(double_P_x_3_alloc_table, x),
                 sub_int(integer_of_int32(n_0), (1))))
                and ((JC_15:
                     le_int(offset_min(double_P_y_4_alloc_table, y), (0)))
                    and ((JC_16:
                         ge_int(offset_max(double_P_y_4_alloc_table, y),
                         sub_int(integer_of_int32(n_0), (1))))
                        and ((JC_17:
                             min_step(x, (0),
                             sub_int(integer_of_int32(n_0), (1)), 0x1p-341,
                             double_P_double_M_x_3))
                            and ((JC_18: bounded(z_0, 0x1p340))
                                and ((JC_19:
                                     array_bounded(x, n_0, 0x1p340,
                                     double_P_double_M_x_3))
                                    and (JC_20:
                                        array_bounded(y, n_0, 0x1p340,
                                        double_P_double_M_y_4)))))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let i_2 = ref (any_int32 void) in
     (let xim1 = ref (any_double void) in
     (let xi = ref (any_double void) in
     (let yim1 = ref (any_double void) in
     (let yi = ref (any_double void) in
     (let v_0 = ref (any_double void) in
     (let __retres = ref (any_double void) in
     try
      (let jessie_93 = begin
                         (if ((le_double z_0) (C_5:
                                              ((safe_acc_ double_P_double_M_x_3) 
                                               (C_4:
                                               ((shift x) (0))))))
                         then
                          (let jessie_67 = (C_3:
                                           begin
                                             (let jessie_66 = (__retres := 
                                                               (C_2:
                                                               ((safe_acc_ double_P_double_M_y_4) 
                                                                (C_1:
                                                                ((shift y) (0)))))) in
                                             void);
                                            (raise (Return_label_exc void))
                                           end) in
                          void)
                         else void);
                        (C_6:
                        begin
                          (let jessie_69 = (i_2 := (safe_int32_of_integer_ (1))) in
                          void);
                         try
                          (let jessie_75 = begin
                                             (loop_3:
                                             while true do
                                             { invariant (JC_99: true)  }
                                              begin
                                                [ { } unit reads i_2
                                                  { ((JC_96:
                                                     ((JC_94:
                                                      le_int((1),
                                                      integer_of_int32(i_2)))
                                                     and (JC_95:
                                                         le_int(integer_of_int32(i_2),
                                                         integer_of_int32(n_0)))))
                                                    and (JC_97:
                                                        (forall j_0:int.
                                                         ((le_int((0), j_0)
                                                          and lt_int(j_0,
                                                              integer_of_int32(i_2))) ->
                                                          gt_real(double_value(z_0),
                                                          double_value(
                                                          select(double_P_double_M_x_3,
                                                          shift(x, j_0)))))))) } ];
                                               try
                                                (let jessie_74 = begin
                                                                   (let jessie_73 = 
                                                                   begin
                                                                     
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !i_2)) 
                                                                    (integer_of_int32 n_0))
                                                                    then void
                                                                    else
                                                                    (let jessie_70 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                    (if 
                                                                    ((le_double z_0) 
                                                                    (C_13:
                                                                    ((safe_acc_ double_P_double_M_x_3) 
                                                                    (C_12:
                                                                    ((shift x) 
                                                                    (integer_of_int32 !i_2))))))
                                                                    then
                                                                    (let jessie_71 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void)
                                                                    else void);
                                                                    (C_16:
                                                                    begin
                                                                      
                                                                    (i_2 := 
                                                                    (C_15:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_14:
                                                                    ((add_int 
                                                                    (integer_of_int32 !i_2)) (1))))));
                                                                    !i_2
                                                                    end)
                                                                   end in
                                                                   void);
                                                                  (raise
                                                                   (Loop_continue_exc
                                                                   void))
                                                                 end in
                                                void)
                                                with
                                                Loop_continue_exc jessie_4 ->
                                                void end
                                              end
                                             done);
                                            (raise
                                             (Goto_while_0_break_exc
                                             void))
                                           end in
                          void)
                          with
                          Goto_while_0_break_exc jessie_1 ->
                          (while_0_break: void) end;
                         (if ((eq_int_ (integer_of_int32 !i_2)) (integer_of_int32 n_0))
                         then
                          (let jessie_78 = (C_21:
                                           begin
                                             (let jessie_77 = (__retres := 
                                                               (C_20:
                                                               ((safe_acc_ double_P_double_M_y_4) 
                                                                (C_19:
                                                                ((shift y) 
                                                                 (integer_of_int32 
                                                                  (C_18:
                                                                  (safe_int32_of_integer_ 
                                                                   (C_17:
                                                                   ((sub_int 
                                                                    (integer_of_int32 n_0)) (1))))))))))) in
                                             void);
                                            (raise (Return_label_exc void))
                                           end) in
                          void)
                         else void);
                         (C_22:
                         begin
                           (let jessie_80 = (i_interp := !i_2) in void);
                          (C_27:
                          begin
                            (let jessie_82 = (xim1 := (C_26:
                                                      ((safe_acc_ double_P_double_M_x_3) 
                                                       (C_25:
                                                       ((shift x) (integer_of_int32 
                                                                   (C_24:
                                                                   (safe_int32_of_integer_ 
                                                                    (C_23:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !i_2)) (1))))))))))) in
                            void);
                           [ { } unit reads xim1
                             { (JC_101: bounded(xim1, 0x1p340)) } ];
                           void;
                           (let jessie_84 = (C_31:
                                            begin
                                              (xi := (C_30:
                                                     ((safe_acc_ double_P_double_M_x_3) 
                                                      (C_29:
                                                      ((shift x) (integer_of_int32 !i_2))))));
                                             !xi
                                            end) in
                           void);
                           [ { } unit reads xi
                             { (JC_102: bounded(xi, 0x1p340)) } ];
                           void;
                           [ { } unit reads xi,xim1
                             { (JC_103:
                               ge_real(sub_real(double_value(xi),
                                       double_value(xim1)),
                               0x1p-341)) } ];
                           void;
                           (let jessie_86 = (C_38:
                                            begin
                                              (yim1 := (C_37:
                                                       ((safe_acc_ double_P_double_M_y_4) 
                                                        (C_36:
                                                        ((shift y) (integer_of_int32 
                                                                    (C_35:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_34:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !i_2)) (1)))))))))));
                                             !yim1
                                            end) in
                           void);
                           [ { } unit reads yim1
                             { (JC_104: bounded(yim1, 0x1p340)) } ];
                           void;
                           (let jessie_88 = (C_42:
                                            begin
                                              (yi := (C_41:
                                                     ((safe_acc_ double_P_double_M_y_4) 
                                                      (C_40:
                                                      ((shift y) (integer_of_int32 !i_2))))));
                                             !yi
                                            end) in
                           void);
                           [ { } unit reads yi
                             { (JC_105: bounded(yi, 0x1p340)) } ];
                           void;
                           (let jessie_90 = (C_47:
                                            begin
                                              (v_0 := (C_46:
                                                      (JC_108:
                                                      (((div_double_safe nearest_even) 
                                                        (C_45:
                                                        (JC_106:
                                                        (((sub_double_safe nearest_even) !yi) !yim1)))) 
                                                       (C_44:
                                                       (JC_107:
                                                       (((sub_double_safe nearest_even) !xi) !xim1)))))));
                                             !v_0
                                            end) in
                           void);
                           (C_51:
                           begin
                             (let jessie_92 = (__retres := (C_50:
                                                           (JC_111:
                                                           (((add_double_safe nearest_even) !yi) 
                                                            (C_49:
                                                            (JC_110:
                                                            (((mul_double_safe nearest_even) !v_0) 
                                                             (C_48:
                                                             (JC_109:
                                                             (((sub_double_safe nearest_even) z_0) !xim1)))))))))) in
                             void);
                            (raise (Return_label_exc void))
                           end)
                          end)
                         end)
                        end)
                       end in
      void)
      with
      Return_label_exc jessie_2 ->
      (return_label: begin   (return := !__retres); (raise Return) end) end)))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_29:
    eq_real(double_value(result),
    double_value(select(double_P_double_M_y_4, shift(y, (0)))))) }

let interp_lin_safety =
 fun (x : double_P pointer) (y : double_P pointer) (n_0 : int32) (z_0 : double) (double_P_x_3_alloc_table : double_P alloc_table) (double_P_y_4_alloc_table : double_P alloc_table) (double_P_double_M_x_3 : (double_P, double) memory) (double_P_double_M_y_4 : (double_P, double) memory) ->
  { (JC_21:
    ((JC_12: ge_int(integer_of_int32(n_0), (1)))
    and ((JC_13: le_int(offset_min(double_P_x_3_alloc_table, x), (0)))
        and ((JC_14:
             ge_int(offset_max(double_P_x_3_alloc_table, x),
             sub_int(integer_of_int32(n_0), (1))))
            and ((JC_15:
                 le_int(offset_min(double_P_y_4_alloc_table, y), (0)))
                and ((JC_16:
                     ge_int(offset_max(double_P_y_4_alloc_table, y),
                     sub_int(integer_of_int32(n_0), (1))))
                    and ((JC_17:
                         min_step(x, (0),
                         sub_int(integer_of_int32(n_0), (1)), 0x1p-341,
                         double_P_double_M_x_3))
                        and ((JC_18: bounded(z_0, 0x1p340))
                            and ((JC_19:
                                 array_bounded(x, n_0, 0x1p340,
                                 double_P_double_M_x_3))
                                and (JC_20:
                                    array_bounded(y, n_0, 0x1p340,
                                    double_P_double_M_y_4))))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let i_2 = ref (any_int32 void) in
     (let xim1 = ref (any_double void) in
     (let xi = ref (any_double void) in
     (let yim1 = ref (any_double void) in
     (let yi = ref (any_double void) in
     (let v_0 = ref (any_double void) in
     (let __retres = ref (any_double void) in
     try
      (let jessie_33 = begin
                         (if ((le_double z_0) (C_5:
                                              (JC_45:
                                              (((acc_ double_P_x_3_alloc_table) double_P_double_M_x_3) x))))
                         then
                          (let jessie_7 = (C_3:
                                          begin
                                            (let jessie_6 = (__retres := 
                                                             (C_2:
                                                             (JC_46:
                                                             (((acc_ double_P_y_4_alloc_table) double_P_double_M_y_4) y)))) in
                                            void);
                                           (raise (Return_label_exc void))
                                          end) in
                          void)
                         else void);
                        (C_6:
                        begin
                          (let jessie_9 = (i_2 := (safe_int32_of_integer_ (1))) in
                          void);
                         try
                          (let jessie_15 = begin
                                             (loop_1:
                                             while true do
                                             { invariant (JC_52: true)
                                               variant (JC_56 : sub_int(
                                                                integer_of_int32(n_0),
                                                                integer_of_int32(i_2))) }
                                              begin
                                                [ { } unit reads i_2
                                                  { ((JC_49:
                                                     ((JC_47:
                                                      le_int((1),
                                                      integer_of_int32(i_2)))
                                                     and (JC_48:
                                                         le_int(integer_of_int32(i_2),
                                                         integer_of_int32(n_0)))))
                                                    and (JC_50:
                                                        (forall j_0:int.
                                                         ((le_int((0), j_0)
                                                          and lt_int(j_0,
                                                              integer_of_int32(i_2))) ->
                                                          gt_real(double_value(z_0),
                                                          double_value(
                                                          select(double_P_double_M_x_3,
                                                          shift(x, j_0)))))))) } ];
                                               try
                                                (let jessie_14 = begin
                                                                   (let jessie_13 = 
                                                                   begin
                                                                     
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !i_2)) 
                                                                    (integer_of_int32 n_0))
                                                                    then void
                                                                    else
                                                                    (let jessie_10 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                    (if 
                                                                    ((le_double z_0) 
                                                                    (C_13:
                                                                    (JC_54:
                                                                    ((((offset_acc_ double_P_x_3_alloc_table) double_P_double_M_x_3) x) 
                                                                    (integer_of_int32 !i_2)))))
                                                                    then
                                                                    (let jessie_11 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void)
                                                                    else void);
                                                                    (C_16:
                                                                    begin
                                                                      
                                                                    (i_2 := 
                                                                    (C_15:
                                                                    (JC_55:
                                                                    (int32_of_integer_ 
                                                                    (C_14:
                                                                    ((add_int 
                                                                    (integer_of_int32 !i_2)) (1)))))));
                                                                    !i_2
                                                                    end)
                                                                   end in
                                                                   void);
                                                                  (raise
                                                                   (Loop_continue_exc
                                                                   void))
                                                                 end in
                                                void)
                                                with
                                                Loop_continue_exc jessie_4 ->
                                                void end
                                              end
                                             done);
                                            (raise
                                             (Goto_while_0_break_exc
                                             void))
                                           end in
                          void)
                          with
                          Goto_while_0_break_exc jessie_1 ->
                          (while_0_break: void) end;
                         (if ((eq_int_ (integer_of_int32 !i_2)) (integer_of_int32 n_0))
                         then
                          (let jessie_18 = (C_21:
                                           begin
                                             (let jessie_17 = (__retres := 
                                                               (C_20:
                                                               (JC_58:
                                                               ((((offset_acc_ double_P_y_4_alloc_table) double_P_double_M_y_4) y) 
                                                                (integer_of_int32 
                                                                 (C_18:
                                                                 (JC_57:
                                                                 (int32_of_integer_ 
                                                                  (C_17:
                                                                  ((sub_int 
                                                                    (integer_of_int32 n_0)) (1))))))))))) in
                                             void);
                                            (raise (Return_label_exc void))
                                           end) in
                          void)
                         else void);
                         (C_22:
                         begin
                           (let jessie_20 = (i_interp := !i_2) in void);
                          (C_27:
                          begin
                            (let jessie_22 = (xim1 := (C_26:
                                                      (JC_60:
                                                      ((((offset_acc_ double_P_x_3_alloc_table) double_P_double_M_x_3) x) 
                                                       (integer_of_int32 
                                                        (C_24:
                                                        (JC_59:
                                                        (int32_of_integer_ 
                                                         (C_23:
                                                         ((sub_int (integer_of_int32 !i_2)) (1))))))))))) in
                            void);
                           [ { } unit reads xim1
                             { (JC_61: bounded(xim1, 0x1p340)) } ];
                           void;
                           (let jessie_24 = (C_31:
                                            begin
                                              (xi := (C_30:
                                                     (JC_62:
                                                     ((((offset_acc_ double_P_x_3_alloc_table) double_P_double_M_x_3) x) 
                                                      (integer_of_int32 !i_2)))));
                                             !xi
                                            end) in
                           void);
                           [ { } unit reads xi
                             { (JC_63: bounded(xi, 0x1p340)) } ];
                           void;
                           [ { } unit reads xi,xim1
                             { (JC_64:
                               ge_real(sub_real(double_value(xi),
                                       double_value(xim1)),
                               0x1p-341)) } ];
                           void;
                           (let jessie_26 = (C_38:
                                            begin
                                              (yim1 := (C_37:
                                                       (JC_66:
                                                       ((((offset_acc_ double_P_y_4_alloc_table) double_P_double_M_y_4) y) 
                                                        (integer_of_int32 
                                                         (C_35:
                                                         (JC_65:
                                                         (int32_of_integer_ 
                                                          (C_34:
                                                          ((sub_int (integer_of_int32 !i_2)) (1)))))))))));
                                             !yim1
                                            end) in
                           void);
                           [ { } unit reads yim1
                             { (JC_67: bounded(yim1, 0x1p340)) } ];
                           void;
                           (let jessie_28 = (C_42:
                                            begin
                                              (yi := (C_41:
                                                     (JC_68:
                                                     ((((offset_acc_ double_P_y_4_alloc_table) double_P_double_M_y_4) y) 
                                                      (integer_of_int32 !i_2)))));
                                             !yi
                                            end) in
                           void);
                           [ { } unit reads yi
                             { (JC_69: bounded(yi, 0x1p340)) } ];
                           void;
                           (let jessie_30 = (C_47:
                                            begin
                                              (v_0 := (C_46:
                                                      (JC_72:
                                                      (((div_double nearest_even) 
                                                        (C_45:
                                                        (JC_70:
                                                        (((sub_double nearest_even) !yi) !yim1)))) 
                                                       (C_44:
                                                       (JC_71:
                                                       (((sub_double nearest_even) !xi) !xim1)))))));
                                             !v_0
                                            end) in
                           void);
                           (C_51:
                           begin
                             (let jessie_32 = (__retres := (C_50:
                                                           (JC_75:
                                                           (((add_double nearest_even) !yi) 
                                                            (C_49:
                                                            (JC_74:
                                                            (((mul_double nearest_even) !v_0) 
                                                             (C_48:
                                                             (JC_73:
                                                             (((sub_double nearest_even) z_0) !xim1)))))))))) in
                             void);
                            (raise (Return_label_exc void))
                           end)
                          end)
                         end)
                        end)
                       end in
      void)
      with
      Return_label_exc jessie_2 ->
      (return_label: begin   (return := !__retres); (raise Return) end) end)))))));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C floats_interp.jessie --quiet -f floats_interp.makefile project
why --project [...] why/floats_interp.why
<project name="floats_interp" context="why/floats_interp_ctx.why">
  <lemma name="min_step_increasing">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/floats_interp_po1.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.jessie/floats_interp.jc" line = "40" begin = "0" end = "442"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <function name="min_step_increasing">
    <location file = "PPCHOME/tests/jessie/floats_interp.jessie/floats_interp.jc" line = "40" begin = "0" end = "442"/>
  </function>
  <function name="Function interp_lin">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/floats_interp_po20.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "76" begin = "2" end = "4"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po21.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "76" begin = "2" end = "4"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po22.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "76" begin = "17" end = "23"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po23.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "76" begin = "17" end = "23"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po24.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "82" begin = "23" end = "25"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po25.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "82" begin = "23" end = "25"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po26.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "82" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po27.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "82" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po28.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "80" begin = "19" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/floats_interp_po29.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "80" begin = "19" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/floats_interp_po30.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "83" begin = "12" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po31.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "83" begin = "12" end = "18"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po32.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "83" begin = "12" end = "18"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po33.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "83" begin = "12" end = "18"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po34.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "85" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po35.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "85" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po36.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "85" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po37.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "85" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po38.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "87" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po39.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "87" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po40.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "90" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po41.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "90" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po42.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "90" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po43.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "90" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po44.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "92" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po45.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "92" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/floats_interp_po46.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "95" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po47.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "95" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po48.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "95" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po49.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "95" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po50.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "97" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po51.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "97" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    <goal why_file="why/floats_interp_po52.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "97" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "FPOverflow"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `too_low'">
    <goal why_file="why/floats_interp_po19.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "61" begin = "14" end = "29"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `too_high'">
    <goal why_file="why/floats_interp_po18.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "64" begin = "14" end = "31"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `in_interval'">
    <goal why_file="why/floats_interp_po13.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "67" begin = "14" end = "27"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/floats_interp_po14.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "67" begin = "19" end = "34"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/floats_interp_po15.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "68" begin = "14" end = "31"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/floats_interp_po16.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "68" begin = "30" end = "46"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/floats_interp_po17.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "70" begin = "8" end = "190"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/floats_interp_po2.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "78" begin = "21" end = "27"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/floats_interp_po3.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "78" begin = "26" end = "32"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/floats_interp_po4.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "79" begin = "21" end = "63"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/floats_interp_po5.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "78" begin = "21" end = "27"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/floats_interp_po6.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "78" begin = "26" end = "32"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/floats_interp_po7.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "79" begin = "21" end = "63"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/floats_interp_po8.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "86" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp_po9.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "88" begin = "13" end = "32"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp_po10.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "89" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp_po11.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "91" begin = "13" end = "34"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/floats_interp_po12.why">
      <location file = "PPCHOME/tests/jessie/floats_interp.c" line = "93" begin = "13" end = "32"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type mode =
  | nearest_even
  | to_zero
  | up
  | down
  | nearest_away

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

logic single_to_double : mode, single -> double

logic double_to_single : mode, double -> single

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom double_to_single_val:
  (forall m:mode.
    (forall s:single. (double_value(single_to_double(m,
      s)) = single_value(s))))

axiom single_to_double_val:
  (forall m:mode.
    (forall d:double. (single_value(double_to_single(m, d)) = round_single(m,
      double_value(d)))))

predicate single_of_real_post(m: mode, x: real, res: single) =
  ((single_value(res) = round_single(m, x)) and
   ((single_exact(res) = x) and (single_model(res) = x)))

predicate add_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) + single_value(y)))) and
   ((single_exact(res) = (single_exact(x) + single_exact(y))) and
    (single_model(res) = (single_model(x) + single_model(y)))))

predicate sub_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) - single_value(y)))) and
   ((single_exact(res) = (single_exact(x) - single_exact(y))) and
    (single_model(res) = (single_model(x) - single_model(y)))))

predicate mul_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) * single_value(y)))) and
   ((single_exact(res) = (single_exact(x) * single_exact(y))) and
    (single_model(res) = (single_model(x) * single_model(y)))))

predicate div_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) / single_value(y)))) and
   ((single_exact(res) = (single_exact(x) / single_exact(y))) and
    (single_model(res) = (single_model(x) / single_model(y)))))

predicate sqrt_single_post(m: mode, x: single, res: single) =
  ((single_value(res) = round_single(m, sqrt_real(single_value(x)))) and
   ((single_exact(res) = sqrt_real(single_exact(x))) and
    (single_model(res) = sqrt_real(single_model(x)))))

predicate neg_single_post(x: single, res: single) =
  ((single_value(res) = (-single_value(x))) and
   ((single_exact(res) = (-single_exact(x))) and
    (single_model(res) = (-single_model(x)))))

predicate abs_single_post(x: single, res: single) =
  ((single_value(res) = abs_real(single_value(x))) and
   ((single_exact(res) = abs_real(single_exact(x))) and
    (single_model(res) = abs_real(single_model(x)))))

predicate double_of_real_post(m: mode, x: real, res: double) =
  ((double_value(res) = round_double(m, x)) and
   ((double_exact(res) = x) and (double_model(res) = x)))

predicate add_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) + double_value(y)))) and
   ((double_exact(res) = (double_exact(x) + double_exact(y))) and
    (double_model(res) = (double_model(x) + double_model(y)))))

predicate sub_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) - double_value(y)))) and
   ((double_exact(res) = (double_exact(x) - double_exact(y))) and
    (double_model(res) = (double_model(x) - double_model(y)))))

predicate mul_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) * double_value(y)))) and
   ((double_exact(res) = (double_exact(x) * double_exact(y))) and
    (double_model(res) = (double_model(x) * double_model(y)))))

predicate div_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) / double_value(y)))) and
   ((double_exact(res) = (double_exact(x) / double_exact(y))) and
    (double_model(res) = (double_model(x) / double_model(y)))))

predicate sqrt_double_post(m: mode, x: double, res: double) =
  ((double_value(res) = round_double(m, sqrt_real(double_value(x)))) and
   ((double_exact(res) = sqrt_real(double_exact(x))) and
    (double_model(res) = sqrt_real(double_model(x)))))

predicate neg_double_post(x: double, res: double) =
  ((double_value(res) = (-double_value(x))) and
   ((double_exact(res) = (-double_exact(x))) and
    (double_model(res) = (-double_model(x)))))

predicate abs_double_post(x: double, res: double) =
  ((double_value(res) = abs_real(double_value(x))) and
   ((double_exact(res) = abs_real(double_exact(x))) and
    (double_model(res) = abs_real(double_model(x)))))

type char_P

type double_P

type int32

type int8

type padding

type void_P

logic integer_of_int32 : int32 -> int

predicate bounded(z: double, bound_1: real) =
  (((-bound_1) <= double_value(z)) and (double_value(z) <= bound_1))

predicate array_bounded(t_1: double_P pointer, n: int32, bound_2: real,
  double_P_double_M_t_1_2_at_L: (double_P, double) memory) =
  (forall i_1:int.
    (((0 <= i_1) and (i_1 < integer_of_int32(n))) ->
     bounded(select(double_P_double_M_t_1_2_at_L, shift(t_1, i_1)), bound_2)))

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic double_P_tag : double_P tag_id

axiom double_P_int: (int_of_tag(double_P_tag) = 1)

logic double_P_of_pointer_address : unit pointer -> double_P pointer

axiom double_P_of_pointer_address_of_pointer_addr:
  (forall p:double_P pointer.
    (p = double_P_of_pointer_address(pointer_address(p))))

axiom double_P_parenttag_bottom: parenttag(double_P_tag, bottom_tag)

axiom double_P_tags:
  (forall x:double_P pointer.
    (forall double_P_tag_table:double_P tag_table.
      instanceof(double_P_tag_table, x, double_P_tag)))

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_double_P(p: double_P pointer, a: int,
  double_P_alloc_table: double_P alloc_table) =
  (offset_min(double_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

predicate min_step(t: double_P pointer, a: int, b: int, bound: real,
  double_P_double_M_t_1_at_L: (double_P, double) memory) =
  (forall i:int.
    (((a < i) and (i <= b)) ->
     ((double_value(select(double_P_double_M_t_1_at_L, shift(t,
     i))) - double_value(select(double_P_double_M_t_1_at_L, shift(t,
     (i - 1))))) >= bound)))

axiom min_step_increasing_as_axiom:
  (forall double_P_double_M_t_0_5_at_L:(double_P, double) memory.
    (forall t_0:double_P pointer.
      (forall a_0:int.
        (forall b_0:int.
          (forall bound_0:real.
            (((bound_0 >= 0.0) and min_step(t_0, a_0, b_0, bound_0,
              double_P_double_M_t_0_5_at_L)) ->
             (forall i_0:int.
               (forall j:int.
                 (((a_0 <= i_0) and ((i_0 <= j) and (j <= b_0))) ->
                  (double_value(select(double_P_double_M_t_0_5_at_L,
                  shift(t_0,
                  i_0))) <= double_value(select(double_P_double_M_t_0_5_at_L,
                  shift(t_0, j)))))))))))))

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_double_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(double_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_double_P(p: double_P pointer, b: int,
  double_P_alloc_table: double_P alloc_table) =
  (offset_max(double_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_double_P(p: double_P pointer, a: int, b: int,
  double_P_alloc_table: double_P alloc_table) =
  ((offset_min(double_P_alloc_table, p) = a) and
   (offset_max(double_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_double_P(p: double_P pointer, a: int, b: int,
  double_P_alloc_table: double_P alloc_table) =
  ((offset_min(double_P_alloc_table, p) = a) and
   (offset_max(double_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_double_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_double_P(p: double_P pointer, a: int, b: int,
  double_P_alloc_table: double_P alloc_table) =
  ((offset_min(double_P_alloc_table, p) <= a) and
   (offset_max(double_P_alloc_table, p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_double_P(p: double_P pointer, a: int, b: int,
  double_P_alloc_table: double_P alloc_table) =
  ((offset_min(double_P_alloc_table, p) <= a) and
   (offset_max(double_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

