Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only struct_hack.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD struct_hack.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir struct_hack.jessie
[jessie] File struct_hack.jessie/struct_hack.jc written.
[jessie] File struct_hack.jessie/struct_hack.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag int_P = {
  int32 int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

tag S = {
  int32 i: 32; 
  int_P[0..-1] a: 0;
}

type S = [S]

tag S0 = {
  int32 i0: 32; 
  int_P[0..-1] a0: 0;
}

type S0 = [S0]

tag S1 = {
  int32 i1: 32; 
  int_P[0] a1: 32;
}

type S1 = [S1]

unit f(S[0] v_s_0)
  requires (C_22 : ((C_23 : (v_s_0.i >= 0)) &&
                     ((C_25 : (\offset_min(v_s_0.a) <= 0)) &&
                       (C_26 : (\offset_max(v_s_0.a) >= (v_s_0.i - 1))))));
behavior default:
  assumes true;
  ensures (C_27 : true);
{  
   (var S[0] s_0);
   
   (var int32 j);
   
   {  (C_2 : (s_0 = (C_1 : (new S[1]))));
      (C_5 : ((C_4 : s_0.i) = (C_3 : v_s_0.i)));
      (C_6 : (j = 0));
      
      {  
         loop 
         behavior default:
           invariant (C_8 : (((C_10 : (0 <= j)) && (C_11 : (j <= v_s_0.i))) &&
                              (C_12 : (\forall int32 k;
                                        (((0 <= k) && (k < j)) ==>
                                          ((v_s_0.a + k).int_M == 0))))));
         variant (C_7 : (v_s_0.i - j));
         while (true)
         {  
            {  (if (j < (C_13 : s_0.i)) then () else 
               (goto while_0_break));
               (C_16 : ((C_15 : ((C_14 : s_0.a) + j).int_M) = 0));
               (C_19 : (j = (C_18 : ((C_17 : (j + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      {  
         (assert for default: (C_20 : (\forall int32 k_0;
                                        (((0 <= k_0) && (k_0 < v_s_0.i)) ==>
                                          ((v_s_0.a + k_0).int_M == 0)))));
         ()
      };
      
      {  (C_21 : (free(s_0)));
         
         (return ())
      }
   }
}

unit f0(S0[0] v_s_1)
  requires (C_49 : ((C_50 : (v_s_1.i0 >= 0)) &&
                     ((C_52 : (\offset_min(v_s_1.a0) <= 0)) &&
                       (C_53 : (\offset_max(v_s_1.a0) >= (v_s_1.i0 - 1))))));
behavior default:
  assumes true;
  ensures (C_54 : true);
{  
   (var S0[0] s_1);
   
   (var int32 j_0);
   
   {  (C_29 : (s_1 = (C_28 : (new S0[1]))));
      (C_32 : ((C_31 : s_1.i0) = (C_30 : v_s_1.i0)));
      (C_33 : (j_0 = 0));
      
      {  
         loop 
         behavior default:
           invariant (C_35 : (((C_37 : (0 <= j_0)) &&
                                (C_38 : (j_0 <= v_s_1.i0))) &&
                               (C_39 : (\forall int32 k_1;
                                         (((0 <= k_1) && (k_1 < j_0)) ==>
                                           ((v_s_1.a0 + k_1).int_M == 0))))));
         variant (C_34 : (v_s_1.i0 - j_0));
         while (true)
         {  
            {  (if (j_0 < (C_40 : s_1.i0)) then () else 
               (goto while_1_break));
               (C_43 : ((C_42 : ((C_41 : s_1.a0) + j_0).int_M) = 0));
               (C_46 : (j_0 = (C_45 : ((C_44 : (j_0 + 1)) :> int32))))
            }
         };
         (while_1_break : ())
      };
      
      {  
         (assert for default: (C_47 : (\forall int32 k_2;
                                        (((0 <= k_2) && (k_2 < v_s_1.i0)) ==>
                                          ((v_s_1.a0 + k_2).int_M == 0)))));
         ()
      };
      
      {  (C_48 : (free(s_1)));
         
         (return ())
      }
   }
}

unit f1(S1[0] v_s)
  requires (C_81 : ((C_82 : (v_s.i1 >= 0)) &&
                     ((C_84 : (\offset_min(v_s.a1) <= 0)) &&
                       (C_85 : (\offset_max(v_s.a1) >= (v_s.i1 - 1))))));
behavior default:
  assumes true;
  ensures (C_86 : true);
{  
   (var S1[0] s);
   
   (var int32 j_1);
   
   {  (C_56 : (s = (C_55 : (new S1[1]))));
      
      {  (C_59 : ((C_58 : s.i1) = (C_57 : v_s.i1)));
         (C_64 : ((C_63 : ((C_62 : s.a1) + 0).int_M) = (C_61 : ((C_60 : v_s.a1) +
                                                                 0).int_M)))
      };
      (C_65 : (j_1 = 0));
      
      {  
         loop 
         behavior default:
           invariant (C_67 : (((C_69 : (0 <= j_1)) &&
                                (C_70 : (j_1 <= v_s.i1))) &&
                               (C_71 : (\forall int32 k_3;
                                         (((0 <= k_3) && (k_3 < j_1)) ==>
                                           ((v_s.a1 + k_3).int_M == 0))))));
         variant (C_66 : (v_s.i1 - j_1));
         while (true)
         {  
            {  (if (j_1 < (C_72 : s.i1)) then () else 
               (goto while_2_break));
               (C_75 : ((C_74 : ((C_73 : s.a1) + j_1).int_M) = 0));
               (C_78 : (j_1 = (C_77 : ((C_76 : (j_1 + 1)) :> int32))))
            }
         };
         (while_2_break : ())
      };
      
      {  
         (assert for default: (C_79 : (\forall int32 k_4;
                                        (((0 <= k_4) && (k_4 < v_s.i1)) ==>
                                          ((v_s.a1 + k_4).int_M == 0)))));
         ()
      };
      
      {  (C_80 : (free(s)));
         
         (return ())
      }
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs struct_hack.jessie/struct_hack.cloc struct_hack.jessie/struct_hack.jc
type S

type S0

type S1

type char_P

type int32

type int8

type int_P

type padding

type void_P

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Goto_while_2_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic S0_tag:  -> S0 tag_id

axiom S0_int : (int_of_tag(S0_tag) = (1))

logic S0_of_bitvector: bitvector -> S0 pointer

logic bitvector_of_S0: S0 pointer -> bitvector

axiom S0_of_bitvector_of_bitvector_of_S0 :
 (forall x:S0 pointer. (S0_of_bitvector(bitvector_of_S0(x)) = x))

logic S0_of_pointer_address: unit pointer -> S0 pointer

axiom S0_of_pointer_address_of_pointer_addr :
 (forall p:S0 pointer. (p = S0_of_pointer_address(pointer_address(p))))

axiom S0_parenttag_bottom : parenttag(S0_tag, bottom_tag)

axiom S0_tags :
 (forall x:S0 pointer.
  (forall S0_tag_table:S0 tag_table. instanceof(S0_tag_table, x, S0_tag)))

logic S1_tag:  -> S1 tag_id

axiom S1_int : (int_of_tag(S1_tag) = (1))

logic S1_of_bitvector: bitvector -> S1 pointer

logic bitvector_of_S1: S1 pointer -> bitvector

axiom S1_of_bitvector_of_bitvector_of_S1 :
 (forall x:S1 pointer. (S1_of_bitvector(bitvector_of_S1(x)) = x))

logic S1_of_pointer_address: unit pointer -> S1 pointer

axiom S1_of_pointer_address_of_pointer_addr :
 (forall p:S1 pointer. (p = S1_of_pointer_address(pointer_address(p))))

axiom S1_parenttag_bottom : parenttag(S1_tag, bottom_tag)

axiom S1_tags :
 (forall x:S1 pointer.
  (forall S1_tag_table:S1 tag_table. instanceof(S1_tag_table, x, S1_tag)))

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

logic S_of_bitvector: bitvector -> S pointer

logic bitvector_of_S: S pointer -> bitvector

axiom S_of_bitvector_of_bitvector_of_S :
 (forall x:S pointer. (S_of_bitvector(bitvector_of_S(x)) = x))

logic S_of_pointer_address: unit pointer -> S pointer

axiom S_of_pointer_address_of_pointer_addr :
 (forall p:S pointer. (p = S_of_pointer_address(pointer_address(p))))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

axiom bitvector_of_S0_of_S0_of_bitvector :
 (forall x:bitvector. (bitvector_of_S0(S0_of_bitvector(x)) = x))

axiom bitvector_of_S1_of_S1_of_bitvector :
 (forall x:bitvector. (bitvector_of_S1(S1_of_bitvector(x)) = x))

axiom bitvector_of_S_of_S_of_bitvector :
 (forall x:bitvector. (bitvector_of_S(S_of_bitvector(x)) = x))

logic bitvector_of_char_P: char_P pointer -> bitvector

logic char_P_of_bitvector: bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_int32: int32 -> bitvector

logic int32_of_bitvector: bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector :
 (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_int8: int8 -> bitvector

logic int8_of_bitvector: bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector :
 (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_int_P: int_P pointer -> bitvector

logic int_P_of_bitvector: bitvector -> int_P pointer

axiom bitvector_of_int_P_of_int_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_int_P(int_P_of_bitvector(x)) = x))

logic bitvector_of_void_P: void_P pointer -> bitvector

logic void_P_of_bitvector: bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector :
 (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_of_bitvector_of_bitvector_of_char_P :
 (forall x:char_P pointer. (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_of_bitvector_of_bitvector_of_int32 :
 (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_of_bitvector_of_bitvector_of_int8 :
 (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_of_bitvector_of_bitvector_of_int_P :
 (forall x:int_P pointer. (int_P_of_bitvector(bitvector_of_int_P(x)) = x))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

predicate left_valid_struct_int_P(p:int_P pointer,
 a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct_S(p:S pointer,
 a:int,
 S_alloc_table:S alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S_a:(S, int_P pointer) memory) =
 ((offset_min(S_alloc_table, p) <= a)
 and left_valid_struct_int_P(select(S_a, p), (0), int_P_alloc_table))

predicate left_valid_struct_S0(p:S0 pointer,
 a:int,
 S0_alloc_table:S0 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S0_a0:(S0, int_P pointer) memory) =
 ((offset_min(S0_alloc_table, p) <= a)
 and left_valid_struct_int_P(select(S0_a0, p), (0), int_P_alloc_table))

predicate left_valid_struct_S1(p:S1 pointer,
 a:int,
 S1_alloc_table:S1 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S1_a1:(S1, int_P pointer) memory) =
 ((offset_min(S1_alloc_table, p) <= a)
 and left_valid_struct_int_P(select(S1_a1, p), (0), int_P_alloc_table))

predicate left_valid_struct_char_P(p:char_P pointer,
 a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer,
 a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_S0_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(S0_of_pointer_address(p))))

axiom pointer_addr_of_S1_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(S1_of_pointer_address(p))))

axiom pointer_addr_of_S_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(S_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_int_P(p:int_P pointer,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct_S(p:S pointer,
 b:int,
 S_alloc_table:S alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S_a:(S, int_P pointer) memory) =
 ((offset_max(S_alloc_table, p) >= b)
 and right_valid_struct_int_P(select(S_a, p), (-1), int_P_alloc_table))

predicate right_valid_struct_S0(p:S0 pointer,
 b:int,
 S0_alloc_table:S0 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S0_a0:(S0, int_P pointer) memory) =
 ((offset_max(S0_alloc_table, p) >= b)
 and right_valid_struct_int_P(select(S0_a0, p), (-1), int_P_alloc_table))

predicate right_valid_struct_S1(p:S1 pointer,
 b:int,
 S1_alloc_table:S1 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S1_a1:(S1, int_P pointer) memory) =
 ((offset_max(S1_alloc_table, p) >= b)
 and right_valid_struct_int_P(select(S1_a1, p), (0), int_P_alloc_table))

predicate right_valid_struct_char_P(p:char_P pointer,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate strict_valid_root_S0(p:S0 pointer,
 a:int,
 b:int,
 S0_alloc_table:S0 alloc_table) =
 ((offset_min(S0_alloc_table, p) = a)
 and (offset_max(S0_alloc_table, p) = b))

predicate strict_valid_root_S1(p:S1 pointer,
 a:int,
 b:int,
 S1_alloc_table:S1 alloc_table) =
 ((offset_min(S1_alloc_table, p) = a)
 and (offset_max(S1_alloc_table, p) = b))

predicate strict_valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S_a:(S, int_P pointer) memory) =
 ((offset_min(S_alloc_table, p) = a)
 and ((offset_max(S_alloc_table, p) = b)
     and strict_valid_struct_int_P(select(S_a, p), (0), (-1),
         int_P_alloc_table)))

predicate strict_valid_struct_S0(p:S0 pointer,
 a:int,
 b:int,
 S0_alloc_table:S0 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S0_a0:(S0, int_P pointer) memory) =
 ((offset_min(S0_alloc_table, p) = a)
 and ((offset_max(S0_alloc_table, p) = b)
     and strict_valid_struct_int_P(select(S0_a0, p), (0), (-1),
         int_P_alloc_table)))

predicate strict_valid_struct_S1(p:S1 pointer,
 a:int,
 b:int,
 S1_alloc_table:S1 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S1_a1:(S1, int_P pointer) memory) =
 ((offset_min(S1_alloc_table, p) = a)
 and ((offset_max(S1_alloc_table, p) = b)
     and strict_valid_struct_int_P(select(S1_a1, p), (0), (0),
         int_P_alloc_table)))

predicate strict_valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_S(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_S0(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_S1(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) <= a)
 and (offset_max(S_alloc_table, p) >= b))

predicate valid_root_S0(p:S0 pointer,
 a:int,
 b:int,
 S0_alloc_table:S0 alloc_table) =
 ((offset_min(S0_alloc_table, p) <= a)
 and (offset_max(S0_alloc_table, p) >= b))

predicate valid_root_S1(p:S1 pointer,
 a:int,
 b:int,
 S1_alloc_table:S1 alloc_table) =
 ((offset_min(S1_alloc_table, p) <= a)
 and (offset_max(S1_alloc_table, p) >= b))

predicate valid_root_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S_a:(S, int_P pointer) memory) =
 ((offset_min(S_alloc_table, p) <= a)
 and ((offset_max(S_alloc_table, p) >= b)
     and valid_struct_int_P(select(S_a, p), (0), (-1), int_P_alloc_table)))

predicate valid_struct_S0(p:S0 pointer,
 a:int,
 b:int,
 S0_alloc_table:S0 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S0_a0:(S0, int_P pointer) memory) =
 ((offset_min(S0_alloc_table, p) <= a)
 and ((offset_max(S0_alloc_table, p) >= b)
     and valid_struct_int_P(select(S0_a0, p), (0), (-1), int_P_alloc_table)))

predicate valid_struct_S1(p:S1 pointer,
 a:int,
 b:int,
 S1_alloc_table:S1 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S1_a1:(S1, int_P pointer) memory) =
 ((offset_min(S1_alloc_table, p) <= a)
 and ((offset_max(S1_alloc_table, p) >= b)
     and valid_struct_int_P(select(S1_a1, p), (0), (0), int_P_alloc_table)))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_bitvector_of_bitvector_of_void_P :
 (forall x:void_P pointer. (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter S0_alloc_table : S0 alloc_table ref

parameter S0_tag_table : S0 tag_table ref

parameter S1_alloc_table : S1 alloc_table ref

parameter S1_tag_table : S1 tag_table ref

parameter S_alloc_table : S alloc_table ref

parameter S_tag_table : S tag_table ref

parameter alloc_bitvector_struct_S :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_S(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_S0 :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_S0(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_S0_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_S0(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_S1 :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_S1(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_S1_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_S1(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_S_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_S(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter alloc_struct_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    S_tag_table:S tag_table ref ->
     S_a:(S, int_P pointer) memory ->
      { } S pointer writes S_alloc_table,S_tag_table,int_P_alloc_table
      { (strict_valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table,
         int_P_alloc_table, S_a)
        and (alloc_extends(S_alloc_table@, S_alloc_table)
            and (alloc_fresh(S_alloc_table@, result, n)
                and instanceof(S_tag_table, result, S_tag)))) }

parameter alloc_struct_S0 :
 n:int ->
  S0_alloc_table:S0 alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    S0_tag_table:S0 tag_table ref ->
     S0_a0:(S0, int_P pointer) memory ->
      { } S0 pointer writes S0_alloc_table,S0_tag_table,int_P_alloc_table
      { (strict_valid_struct_S0(result, (0), sub_int(n, (1)), S0_alloc_table,
         int_P_alloc_table, S0_a0)
        and (alloc_extends(S0_alloc_table@, S0_alloc_table)
            and (alloc_fresh(S0_alloc_table@, result, n)
                and instanceof(S0_tag_table, result, S0_tag)))) }

parameter alloc_struct_S0_requires :
 n:int ->
  S0_alloc_table:S0 alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    S0_tag_table:S0 tag_table ref ->
     S0_a0:(S0, int_P pointer) memory ->
      { ge_int(n, (0))} S0 pointer
      writes S0_alloc_table,S0_tag_table,int_P_alloc_table
      { (strict_valid_struct_S0(result, (0), sub_int(n, (1)), S0_alloc_table,
         int_P_alloc_table, S0_a0)
        and (alloc_extends(S0_alloc_table@, S0_alloc_table)
            and (alloc_fresh(S0_alloc_table@, result, n)
                and instanceof(S0_tag_table, result, S0_tag)))) }

parameter alloc_struct_S1 :
 n:int ->
  S1_alloc_table:S1 alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    S1_tag_table:S1 tag_table ref ->
     S1_a1:(S1, int_P pointer) memory ->
      { } S1 pointer writes S1_alloc_table,S1_tag_table,int_P_alloc_table
      { (strict_valid_struct_S1(result, (0), sub_int(n, (1)), S1_alloc_table,
         int_P_alloc_table, S1_a1)
        and (alloc_extends(S1_alloc_table@, S1_alloc_table)
            and (alloc_fresh(S1_alloc_table@, result, n)
                and instanceof(S1_tag_table, result, S1_tag)))) }

parameter alloc_struct_S1_requires :
 n:int ->
  S1_alloc_table:S1 alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    S1_tag_table:S1 tag_table ref ->
     S1_a1:(S1, int_P pointer) memory ->
      { ge_int(n, (0))} S1 pointer
      writes S1_alloc_table,S1_tag_table,int_P_alloc_table
      { (strict_valid_struct_S1(result, (0), sub_int(n, (1)), S1_alloc_table,
         int_P_alloc_table, S1_a1)
        and (alloc_extends(S1_alloc_table@, S1_alloc_table)
            and (alloc_fresh(S1_alloc_table@, result, n)
                and instanceof(S1_tag_table, result, S1_tag)))) }

parameter alloc_struct_S_requires :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    S_tag_table:S tag_table ref ->
     S_a:(S, int_P pointer) memory ->
      { ge_int(n, (0))} S pointer
      writes S_alloc_table,S_tag_table,int_P_alloc_table
      { (strict_valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table,
         int_P_alloc_table, S_a)
        and (alloc_extends(S_alloc_table@, S_alloc_table)
            and (alloc_fresh(S_alloc_table@, result, n)
                and instanceof(S_tag_table, result, S_tag)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter f :
 v_s_0:S pointer ->
  int_P_v_s_0_1_alloc_table:int_P alloc_table ->
   S_v_s_0_1_alloc_table:S alloc_table ->
    S_a_v_s_0_1:(S, int_P pointer) memory ->
     S_i_v_s_0_1:(S, int32) memory ->
      int_P_int_M_v_s_0_1:(int_P, int32) memory -> { } unit { true }

parameter f0 :
 v_s_1:S0 pointer ->
  int_P_v_s_1_2_alloc_table:int_P alloc_table ->
   S0_v_s_1_2_alloc_table:S0 alloc_table ->
    S0_a0_v_s_1_2:(S0, int_P pointer) memory ->
     S0_i0_v_s_1_2:(S0, int32) memory ->
      int_P_int_M_v_s_1_2:(int_P, int32) memory -> { } unit { true }

parameter f0_requires :
 v_s_1:S0 pointer ->
  int_P_v_s_1_2_alloc_table:int_P alloc_table ->
   S0_v_s_1_2_alloc_table:S0 alloc_table ->
    S0_a0_v_s_1_2:(S0, int_P pointer) memory ->
     S0_i0_v_s_1_2:(S0, int32) memory ->
      int_P_int_M_v_s_1_2:(int_P, int32) memory ->
       { (JC_42:
         ((JC_39:
          ge_int(integer_of_int32(select(S0_i0_v_s_1_2, v_s_1)), (0)))
         and ((JC_40:
              le_int(offset_min(int_P_v_s_1_2_alloc_table,
                     select(S0_a0_v_s_1_2, v_s_1)),
              (0)))
             and (JC_41:
                 ge_int(offset_max(int_P_v_s_1_2_alloc_table,
                        select(S0_a0_v_s_1_2, v_s_1)),
                 sub_int(integer_of_int32(select(S0_i0_v_s_1_2, v_s_1)), (1)))))))}
       unit { true }

parameter f1 :
 v_s:S1 pointer ->
  int_P_v_s_3_alloc_table:int_P alloc_table ->
   S1_v_s_3_alloc_table:S1 alloc_table ->
    S1_a1_v_s_3:(S1, int_P pointer) memory ->
     S1_i1_v_s_3:(S1, int32) memory ->
      int_P_int_M_v_s_3:(int_P, int32) memory -> { } unit { true }

parameter f1_requires :
 v_s:S1 pointer ->
  int_P_v_s_3_alloc_table:int_P alloc_table ->
   S1_v_s_3_alloc_table:S1 alloc_table ->
    S1_a1_v_s_3:(S1, int_P pointer) memory ->
     S1_i1_v_s_3:(S1, int32) memory ->
      int_P_int_M_v_s_3:(int_P, int32) memory ->
       { (JC_80:
         ((JC_77: ge_int(integer_of_int32(select(S1_i1_v_s_3, v_s)), (0)))
         and ((JC_78:
              le_int(offset_min(int_P_v_s_3_alloc_table,
                     select(S1_a1_v_s_3, v_s)),
              (0)))
             and (JC_79:
                 ge_int(offset_max(int_P_v_s_3_alloc_table,
                        select(S1_a1_v_s_3, v_s)),
                 sub_int(integer_of_int32(select(S1_i1_v_s_3, v_s)), (1)))))))}
       unit { true }

parameter f_requires :
 v_s_0:S pointer ->
  int_P_v_s_0_1_alloc_table:int_P alloc_table ->
   S_v_s_0_1_alloc_table:S alloc_table ->
    S_a_v_s_0_1:(S, int_P pointer) memory ->
     S_i_v_s_0_1:(S, int32) memory ->
      int_P_int_M_v_s_0_1:(int_P, int32) memory ->
       { (JC_4:
         ((JC_1: ge_int(integer_of_int32(select(S_i_v_s_0_1, v_s_0)), (0)))
         and ((JC_2:
              le_int(offset_min(int_P_v_s_0_1_alloc_table,
                     select(S_a_v_s_0_1, v_s_0)),
              (0)))
             and (JC_3:
                 ge_int(offset_max(int_P_v_s_0_1_alloc_table,
                        select(S_a_v_s_0_1, v_s_0)),
                 sub_int(integer_of_int32(select(S_i_v_s_0_1, v_s_0)), (1)))))))}
       unit { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let f0_ensures_default =
 fun (v_s_1 : S0 pointer) (S0_v_s_1_2_alloc_table : S0 alloc_table) (int_P_v_s_1_2_alloc_table : int_P alloc_table) (int_P_int_M_v_s_1_2 : (int_P, int32) memory) (S0_i0_v_s_1_2 : (S0, int32) memory) (S0_a0_v_s_1_2 : (S0, int_P pointer) memory) ->
  { ((true = true)
    and (valid_struct_S0(v_s_1, (0), (0), S0_v_s_1_2_alloc_table,
         int_P_v_s_1_2_alloc_table, S0_a0_v_s_1_2)
        and (JC_47:
            ((JC_44:
             ge_int(integer_of_int32(select(S0_i0_v_s_1_2, v_s_1)), (0)))
            and ((JC_45:
                 le_int(offset_min(int_P_v_s_1_2_alloc_table,
                        select(S0_a0_v_s_1_2, v_s_1)),
                 (0)))
                and (JC_46:
                    ge_int(offset_max(int_P_v_s_1_2_alloc_table,
                           select(S0_a0_v_s_1_2, v_s_1)),
                    sub_int(integer_of_int32(select(S0_i0_v_s_1_2, v_s_1)),
                    (1))))))))) }
  (init:
  try
   begin
     (let S0_a0_s_1_6 = ref (any_memory void) in
     (let S0_i0_s_1_6 = ref (any_memory void) in
     (let int_P_int_M_s_1_6 = ref (any_memory void) in
     (let S0_s_1_6_tag_table = ref (any_tag_table void) in
     (let int_P_s_1_6_tag_table = ref (any_tag_table void) in
     (let int_P_s_1_6_alloc_table = ref (any_alloc_table void) in
     (let S0_s_1_6_alloc_table = ref (any_alloc_table void) in
     (let s_1 = ref (any_pointer void) in
     (let j_0 = ref (any_int32 void) in
     (C_29:
     begin
       (let jessie_62 = (s_1 := (C_28:
                                (JC_68:
                                (((((alloc_struct_S0 (1)) S0_s_1_6_alloc_table) int_P_s_1_6_alloc_table) S0_s_1_6_tag_table) !S0_a0_s_1_6)))) in
       void);
      (C_32:
      begin
        (let jessie_67 = (let jessie_63 = (C_30:
                                          ((safe_acc_ S0_i0_v_s_1_2) v_s_1)) in
                         (let jessie_66 = !s_1 in
                         (((safe_upd_ S0_i0_s_1_6) jessie_66) jessie_63))) in
        void);
       (C_33:
       begin
         (let jessie_68 = (j_0 := (safe_int32_of_integer_ (0))) in void);
        try
         (let jessie_77 = begin
                            (loop_4:
                            while true do
                            { invariant
                                (JC_72:
                                ((JC_69: le_int((0), integer_of_int32(j_0)))
                                and ((JC_70:
                                     le_int(integer_of_int32(j_0),
                                     integer_of_int32(select(S0_i0_v_s_1_2,
                                                      v_s_1))))
                                    and (JC_71:
                                        (forall k_1:int32.
                                         ((le_int((0), integer_of_int32(k_1))
                                          and lt_int(integer_of_int32(k_1),
                                              integer_of_int32(j_0))) ->
                                          eq_int(integer_of_int32(select(int_P_int_M_v_s_1_2,
                                                                  shift(
                                                                  select(S0_a0_v_s_1_2,
                                                                  v_s_1),
                                                                  integer_of_int32(k_1)))),
                                          (0))))))))
                               }
                             begin
                               [ { } unit { true } ];
                              try
                               (let jessie_76 = begin
                                                  (let jessie_75 = begin
                                                                     
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !j_0)) 
                                                                    (integer_of_int32 
                                                                    (C_40:
                                                                    ((safe_acc_ !S0_i0_s_1_6) !s_1))))
                                                                    then void
                                                                    else
                                                                    (let jessie_69 = 
                                                                    (raise
                                                                    (Goto_while_1_break_exc
                                                                    void)) in
                                                                    void));
                                                                    (C_43:
                                                                    begin
                                                                      
                                                                    (let jessie_74 = 
                                                                    (let jessie_70 = 
                                                                    (safe_int32_of_integer_ (0)) in
                                                                    (let jessie_73 = 
                                                                    ((shift 
                                                                    (C_41:
                                                                    ((safe_acc_ !S0_a0_s_1_6) !s_1))) 
                                                                    (integer_of_int32 !j_0)) in
                                                                    (((safe_upd_ int_P_int_M_s_1_6) jessie_73) jessie_70))) in
                                                                    void);
                                                                    (C_46:
                                                                    begin
                                                                      
                                                                    (j_0 := 
                                                                    (C_45:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_44:
                                                                    ((add_int 
                                                                    (integer_of_int32 !j_0)) (1))))));
                                                                    !j_0
                                                                    end)
                                                                    end)
                                                                   end in
                                                  void);
                                                 (raise
                                                  (Loop_continue_exc
                                                  void))
                                                end in
                               void)
                               with
                               Loop_continue_exc jessie_6 ->
                               void end
                             end
                            done);
                           (raise (Goto_while_1_break_exc void))
                          end in
         void)
         with
         Goto_while_1_break_exc jessie_4 ->
         (while_1_break: void) end;
        (assert
        { (JC_76:
          (forall k_2:int32.
           ((le_int((0), integer_of_int32(k_2))
            and lt_int(integer_of_int32(k_2),
                integer_of_int32(select(S0_i0_v_s_1_2, v_s_1)))) ->
            eq_int(integer_of_int32(select(int_P_int_M_v_s_1_2,
                                    shift(select(S0_a0_v_s_1_2, v_s_1),
                                    integer_of_int32(k_2)))),
            (0))))) };
        void);
        void;
        (C_48:
        begin
          ((safe_free_parameter S0_s_1_6_alloc_table) !s_1); (raise Return)
        end)
       end)
      end)
     end))))))))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_49: true) }

let f0_safety =
 fun (v_s_1 : S0 pointer) (S0_v_s_1_2_alloc_table : S0 alloc_table) (int_P_v_s_1_2_alloc_table : int_P alloc_table) (int_P_int_M_v_s_1_2 : (int_P, int32) memory) (S0_i0_v_s_1_2 : (S0, int32) memory) (S0_a0_v_s_1_2 : (S0, int_P pointer) memory) ->
  { (valid_struct_S0(v_s_1, (0), (0), S0_v_s_1_2_alloc_table,
     int_P_v_s_1_2_alloc_table, S0_a0_v_s_1_2)
    and (JC_47:
        ((JC_44: ge_int(integer_of_int32(select(S0_i0_v_s_1_2, v_s_1)), (0)))
        and ((JC_45:
             le_int(offset_min(int_P_v_s_1_2_alloc_table,
                    select(S0_a0_v_s_1_2, v_s_1)),
             (0)))
            and (JC_46:
                ge_int(offset_max(int_P_v_s_1_2_alloc_table,
                       select(S0_a0_v_s_1_2, v_s_1)),
                sub_int(integer_of_int32(select(S0_i0_v_s_1_2, v_s_1)), (1)))))))) }
  (init:
  try
   begin
     (let S0_a0_s_1_6 = ref (any_memory void) in
     (let S0_i0_s_1_6 = ref (any_memory void) in
     (let int_P_int_M_s_1_6 = ref (any_memory void) in
     (let S0_s_1_6_tag_table = ref (any_tag_table void) in
     (let int_P_s_1_6_tag_table = ref (any_tag_table void) in
     (let int_P_s_1_6_alloc_table = ref (any_alloc_table void) in
     (let S0_s_1_6_alloc_table = ref (any_alloc_table void) in
     (let s_1 = ref (any_pointer void) in
     (let j_0 = ref (any_int32 void) in
     (C_29:
     begin
       (let jessie_45 = (s_1 := (let jessie_44 = (C_28:
                                                 (JC_53:
                                                 (((((alloc_struct_S0_requires (1)) S0_s_1_6_alloc_table) int_P_s_1_6_alloc_table) S0_s_1_6_tag_table) !S0_a0_s_1_6))) in
                                (JC_54:
                                (assert
                                { ge_int(offset_max(S0_s_1_6_alloc_table,
                                         jessie_44),
                                  (0)) };
                                jessie_44)))) in
       void);
      (C_32:
      begin
        (let jessie_50 = (let jessie_46 = (C_30:
                                          ((safe_acc_ S0_i0_v_s_1_2) v_s_1)) in
                         (let jessie_49 = !s_1 in
                         (((safe_upd_ S0_i0_s_1_6) jessie_49) jessie_46))) in
        void);
       (C_33:
       begin
         (let jessie_51 = (j_0 := (safe_int32_of_integer_ (0))) in void);
        try
         (let jessie_60 = begin
                            (loop_3:
                            while true do
                            { invariant (JC_60: true)
                              variant (JC_65 : sub_int(integer_of_int32(
                                                       select(S0_i0_v_s_1_2,
                                                       v_s_1)),
                                               integer_of_int32(j_0))) }
                             begin
                               [ { } unit reads j_0
                                 { (JC_58:
                                   ((JC_55:
                                    le_int((0), integer_of_int32(j_0)))
                                   and ((JC_56:
                                        le_int(integer_of_int32(j_0),
                                        integer_of_int32(select(S0_i0_v_s_1_2,
                                                         v_s_1))))
                                       and (JC_57:
                                           (forall k_1:int32.
                                            ((le_int((0),
                                              integer_of_int32(k_1))
                                             and lt_int(integer_of_int32(k_1),
                                                 integer_of_int32(j_0))) ->
                                             eq_int(integer_of_int32(
                                                    select(int_P_int_M_v_s_1_2,
                                                    shift(select(S0_a0_v_s_1_2,
                                                          v_s_1),
                                                    integer_of_int32(k_1)))),
                                             (0)))))))) } ];
                              try
                               (let jessie_59 = begin
                                                  (let jessie_58 = begin
                                                                     
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !j_0)) 
                                                                    (integer_of_int32 
                                                                    (C_40:
                                                                    ((safe_acc_ !S0_i0_s_1_6) !s_1))))
                                                                    then void
                                                                    else
                                                                    (let jessie_52 = 
                                                                    (raise
                                                                    (Goto_while_1_break_exc
                                                                    void)) in
                                                                    void));
                                                                    (C_43:
                                                                    begin
                                                                      
                                                                    (let jessie_57 = 
                                                                    (let jessie_53 = 
                                                                    (safe_int32_of_integer_ (0)) in
                                                                    (let jessie_54 = 
                                                                    (C_41:
                                                                    ((safe_acc_ !S0_a0_s_1_6) !s_1)) in
                                                                    (let jessie_55 = 
                                                                    (integer_of_int32 !j_0) in
                                                                    (let jessie_56 = 
                                                                    ((shift jessie_54) jessie_55) in
                                                                    (JC_62:
                                                                    (((((offset_upd_ !int_P_s_1_6_alloc_table) int_P_int_M_s_1_6) jessie_54) jessie_55) jessie_53)))))) in
                                                                    void);
                                                                    (C_46:
                                                                    begin
                                                                      
                                                                    (j_0 := 
                                                                    (C_45:
                                                                    (JC_64:
                                                                    (int32_of_integer_ 
                                                                    (C_44:
                                                                    ((add_int 
                                                                    (integer_of_int32 !j_0)) (1)))))));
                                                                    !j_0
                                                                    end)
                                                                    end)
                                                                   end in
                                                  void);
                                                 (raise
                                                  (Loop_continue_exc
                                                  void))
                                                end in
                               void)
                               with
                               Loop_continue_exc jessie_6 ->
                               void end
                             end
                            done);
                           (raise (Goto_while_1_break_exc void))
                          end in
         void)
         with
         Goto_while_1_break_exc jessie_4 ->
         (while_1_break: void) end;
        [ { } unit
          { (JC_66:
            (forall k_2:int32.
             ((le_int((0), integer_of_int32(k_2))
              and lt_int(integer_of_int32(k_2),
                  integer_of_int32(select(S0_i0_v_s_1_2, v_s_1)))) ->
              eq_int(integer_of_int32(select(int_P_int_M_v_s_1_2,
                                      shift(select(S0_a0_v_s_1_2, v_s_1),
                                      integer_of_int32(k_2)))),
              (0))))) } ];
        void;
        (C_48:
        begin
          ((free_parameter S0_s_1_6_alloc_table) !s_1); (raise Return)
        end)
       end)
      end)
     end))))))))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let f1_ensures_default =
 fun (v_s : S1 pointer) (S1_v_s_3_alloc_table : S1 alloc_table) (int_P_v_s_3_alloc_table : int_P alloc_table) (int_P_int_M_v_s_3 : (int_P, int32) memory) (S1_i1_v_s_3 : (S1, int32) memory) (S1_a1_v_s_3 : (S1, int_P pointer) memory) ->
  { ((true = true)
    and (valid_struct_S1(v_s, (0), (0), S1_v_s_3_alloc_table,
         int_P_v_s_3_alloc_table, S1_a1_v_s_3)
        and (JC_85:
            ((JC_82: ge_int(integer_of_int32(select(S1_i1_v_s_3, v_s)), (0)))
            and ((JC_83:
                 le_int(offset_min(int_P_v_s_3_alloc_table,
                        select(S1_a1_v_s_3, v_s)),
                 (0)))
                and (JC_84:
                    ge_int(offset_max(int_P_v_s_3_alloc_table,
                           select(S1_a1_v_s_3, v_s)),
                    sub_int(integer_of_int32(select(S1_i1_v_s_3, v_s)), (1))))))))) }
  (init:
  try
   begin
     (let S1_a1_s_8 = ref (any_memory void) in
     (let S1_i1_s_8 = ref (any_memory void) in
     (let int_P_int_M_s_8 = ref (any_memory void) in
     (let S1_s_8_tag_table = ref (any_tag_table void) in
     (let int_P_s_8_tag_table = ref (any_tag_table void) in
     (let int_P_s_8_alloc_table = ref (any_alloc_table void) in
     (let S1_s_8_alloc_table = ref (any_alloc_table void) in
     (let s = ref (any_pointer void) in
     (let j_1 = ref (any_int32 void) in
     (C_56:
     begin
       (let jessie_101 = (s := (C_55:
                               (JC_106:
                               (((((alloc_struct_S1 (1)) S1_s_8_alloc_table) int_P_s_8_alloc_table) S1_s_8_tag_table) !S1_a1_s_8)))) in
       void);
      (let jessie_111 = (C_59:
                        begin
                          (let jessie_106 = (let jessie_102 = (C_57:
                                                              ((safe_acc_ S1_i1_v_s_3) v_s)) in
                                            (let jessie_105 = !s in
                                            (((safe_upd_ S1_i1_s_8) jessie_105) jessie_102))) in
                          void);
                         (C_64:
                         (let jessie_107 = (C_61:
                                           ((safe_acc_ int_P_int_M_v_s_3) 
                                            ((shift (C_60:
                                                    ((safe_acc_ S1_a1_v_s_3) v_s))) (0)))) in
                         (let jessie_110 = ((shift (C_62:
                                                   ((safe_acc_ !S1_a1_s_8) !s))) (0)) in
                         begin
                           (((safe_upd_ int_P_int_M_s_8) jessie_110) jessie_107);
                          jessie_107
                         end)))
                        end) in
      void);
      (C_65:
      begin
        (let jessie_112 = (j_1 := (safe_int32_of_integer_ (0))) in void);
       try
        (let jessie_121 = begin
                            (loop_6:
                            while true do
                            { invariant
                                (JC_110:
                                ((JC_107: le_int((0), integer_of_int32(j_1)))
                                and ((JC_108:
                                     le_int(integer_of_int32(j_1),
                                     integer_of_int32(select(S1_i1_v_s_3,
                                                      v_s))))
                                    and (JC_109:
                                        (forall k_3:int32.
                                         ((le_int((0), integer_of_int32(k_3))
                                          and lt_int(integer_of_int32(k_3),
                                              integer_of_int32(j_1))) ->
                                          eq_int(integer_of_int32(select(int_P_int_M_v_s_3,
                                                                  shift(
                                                                  select(S1_a1_v_s_3,
                                                                  v_s),
                                                                  integer_of_int32(k_3)))),
                                          (0))))))))
                               }
                             begin
                               [ { } unit { true } ];
                              try
                               (let jessie_120 = begin
                                                   (let jessie_119 = 
                                                   begin
                                                     (if ((lt_int_ (integer_of_int32 !j_1)) 
                                                          (integer_of_int32 
                                                           (C_72:
                                                           ((safe_acc_ !S1_i1_s_8) !s))))
                                                     then void
                                                     else
                                                      (let jessie_113 = 
                                                      (raise
                                                       (Goto_while_2_break_exc
                                                       void)) in
                                                      void));
                                                    (C_75:
                                                    begin
                                                      (let jessie_118 = 
                                                      (let jessie_114 = 
                                                      (safe_int32_of_integer_ (0)) in
                                                      (let jessie_117 = 
                                                      ((shift (C_73:
                                                              ((safe_acc_ !S1_a1_s_8) !s))) 
                                                       (integer_of_int32 !j_1)) in
                                                      (((safe_upd_ int_P_int_M_s_8) jessie_117) jessie_114))) in
                                                      void);
                                                     (C_78:
                                                     begin
                                                       (j_1 := (C_77:
                                                               (safe_int32_of_integer_ 
                                                                (C_76:
                                                                ((add_int 
                                                                  (integer_of_int32 !j_1)) (1))))));
                                                      !j_1
                                                     end)
                                                    end)
                                                   end in
                                                   void);
                                                  (raise
                                                   (Loop_continue_exc
                                                   void))
                                                 end in
                               void)
                               with
                               Loop_continue_exc jessie_9 ->
                               void end
                             end
                            done);
                           (raise (Goto_while_2_break_exc void))
                          end in
        void)
        with
        Goto_while_2_break_exc jessie_7 ->
        (while_2_break: void) end;
       (assert
       { (JC_114:
         (forall k_4:int32.
          ((le_int((0), integer_of_int32(k_4))
           and lt_int(integer_of_int32(k_4),
               integer_of_int32(select(S1_i1_v_s_3, v_s)))) ->
           eq_int(integer_of_int32(select(int_P_int_M_v_s_3,
                                   shift(select(S1_a1_v_s_3, v_s),
                                   integer_of_int32(k_4)))),
           (0))))) };
       void);
       void;
       (C_80:
       begin
         ((safe_free_parameter S1_s_8_alloc_table) !s); (raise Return)
       end)
      end)
     end))))))))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_87: true) }

let f1_safety =
 fun (v_s : S1 pointer) (S1_v_s_3_alloc_table : S1 alloc_table) (int_P_v_s_3_alloc_table : int_P alloc_table) (int_P_int_M_v_s_3 : (int_P, int32) memory) (S1_i1_v_s_3 : (S1, int32) memory) (S1_a1_v_s_3 : (S1, int_P pointer) memory) ->
  { (valid_struct_S1(v_s, (0), (0), S1_v_s_3_alloc_table,
     int_P_v_s_3_alloc_table, S1_a1_v_s_3)
    and (JC_85:
        ((JC_82: ge_int(integer_of_int32(select(S1_i1_v_s_3, v_s)), (0)))
        and ((JC_83:
             le_int(offset_min(int_P_v_s_3_alloc_table,
                    select(S1_a1_v_s_3, v_s)),
             (0)))
            and (JC_84:
                ge_int(offset_max(int_P_v_s_3_alloc_table,
                       select(S1_a1_v_s_3, v_s)),
                sub_int(integer_of_int32(select(S1_i1_v_s_3, v_s)), (1)))))))) }
  (init:
  try
   begin
     (let S1_a1_s_8 = ref (any_memory void) in
     (let S1_i1_s_8 = ref (any_memory void) in
     (let int_P_int_M_s_8 = ref (any_memory void) in
     (let S1_s_8_tag_table = ref (any_tag_table void) in
     (let int_P_s_8_tag_table = ref (any_tag_table void) in
     (let int_P_s_8_alloc_table = ref (any_alloc_table void) in
     (let S1_s_8_alloc_table = ref (any_alloc_table void) in
     (let s = ref (any_pointer void) in
     (let j_1 = ref (any_int32 void) in
     (C_56:
     begin
       (let jessie_79 = (s := (let jessie_78 = (C_55:
                                               (JC_91:
                                               (((((alloc_struct_S1_requires (1)) S1_s_8_alloc_table) int_P_s_8_alloc_table) S1_s_8_tag_table) !S1_a1_s_8))) in
                              (JC_92:
                              (assert
                              { ge_int(offset_max(S1_s_8_alloc_table,
                                       jessie_78),
                                (0)) };
                              jessie_78)))) in
       void);
      (let jessie_89 = (C_59:
                       begin
                         (let jessie_84 = (let jessie_80 = (C_57:
                                                           ((safe_acc_ S1_i1_v_s_3) v_s)) in
                                          (let jessie_83 = !s in
                                          (((safe_upd_ S1_i1_s_8) jessie_83) jessie_80))) in
                         void);
                        (C_64:
                        (let jessie_85 = (C_61:
                                         ((safe_acc_ int_P_int_M_v_s_3) 
                                          ((shift (C_60:
                                                  ((safe_acc_ S1_a1_v_s_3) v_s))) (0)))) in
                        (let jessie_88 = ((shift (C_62:
                                                 ((safe_acc_ !S1_a1_s_8) !s))) (0)) in
                        begin
                          (((safe_upd_ int_P_int_M_s_8) jessie_88) jessie_85);
                         jessie_85
                        end)))
                       end) in
      void);
      (C_65:
      begin
        (let jessie_90 = (j_1 := (safe_int32_of_integer_ (0))) in void);
       try
        (let jessie_99 = begin
                           (loop_5:
                           while true do
                           { invariant (JC_98: true)
                             variant (JC_103 : sub_int(integer_of_int32(
                                                       select(S1_i1_v_s_3,
                                                       v_s)),
                                               integer_of_int32(j_1))) }
                            begin
                              [ { } unit reads j_1
                                { (JC_96:
                                  ((JC_93:
                                   le_int((0), integer_of_int32(j_1)))
                                  and ((JC_94:
                                       le_int(integer_of_int32(j_1),
                                       integer_of_int32(select(S1_i1_v_s_3,
                                                        v_s))))
                                      and (JC_95:
                                          (forall k_3:int32.
                                           ((le_int((0),
                                             integer_of_int32(k_3))
                                            and lt_int(integer_of_int32(k_3),
                                                integer_of_int32(j_1))) ->
                                            eq_int(integer_of_int32(select(int_P_int_M_v_s_3,
                                                                    shift(
                                                                    select(S1_a1_v_s_3,
                                                                    v_s),
                                                                    integer_of_int32(k_3)))),
                                            (0)))))))) } ];
                             try
                              (let jessie_98 = begin
                                                 (let jessie_97 = begin
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !j_1)) 
                                                                    (integer_of_int32 
                                                                    (C_72:
                                                                    ((safe_acc_ !S1_i1_s_8) !s))))
                                                                    then void
                                                                    else
                                                                    (let jessie_91 = 
                                                                    (raise
                                                                    (Goto_while_2_break_exc
                                                                    void)) in
                                                                    void));
                                                                   (C_75:
                                                                   begin
                                                                     
                                                                    (let jessie_96 = 
                                                                    (let jessie_92 = 
                                                                    (safe_int32_of_integer_ (0)) in
                                                                    (let jessie_93 = 
                                                                    (C_73:
                                                                    ((safe_acc_ !S1_a1_s_8) !s)) in
                                                                    (let jessie_94 = 
                                                                    (integer_of_int32 !j_1) in
                                                                    (let jessie_95 = 
                                                                    ((shift jessie_93) jessie_94) in
                                                                    (JC_100:
                                                                    (((((offset_upd_ !int_P_s_8_alloc_table) int_P_int_M_s_8) jessie_93) jessie_94) jessie_92)))))) in
                                                                    void);
                                                                    (C_78:
                                                                    begin
                                                                      
                                                                    (j_1 := 
                                                                    (C_77:
                                                                    (JC_102:
                                                                    (int32_of_integer_ 
                                                                    (C_76:
                                                                    ((add_int 
                                                                    (integer_of_int32 !j_1)) (1)))))));
                                                                    !j_1
                                                                    end)
                                                                   end)
                                                                  end in
                                                 void);
                                                (raise
                                                 (Loop_continue_exc
                                                 void))
                                               end in
                              void)
                              with
                              Loop_continue_exc jessie_9 ->
                              void end
                            end
                           done);
                          (raise (Goto_while_2_break_exc void))
                         end in
        void)
        with
        Goto_while_2_break_exc jessie_7 ->
        (while_2_break: void) end;
       [ { } unit
         { (JC_104:
           (forall k_4:int32.
            ((le_int((0), integer_of_int32(k_4))
             and lt_int(integer_of_int32(k_4),
                 integer_of_int32(select(S1_i1_v_s_3, v_s)))) ->
             eq_int(integer_of_int32(select(int_P_int_M_v_s_3,
                                     shift(select(S1_a1_v_s_3, v_s),
                                     integer_of_int32(k_4)))),
             (0))))) } ];
       void;
       (C_80:
       begin   ((free_parameter S1_s_8_alloc_table) !s); (raise Return) end)
      end)
     end))))))))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let f_ensures_default =
 fun (v_s_0 : S pointer) (S_v_s_0_1_alloc_table : S alloc_table) (int_P_v_s_0_1_alloc_table : int_P alloc_table) (int_P_int_M_v_s_0_1 : (int_P, int32) memory) (S_i_v_s_0_1 : (S, int32) memory) (S_a_v_s_0_1 : (S, int_P pointer) memory) ->
  { ((true = true)
    and (valid_struct_S(v_s_0, (0), (0), S_v_s_0_1_alloc_table,
         int_P_v_s_0_1_alloc_table, S_a_v_s_0_1)
        and (JC_9:
            ((JC_6:
             ge_int(integer_of_int32(select(S_i_v_s_0_1, v_s_0)), (0)))
            and ((JC_7:
                 le_int(offset_min(int_P_v_s_0_1_alloc_table,
                        select(S_a_v_s_0_1, v_s_0)),
                 (0)))
                and (JC_8:
                    ge_int(offset_max(int_P_v_s_0_1_alloc_table,
                           select(S_a_v_s_0_1, v_s_0)),
                    sub_int(integer_of_int32(select(S_i_v_s_0_1, v_s_0)),
                    (1))))))))) }
  (init:
  try
   begin
     (let S_a_s_0_4 = ref (any_memory void) in
     (let S_i_s_0_4 = ref (any_memory void) in
     (let int_P_int_M_s_0_4 = ref (any_memory void) in
     (let S_s_0_4_tag_table = ref (any_tag_table void) in
     (let int_P_s_0_4_tag_table = ref (any_tag_table void) in
     (let int_P_s_0_4_alloc_table = ref (any_alloc_table void) in
     (let S_s_0_4_alloc_table = ref (any_alloc_table void) in
     (let s_0 = ref (any_pointer void) in
     (let j = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_28 = (s_0 := (C_1:
                                (JC_30:
                                (((((alloc_struct_S (1)) S_s_0_4_alloc_table) int_P_s_0_4_alloc_table) S_s_0_4_tag_table) !S_a_s_0_4)))) in
       void);
      (C_5:
      begin
        (let jessie_33 = (let jessie_29 = (C_3:
                                          ((safe_acc_ S_i_v_s_0_1) v_s_0)) in
                         (let jessie_32 = !s_0 in
                         (((safe_upd_ S_i_s_0_4) jessie_32) jessie_29))) in
        void);
       (C_6:
       begin
         (let jessie_34 = (j := (safe_int32_of_integer_ (0))) in void);
        try
         (let jessie_43 = begin
                            (loop_2:
                            while true do
                            { invariant
                                (JC_34:
                                ((JC_31: le_int((0), integer_of_int32(j)))
                                and ((JC_32:
                                     le_int(integer_of_int32(j),
                                     integer_of_int32(select(S_i_v_s_0_1,
                                                      v_s_0))))
                                    and (JC_33:
                                        (forall k:int32.
                                         ((le_int((0), integer_of_int32(k))
                                          and lt_int(integer_of_int32(k),
                                              integer_of_int32(j))) ->
                                          eq_int(integer_of_int32(select(int_P_int_M_v_s_0_1,
                                                                  shift(
                                                                  select(S_a_v_s_0_1,
                                                                  v_s_0),
                                                                  integer_of_int32(k)))),
                                          (0))))))))
                               }
                             begin
                               [ { } unit { true } ];
                              try
                               (let jessie_42 = begin
                                                  (let jessie_41 = begin
                                                                     
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !j)) 
                                                                    (integer_of_int32 
                                                                    (C_13:
                                                                    ((safe_acc_ !S_i_s_0_4) !s_0))))
                                                                    then void
                                                                    else
                                                                    (let jessie_35 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                    (C_16:
                                                                    begin
                                                                      
                                                                    (let jessie_40 = 
                                                                    (let jessie_36 = 
                                                                    (safe_int32_of_integer_ (0)) in
                                                                    (let jessie_39 = 
                                                                    ((shift 
                                                                    (C_14:
                                                                    ((safe_acc_ !S_a_s_0_4) !s_0))) 
                                                                    (integer_of_int32 !j)) in
                                                                    (((safe_upd_ int_P_int_M_s_0_4) jessie_39) jessie_36))) in
                                                                    void);
                                                                    (C_19:
                                                                    begin
                                                                      
                                                                    (j := 
                                                                    (C_18:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_17:
                                                                    ((add_int 
                                                                    (integer_of_int32 !j)) (1))))));
                                                                    !j
                                                                    end)
                                                                    end)
                                                                   end in
                                                  void);
                                                 (raise
                                                  (Loop_continue_exc
                                                  void))
                                                end in
                               void)
                               with
                               Loop_continue_exc jessie_3 ->
                               void end
                             end
                            done);
                           (raise (Goto_while_0_break_exc void))
                          end in
         void)
         with
         Goto_while_0_break_exc jessie_1 ->
         (while_0_break: void) end;
        (assert
        { (JC_38:
          (forall k_0:int32.
           ((le_int((0), integer_of_int32(k_0))
            and lt_int(integer_of_int32(k_0),
                integer_of_int32(select(S_i_v_s_0_1, v_s_0)))) ->
            eq_int(integer_of_int32(select(int_P_int_M_v_s_0_1,
                                    shift(select(S_a_v_s_0_1, v_s_0),
                                    integer_of_int32(k_0)))),
            (0))))) };
        void);
        void;
        (C_21:
        begin
          ((safe_free_parameter S_s_0_4_alloc_table) !s_0); (raise Return)
        end)
       end)
      end)
     end))))))))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_11: true) }

let f_safety =
 fun (v_s_0 : S pointer) (S_v_s_0_1_alloc_table : S alloc_table) (int_P_v_s_0_1_alloc_table : int_P alloc_table) (int_P_int_M_v_s_0_1 : (int_P, int32) memory) (S_i_v_s_0_1 : (S, int32) memory) (S_a_v_s_0_1 : (S, int_P pointer) memory) ->
  { (valid_struct_S(v_s_0, (0), (0), S_v_s_0_1_alloc_table,
     int_P_v_s_0_1_alloc_table, S_a_v_s_0_1)
    and (JC_9:
        ((JC_6: ge_int(integer_of_int32(select(S_i_v_s_0_1, v_s_0)), (0)))
        and ((JC_7:
             le_int(offset_min(int_P_v_s_0_1_alloc_table,
                    select(S_a_v_s_0_1, v_s_0)),
             (0)))
            and (JC_8:
                ge_int(offset_max(int_P_v_s_0_1_alloc_table,
                       select(S_a_v_s_0_1, v_s_0)),
                sub_int(integer_of_int32(select(S_i_v_s_0_1, v_s_0)), (1)))))))) }
  (init:
  try
   begin
     (let S_a_s_0_4 = ref (any_memory void) in
     (let S_i_s_0_4 = ref (any_memory void) in
     (let int_P_int_M_s_0_4 = ref (any_memory void) in
     (let S_s_0_4_tag_table = ref (any_tag_table void) in
     (let int_P_s_0_4_tag_table = ref (any_tag_table void) in
     (let int_P_s_0_4_alloc_table = ref (any_alloc_table void) in
     (let S_s_0_4_alloc_table = ref (any_alloc_table void) in
     (let s_0 = ref (any_pointer void) in
     (let j = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_11 = (s_0 := (let jessie_10 = (C_1:
                                                 (JC_15:
                                                 (((((alloc_struct_S_requires (1)) S_s_0_4_alloc_table) int_P_s_0_4_alloc_table) S_s_0_4_tag_table) !S_a_s_0_4))) in
                                (JC_16:
                                (assert
                                { ge_int(offset_max(S_s_0_4_alloc_table,
                                         jessie_10),
                                  (0)) };
                                jessie_10)))) in
       void);
      (C_5:
      begin
        (let jessie_16 = (let jessie_12 = (C_3:
                                          ((safe_acc_ S_i_v_s_0_1) v_s_0)) in
                         (let jessie_15 = !s_0 in
                         (((safe_upd_ S_i_s_0_4) jessie_15) jessie_12))) in
        void);
       (C_6:
       begin
         (let jessie_17 = (j := (safe_int32_of_integer_ (0))) in void);
        try
         (let jessie_26 = begin
                            (loop_1:
                            while true do
                            { invariant (JC_22: true)
                              variant (JC_27 : sub_int(integer_of_int32(
                                                       select(S_i_v_s_0_1,
                                                       v_s_0)),
                                               integer_of_int32(j))) }
                             begin
                               [ { } unit reads j
                                 { (JC_20:
                                   ((JC_17: le_int((0), integer_of_int32(j)))
                                   and ((JC_18:
                                        le_int(integer_of_int32(j),
                                        integer_of_int32(select(S_i_v_s_0_1,
                                                         v_s_0))))
                                       and (JC_19:
                                           (forall k:int32.
                                            ((le_int((0),
                                              integer_of_int32(k))
                                             and lt_int(integer_of_int32(k),
                                                 integer_of_int32(j))) ->
                                             eq_int(integer_of_int32(
                                                    select(int_P_int_M_v_s_0_1,
                                                    shift(select(S_a_v_s_0_1,
                                                          v_s_0),
                                                    integer_of_int32(k)))),
                                             (0)))))))) } ];
                              try
                               (let jessie_25 = begin
                                                  (let jessie_24 = begin
                                                                     
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !j)) 
                                                                    (integer_of_int32 
                                                                    (C_13:
                                                                    ((safe_acc_ !S_i_s_0_4) !s_0))))
                                                                    then void
                                                                    else
                                                                    (let jessie_18 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                    (C_16:
                                                                    begin
                                                                      
                                                                    (let jessie_23 = 
                                                                    (let jessie_19 = 
                                                                    (safe_int32_of_integer_ (0)) in
                                                                    (let jessie_20 = 
                                                                    (C_14:
                                                                    ((safe_acc_ !S_a_s_0_4) !s_0)) in
                                                                    (let jessie_21 = 
                                                                    (integer_of_int32 !j) in
                                                                    (let jessie_22 = 
                                                                    ((shift jessie_20) jessie_21) in
                                                                    (JC_24:
                                                                    (((((offset_upd_ !int_P_s_0_4_alloc_table) int_P_int_M_s_0_4) jessie_20) jessie_21) jessie_19)))))) in
                                                                    void);
                                                                    (C_19:
                                                                    begin
                                                                      
                                                                    (j := 
                                                                    (C_18:
                                                                    (JC_26:
                                                                    (int32_of_integer_ 
                                                                    (C_17:
                                                                    ((add_int 
                                                                    (integer_of_int32 !j)) (1)))))));
                                                                    !j
                                                                    end)
                                                                    end)
                                                                   end in
                                                  void);
                                                 (raise
                                                  (Loop_continue_exc
                                                  void))
                                                end in
                               void)
                               with
                               Loop_continue_exc jessie_3 ->
                               void end
                             end
                            done);
                           (raise (Goto_while_0_break_exc void))
                          end in
         void)
         with
         Goto_while_0_break_exc jessie_1 ->
         (while_0_break: void) end;
        [ { } unit
          { (JC_28:
            (forall k_0:int32.
             ((le_int((0), integer_of_int32(k_0))
              and lt_int(integer_of_int32(k_0),
                  integer_of_int32(select(S_i_v_s_0_1, v_s_0)))) ->
              eq_int(integer_of_int32(select(int_P_int_M_v_s_0_1,
                                      shift(select(S_a_v_s_0_1, v_s_0),
                                      integer_of_int32(k_0)))),
              (0))))) } ];
        void;
        (C_21:
        begin
          ((free_parameter S_s_0_4_alloc_table) !s_0); (raise Return)
        end)
       end)
      end)
     end))))))))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C struct_hack.jessie --quiet -f struct_hack.makefile project
why --project [...] why/struct_hack.why
<project name="struct_hack" context="why/struct_hack_ctx.why">
  <function name="Function f1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/struct_hack_po24.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po25.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po26.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po27.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po28.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po29.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po30.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "44" begin = "19" end = "27"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/struct_hack_po31.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "44" begin = "19" end = "27"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/struct_hack_po32.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/struct_hack_po17.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "43" begin = "21" end = "27"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po18.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "43" begin = "26" end = "35"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po19.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "43" begin = "39" end = "81"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po20.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "43" begin = "21" end = "27"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po21.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "43" begin = "26" end = "35"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po22.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "43" begin = "39" end = "81"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po23.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "47" begin = "13" end = "58"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
  </function>
  <function name="Function f0">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/struct_hack_po8.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po9.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po10.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po11.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po12.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po13.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po14.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "28" begin = "19" end = "27"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/struct_hack_po15.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "28" begin = "19" end = "27"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/struct_hack_po16.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/struct_hack_po1.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "27" begin = "21" end = "27"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po2.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "27" begin = "26" end = "35"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po3.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "27" begin = "39" end = "81"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po4.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "27" begin = "21" end = "27"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po5.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "27" begin = "26" end = "35"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po6.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "27" begin = "39" end = "81"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po7.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "31" begin = "13" end = "58"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
  </function>
  <function name="Function f">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/struct_hack_po40.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po41.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po42.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po43.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po44.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po45.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po46.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "12" begin = "19" end = "26"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/struct_hack_po47.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "12" begin = "19" end = "26"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/struct_hack_po48.why">
      <location file = "" line = "0" begin = "0" end = "0"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/struct_hack_po33.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "11" begin = "21" end = "27"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po34.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "11" begin = "26" end = "34"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po35.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "11" begin = "38" end = "79"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po36.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "11" begin = "21" end = "27"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po37.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "11" begin = "26" end = "34"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po38.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "11" begin = "38" end = "79"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    <goal why_file="why/struct_hack_po39.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "15" begin = "13" end = "56"/>
      <explain kind = "Other"
text = "unexplained assertion"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

logic sqrt_real : real -> real

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null :  -> 'a1 pointer

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_positive: (forall p:'a1 pointer. (0 <= address(p)))

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

type S

type S0

type S1

type char_P

type int32

type int8

type int_P

type padding

type void_P

logic S0_tag :  -> S0 tag_id

axiom S0_int: (int_of_tag(S0_tag) = 1)

logic S0_of_bitvector : bitvector -> S0 pointer

logic bitvector_of_S0 : S0 pointer -> bitvector

axiom S0_of_bitvector_of_bitvector_of_S0:
  (forall x:S0 pointer. (S0_of_bitvector(bitvector_of_S0(x)) = x))

logic S0_of_pointer_address : unit pointer -> S0 pointer

axiom S0_of_pointer_address_of_pointer_addr:
  (forall p:S0 pointer. (p = S0_of_pointer_address(pointer_address(p))))

axiom S0_parenttag_bottom: parenttag(S0_tag, bottom_tag)

axiom S0_tags:
  (forall x:S0 pointer.
    (forall S0_tag_table:S0 tag_table. instanceof(S0_tag_table, x, S0_tag)))

logic S1_tag :  -> S1 tag_id

axiom S1_int: (int_of_tag(S1_tag) = 1)

logic S1_of_bitvector : bitvector -> S1 pointer

logic bitvector_of_S1 : S1 pointer -> bitvector

axiom S1_of_bitvector_of_bitvector_of_S1:
  (forall x:S1 pointer. (S1_of_bitvector(bitvector_of_S1(x)) = x))

logic S1_of_pointer_address : unit pointer -> S1 pointer

axiom S1_of_pointer_address_of_pointer_addr:
  (forall p:S1 pointer. (p = S1_of_pointer_address(pointer_address(p))))

axiom S1_parenttag_bottom: parenttag(S1_tag, bottom_tag)

axiom S1_tags:
  (forall x:S1 pointer.
    (forall S1_tag_table:S1 tag_table. instanceof(S1_tag_table, x, S1_tag)))

logic S_tag :  -> S tag_id

axiom S_int: (int_of_tag(S_tag) = 1)

logic S_of_bitvector : bitvector -> S pointer

logic bitvector_of_S : S pointer -> bitvector

axiom S_of_bitvector_of_bitvector_of_S:
  (forall x:S pointer. (S_of_bitvector(bitvector_of_S(x)) = x))

logic S_of_pointer_address : unit pointer -> S pointer

axiom S_of_pointer_address_of_pointer_addr:
  (forall p:S pointer. (p = S_of_pointer_address(pointer_address(p))))

axiom S_parenttag_bottom: parenttag(S_tag, bottom_tag)

axiom S_tags:
  (forall x:S pointer.
    (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

axiom bitvector_of_S0_of_S0_of_bitvector:
  (forall x:bitvector. (bitvector_of_S0(S0_of_bitvector(x)) = x))

axiom bitvector_of_S1_of_S1_of_bitvector:
  (forall x:bitvector. (bitvector_of_S1(S1_of_bitvector(x)) = x))

axiom bitvector_of_S_of_S_of_bitvector:
  (forall x:bitvector. (bitvector_of_S(S_of_bitvector(x)) = x))

logic bitvector_of_char_P : char_P pointer -> bitvector

logic char_P_of_bitvector : bitvector -> char_P pointer

axiom bitvector_of_char_P_of_char_P_of_bitvector:
  (forall x:bitvector. (bitvector_of_char_P(char_P_of_bitvector(x)) = x))

logic bitvector_of_int32 : int32 -> bitvector

logic int32_of_bitvector : bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector:
  (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_int8 : int8 -> bitvector

logic int8_of_bitvector : bitvector -> int8

axiom bitvector_of_int8_of_int8_of_bitvector:
  (forall x:bitvector. (bitvector_of_int8(int8_of_bitvector(x)) = x))

logic bitvector_of_int_P : int_P pointer -> bitvector

logic int_P_of_bitvector : bitvector -> int_P pointer

axiom bitvector_of_int_P_of_int_P_of_bitvector:
  (forall x:bitvector. (bitvector_of_int_P(int_P_of_bitvector(x)) = x))

logic bitvector_of_void_P : void_P pointer -> bitvector

logic void_P_of_bitvector : bitvector -> void_P pointer

axiom bitvector_of_void_P_of_void_P_of_bitvector:
  (forall x:bitvector. (bitvector_of_void_P(void_P_of_bitvector(x)) = x))

logic char_P_tag :  -> char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

axiom char_P_of_bitvector_of_bitvector_of_char_P:
  (forall x:char_P pointer.
    (char_P_of_bitvector(bitvector_of_char_P(x)) = x))

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_of_bitvector_of_bitvector_of_int32:
  (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_of_bitvector_of_bitvector_of_int8:
  (forall x:int8. eq_int8(int8_of_bitvector(bitvector_of_int8(x)), x))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic int_P_tag :  -> int_P tag_id

axiom int_P_int: (int_of_tag(int_P_tag) = 1)

axiom int_P_of_bitvector_of_bitvector_of_int_P:
  (forall x:int_P pointer. (int_P_of_bitvector(bitvector_of_int_P(x)) = x))

logic int_P_of_pointer_address : unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr:
  (forall p:int_P pointer.
    (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom: parenttag(int_P_tag, bottom_tag)

axiom int_P_tags:
  (forall x:int_P pointer.
    (forall int_P_tag_table:int_P tag_table. instanceof(int_P_tag_table, x,
      int_P_tag)))

predicate left_valid_struct_int_P(p: int_P pointer, a: int,
  int_P_alloc_table: int_P alloc_table) = (offset_min(int_P_alloc_table,
  p) <= a)

predicate left_valid_struct_S(p: S pointer, a: int,
  S_alloc_table: S alloc_table, int_P_alloc_table: int_P alloc_table,
  S_a: (S, int_P pointer) memory) =
  ((offset_min(S_alloc_table, p) <= a) and
   left_valid_struct_int_P(select(S_a, p), 0, int_P_alloc_table))

predicate left_valid_struct_S0(p: S0 pointer, a: int,
  S0_alloc_table: S0 alloc_table, int_P_alloc_table: int_P alloc_table,
  S0_a0: (S0, int_P pointer) memory) =
  ((offset_min(S0_alloc_table, p) <= a) and
   left_valid_struct_int_P(select(S0_a0, p), 0, int_P_alloc_table))

predicate left_valid_struct_S1(p: S1 pointer, a: int,
  S1_alloc_table: S1 alloc_table, int_P_alloc_table: int_P alloc_table,
  S1_a1: (S1, int_P pointer) memory) =
  ((offset_min(S1_alloc_table, p) <= a) and
   left_valid_struct_int_P(select(S1_a1, p), 0, int_P_alloc_table))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of_S0_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(S0_of_pointer_address(p))))

axiom pointer_addr_of_S1_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(S1_of_pointer_address(p))))

axiom pointer_addr_of_S_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(S_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_int_P(p: int_P pointer, b: int,
  int_P_alloc_table: int_P alloc_table) = (offset_max(int_P_alloc_table,
  p) >= b)

predicate right_valid_struct_S(p: S pointer, b: int,
  S_alloc_table: S alloc_table, int_P_alloc_table: int_P alloc_table,
  S_a: (S, int_P pointer) memory) =
  ((offset_max(S_alloc_table, p) >= b) and
   right_valid_struct_int_P(select(S_a, p), (-1), int_P_alloc_table))

predicate right_valid_struct_S0(p: S0 pointer, b: int,
  S0_alloc_table: S0 alloc_table, int_P_alloc_table: int_P alloc_table,
  S0_a0: (S0, int_P pointer) memory) =
  ((offset_max(S0_alloc_table, p) >= b) and
   right_valid_struct_int_P(select(S0_a0, p), (-1), int_P_alloc_table))

predicate right_valid_struct_S1(p: S1 pointer, b: int,
  S1_alloc_table: S1 alloc_table, int_P_alloc_table: int_P alloc_table,
  S1_a1: (S1, int_P pointer) memory) =
  ((offset_max(S1_alloc_table, p) >= b) and
   right_valid_struct_int_P(select(S1_a1, p), 0, int_P_alloc_table))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table) =
  ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate strict_valid_root_S0(p: S0 pointer, a: int, b: int,
  S0_alloc_table: S0 alloc_table) =
  ((offset_min(S0_alloc_table, p) = a) and (offset_max(S0_alloc_table,
   p) = b))

predicate strict_valid_root_S1(p: S1 pointer, a: int, b: int,
  S1_alloc_table: S1 alloc_table) =
  ((offset_min(S1_alloc_table, p) = a) and (offset_max(S1_alloc_table,
   p) = b))

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_struct_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table, int_P_alloc_table: int_P alloc_table,
  S_a: (S, int_P pointer) memory) =
  ((offset_min(S_alloc_table, p) = a) and
   ((offset_max(S_alloc_table, p) = b) and
    strict_valid_struct_int_P(select(S_a, p), 0, (-1), int_P_alloc_table)))

predicate strict_valid_struct_S0(p: S0 pointer, a: int, b: int,
  S0_alloc_table: S0 alloc_table, int_P_alloc_table: int_P alloc_table,
  S0_a0: (S0, int_P pointer) memory) =
  ((offset_min(S0_alloc_table, p) = a) and
   ((offset_max(S0_alloc_table, p) = b) and
    strict_valid_struct_int_P(select(S0_a0, p), 0, (-1), int_P_alloc_table)))

predicate strict_valid_struct_S1(p: S1 pointer, a: int, b: int,
  S1_alloc_table: S1 alloc_table, int_P_alloc_table: int_P alloc_table,
  S1_a1: (S1, int_P pointer) memory) =
  ((offset_min(S1_alloc_table, p) = a) and
   ((offset_max(S1_alloc_table, p) = b) and
    strict_valid_struct_int_P(select(S1_a1, p), 0, 0, int_P_alloc_table)))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_S(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_S0(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_S1(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table) =
  ((offset_min(S_alloc_table, p) <= a) and (offset_max(S_alloc_table,
   p) >= b))

predicate valid_root_S0(p: S0 pointer, a: int, b: int,
  S0_alloc_table: S0 alloc_table) =
  ((offset_min(S0_alloc_table, p) <= a) and (offset_max(S0_alloc_table,
   p) >= b))

predicate valid_root_S1(p: S1 pointer, a: int, b: int,
  S1_alloc_table: S1 alloc_table) =
  ((offset_min(S1_alloc_table, p) <= a) and (offset_max(S1_alloc_table,
   p) >= b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_struct_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table, int_P_alloc_table: int_P alloc_table,
  S_a: (S, int_P pointer) memory) =
  ((offset_min(S_alloc_table, p) <= a) and
   ((offset_max(S_alloc_table, p) >= b) and valid_struct_int_P(select(S_a,
    p), 0, (-1), int_P_alloc_table)))

predicate valid_struct_S0(p: S0 pointer, a: int, b: int,
  S0_alloc_table: S0 alloc_table, int_P_alloc_table: int_P alloc_table,
  S0_a0: (S0, int_P pointer) memory) =
  ((offset_min(S0_alloc_table, p) <= a) and
   ((offset_max(S0_alloc_table, p) >= b) and valid_struct_int_P(select(S0_a0,
    p), 0, (-1), int_P_alloc_table)))

predicate valid_struct_S1(p: S1 pointer, a: int, b: int,
  S1_alloc_table: S1 alloc_table, int_P_alloc_table: int_P alloc_table,
  S1_a1: (S1, int_P pointer) memory) =
  ((offset_min(S1_alloc_table, p) <= a) and
   ((offset_max(S1_alloc_table, p) >= b) and valid_struct_int_P(select(S1_a1,
    p), 0, 0, int_P_alloc_table)))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag :  -> void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_bitvector_of_bitvector_of_void_P:
  (forall x:void_P pointer.
    (void_P_of_bitvector(bitvector_of_void_P(x)) = x))

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

