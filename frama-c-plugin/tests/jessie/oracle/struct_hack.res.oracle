Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only struct_hack.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD struct_hack.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir struct_hack.jessie
[jessie] File struct_hack.jessie/struct_hack.jc written.
[jessie] File struct_hack.jessie/struct_hack.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

tag S = {
  int32 i: 32; 
  intP[0..-1] a: 0;
}

type S = [S]

tag S0 = {
  int32 i0: 32; 
  intP[0..-1] a0: 0;
}

type S0 = [S0]

tag S1 = {
  int32 i1: 32; 
  intP[0] a1: 32;
}

type S1 = [S1]

unit f(S[0] v_s)
  requires (C_23 : ((C_24 : (v_s.i >= 0)) &&
                     ((C_26 : (\offset_min(v_s.a) <= 0)) &&
                       (C_27 : (\offset_max(v_s.a) >= (v_s.i - 1))))));
behavior default:
  ensures (C_22 : true);
{  
   (var S[0] s);
   
   (var int32 j);
   
   {  (C_2 : (s = (C_1 : (new S[1]))));
      (C_5 : ((C_4 : s.i) = (C_3 : v_s.i)));
      (C_6 : (j = 0));
      
      loop 
      behavior default:
        invariant (C_8 : (((C_10 : (0 <= j)) && (C_11 : (j <= v_s.i))) &&
                           (C_12 : (\forall int32 k;
                                     (((0 <= k) && (k < j)) ==>
                                       ((v_s.a + k).intM == 0))))));
      variant (C_7 : (v_s.i - j));
      while (true)
      {  
         {  (if (j < (C_13 : s.i)) then () else 
            (goto while_0_break));
            (C_16 : ((C_15 : ((C_14 : s.a) + j).intM) = 0));
            (C_19 : (j = (C_18 : ((C_17 : (j + 1)) :> int32))))
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (C_20 : (\forall int32 k_0;
                                        (((0 <= k_0) && (k_0 < v_s.i)) ==>
                                          ((v_s.a + k_0).intM == 0)))));
         ()
      };
      
      {  (C_21 : (free(s)));
         
         (return ())
      }
   }
}

unit f0(S0[0] v_s_0)
  requires (C_50 : ((C_51 : (v_s_0.i0 >= 0)) &&
                     ((C_53 : (\offset_min(v_s_0.a0) <= 0)) &&
                       (C_54 : (\offset_max(v_s_0.a0) >= (v_s_0.i0 - 1))))));
behavior default:
  ensures (C_49 : true);
{  
   (var S0[0] s_0);
   
   (var int32 j_0);
   
   {  (C_29 : (s_0 = (C_28 : (new S0[1]))));
      (C_32 : ((C_31 : s_0.i0) = (C_30 : v_s_0.i0)));
      (C_33 : (j_0 = 0));
      
      loop 
      behavior default:
        invariant (C_35 : (((C_37 : (0 <= j_0)) &&
                             (C_38 : (j_0 <= v_s_0.i0))) &&
                            (C_39 : (\forall int32 k_1;
                                      (((0 <= k_1) && (k_1 < j_0)) ==>
                                        ((v_s_0.a0 + k_1).intM == 0))))));
      variant (C_34 : (v_s_0.i0 - j_0));
      while (true)
      {  
         {  (if (j_0 < (C_40 : s_0.i0)) then () else 
            (goto while_0_break));
            (C_43 : ((C_42 : ((C_41 : s_0.a0) + j_0).intM) = 0));
            (C_46 : (j_0 = (C_45 : ((C_44 : (j_0 + 1)) :> int32))))
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (C_47 : (\forall int32 k_2;
                                        (((0 <= k_2) && (k_2 < v_s_0.i0)) ==>
                                          ((v_s_0.a0 + k_2).intM == 0)))));
         ()
      };
      
      {  (C_48 : (free(s_0)));
         
         (return ())
      }
   }
}

unit f1(S1[0] v_s_1)
  requires (C_82 : ((C_83 : (v_s_1.i1 >= 0)) &&
                     ((C_85 : (\offset_min(v_s_1.a1) <= 0)) &&
                       (C_86 : (\offset_max(v_s_1.a1) >= (v_s_1.i1 - 1))))));
behavior default:
  ensures (C_81 : true);
{  
   (var S1[0] s_1);
   
   (var int32 j_1);
   
   {  (C_56 : (s_1 = (C_55 : (new S1[1]))));
      
      {  (C_59 : ((C_58 : s_1.i1) = (C_57 : v_s_1.i1)));
         (C_64 : ((C_63 : ((C_62 : s_1.a1) + 0).intM) = (C_61 : ((C_60 : v_s_1.a1) +
                                                                  0).intM)))
      };
      (C_65 : (j_1 = 0));
      
      loop 
      behavior default:
        invariant (C_67 : (((C_69 : (0 <= j_1)) &&
                             (C_70 : (j_1 <= v_s_1.i1))) &&
                            (C_71 : (\forall int32 k_3;
                                      (((0 <= k_3) && (k_3 < j_1)) ==>
                                        ((v_s_1.a1 + k_3).intM == 0))))));
      variant (C_66 : (v_s_1.i1 - j_1));
      while (true)
      {  
         {  (if (j_1 < (C_72 : s_1.i1)) then () else 
            (goto while_0_break));
            (C_75 : ((C_74 : ((C_73 : s_1.a1) + j_1).intM) = 0));
            (C_78 : (j_1 = (C_77 : ((C_76 : (j_1 + 1)) :> int32))))
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (C_79 : (\forall int32 k_4;
                                        (((0 <= k_4) && (k_4 < v_s_1.i1)) ==>
                                          ((v_s_1.a1 + k_4).intM == 0)))));
         ()
      };
      
      {  (C_80 : (free(s_1)));
         
         (return ())
      }
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs struct_hack.jessie/struct_hack.cloc struct_hack.jessie/struct_hack.jc
type S

type S0

type S1

type charP

type int32

type int8

type intP

type padding

type voidP

logic S0_tag:  -> S0 tag_id

axiom S0_int : (int_of_tag(S0_tag) = (1))

logic S0_of_pointer_address: unit pointer -> S0 pointer

axiom S0_of_pointer_address_of_pointer_addr :
 (forall p:S0 pointer. (p = S0_of_pointer_address(pointer_address(p))))

axiom S0_parenttag_bottom : parenttag(S0_tag, bottom_tag)

axiom S0_tags :
 (forall x:S0 pointer.
  (forall S0_tag_table:S0 tag_table. instanceof(S0_tag_table, x, S0_tag)))

logic S1_tag:  -> S1 tag_id

axiom S1_int : (int_of_tag(S1_tag) = (1))

logic S1_of_pointer_address: unit pointer -> S1 pointer

axiom S1_of_pointer_address_of_pointer_addr :
 (forall p:S1 pointer. (p = S1_of_pointer_address(pointer_address(p))))

axiom S1_parenttag_bottom : parenttag(S1_tag, bottom_tag)

axiom S1_tags :
 (forall x:S1 pointer.
  (forall S1_tag_table:S1 tag_table. instanceof(S1_tag_table, x, S1_tag)))

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

logic S_of_pointer_address: unit pointer -> S pointer

axiom S_of_pointer_address_of_pointer_addr :
 (forall p:S pointer. (p = S_of_pointer_address(pointer_address(p))))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_S(p:S pointer, a:int,
 S_alloc_table:S alloc_table, intP_alloc_table:intP alloc_table,
 S_a:(S, intP pointer) memory) =
 ((offset_min(S_alloc_table, p) <= a)
 and left_valid_struct_intP(select(S_a, p), (0), intP_alloc_table))

predicate left_valid_struct_S0(p:S0 pointer, a:int,
 S0_alloc_table:S0 alloc_table, intP_alloc_table:intP alloc_table,
 S0_a0:(S0, intP pointer) memory) =
 ((offset_min(S0_alloc_table, p) <= a)
 and left_valid_struct_intP(select(S0_a0, p), (0), intP_alloc_table))

predicate left_valid_struct_S1(p:S1 pointer, a:int,
 S1_alloc_table:S1 alloc_table, intP_alloc_table:intP alloc_table,
 S1_a1:(S1, intP pointer) memory) =
 ((offset_min(S1_alloc_table, p) <= a)
 and left_valid_struct_intP(select(S1_a1, p), (0), intP_alloc_table))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_S0_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(S0_of_pointer_address(p))))

axiom pointer_addr_of_S1_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(S1_of_pointer_address(p))))

axiom pointer_addr_of_S_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(S_of_pointer_address(p))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_S(p:S pointer, b:int,
 S_alloc_table:S alloc_table, intP_alloc_table:intP alloc_table,
 S_a:(S, intP pointer) memory) =
 ((offset_max(S_alloc_table, p) >= b)
 and right_valid_struct_intP(select(S_a, p), (-1), intP_alloc_table))

predicate right_valid_struct_S0(p:S0 pointer, b:int,
 S0_alloc_table:S0 alloc_table, intP_alloc_table:intP alloc_table,
 S0_a0:(S0, intP pointer) memory) =
 ((offset_max(S0_alloc_table, p) >= b)
 and right_valid_struct_intP(select(S0_a0, p), (-1), intP_alloc_table))

predicate right_valid_struct_S1(p:S1 pointer, b:int,
 S1_alloc_table:S1 alloc_table, intP_alloc_table:intP alloc_table,
 S1_a1:(S1, intP pointer) memory) =
 ((offset_max(S1_alloc_table, p) >= b)
 and right_valid_struct_intP(select(S1_a1, p), (0), intP_alloc_table))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_S(p:S pointer, a:int, b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate strict_valid_root_S0(p:S0 pointer, a:int, b:int,
 S0_alloc_table:S0 alloc_table) =
 ((offset_min(S0_alloc_table, p) = a)
 and (offset_max(S0_alloc_table, p) = b))

predicate strict_valid_root_S1(p:S1 pointer, a:int, b:int,
 S1_alloc_table:S1 alloc_table) =
 ((offset_min(S1_alloc_table, p) = a)
 and (offset_max(S1_alloc_table, p) = b))

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_S(p:S pointer, a:int, b:int,
 S_alloc_table:S alloc_table, intP_alloc_table:intP alloc_table,
 S_a:(S, intP pointer) memory) =
 ((offset_min(S_alloc_table, p) = a)
 and ((offset_max(S_alloc_table, p) = b)
     and strict_valid_struct_intP(select(S_a, p), (0), (-1),
         intP_alloc_table)))

predicate strict_valid_struct_S0(p:S0 pointer, a:int, b:int,
 S0_alloc_table:S0 alloc_table, intP_alloc_table:intP alloc_table,
 S0_a0:(S0, intP pointer) memory) =
 ((offset_min(S0_alloc_table, p) = a)
 and ((offset_max(S0_alloc_table, p) = b)
     and strict_valid_struct_intP(select(S0_a0, p), (0), (-1),
         intP_alloc_table)))

predicate strict_valid_struct_S1(p:S1 pointer, a:int, b:int,
 S1_alloc_table:S1 alloc_table, intP_alloc_table:intP alloc_table,
 S1_a1:(S1, intP pointer) memory) =
 ((offset_min(S1_alloc_table, p) = a)
 and ((offset_max(S1_alloc_table, p) = b)
     and strict_valid_struct_intP(select(S1_a1, p), (0), (0),
         intP_alloc_table)))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate valid_root_S(p:S pointer, a:int, b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) <= a)
 and (offset_max(S_alloc_table, p) >= b))

predicate valid_root_S0(p:S0 pointer, a:int, b:int,
 S0_alloc_table:S0 alloc_table) =
 ((offset_min(S0_alloc_table, p) <= a)
 and (offset_max(S0_alloc_table, p) >= b))

predicate valid_root_S1(p:S1 pointer, a:int, b:int,
 S1_alloc_table:S1 alloc_table) =
 ((offset_min(S1_alloc_table, p) <= a)
 and (offset_max(S1_alloc_table, p) >= b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_S(p:S pointer, a:int, b:int,
 S_alloc_table:S alloc_table, intP_alloc_table:intP alloc_table,
 S_a:(S, intP pointer) memory) =
 ((offset_min(S_alloc_table, p) <= a)
 and ((offset_max(S_alloc_table, p) >= b)
     and valid_struct_intP(select(S_a, p), (0), (-1), intP_alloc_table)))

predicate valid_struct_S0(p:S0 pointer, a:int, b:int,
 S0_alloc_table:S0 alloc_table, intP_alloc_table:intP alloc_table,
 S0_a0:(S0, intP pointer) memory) =
 ((offset_min(S0_alloc_table, p) <= a)
 and ((offset_max(S0_alloc_table, p) >= b)
     and valid_struct_intP(select(S0_a0, p), (0), (-1), intP_alloc_table)))

predicate valid_struct_S1(p:S1 pointer, a:int, b:int,
 S1_alloc_table:S1 alloc_table, intP_alloc_table:intP alloc_table,
 S1_a1:(S1, intP pointer) memory) =
 ((offset_min(S1_alloc_table, p) <= a)
 and ((offset_max(S1_alloc_table, p) >= b)
     and valid_struct_intP(select(S1_a1, p), (0), (0), intP_alloc_table)))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter S0_alloc_table : S0 alloc_table ref

parameter S0_tag_table : S0 tag_table ref

parameter S1_alloc_table : S1 alloc_table ref

parameter S1_tag_table : S1 tag_table ref

parameter S_alloc_table : S alloc_table ref

parameter S_tag_table : S tag_table ref

parameter intP_alloc_table : intP alloc_table ref

parameter alloc_struct_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   intP_alloc_table:intP alloc_table ref ->
    S_tag_table:S tag_table ref ->
     S_a:(S, intP pointer) memory ->
      { } S pointer writes S_alloc_table,S_tag_table,intP_alloc_table
      { (strict_valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table,
         intP_alloc_table, S_a)
        and (alloc_extends(S_alloc_table@, S_alloc_table)
            and (alloc_fresh(S_alloc_table@, result, n)
                and instanceof(S_tag_table, result, S_tag)))) }

parameter alloc_struct_S0 :
 n:int ->
  S0_alloc_table:S0 alloc_table ref ->
   intP_alloc_table:intP alloc_table ref ->
    S0_tag_table:S0 tag_table ref ->
     S0_a0:(S0, intP pointer) memory ->
      { } S0 pointer writes S0_alloc_table,S0_tag_table,intP_alloc_table
      { (strict_valid_struct_S0(result, (0), sub_int(n, (1)), S0_alloc_table,
         intP_alloc_table, S0_a0)
        and (alloc_extends(S0_alloc_table@, S0_alloc_table)
            and (alloc_fresh(S0_alloc_table@, result, n)
                and instanceof(S0_tag_table, result, S0_tag)))) }

parameter alloc_struct_S0_requires :
 n:int ->
  S0_alloc_table:S0 alloc_table ref ->
   intP_alloc_table:intP alloc_table ref ->
    S0_tag_table:S0 tag_table ref ->
     S0_a0:(S0, intP pointer) memory ->
      { ge_int(n, (0))} S0 pointer
      writes S0_alloc_table,S0_tag_table,intP_alloc_table
      { (strict_valid_struct_S0(result, (0), sub_int(n, (1)), S0_alloc_table,
         intP_alloc_table, S0_a0)
        and (alloc_extends(S0_alloc_table@, S0_alloc_table)
            and (alloc_fresh(S0_alloc_table@, result, n)
                and instanceof(S0_tag_table, result, S0_tag)))) }

parameter alloc_struct_S1 :
 n:int ->
  S1_alloc_table:S1 alloc_table ref ->
   intP_alloc_table:intP alloc_table ref ->
    S1_tag_table:S1 tag_table ref ->
     S1_a1:(S1, intP pointer) memory ->
      { } S1 pointer writes S1_alloc_table,S1_tag_table,intP_alloc_table
      { (strict_valid_struct_S1(result, (0), sub_int(n, (1)), S1_alloc_table,
         intP_alloc_table, S1_a1)
        and (alloc_extends(S1_alloc_table@, S1_alloc_table)
            and (alloc_fresh(S1_alloc_table@, result, n)
                and instanceof(S1_tag_table, result, S1_tag)))) }

parameter alloc_struct_S1_requires :
 n:int ->
  S1_alloc_table:S1 alloc_table ref ->
   intP_alloc_table:intP alloc_table ref ->
    S1_tag_table:S1 tag_table ref ->
     S1_a1:(S1, intP pointer) memory ->
      { ge_int(n, (0))} S1 pointer
      writes S1_alloc_table,S1_tag_table,intP_alloc_table
      { (strict_valid_struct_S1(result, (0), sub_int(n, (1)), S1_alloc_table,
         intP_alloc_table, S1_a1)
        and (alloc_extends(S1_alloc_table@, S1_alloc_table)
            and (alloc_fresh(S1_alloc_table@, result, n)
                and instanceof(S1_tag_table, result, S1_tag)))) }

parameter alloc_struct_S_requires :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   intP_alloc_table:intP alloc_table ref ->
    S_tag_table:S tag_table ref ->
     S_a:(S, intP pointer) memory ->
      { ge_int(n, (0))} S pointer
      writes S_alloc_table,S_tag_table,intP_alloc_table
      { (strict_valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table,
         intP_alloc_table, S_a)
        and (alloc_extends(S_alloc_table@, S_alloc_table)
            and (alloc_fresh(S_alloc_table@, result, n)
                and instanceof(S_tag_table, result, S_tag)))) }

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter f :
 v_s:S pointer ->
  intP_v_s_1_alloc_table:intP alloc_table ->
   S_v_s_1_alloc_table:S alloc_table ->
    S_a_v_s_1:(S, intP pointer) memory ->
     S_i_v_s_1:(S, int32) memory ->
      intP_intM_v_s_1:(intP, int32) memory -> { } unit { true }

parameter f0 :
 v_s_0:S0 pointer ->
  intP_v_s_0_2_alloc_table:intP alloc_table ->
   S0_v_s_0_2_alloc_table:S0 alloc_table ->
    S0_a0_v_s_0_2:(S0, intP pointer) memory ->
     S0_i0_v_s_0_2:(S0, int32) memory ->
      intP_intM_v_s_0_2:(intP, int32) memory -> { } unit { true }

parameter f0_requires :
 v_s_0:S0 pointer ->
  intP_v_s_0_2_alloc_table:intP alloc_table ->
   S0_v_s_0_2_alloc_table:S0 alloc_table ->
    S0_a0_v_s_0_2:(S0, intP pointer) memory ->
     S0_i0_v_s_0_2:(S0, int32) memory ->
      intP_intM_v_s_0_2:(intP, int32) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          ge_int(integer_of_int32(select(S0_i0_v_s_0_2, v_s_0)), (0)))
         and ((JC_<somenum>:
              le_int(offset_min(intP_v_s_0_2_alloc_table,
                     select(S0_a0_v_s_0_2, v_s_0)),
              (0)))
             and (JC_<somenum>:
                 ge_int(offset_max(intP_v_s_0_2_alloc_table,
                        select(S0_a0_v_s_0_2, v_s_0)),
                 sub_int(integer_of_int32(select(S0_i0_v_s_0_2, v_s_0)), (1)))))))}
       unit { true }

parameter f1 :
 v_s_1:S1 pointer ->
  intP_v_s_1_3_alloc_table:intP alloc_table ->
   S1_v_s_1_3_alloc_table:S1 alloc_table ->
    S1_a1_v_s_1_3:(S1, intP pointer) memory ->
     S1_i1_v_s_1_3:(S1, int32) memory ->
      intP_intM_v_s_1_3:(intP, int32) memory -> { } unit { true }

parameter f1_requires :
 v_s_1:S1 pointer ->
  intP_v_s_1_3_alloc_table:intP alloc_table ->
   S1_v_s_1_3_alloc_table:S1 alloc_table ->
    S1_a1_v_s_1_3:(S1, intP pointer) memory ->
     S1_i1_v_s_1_3:(S1, int32) memory ->
      intP_intM_v_s_1_3:(intP, int32) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>:
          ge_int(integer_of_int32(select(S1_i1_v_s_1_3, v_s_1)), (0)))
         and ((JC_<somenum>:
              le_int(offset_min(intP_v_s_1_3_alloc_table,
                     select(S1_a1_v_s_1_3, v_s_1)),
              (0)))
             and (JC_<somenum>:
                 ge_int(offset_max(intP_v_s_1_3_alloc_table,
                        select(S1_a1_v_s_1_3, v_s_1)),
                 sub_int(integer_of_int32(select(S1_i1_v_s_1_3, v_s_1)), (1)))))))}
       unit { true }

parameter f_requires :
 v_s:S pointer ->
  intP_v_s_1_alloc_table:intP alloc_table ->
   S_v_s_1_alloc_table:S alloc_table ->
    S_a_v_s_1:(S, intP pointer) memory ->
     S_i_v_s_1:(S, int32) memory ->
      intP_intM_v_s_1:(intP, int32) memory ->
       { (JC_<somenum>:
         ((JC_<somenum>: ge_int(integer_of_int32(select(S_i_v_s_1, v_s)), (0)))
         and ((JC_<somenum>:
              le_int(offset_min(intP_v_s_1_alloc_table,
                     select(S_a_v_s_1, v_s)),
              (0)))
             and (JC_<somenum>:
                 ge_int(offset_max(intP_v_s_1_alloc_table,
                        select(S_a_v_s_1, v_s)),
                 sub_int(integer_of_int32(select(S_i_v_s_1, v_s)), (1)))))))}
       unit { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let f0_ensures_default =
 fun (v_s_0 : S0 pointer) (S0_v_s_0_2_alloc_table : S0 alloc_table) (intP_v_s_0_2_alloc_table : intP alloc_table) (intP_intM_v_s_0_2 : (intP, int32) memory) (S0_i0_v_s_0_2 : (S0, int32) memory) (S0_a0_v_s_0_2 : (S0, intP pointer) memory) ->
  { (valid_struct_S0(v_s_0, (0), (0), S0_v_s_0_2_alloc_table,
     intP_v_s_0_2_alloc_table, S0_a0_v_s_0_2)
    and (JC_<somenum>:
        ((JC_<somenum>: ge_int(integer_of_int32(select(S0_i0_v_s_0_2, v_s_0)), (0)))
        and ((JC_<somenum>:
             le_int(offset_min(intP_v_s_0_2_alloc_table,
                    select(S0_a0_v_s_0_2, v_s_0)),
             (0)))
            and (JC_<somenum>:
                ge_int(offset_max(intP_v_s_0_2_alloc_table,
                       select(S0_a0_v_s_0_2, v_s_0)),
                sub_int(integer_of_int32(select(S0_i0_v_s_0_2, v_s_0)), (1)))))))) }
  (init:
  try
   begin
     (let S0_a0_s_0_6 = ref (any_memory void) in
     (let S0_i0_s_0_6 = ref (any_memory void) in
     (let intP_intM_s_0_6 = ref (any_memory void) in
     (let S0_s_0_6_tag_table = ref (any_tag_table void) in
     (let intP_s_0_6_tag_table = ref (any_tag_table void) in
     (let intP_s_0_6_alloc_table = ref (any_alloc_table void) in
     (let S0_s_0_6_alloc_table = ref (any_alloc_table void) in
     (let s_0_0 = ref (any_pointer void) in
     (let j_0 = ref (any_int32 void) in
     try
      (C_29:
      (C_32:
      (C_33:
      begin
        (let jessie_<somenum> =
        (s_0_0 := (C_28:
                  (JC_<somenum>:
                  (((((alloc_struct_S0 (1)) S0_s_0_6_alloc_table) intP_s_0_6_alloc_table) S0_s_0_6_tag_table) !S0_a0_s_0_6)))) in
        void);
       (let jessie_<somenum> = (C_30: ((safe_acc_ S0_i0_v_s_0_2) v_s_0)) in
       (let jessie_<somenum> = !s_0_0 in
       (((safe_upd_ S0_i0_s_0_6) jessie_<somenum>) jessie_<somenum>)));
       (let jessie_<somenum> = (j_0 := (safe_int32_of_integer_ (0))) in void);
       (loop_4:
       while true do
       { invariant
           (JC_<somenum>:
           ((JC_<somenum>: le_int((0), integer_of_int32(j_0)))
           and ((JC_<somenum>:
                le_int(integer_of_int32(j_0),
                integer_of_int32(select(S0_i0_v_s_0_2, v_s_0))))
               and (JC_<somenum>:
                   (forall k_1:int32.
                    ((le_int((0), integer_of_int32(k_1))
                     and lt_int(integer_of_int32(k_1), integer_of_int32(j_0))) ->
                     (integer_of_int32(select(intP_intM_v_s_0_2,
                                       shift(select(S0_a0_v_s_0_2, v_s_0),
                                       integer_of_int32(k_1)))) = (0))))))))
          }
        begin
          [ { } unit { true } ];
         try
          begin
            (let jessie_<somenum> =
            (C_43:
            (C_46:
            begin
              (if ((lt_int_ (integer_of_int32 !j_0)) (integer_of_int32 
                                                      (C_40:
                                                      ((safe_acc_ !S0_i0_s_0_6) !s_0_0))))
              then void else (raise (Goto_while_0_break_exc void)));
             (let jessie_<somenum> =
             (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
             (let jessie_<somenum> = (C_41: ((safe_acc_ !S0_a0_s_0_6) !s_0_0)) in
             (let jessie_<somenum> = (integer_of_int32 !j_0) in
             (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
             (((safe_upd_ intP_intM_s_0_6) jessie_<somenum>) jessie_<somenum>))))) in void);
             (j_0 := (C_45:
                     (safe_int32_of_integer_ (C_44:
                                             ((add_int (integer_of_int32 !j_0)) (1))))));
             !j_0 end)) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<somenum> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end))) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_48:
      begin
        void;
       (assert
       { (JC_<somenum>:
         (forall k_2:int32.
          ((le_int((0), integer_of_int32(k_2))
           and lt_int(integer_of_int32(k_2),
               integer_of_int32(select(S0_i0_v_s_0_2, v_s_0)))) ->
           (integer_of_int32(select(intP_intM_v_s_0_2,
                             shift(select(S0_a0_v_s_0_2, v_s_0),
                             integer_of_int32(k_2)))) = (0))))) }; void);
       void; ((safe_free_parameter S0_s_0_6_alloc_table) !s_0_0);
       (raise Return) end)) end))))))))); (raise Return) end with Return ->
   void end) { (JC_<somenum>: true) }

let f0_safety =
 fun (v_s_0 : S0 pointer) (S0_v_s_0_2_alloc_table : S0 alloc_table) (intP_v_s_0_2_alloc_table : intP alloc_table) (intP_intM_v_s_0_2 : (intP, int32) memory) (S0_i0_v_s_0_2 : (S0, int32) memory) (S0_a0_v_s_0_2 : (S0, intP pointer) memory) ->
  { (valid_struct_S0(v_s_0, (0), (0), S0_v_s_0_2_alloc_table,
     intP_v_s_0_2_alloc_table, S0_a0_v_s_0_2)
    and (JC_<somenum>:
        ((JC_<somenum>: ge_int(integer_of_int32(select(S0_i0_v_s_0_2, v_s_0)), (0)))
        and ((JC_<somenum>:
             le_int(offset_min(intP_v_s_0_2_alloc_table,
                    select(S0_a0_v_s_0_2, v_s_0)),
             (0)))
            and (JC_<somenum>:
                ge_int(offset_max(intP_v_s_0_2_alloc_table,
                       select(S0_a0_v_s_0_2, v_s_0)),
                sub_int(integer_of_int32(select(S0_i0_v_s_0_2, v_s_0)), (1)))))))) }
  (init:
  try
   begin
     (let S0_a0_s_0_6 = ref (any_memory void) in
     (let S0_i0_s_0_6 = ref (any_memory void) in
     (let intP_intM_s_0_6 = ref (any_memory void) in
     (let S0_s_0_6_tag_table = ref (any_tag_table void) in
     (let intP_s_0_6_tag_table = ref (any_tag_table void) in
     (let intP_s_0_6_alloc_table = ref (any_alloc_table void) in
     (let S0_s_0_6_alloc_table = ref (any_alloc_table void) in
     (let s_0_0 = ref (any_pointer void) in
     (let j_0 = ref (any_int32 void) in
     try
      (C_29:
      (C_32:
      (C_33:
      begin
        (let jessie_<somenum> =
        (s_0_0 := (let jessie_<somenum> =
                  (C_28:
                  (JC_<somenum>:
                  (((((alloc_struct_S0_requires (1)) S0_s_0_6_alloc_table) intP_s_0_6_alloc_table) S0_s_0_6_tag_table) !S0_a0_s_0_6))) in
                  (JC_<somenum>:
                  (assert
                  { ge_int(offset_max(S0_s_0_6_alloc_table, jessie_<somenum>), (0)) };
                  jessie_<somenum>)))) in void);
       (let jessie_<somenum> = (C_30: ((safe_acc_ S0_i0_v_s_0_2) v_s_0)) in
       (let jessie_<somenum> = !s_0_0 in
       (((safe_upd_ S0_i0_s_0_6) jessie_<somenum>) jessie_<somenum>)));
       (let jessie_<somenum> = (j_0 := (safe_int32_of_integer_ (0))) in void);
       (loop_3:
       while true do
       { invariant (JC_<somenum>: true)
         variant (JC_<somenum> : sub_int(integer_of_int32(select(S0_i0_v_s_0_2,
                                                   v_s_0)),
                          integer_of_int32(j_0))) }
        begin
          [ { } unit reads j_0
            { (JC_<somenum>:
              ((JC_<somenum>: le_int((0), integer_of_int32(j_0)))
              and ((JC_<somenum>:
                   le_int(integer_of_int32(j_0),
                   integer_of_int32(select(S0_i0_v_s_0_2, v_s_0))))
                  and (JC_<somenum>:
                      (forall k_1:int32.
                       ((le_int((0), integer_of_int32(k_1))
                        and lt_int(integer_of_int32(k_1),
                            integer_of_int32(j_0))) ->
                        (integer_of_int32(select(intP_intM_v_s_0_2,
                                          shift(select(S0_a0_v_s_0_2, v_s_0),
                                          integer_of_int32(k_1)))) = (0)))))))) } ];
         try
          begin
            (let jessie_<somenum> =
            (C_43:
            (C_46:
            begin
              (if ((lt_int_ (integer_of_int32 !j_0)) (integer_of_int32 
                                                      (C_40:
                                                      ((safe_acc_ !S0_i0_s_0_6) !s_0_0))))
              then void else (raise (Goto_while_0_break_exc void)));
             (let jessie_<somenum> =
             (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
             (let jessie_<somenum> = (C_41: ((safe_acc_ !S0_a0_s_0_6) !s_0_0)) in
             (let jessie_<somenum> = (integer_of_int32 !j_0) in
             (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
             (JC_<somenum>:
             (((((offset_upd_ !intP_s_0_6_alloc_table) intP_intM_s_0_6) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
             void);
             (j_0 := (C_45:
                     (JC_<somenum>:
                     (int32_of_integer_ (C_44:
                                        ((add_int (integer_of_int32 !j_0)) (1)))))));
             !j_0 end)) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<somenum> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end))) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_48:
      begin
        void;
       [ { } unit
         { (JC_<somenum>:
           (forall k_2:int32.
            ((le_int((0), integer_of_int32(k_2))
             and lt_int(integer_of_int32(k_2),
                 integer_of_int32(select(S0_i0_v_s_0_2, v_s_0)))) ->
             (integer_of_int32(select(intP_intM_v_s_0_2,
                               shift(select(S0_a0_v_s_0_2, v_s_0),
                               integer_of_int32(k_2)))) = (0))))) } ]; void;
       ((free_parameter S0_s_0_6_alloc_table) !s_0_0); (raise Return) end)) end)))))))));
    (raise Return) end with Return -> void end) { true }

let f1_ensures_default =
 fun (v_s_1 : S1 pointer) (S1_v_s_1_3_alloc_table : S1 alloc_table) (intP_v_s_1_3_alloc_table : intP alloc_table) (intP_intM_v_s_1_3 : (intP, int32) memory) (S1_i1_v_s_1_3 : (S1, int32) memory) (S1_a1_v_s_1_3 : (S1, intP pointer) memory) ->
  { (valid_struct_S1(v_s_1, (0), (0), S1_v_s_1_3_alloc_table,
     intP_v_s_1_3_alloc_table, S1_a1_v_s_1_3)
    and (JC_<somenum>:
        ((JC_<somenum>: ge_int(integer_of_int32(select(S1_i1_v_s_1_3, v_s_1)), (0)))
        and ((JC_<somenum>:
             le_int(offset_min(intP_v_s_1_3_alloc_table,
                    select(S1_a1_v_s_1_3, v_s_1)),
             (0)))
            and (JC_<somenum>:
                ge_int(offset_max(intP_v_s_1_3_alloc_table,
                       select(S1_a1_v_s_1_3, v_s_1)),
                sub_int(integer_of_int32(select(S1_i1_v_s_1_3, v_s_1)), (1)))))))) }
  (init:
  try
   begin
     (let S1_a1_s_1_8 = ref (any_memory void) in
     (let S1_i1_s_1_8 = ref (any_memory void) in
     (let intP_intM_s_1_8 = ref (any_memory void) in
     (let S1_s_1_8_tag_table = ref (any_tag_table void) in
     (let intP_s_1_8_tag_table = ref (any_tag_table void) in
     (let intP_s_1_8_alloc_table = ref (any_alloc_table void) in
     (let S1_s_1_8_alloc_table = ref (any_alloc_table void) in
     (let s_1 = ref (any_pointer void) in
     (let j_1 = ref (any_int32 void) in
     try
      (C_56:
      (C_65:
      begin
        (let jessie_<somenum> =
        (s_1 := (C_55:
                (JC_<somenum>:
                (((((alloc_struct_S1 (1)) S1_s_1_8_alloc_table) intP_s_1_8_alloc_table) S1_s_1_8_tag_table) !S1_a1_s_1_8)))) in
        void);
       (let jessie_<somenum> =
       (C_59:
       begin
         (let jessie_<somenum> = (C_57: ((safe_acc_ S1_i1_v_s_1_3) v_s_1)) in
         (let jessie_<somenum> = !s_1 in
         (((safe_upd_ S1_i1_s_1_8) jessie_<somenum>) jessie_<somenum>)));
        (C_64:
        (let jessie_<somenum> =
        (C_61:
        ((safe_acc_ intP_intM_v_s_1_3) ((shift (C_60:
                                               ((safe_acc_ S1_a1_v_s_1_3) v_s_1))) (0)))) in
        begin
          (let jessie_<somenum> = (C_62: ((safe_acc_ !S1_a1_s_1_8) !s_1)) in
          (((safe_upd_ intP_intM_s_1_8) jessie_<somenum>) jessie_<somenum>)); jessie_<somenum>
        end)) end) in void);
       (let jessie_<somenum> = (j_1 := (safe_int32_of_integer_ (0))) in void);
       (loop_6:
       while true do
       { invariant
           (JC_<somenum>:
           ((JC_<somenum>: le_int((0), integer_of_int32(j_1)))
           and ((JC_<somenum>:
                le_int(integer_of_int32(j_1),
                integer_of_int32(select(S1_i1_v_s_1_3, v_s_1))))
               and (JC_<somenum>:
                   (forall k_3:int32.
                    ((le_int((0), integer_of_int32(k_3))
                     and lt_int(integer_of_int32(k_3), integer_of_int32(j_1))) ->
                     (integer_of_int32(select(intP_intM_v_s_1_3,
                                       shift(select(S1_a1_v_s_1_3, v_s_1),
                                       integer_of_int32(k_3)))) = (0))))))))
          }
        begin
          [ { } unit { true } ];
         try
          begin
            (let jessie_<somenum> =
            (C_75:
            (C_78:
            begin
              (if ((lt_int_ (integer_of_int32 !j_1)) (integer_of_int32 
                                                      (C_72:
                                                      ((safe_acc_ !S1_i1_s_1_8) !s_1))))
              then void else (raise (Goto_while_0_break_exc void)));
             (let jessie_<somenum> =
             (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
             (let jessie_<somenum> = (C_73: ((safe_acc_ !S1_a1_s_1_8) !s_1)) in
             (let jessie_<somenum> = (integer_of_int32 !j_1) in
             (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
             (((safe_upd_ intP_intM_s_1_8) jessie_<somenum>) jessie_<somenum>))))) in
             void);
             (j_1 := (C_77:
                     (safe_int32_of_integer_ (C_76:
                                             ((add_int (integer_of_int32 !j_1)) (1))))));
             !j_1 end)) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<somenum> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_80:
      begin
        void;
       (assert
       { (JC_<somenum>:
         (forall k_4:int32.
          ((le_int((0), integer_of_int32(k_4))
           and lt_int(integer_of_int32(k_4),
               integer_of_int32(select(S1_i1_v_s_1_3, v_s_1)))) ->
           (integer_of_int32(select(intP_intM_v_s_1_3,
                             shift(select(S1_a1_v_s_1_3, v_s_1),
                             integer_of_int32(k_4)))) = (0))))) }; void);
       void; ((safe_free_parameter S1_s_1_8_alloc_table) !s_1);
       (raise Return) end)) end))))))))); (raise Return) end with Return ->
   void end) { (JC_<somenum>: true) }

let f1_safety =
 fun (v_s_1 : S1 pointer) (S1_v_s_1_3_alloc_table : S1 alloc_table) (intP_v_s_1_3_alloc_table : intP alloc_table) (intP_intM_v_s_1_3 : (intP, int32) memory) (S1_i1_v_s_1_3 : (S1, int32) memory) (S1_a1_v_s_1_3 : (S1, intP pointer) memory) ->
  { (valid_struct_S1(v_s_1, (0), (0), S1_v_s_1_3_alloc_table,
     intP_v_s_1_3_alloc_table, S1_a1_v_s_1_3)
    and (JC_<somenum>:
        ((JC_<somenum>: ge_int(integer_of_int32(select(S1_i1_v_s_1_3, v_s_1)), (0)))
        and ((JC_<somenum>:
             le_int(offset_min(intP_v_s_1_3_alloc_table,
                    select(S1_a1_v_s_1_3, v_s_1)),
             (0)))
            and (JC_<somenum>:
                ge_int(offset_max(intP_v_s_1_3_alloc_table,
                       select(S1_a1_v_s_1_3, v_s_1)),
                sub_int(integer_of_int32(select(S1_i1_v_s_1_3, v_s_1)), (1)))))))) }
  (init:
  try
   begin
     (let S1_a1_s_1_8 = ref (any_memory void) in
     (let S1_i1_s_1_8 = ref (any_memory void) in
     (let intP_intM_s_1_8 = ref (any_memory void) in
     (let S1_s_1_8_tag_table = ref (any_tag_table void) in
     (let intP_s_1_8_tag_table = ref (any_tag_table void) in
     (let intP_s_1_8_alloc_table = ref (any_alloc_table void) in
     (let S1_s_1_8_alloc_table = ref (any_alloc_table void) in
     (let s_1 = ref (any_pointer void) in
     (let j_1 = ref (any_int32 void) in
     try
      (C_56:
      (C_65:
      begin
        (let jessie_<somenum> =
        (s_1 := (let jessie_<somenum> =
                (C_55:
                (JC_<somenum>:
                (((((alloc_struct_S1_requires (1)) S1_s_1_8_alloc_table) intP_s_1_8_alloc_table) S1_s_1_8_tag_table) !S1_a1_s_1_8))) in
                (JC_<somenum>:
                (assert
                { ge_int(offset_max(S1_s_1_8_alloc_table, jessie_<somenum>), (0)) };
                jessie_<somenum>)))) in void);
       (let jessie_<somenum> =
       (C_59:
       begin
         (let jessie_<somenum> = (C_57: ((safe_acc_ S1_i1_v_s_1_3) v_s_1)) in
         (let jessie_<somenum> = !s_1 in
         (((safe_upd_ S1_i1_s_1_8) jessie_<somenum>) jessie_<somenum>)));
        (C_64:
        (let jessie_<somenum> =
        (C_61:
        ((safe_acc_ intP_intM_v_s_1_3) ((shift (C_60:
                                               ((safe_acc_ S1_a1_v_s_1_3) v_s_1))) (0)))) in
        begin
          (let jessie_<somenum> = (C_62: ((safe_acc_ !S1_a1_s_1_8) !s_1)) in
          (((safe_upd_ intP_intM_s_1_8) jessie_<somenum>) jessie_<somenum>)); jessie_<somenum> end))
       end) in void);
       (let jessie_<somenum> = (j_1 := (safe_int32_of_integer_ (0))) in void);
       (loop_5:
       while true do
       { invariant (JC_<somenum>: true)
         variant (JC_<somenum> : sub_int(integer_of_int32(select(S1_i1_v_s_1_3,
                                                   v_s_1)),
                          integer_of_int32(j_1))) }
        begin
          [ { } unit reads j_1
            { (JC_<somenum>:
              ((JC_<somenum>: le_int((0), integer_of_int32(j_1)))
              and ((JC_<somenum>:
                   le_int(integer_of_int32(j_1),
                   integer_of_int32(select(S1_i1_v_s_1_3, v_s_1))))
                  and (JC_<somenum>:
                      (forall k_3:int32.
                       ((le_int((0), integer_of_int32(k_3))
                        and lt_int(integer_of_int32(k_3),
                            integer_of_int32(j_1))) ->
                        (integer_of_int32(select(intP_intM_v_s_1_3,
                                          shift(select(S1_a1_v_s_1_3, v_s_1),
                                          integer_of_int32(k_3)))) = (0)))))))) } ];
         try
          begin
            (let jessie_<somenum> =
            (C_75:
            (C_78:
            begin
              (if ((lt_int_ (integer_of_int32 !j_1)) (integer_of_int32 
                                                      (C_72:
                                                      ((safe_acc_ !S1_i1_s_1_8) !s_1))))
              then void else (raise (Goto_while_0_break_exc void)));
             (let jessie_<somenum> =
             (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
             (let jessie_<somenum> = (C_73: ((safe_acc_ !S1_a1_s_1_8) !s_1)) in
             (let jessie_<somenum> = (integer_of_int32 !j_1) in
             (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
             (JC_<somenum>:
             (((((offset_upd_ !intP_s_1_8_alloc_table) intP_intM_s_1_8) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
             void);
             (j_1 := (C_77:
                     (JC_<somenum>:
                     (int32_of_integer_ (C_76:
                                        ((add_int (integer_of_int32 !j_1)) (1)))))));
             !j_1 end)) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<somenum> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_80:
      begin
        void;
       [ { } unit
         { (JC_<somenum>:
           (forall k_4:int32.
            ((le_int((0), integer_of_int32(k_4))
             and lt_int(integer_of_int32(k_4),
                 integer_of_int32(select(S1_i1_v_s_1_3, v_s_1)))) ->
             (integer_of_int32(select(intP_intM_v_s_1_3,
                               shift(select(S1_a1_v_s_1_3, v_s_1),
                               integer_of_int32(k_4)))) = (0))))) } ]; void;
       ((free_parameter S1_s_1_8_alloc_table) !s_1); (raise Return) end)) end)))))))));
    (raise Return) end with Return -> void end) { true }

let f_ensures_default =
 fun (v_s : S pointer) (S_v_s_1_alloc_table : S alloc_table) (intP_v_s_1_alloc_table : intP alloc_table) (intP_intM_v_s_1 : (intP, int32) memory) (S_i_v_s_1 : (S, int32) memory) (S_a_v_s_1 : (S, intP pointer) memory) ->
  { (valid_struct_S(v_s, (0), (0), S_v_s_1_alloc_table,
     intP_v_s_1_alloc_table, S_a_v_s_1)
    and (JC_<somenum>:
        ((JC_<somenum>: ge_int(integer_of_int32(select(S_i_v_s_1, v_s)), (0)))
        and ((JC_<somenum>:
             le_int(offset_min(intP_v_s_1_alloc_table,
                    select(S_a_v_s_1, v_s)),
             (0)))
            and (JC_<somenum>:
                ge_int(offset_max(intP_v_s_1_alloc_table,
                       select(S_a_v_s_1, v_s)),
                sub_int(integer_of_int32(select(S_i_v_s_1, v_s)), (1)))))))) }
  (init:
  try
   begin
     (let S_a_s_4 = ref (any_memory void) in
     (let S_i_s_4 = ref (any_memory void) in
     (let intP_intM_s_4 = ref (any_memory void) in
     (let S_s_4_tag_table = ref (any_tag_table void) in
     (let intP_s_4_tag_table = ref (any_tag_table void) in
     (let intP_s_4_alloc_table = ref (any_alloc_table void) in
     (let S_s_4_alloc_table = ref (any_alloc_table void) in
     (let s_0 = ref (any_pointer void) in
     (let j = ref (any_int32 void) in
     try
      (C_2:
      (C_5:
      (C_6:
      begin
        (let jessie_<somenum> =
        (s_0 := (C_1:
                (JC_<somenum>:
                (((((alloc_struct_S (1)) S_s_4_alloc_table) intP_s_4_alloc_table) S_s_4_tag_table) !S_a_s_4)))) in
        void);
       (let jessie_<somenum> = (C_3: ((safe_acc_ S_i_v_s_1) v_s)) in
       (let jessie_<somenum> = !s_0 in (((safe_upd_ S_i_s_4) jessie_<somenum>) jessie_<somenum>)));
       (let jessie_<somenum> = (j := (safe_int32_of_integer_ (0))) in void);
       (loop_2:
       while true do
       { invariant
           (JC_<somenum>:
           ((JC_<somenum>: le_int((0), integer_of_int32(j)))
           and ((JC_<somenum>:
                le_int(integer_of_int32(j),
                integer_of_int32(select(S_i_v_s_1, v_s))))
               and (JC_<somenum>:
                   (forall k:int32.
                    ((le_int((0), integer_of_int32(k))
                     and lt_int(integer_of_int32(k), integer_of_int32(j))) ->
                     (integer_of_int32(select(intP_intM_v_s_1,
                                       shift(select(S_a_v_s_1, v_s),
                                       integer_of_int32(k)))) = (0)))))))) 
          }
        begin
          [ { } unit { true } ];
         try
          begin
            (let jessie_<somenum> =
            (C_16:
            (C_19:
            begin
              (if ((lt_int_ (integer_of_int32 !j)) (integer_of_int32 
                                                    (C_13:
                                                    ((safe_acc_ !S_i_s_4) !s_0))))
              then void else (raise (Goto_while_0_break_exc void)));
             (let jessie_<somenum> =
             (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
             (let jessie_<somenum> = (C_14: ((safe_acc_ !S_a_s_4) !s_0)) in
             (let jessie_<somenum> = (integer_of_int32 !j) in
             (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
             (((safe_upd_ intP_intM_s_4) jessie_<somenum>) jessie_<somenum>))))) in void);
             (j := (C_18:
                   (safe_int32_of_integer_ (C_17:
                                           ((add_int (integer_of_int32 !j)) (1))))));
             !j end)) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<somenum> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end))) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_21:
      begin
        void;
       (assert
       { (JC_<somenum>:
         (forall k_0:int32.
          ((le_int((0), integer_of_int32(k_0))
           and lt_int(integer_of_int32(k_0),
               integer_of_int32(select(S_i_v_s_1, v_s)))) ->
           (integer_of_int32(select(intP_intM_v_s_1,
                             shift(select(S_a_v_s_1, v_s),
                             integer_of_int32(k_0)))) = (0))))) }; void);
       void; ((safe_free_parameter S_s_4_alloc_table) !s_0); (raise Return)
      end)) end))))))))); (raise Return) end with Return -> void end)
  { (JC_<somenum>: true) }

let f_safety =
 fun (v_s : S pointer) (S_v_s_1_alloc_table : S alloc_table) (intP_v_s_1_alloc_table : intP alloc_table) (intP_intM_v_s_1 : (intP, int32) memory) (S_i_v_s_1 : (S, int32) memory) (S_a_v_s_1 : (S, intP pointer) memory) ->
  { (valid_struct_S(v_s, (0), (0), S_v_s_1_alloc_table,
     intP_v_s_1_alloc_table, S_a_v_s_1)
    and (JC_<somenum>:
        ((JC_<somenum>: ge_int(integer_of_int32(select(S_i_v_s_1, v_s)), (0)))
        and ((JC_<somenum>:
             le_int(offset_min(intP_v_s_1_alloc_table,
                    select(S_a_v_s_1, v_s)),
             (0)))
            and (JC_<somenum>:
                ge_int(offset_max(intP_v_s_1_alloc_table,
                       select(S_a_v_s_1, v_s)),
                sub_int(integer_of_int32(select(S_i_v_s_1, v_s)), (1)))))))) }
  (init:
  try
   begin
     (let S_a_s_4 = ref (any_memory void) in
     (let S_i_s_4 = ref (any_memory void) in
     (let intP_intM_s_4 = ref (any_memory void) in
     (let S_s_4_tag_table = ref (any_tag_table void) in
     (let intP_s_4_tag_table = ref (any_tag_table void) in
     (let intP_s_4_alloc_table = ref (any_alloc_table void) in
     (let S_s_4_alloc_table = ref (any_alloc_table void) in
     (let s_0 = ref (any_pointer void) in
     (let j = ref (any_int32 void) in
     try
      (C_2:
      (C_5:
      (C_6:
      begin
        (let jessie_<somenum> =
        (s_0 := (let jessie_<somenum> =
                (C_1:
                (JC_<somenum>:
                (((((alloc_struct_S_requires (1)) S_s_4_alloc_table) intP_s_4_alloc_table) S_s_4_tag_table) !S_a_s_4))) in
                (JC_<somenum>:
                (assert
                { ge_int(offset_max(S_s_4_alloc_table, jessie_<somenum>), (0)) };
                jessie_<somenum>)))) in void);
       (let jessie_<somenum> = (C_3: ((safe_acc_ S_i_v_s_1) v_s)) in
       (let jessie_<somenum> = !s_0 in (((safe_upd_ S_i_s_4) jessie_<somenum>) jessie_<somenum>)));
       (let jessie_<somenum> = (j := (safe_int32_of_integer_ (0))) in void);
       (loop_1:
       while true do
       { invariant (JC_<somenum>: true)
         variant (JC_<somenum> : sub_int(integer_of_int32(select(S_i_v_s_1, v_s)),
                          integer_of_int32(j))) }
        begin
          [ { } unit reads j
            { (JC_<somenum>:
              ((JC_<somenum>: le_int((0), integer_of_int32(j)))
              and ((JC_<somenum>:
                   le_int(integer_of_int32(j),
                   integer_of_int32(select(S_i_v_s_1, v_s))))
                  and (JC_<somenum>:
                      (forall k:int32.
                       ((le_int((0), integer_of_int32(k))
                        and lt_int(integer_of_int32(k), integer_of_int32(j))) ->
                        (integer_of_int32(select(intP_intM_v_s_1,
                                          shift(select(S_a_v_s_1, v_s),
                                          integer_of_int32(k)))) = (0)))))))) } ];
         try
          begin
            (let jessie_<somenum> =
            (C_16:
            (C_19:
            begin
              (if ((lt_int_ (integer_of_int32 !j)) (integer_of_int32 
                                                    (C_13:
                                                    ((safe_acc_ !S_i_s_4) !s_0))))
              then void else (raise (Goto_while_0_break_exc void)));
             (let jessie_<somenum> =
             (let jessie_<somenum> = (safe_int32_of_integer_ (0)) in
             (let jessie_<somenum> = (C_14: ((safe_acc_ !S_a_s_4) !s_0)) in
             (let jessie_<somenum> = (integer_of_int32 !j) in
             (let jessie_<somenum> = ((shift jessie_<somenum>) jessie_<somenum>) in
             (JC_<somenum>:
             (((((offset_upd_ !intP_s_4_alloc_table) intP_intM_s_4) jessie_<somenum>) jessie_<somenum>) jessie_<somenum>)))))) in
             void);
             (j := (C_18:
                   (JC_<somenum>:
                   (int32_of_integer_ (C_17:
                                      ((add_int (integer_of_int32 !j)) (1)))))));
             !j end)) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<somenum> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end))) with
      Goto_while_0_break_exc jessie_<somenum> ->
      (while_0_break:
      (C_21:
      begin
        void;
       [ { } unit
         { (JC_<somenum>:
           (forall k_0:int32.
            ((le_int((0), integer_of_int32(k_0))
             and lt_int(integer_of_int32(k_0),
                 integer_of_int32(select(S_i_v_s_1, v_s)))) ->
             (integer_of_int32(select(intP_intM_v_s_1,
                               shift(select(S_a_v_s_1, v_s),
                               integer_of_int32(k_0)))) = (0))))) } ]; void;
       ((free_parameter S_s_4_alloc_table) !s_0); (raise Return) end)) end)))))))));
    (raise Return) end with Return -> void end) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C struct_hack.jessie --quiet -f struct_hack.makefile project
why --project [...] why/struct_hack.why
<project name="struct_hack" context="why/struct_hack_ctx.why">
  <function name="Function f1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/struct_hack_po17.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "43" begin = "21" end = "27"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/struct_hack_po18.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "43" begin = "26" end = "35"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/struct_hack_po19.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "43" begin = "39" end = "81"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/struct_hack_po20.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "43" begin = "21" end = "27"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/struct_hack_po21.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "43" begin = "26" end = "35"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/struct_hack_po22.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "43" begin = "39" end = "81"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/struct_hack_po23.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "47" begin = "13" end = "58"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/struct_hack_po24.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "41" begin = "18" end = "19"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/struct_hack_po25.why">
      <location file = "why/struct_hack.why" line = "999" begin = "18" end = "74"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/struct_hack_po26.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.jessie/struct_hack.jc" line = "179" begin = "21" end = "62"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/struct_hack_po27.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.jessie/struct_hack.jc" line = "179" begin = "21" end = "62"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/struct_hack_po28.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "46" begin = "24" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/struct_hack_po29.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "46" begin = "24" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/struct_hack_po30.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "44" begin = "19" end = "27"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/struct_hack_po31.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "44" begin = "19" end = "27"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/struct_hack_po32.why">
      <location file = "why/struct_hack.why" line = "1077" begin = "8" end = "50"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
  </function>
  <function name="Function f0">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/struct_hack_po1.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "27" begin = "21" end = "27"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/struct_hack_po2.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "27" begin = "26" end = "35"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/struct_hack_po3.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "27" begin = "39" end = "81"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/struct_hack_po4.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "27" begin = "21" end = "27"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/struct_hack_po5.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "27" begin = "26" end = "35"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/struct_hack_po6.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "27" begin = "39" end = "81"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/struct_hack_po7.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "31" begin = "13" end = "58"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/struct_hack_po8.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "25" begin = "18" end = "19"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/struct_hack_po9.why">
      <location file = "why/struct_hack.why" line = "783" begin = "20" end = "76"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/struct_hack_po10.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.jessie/struct_hack.jc" line = "128" begin = "21" end = "62"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/struct_hack_po11.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.jessie/struct_hack.jc" line = "128" begin = "21" end = "62"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/struct_hack_po12.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "30" begin = "24" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/struct_hack_po13.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "30" begin = "24" end = "27"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/struct_hack_po14.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "28" begin = "19" end = "27"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/struct_hack_po15.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "28" begin = "19" end = "27"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/struct_hack_po16.why">
      <location file = "why/struct_hack.why" line = "849" begin = "8" end = "52"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
  </function>
  <function name="Function f">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/struct_hack_po33.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "11" begin = "21" end = "27"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/struct_hack_po34.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "11" begin = "26" end = "34"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/struct_hack_po35.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "11" begin = "38" end = "79"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/struct_hack_po36.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "11" begin = "21" end = "27"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/struct_hack_po37.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "11" begin = "26" end = "34"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/struct_hack_po38.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "11" begin = "38" end = "79"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/struct_hack_po39.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "15" begin = "13" end = "56"/>
      <explain kind = "Assert"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/struct_hack_po40.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "9" begin = "16" end = "17"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/struct_hack_po41.why">
      <location file = "why/struct_hack.why" line = "1215" begin = "18" end = "71"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/struct_hack_po42.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.jessie/struct_hack.jc" line = "81" begin = "21" end = "57"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/struct_hack_po43.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.jessie/struct_hack.jc" line = "81" begin = "21" end = "57"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/struct_hack_po44.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "14" begin = "23" end = "26"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/struct_hack_po45.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "14" begin = "23" end = "26"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/struct_hack_po46.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "12" begin = "19" end = "26"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/struct_hack_po47.why">
      <location file = "PPCHOME/tests/jessie/struct_hack.c" line = "12" begin = "19" end = "26"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/struct_hack_po48.why">
      <location file = "why/struct_hack.why" line = "1278" begin = "8" end = "47"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type S

type S0

type S1

type charP

type int32

type int8

type intP

type padding

type voidP

logic S0_tag : S0 tag_id

axiom S0_int: (int_of_tag(S0_tag) = 1)

logic S0_of_pointer_address : unit pointer -> S0 pointer

axiom S0_of_pointer_address_of_pointer_addr:
  (forall p:S0 pointer. (p = S0_of_pointer_address(pointer_address(p))))

axiom S0_parenttag_bottom: parenttag(S0_tag, bottom_tag)

axiom S0_tags:
  (forall x:S0 pointer.
    (forall S0_tag_table:S0 tag_table. instanceof(S0_tag_table, x, S0_tag)))

logic S1_tag : S1 tag_id

axiom S1_int: (int_of_tag(S1_tag) = 1)

logic S1_of_pointer_address : unit pointer -> S1 pointer

axiom S1_of_pointer_address_of_pointer_addr:
  (forall p:S1 pointer. (p = S1_of_pointer_address(pointer_address(p))))

axiom S1_parenttag_bottom: parenttag(S1_tag, bottom_tag)

axiom S1_tags:
  (forall x:S1 pointer.
    (forall S1_tag_table:S1 tag_table. instanceof(S1_tag_table, x, S1_tag)))

logic S_tag : S tag_id

axiom S_int: (int_of_tag(S_tag) = 1)

logic S_of_pointer_address : unit pointer -> S pointer

axiom S_of_pointer_address_of_pointer_addr:
  (forall p:S pointer. (p = S_of_pointer_address(pointer_address(p))))

axiom S_parenttag_bottom: parenttag(S_tag, bottom_tag)

axiom S_tags:
  (forall x:S pointer.
    (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32 [(integer_of_int32(x) = integer_of_int32(y))].
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8 [(integer_of_int8(x) = integer_of_int8(y))].
      ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_S(p: S pointer, a: int,
  S_alloc_table: S alloc_table, intP_alloc_table: intP alloc_table, S_a: (S,
  intP pointer) memory) =
  ((offset_min(S_alloc_table, p) <= a) and left_valid_struct_intP(select(S_a,
   p), 0, intP_alloc_table))

predicate left_valid_struct_S0(p: S0 pointer, a: int,
  S0_alloc_table: S0 alloc_table, intP_alloc_table: intP alloc_table,
  S0_a0: (S0, intP pointer) memory) =
  ((offset_min(S0_alloc_table, p) <= a) and
   left_valid_struct_intP(select(S0_a0, p), 0, intP_alloc_table))

predicate left_valid_struct_S1(p: S1 pointer, a: int,
  S1_alloc_table: S1 alloc_table, intP_alloc_table: intP alloc_table,
  S1_a1: (S1, intP pointer) memory) =
  ((offset_min(S1_alloc_table, p) <= a) and
   left_valid_struct_intP(select(S1_a1, p), 0, intP_alloc_table))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of_S0_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(S0_of_pointer_address(p))))

axiom pointer_addr_of_S1_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(S1_of_pointer_address(p))))

axiom pointer_addr_of_S_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(S_of_pointer_address(p))))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_S(p: S pointer, b: int,
  S_alloc_table: S alloc_table, intP_alloc_table: intP alloc_table, S_a: (S,
  intP pointer) memory) =
  ((offset_max(S_alloc_table, p) >= b) and
   right_valid_struct_intP(select(S_a, p), (-1), intP_alloc_table))

predicate right_valid_struct_S0(p: S0 pointer, b: int,
  S0_alloc_table: S0 alloc_table, intP_alloc_table: intP alloc_table,
  S0_a0: (S0, intP pointer) memory) =
  ((offset_max(S0_alloc_table, p) >= b) and
   right_valid_struct_intP(select(S0_a0, p), (-1), intP_alloc_table))

predicate right_valid_struct_S1(p: S1 pointer, b: int,
  S1_alloc_table: S1 alloc_table, intP_alloc_table: intP alloc_table,
  S1_a1: (S1, intP pointer) memory) =
  ((offset_max(S1_alloc_table, p) >= b) and
   right_valid_struct_intP(select(S1_a1, p), 0, intP_alloc_table))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table) =
  ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate strict_valid_root_S0(p: S0 pointer, a: int, b: int,
  S0_alloc_table: S0 alloc_table) =
  ((offset_min(S0_alloc_table, p) = a) and (offset_max(S0_alloc_table,
   p) = b))

predicate strict_valid_root_S1(p: S1 pointer, a: int, b: int,
  S1_alloc_table: S1 alloc_table) =
  ((offset_min(S1_alloc_table, p) = a) and (offset_max(S1_alloc_table,
   p) = b))

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table, intP_alloc_table: intP alloc_table, S_a: (S,
  intP pointer) memory) =
  ((offset_min(S_alloc_table, p) = a) and
   ((offset_max(S_alloc_table, p) = b) and
    strict_valid_struct_intP(select(S_a, p), 0, (-1), intP_alloc_table)))

predicate strict_valid_struct_S0(p: S0 pointer, a: int, b: int,
  S0_alloc_table: S0 alloc_table, intP_alloc_table: intP alloc_table,
  S0_a0: (S0, intP pointer) memory) =
  ((offset_min(S0_alloc_table, p) = a) and
   ((offset_max(S0_alloc_table, p) = b) and
    strict_valid_struct_intP(select(S0_a0, p), 0, (-1), intP_alloc_table)))

predicate strict_valid_struct_S1(p: S1 pointer, a: int, b: int,
  S1_alloc_table: S1 alloc_table, intP_alloc_table: intP alloc_table,
  S1_a1: (S1, intP pointer) memory) =
  ((offset_min(S1_alloc_table, p) = a) and
   ((offset_max(S1_alloc_table, p) = b) and
    strict_valid_struct_intP(select(S1_a1, p), 0, 0, intP_alloc_table)))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate valid_root_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table) =
  ((offset_min(S_alloc_table, p) <= a) and (offset_max(S_alloc_table,
   p) >= b))

predicate valid_root_S0(p: S0 pointer, a: int, b: int,
  S0_alloc_table: S0 alloc_table) =
  ((offset_min(S0_alloc_table, p) <= a) and (offset_max(S0_alloc_table,
   p) >= b))

predicate valid_root_S1(p: S1 pointer, a: int, b: int,
  S1_alloc_table: S1 alloc_table) =
  ((offset_min(S1_alloc_table, p) <= a) and (offset_max(S1_alloc_table,
   p) >= b))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table, intP_alloc_table: intP alloc_table, S_a: (S,
  intP pointer) memory) =
  ((offset_min(S_alloc_table, p) <= a) and
   ((offset_max(S_alloc_table, p) >= b) and valid_struct_intP(select(S_a, p),
    0, (-1), intP_alloc_table)))

predicate valid_struct_S0(p: S0 pointer, a: int, b: int,
  S0_alloc_table: S0 alloc_table, intP_alloc_table: intP alloc_table,
  S0_a0: (S0, intP pointer) memory) =
  ((offset_min(S0_alloc_table, p) <= a) and
   ((offset_max(S0_alloc_table, p) >= b) and valid_struct_intP(select(S0_a0,
    p), 0, (-1), intP_alloc_table)))

predicate valid_struct_S1(p: S1 pointer, a: int, b: int,
  S1_alloc_table: S1 alloc_table, intP_alloc_table: intP alloc_table,
  S1_a1: (S1, intP pointer) memory) =
  ((offset_min(S1_alloc_table, p) <= a) and
   ((offset_max(S1_alloc_table, p) >= b) and valid_struct_intP(select(S1_a1,
    p), 0, 0, intP_alloc_table)))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

