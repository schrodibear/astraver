Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only fs248_short.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD fs248_short.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir fs248_short.jessie
[jessie] File fs248_short.jessie/fs248_short.jc written.
[jessie] File fs248_short.jessie/fs248_short.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag int_P = {
  int32 int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

tag S = {
  int32 a: 32; 
  int32 b: 32; 
  int32 c_0: 32;
}

type S = [S]

unit f(char_P[..] x_0, int_P[..] y_0)
behavior default:
  ensures (C_21 : true);
{  
   (var char_P[..] tmp);
   
   {  (C_6 : ((C_5 : x_0.char_M) = (C_4 : ((C_3 : ((C_2 : ((C_1 : x_0.char_M) :> int32)) +
                                                    1)) :> int8))));
      (C_7 : (tmp = x_0));
      (C_9 : (x_0 = (C_8 : (x_0 + 1))));
      (C_15 : ((C_14 : x_0.char_M) = (C_13 : ((C_12 : ((C_11 : ((C_10 : x_0.char_M) :> int32)) +
                                                        1)) :> int8))));
      (C_20 : ((C_19 : y_0.int_M) = (C_18 : ((C_17 : ((C_16 : y_0.int_M) + 1)) :> int32))));
      
      (return ())
   }
}

unit f2(char_P[..] x_0_0)
behavior default:
  ensures (C_36 : true);
{  
   (var char_P[..] q_0);
   
   {  (C_27 : ((C_26 : x_0_0.char_M) = (C_25 : ((C_24 : ((C_23 : ((C_22 : x_0_0.char_M) :> int32)) +
                                                          1)) :> int8))));
      (C_29 : (q_0 = (C_28 : (x_0_0 + 1))));
      (C_35 : ((C_34 : q_0.char_M) = (C_33 : ((C_32 : ((C_31 : ((C_30 : q_0.char_M) :> int32)) +
                                                        1)) :> int8))));
      
      (return ())
   }
}

int32 A;

int32 B;

int32 C;

int32 D;

int32 E;

int32 F;

int32 G;

int_P[0..4] p;

invariant valid_p :
((\offset_min(p) <= 0) && (\offset_max(p) >= 4))

int_P[0..4] q;

invariant valid_q :
((\offset_min(q) <= 0) && (\offset_max(q) >= 4))

int_P[0..4] p2;

invariant valid_p2 :
((\offset_min(p2) <= 0) && (\offset_max(p2) >= 4))

int_P[0..4] q2;

invariant valid_q2 :
((\offset_min(q2) <= 0) && (\offset_max(q2) >= 4))

int32 t;

int32 u;

int32 v;

int32 w;

int32 x;

int32 y;

int32 z;

int32 t2;

int32 v2;

int_P[..] PTR1;

int_P[..] PTR2;

int_P[..] PTR3;

int_P[..] PTR4;

int32 c;

int32 c1;

int32 c2;

int32 c3;

int32 c4;

S[0] e;

invariant valid_e :
((\offset_min(e) <= 0) && (\offset_max(e) >= 0))

S[0] g;

invariant valid_g :
((\offset_min(g) <= 0) && (\offset_max(g) >= 0))

unit main3()
behavior default:
  ensures (C_117 : true);
{  
   (var S[..] p_0);
   
   (var S[0] s1);
   
   (var S[0] s2);
   
   (var int32 tmp_0);
   
   (var int32 tmp_0_0);
   
   (var int32 tmp_1);
   
   (var int32 tmp_2);
   
   (var int32 tmp_3);
   
   {  (C_38 : (s1 = (C_37 : (new S[1]))));
      (C_40 : (s2 = (C_39 : (new S[1]))));
      (C_42 : ((C_41 : s1.a) = 2));
      (C_44 : ((C_43 : s1.b) = 4));
      (C_46 : ((C_45 : s1.c_0) = 6));
      (C_48 : ((C_47 : s2.a) = 1));
      (C_50 : ((C_49 : s2.b) = 3));
      (C_52 : ((C_51 : s2.c_0) = 5));
      (if (c != 0) then (C_54 : (p_0 = s1)) else (C_53 : (p_0 = s2)));
      (C_56 : ((C_55 : p_0.a) = 7));
      (C_58 : (t = (C_57 : p_0.b)));
      (C_59 : (z = 2));
      (if ((C_64 : ((C_63 : (c + (C_62 : (1 :> int32)))) :> int32)) != 0) then 
      (C_61 : (u = 0)) else (C_60 : (u = 1)));
      (C_65 : (v = u));
      (if (w == v) then (C_66 : (z = u)) else ());
      
      {  
         {  (if ((C_76 : ((C_75 : (c + (C_74 : (1 :> int32)))) :> int32)) !=
                  0) then (C_73 : (tmp_0_0 = 0)) else 
            {  (if ((C_71 : ((C_70 : (c + (C_69 : (2 :> int32)))) :> int32)) !=
                     0) then (C_68 : (tmp_0 = 1)) else (C_67 : (tmp_0 = 2)));
               (C_72 : (tmp_0_0 = tmp_0))
            })
         };
         (C_78 : (PTR1 = (C_77 : (p2 + tmp_0_0))))
      };
      (C_80 : (PTR2 = (C_79 : (PTR1 + 1))));
      (if ((C_92 : ((C_91 : (c + (C_90 : (10 :> int32)))) :> int32)) != 0) then 
      (C_89 : ((C_88 : PTR1.int_M) = 96)) else 
      {  (if ((C_85 : ((C_84 : (c + (C_83 : (11 :> int32)))) :> int32)) != 0) then 
         (C_82 : (tmp_1 = 97)) else (C_81 : (tmp_1 = 98)));
         (C_87 : ((C_86 : PTR1.int_M) = tmp_1))
      });
      
      {  
         {  (if ((C_102 : ((C_101 : (c + (C_100 : (3 :> int32)))) :> int32)) !=
                  0) then (C_99 : (tmp_3 = 1)) else 
            {  (if ((C_97 : ((C_96 : (c + (C_95 : (4 :> int32)))) :> int32)) !=
                     0) then (C_94 : (tmp_2 = 2)) else (C_93 : (tmp_2 = 4)));
               (C_98 : (tmp_3 = tmp_2))
            })
         };
         (C_104 : (PTR3 = (C_103 : (p2 + tmp_3))))
      };
      (C_106 : ((C_105 : PTR3.int_M) = 99));
      (C_107 : (PTR4 = PTR3));
      (C_109 : (x = (C_108 : PTR1.int_M)));
      (if (PTR4 == PTR2) then 
      {  (C_111 : (t2 = (C_110 : PTR1.int_M)));
         (C_114 : (v2 = (C_113 : ((C_112 : (PTR3 - PTR1)) :> int32))))
      } else ());
      
      {  (C_115 : (free(s1)));
         (C_116 : (free(s2)));
         
         (return ())
      }
   }
}

int32 tz1;

int32 tz2;

int32 tz3;

int32 tx;

int32 ty;

int32 tz;
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs fs248_short.jessie/fs248_short.cloc fs248_short.jessie/fs248_short.jc
type S

type char_P

type e_9

type g_10

type int32

type int8

type int_P

type p2_3

type p_1

type padding

type q2_4

type q_2

type void_P

logic A:  -> int32

logic B:  -> int32

logic C:  -> int32

logic D:  -> int32

logic E:  -> int32

logic F:  -> int32

logic G:  -> int32

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

logic S_of_pointer_address: unit pointer -> S pointer

logic p:  -> int_P pointer

axiom S_of_pointer_address_of_pointer_addr :
 (forall p:S pointer. (p = S_of_pointer_address(pointer_address(p))))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic c:  -> int32

logic c1:  -> int32

logic c2:  -> int32

logic c3:  -> int32

logic c4:  -> int32

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic e:  -> S pointer

logic integer_of_int32: int32 -> int

logic y:  -> int32

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic g:  -> S pointer

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

predicate left_valid_struct_S(p:S pointer, a:int,
 S_alloc_table:S alloc_table) = (offset_min(S_alloc_table, p) <= a)

predicate left_valid_struct_char_P(p:char_P pointer, a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_int_P(p:int_P pointer, a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer, a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

logic p2:  -> int_P pointer

axiom pointer_addr_of_S_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(S_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

logic q:  -> int_P pointer

logic q2:  -> int_P pointer

predicate right_valid_struct_S(p:S pointer, b:int,
 S_alloc_table:S alloc_table) = (offset_max(S_alloc_table, p) >= b)

predicate right_valid_struct_char_P(p:char_P pointer, b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_int_P(p:int_P pointer, b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer, b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_S(p:S pointer, a:int, b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate strict_valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_S(p:S pointer, a:int, b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic tx:  -> int32

logic ty:  -> int32

logic tz:  -> int32

logic tz1:  -> int32

logic tz2:  -> int32

logic tz3:  -> int32

predicate valid_bitvector_struct_S(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_e(S_e_9_alloc_table:S alloc_table) =
 (le_int(offset_min(S_e_9_alloc_table, e), (0))
 and ge_int(offset_max(S_e_9_alloc_table, e), (0)))

predicate valid_g(S_g_10_alloc_table:S alloc_table) =
 (le_int(offset_min(S_g_10_alloc_table, g), (0))
 and ge_int(offset_max(S_g_10_alloc_table, g), (0)))

predicate valid_p(int_P_p_1_alloc_table:int_P alloc_table) =
 (le_int(offset_min(int_P_p_1_alloc_table, p), (0))
 and ge_int(offset_max(int_P_p_1_alloc_table, p), (4)))

predicate valid_p2(int_P_p2_3_alloc_table:int_P alloc_table) =
 (le_int(offset_min(int_P_p2_3_alloc_table, p2), (0))
 and ge_int(offset_max(int_P_p2_3_alloc_table, p2), (4)))

predicate valid_q(int_P_q_2_alloc_table:int_P alloc_table) =
 (le_int(offset_min(int_P_q_2_alloc_table, q), (0))
 and ge_int(offset_max(int_P_q_2_alloc_table, q), (4)))

predicate valid_q2(int_P_q2_4_alloc_table:int_P alloc_table) =
 (le_int(offset_min(int_P_q2_4_alloc_table, q2), (0))
 and ge_int(offset_max(int_P_q2_4_alloc_table, q2), (4)))

predicate valid_root_S(p:S pointer, a:int, b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) <= a)
 and (offset_max(S_alloc_table, p) >= b))

predicate valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_S(p:S pointer, a:int, b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) <= a)
 and (offset_max(S_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

logic w:  -> int32

parameter PTR1 : int_P pointer ref

parameter PTR2 : int_P pointer ref

parameter PTR3 : int_P pointer ref

parameter PTR4 : int_P pointer ref

parameter S_alloc_table : S alloc_table ref

parameter S_e_9_alloc_table : S alloc_table ref

parameter S_g_10_alloc_table : S alloc_table ref

parameter S_tag_table : S tag_table ref

parameter alloc_bitvector_struct_S :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_S(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_S_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_S(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_struct_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_tag_table:S tag_table ref ->
    { } S pointer writes S_alloc_table,S_tag_table
    { (strict_valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table)
      and (alloc_extends(S_alloc_table@, S_alloc_table)
          and (alloc_fresh(S_alloc_table@, result, n)
              and instanceof(S_tag_table, result, S_tag)))) }

parameter alloc_struct_S_requires :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_tag_table:S tag_table ref ->
    { ge_int(n, (0))} S pointer writes S_alloc_table,S_tag_table
    { (strict_valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table)
      and (alloc_extends(S_alloc_table@, S_alloc_table)
          and (alloc_fresh(S_alloc_table@, result, n)
              and instanceof(S_tag_table, result, S_tag)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter int_P_q2_4_alloc_table : int_P alloc_table ref

parameter int_P_p2_3_alloc_table : int_P alloc_table ref

parameter int_P_q_2_alloc_table : int_P alloc_table ref

parameter int_P_p_1_alloc_table : int_P alloc_table ref

parameter f :
 x_0_0:char_P pointer ->
  y_0:int_P pointer ->
   char_P_char_M_x_0_11:(char_P, int8) memory ref ->
    int_P_int_M_y_0_12:(int_P, int32) memory ref ->
     int_P_y_0_12_alloc_table:int_P alloc_table ->
      char_P_x_0_11_alloc_table:char_P alloc_table ->
       { } unit
       reads S_e_9_alloc_table,S_g_10_alloc_table,char_P_char_M_x_0_11,int_P_int_M_y_0_12,int_P_p2_3_alloc_table,int_P_p_1_alloc_table,int_P_q2_4_alloc_table,int_P_q_2_alloc_table
       writes char_P_char_M_x_0_11,int_P_int_M_y_0_12
       { (JC_50:
         ((JC_44: valid_p(int_P_p_1_alloc_table))
         and ((JC_45: valid_q(int_P_q_2_alloc_table))
             and ((JC_46: valid_p2(int_P_p2_3_alloc_table))
                 and ((JC_47: valid_q2(int_P_q2_4_alloc_table))
                     and ((JC_48: valid_e(S_e_9_alloc_table))
                         and (JC_49: valid_g(S_g_10_alloc_table)))))))) }

parameter f2 :
 x_0_0_0:char_P pointer ->
  char_P_char_M_x_0_0_13:(char_P, int8) memory ref ->
   char_P_x_0_0_13_alloc_table:char_P alloc_table ->
    { } unit
    reads S_e_9_alloc_table,S_g_10_alloc_table,char_P_char_M_x_0_0_13,int_P_p2_3_alloc_table,int_P_p_1_alloc_table,int_P_q2_4_alloc_table,int_P_q_2_alloc_table
    writes char_P_char_M_x_0_0_13
    { (JC_93:
      ((JC_87: valid_p(int_P_p_1_alloc_table))
      and ((JC_88: valid_q(int_P_q_2_alloc_table))
          and ((JC_89: valid_p2(int_P_p2_3_alloc_table))
              and ((JC_90: valid_q2(int_P_q2_4_alloc_table))
                  and ((JC_91: valid_e(S_e_9_alloc_table))
                      and (JC_92: valid_g(S_g_10_alloc_table)))))))) }

parameter f2_requires :
 x_0_0_0:char_P pointer ->
  char_P_char_M_x_0_0_13:(char_P, int8) memory ref ->
   char_P_x_0_0_13_alloc_table:char_P alloc_table ->
    { (JC_68:
      ((JC_62: valid_p(int_P_p_1_alloc_table))
      and ((JC_63: valid_q(int_P_q_2_alloc_table))
          and ((JC_64: valid_p2(int_P_p2_3_alloc_table))
              and ((JC_65: valid_q2(int_P_q2_4_alloc_table))
                  and ((JC_66: valid_e(S_e_9_alloc_table))
                      and (JC_67: valid_g(S_g_10_alloc_table))))))))}
    unit
    reads S_e_9_alloc_table,S_g_10_alloc_table,char_P_char_M_x_0_0_13,int_P_p2_3_alloc_table,int_P_p_1_alloc_table,int_P_q2_4_alloc_table,int_P_q_2_alloc_table
    writes char_P_char_M_x_0_0_13
    { (JC_93:
      ((JC_87: valid_p(int_P_p_1_alloc_table))
      and ((JC_88: valid_q(int_P_q_2_alloc_table))
          and ((JC_89: valid_p2(int_P_p2_3_alloc_table))
              and ((JC_90: valid_q2(int_P_q2_4_alloc_table))
                  and ((JC_91: valid_e(S_e_9_alloc_table))
                      and (JC_92: valid_g(S_g_10_alloc_table)))))))) }

parameter f_requires :
 x_0_0:char_P pointer ->
  y_0:int_P pointer ->
   char_P_char_M_x_0_11:(char_P, int8) memory ref ->
    int_P_int_M_y_0_12:(int_P, int32) memory ref ->
     int_P_y_0_12_alloc_table:int_P alloc_table ->
      char_P_x_0_11_alloc_table:char_P alloc_table ->
       { (JC_25:
         ((JC_19: valid_p(int_P_p_1_alloc_table))
         and ((JC_20: valid_q(int_P_q_2_alloc_table))
             and ((JC_21: valid_p2(int_P_p2_3_alloc_table))
                 and ((JC_22: valid_q2(int_P_q2_4_alloc_table))
                     and ((JC_23: valid_e(S_e_9_alloc_table))
                         and (JC_24: valid_g(S_g_10_alloc_table))))))))}
       unit
       reads S_e_9_alloc_table,S_g_10_alloc_table,char_P_char_M_x_0_11,int_P_int_M_y_0_12,int_P_p2_3_alloc_table,int_P_p_1_alloc_table,int_P_q2_4_alloc_table,int_P_q_2_alloc_table
       writes char_P_char_M_x_0_11,int_P_int_M_y_0_12
       { (JC_50:
         ((JC_44: valid_p(int_P_p_1_alloc_table))
         and ((JC_45: valid_q(int_P_q_2_alloc_table))
             and ((JC_46: valid_p2(int_P_p2_3_alloc_table))
                 and ((JC_47: valid_q2(int_P_q2_4_alloc_table))
                     and ((JC_48: valid_e(S_e_9_alloc_table))
                         and (JC_49: valid_g(S_g_10_alloc_table)))))))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter int_P_int_M_p2_3 : (int_P, int32) memory ref

parameter v : int32 ref

parameter u : int32 ref

parameter v2 : int32 ref

parameter t2 : int32 ref

parameter z : int32 ref

parameter x_0 : int32 ref

parameter t : int32 ref

parameter main3 :
 tt:unit ->
  { } unit
  reads PTR1,PTR2,PTR3,PTR4,S_e_9_alloc_table,S_g_10_alloc_table,int_P_int_M_p2_3,int_P_p2_3_alloc_table,int_P_p_1_alloc_table,int_P_q2_4_alloc_table,int_P_q_2_alloc_table,u,v
  writes PTR1,PTR2,PTR3,PTR4,int_P_int_M_p2_3,t,t2,u,v,v2,x_0,z
  { (JC_133:
    ((JC_127: valid_p(int_P_p_1_alloc_table))
    and ((JC_128: valid_q(int_P_q_2_alloc_table))
        and ((JC_129: valid_p2(int_P_p2_3_alloc_table))
            and ((JC_130: valid_q2(int_P_q2_4_alloc_table))
                and ((JC_131: valid_e(S_e_9_alloc_table))
                    and (JC_132: valid_g(S_g_10_alloc_table)))))))) }

parameter main3_requires :
 tt:unit ->
  { (JC_108:
    ((JC_102: valid_p(int_P_p_1_alloc_table))
    and ((JC_103: valid_q(int_P_q_2_alloc_table))
        and ((JC_104: valid_p2(int_P_p2_3_alloc_table))
            and ((JC_105: valid_q2(int_P_q2_4_alloc_table))
                and ((JC_106: valid_e(S_e_9_alloc_table))
                    and (JC_107: valid_g(S_g_10_alloc_table))))))))}
  unit
  reads PTR1,PTR2,PTR3,PTR4,S_e_9_alloc_table,S_g_10_alloc_table,int_P_int_M_p2_3,int_P_p2_3_alloc_table,int_P_p_1_alloc_table,int_P_q2_4_alloc_table,int_P_q_2_alloc_table,u,v
  writes PTR1,PTR2,PTR3,PTR4,int_P_int_M_p2_3,t,t2,u,v,v2,x_0,z
  { (JC_133:
    ((JC_127: valid_p(int_P_p_1_alloc_table))
    and ((JC_128: valid_q(int_P_q_2_alloc_table))
        and ((JC_129: valid_p2(int_P_p2_3_alloc_table))
            and ((JC_130: valid_q2(int_P_q2_4_alloc_table))
                and ((JC_131: valid_e(S_e_9_alloc_table))
                    and (JC_132: valid_g(S_g_10_alloc_table)))))))) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let f2_ensures_default =
 fun (x_0_0_0 : char_P pointer) (char_P_char_M_x_0_0_13 : (char_P, int8) memory ref) (char_P_x_0_0_13_alloc_table : char_P alloc_table) ->
  { (JC_76:
    ((JC_70: valid_p(int_P_p_1_alloc_table))
    and ((JC_71: valid_q(int_P_q_2_alloc_table))
        and ((JC_72: valid_p2(int_P_p2_3_alloc_table))
            and ((JC_73: valid_q2(int_P_q2_4_alloc_table))
                and ((JC_74: valid_e(S_e_9_alloc_table))
                    and (JC_75: valid_g(S_g_10_alloc_table)))))))) }
  (init:
  try
   begin
     (let q_0 = ref (any_pointer void) in
     (C_27:
     begin
       (let jessie_64 =
       (let jessie_60 =
       (C_25:
       (safe_int8_of_integer_ (C_24:
                              ((add_int (integer_of_int32 (C_23:
                                                          (safe_int32_of_integer_ 
                                                           (integer_of_int8 
                                                            (C_22:
                                                            ((safe_acc_ !char_P_char_M_x_0_0_13) x_0_0_0))))))) (1))))) in
       (let jessie_63 = x_0_0_0 in
       (((safe_upd_ char_P_char_M_x_0_0_13) jessie_63) jessie_60))) in void);
      (C_29:
      begin
        (let jessie_66 = (q_0 := (C_28: ((shift x_0_0_0) (1)))) in void);
       (C_35:
       begin
         (let jessie_72 =
         (let jessie_68 =
         (C_33:
         (safe_int8_of_integer_ (C_32:
                                ((add_int (integer_of_int32 (C_31:
                                                            (safe_int32_of_integer_ 
                                                             (integer_of_int8 
                                                              (C_30:
                                                              ((safe_acc_ !char_P_char_M_x_0_0_13) !q_0))))))) (1))))) in
         (let jessie_71 = !q_0 in
         (((safe_upd_ char_P_char_M_x_0_0_13) jessie_71) jessie_68))) in
         void); (raise Return) end) end) end)); (raise Return) end with
   Return -> void end) { (JC_78: true) }

let f2_safety =
 fun (x_0_0_0 : char_P pointer) (char_P_char_M_x_0_0_13 : (char_P, int8) memory ref) (char_P_x_0_0_13_alloc_table : char_P alloc_table) ->
  { (JC_76:
    ((JC_70: valid_p(int_P_p_1_alloc_table))
    and ((JC_71: valid_q(int_P_q_2_alloc_table))
        and ((JC_72: valid_p2(int_P_p2_3_alloc_table))
            and ((JC_73: valid_q2(int_P_q2_4_alloc_table))
                and ((JC_74: valid_e(S_e_9_alloc_table))
                    and (JC_75: valid_g(S_g_10_alloc_table)))))))) }
  (init:
  try
   begin
     (let q_0 = ref (any_pointer void) in
     (C_27:
     begin
       (let jessie_50 =
       (let jessie_46 =
       (C_25:
       (JC_96:
       (int8_of_integer_ (C_24:
                         ((add_int (integer_of_int32 (C_23:
                                                     (JC_95:
                                                     (int32_of_integer_ 
                                                      (integer_of_int8 
                                                       (C_22:
                                                       (JC_94:
                                                       (((acc_ char_P_x_0_0_13_alloc_table) !char_P_char_M_x_0_0_13) x_0_0_0))))))))) (1)))))) in
       (let jessie_49 = x_0_0_0 in
       (JC_97:
       ((((upd_ char_P_x_0_0_13_alloc_table) char_P_char_M_x_0_0_13) jessie_49) jessie_46)))) in
       void);
      (C_29:
      begin
        (let jessie_52 = (q_0 := (C_28: ((shift x_0_0_0) (1)))) in void);
       (C_35:
       begin
         (let jessie_58 =
         (let jessie_54 =
         (C_33:
         (JC_100:
         (int8_of_integer_ (C_32:
                           ((add_int (integer_of_int32 (C_31:
                                                       (JC_99:
                                                       (int32_of_integer_ 
                                                        (integer_of_int8 
                                                         (C_30:
                                                         (JC_98:
                                                         (((acc_ char_P_x_0_0_13_alloc_table) !char_P_char_M_x_0_0_13) !q_0))))))))) (1)))))) in
         (let jessie_57 = !q_0 in
         (JC_101:
         ((((upd_ char_P_x_0_0_13_alloc_table) char_P_char_M_x_0_0_13) jessie_57) jessie_54)))) in
         void); (raise Return) end) end) end)); (raise Return) end with
   Return -> void end)
  { (JC_86:
    ((JC_80: valid_p(int_P_p_1_alloc_table))
    and ((JC_81: valid_q(int_P_q_2_alloc_table))
        and ((JC_82: valid_p2(int_P_p2_3_alloc_table))
            and ((JC_83: valid_q2(int_P_q2_4_alloc_table))
                and ((JC_84: valid_e(S_e_9_alloc_table))
                    and (JC_85: valid_g(S_g_10_alloc_table)))))))) }

let f_ensures_default =
 fun (x_0_0 : char_P pointer) (y_0 : int_P pointer) (int_P_int_M_y_0_12 : (int_P, int32) memory ref) (char_P_char_M_x_0_11 : (char_P, int8) memory ref) (char_P_x_0_11_alloc_table : char_P alloc_table) (int_P_y_0_12_alloc_table : int_P alloc_table) ->
  { (JC_33:
    ((JC_27: valid_p(int_P_p_1_alloc_table))
    and ((JC_28: valid_q(int_P_q_2_alloc_table))
        and ((JC_29: valid_p2(int_P_p2_3_alloc_table))
            and ((JC_30: valid_q2(int_P_q2_4_alloc_table))
                and ((JC_31: valid_e(S_e_9_alloc_table))
                    and (JC_32: valid_g(S_g_10_alloc_table)))))))) }
  (let mutable_x_0_0 = ref x_0_0 in
  (init:
  try
   begin
     (let tmp = ref (any_pointer void) in
     (C_6:
     begin
       (let jessie_28 =
       (let jessie_24 =
       (C_4:
       (safe_int8_of_integer_ (C_3:
                              ((add_int (integer_of_int32 (C_2:
                                                          (safe_int32_of_integer_ 
                                                           (integer_of_int8 
                                                            (C_1:
                                                            ((safe_acc_ !char_P_char_M_x_0_11) !mutable_x_0_0))))))) (1))))) in
       (let jessie_27 = !mutable_x_0_0 in
       (((safe_upd_ char_P_char_M_x_0_11) jessie_27) jessie_24))) in void);
      (C_7:
      begin
        (let jessie_30 = (tmp := !mutable_x_0_0) in void);
       (C_9:
       begin
         (let jessie_32 =
         (mutable_x_0_0 := (C_8: ((shift !mutable_x_0_0) (1)))) in void);
        (C_15:
        begin
          (let jessie_38 =
          (let jessie_34 =
          (C_13:
          (safe_int8_of_integer_ (C_12:
                                 ((add_int (integer_of_int32 (C_11:
                                                             (safe_int32_of_integer_ 
                                                              (integer_of_int8 
                                                               (C_10:
                                                               ((safe_acc_ !char_P_char_M_x_0_11) !mutable_x_0_0))))))) (1))))) in
          (let jessie_37 = !mutable_x_0_0 in
          (((safe_upd_ char_P_char_M_x_0_11) jessie_37) jessie_34))) in void);
         (C_20:
         begin
           (let jessie_44 =
           (let jessie_40 =
           (C_18:
           (safe_int32_of_integer_ (C_17:
                                   ((add_int (integer_of_int32 (C_16:
                                                               ((safe_acc_ !int_P_int_M_y_0_12) y_0)))) (1))))) in
           (let jessie_43 = y_0 in
           (((safe_upd_ int_P_int_M_y_0_12) jessie_43) jessie_40))) in void);
          (raise Return) end) end) end) end) end)); (raise Return) end with
   Return -> void end)) { (JC_35: true) }

let f_safety =
 fun (x_0_0 : char_P pointer) (y_0 : int_P pointer) (int_P_int_M_y_0_12 : (int_P, int32) memory ref) (char_P_char_M_x_0_11 : (char_P, int8) memory ref) (char_P_x_0_11_alloc_table : char_P alloc_table) (int_P_y_0_12_alloc_table : int_P alloc_table) ->
  { (JC_33:
    ((JC_27: valid_p(int_P_p_1_alloc_table))
    and ((JC_28: valid_q(int_P_q_2_alloc_table))
        and ((JC_29: valid_p2(int_P_p2_3_alloc_table))
            and ((JC_30: valid_q2(int_P_q2_4_alloc_table))
                and ((JC_31: valid_e(S_e_9_alloc_table))
                    and (JC_32: valid_g(S_g_10_alloc_table)))))))) }
  (let mutable_x_0_0 = ref x_0_0 in
  (init:
  try
   begin
     (let tmp = ref (any_pointer void) in
     (C_6:
     begin
       (let jessie_6 =
       (let jessie_2 =
       (C_4:
       (JC_53:
       (int8_of_integer_ (C_3:
                         ((add_int (integer_of_int32 (C_2:
                                                     (JC_52:
                                                     (int32_of_integer_ 
                                                      (integer_of_int8 
                                                       (C_1:
                                                       (JC_51:
                                                       (((acc_ char_P_x_0_11_alloc_table) !char_P_char_M_x_0_11) !mutable_x_0_0))))))))) (1)))))) in
       (let jessie_5 = !mutable_x_0_0 in
       (JC_54:
       ((((upd_ char_P_x_0_11_alloc_table) char_P_char_M_x_0_11) jessie_5) jessie_2)))) in
       void);
      (C_7:
      begin
        (let jessie_8 = (tmp := !mutable_x_0_0) in void);
       (C_9:
       begin
         (let jessie_10 =
         (mutable_x_0_0 := (C_8: ((shift !mutable_x_0_0) (1)))) in void);
        (C_15:
        begin
          (let jessie_16 =
          (let jessie_12 =
          (C_13:
          (JC_57:
          (int8_of_integer_ (C_12:
                            ((add_int (integer_of_int32 (C_11:
                                                        (JC_56:
                                                        (int32_of_integer_ 
                                                         (integer_of_int8 
                                                          (C_10:
                                                          (JC_55:
                                                          (((acc_ char_P_x_0_11_alloc_table) !char_P_char_M_x_0_11) !mutable_x_0_0))))))))) (1)))))) in
          (let jessie_15 = !mutable_x_0_0 in
          (JC_58:
          ((((upd_ char_P_x_0_11_alloc_table) char_P_char_M_x_0_11) jessie_15) jessie_12)))) in
          void);
         (C_20:
         begin
           (let jessie_22 =
           (let jessie_18 =
           (C_18:
           (JC_60:
           (int32_of_integer_ (C_17:
                              ((add_int (integer_of_int32 (C_16:
                                                          (JC_59:
                                                          (((acc_ int_P_y_0_12_alloc_table) !int_P_int_M_y_0_12) y_0))))) (1)))))) in
           (let jessie_21 = y_0 in
           (JC_61:
           ((((upd_ int_P_y_0_12_alloc_table) int_P_int_M_y_0_12) jessie_21) jessie_18)))) in
           void); (raise Return) end) end) end) end) end)); (raise Return)
   end with Return -> void end))
  { (JC_43:
    ((JC_37: valid_p(int_P_p_1_alloc_table))
    and ((JC_38: valid_q(int_P_q_2_alloc_table))
        and ((JC_39: valid_p2(int_P_p2_3_alloc_table))
            and ((JC_40: valid_q2(int_P_q2_4_alloc_table))
                and ((JC_41: valid_e(S_e_9_alloc_table))
                    and (JC_42: valid_g(S_g_10_alloc_table)))))))) }

let main3_ensures_default =
 fun (tt : unit) ->
  { (JC_116:
    ((JC_110: valid_p(int_P_p_1_alloc_table))
    and ((JC_111: valid_q(int_P_q_2_alloc_table))
        and ((JC_112: valid_p2(int_P_p2_3_alloc_table))
            and ((JC_113: valid_q2(int_P_q2_4_alloc_table))
                and ((JC_114: valid_e(S_e_9_alloc_table))
                    and (JC_115: valid_g(S_g_10_alloc_table)))))))) }
  (init:
  try
   begin
     (let S_c_0_p_0_16 = ref (any_memory void) in
     (let S_b_p_0_16 = ref (any_memory void) in
     (let S_a_p_0_16 = ref (any_memory void) in
     (let S_p_0_16_tag_table = ref (any_tag_table void) in
     (let S_p_0_16_alloc_table = ref (any_alloc_table void) in
     (let p_0 = ref (any_pointer void) in
     (let s1_1 = ref (any_pointer void) in
     (let s2_1 = ref (any_pointer void) in
     (let tmp_0 = ref (any_int32 void) in
     (let tmp_0_0 = ref (any_int32 void) in
     (let tmp_1 = ref (any_int32 void) in
     (let tmp_2 = ref (any_int32 void) in
     (let tmp_3 = ref (any_int32 void) in
     (C_38:
     begin
       (let jessie_180 =
       (s1_1 := (C_37:
                (JC_153:
                (((alloc_struct_S (1)) S_p_0_16_alloc_table) S_p_0_16_tag_table)))) in
       void);
      (C_40:
      begin
        (let jessie_182 =
        (s2_1 := (C_39:
                 (JC_154:
                 (((alloc_struct_S (1)) S_p_0_16_alloc_table) S_p_0_16_tag_table)))) in
        void);
       (C_42:
       begin
         (let jessie_188 =
         (let jessie_184 = (safe_int32_of_integer_ (2)) in
         (let jessie_187 = !s1_1 in
         (((safe_upd_ S_a_p_0_16) jessie_187) jessie_184))) in void);
        (C_44:
        begin
          (let jessie_194 =
          (let jessie_190 = (safe_int32_of_integer_ (4)) in
          (let jessie_193 = !s1_1 in
          (((safe_upd_ S_b_p_0_16) jessie_193) jessie_190))) in void);
         (C_46:
         begin
           (let jessie_200 =
           (let jessie_196 = (safe_int32_of_integer_ (6)) in
           (let jessie_199 = !s1_1 in
           (((safe_upd_ S_c_0_p_0_16) jessie_199) jessie_196))) in void);
          (C_48:
          begin
            (let jessie_206 =
            (let jessie_202 = (safe_int32_of_integer_ (1)) in
            (let jessie_205 = !s2_1 in
            (((safe_upd_ S_a_p_0_16) jessie_205) jessie_202))) in void);
           (C_50:
           begin
             (let jessie_212 =
             (let jessie_208 = (safe_int32_of_integer_ (3)) in
             (let jessie_211 = !s2_1 in
             (((safe_upd_ S_b_p_0_16) jessie_211) jessie_208))) in void);
            (C_52:
            begin
              (let jessie_218 =
              (let jessie_214 = (safe_int32_of_integer_ (5)) in
              (let jessie_217 = !s2_1 in
              (((safe_upd_ S_c_0_p_0_16) jessie_217) jessie_214))) in void);
             (let jessie_221 =
             (if ((neq_int_ (integer_of_int32 c)) (0))
             then (C_54: begin   (p_0 := !s1_1); !p_0 end)
             else (C_53: begin   (p_0 := !s2_1); !p_0 end)) in void);
             (C_56:
             begin
               (let jessie_227 =
               (let jessie_223 = (safe_int32_of_integer_ (7)) in
               (let jessie_226 = !p_0 in
               (((safe_upd_ S_a_p_0_16) jessie_226) jessie_223))) in void);
              (C_58:
              begin
                (let jessie_229 =
                (t := (C_57: ((safe_acc_ !S_b_p_0_16) !p_0))) in void);
               (C_59:
               begin
                 (let jessie_231 = (z := (safe_int32_of_integer_ (2))) in
                 void);
                (let jessie_234 =
                (if ((neq_int_ (integer_of_int32 (C_64:
                                                 (safe_int32_of_integer_ 
                                                  (C_63:
                                                  ((add_int (integer_of_int32 c)) 
                                                   (integer_of_int32 
                                                    (C_62:
                                                    (safe_int32_of_integer_ (1)))))))))) (0))
                then
                 (C_61: begin   (u := (safe_int32_of_integer_ (0))); !u end)
                else
                 (C_60: begin   (u := (safe_int32_of_integer_ (1))); !u end)) in
                void);
                (C_65:
                begin
                  (let jessie_236 = (v := !u) in void);
                 (if ((eq_int_ (integer_of_int32 w)) (integer_of_int32 !v))
                 then (C_66: (let jessie_238 = (z := !u) in void)) else void);
                 (let jessie_246 =
                 begin
                   (let jessie_244 =
                   (if ((neq_int_ (integer_of_int32 (C_76:
                                                    (safe_int32_of_integer_ 
                                                     (C_75:
                                                     ((add_int (integer_of_int32 c)) 
                                                      (integer_of_int32 
                                                       (C_74:
                                                       (safe_int32_of_integer_ (1)))))))))) (0))
                   then
                    (C_73:
                    begin
                      (tmp_0_0 := (safe_int32_of_integer_ (0))); !tmp_0_0 end)
                   else
                    begin
                      (let jessie_242 =
                      (if ((neq_int_ (integer_of_int32 (C_71:
                                                       (safe_int32_of_integer_ 
                                                        (C_70:
                                                        ((add_int (integer_of_int32 c)) 
                                                         (integer_of_int32 
                                                          (C_69:
                                                          (safe_int32_of_integer_ (2)))))))))) (0))
                      then
                       (C_68:
                       begin
                         (tmp_0 := (safe_int32_of_integer_ (1))); !tmp_0 end)
                      else
                       (C_67:
                       begin
                         (tmp_0 := (safe_int32_of_integer_ (2))); !tmp_0 end)) in
                      void);
                     (C_72: begin   (tmp_0_0 := !tmp_0); !tmp_0_0 end) end) in
                   void);
                  (C_78:
                  begin
                    (PTR1 := (C_77: ((shift p2) (integer_of_int32 !tmp_0_0))));
                   !PTR1 end) end in void);
                 (C_80:
                 begin
                   (let jessie_248 = (PTR2 := (C_79: ((shift !PTR1) (1)))) in
                   void);
                  (let jessie_262 =
                  (if ((neq_int_ (integer_of_int32 (C_92:
                                                   (safe_int32_of_integer_ 
                                                    (C_91:
                                                    ((add_int (integer_of_int32 c)) 
                                                     (integer_of_int32 
                                                      (C_90:
                                                      (safe_int32_of_integer_ (10)))))))))) (0))
                  then
                   (C_89:
                   (let jessie_250 = (safe_int32_of_integer_ (96)) in
                   (let jessie_253 = !PTR1 in
                   begin
                     (((safe_upd_ int_P_int_M_p2_3) jessie_253) jessie_250);
                    jessie_250 end)))
                  else
                   begin
                     (let jessie_256 =
                     (if ((neq_int_ (integer_of_int32 (C_85:
                                                      (safe_int32_of_integer_ 
                                                       (C_84:
                                                       ((add_int (integer_of_int32 c)) 
                                                        (integer_of_int32 
                                                         (C_83:
                                                         (safe_int32_of_integer_ (11)))))))))) (0))
                     then
                      (C_82:
                      begin
                        (tmp_1 := (safe_int32_of_integer_ (97))); !tmp_1 end)
                     else
                      (C_81:
                      begin
                        (tmp_1 := (safe_int32_of_integer_ (98))); !tmp_1 end)) in
                     void);
                    (C_87:
                    (let jessie_258 = !tmp_1 in
                    (let jessie_261 = !PTR1 in
                    begin
                      (((safe_upd_ int_P_int_M_p2_3) jessie_261) jessie_258);
                     jessie_258 end))) end) in void);
                  (let jessie_270 =
                  begin
                    (let jessie_268 =
                    (if ((neq_int_ (integer_of_int32 (C_102:
                                                     (safe_int32_of_integer_ 
                                                      (C_101:
                                                      ((add_int (integer_of_int32 c)) 
                                                       (integer_of_int32 
                                                        (C_100:
                                                        (safe_int32_of_integer_ (3)))))))))) (0))
                    then
                     (C_99:
                     begin   (tmp_3 := (safe_int32_of_integer_ (1))); !tmp_3
                     end)
                    else
                     begin
                       (let jessie_266 =
                       (if ((neq_int_ (integer_of_int32 (C_97:
                                                        (safe_int32_of_integer_ 
                                                         (C_96:
                                                         ((add_int (integer_of_int32 c)) 
                                                          (integer_of_int32 
                                                           (C_95:
                                                           (safe_int32_of_integer_ (4)))))))))) (0))
                       then
                        (C_94:
                        begin
                          (tmp_2 := (safe_int32_of_integer_ (2))); !tmp_2 end)
                       else
                        (C_93:
                        begin
                          (tmp_2 := (safe_int32_of_integer_ (4))); !tmp_2 end)) in
                       void); (C_98: begin   (tmp_3 := !tmp_2); !tmp_3 end)
                     end) in void);
                   (C_104:
                   begin
                     (PTR3 := (C_103: ((shift p2) (integer_of_int32 !tmp_3))));
                    !PTR3 end) end in void);
                  (C_106:
                  begin
                    (let jessie_276 =
                    (let jessie_272 = (safe_int32_of_integer_ (99)) in
                    (let jessie_275 = !PTR3 in
                    (((safe_upd_ int_P_int_M_p2_3) jessie_275) jessie_272))) in
                    void);
                   (C_107:
                   begin
                     (let jessie_278 = (PTR4 := !PTR3) in void);
                    (C_109:
                    begin
                      (let jessie_280 =
                      (x_0 := (C_108: ((safe_acc_ !int_P_int_M_p2_3) !PTR1))) in
                      void);
                     (if ((safe_eq_pointer !PTR4) !PTR2)
                     then
                      (let jessie_284 =
                      (C_111:
                      begin
                        (let jessie_282 =
                        (t2 := (C_110: ((safe_acc_ !int_P_int_M_p2_3) !PTR1))) in
                        void);
                       (C_114:
                       begin
                         (v2 := (C_113:
                                (safe_int32_of_integer_ (C_112:
                                                        ((safe_sub_pointer_ !PTR3) !PTR1)))));
                        !v2 end) end) in void) else void);
                     (C_115:
                     begin
                       ((safe_free_parameter S_p_0_16_alloc_table) !s1_1);
                      (C_116:
                      begin
                        ((safe_free_parameter S_p_0_16_alloc_table) !s2_1);
                       (raise Return) end) end) end) end) end) end) end) end)
              end) end) end) end) end) end) end) end) end) end))))))))))))));
    (raise Return) end with Return -> void end) { (JC_118: true) }

let main3_safety =
 fun (tt : unit) ->
  { (JC_116:
    ((JC_110: valid_p(int_P_p_1_alloc_table))
    and ((JC_111: valid_q(int_P_q_2_alloc_table))
        and ((JC_112: valid_p2(int_P_p2_3_alloc_table))
            and ((JC_113: valid_q2(int_P_q2_4_alloc_table))
                and ((JC_114: valid_e(S_e_9_alloc_table))
                    and (JC_115: valid_g(S_g_10_alloc_table)))))))) }
  (init:
  try
   begin
     (let S_c_0_p_0_16 = ref (any_memory void) in
     (let S_b_p_0_16 = ref (any_memory void) in
     (let S_a_p_0_16 = ref (any_memory void) in
     (let S_p_0_16_tag_table = ref (any_tag_table void) in
     (let S_p_0_16_alloc_table = ref (any_alloc_table void) in
     (let p_0 = ref (any_pointer void) in
     (let s1_1 = ref (any_pointer void) in
     (let s2_1 = ref (any_pointer void) in
     (let tmp_0 = ref (any_int32 void) in
     (let tmp_0_0 = ref (any_int32 void) in
     (let tmp_1 = ref (any_int32 void) in
     (let tmp_2 = ref (any_int32 void) in
     (let tmp_3 = ref (any_int32 void) in
     (C_38:
     begin
       (let jessie_74 =
       (s1_1 := (let jessie_73 =
                (C_37:
                (JC_134:
                (((alloc_struct_S_requires (1)) S_p_0_16_alloc_table) S_p_0_16_tag_table))) in
                (JC_135:
                (assert
                { ge_int(offset_max(S_p_0_16_alloc_table, jessie_73), (0)) };
                jessie_73)))) in void);
      (C_40:
      begin
        (let jessie_76 =
        (s2_1 := (let jessie_75 =
                 (C_39:
                 (JC_136:
                 (((alloc_struct_S_requires (1)) S_p_0_16_alloc_table) S_p_0_16_tag_table))) in
                 (JC_137:
                 (assert
                 { ge_int(offset_max(S_p_0_16_alloc_table, jessie_75), (0)) };
                 jessie_75)))) in void);
       (C_42:
       begin
         (let jessie_82 =
         (let jessie_78 = (safe_int32_of_integer_ (2)) in
         (let jessie_81 = !s1_1 in
         (((safe_upd_ S_a_p_0_16) jessie_81) jessie_78))) in void);
        (C_44:
        begin
          (let jessie_88 =
          (let jessie_84 = (safe_int32_of_integer_ (4)) in
          (let jessie_87 = !s1_1 in
          (((safe_upd_ S_b_p_0_16) jessie_87) jessie_84))) in void);
         (C_46:
         begin
           (let jessie_94 =
           (let jessie_90 = (safe_int32_of_integer_ (6)) in
           (let jessie_93 = !s1_1 in
           (((safe_upd_ S_c_0_p_0_16) jessie_93) jessie_90))) in void);
          (C_48:
          begin
            (let jessie_100 =
            (let jessie_96 = (safe_int32_of_integer_ (1)) in
            (let jessie_99 = !s2_1 in
            (((safe_upd_ S_a_p_0_16) jessie_99) jessie_96))) in void);
           (C_50:
           begin
             (let jessie_106 =
             (let jessie_102 = (safe_int32_of_integer_ (3)) in
             (let jessie_105 = !s2_1 in
             (((safe_upd_ S_b_p_0_16) jessie_105) jessie_102))) in void);
            (C_52:
            begin
              (let jessie_112 =
              (let jessie_108 = (safe_int32_of_integer_ (5)) in
              (let jessie_111 = !s2_1 in
              (((safe_upd_ S_c_0_p_0_16) jessie_111) jessie_108))) in void);
             (let jessie_115 =
             (if ((neq_int_ (integer_of_int32 c)) (0))
             then (C_54: begin   (p_0 := !s1_1); !p_0 end)
             else (C_53: begin   (p_0 := !s2_1); !p_0 end)) in void);
             (C_56:
             begin
               (let jessie_121 =
               (let jessie_117 = (safe_int32_of_integer_ (7)) in
               (let jessie_120 = !p_0 in
               (JC_138:
               ((((upd_ !S_p_0_16_alloc_table) S_a_p_0_16) jessie_120) jessie_117)))) in
               void);
              (C_58:
              begin
                (let jessie_123 =
                (t := (C_57:
                      (JC_139:
                      (((acc_ !S_p_0_16_alloc_table) !S_b_p_0_16) !p_0)))) in
                void);
               (C_59:
               begin
                 (let jessie_125 = (z := (safe_int32_of_integer_ (2))) in
                 void);
                (let jessie_128 =
                (if ((neq_int_ (integer_of_int32 (C_64:
                                                 (JC_140:
                                                 (int32_of_integer_ (C_63:
                                                                    ((add_int 
                                                                    (integer_of_int32 c)) 
                                                                    (integer_of_int32 
                                                                    (C_62:
                                                                    (safe_int32_of_integer_ (1))))))))))) (0))
                then
                 (C_61: begin   (u := (safe_int32_of_integer_ (0))); !u end)
                else
                 (C_60: begin   (u := (safe_int32_of_integer_ (1))); !u end)) in
                void);
                (C_65:
                begin
                  (let jessie_130 = (v := !u) in void);
                 (if ((eq_int_ (integer_of_int32 w)) (integer_of_int32 !v))
                 then (C_66: (let jessie_132 = (z := !u) in void)) else void);
                 (let jessie_140 =
                 begin
                   (let jessie_138 =
                   (if ((neq_int_ (integer_of_int32 (C_76:
                                                    (JC_141:
                                                    (int32_of_integer_ 
                                                     (C_75:
                                                     ((add_int (integer_of_int32 c)) 
                                                      (integer_of_int32 
                                                       (C_74:
                                                       (safe_int32_of_integer_ (1))))))))))) (0))
                   then
                    (C_73:
                    begin
                      (tmp_0_0 := (safe_int32_of_integer_ (0))); !tmp_0_0 end)
                   else
                    begin
                      (let jessie_136 =
                      (if ((neq_int_ (integer_of_int32 (C_71:
                                                       (JC_142:
                                                       (int32_of_integer_ 
                                                        (C_70:
                                                        ((add_int (integer_of_int32 c)) 
                                                         (integer_of_int32 
                                                          (C_69:
                                                          (safe_int32_of_integer_ (2))))))))))) (0))
                      then
                       (C_68:
                       begin
                         (tmp_0 := (safe_int32_of_integer_ (1))); !tmp_0 end)
                      else
                       (C_67:
                       begin
                         (tmp_0 := (safe_int32_of_integer_ (2))); !tmp_0 end)) in
                      void);
                     (C_72: begin   (tmp_0_0 := !tmp_0); !tmp_0_0 end) end) in
                   void);
                  (C_78:
                  begin
                    (PTR1 := (C_77: ((shift p2) (integer_of_int32 !tmp_0_0))));
                   !PTR1 end) end in void);
                 (C_80:
                 begin
                   (let jessie_142 = (PTR2 := (C_79: ((shift !PTR1) (1)))) in
                   void);
                  (let jessie_156 =
                  (if ((neq_int_ (integer_of_int32 (C_92:
                                                   (JC_143:
                                                   (int32_of_integer_ 
                                                    (C_91:
                                                    ((add_int (integer_of_int32 c)) 
                                                     (integer_of_int32 
                                                      (C_90:
                                                      (safe_int32_of_integer_ (10))))))))))) (0))
                  then
                   (C_89:
                   (let jessie_144 = (safe_int32_of_integer_ (96)) in
                   (let jessie_147 = !PTR1 in
                   begin
                     (JC_144:
                     ((((upd_ !int_P_p2_3_alloc_table) int_P_int_M_p2_3) jessie_147) jessie_144));
                    jessie_144 end)))
                  else
                   begin
                     (let jessie_150 =
                     (if ((neq_int_ (integer_of_int32 (C_85:
                                                      (JC_145:
                                                      (int32_of_integer_ 
                                                       (C_84:
                                                       ((add_int (integer_of_int32 c)) 
                                                        (integer_of_int32 
                                                         (C_83:
                                                         (safe_int32_of_integer_ (11))))))))))) (0))
                     then
                      (C_82:
                      begin
                        (tmp_1 := (safe_int32_of_integer_ (97))); !tmp_1 end)
                     else
                      (C_81:
                      begin
                        (tmp_1 := (safe_int32_of_integer_ (98))); !tmp_1 end)) in
                     void);
                    (C_87:
                    (let jessie_152 = !tmp_1 in
                    (let jessie_155 = !PTR1 in
                    begin
                      (JC_146:
                      ((((upd_ !int_P_p2_3_alloc_table) int_P_int_M_p2_3) jessie_155) jessie_152));
                     jessie_152 end))) end) in void);
                  (let jessie_164 =
                  begin
                    (let jessie_162 =
                    (if ((neq_int_ (integer_of_int32 (C_102:
                                                     (JC_147:
                                                     (int32_of_integer_ 
                                                      (C_101:
                                                      ((add_int (integer_of_int32 c)) 
                                                       (integer_of_int32 
                                                        (C_100:
                                                        (safe_int32_of_integer_ (3))))))))))) (0))
                    then
                     (C_99:
                     begin   (tmp_3 := (safe_int32_of_integer_ (1))); !tmp_3
                     end)
                    else
                     begin
                       (let jessie_160 =
                       (if ((neq_int_ (integer_of_int32 (C_97:
                                                        (JC_148:
                                                        (int32_of_integer_ 
                                                         (C_96:
                                                         ((add_int (integer_of_int32 c)) 
                                                          (integer_of_int32 
                                                           (C_95:
                                                           (safe_int32_of_integer_ (4))))))))))) (0))
                       then
                        (C_94:
                        begin
                          (tmp_2 := (safe_int32_of_integer_ (2))); !tmp_2 end)
                       else
                        (C_93:
                        begin
                          (tmp_2 := (safe_int32_of_integer_ (4))); !tmp_2 end)) in
                       void); (C_98: begin   (tmp_3 := !tmp_2); !tmp_3 end)
                     end) in void);
                   (C_104:
                   begin
                     (PTR3 := (C_103: ((shift p2) (integer_of_int32 !tmp_3))));
                    !PTR3 end) end in void);
                  (C_106:
                  begin
                    (let jessie_170 =
                    (let jessie_166 = (safe_int32_of_integer_ (99)) in
                    (let jessie_169 = !PTR3 in
                    (JC_149:
                    ((((upd_ !int_P_p2_3_alloc_table) int_P_int_M_p2_3) jessie_169) jessie_166)))) in
                    void);
                   (C_107:
                   begin
                     (let jessie_172 = (PTR4 := !PTR3) in void);
                    (C_109:
                    begin
                      (let jessie_174 =
                      (x_0 := (C_108:
                              (JC_150:
                              (((acc_ !int_P_p2_3_alloc_table) !int_P_int_M_p2_3) !PTR1)))) in
                      void);
                     (if ((eq_pointer !PTR4) !PTR2)
                     then
                      (let jessie_178 =
                      (C_111:
                      begin
                        (let jessie_176 =
                        (t2 := (C_110:
                               (JC_151:
                               (((acc_ !int_P_p2_3_alloc_table) !int_P_int_M_p2_3) !PTR1)))) in
                        void);
                       (C_114:
                       begin
                         (v2 := (C_113:
                                (JC_152:
                                (int32_of_integer_ (C_112:
                                                   ((sub_pointer_ !PTR3) !PTR1))))));
                        !v2 end) end) in void) else void);
                     (C_115:
                     begin
                       ((free_parameter S_p_0_16_alloc_table) !s1_1);
                      (C_116:
                      begin
                        ((free_parameter S_p_0_16_alloc_table) !s2_1);
                       (raise Return) end) end) end) end) end) end) end) end)
              end) end) end) end) end) end) end) end) end) end))))))))))))));
    (raise Return) end with Return -> void end)
  { (JC_126:
    ((JC_120: valid_p(int_P_p_1_alloc_table))
    and ((JC_121: valid_q(int_P_q_2_alloc_table))
        and ((JC_122: valid_p2(int_P_p2_3_alloc_table))
            and ((JC_123: valid_q2(int_P_q2_4_alloc_table))
                and ((JC_124: valid_e(S_e_9_alloc_table))
                    and (JC_125: valid_g(S_g_10_alloc_table)))))))) }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C fs248_short.jessie --quiet -f fs248_short.makefile project
why --project [...] why/fs248_short.why
<project name="fs248_short" context="why/fs248_short_ctx.why">
  <function name="Function main3">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/fs248_short_po49.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "31" begin = "17" end = "19"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/fs248_short_po50.why">
      <location file = "why/fs248_short.why" line = "1243" begin = "18" end = "74"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/fs248_short_po51.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "31" begin = "28" end = "30"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/fs248_short_po52.why">
      <location file = "why/fs248_short.why" line = "1254" begin = "19" end = "75"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/fs248_short_po53.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "185" begin = "15" end = "33"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po54.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "185" begin = "15" end = "33"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po55.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "34" begin = "6" end = "10"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po56.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "34" begin = "6" end = "10"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po57.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "37" begin = "7" end = "10"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po58.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "37" begin = "7" end = "10"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po59.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "45" begin = "18" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po60.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "45" begin = "18" end = "21"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po61.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "45" begin = "27" end = "30"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po62.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "45" begin = "27" end = "30"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po63.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "47" begin = "11" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po64.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "47" begin = "11" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po65.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "47" begin = "10" end = "40"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po66.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "47" begin = "10" end = "40"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po67.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "47" begin = "25" end = "29"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po68.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "47" begin = "25" end = "29"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po69.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "208" begin = "18" end = "45"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po70.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "208" begin = "18" end = "45"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po71.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "48" begin = "16" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po72.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "48" begin = "16" end = "19"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po73.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "48" begin = "25" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po74.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "48" begin = "25" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po75.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "221" begin = "16" end = "41"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po76.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "221" begin = "16" end = "41"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po77.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "51" begin = "6" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po78.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "51" begin = "6" end = "11"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po79.why">
      <location file = "why/fs248_short.why" line = "1481" begin = "26" end = "50"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/fs248_short_po80.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "54" begin = "11" end = "16"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po81.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "54" begin = "11" end = "16"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po82.why">
      <location file = "why/fs248_short.why" line = "1496" begin = "52" end = "78"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/fs248_short_po83.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "55" begin = "11" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po84.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "55" begin = "11" end = "22"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po85.why">
      <location file = "why/fs248_short.why" line = "1500" begin = "24" end = "67"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/fs248_short_po86.why">
      <location file = "why/fs248_short.why" line = "1503" begin = "25" end = "68"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/fs248_short_po87.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "29" begin = "5" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/fs248_short_po88.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "29" begin = "5" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/fs248_short_po89.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "29" begin = "5" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/fs248_short_po90.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "29" begin = "5" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/fs248_short_po91.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "29" begin = "5" end = "10"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function f2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/fs248_short_po1.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "10" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po2.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "10" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po3.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "10" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po4.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "10" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po5.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "10" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po6.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "10" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po7.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "66" begin = "15" end = "172"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po8.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "66" begin = "15" end = "172"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po9.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "12" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po10.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "12" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po11.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "12" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po12.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "12" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po13.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "12" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po14.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "12" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po15.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "69" begin = "15" end = "166"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po16.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "69" begin = "15" end = "166"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po17.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "8" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/fs248_short_po18.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "8" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/fs248_short_po19.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "8" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/fs248_short_po20.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "8" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/fs248_short_po21.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "8" begin = "5" end = "7"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function f">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/fs248_short_po22.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "2" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po23.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "2" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po24.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "2" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po25.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "2" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po26.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "2" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po27.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "2" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po28.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "48" begin = "14" end = "156"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po29.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "48" begin = "14" end = "156"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po30.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "4" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po31.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "4" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po32.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "4" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po33.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "4" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po34.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "4" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po35.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "4" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po36.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "52" begin = "15" end = "166"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po37.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "52" begin = "15" end = "166"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po38.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "5" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po39.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "5" begin = "3" end = "5"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po40.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "5" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po41.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "5" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/fs248_short_po42.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "54" begin = "15" end = "89"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po43.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.jessie/fs248_short.jc" line = "54" begin = "15" end = "89"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/fs248_short_po44.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "1" begin = "5" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/fs248_short_po45.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "1" begin = "5" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/fs248_short_po46.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "1" begin = "5" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/fs248_short_po47.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "1" begin = "5" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/fs248_short_po48.why">
      <location file = "PPCHOME/tests/jessie/fs248_short.c" line = "1" begin = "5" end = "6"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s2) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s3))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type S

type char_P

type e_9

type g_10

type int32

type int8

type int_P

type p2_3

type p_1

type padding

type q2_4

type q_2

type void_P

logic A : int32

logic B : int32

logic C : int32

logic D : int32

logic E : int32

logic F : int32

logic G : int32

logic S_tag : S tag_id

axiom S_int: (int_of_tag(S_tag) = 1)

logic S_of_pointer_address : unit pointer -> S pointer

logic p : int_P pointer

axiom S_of_pointer_address_of_pointer_addr:
  (forall p:S pointer. (p = S_of_pointer_address(pointer_address(p))))

axiom S_parenttag_bottom: parenttag(S_tag, bottom_tag)

axiom S_tags:
  (forall x:S pointer.
    (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic c : int32

logic c1 : int32

logic c2 : int32

logic c3 : int32

logic c4 : int32

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic e : S pointer

logic integer_of_int32 : int32 -> int

logic y : int32

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic g : S pointer

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic int_P_tag : int_P tag_id

axiom int_P_int: (int_of_tag(int_P_tag) = 1)

logic int_P_of_pointer_address : unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr:
  (forall p:int_P pointer.
    (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom: parenttag(int_P_tag, bottom_tag)

axiom int_P_tags:
  (forall x:int_P pointer.
    (forall int_P_tag_table:int_P tag_table. instanceof(int_P_tag_table, x,
      int_P_tag)))

predicate left_valid_struct_S(p: S pointer, a: int,
  S_alloc_table: S alloc_table) = (offset_min(S_alloc_table, p) <= a)

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_int_P(p: int_P pointer, a: int,
  int_P_alloc_table: int_P alloc_table) = (offset_min(int_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

logic p2 : int_P pointer

axiom pointer_addr_of_S_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(S_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

logic q : int_P pointer

logic q2 : int_P pointer

predicate right_valid_struct_S(p: S pointer, b: int,
  S_alloc_table: S alloc_table) = (offset_max(S_alloc_table, p) >= b)

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_int_P(p: int_P pointer, b: int,
  int_P_alloc_table: int_P alloc_table) = (offset_max(int_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table) =
  ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table) =
  ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

logic tx : int32

logic ty : int32

logic tz : int32

logic tz1 : int32

logic tz2 : int32

logic tz3 : int32

predicate valid_bitvector_struct_S(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_e(S_e_9_alloc_table: S alloc_table) =
  ((offset_min(S_e_9_alloc_table, e) <= 0) and (offset_max(S_e_9_alloc_table,
   e) >= 0))

predicate valid_g(S_g_10_alloc_table: S alloc_table) =
  ((offset_min(S_g_10_alloc_table, g) <= 0) and
   (offset_max(S_g_10_alloc_table, g) >= 0))

predicate valid_p(int_P_p_1_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_p_1_alloc_table, p) <= 0) and
   (offset_max(int_P_p_1_alloc_table, p) >= 4))

predicate valid_p2(int_P_p2_3_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_p2_3_alloc_table, p2) <= 0) and
   (offset_max(int_P_p2_3_alloc_table, p2) >= 4))

predicate valid_q(int_P_q_2_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_q_2_alloc_table, q) <= 0) and
   (offset_max(int_P_q_2_alloc_table, q) >= 4))

predicate valid_q2(int_P_q2_4_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_q2_4_alloc_table, q2) <= 0) and
   (offset_max(int_P_q2_4_alloc_table, q2) >= 4))

predicate valid_root_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table) =
  ((offset_min(S_alloc_table, p) <= a) and (offset_max(S_alloc_table,
   p) >= b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_S(p: S pointer, a: int, b: int,
  S_alloc_table: S alloc_table) =
  ((offset_min(S_alloc_table, p) <= a) and (offset_max(S_alloc_table,
   p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

logic w : int32

