Options are: -journal-disable -cpp-extra-args=-I PPCHOME/share/jessie -jessie -jessie-gen-only all_zeros.c
[kernel] preprocessing with "gcc -C -E -I. -I PPCHOME/share/jessie -dD all_zeros.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir all_zeros.jessie
[jessie] File all_zeros.jessie/all_zeros.jc written.
[jessie] File all_zeros.jessie/all_zeros.cloc written.
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag int_P = {
  int32 int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

int32 all_zeros(int_P[..] t_0, int32 n_0)
  requires (C_15 : (((C_17 : (\offset_min(t_0) <= 0)) &&
                      (C_18 : (\offset_max(t_0) >= n_0))) &&
                     (C_19 : (n_0 >= 0))));
behavior default:
  ensures (C_14 : ((\result != 0) <==>
                    (\forall integer i_0;
                      (((0 <= i_0) && (i_0 < \at(n_0,Old))) ==>
                        ((\at(t_0,Old) + i_0).int_M == 0)))));
{  
   (var int32 __retres);
   
   {  
      {  
         loop 
         behavior default:
           invariant (C_2 : (((C_4 : (0 <= n_0)) &&
                               (C_5 : (n_0 <= \at(n_0,Pre)))) &&
                              (C_6 : (\forall int32 i;
                                       (((n_0 <= i) && (i < \at(n_0,Pre))) ==>
                                         ((t_0 + i).int_M == 0))))));
         variant (C_1 : n_0);
         while (true)
         {  
            {  (C_9 : (n_0 = (C_8 : ((C_7 : (n_0 - 1)) :> int32))));
               (if (n_0 >= 0) then (if (! ((C_11 : (C_10 : (t_0 + n_0)).int_M) !=
                                            0)) then () else 
                                   (goto while_0_break)) else 
               (goto while_0_break))
            }
         };
         (while_0_break : ())
      };
      (C_13 : (__retres = (C_12 : ((if (n_0 < 0) then 1 else 0) :> int32))));
      
      (return __retres)
   }
}

int32 all_zeros_1(int_P[..] t, int32 n)
  requires (C_36 : (((C_38 : (\offset_min(t) <= 0)) &&
                      (C_39 : (\offset_max(t) >= n))) &&
                     (C_40 : (n >= 0))));
behavior default:
  ensures (C_35 : ((\result != 0) <==>
                    (\forall integer i_2;
                      (((0 <= i_2) && (i_2 < \at(n,Old))) ==>
                        ((\at(t,Old) + i_2).int_M == 0)))));
{  
   (var int32 k);
   
   (var int32 tmp);
   
   (var int32 __retres_0);
   
   {  (C_20 : (k = 0));
      
      {  
         loop 
         behavior default:
           invariant (C_22 : (((C_24 : (0 <= k)) && (C_25 : (k <= n))) &&
                               (C_26 : (\forall integer i_1;
                                         (((0 <= i_1) && (i_1 < k)) ==>
                                           ((t + i_1).int_M == 0))))));
         variant (C_21 : (n - k));
         while (true)
         {  (if (k < n) then 
            {  
               {  
                  {  (C_27 : (tmp = k));
                     (C_30 : (k = (C_29 : ((C_28 : (k + 1)) :> int32))))
                  };
                  ()
               };
               (if ((C_32 : (C_31 : (t + tmp)).int_M) != 0) then 
               (goto while_1_break) else ())
            } else 
            (goto while_1_break))
         };
         (while_1_break : ())
      };
      (C_34 : (__retres_0 = (C_33 : ((if (k == n) then 1 else 0) :> int32))));
      
      (return __retres_0)
   }
}

int32 all_zeros_0(int_P[..] t_1, int32 n_1)
  requires (C_56 : (((C_58 : (\offset_min(t_1) <= 0)) &&
                      (C_59 : (\offset_max(t_1) >= n_1))) &&
                     (C_60 : (n_1 >= 0))));
behavior default:
  ensures (C_55 : ((\result != 0) <==>
                    (\forall integer i_4;
                      (((0 <= i_4) && (i_4 < \at(n_1,Old))) ==>
                        ((\at(t_1,Old) + i_4).int_M == 0)))));
{  
   (var int32 k_0);
   
   (var int32 __retres_1);
   
   {  (C_41 : (k_0 = 0));
      
      {  
         loop 
         behavior default:
           invariant (C_43 : (((C_45 : (0 <= k_0)) && (C_46 : (k_0 <= n_1))) &&
                               (C_47 : (\forall integer i_3;
                                         (((0 <= i_3) && (i_3 < k_0)) ==>
                                           ((t_1 + i_3).int_M == 0))))));
         variant (C_42 : (n_1 - k_0));
         while (true)
         {  
            {  (if (k_0 < n_1) then () else 
               (goto while_2_break));
               (if ((C_50 : (C_49 : (t_1 + k_0)).int_M) != 0) then 
               {  (C_48 : (__retres_1 = 0));
                  
                  (goto return_label)
               } else ());
               (C_53 : (k_0 = (C_52 : ((C_51 : (k_0 + 1)) :> int32))))
            }
         };
         (while_2_break : ())
      };
      (C_54 : (__retres_1 = 1));
      (return_label : 
      (return __retres_1))
   }
}
WHYLIB=WHYHOME/lib WHYHOME/bin/jessie.opt -why-opt -split-user-conj -why-opt -fast-wp -locs all_zeros.jessie/all_zeros.cloc all_zeros.jessie/all_zeros.jc
type char_P

type int32

type int8

type int_P

type padding

type void_P

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Goto_while_2_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

predicate left_valid_struct_char_P(p:char_P pointer, a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_int_P(p:int_P pointer, a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer, a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer, b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_int_P(p:int_P pointer, b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer, b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter all_zeros :
 t_0:int_P pointer ->
  n_0:int32 ->
   int_P_t_0_1_alloc_table:int_P alloc_table ->
    int_P_int_M_t_0_1:(int_P, int32) memory ->
     { } int32
     { (JC_12:
       (neq_int(integer_of_int32(result), (0))
       <-> (forall i_0:int.
            ((le_int((0), i_0) and lt_int(i_0, integer_of_int32(n_0@))) ->
             eq_int(integer_of_int32(select(int_P_int_M_t_0_1,
                                     shift(t_0@, i_0))),
             (0)))))) }

parameter all_zeros_0 :
 t_1:int_P pointer ->
  n_1:int32 ->
   int_P_t_1_3_alloc_table:int_P alloc_table ->
    int_P_int_M_t_1_3:(int_P, int32) memory ->
     { } int32
     { (JC_76:
       (neq_int(integer_of_int32(result), (0))
       <-> (forall i_4:int.
            ((le_int((0), i_4) and lt_int(i_4, integer_of_int32(n_1@))) ->
             eq_int(integer_of_int32(select(int_P_int_M_t_1_3,
                                     shift(t_1@, i_4))),
             (0)))))) }

parameter all_zeros_0_requires :
 t_1:int_P pointer ->
  n_1:int32 ->
   int_P_t_1_3_alloc_table:int_P alloc_table ->
    int_P_int_M_t_1_3:(int_P, int32) memory ->
     { (JC_68:
       ((JC_65: le_int(offset_min(int_P_t_1_3_alloc_table, t_1), (0)))
       and ((JC_66:
            ge_int(offset_max(int_P_t_1_3_alloc_table, t_1),
            integer_of_int32(n_1)))
           and (JC_67: ge_int(integer_of_int32(n_1), (0))))))}
     int32
     { (JC_76:
       (neq_int(integer_of_int32(result), (0))
       <-> (forall i_4:int.
            ((le_int((0), i_4) and lt_int(i_4, integer_of_int32(n_1@))) ->
             eq_int(integer_of_int32(select(int_P_int_M_t_1_3,
                                     shift(t_1@, i_4))),
             (0)))))) }

parameter all_zeros_1 :
 t:int_P pointer ->
  n:int32 ->
   int_P_t_2_alloc_table:int_P alloc_table ->
    int_P_int_M_t_2:(int_P, int32) memory ->
     { } int32
     { (JC_44:
       (neq_int(integer_of_int32(result), (0))
       <-> (forall i_2:int.
            ((le_int((0), i_2) and lt_int(i_2, integer_of_int32(n@))) ->
             eq_int(integer_of_int32(select(int_P_int_M_t_2, shift(t@, i_2))),
             (0)))))) }

parameter all_zeros_1_requires :
 t:int_P pointer ->
  n:int32 ->
   int_P_t_2_alloc_table:int_P alloc_table ->
    int_P_int_M_t_2:(int_P, int32) memory ->
     { (JC_36:
       ((JC_33: le_int(offset_min(int_P_t_2_alloc_table, t), (0)))
       and ((JC_34:
            ge_int(offset_max(int_P_t_2_alloc_table, t), integer_of_int32(n)))
           and (JC_35: ge_int(integer_of_int32(n), (0))))))}
     int32
     { (JC_44:
       (neq_int(integer_of_int32(result), (0))
       <-> (forall i_2:int.
            ((le_int((0), i_2) and lt_int(i_2, integer_of_int32(n@))) ->
             eq_int(integer_of_int32(select(int_P_int_M_t_2, shift(t@, i_2))),
             (0)))))) }

parameter all_zeros_requires :
 t_0:int_P pointer ->
  n_0:int32 ->
   int_P_t_0_1_alloc_table:int_P alloc_table ->
    int_P_int_M_t_0_1:(int_P, int32) memory ->
     { (JC_4:
       ((JC_1: le_int(offset_min(int_P_t_0_1_alloc_table, t_0), (0)))
       and ((JC_2:
            ge_int(offset_max(int_P_t_0_1_alloc_table, t_0),
            integer_of_int32(n_0)))
           and (JC_3: ge_int(integer_of_int32(n_0), (0))))))}
     int32
     { (JC_12:
       (neq_int(integer_of_int32(result), (0))
       <-> (forall i_0:int.
            ((le_int((0), i_0) and lt_int(i_0, integer_of_int32(n_0@))) ->
             eq_int(integer_of_int32(select(int_P_int_M_t_0_1,
                                     shift(t_0@, i_0))),
             (0)))))) }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let all_zeros_0_ensures_default =
 fun (t_1 : int_P pointer) (n_1 : int32) (int_P_t_1_3_alloc_table : int_P alloc_table) (int_P_int_M_t_1_3 : (int_P, int32) memory) ->
  { (JC_73:
    ((JC_70: le_int(offset_min(int_P_t_1_3_alloc_table, t_1), (0)))
    and ((JC_71:
         ge_int(offset_max(int_P_t_1_3_alloc_table, t_1),
         integer_of_int32(n_1)))
        and (JC_72: ge_int(integer_of_int32(n_1), (0)))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let k_0 = ref (any_int32 void) in
     (let __retres_1 = ref (any_int32 void) in
     try
      (let jessie_81 =
      (C_41:
      begin
        (let jessie_70 = (k_0 := (safe_int32_of_integer_ (0))) in void);
       try
        (let jessie_78 =
        begin
          (loop_6:
          while true do
          { invariant
              (JC_92:
              ((JC_89: le_int((0), integer_of_int32(k_0)))
              and ((JC_90:
                   le_int(integer_of_int32(k_0), integer_of_int32(n_1)))
                  and (JC_91:
                      (forall i_3:int.
                       ((le_int((0), i_3)
                        and lt_int(i_3, integer_of_int32(k_0))) ->
                        eq_int(integer_of_int32(select(int_P_int_M_t_1_3,
                                                shift(t_1, i_3))),
                        (0))))))))  }
           begin
             [ { } unit { true } ];
            try
             (let jessie_77 =
             begin
               (let jessie_76 =
               begin
                 (if ((lt_int_ (integer_of_int32 !k_0)) (integer_of_int32 n_1))
                 then void
                 else
                  (let jessie_71 = (raise (Goto_while_2_break_exc void)) in
                  void));
                (if ((neq_int_ (integer_of_int32 (C_50:
                                                 ((safe_acc_ int_P_int_M_t_1_3) 
                                                  (C_49:
                                                  ((shift t_1) (integer_of_int32 !k_0))))))) (0))
                then
                 (let jessie_74 =
                 (C_48:
                 begin
                   (let jessie_73 =
                   (__retres_1 := (safe_int32_of_integer_ (0))) in void);
                  (raise (Return_label_exc void)) end) in void) else void);
                (C_53:
                begin
                  (k_0 := (C_52:
                          (safe_int32_of_integer_ (C_51:
                                                  ((add_int (integer_of_int32 !k_0)) (1))))));
                 !k_0 end) end in void); (raise (Loop_continue_exc void)) end in
             void) with Loop_continue_exc jessie_10 -> void end end done);
         (raise (Goto_while_2_break_exc void)) end in void) with
        Goto_while_2_break_exc jessie_7 -> (while_2_break: void) end;
       (C_54:
       begin
         (let jessie_80 = (__retres_1 := (safe_int32_of_integer_ (1))) in
         void); (raise (Return_label_exc void)) end) end) in void) with
      Return_label_exc jessie_8 ->
      (return_label: begin   (return := !__retres_1); (raise Return) end) end));
    absurd  end with Return -> !return end))
  { (JC_75:
    (neq_int(integer_of_int32(result), (0))
    <-> (forall i_4:int.
         ((le_int((0), i_4) and lt_int(i_4, integer_of_int32(n_1@))) ->
          eq_int(integer_of_int32(select(int_P_int_M_t_1_3, shift(t_1@, i_4))),
          (0)))))) }

let all_zeros_0_safety =
 fun (t_1 : int_P pointer) (n_1 : int32) (int_P_t_1_3_alloc_table : int_P alloc_table) (int_P_int_M_t_1_3 : (int_P, int32) memory) ->
  { (JC_73:
    ((JC_70: le_int(offset_min(int_P_t_1_3_alloc_table, t_1), (0)))
    and ((JC_71:
         ge_int(offset_max(int_P_t_1_3_alloc_table, t_1),
         integer_of_int32(n_1)))
        and (JC_72: ge_int(integer_of_int32(n_1), (0)))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let k_0 = ref (any_int32 void) in
     (let __retres_1 = ref (any_int32 void) in
     try
      (let jessie_67 =
      (C_41:
      begin
        (let jessie_56 = (k_0 := (safe_int32_of_integer_ (0))) in void);
       try
        (let jessie_64 =
        begin
          (loop_5:
          while true do
          { invariant (JC_84: true)
            variant (JC_88 : sub_int(integer_of_int32(n_1),
                             integer_of_int32(k_0))) }
           begin
             [ { } unit reads k_0
               { (JC_82:
                 ((JC_79: le_int((0), integer_of_int32(k_0)))
                 and ((JC_80:
                      le_int(integer_of_int32(k_0), integer_of_int32(n_1)))
                     and (JC_81:
                         (forall i_3:int.
                          ((le_int((0), i_3)
                           and lt_int(i_3, integer_of_int32(k_0))) ->
                           eq_int(integer_of_int32(select(int_P_int_M_t_1_3,
                                                   shift(t_1, i_3))),
                           (0)))))))) } ];
            try
             (let jessie_63 =
             begin
               (let jessie_62 =
               begin
                 (if ((lt_int_ (integer_of_int32 !k_0)) (integer_of_int32 n_1))
                 then void
                 else
                  (let jessie_57 = (raise (Goto_while_2_break_exc void)) in
                  void));
                (if ((neq_int_ (integer_of_int32 (C_50:
                                                 (JC_86:
                                                 ((((offset_acc_ int_P_t_1_3_alloc_table) int_P_int_M_t_1_3) t_1) 
                                                  (integer_of_int32 !k_0)))))) (0))
                then
                 (let jessie_60 =
                 (C_48:
                 begin
                   (let jessie_59 =
                   (__retres_1 := (safe_int32_of_integer_ (0))) in void);
                  (raise (Return_label_exc void)) end) in void) else void);
                (C_53:
                begin
                  (k_0 := (C_52:
                          (JC_87:
                          (int32_of_integer_ (C_51:
                                             ((add_int (integer_of_int32 !k_0)) (1)))))));
                 !k_0 end) end in void); (raise (Loop_continue_exc void)) end in
             void) with Loop_continue_exc jessie_10 -> void end end done);
         (raise (Goto_while_2_break_exc void)) end in void) with
        Goto_while_2_break_exc jessie_7 -> (while_2_break: void) end;
       (C_54:
       begin
         (let jessie_66 = (__retres_1 := (safe_int32_of_integer_ (1))) in
         void); (raise (Return_label_exc void)) end) end) in void) with
      Return_label_exc jessie_8 ->
      (return_label: begin   (return := !__retres_1); (raise Return) end) end));
    absurd  end with Return -> !return end)) { true }

let all_zeros_1_ensures_default =
 fun (t : int_P pointer) (n : int32) (int_P_t_2_alloc_table : int_P alloc_table) (int_P_int_M_t_2 : (int_P, int32) memory) ->
  { (JC_41:
    ((JC_38: le_int(offset_min(int_P_t_2_alloc_table, t), (0)))
    and ((JC_39:
         ge_int(offset_max(int_P_t_2_alloc_table, t), integer_of_int32(n)))
        and (JC_40: ge_int(integer_of_int32(n), (0)))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let k = ref (any_int32 void) in
     (let tmp = ref (any_int32 void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_20:
     begin
       (let jessie_43 = (k := (safe_int32_of_integer_ (0))) in void);
      try
       (let jessie_51 =
       begin
         (loop_4:
         while true do
         { invariant
             (JC_61:
             ((JC_58: le_int((0), integer_of_int32(k)))
             and ((JC_59: le_int(integer_of_int32(k), integer_of_int32(n)))
                 and (JC_60:
                     (forall i_1:int.
                      ((le_int((0), i_1)
                       and lt_int(i_1, integer_of_int32(k))) ->
                       eq_int(integer_of_int32(select(int_P_int_M_t_2,
                                               shift(t, i_1))),
                       (0))))))))  }
          begin
            [ { } unit { true } ];
           try
            (let jessie_50 =
            begin
              (if ((lt_int_ (integer_of_int32 !k)) (integer_of_int32 n))
              then
               begin
                 (let jessie_47 =
                 (C_27:
                 begin
                   (let jessie_45 = (tmp := !k) in void);
                  (C_30:
                  begin
                    (k := (C_29:
                          (safe_int32_of_integer_ (C_28:
                                                  ((add_int (integer_of_int32 !k)) (1))))));
                   !k end) end) in void); void;
                (if ((neq_int_ (integer_of_int32 (C_32:
                                                 ((safe_acc_ int_P_int_M_t_2) 
                                                  (C_31:
                                                  ((shift t) (integer_of_int32 !tmp))))))) (0))
                then
                 (let jessie_48 = (raise (Goto_while_1_break_exc void)) in
                 void) else void) end
              else
               (let jessie_49 = (raise (Goto_while_1_break_exc void)) in
               void)); (raise (Loop_continue_exc void)) end in void) with
            Loop_continue_exc jessie_6 -> void end end done);
        (raise (Goto_while_1_break_exc void)) end in void) with
       Goto_while_1_break_exc jessie_4 -> (while_1_break: void) end;
      (C_34:
      begin
        (let jessie_53 =
        (__retres_0 := (C_33:
                       (safe_int32_of_integer_ (if ((eq_int_ (integer_of_int32 !k)) 
                                                    (integer_of_int32 n))
                                               then (1) else (0))))) in void);
       (return := !__retres_0); (raise Return) end) end)))); absurd  end with
   Return -> !return end))
  { (JC_43:
    (neq_int(integer_of_int32(result), (0))
    <-> (forall i_2:int.
         ((le_int((0), i_2) and lt_int(i_2, integer_of_int32(n@))) ->
          eq_int(integer_of_int32(select(int_P_int_M_t_2, shift(t@, i_2))),
          (0)))))) }

let all_zeros_1_safety =
 fun (t : int_P pointer) (n : int32) (int_P_t_2_alloc_table : int_P alloc_table) (int_P_int_M_t_2 : (int_P, int32) memory) ->
  { (JC_41:
    ((JC_38: le_int(offset_min(int_P_t_2_alloc_table, t), (0)))
    and ((JC_39:
         ge_int(offset_max(int_P_t_2_alloc_table, t), integer_of_int32(n)))
        and (JC_40: ge_int(integer_of_int32(n), (0)))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let k = ref (any_int32 void) in
     (let tmp = ref (any_int32 void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_20:
     begin
       (let jessie_30 = (k := (safe_int32_of_integer_ (0))) in void);
      try
       (let jessie_38 =
       begin
         (loop_3:
         while true do
         { invariant (JC_52: true)
           variant (JC_56 : sub_int(integer_of_int32(n), integer_of_int32(k))) }
          begin
            [ { } unit reads k
              { (JC_50:
                ((JC_47: le_int((0), integer_of_int32(k)))
                and ((JC_48:
                     le_int(integer_of_int32(k), integer_of_int32(n)))
                    and (JC_49:
                        (forall i_1:int.
                         ((le_int((0), i_1)
                          and lt_int(i_1, integer_of_int32(k))) ->
                          eq_int(integer_of_int32(select(int_P_int_M_t_2,
                                                  shift(t, i_1))),
                          (0)))))))) } ];
           try
            (let jessie_37 =
            begin
              (if ((lt_int_ (integer_of_int32 !k)) (integer_of_int32 n))
              then
               begin
                 (let jessie_34 =
                 (C_27:
                 begin
                   (let jessie_32 = (tmp := !k) in void);
                  (C_30:
                  begin
                    (k := (C_29:
                          (JC_54:
                          (int32_of_integer_ (C_28:
                                             ((add_int (integer_of_int32 !k)) (1)))))));
                   !k end) end) in void); void;
                (if ((neq_int_ (integer_of_int32 (C_32:
                                                 (JC_55:
                                                 ((((offset_acc_ int_P_t_2_alloc_table) int_P_int_M_t_2) t) 
                                                  (integer_of_int32 !tmp)))))) (0))
                then
                 (let jessie_35 = (raise (Goto_while_1_break_exc void)) in
                 void) else void) end
              else
               (let jessie_36 = (raise (Goto_while_1_break_exc void)) in
               void)); (raise (Loop_continue_exc void)) end in void) with
            Loop_continue_exc jessie_6 -> void end end done);
        (raise (Goto_while_1_break_exc void)) end in void) with
       Goto_while_1_break_exc jessie_4 -> (while_1_break: void) end;
      (C_34:
      begin
        (let jessie_40 =
        (__retres_0 := (C_33:
                       (JC_57:
                       (int32_of_integer_ (if ((eq_int_ (integer_of_int32 !k)) 
                                               (integer_of_int32 n)) 
                                          then (1) else (0)))))) in void);
       (return := !__retres_0); (raise Return) end) end)))); absurd  end with
   Return -> !return end)) { true }

let all_zeros_ensures_default =
 fun (t_0 : int_P pointer) (n_0 : int32) (int_P_t_0_1_alloc_table : int_P alloc_table) (int_P_int_M_t_0_1 : (int_P, int32) memory) ->
  { (JC_9:
    ((JC_6: le_int(offset_min(int_P_t_0_1_alloc_table, t_0), (0)))
    and ((JC_7:
         ge_int(offset_max(int_P_t_0_1_alloc_table, t_0),
         integer_of_int32(n_0)))
        and (JC_8: ge_int(integer_of_int32(n_0), (0)))))) }
  (let mutable_n_0 = ref n_0 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     begin
       try
        (let jessie_25 =
        begin
          (loop_2:
          while true do
          { invariant
              (JC_29:
              ((JC_26: le_int((0), integer_of_int32(mutable_n_0)))
              and ((JC_27:
                   le_int(integer_of_int32(mutable_n_0),
                   integer_of_int32(mutable_n_0@init)))
                  and (JC_28:
                      (forall i:int32.
                       ((le_int(integer_of_int32(mutable_n_0),
                         integer_of_int32(i))
                        and lt_int(integer_of_int32(i),
                            integer_of_int32(mutable_n_0@init))) ->
                        eq_int(integer_of_int32(select(int_P_int_M_t_0_1,
                                                shift(t_0,
                                                integer_of_int32(i)))),
                        (0))))))))  }
           begin
             [ { } unit { true } ];
            try
             (let jessie_24 =
             begin
               (C_9:
               begin
                 (let jessie_21 =
                 (mutable_n_0 := (C_8:
                                 (safe_int32_of_integer_ (C_7:
                                                         ((sub_int (integer_of_int32 !mutable_n_0)) (1)))))) in
                 void);
                (if ((ge_int_ (integer_of_int32 !mutable_n_0)) (0))
                then
                 (if (not ((neq_int_ (integer_of_int32 (C_11:
                                                       ((safe_acc_ int_P_int_M_t_0_1) 
                                                        (C_10:
                                                        ((shift t_0) 
                                                         (integer_of_int32 !mutable_n_0))))))) (0)))
                 then void
                 else
                  (let jessie_22 = (raise (Goto_while_0_break_exc void)) in
                  void))
                else
                 (let jessie_23 = (raise (Goto_while_0_break_exc void)) in
                 void)) end); (raise (Loop_continue_exc void)) end in void)
             with Loop_continue_exc jessie_3 -> void end end done);
         (raise (Goto_while_0_break_exc void)) end in void) with
        Goto_while_0_break_exc jessie_1 -> (while_0_break: void) end;
      (C_13:
      begin
        (let jessie_27 =
        (__retres := (C_12:
                     (safe_int32_of_integer_ (if ((lt_int_ (integer_of_int32 !mutable_n_0)) (0))
                                             then (1) else (0))))) in void);
       (return := !__retres); (raise Return) end) end); absurd  end with
   Return -> !return end)))
  { (JC_11:
    (neq_int(integer_of_int32(result), (0))
    <-> (forall i_0:int.
         ((le_int((0), i_0) and lt_int(i_0, integer_of_int32(n_0@))) ->
          eq_int(integer_of_int32(select(int_P_int_M_t_0_1, shift(t_0@, i_0))),
          (0)))))) }

let all_zeros_safety =
 fun (t_0 : int_P pointer) (n_0 : int32) (int_P_t_0_1_alloc_table : int_P alloc_table) (int_P_int_M_t_0_1 : (int_P, int32) memory) ->
  { (JC_9:
    ((JC_6: le_int(offset_min(int_P_t_0_1_alloc_table, t_0), (0)))
    and ((JC_7:
         ge_int(offset_max(int_P_t_0_1_alloc_table, t_0),
         integer_of_int32(n_0)))
        and (JC_8: ge_int(integer_of_int32(n_0), (0)))))) }
  (let mutable_n_0 = ref n_0 in
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     begin
       try
        (let jessie_16 =
        begin
          (loop_1:
          while true do
          { invariant (JC_20: true)
            variant integer_of_int32((JC_24 : mutable_n_0)) }
           begin
             [ { } unit reads mutable_n_0
               { (JC_18:
                 ((JC_15: le_int((0), integer_of_int32(mutable_n_0)))
                 and ((JC_16:
                      le_int(integer_of_int32(mutable_n_0),
                      integer_of_int32(mutable_n_0@init)))
                     and (JC_17:
                         (forall i:int32.
                          ((le_int(integer_of_int32(mutable_n_0),
                            integer_of_int32(i))
                           and lt_int(integer_of_int32(i),
                               integer_of_int32(mutable_n_0@init))) ->
                           eq_int(integer_of_int32(select(int_P_int_M_t_0_1,
                                                   shift(t_0,
                                                   integer_of_int32(i)))),
                           (0)))))))) } ];
            try
             (let jessie_15 =
             begin
               (C_9:
               begin
                 (let jessie_12 =
                 (mutable_n_0 := (C_8:
                                 (JC_22:
                                 (int32_of_integer_ (C_7:
                                                    ((sub_int (integer_of_int32 !mutable_n_0)) (1))))))) in
                 void);
                (if ((ge_int_ (integer_of_int32 !mutable_n_0)) (0))
                then
                 (if (not ((neq_int_ (integer_of_int32 (C_11:
                                                       (JC_23:
                                                       ((((offset_acc_ int_P_t_0_1_alloc_table) int_P_int_M_t_0_1) t_0) 
                                                        (integer_of_int32 !mutable_n_0)))))) (0)))
                 then void
                 else
                  (let jessie_13 = (raise (Goto_while_0_break_exc void)) in
                  void))
                else
                 (let jessie_14 = (raise (Goto_while_0_break_exc void)) in
                 void)) end); (raise (Loop_continue_exc void)) end in void)
             with Loop_continue_exc jessie_3 -> void end end done);
         (raise (Goto_while_0_break_exc void)) end in void) with
        Goto_while_0_break_exc jessie_1 -> (while_0_break: void) end;
      (C_13:
      begin
        (let jessie_18 =
        (__retres := (C_12:
                     (JC_25:
                     (int32_of_integer_ (if ((lt_int_ (integer_of_int32 !mutable_n_0)) (0))
                                        then (1) else (0)))))) in void);
       (return := !__retres); (raise Return) end) end); absurd  end with
   Return -> !return end))) { true }


WHYLIB=WHYHOME/lib WHYEXEC=WHYHOME/bin/why.opt GWHYEXEC=WHYHOME/bin/gwhy.opt make --quiet -C all_zeros.jessie --quiet -f all_zeros.makefile project
why --project [...] why/all_zeros.why
<project name="all_zeros" context="why/all_zeros_ctx.why">
  <function name="Function all_zeros_1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/all_zeros_po23.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "43" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/all_zeros_po24.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "43" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/all_zeros_po25.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "43" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/all_zeros_po26.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "43" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/all_zeros_po27.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "41" begin = "19" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/all_zeros_po28.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "41" begin = "19" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/all_zeros_po29.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "44" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/all_zeros_po30.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "44" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/all_zeros_po15.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "40" begin = "21" end = "27"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/all_zeros_po16.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "40" begin = "26" end = "32"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/all_zeros_po17.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "40" begin = "36" end = "73"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/all_zeros_po18.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "40" begin = "21" end = "27"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/all_zeros_po19.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "40" begin = "26" end = "32"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/all_zeros_po20.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "40" begin = "36" end = "73"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/all_zeros_po21.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "37" begin = "10" end = "60"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/all_zeros_po22.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "37" begin = "10" end = "60"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function all_zeros_0">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/all_zeros_po9.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "54" begin = "26" end = "28"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/all_zeros_po10.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "54" begin = "26" end = "28"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/all_zeros_po11.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "54" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/all_zeros_po12.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "54" begin = "2" end = "5"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/all_zeros_po13.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "52" begin = "19" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/all_zeros_po14.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "52" begin = "19" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/all_zeros_po1.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "51" begin = "21" end = "27"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/all_zeros_po2.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "51" begin = "26" end = "32"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/all_zeros_po3.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "51" begin = "36" end = "73"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/all_zeros_po4.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "51" begin = "21" end = "27"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/all_zeros_po5.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "51" begin = "26" end = "32"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/all_zeros_po6.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "51" begin = "36" end = "73"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/all_zeros_po7.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "48" begin = "12" end = "62"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/all_zeros_po8.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "48" begin = "12" end = "62"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Function all_zeros">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/all_zeros_po39.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "32" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/all_zeros_po40.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "32" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/all_zeros_po41.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "32" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/all_zeros_po42.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "32" begin = "2" end = "7"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/all_zeros_po43.why">
      <location file = "why/all_zeros.why" line = "889" begin = "20" end = "59"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/all_zeros_po44.why">
      <location file = "why/all_zeros.why" line = "889" begin = "20" end = "59"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/all_zeros_po45.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "33" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/all_zeros_po46.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "33" begin = "2" end = "8"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/all_zeros_po31.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "30" begin = "21" end = "27"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/all_zeros_po32.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "30" begin = "26" end = "41"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/all_zeros_po33.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "30" begin = "45" end = "87"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/all_zeros_po34.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "30" begin = "21" end = "27"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/all_zeros_po35.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "30" begin = "26" end = "41"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/all_zeros_po36.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "30" begin = "45" end = "87"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/all_zeros_po37.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "28" begin = "12" end = "62"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/all_zeros_po38.why">
      <location file = "PPCHOME/tests/jessie/all_zeros.c" line = "28" begin = "12" end = "62"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type char_P

type int32

type int8

type int_P

type padding

type void_P

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic int_P_tag : int_P tag_id

axiom int_P_int: (int_of_tag(int_P_tag) = 1)

logic int_P_of_pointer_address : unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr:
  (forall p:int_P pointer.
    (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom: parenttag(int_P_tag, bottom_tag)

axiom int_P_tags:
  (forall x:int_P pointer.
    (forall int_P_tag_table:int_P tag_table. instanceof(int_P_tag_table, x,
      int_P_tag)))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_int_P(p: int_P pointer, a: int,
  int_P_alloc_table: int_P alloc_table) = (offset_min(int_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_int_P(p: int_P pointer, b: int,
  int_P_alloc_table: int_P alloc_table) = (offset_max(int_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

