(* This file is generated by Why; do not edit *)

Require Why.
Require Export brute_force_why.

Definition BF (* validation *)
  : (m: Z)(n: Z)(x: (array Z))(y: (array Z))(_: `(array_length x) = m` /\
    `(array_length y) = n` /\ `0 <= n` /\ `0 <= m` /\ `n >= m - 1`)unit
  := [m: Z; n: Z; x: (array Z); y: (array Z);
      Pre10: `(array_length x) = m` /\ `(array_length y) = n` /\ `0 <= n` /\
      `0 <= m` /\ `n >= m - 1`]
       let (result, Post11) = (exist_1 [result: Z]result = `0` `0`
         (refl_equal ? `0`)) in
       let (i0, result0) =
         let (result0, Post10) = (exist_1 [result0: Z]result0 = `0` `0`
           (refl_equal ? `0`)) in
         let (i0, j0, result1) =
           let (j0, result1, Post1) =
             let (result1, Post1) = (exist_1 [result1: Z]result1 = `0` 
               `0` (refl_equal ? `0`)) in
             (exist_2 [j1: Z][result2: unit]j1 = `0` result1 tt Post1) in
           let (i0, j1, result2, Post9) =
             (well_founded_induction Z (Zwf ZERO) (Zwf_well_founded `
               0`) [Variant1: Z](i0: Z)(j1: Z)
               (_: Variant1 = `n - m + 1 - j1`)(_0: `0 <= j1` /\
               `j1 <= n - m + 1`)
               (sig_3 Z Z unit [i1: Z][j2: Z][result2: unit]((`0 <= j2` /\
                `j2 <= n - m + 1`) /\ `j2 > n - m`))
               [Variant1: Z; wf1: (Variant2: Z)
                (Pre1: (Zwf `0` Variant2 Variant1))(i0: Z)(j1: Z)
                (_: Variant2 = `n - m + 1 - j1`)(_0: `0 <= j1` /\
                `j1 <= n - m + 1`)
                (sig_3 Z Z unit [i1: Z][j2: Z][result2: unit]((`0 <= j2` /\
                 `j2 <= n - m + 1`) /\ `j2 > n - m`));
                i0: Z; j1: Z; Pre9: Variant1 = `n - m + 1 - j1`;
                Pre8: `0 <= j1` /\ `j1 <= n - m + 1`]
                 let (result2, Bool3) =
                   let (result4, Post17) = (Z_le_gt_bool j1 `n - m`) in
                   (exist_1 [result5: bool]
                   (if result5 then `j1 <= n - m` else `j1 > n - m`) 
                   result4 Post17) in
                 Cases
                   (btest
                    [result2:bool]
                    (if result2 then `j1 <= n - m` else `j1 > n - m`) result2
                    Bool3) of
                 | (left Test8) =>
                     let (i1, j2, result3, Post9) =
                       let (i1, j2, result3, Post12) =
                         let (i1, result3, Post2) =
                           let (result3, Post2) = (exist_1 [result3: Z]
                             result3 = `0` `0` (refl_equal ? `0`)) in
                           (exist_2 [i2: Z][result4: unit]i2 = `0` result3 
                           tt Post2) in
                         let (i2, result4, WP11) =
                           let (i2, result4, Post18) =
                             (well_founded_induction Z (Zwf ZERO)
                               (Zwf_well_founded `0`) [Variant3: Z](i2: Z)
                               (_: Variant3 = `m - i2`)(_0: (`0 <= i2` /\
                               `i2 <= m`) /\ (match x `0` y j1 i2))
                               (sig_2 Z (EM unit unit) [i3: Z]
                                [result4: (EM unit unit)]
                                (((qcomb [result5: unit]
                                   ((`i3 >= m` ->
                                     ((result:Z)
                                      (result = j1 ->
                                       ((j:Z)
                                        (j = `j1 + 1` -> (`0 <= j` /\
                                         `j <= n - m + 1`) /\
                                         (Zwf `0` `n - m + 1 - j` `n - m +
                                                                   1 - j1`))) /\
                                       (match x `0` y j1 (array_length x)))))) /\
                                   ((`i3 < m` ->
                                     ((j:Z)
                                      (j = `j1 + 1` -> (`0 <= j` /\
                                       `j <= n - m + 1`) /\
                                       (Zwf `0` `n - m + 1 - j` `n - m + 1 -
                                                                 j1`)))))
                                   [result5: unit]
                                   ((`i3 >= m` ->
                                     ((result:Z)
                                      (result = j1 ->
                                       ((j:Z)
                                        (j = `j1 + 1` -> (`0 <= j` /\
                                         `j <= n - m + 1`) /\
                                         (Zwf `0` `n - m + 1 - j` `n - m +
                                                                   1 - j1`))) /\
                                       (match x `0` y j1 (array_length x)))))) /\
                                   ((`i3 < m` ->
                                     ((j:Z)
                                      (j = `j1 + 1` -> (`0 <= j` /\
                                       `j <= n - m + 1`) /\
                                       (Zwf `0` `n - m + 1 - j` `n - m + 1 -
                                                                 j1`))))))
                                  result4)))
                               [Variant3: Z; wf2: (Variant4: Z)
                                (Pre2: (Zwf `0` Variant4 Variant3))(i2: Z)
                                (_: Variant4 = `m - i2`)(_0: (`0 <= i2` /\
                                `i2 <= m`) /\ (match x `0` y j1 i2))
                                (sig_2 Z (EM unit unit) [i3: Z]
                                 [result4: (EM unit unit)]
                                 (((qcomb [result5: unit]
                                    ((`i3 >= m` ->
                                      ((result:Z)
                                       (result = j1 ->
                                        ((j:Z)
                                         (j = `j1 + 1` -> (`0 <= j` /\
                                          `j <= n - m + 1`) /\
                                          (Zwf `0` `n - m + 1 - j` `n - m +
                                                                    1 - j1`))) /\
                                        (match x `0` y j1 (array_length x)))))) /\
                                    ((`i3 < m` ->
                                      ((j:Z)
                                       (j = `j1 + 1` -> (`0 <= j` /\
                                        `j <= n - m + 1`) /\
                                        (Zwf `0` `n - m + 1 - j` `n - m + 1 -
                                                                  j1`)))))
                                    [result5: unit]
                                    ((`i3 >= m` ->
                                      ((result:Z)
                                       (result = j1 ->
                                        ((j:Z)
                                         (j = `j1 + 1` -> (`0 <= j` /\
                                          `j <= n - m + 1`) /\
                                          (Zwf `0` `n - m + 1 - j` `n - m +
                                                                    1 - j1`))) /\
                                        (match x `0` y j1 (array_length x)))))) /\
                                    ((`i3 < m` ->
                                      ((j:Z)
                                       (j = `j1 + 1` -> (`0 <= j` /\
                                        `j <= n - m + 1`) /\
                                        (Zwf `0` `n - m + 1 - j` `n - m + 1 -
                                                                  j1`))))))
                                   result4)));
                                i2: Z; Pre6: Variant3 = `m - i2`;
                                Pre5: (`0 <= i2` /\ `i2 <= m`) /\
                                (match x `0` y j1 i2)]
                                 let (result4, Post19) =
                                   (exist_1 [result4: bool]
                                   result4 = true true
                                   (refl_equal ? true)) in
                                 Cases
                                   (btest
                                    [result4:bool]result4 = true result4
                                    Post19) of
                                 | (left Test5) =>
                                     let (i3, result5, Post21) =
                                       let (i3, result5, Post22) =
                                         let (result5, WP19) =
                                           let (result5, Bool1) =
                                             let (result7, Post23) =
                                               (Z_lt_ge_bool i2 m) in
                                             (exist_1 [result8: bool]
                                             (if result8 then `i2 < m`
                                              else `i2 >= m`) result7
                                             Post23) in
                                           Cases
                                             (btest
                                              [result5:bool]
                                              (if result5 then `i2 < m`
                                               else `i2 >= m`) result5
                                              Bool1) of
                                           | (left Test4) =>
                                               let (result6, WP19) =
                                                 let Pre4 =
                                                   (BF_po_1 m n x y Pre10
                                                   result Post11 result0
                                                   Post10 j0 Post1 Variant1
                                                   j1 Pre9 Pre8 Test8 i1
                                                   Post2 Variant3 i2 Pre6
                                                   Pre5 Test5 Test4) in
                                                 let (c_aux_1, Post4) =
                                                   (exist_1 [result6: Z]
                                                   result6 = (access x i2) 
                                                   (access x i2)
                                                   (refl_equal ? (access x i2))) in
                                                 let (result6, WP19) =
                                                   let Pre3 =
                                                     (BF_po_2 m n x y Pre10
                                                     result Post11 result0
                                                     Post10 j0 Post1 Variant1
                                                     j1 Pre9 Pre8 Test8 i1
                                                     Post2 Variant3 i2 Pre6
                                                     Pre5 Test5 Test4 Pre4
                                                     c_aux_1 Post4) in
                                                   let (c_aux_2, Post3) =
                                                     (exist_1 [result6: Z]
                                                     result6 = (access y
                                                                `i2 + j1`) 
                                                     (access y `i2 + j1`)
                                                     (refl_equal ? (access y
                                                                    `
                                                                    i2 + j1`))) in
                                                   let (result6, Post24) =
                                                     let (result8, Post25) =
                                                       (Z_eq_bool c_aux_1
                                                          c_aux_2) in
                                                     (exist_1 [result9: bool]
                                                     (if result9
                                                      then `c_aux_1 = c_aux_2`
                                                      else `c_aux_1 <>
                                                            c_aux_2`) 
                                                     result8 Post25) in
                                                   (exist_1 [result7: bool]
                                                   (if result7
                                                    then ((i:Z)
                                                          (i = `i2 + 1` ->
                                                           ((`0 <= i` /\
                                                           `i <= m`) /\
                                                           (match x `
                                                            0` y j1 i)) /\
                                                           (Zwf `0` `
                                                           m - i` `m - i2`)))
                                                    else ((`i2 >= m` ->
                                                           ((result:Z)
                                                            (result = j1 ->
                                                             ((j:Z)
                                                              (j = `j1 + 1` ->
                                                               (`0 <= j` /\
                                                               `j <= n - m +
                                                                1`) /\
                                                               (Zwf `0` `
                                                               n - m + 1 - j` `
                                                               n - m + 1 - j1`))) /\
                                                             (match x `
                                                              0` y j1
                                                              (array_length x)))))) /\
                                                    ((`i2 < m` ->
                                                      ((j:Z)
                                                       (j = `j1 + 1` ->
                                                        (`0 <= j` /\
                                                        `j <= n - m + 1`) /\
                                                        (Zwf `0` `n - m + 1 -
                                                                  j` `
                                                        n - m + 1 - j1`)))))) 
                                                   result6
                                                   (BF_po_3 m n x y Pre10
                                                   result Post11 result0
                                                   Post10 j0 Post1 Variant1
                                                   j1 Pre9 Pre8 Test8 i1
                                                   Post2 Variant3 i2 Pre6
                                                   Pre5 Test5 Test4 Pre4
                                                   c_aux_1 Post4 Pre3 c_aux_2
                                                   Post3 result6 Post24)) in
                                                 (exist_1 [result7: bool]
                                                 (if result7
                                                  then ((i:Z)
                                                        (i = `i2 + 1` ->
                                                         ((`0 <= i` /\
                                                         `i <= m`) /\
                                                         (match x `0` y j1 i)) /\
                                                         (Zwf `0` `m - i` `
                                                         m - i2`)))
                                                  else ((`i2 >= m` ->
                                                         ((result:Z)
                                                          (result = j1 ->
                                                           ((j:Z)
                                                            (j = `j1 + 1` ->
                                                             (`0 <= j` /\
                                                             `j <= n - m + 1`) /\
                                                             (Zwf `0` `
                                                             n - m + 1 - j` `
                                                             n - m + 1 - j1`))) /\
                                                           (match x `
                                                            0` y j1
                                                            (array_length x)))))) /\
                                                  ((`i2 < m` ->
                                                    ((j:Z)
                                                     (j = `j1 + 1` ->
                                                      (`0 <= j` /\
                                                      `j <= n - m + 1`) /\
                                                      (Zwf `0` `n - m + 1 - j` `
                                                      n - m + 1 - j1`)))))) 
                                                 result6 WP19) in
                                               (exist_1 [result7: bool]
                                               (if result7
                                                then ((i:Z)
                                                      (i = `i2 + 1` ->
                                                       ((`0 <= i` /\
                                                       `i <= m`) /\
                                                       (match x `0` y j1 i)) /\
                                                       (Zwf `0` `m - i` `
                                                       m - i2`)))
                                                else ((`i2 >= m` ->
                                                       ((result:Z)
                                                        (result = j1 ->
                                                         ((j:Z)
                                                          (j = `j1 + 1` ->
                                                           (`0 <= j` /\
                                                           `j <= n - m + 1`) /\
                                                           (Zwf `0` `
                                                           n - m + 1 - j` `
                                                           n - m + 1 - j1`))) /\
                                                         (match x `0` y j1
                                                          (array_length x)))))) /\
                                                ((`i2 < m` ->
                                                  ((j:Z)
                                                   (j = `j1 + 1` ->
                                                    (`0 <= j` /\
                                                    `j <= n - m + 1`) /\
                                                    (Zwf `0` `n - m + 1 - j` `
                                                    n - m + 1 - j1`)))))) 
                                               result6 WP19)
                                           | (right Test3) =>
                                               let (result6, WP19) =
                                                 (exist_1 [result6: bool]
                                                 (if result6
                                                  then ((i:Z)
                                                        (i = `i2 + 1` ->
                                                         ((`0 <= i` /\
                                                         `i <= m`) /\
                                                         (match x `0` y j1 i)) /\
                                                         (Zwf `0` `m - i` `
                                                         m - i2`)))
                                                  else ((`i2 >= m` ->
                                                         ((result:Z)
                                                          (result = j1 ->
                                                           ((j:Z)
                                                            (j = `j1 + 1` ->
                                                             (`0 <= j` /\
                                                             `j <= n - m + 1`) /\
                                                             (Zwf `0` `
                                                             n - m + 1 - j` `
                                                             n - m + 1 - j1`))) /\
                                                           (match x `
                                                            0` y j1
                                                            (array_length x)))))) /\
                                                  ((`i2 < m` ->
                                                    ((j:Z)
                                                     (j = `j1 + 1` ->
                                                      (`0 <= j` /\
                                                      `j <= n - m + 1`) /\
                                                      (Zwf `0` `n - m + 1 - j` `
                                                      n - m + 1 - j1`)))))) 
                                                 false
                                                 (BF_po_4 m n x y Pre10
                                                 result Post11 result0 Post10
                                                 j0 Post1 Variant1 j1 Pre9
                                                 Pre8 Test8 i1 Post2 Variant3
                                                 i2 Pre6 Pre5 Test5 Test3)) in
                                               (exist_1 [result7: bool]
                                               (if result7
                                                then ((i:Z)
                                                      (i = `i2 + 1` ->
                                                       ((`0 <= i` /\
                                                       `i <= m`) /\
                                                       (match x `0` y j1 i)) /\
                                                       (Zwf `0` `m - i` `
                                                       m - i2`)))
                                                else ((`i2 >= m` ->
                                                       ((result:Z)
                                                        (result = j1 ->
                                                         ((j:Z)
                                                          (j = `j1 + 1` ->
                                                           (`0 <= j` /\
                                                           `j <= n - m + 1`) /\
                                                           (Zwf `0` `
                                                           n - m + 1 - j` `
                                                           n - m + 1 - j1`))) /\
                                                         (match x `0` y j1
                                                          (array_length x)))))) /\
                                                ((`i2 < m` ->
                                                  ((j:Z)
                                                   (j = `j1 + 1` ->
                                                    (`0 <= j` /\
                                                    `j <= n - m + 1`) /\
                                                    (Zwf `0` `n - m + 1 - j` `
                                                    n - m + 1 - j1`)))))) 
                                               result6 WP19) end in
                                         Cases
                                           (btest
                                            [result5:bool]
                                            (if result5
                                             then ((i:Z)
                                                   (i = `i2 + 1` ->
                                                    ((`0 <= i` /\
                                                    `i <= m`) /\
                                                    (match x `0` y j1 i)) /\
                                                    (Zwf `0` `m - i` `
                                                    m - i2`)))
                                             else ((`i2 >= m` ->
                                                    ((result:Z)
                                                     (result = j1 ->
                                                      ((j:Z)
                                                       (j = `j1 + 1` ->
                                                        (`0 <= j` /\
                                                        `j <= n - m + 1`) /\
                                                        (Zwf `0` `n - m + 1 -
                                                                  j` `
                                                        n - m + 1 - j1`))) /\
                                                      (match x `0` y j1
                                                       (array_length x)))))) /\
                                             ((`i2 < m` ->
                                               ((j:Z)
                                                (j = `j1 + 1` -> (`0 <= j` /\
                                                 `j <= n - m + 1`) /\
                                                 (Zwf `0` `n - m + 1 - j` `
                                                 n - m + 1 - j1`)))))) result5
                                            WP19) of
                                         | (left WP20) =>
                                             let (i3, result6, Post14) =
                                               let (result6, WP15) =
                                                 (exist_1 [result6: unit]
                                                 ((i:Z)
                                                  (i = `i2 + 1` ->
                                                   ((`0 <= i` /\ `i <= m`) /\
                                                   (match x `0` y j1 i)) /\
                                                   (Zwf `0` `m - i` `
                                                   m - i2`))) tt WP20) in
                                               let (i3, result7, Post5) =
                                                 let (result7, Post5) =
                                                   (exist_1 [result7: Z]
                                                   result7 = `i2 + 1` 
                                                   `i2 + 1`
                                                   (refl_equal ? `i2 + 1`)) in
                                                 (exist_2 [i4: Z]
                                                 [result8: unit]
                                                 i4 = `i2 + 1` result7 
                                                 tt Post5) in
                                               (exist_2 [i4: Z]
                                               [result8: unit]((`0 <= i4` /\
                                               `i4 <= m`) /\
                                               (match x `0` y j1 i4)) /\
                                               (Zwf `0` `m - i4` `m - i2`) 
                                               i3 result7
                                               let HW_2 = (WP15 i3 Post5) in
                                               HW_2) in
                                             (exist_2 [i4: Z]
                                             (qcomb [result7: unit]
                                              ((`i4 >= m` ->
                                                ((result:Z)
                                                 (result = j1 ->
                                                  ((j:Z)
                                                   (j = `j1 + 1` ->
                                                    (`0 <= j` /\
                                                    `j <= n - m + 1`) /\
                                                    (Zwf `0` `n - m + 1 - j` `
                                                    n - m + 1 - j1`))) /\
                                                  (match x `0` y j1
                                                   (array_length x)))))) /\
                                              ((`i4 < m` ->
                                                ((j:Z)
                                                 (j = `j1 + 1` ->
                                                  (`0 <= j` /\
                                                  `j <= n - m + 1`) /\
                                                  (Zwf `0` `n - m + 1 - j` `
                                                  n - m + 1 - j1`)))))
                                              [result7: unit]((`0 <= i4` /\
                                              `i4 <= m`) /\
                                              (match x `0` y j1 i4)) /\
                                              (Zwf `0` `m - i4` `m - i2`)) 
                                             i3 (Val unit result6) Post14)
                                         | (right WP20) =>
                                             let (result6, Post26) =
                                               (exist_1 (qcomb
                                                         [result6: unit]
                                                         ((`i2 >= m` ->
                                                           ((result:Z)
                                                            (result = j1 ->
                                                             ((j:Z)
                                                              (j = `j1 + 1` ->
                                                               (`0 <= j` /\
                                                               `j <= n - m +
                                                                1`) /\
                                                               (Zwf `0` `
                                                               n - m + 1 - j` `
                                                               n - m + 1 - j1`))) /\
                                                             (match x `
                                                              0` y j1
                                                              (array_length x)))))) /\
                                                         ((`i2 < m` ->
                                                           ((j:Z)
                                                            (j = `j1 + 1` ->
                                                             (`0 <= j` /\
                                                             `j <= n - m + 1`) /\
                                                             (Zwf `0` `
                                                             n - m + 1 - j` `
                                                             n - m + 1 - j1`)))))
                                                         [result6: unit]
                                                         ((`0 <= i2` /\
                                                         `i2 <= m`) /\
                                                         (match x `0` y j1 i2)) /\
                                                         (Zwf `0` `m - i2` `
                                                         m - i2`)) (Exn unit
                                                                    tt)
                                               WP20) in
                                             Cases (decomp1 Post26) of
                                             | (Qval (exist result7
                                               Post14)) => (exist_2 [i3: Z]
                                               (qcomb [result8: unit]
                                                ((`i3 >= m` ->
                                                  ((result:Z)
                                                   (result = j1 ->
                                                    ((j:Z)
                                                     (j = `j1 + 1` ->
                                                      (`0 <= j` /\
                                                      `j <= n - m + 1`) /\
                                                      (Zwf `0` `n - m + 1 - j` `
                                                      n - m + 1 - j1`))) /\
                                                    (match x `0` y j1
                                                     (array_length x)))))) /\
                                                ((`i3 < m` ->
                                                  ((j:Z)
                                                   (j = `j1 + 1` ->
                                                    (`0 <= j` /\
                                                    `j <= n - m + 1`) /\
                                                    (Zwf `0` `n - m + 1 - j` `
                                                    n - m + 1 - j1`)))))
                                                [result8: unit]((`0 <= i3` /\
                                                `i3 <= m`) /\
                                                (match x `0` y j1 i3)) /\
                                                (Zwf `0` `m - i3` `m - i2`)) 
                                               i2 (Val unit result7) Post14)
                                             | (Qexn _ WP12) =>
                                               (exist_2 [i3: Z]
                                               (qcomb [result7: unit]
                                                ((`i3 >= m` ->
                                                  ((result:Z)
                                                   (result = j1 ->
                                                    ((j:Z)
                                                     (j = `j1 + 1` ->
                                                      (`0 <= j` /\
                                                      `j <= n - m + 1`) /\
                                                      (Zwf `0` `n - m + 1 - j` `
                                                      n - m + 1 - j1`))) /\
                                                    (match x `0` y j1
                                                     (array_length x)))))) /\
                                                ((`i3 < m` ->
                                                  ((j:Z)
                                                   (j = `j1 + 1` ->
                                                    (`0 <= j` /\
                                                    `j <= n - m + 1`) /\
                                                    (Zwf `0` `n - m + 1 - j` `
                                                    n - m + 1 - j1`)))))
                                                [result7: unit]((`0 <= i3` /\
                                                `i3 <= m`) /\
                                                (match x `0` y j1 i3)) /\
                                                (Zwf `0` `m - i3` `m - i2`)) 
                                               i2 (Exn unit tt) WP12)
                                             end end in
                                       Cases (decomp1 Post22) of
                                       | (Qval (exist result6 Post14)) =>
                                         ((wf2 `m - i3`)
                                           (loop_variant_1 Pre6 Post14) 
                                           i3 (refl_equal ? `m - i3`)
                                           (proj1 ? ? Post14))
                                       | (Qexn _ WP12) => (exist_2 [i4: Z]
                                         (qcomb [result6: unit]
                                          ((`i4 >= m` ->
                                            ((result:Z)
                                             (result = j1 ->
                                              ((j:Z)
                                               (j = `j1 + 1` -> (`0 <= j` /\
                                                `j <= n - m + 1`) /\
                                                (Zwf `0` `n - m + 1 - j` `
                                                n - m + 1 - j1`))) /\
                                              (match x `0` y j1
                                               (array_length x)))))) /\
                                          ((`i4 < m` ->
                                            ((j:Z)
                                             (j = `j1 + 1` -> (`0 <= j` /\
                                              `j <= n - m + 1`) /\
                                              (Zwf `0` `n - m + 1 - j` `
                                              n - m + 1 - j1`)))))
                                          [result6: unit]
                                          ((`i4 >= m` ->
                                            ((result:Z)
                                             (result = j1 ->
                                              ((j:Z)
                                               (j = `j1 + 1` -> (`0 <= j` /\
                                                `j <= n - m + 1`) /\
                                                (Zwf `0` `n - m + 1 - j` `
                                                n - m + 1 - j1`))) /\
                                              (match x `0` y j1
                                               (array_length x)))))) /\
                                          ((`i4 < m` ->
                                            ((j:Z)
                                             (j = `j1 + 1` -> (`0 <= j` /\
                                              `j <= n - m + 1`) /\
                                              (Zwf `0` `n - m + 1 - j` `
                                              n - m + 1 - j1`)))))) i3
                                         (Exn unit tt) WP12)
                                       end in
                                     Cases (decomp1 Post21) of
                                     | (Qval (exist result6 WP11)) =>
                                       (exist_2 [i4: Z]
                                       (qcomb [result7: unit]
                                        ((`i4 >= m` ->
                                          ((result:Z)
                                           (result = j1 ->
                                            ((j:Z)
                                             (j = `j1 + 1` -> (`0 <= j` /\
                                              `j <= n - m + 1`) /\
                                              (Zwf `0` `n - m + 1 - j` `
                                              n - m + 1 - j1`))) /\
                                            (match x `0` y j1
                                             (array_length x)))))) /\
                                        ((`i4 < m` ->
                                          ((j:Z)
                                           (j = `j1 + 1` -> (`0 <= j` /\
                                            `j <= n - m + 1`) /\
                                            (Zwf `0` `n - m + 1 - j` `
                                            n - m + 1 - j1`)))))
                                        [result7: unit]
                                        ((`i4 >= m` ->
                                          ((result:Z)
                                           (result = j1 ->
                                            ((j:Z)
                                             (j = `j1 + 1` -> (`0 <= j` /\
                                              `j <= n - m + 1`) /\
                                              (Zwf `0` `n - m + 1 - j` `
                                              n - m + 1 - j1`))) /\
                                            (match x `0` y j1
                                             (array_length x)))))) /\
                                        ((`i4 < m` ->
                                          ((j:Z)
                                           (j = `j1 + 1` -> (`0 <= j` /\
                                            `j <= n - m + 1`) /\
                                            (Zwf `0` `n - m + 1 - j` `
                                            n - m + 1 - j1`)))))) i3
                                       (Val unit result6) WP11)
                                     | (Qexn _ WP12) => (exist_2 [i4: Z]
                                       (qcomb [result6: unit]
                                        ((`i4 >= m` ->
                                          ((result:Z)
                                           (result = j1 ->
                                            ((j:Z)
                                             (j = `j1 + 1` -> (`0 <= j` /\
                                              `j <= n - m + 1`) /\
                                              (Zwf `0` `n - m + 1 - j` `
                                              n - m + 1 - j1`))) /\
                                            (match x `0` y j1
                                             (array_length x)))))) /\
                                        ((`i4 < m` ->
                                          ((j:Z)
                                           (j = `j1 + 1` -> (`0 <= j` /\
                                            `j <= n - m + 1`) /\
                                            (Zwf `0` `n - m + 1 - j` `
                                            n - m + 1 - j1`)))))
                                        [result6: unit]
                                        ((`i4 >= m` ->
                                          ((result:Z)
                                           (result = j1 ->
                                            ((j:Z)
                                             (j = `j1 + 1` -> (`0 <= j` /\
                                              `j <= n - m + 1`) /\
                                              (Zwf `0` `n - m + 1 - j` `
                                              n - m + 1 - j1`))) /\
                                            (match x `0` y j1
                                             (array_length x)))))) /\
                                        ((`i4 < m` ->
                                          ((j:Z)
                                           (j = `j1 + 1` -> (`0 <= j` /\
                                            `j <= n - m + 1`) /\
                                            (Zwf `0` `n - m + 1 - j` `
                                            n - m + 1 - j1`)))))) i3
                                       (Exn unit tt) WP12)
                                     end
                                 | (right Test2) =>
                                     let (i3, result5, Post20) =
                                       (exist_2 [i3: Z]
                                       (qcomb [result5: unit]
                                        ((`i3 >= m` ->
                                          ((result:Z)
                                           (result = j1 ->
                                            ((j:Z)
                                             (j = `j1 + 1` -> (`0 <= j` /\
                                              `j <= n - m + 1`) /\
                                              (Zwf `0` `n - m + 1 - j` `
                                              n - m + 1 - j1`))) /\
                                            (match x `0` y j1
                                             (array_length x)))))) /\
                                        ((`i3 < m` ->
                                          ((j:Z)
                                           (j = `j1 + 1` -> (`0 <= j` /\
                                            `j <= n - m + 1`) /\
                                            (Zwf `0` `n - m + 1 - j` `
                                            n - m + 1 - j1`)))))
                                        [result5: unit]
                                        ((`i3 >= m` ->
                                          ((result:Z)
                                           (result = j1 ->
                                            ((j:Z)
                                             (j = `j1 + 1` -> (`0 <= j` /\
                                              `j <= n - m + 1`) /\
                                              (Zwf `0` `n - m + 1 - j` `
                                              n - m + 1 - j1`))) /\
                                            (match x `0` y j1
                                             (array_length x)))))) /\
                                        ((`i3 < m` ->
                                          ((j:Z)
                                           (j = `j1 + 1` -> (`0 <= j` /\
                                            `j <= n - m + 1`) /\
                                            (Zwf `0` `n - m + 1 - j` `
                                            n - m + 1 - j1`)))))) i2
                                       (Val unit tt)
                                       (why_boolean_discriminate Test2
                                         ((`i2 >= m` ->
                                           ((result:Z)
                                            (result = j1 ->
                                             ((j:Z)
                                              (j = `j1 + 1` -> (`0 <= j` /\
                                               `j <= n - m + 1`) /\
                                               (Zwf `0` `n - m + 1 - j` `
                                               n - m + 1 - j1`))) /\
                                             (match x `0` y j1
                                              (array_length x)))))) /\
                                         ((`i2 < m` ->
                                           ((j:Z)
                                            (j = `j1 + 1` -> (`0 <= j` /\
                                             `j <= n - m + 1`) /\
                                             (Zwf `0` `n - m + 1 - j` `
                                             n - m + 1 - j1`))))))) in
                                     Cases (decomp1 Post20) of
                                     | (Qval (exist result6 WP11)) =>
                                       (exist_2 [i4: Z]
                                       (qcomb [result7: unit]
                                        ((`i4 >= m` ->
                                          ((result:Z)
                                           (result = j1 ->
                                            ((j:Z)
                                             (j = `j1 + 1` -> (`0 <= j` /\
                                              `j <= n - m + 1`) /\
                                              (Zwf `0` `n - m + 1 - j` `
                                              n - m + 1 - j1`))) /\
                                            (match x `0` y j1
                                             (array_length x)))))) /\
                                        ((`i4 < m` ->
                                          ((j:Z)
                                           (j = `j1 + 1` -> (`0 <= j` /\
                                            `j <= n - m + 1`) /\
                                            (Zwf `0` `n - m + 1 - j` `
                                            n - m + 1 - j1`)))))
                                        [result7: unit]
                                        ((`i4 >= m` ->
                                          ((result:Z)
                                           (result = j1 ->
                                            ((j:Z)
                                             (j = `j1 + 1` -> (`0 <= j` /\
                                              `j <= n - m + 1`) /\
                                              (Zwf `0` `n - m + 1 - j` `
                                              n - m + 1 - j1`))) /\
                                            (match x `0` y j1
                                             (array_length x)))))) /\
                                        ((`i4 < m` ->
                                          ((j:Z)
                                           (j = `j1 + 1` -> (`0 <= j` /\
                                            `j <= n - m + 1`) /\
                                            (Zwf `0` `n - m + 1 - j` `
                                            n - m + 1 - j1`)))))) i3
                                       (Val unit result6) WP11)
                                     | (Qexn _ WP12) => (exist_2 [i4: Z]
                                       (qcomb [result6: unit]
                                        ((`i4 >= m` ->
                                          ((result:Z)
                                           (result = j1 ->
                                            ((j:Z)
                                             (j = `j1 + 1` -> (`0 <= j` /\
                                              `j <= n - m + 1`) /\
                                              (Zwf `0` `n - m + 1 - j` `
                                              n - m + 1 - j1`))) /\
                                            (match x `0` y j1
                                             (array_length x)))))) /\
                                        ((`i4 < m` ->
                                          ((j:Z)
                                           (j = `j1 + 1` -> (`0 <= j` /\
                                            `j <= n - m + 1`) /\
                                            (Zwf `0` `n - m + 1 - j` `
                                            n - m + 1 - j1`)))))
                                        [result6: unit]
                                        ((`i4 >= m` ->
                                          ((result:Z)
                                           (result = j1 ->
                                            ((j:Z)
                                             (j = `j1 + 1` -> (`0 <= j` /\
                                              `j <= n - m + 1`) /\
                                              (Zwf `0` `n - m + 1 - j` `
                                              n - m + 1 - j1`))) /\
                                            (match x `0` y j1
                                             (array_length x)))))) /\
                                        ((`i4 < m` ->
                                          ((j:Z)
                                           (j = `j1 + 1` -> (`0 <= j` /\
                                            `j <= n - m + 1`) /\
                                            (Zwf `0` `n - m + 1 - j` `
                                            n - m + 1 - j1`)))))) i3
                                       (Exn unit tt) WP12)
                                     end end `m - i1` i1
                               (refl_equal ? `m - i1`)
                               (BF_po_5 m n x y Pre10 result Post11 result0
                               Post10 j0 Post1 Variant1 j1 Pre9 Pre8 Test8 i1
                               Post2)) in
                           Cases (decomp1 Post18) of
                           | (Qval (exist result5 WP11)) => (exist_2 [i3: Z]
                             [result6: unit]
                             ((`i3 >= m` ->
                               ((result:Z)
                                (result = j1 ->
                                 ((j:Z)
                                  (j = `j1 + 1` -> (`0 <= j` /\
                                   `j <= n - m + 1`) /\
                                   (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))) /\
                                 (match x `0` y j1 (array_length x)))))) /\
                             ((`i3 < m` ->
                               ((j:Z)
                                (j = `j1 + 1` -> (`0 <= j` /\
                                 `j <= n - m + 1`) /\
                                 (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))))) 
                             i2 result5 WP11)
                           | (Qexn _ WP12) =>
                             let (result5, WP11) = (exist_1 [result5: unit]
                               ((`i2 >= m` ->
                                 ((result:Z)
                                  (result = j1 ->
                                   ((j:Z)
                                    (j = `j1 + 1` -> (`0 <= j` /\
                                     `j <= n - m + 1`) /\
                                     (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))) /\
                                   (match x `0` y j1 (array_length x)))))) /\
                               ((`i2 < m` ->
                                 ((j:Z)
                                  (j = `j1 + 1` -> (`0 <= j` /\
                                   `j <= n - m + 1`) /\
                                   (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))))) 
                               tt WP12) in
                             (exist_2 [i3: Z][result6: unit]
                             ((`i3 >= m` ->
                               ((result:Z)
                                (result = j1 ->
                                 ((j:Z)
                                  (j = `j1 + 1` -> (`0 <= j` /\
                                   `j <= n - m + 1`) /\
                                   (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))) /\
                                 (match x `0` y j1 (array_length x)))))) /\
                             ((`i3 < m` ->
                               ((j:Z)
                                (j = `j1 + 1` -> (`0 <= j` /\
                                 `j <= n - m + 1`) /\
                                 (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))))) 
                             i2 result5 WP11)
                           end in
                         let (result5, WP2) =
                           let (result5, Bool2) =
                             let (result7, Post27) = (Z_ge_lt_bool i2 m) in
                             (exist_1 [result8: bool]
                             (if result8 then `i2 >= m` else `i2 < m`) 
                             result7 Post27) in
                           Cases
                             (btest
                              [result5:bool]
                              (if result5 then `i2 >= m` else `i2 < m`) result5
                              Bool2) of
                           | (left Test7) =>
                               let (result6, WP2) =
                                 let (result6, WP3) =
                                   let (c_aux_3, Post7) =
                                     (exist_1 [result6: Z]result6 = j1 
                                     j1 (refl_equal ? j1)) in
                                   let (result6, WP3) =
                                     (exist_1 [result6: unit]
                                     ((j:Z)
                                      (j = `j1 + 1` -> (`0 <= j` /\
                                       `j <= n - m + 1`) /\
                                       (Zwf `0` `n - m + 1 - j` `n - m + 1 -
                                                                 j1`))) /\
                                     (match x `0` y j1 (array_length x)) 
                                     (OUTPUT c_aux_3)
                                     let (HW_3, HW_4) = WP11 in
                                     let HW_5 = (HW_3 Test7) in
                                     let HW_6 = (HW_5 c_aux_3 Post7) in
                                     HW_6) in
                                   (exist_1 [result7: unit]
                                   ((j:Z)
                                    (j = `j1 + 1` -> (`0 <= j` /\
                                     `j <= n - m + 1`) /\
                                     (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))) /\
                                   (match x `0` y j1 (array_length x)) 
                                   result6 WP3) in
                                 let Pre7 = let (HW_7, HW_8) = WP3 in
                                            HW_8 in
                                 let (result7, WP2) =
                                   (exist_1 [result7: unit]
                                   ((j:Z)
                                    (j = `j1 + 1` -> (`0 <= j` /\
                                     `j <= n - m + 1`) /\
                                     (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))) 
                                   tt (proj1 ? ? WP3)) in
                                 (exist_1 [result8: unit]
                                 ((j:Z)
                                  (j = `j1 + 1` -> (`0 <= j` /\
                                   `j <= n - m + 1`) /\
                                   (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))) 
                                 result7 WP2) in
                               (exist_1 [result7: unit]
                               ((j:Z)
                                (j = `j1 + 1` -> (`0 <= j` /\
                                 `j <= n - m + 1`) /\
                                 (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))) 
                               result6 WP2)
                           | (right Test6) =>
                               let (result6, WP2) = (exist_1 [result6: unit]
                                 ((j:Z)
                                  (j = `j1 + 1` -> (`0 <= j` /\
                                   `j <= n - m + 1`) /\
                                   (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))) 
                                 tt
                                 [j: Z]
                                   [HW_9: j = `j1 + 1`]
                                     let (HW_10, HW_11) = WP11 in
                                     let HW_12 = (HW_11 Test6) in
                                     let HW_13 = (HW_12 j HW_9) in
                                     HW_13) in
                               (exist_1 [result7: unit]
                               ((j:Z)
                                (j = `j1 + 1` -> (`0 <= j` /\
                                 `j <= n - m + 1`) /\
                                 (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))) 
                               result6 WP2) end in
                         let (j2, result6, Post8) =
                           let (result6, Post8) = (exist_1 [result6: Z]
                             result6 = `j1 + 1` `j1 + 1`
                             (refl_equal ? `j1 + 1`)) in
                           (exist_2 [j3: Z][result7: unit]
                           j3 = `j1 + 1` result6 tt Post8) in
                         (exist_3 [i3: Z][j3: Z][result7: unit](`0 <= j3` /\
                         `j3 <= n - m + 1`) /\
                         (Zwf `0` `n - m + 1 - j3` `n - m + 1 - j1`) 
                         i2 j2 result6 let HW_14 = (WP2 j2 Post8) in
                                       HW_14) in
                       ((wf1 `n - m + 1 - j2`) (loop_variant_1 Pre9 Post12)
                         i1 j2 (refl_equal ? `n - m + 1 - j2`)
                         (proj1 ? ? Post12)) in
                     (exist_3 [i2: Z][j3: Z][result4: unit](`0 <= j3` /\
                     `j3 <= n - m + 1`) /\ `j3 > n - m` i1 j2 result3 Post9)
                 | (right Test1) =>
                     let (i1, j2, result3, Post9) = (exist_3 [i1: Z][j2: Z]
                       [result3: unit](`0 <= j2` /\ `j2 <= n - m + 1`) /\
                       `j2 > n - m` i0 j1 tt (conj ? ? Pre8 Test1)) in
                     (exist_3 [i2: Z][j3: Z][result4: unit](`0 <= j3` /\
                     `j3 <= n - m + 1`) /\ `j3 > n - m` i1 j2 result3 Post9) end
               `n - m + 1 - j0` result j0 (refl_equal ? `n - m + 1 - j0`)
               (BF_po_6 m n x y Pre10 result Post11 result0 Post10 j0 Post1)) in
           (Build_tuple_3 i0 j1 result2) in
         (Build_tuple_2 i0 result1) in
       result0.

