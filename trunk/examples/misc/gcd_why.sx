
;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(BG_PUSH
 ;; Why axiom access_update
 (FORALL (a i v) (EQ (access (update a i v) i) v)))

(BG_PUSH
 ;; Why axiom access_update_neq
 (FORALL (a i j v)
 (IMPLIES (NEQ i j) (EQ (access (update a i v) j) (access a j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j)
 (FORALL (a v) (EQ (access (update a i v) j) (access a j))))))

(DEFPRED (sorted_array t i j)
  (FORALL (k1 k2)
  (IMPLIES (AND (AND (<= i k1) (<= k1 k2)) (<= k2 j))
  (<= (access t k1) (access t k2)))))

(DEFPRED (exchange a1 a2 i j)
  (AND (EQ (array_length a1) (array_length a2))
  (AND (EQ (access a1 i) (access a2 j))
  (AND (EQ (access a2 i) (access a1 j))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i) (NEQ k j)) (EQ (access a1 k) (access a2 k))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t l u) (EQ (permut t t l u) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1 t2 l u)
 (IMPLIES (EQ (permut t1 t2 l u) |@true|) (EQ (permut t2 t1 l u) |@true|))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1 t2 t3 l u)
 (IMPLIES (EQ (permut t1 t2 l u) |@true|)
 (IMPLIES (EQ (permut t2 t3 l u) |@true|) (EQ (permut t1 t3 l u) |@true|))))

 (FORALL (t1 t2 l u)
 (IMPLIES (EQ (permut t1 t2 l u) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (permut t2 t3 l u) |@true|) (EQ (permut t1 t3 l u) |@true|))))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (a1 a2 l u i j)
 (IMPLIES (AND (<= l i) (<= i u))
 (IMPLIES (AND (<= l j) (<= j u))
 (IMPLIES (exchange a1 a2 i j) (EQ (permut a1 a2 l u) |@true|)))))

 (FORALL (l u i)
 (IMPLIES (AND (<= l i) (<= i u))
 (FORALL (j)
 (IMPLIES (AND (<= l j) (<= j u))
 (FORALL (a1 a2)
 (IMPLIES (exchange a1 a2 i j) (EQ (permut a1 a2 l u) |@true|))))))))

(BG_PUSH
 ;; Why axiom exchange_upd
 (FORALL (a i j)
 (exchange a (update (update a i (access a j)) j (access a i)) i j)))

(BG_PUSH
 ;; Why axiom permut_weakening
 (FORALL (a1 a2 l1 r1 l2 r2)
 (IMPLIES (AND (AND (<= l1 l2) (<= l2 r2)) (<= r2 r1))
 (IMPLIES (EQ (permut a1 a2 l2 r2) |@true|)
 (EQ (permut a1 a2 l1 r1) |@true|))))

 (FORALL (l1 r1 l2 r2)
 (IMPLIES (AND (AND (<= l1 l2) (<= l2 r2)) (<= r2 r1))
 (FORALL (a2 a1)
 (IMPLIES (EQ (permut a1 a2 l2 r2) |@true|)
 (EQ (permut a1 a2 l1 r1) |@true|))))))

(BG_PUSH
 ;; Why axiom permut_eq
 (FORALL (a1 a2 l u)
 (IMPLIES (<= l u)
 (IMPLIES (EQ (permut a1 a2 l u) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< u i)) (EQ (access a2 i) (access a1 i)))))))

 (FORALL (l u)
 (IMPLIES (<= l u)
 (FORALL (a2 a1)
 (IMPLIES (EQ (permut a1 a2 l u) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< u i)) (EQ (access a2 i) (access a1 i)))))))))

(DEFPRED (permutation a1 a2)
  (EQ (permut a1 a2 0 (- (array_length a1) 1)) |@true|))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (a i v) (EQ (array_length (update a i v)) (array_length a))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (a1 a2 l u)
 (IMPLIES (EQ (permut a1 a2 l u) |@true|)
 (EQ (array_length a1) (array_length a2)))))

(BG_PUSH
 ;; Why axiom gcd_asubb_b
 (FORALL (a b) (EQ (gcd a b) (gcd (- a b) b))))

(BG_PUSH
 ;; Why axiom gcd_a_bsuba
 (FORALL (a b) (EQ (gcd a b) (gcd a (- b a)))))

(BG_PUSH
 ;; Why axiom gcd_a_a
 (FORALL (a) (EQ (gcd a a) a)))

(BG_PUSH
 ;; Why axiom gcd_a_0
 (FORALL (a) (EQ (gcd a 0) a)))

(BG_PUSH
 ;; Why axiom max_def
 (FORALL (x y)
 (AND (OR (EQ (max x y) x) (EQ (max x y) y))
 (AND (>= (max x y) x) (>= (max x y) y)))))

;; gcd1_po_1, File "gcd.mlw", line 25, characters 19-58
(FORALL (a) (FORALL (b) (IMPLIES (AND (> a 0) (> b 0)) (< 0 a))))

;; gcd1_po_2, File "gcd.mlw", line 25, characters 19-58
(FORALL (a) (FORALL (b) (IMPLIES (AND (> a 0) (> b 0)) (< 0 b))))

;; gcd1_po_3, File "gcd.mlw", line 25, characters 19-58
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (< 0 x) (AND (< 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ x y)
(IMPLIES (> x y) (FORALL (x0) (IMPLIES (EQ x0 (- x y)) (< 0 x0)))))))))))

;; gcd1_po_4, File "gcd.mlw", line 25, characters 19-58
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (< 0 x) (AND (< 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ x y)
(IMPLIES (> x y) (FORALL (x0) (IMPLIES (EQ x0 (- x y)) (< 0 y)))))))))))

;; gcd1_po_5, File "gcd.mlw", line 25, characters 19-58
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (< 0 x) (AND (< 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ x y)
(IMPLIES (> x y)
(FORALL (x0) (IMPLIES (EQ x0 (- x y)) (EQ (gcd x0 y) (gcd a b))))))))))))

;; gcd1_po_6, File "gcd.mlw", line 25, characters 68-76
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (< 0 x) (AND (< 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ x y)
(IMPLIES (> x y) (FORALL (x0) (IMPLIES (EQ x0 (- x y)) (<= 0 (max x y))))))))))))

;; gcd1_po_7, File "gcd.mlw", line 25, characters 68-76
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (< 0 x) (AND (< 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ x y)
(IMPLIES (> x y)
(FORALL (x0) (IMPLIES (EQ x0 (- x y)) (< (max x0 y) (max x y))))))))))))

;; gcd1_po_8, File "gcd.mlw", line 25, characters 19-58
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (< 0 x) (AND (< 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ x y)
(IMPLIES (<= x y) (FORALL (y0) (IMPLIES (EQ y0 (- y x)) (< 0 y0)))))))))))

;; gcd1_po_9, File "gcd.mlw", line 25, characters 19-58
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (< 0 x) (AND (< 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ x y)
(IMPLIES (<= x y)
(FORALL (y0) (IMPLIES (EQ y0 (- y x)) (EQ (gcd x y0) (gcd a b))))))))))))

;; gcd1_po_10, File "gcd.mlw", line 25, characters 68-76
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (< 0 x) (AND (< 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ x y)
(IMPLIES (<= x y) (FORALL (y0) (IMPLIES (EQ y0 (- y x)) (<= 0 (max x y))))))))))))

;; gcd1_po_11, File "gcd.mlw", line 25, characters 68-76
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (< 0 x) (AND (< 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ x y)
(IMPLIES (<= x y)
(FORALL (y0) (IMPLIES (EQ y0 (- y x)) (< (max x y0) (max x y))))))))))))

;; gcd1_po_12, File "gcd.mlw", line 33, characters 4-21
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (< 0 x) (AND (< 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (EQ x y) (EQ x (gcd a b)))))))))

(BG_PUSH
 ;; Why axiom gcd_a_amodb
 (FORALL (a b) (EQ (gcd a b) (gcd b (int_mod a b)))))

(BG_PUSH
 ;; Why axiom mod_lt
 (FORALL (a b) (AND (<= 0 (int_mod a b)) (< (int_mod a b) b))))

;; gcd2_po_1, File "gcd.mlw", line 47, characters 19-60
(FORALL (a) (FORALL (b) (IMPLIES (AND (>= a 0) (>= b 0)) (<= 0 a))))

;; gcd2_po_2, File "gcd.mlw", line 47, characters 19-60
(FORALL (a) (FORALL (b) (IMPLIES (AND (>= a 0) (>= b 0)) (<= 0 b))))

;; gcd2_po_3, File "gcd.mlw", line 47, characters 19-60
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (>= a 0) (>= b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (<= 0 x) (AND (<= 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ y 0)
(FORALL (x0)
(IMPLIES (EQ x0 y) (FORALL (y0) (IMPLIES (EQ y0 (int_mod x y)) (<= 0 x0))))))))))))

;; gcd2_po_4, File "gcd.mlw", line 47, characters 19-60
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (>= a 0) (>= b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (<= 0 x) (AND (<= 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ y 0)
(FORALL (x0)
(IMPLIES (EQ x0 y) (FORALL (y0) (IMPLIES (EQ y0 (int_mod x y)) (<= 0 y0))))))))))))

;; gcd2_po_5, File "gcd.mlw", line 47, characters 19-60
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (>= a 0) (>= b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (<= 0 x) (AND (<= 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ y 0)
(FORALL (x0)
(IMPLIES (EQ x0 y)
(FORALL (y0) (IMPLIES (EQ y0 (int_mod x y)) (EQ (gcd x0 y0) (gcd a b)))))))))))))

;; gcd2_po_6, File "gcd.mlw", line 47, characters 70-71
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (>= a 0) (>= b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (<= 0 x) (AND (<= 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ y 0)
(FORALL (x0)
(IMPLIES (EQ x0 y) (FORALL (y0) (IMPLIES (EQ y0 (int_mod x y)) (<= 0 y))))))))))))

;; gcd2_po_7, File "gcd.mlw", line 47, characters 70-71
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (>= a 0) (>= b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (<= 0 x) (AND (<= 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (NEQ y 0)
(FORALL (x0)
(IMPLIES (EQ x0 y) (FORALL (y0) (IMPLIES (EQ y0 (int_mod x y)) (< y0 y))))))))))))

;; gcd2_po_8, File "gcd.mlw", line 56, characters 4-21
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (>= a 0) (>= b 0))
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (<= 0 x) (AND (<= 0 y) (EQ (gcd x y) (gcd a b))))
(IMPLIES (EQ y 0) (EQ x (gcd a b)))))))))

