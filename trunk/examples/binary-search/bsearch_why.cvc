
UNIT: TYPE;
tt: UNIT;


%%%% DO NOT EDIT BELOW THIS LINE

%% Why logic add_int
add_int: ((INT, INT) -> INT);

%% Why logic sub_int
sub_int: ((INT, INT) -> INT);

%% Why logic mul_int
mul_int: ((INT, INT) -> INT);

%% Why logic div_int
div_int: ((INT, INT) -> INT);

%% Why logic mod_int
mod_int: ((INT, INT) -> INT);

%% Why logic neg_int
neg_int: (INT -> INT);

%% Why logic lt_int
lt_int: ((INT, INT) -> BOOLEAN);

%% Why logic le_int
le_int: ((INT, INT) -> BOOLEAN);

%% Why logic gt_int
gt_int: ((INT, INT) -> BOOLEAN);

%% Why logic ge_int
ge_int: ((INT, INT) -> BOOLEAN);

%% Why logic eq_int
eq_int: ((INT, INT) -> BOOLEAN);

%% Why logic neq_int
neq_int: ((INT, INT) -> BOOLEAN);

%% Why logic lt_int_bool
lt_int_bool: ((INT, INT) -> BOOLEAN);

%% Why logic le_int_bool
le_int_bool: ((INT, INT) -> BOOLEAN);

%% Why logic gt_int_bool
gt_int_bool: ((INT, INT) -> BOOLEAN);

%% Why logic ge_int_bool
ge_int_bool: ((INT, INT) -> BOOLEAN);

%% Why logic eq_int_bool
eq_int_bool: ((INT, INT) -> BOOLEAN);

%% Why logic neq_int_bool
neq_int_bool: ((INT, INT) -> BOOLEAN);

%% Why axiom lt_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT): ((lt_int_bool(x, y) <=> TRUE) <=> (x < y))));

%% Why axiom le_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT): ((le_int_bool(x, y) <=> TRUE) <=> (x <= y))));

%% Why axiom gt_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT): ((gt_int_bool(x, y) <=> TRUE) <=> (x > y))));

%% Why axiom ge_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT): ((ge_int_bool(x, y) <=> TRUE) <=> (x >= y))));

%% Why axiom eq_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT): ((eq_int_bool(x, y) <=> TRUE) <=> (x = y))));

%% Why axiom neq_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT): ((neq_int_bool(x, y) <=> TRUE) <=> (x /= y))));

%% Why logic add_real
add_real: ((REAL, REAL) -> REAL);

%% Why logic sub_real
sub_real: ((REAL, REAL) -> REAL);

%% Why logic mul_real
mul_real: ((REAL, REAL) -> REAL);

%% Why logic div_real
div_real: ((REAL, REAL) -> REAL);

%% Why logic neg_real
neg_real: (REAL -> REAL);

%% Why logic sqrt_real
sqrt_real: (REAL -> REAL);

%% Why logic real_of_int
real_of_int: (INT -> REAL);

%% Why logic int_of_real
int_of_real: (REAL -> INT);

%% Why logic lt_real
lt_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic le_real
le_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic gt_real
gt_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic ge_real
ge_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic eq_real
eq_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic neq_real
neq_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic eq_bool
eq_bool: ((BOOLEAN, BOOLEAN) -> BOOLEAN);

%% Why logic neq_bool
neq_bool: ((BOOLEAN, BOOLEAN) -> BOOLEAN);

%% Why logic eq_unit
eq_unit: ((UNIT, UNIT) -> BOOLEAN);

%% Why logic neq_unit
neq_unit: ((UNIT, UNIT) -> BOOLEAN);

%% Why logic sorted_array
sorted_array: (((ARRAY INT OF INT), INT, INT) -> BOOLEAN);

%% Why logic access
access_INT: (((ARRAY INT OF INT), INT) -> INT);

%% Why axiom sorted_array_def
ASSERT (FORALL (t:(ARRAY INT OF INT)):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (sorted_array(t, i, j) <=>
       (FORALL (k:INT): (((i <= k) AND (k < j)) => (t[k] <= t[(k + 1)])))))));

%% Why logic array_le
array_le: (((ARRAY INT OF INT), INT, INT, INT) -> BOOLEAN);

%% Why logic array_ge
array_ge: (((ARRAY INT OF INT), INT, INT, INT) -> BOOLEAN);

%% Why logic exchange
exchange: (((ARRAY INT OF INT), (ARRAY INT OF INT), INT, INT) -> BOOLEAN);

%% Why logic array_length
array_length_INT: ((ARRAY INT OF INT) -> INT);

%% Why axiom exchange_def
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (exchange(t1, t2, i, j) <=>
       ((array_length_INT(t1) = array_length_INT(t2)) AND
       ((t1[i] = t2[j]) AND
       ((t2[i] = t1[j]) AND
       (FORALL (k:INT): (((k /= i) AND (k /= j)) => (t1[k] = t2[k])))))))))));

%% Why logic permut
permut: (((ARRAY INT OF INT), (ARRAY INT OF INT)) -> BOOLEAN);

%% Why axiom permut_refl
ASSERT (FORALL (t:(ARRAY INT OF INT)): permut(t, t));

%% Why axiom permut_sym
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)): (permut(t1, t2) => permut(t2, t1))));

%% Why axiom permut_trans
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (t3:(ARRAY INT OF INT)):
       ((permut(t1, t2) AND permut(t2, t3)) => permut(t1, t3)))));

%% Why logic update
update_INT: (((ARRAY INT OF INT), INT, INT) -> (ARRAY INT OF INT));

%% Why axiom permut_exchange
ASSERT (FORALL (t:(ARRAY INT OF INT)):
       (FORALL (i:INT):
       (FORALL (j:INT):
       permut(t, update_INT(update_INT(t, i, t[j]), j, t[i])))));

%% Why logic sub_permut
sub_permut: ((INT, INT, (ARRAY INT OF INT), (ARRAY INT OF INT)) -> BOOLEAN);

%% Why axiom sub_permut_refl
ASSERT (FORALL (t:(ARRAY INT OF INT)):
       (FORALL (g:INT): (FORALL (d:INT): sub_permut(g, d, t, t))));

%% Why axiom sub_permut_sym
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) => sub_permut(g, d, t2, t1))))));

%% Why axiom sub_permut_trans
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (t3:(ARRAY INT OF INT)):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (sub_permut(g, d, t2, t3) => sub_permut(g, d, t1, t3))))))));

%% Why axiom sub_permut_exchange_1
ASSERT (FORALL (t:(ARRAY INT OF INT)):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND ((i <= d) AND ((g <= j) AND (j <= d)))) =>
       sub_permut(g, d, t, update_INT(update_INT(t, i, t[j]), j, t[i]))))))));

%% Why axiom sub_permut_exchange_2
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND
        ((i <= d) AND ((g <= j) AND ((j <= d) AND exchange(t1, t2, i, j))))) =>
       sub_permut(g, d, t1, t2))))))));

%% Why axiom sub_permut_permut
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (g:INT):
       (FORALL (d:INT): (sub_permut(g, d, t1, t2) => permut(t1, t2))))));

%% Why axiom array_length_update
ASSERT (FORALL (t:(ARRAY INT OF INT)):
       (FORALL (i:INT):
       (FORALL (v:INT):
       (array_length_INT(update_INT(t, i, v)) = array_length_INT(t)))));

%% Why axiom sub_permut_array_length
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (array_length_INT(t1) = array_length_INT(t2)))))));

%% Why axiom permut_array_length
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (permut(t1, t2) => (array_length_INT(t1) = array_length_INT(t2)))));

%% binary_search_po_1, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (t:(ARRAY INT OF INT)):
      (((array_length_INT(t) >= 1) AND
       sorted_array(t, 1, (array_length_INT(t) - 1))) =>
      (FORALL (l:INT):
      ((l = 1) =>
      (FORALL (result:INT):
      ((result = array_length_INT(t)) =>
      (FORALL (u:INT):
      ((u = (result - 1)) =>
      (FORALL (p:INT):
      ((p = 0) =>
      ((1 <= l) AND
      ((u <= (array_length_INT(t) - 1)) AND
      (((0 <= p) AND (p <= (array_length_INT(t) - 1))) AND
      (((p = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l, u))) AND
      ((p > 0) => (t[p] = v))))))))))))))));
POP;

%% binary_search_po_2, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (t:(ARRAY INT OF INT)):
      (((array_length_INT(t) >= 1) AND
       sorted_array(t, 1, (array_length_INT(t) - 1))) =>
      (FORALL (l:INT):
      ((l = 1) =>
      (FORALL (result:INT):
      ((result = array_length_INT(t)) =>
      (FORALL (u:INT):
      ((u = (result - 1)) =>
      (FORALL (p:INT):
      ((p = 0) =>
      (((1 <= l) AND
       ((u <= (array_length_INT(t) - 1)) AND
       (((0 <= p) AND (p <= (array_length_INT(t) - 1))) AND
       (((p = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l, u))) AND
       ((p > 0) => (t[p] = v)))))) =>
      (FORALL (l0:INT):
      (FORALL (p0:INT):
      (FORALL (u0:INT):
      (((1 <= l0) AND
       ((u0 <= (array_length_INT(t) - 1)) AND
       (((0 <= p0) AND (p0 <= (array_length_INT(t) - 1))) AND
       (((p0 = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l0, u0))) AND
       ((p0 > 0) => (t[p0] = v)))))) =>
      ((l0 <= u0) =>
      (FORALL (m:INT): ((m = mean(l0, u0)) => ((l0 <= m) AND (m <= u0))))))))))))))))))));
POP;

%% binary_search_po_3, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (t:(ARRAY INT OF INT)):
      (((array_length_INT(t) >= 1) AND
       sorted_array(t, 1, (array_length_INT(t) - 1))) =>
      (FORALL (l:INT):
      ((l = 1) =>
      (FORALL (result:INT):
      ((result = array_length_INT(t)) =>
      (FORALL (u:INT):
      ((u = (result - 1)) =>
      (FORALL (p:INT):
      ((p = 0) =>
      (((1 <= l) AND
       ((u <= (array_length_INT(t) - 1)) AND
       (((0 <= p) AND (p <= (array_length_INT(t) - 1))) AND
       (((p = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l, u))) AND
       ((p > 0) => (t[p] = v)))))) =>
      (FORALL (l0:INT):
      (FORALL (p0:INT):
      (FORALL (u0:INT):
      (((1 <= l0) AND
       ((u0 <= (array_length_INT(t) - 1)) AND
       (((0 <= p0) AND (p0 <= (array_length_INT(t) - 1))) AND
       (((p0 = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l0, u0))) AND
       ((p0 > 0) => (t[p0] = v)))))) =>
      ((l0 <= u0) =>
      (FORALL (m:INT):
      ((m = mean(l0, u0)) =>
      (((l0 <= m) AND (m <= u0)) => ((0 <= m) AND (m < array_length_INT(t))))))))))))))))))))));
POP;

%% binary_search_po_4, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (t:(ARRAY INT OF INT)):
      (((array_length_INT(t) >= 1) AND
       sorted_array(t, 1, (array_length_INT(t) - 1))) =>
      (FORALL (l:INT):
      ((l = 1) =>
      (FORALL (result:INT):
      ((result = array_length_INT(t)) =>
      (FORALL (u:INT):
      ((u = (result - 1)) =>
      (FORALL (p:INT):
      ((p = 0) =>
      (((1 <= l) AND
       ((u <= (array_length_INT(t) - 1)) AND
       (((0 <= p) AND (p <= (array_length_INT(t) - 1))) AND
       (((p = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l, u))) AND
       ((p > 0) => (t[p] = v)))))) =>
      (FORALL (l0:INT):
      (FORALL (p0:INT):
      (FORALL (u0:INT):
      (((1 <= l0) AND
       ((u0 <= (array_length_INT(t) - 1)) AND
       (((0 <= p0) AND (p0 <= (array_length_INT(t) - 1))) AND
       (((p0 = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l0, u0))) AND
       ((p0 > 0) => (t[p0] = v)))))) =>
      ((l0 <= u0) =>
      (FORALL (m:INT):
      ((m = mean(l0, u0)) =>
      (((l0 <= m) AND (m <= u0)) =>
      (((0 <= m) AND (m < array_length_INT(t))) =>
      (FORALL (result0:INT):
      ((result0 = t[m]) =>
      ((result0 < v) =>
      (FORALL (l1:INT):
      ((l1 = (m + 1)) =>
      (((1 <= l1) AND
       ((u0 <= (array_length_INT(t) - 1)) AND
       (((0 <= p0) AND (p0 <= (array_length_INT(t) - 1))) AND
       (((p0 = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l1, u0))) AND
       ((p0 > 0) => (t[p0] = v)))))) AND
      ((0 <= ((2 + u0) - l0)) AND (((2 + u0) - l1) < ((2 + u0) - l0)))))))))))))))))))))))))))));
POP;

%% binary_search_po_5, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (t:(ARRAY INT OF INT)):
      (((array_length_INT(t) >= 1) AND
       sorted_array(t, 1, (array_length_INT(t) - 1))) =>
      (FORALL (l:INT):
      ((l = 1) =>
      (FORALL (result:INT):
      ((result = array_length_INT(t)) =>
      (FORALL (u:INT):
      ((u = (result - 1)) =>
      (FORALL (p:INT):
      ((p = 0) =>
      (((1 <= l) AND
       ((u <= (array_length_INT(t) - 1)) AND
       (((0 <= p) AND (p <= (array_length_INT(t) - 1))) AND
       (((p = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l, u))) AND
       ((p > 0) => (t[p] = v)))))) =>
      (FORALL (l0:INT):
      (FORALL (p0:INT):
      (FORALL (u0:INT):
      (((1 <= l0) AND
       ((u0 <= (array_length_INT(t) - 1)) AND
       (((0 <= p0) AND (p0 <= (array_length_INT(t) - 1))) AND
       (((p0 = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l0, u0))) AND
       ((p0 > 0) => (t[p0] = v)))))) =>
      ((l0 <= u0) =>
      (FORALL (m:INT):
      ((m = mean(l0, u0)) =>
      (((l0 <= m) AND (m <= u0)) =>
      (((0 <= m) AND (m < array_length_INT(t))) =>
      (FORALL (result0:INT):
      ((result0 = t[m]) =>
      ((result0 >= v) =>
      (((0 <= m) AND (m < array_length_INT(t))) =>
      (FORALL (result1:INT):
      ((result1 = t[m]) =>
      ((result1 > v) =>
      (FORALL (u1:INT):
      ((u1 = (m - 1)) =>
      (((1 <= l0) AND
       ((u1 <= (array_length_INT(t) - 1)) AND
       (((0 <= p0) AND (p0 <= (array_length_INT(t) - 1))) AND
       (((p0 = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l0, u1))) AND
       ((p0 > 0) => (t[p0] = v)))))) AND
      ((0 <= ((2 + u0) - l0)) AND (((2 + u1) - l0) < ((2 + u0) - l0)))))))))))))))))))))))))))))))));
POP;

%% binary_search_po_6, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (t:(ARRAY INT OF INT)):
      (((array_length_INT(t) >= 1) AND
       sorted_array(t, 1, (array_length_INT(t) - 1))) =>
      (FORALL (l:INT):
      ((l = 1) =>
      (FORALL (result:INT):
      ((result = array_length_INT(t)) =>
      (FORALL (u:INT):
      ((u = (result - 1)) =>
      (FORALL (p:INT):
      ((p = 0) =>
      (((1 <= l) AND
       ((u <= (array_length_INT(t) - 1)) AND
       (((0 <= p) AND (p <= (array_length_INT(t) - 1))) AND
       (((p = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l, u))) AND
       ((p > 0) => (t[p] = v)))))) =>
      (FORALL (l0:INT):
      (FORALL (p0:INT):
      (FORALL (u0:INT):
      (((1 <= l0) AND
       ((u0 <= (array_length_INT(t) - 1)) AND
       (((0 <= p0) AND (p0 <= (array_length_INT(t) - 1))) AND
       (((p0 = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l0, u0))) AND
       ((p0 > 0) => (t[p0] = v)))))) =>
      ((l0 <= u0) =>
      (FORALL (m:INT):
      ((m = mean(l0, u0)) =>
      (((l0 <= m) AND (m <= u0)) =>
      (((0 <= m) AND (m < array_length_INT(t))) =>
      (FORALL (result0:INT):
      ((result0 = t[m]) =>
      ((result0 >= v) =>
      (((0 <= m) AND (m < array_length_INT(t))) =>
      (FORALL (result1:INT):
      ((result1 = t[m]) =>
      ((result1 <= v) =>
      (FORALL (p1:INT):
      ((p1 = m) =>
      (FORALL (l1:INT):
      ((l1 = (u0 + 1)) =>
      (((1 <= l1) AND
       ((u0 <= (array_length_INT(t) - 1)) AND
       (((0 <= p1) AND (p1 <= (array_length_INT(t) - 1))) AND
       (((p1 = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l1, u0))) AND
       ((p1 > 0) => (t[p1] = v)))))) AND
      ((0 <= ((2 + u0) - l0)) AND (((2 + u0) - l1) < ((2 + u0) - l0)))))))))))))))))))))))))))))))))));
POP;

%% binary_search_po_7, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (t:(ARRAY INT OF INT)):
      (((array_length_INT(t) >= 1) AND
       sorted_array(t, 1, (array_length_INT(t) - 1))) =>
      (FORALL (l:INT):
      ((l = 1) =>
      (FORALL (result:INT):
      ((result = array_length_INT(t)) =>
      (FORALL (u:INT):
      ((u = (result - 1)) =>
      (FORALL (p:INT):
      ((p = 0) =>
      (((1 <= l) AND
       ((u <= (array_length_INT(t) - 1)) AND
       (((0 <= p) AND (p <= (array_length_INT(t) - 1))) AND
       (((p = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l, u))) AND
       ((p > 0) => (t[p] = v)))))) =>
      (FORALL (l0:INT):
      (FORALL (p0:INT):
      (FORALL (u0:INT):
      (((1 <= l0) AND
       ((u0 <= (array_length_INT(t) - 1)) AND
       (((0 <= p0) AND (p0 <= (array_length_INT(t) - 1))) AND
       (((p0 = 0) => (In(t, 1, (array_length_INT(t) - 1)) => In(t, l0, u0))) AND
       ((p0 > 0) => (t[p0] = v)))))) =>
      ((l0 > u0) =>
      ((((1 <= p0) AND (p0 <= (array_length_INT(t) - 1))) AND (t[p0] = v)) OR
      ((p0 = 0) AND (NOT In(t, 1, (array_length_INT(t) - 1)))))))))))))))))))));
POP;

