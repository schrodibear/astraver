========== file tests/c/floats_bsearch.c ==========
#pragma JessieFloatModel(full)

/*@ predicate sorted{L}(double *t, integer a, integer b) =
  @    \forall integer i,j; a <= i <= j <= b ==> \le_float(t[i],t[j]);
  @*/

/*@ requires n >= 0 && \valid_range(t,0,n-1);
  @ requires ! \is_NaN(v);
  @ requires \forall integer i; 0 <= i <= n-1 ==> ! \is_NaN(t[i]);
  @ ensures -1 <= \result < n;
  @ behavior success:
  @   ensures \result >= 0 ==> \eq_float(t[\result],v);
  @ behavior failure:
  @   assumes sorted(t,0,n-1);
  @   ensures \result == -1 ==>
  @     \forall integer k; 0 <= k < n ==> \ne_float(t[k],v);
  @*/
int binary_search(double t[], int n, double v) {
  int l = 0, u = n-1;
  /*@ loop invariant
    @   0 <= l && u <= n-1;
    @ for failure:
    @   loop invariant
    @     \forall integer k;
    @      0 <= k < l ==> \lt_float(t[k],v);
    @   loop invariant
    @     \forall integer k;
    @      u < k <= n-1 ==> \lt_float(v,t[k]);
    @ loop variant u-l;
    @*/
  while (l <= u ) {
    int m = l + (u - l) / 2;
    //@ assert l <= m <= u;
    if (t[m] < v) l = m + 1;
    else if (t[m] > v) u = m - 1;
    else
      //@ assert 0;
      return m;
  }
  //@ assert 0;
  return -1;
}

/*
Local Variables:
compile-command: "PPCHOME=../.. LC_ALL=C make floats_bsearch"
End:
*/
========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/floats_bsearch.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir tests/c/floats_bsearch.jessie
[jessie] File tests/c/floats_bsearch.jessie/floats_bsearch.jc written.
[jessie] File tests/c/floats_bsearch.jessie/floats_bsearch.cloc written.
========== file tests/c/floats_bsearch.jessie/floats_bsearch.jc ==========
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol
# FloatModel = full

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag double_P = {
  double double_M: 64;
}

type double_P = [double_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

predicate sorted{L}(double_P[..] t, integer a, integer b) =
(\forall integer i;
  (\forall integer j;
    (((a <= i) && ((i <= j) && (j <= b))) ==>
      \le_double((t + i).double_M, (t + j).double_M))))

int32 binary_search(double_P[..] t, int32 n, double v)
  requires (C_42 : ((C_43 : (n >= 0)) &&
                     ((C_45 : (\offset_min(t) <= 0)) &&
                       (C_46 : (\offset_max(t) >= (n - 1))))));
  requires (C_41 : (! \double_is_NaN(v)));
  requires (C_40 : (\forall integer i_0;
                     (((0 <= i_0) && (i_0 <= (n - 1))) ==>
                       (! \double_is_NaN((t + i_0).double_M)))));
behavior default:
  ensures (C_35 : ((C_36 : ((- 1) <= \result)) &&
                    (C_37 : (\result < \at(n,Old)))));
behavior success:
  ensures (C_38 : ((\result >= 0) ==>
                    \eq_double((\at(t,Old) + \result).double_M, \at(v,Old))));
behavior failure:
  assumes sorted{Here}(t, 0, (n - 1));
  ensures (C_39 : ((\result == (- 1)) ==>
                    (\forall integer k_1;
                      (((0 <= k_1) && (k_1 < \at(n,Old))) ==>
                        \ne_double((\at(t,Old) + k_1).double_M, \at(v,Old))))));
{  
   (var int32 l);
   
   (var int32 u);
   
   (var int32 m);
   
   (var int32 __retres);
   
   {  (C_1 : (l = 0));
      (C_4 : (u = (C_3 : ((C_2 : (n - 1)) :> int32))));
      
      loop 
      behavior default:
        invariant (C_8 : ((C_9 : (0 <= l)) && (C_10 : (u <= (n - 1)))));
      behavior failure:
        invariant (C_7 : (\forall integer k;
                           (((0 <= k) && (k < l)) ==>
                             \lt_double((t + k).double_M, v))));
      behavior failure:
        invariant (C_6 : (\forall integer k_0;
                           (((u < k_0) && (k_0 <= (n - 1))) ==>
                             \lt_double(v, (t + k_0).double_M))));
      variant (C_5 : (u - l));
      while (true)
      {  
         {  (if (l <= u) then () else 
            (goto while_0_break));
            
            {  (C_17 : (m = (C_16 : ((C_15 : (l +
                                               (C_14 : ((C_13 : ((C_12 : (
                                                                 (C_11 : 
                                                                 (u -
                                                                   l)) :> int32)) /
                                                                  2)) :> int32)))) :> int32))));
               
               {  
                  (assert for default: (C_18 : ((C_19 : (l <= m)) &&
                                                 (C_20 : (m <= u)))));
                  ()
               };
               
               {  (if ((C_32 : (C_31 : (t + m)).double_M) < v) then (C_30 : (l = 
                                                                    (C_29 : (
                                                                    (C_28 : 
                                                                    (m +
                                                                    1)) :> int32)))) else 
                  (if ((C_27 : (C_26 : (t + m)).double_M) > v) then (C_25 : (u = 
                                                                    (C_24 : (
                                                                    (C_23 : 
                                                                    (m -
                                                                    1)) :> int32)))) else 
                  {  
                     {  
                        (assert for default: (C_21 : (0 != 0)));
                        ()
                     };
                     (C_22 : (__retres = m));
                     
                     (goto return_label)
                  }))
               }
            }
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (C_33 : (0 != 0)));
         ()
      };
      (C_34 : (__retres = -1));
      (return_label : 
      (return __retres))
   }
}
========== file tests/c/floats_bsearch.jessie/floats_bsearch.cloc ==========
[C_10]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 18
end = 26

[C_11]
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 17
end = 22

[C_12]
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 17
end = 22

[C_13]
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 16
end = 27

[C_14]
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 16
end = 27

[C_15]
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 12
end = 27

[C_16]
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 12
end = 27

[C_17]
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 4
end = 7

[C_18]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 15
end = 26

[C_19]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 15
end = 21

[C_1]
file = "HOME/tests/c/floats_bsearch.c"
line = 19
begin = 2
end = 5

[C_2]
file = "HOME/tests/c/floats_bsearch.c"
line = 19
begin = 17
end = 20

[C_3]
file = "HOME/tests/c/floats_bsearch.c"
line = 19
begin = 17
end = 20

[C_4]
file = "HOME/tests/c/floats_bsearch.c"
line = 19
begin = 2
end = 5

[binary_search]
name = "Function binary_search"
file = "HOME/tests/c/floats_bsearch.c"
line = 18
begin = 4
end = 17

[C_20]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 20
end = 26

[C_5]
file = "HOME/tests/c/floats_bsearch.c"
line = 29
begin = 19
end = 22

[C_21]
file = "HOME/tests/c/floats_bsearch.c"
line = 37
begin = 17
end = 18

[C_6]
file = "HOME/tests/c/floats_bsearch.c"
line = 27
begin = 10
end = 74

[C_22]
file = "HOME/tests/c/floats_bsearch.c"
line = 38
begin = 6
end = 15

[C_7]
file = "HOME/tests/c/floats_bsearch.c"
line = 24
begin = 10
end = 72

[C_23]
file = "HOME/tests/c/floats_bsearch.c"
line = 35
begin = 27
end = 32

[C_8]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 8
end = 26

[C_24]
file = "HOME/tests/c/floats_bsearch.c"
line = 35
begin = 27
end = 32

[C_9]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 8
end = 14

[C_25]
file = "HOME/tests/c/floats_bsearch.c"
line = 35
begin = 27
end = 32

[C_26]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_27]
file = "HOME/tests/c/floats_bsearch.c"
line = 35
begin = 13
end = 17

[C_28]
file = "HOME/tests/c/floats_bsearch.c"
line = 34
begin = 22
end = 27

[C_29]
file = "HOME/tests/c/floats_bsearch.c"
line = 34
begin = 22
end = 27

[C_30]
file = "HOME/tests/c/floats_bsearch.c"
line = 34
begin = 22
end = 27

[C_31]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_32]
file = "HOME/tests/c/floats_bsearch.c"
line = 34
begin = 8
end = 12

[C_33]
file = "HOME/tests/c/floats_bsearch.c"
line = 40
begin = 13
end = 14

[C_34]
file = "HOME/tests/c/floats_bsearch.c"
line = 41
begin = 2
end = 12

[C_35]
file = "HOME/tests/c/floats_bsearch.c"
line = 10
begin = 12
end = 29

[C_36]
file = "HOME/tests/c/floats_bsearch.c"
line = 10
begin = 12
end = 25

[C_37]
file = "HOME/tests/c/floats_bsearch.c"
line = 10
begin = 18
end = 29

[C_38]
file = "HOME/tests/c/floats_bsearch.c"
line = 12
begin = 14
end = 54

[C_39]
file = "HOME/tests/c/floats_bsearch.c"
line = 15
begin = 14
end = 91

[C_40]
file = "HOME/tests/c/floats_bsearch.c"
line = 9
begin = 13
end = 65

[C_41]
file = "HOME/tests/c/floats_bsearch.c"
line = 8
begin = 13
end = 25

[C_42]
file = "HOME/tests/c/floats_bsearch.c"
line = 7
begin = 13
end = 44

[C_43]
file = "HOME/tests/c/floats_bsearch.c"
line = 7
begin = 13
end = 19

[C_44]
file = "HOME/tests/c/floats_bsearch.c"
line = 7
begin = 23
end = 44

[C_45]
file = "HOME/tests/c/floats_bsearch.c"
line = 7
begin = 23
end = 44

[C_46]
file = "HOME/tests/c/floats_bsearch.c"
line = 7
begin = 23
end = 44

========== jessie execution ==========
Generating Why function binary_search
========== file tests/c/floats_bsearch.jessie/floats_bsearch.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs floats_bsearch.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs floats_bsearch.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why $(WHYLIB)/why/floats_full.why

COQDEP = coqdep

.PHONY: all coq pvs simplify cvcl harvey smtlib zenon

all: simplify/floats_bsearch_why.sx

project: why/floats_bsearch.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/floats_bsearch_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/floats_bsearch_why.vo

coq/floats_bsearch_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/floats_bsearch_why.v: why/floats_bsearch.why
	@echo 'why -coq [...] why/floats_bsearch.why' && $(WHY) $(JESSIELIBFILES) why/floats_bsearch.why && rm -f coq/jessie_why.v

coq-goals: goals coq/floats_bsearch_ctx_why.vo
	for f in why/*_po*.why; do make -f floats_bsearch.makefile coq/`basename $$f .why`_why.v ; done

coq/floats_bsearch_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/floats_bsearch_ctx_why.v: why/floats_bsearch_ctx.why
	@echo 'why -coq [...] why/floats_bsearch_ctx.why' && $(WHY) why/floats_bsearch_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export floats_bsearch_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/floats_bsearch_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/floats_bsearch_ctx_why.vo

pvs: pvs/floats_bsearch_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/floats_bsearch_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/floats_bsearch_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/floats_bsearch_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/floats_bsearch_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/floats_bsearch_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/floats_bsearch_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/floats_bsearch_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/floats_bsearch_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/floats_bsearch_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/floats_bsearch_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/floats_bsearch_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/floats_bsearch_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/floats_bsearch_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: floats_bsearch.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/floats_bsearch_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ide: why/floats_bsearch_why3.why
	@echo 'why3ide [...] $<' && why3ide $<

-include floats_bsearch.depend

depend: coq/floats_bsearch_why.v
	-$(COQDEP) -I coq coq/floats_bsearch*_why.v > floats_bsearch.depend

clean:
	rm -f coq/*.vo

========== file tests/c/floats_bsearch.jessie/floats_bsearch.loc ==========
[binary_search_safety]
name = "Function binary_search"
behavior = "Safety"
file = "HOME/tests/c/floats_bsearch.c"
line = 18
begin = 4
end = 17

[JC_40]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 15
end = 26

[JC_41]
kind = PointerDeref
file = "HOME/tests/c/floats_bsearch.c"
line = 34
begin = 8
end = 12

[JC_42]
kind = ArithOverflow
file = "HOME/tests/c/floats_bsearch.c"
line = 34
begin = 22
end = 27

[JC_43]
kind = PointerDeref
file = "HOME/tests/c/floats_bsearch.c"
line = 35
begin = 13
end = 17

[JC_44]
kind = ArithOverflow
file = "HOME/tests/c/floats_bsearch.c"
line = 35
begin = 27
end = 32

[JC_45]
file = "HOME/tests/c/floats_bsearch.c"
line = 37
begin = 17
end = 18

[JC_46]
file = "HOME/tests/c/floats_bsearch.c"
line = 29
begin = 19
end = 22

[JC_1]
file = "HOME/tests/c/floats_bsearch.c"
line = 7
begin = 13
end = 19

[JC_47]
file = "HOME/tests/c/floats_bsearch.c"
line = 40
begin = 13
end = 14

[JC_2]
file = "HOME/tests/c/floats_bsearch.c"
line = 7
begin = 23
end = 44

[JC_48]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 8
end = 14

[JC_3]
file = "HOME/tests/c/floats_bsearch.c"
line = 7
begin = 23
end = 44

[JC_49]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 18
end = 26

[JC_4]
file = "HOME/tests/c/floats_bsearch.c"
line = 8
begin = 13
end = 25

[JC_5]
file = "HOME/tests/c/floats_bsearch.c"
line = 9
begin = 13
end = 65

[JC_6]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_7]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_8]
file = "HOME/tests/c/floats_bsearch.c"
line = 7
begin = 13
end = 19

[JC_9]
file = "HOME/tests/c/floats_bsearch.c"
line = 7
begin = 23
end = 44

[JC_50]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 8
end = 26

[binary_search_ensures_failure]
name = "Function binary_search"
behavior = "Normal behavior `failure'"
file = "HOME/tests/c/floats_bsearch.c"
line = 18
begin = 4
end = 17

[JC_51]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_52]
file = "HOME/tests/c/floats_bsearch.jessie/floats_bsearch.jc"
line = 73
begin = 6
end = 2471

[JC_53]
file = "HOME/tests/c/floats_bsearch.jessie/floats_bsearch.jc"
line = 73
begin = 6
end = 2471

[JC_54]
kind = DivByZero
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 16
end = 27

[JC_55]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 15
end = 21

[JC_56]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 20
end = 26

[JC_57]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 15
end = 26

[JC_58]
file = "HOME/tests/c/floats_bsearch.c"
line = 37
begin = 17
end = 18

[JC_59]
file = "HOME/tests/c/floats_bsearch.c"
line = 40
begin = 13
end = 14

[JC_60]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 8
end = 14

[JC_61]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 18
end = 26

[JC_62]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 8
end = 26

[JC_10]
file = "HOME/tests/c/floats_bsearch.c"
line = 7
begin = 23
end = 44

[JC_63]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_11]
file = "HOME/tests/c/floats_bsearch.c"
line = 8
begin = 13
end = 25

[JC_64]
file = "HOME/tests/c/floats_bsearch.jessie/floats_bsearch.jc"
line = 73
begin = 6
end = 2471

[JC_12]
file = "HOME/tests/c/floats_bsearch.c"
line = 9
begin = 13
end = 65

[JC_65]
file = "HOME/tests/c/floats_bsearch.jessie/floats_bsearch.jc"
line = 73
begin = 6
end = 2471

[JC_13]
file = "HOME/"
line = 0
begin = -1
end = -1

[binary_search_ensures_success]
name = "Function binary_search"
behavior = "Normal behavior `success'"
file = "HOME/tests/c/floats_bsearch.c"
line = 18
begin = 4
end = 17

[JC_66]
kind = DivByZero
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 16
end = 27

[JC_14]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_67]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 15
end = 21

[JC_15]
file = "HOME/tests/c/floats_bsearch.c"
line = 10
begin = 12
end = 25

[JC_68]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 20
end = 26

[JC_16]
file = "HOME/tests/c/floats_bsearch.c"
line = 10
begin = 18
end = 29

[JC_69]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 15
end = 26

[JC_17]
file = "HOME/tests/c/floats_bsearch.c"
line = 10
begin = 12
end = 29

[JC_18]
file = "HOME/tests/c/floats_bsearch.c"
line = 10
begin = 12
end = 25

[JC_19]
file = "HOME/tests/c/floats_bsearch.c"
line = 10
begin = 18
end = 29

[JC_70]
file = "HOME/tests/c/floats_bsearch.c"
line = 37
begin = 17
end = 18

[JC_71]
file = "HOME/tests/c/floats_bsearch.c"
line = 40
begin = 13
end = 14

[JC_72]
file = "HOME/tests/c/floats_bsearch.c"
line = 27
begin = 10
end = 74

[JC_20]
file = "HOME/tests/c/floats_bsearch.c"
line = 10
begin = 12
end = 29

[JC_73]
file = "HOME/tests/c/floats_bsearch.c"
line = 24
begin = 10
end = 72

[JC_21]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_74]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 8
end = 14

[JC_22]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_75]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 18
end = 26

[JC_23]
file = "HOME/tests/c/floats_bsearch.c"
line = 12
begin = 14
end = 54

[JC_76]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 8
end = 26

[JC_24]
file = "HOME/tests/c/floats_bsearch.c"
line = 12
begin = 14
end = 54

[JC_77]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_25]
file = "HOME/tests/c/floats_bsearch.c"
line = 15
begin = 14
end = 91

[JC_78]
file = "HOME/tests/c/floats_bsearch.jessie/floats_bsearch.jc"
line = 73
begin = 6
end = 2471

[JC_26]
file = "HOME/tests/c/floats_bsearch.c"
line = 15
begin = 14
end = 91

[JC_79]
file = "HOME/tests/c/floats_bsearch.jessie/floats_bsearch.jc"
line = 73
begin = 6
end = 2471

[JC_27]
kind = ArithOverflow
file = "HOME/tests/c/floats_bsearch.c"
line = 19
begin = 17
end = 20

[JC_28]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 8
end = 14

[JC_29]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 18
end = 26

[JC_80]
kind = DivByZero
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 16
end = 27

[JC_81]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 15
end = 21

[JC_82]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 20
end = 26

[JC_30]
file = "HOME/tests/c/floats_bsearch.c"
line = 21
begin = 8
end = 26

[JC_83]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 15
end = 26

[JC_31]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_84]
file = "HOME/tests/c/floats_bsearch.c"
line = 37
begin = 17
end = 18

[binary_search_ensures_default]
name = "Function binary_search"
behavior = "Default behavior"
file = "HOME/tests/c/floats_bsearch.c"
line = 18
begin = 4
end = 17

[JC_32]
file = "HOME/tests/c/floats_bsearch.jessie/floats_bsearch.jc"
line = 73
begin = 6
end = 2471

[JC_85]
file = "HOME/tests/c/floats_bsearch.c"
line = 40
begin = 13
end = 14

[JC_33]
file = "HOME/tests/c/floats_bsearch.jessie/floats_bsearch.jc"
line = 73
begin = 6
end = 2471

[JC_34]
kind = ArithOverflow
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 17
end = 22

[JC_35]
kind = DivByZero
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 16
end = 27

[JC_36]
kind = ArithOverflow
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 16
end = 27

[JC_37]
kind = ArithOverflow
file = "HOME/tests/c/floats_bsearch.c"
line = 32
begin = 12
end = 27

[JC_38]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 15
end = 21

[JC_39]
file = "HOME/tests/c/floats_bsearch.c"
line = 33
begin = 20
end = 26

========== file tests/c/floats_bsearch.jessie/why/floats_bsearch.why ==========
type char_P

type double_P

type int32

type int8

type padding

type void_P

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic double_P_tag:  -> double_P tag_id

axiom double_P_int : (int_of_tag(double_P_tag) = (1))

logic double_P_of_pointer_address: unit pointer -> double_P pointer

axiom double_P_of_pointer_address_of_pointer_addr :
 (forall p:double_P pointer.
  (p = double_P_of_pointer_address(pointer_address(p))))

axiom double_P_parenttag_bottom : parenttag(double_P_tag, bottom_tag)

axiom double_P_tags :
 (forall x:double_P pointer.
  (forall double_P_tag_table:double_P tag_table.
   instanceof(double_P_tag_table, x, double_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_char_P(p:char_P pointer, a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_double_P(p:double_P pointer, a:int,
 double_P_alloc_table:double_P alloc_table) =
 (offset_min(double_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer, a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_double_P_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(double_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p:char_P pointer, b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_double_P(p:double_P pointer, b:int,
 double_P_alloc_table:double_P alloc_table) =
 (offset_max(double_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer, b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate sorted(t:double_P pointer, a:int, b:int,
 double_P_double_M_t_1_at_L:(double_P, double) memory) =
 (forall i:int.
  (forall j:int.
   ((le_int(a, i) and (le_int(i, j) and le_int(j, b))) ->
    le_double(select(double_P_double_M_t_1_at_L, shift(t, i)),
    select(double_P_double_M_t_1_at_L, shift(t, j))))))

predicate strict_valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_double_P(p:double_P pointer, a:int, b:int,
 double_P_alloc_table:double_P alloc_table) =
 ((offset_min(double_P_alloc_table, p) = a)
 and (offset_max(double_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_double_P(p:double_P pointer, a:int, b:int,
 double_P_alloc_table:double_P alloc_table) =
 ((offset_min(double_P_alloc_table, p) = a)
 and (offset_max(double_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_double_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_double_P(p:double_P pointer, a:int, b:int,
 double_P_alloc_table:double_P alloc_table) =
 ((offset_min(double_P_alloc_table, p) <= a)
 and (offset_max(double_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_double_P(p:double_P pointer, a:int, b:int,
 double_P_alloc_table:double_P alloc_table) =
 ((offset_min(double_P_alloc_table, p) <= a)
 and (offset_max(double_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_double_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_double_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_double_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_double_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter double_P_alloc_table : double_P alloc_table ref

parameter double_P_tag_table : double_P tag_table ref

parameter alloc_struct_double_P :
 n:int ->
  double_P_alloc_table:double_P alloc_table ref ->
   double_P_tag_table:double_P tag_table ref ->
    { } double_P pointer writes double_P_alloc_table,double_P_tag_table
    { (strict_valid_struct_double_P(result, (0), sub_int(n, (1)),
       double_P_alloc_table)
      and (alloc_extends(double_P_alloc_table@, double_P_alloc_table)
          and (alloc_fresh(double_P_alloc_table@, result, n)
              and instanceof(double_P_tag_table, result, double_P_tag)))) }

parameter alloc_struct_double_P_requires :
 n:int ->
  double_P_alloc_table:double_P alloc_table ref ->
   double_P_tag_table:double_P tag_table ref ->
    { ge_int(n, (0))} double_P pointer
    writes double_P_alloc_table,double_P_tag_table
    { (strict_valid_struct_double_P(result, (0), sub_int(n, (1)),
       double_P_alloc_table)
      and (alloc_extends(double_P_alloc_table@, double_P_alloc_table)
          and (alloc_fresh(double_P_alloc_table@, result, n)
              and instanceof(double_P_tag_table, result, double_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter binary_search :
 t_0:double_P pointer ->
  n:int32 ->
   v:double ->
    double_P_t_2_alloc_table:double_P alloc_table ->
     double_P_double_M_t_2:(double_P, double) memory ->
      { } int32
      { ((sorted(t_0@, (0), sub_int(integer_of_int32(n@), (1)),
          double_P_double_M_t_2@) ->
          (JC_26:
          (eq_int(integer_of_int32(result), neg_int((1))) ->
           (forall k_1:int.
            ((le_int((0), k_1) and lt_int(k_1, integer_of_int32(n@))) ->
             ne_double(select(double_P_double_M_t_2, shift(t_0@, k_1)), v@))))))
        and ((JC_24:
             (ge_int(integer_of_int32(result), (0)) ->
              eq_double(select(double_P_double_M_t_2,
                        shift(t_0@, integer_of_int32(result))),
              v@)))
            and (JC_20:
                ((JC_18: le_int(neg_int((1)), integer_of_int32(result)))
                and (JC_19:
                    lt_int(integer_of_int32(result), integer_of_int32(n@))))))) }

parameter binary_search_requires :
 t_0:double_P pointer ->
  n:int32 ->
   v:double ->
    double_P_t_2_alloc_table:double_P alloc_table ->
     double_P_double_M_t_2:(double_P, double) memory ->
      { (JC_6:
        ((JC_1: ge_int(integer_of_int32(n), (0)))
        and ((JC_2: le_int(offset_min(double_P_t_2_alloc_table, t_0), (0)))
            and ((JC_3:
                 ge_int(offset_max(double_P_t_2_alloc_table, t_0),
                 sub_int(integer_of_int32(n), (1))))
                and ((JC_4: (not double_is_NaN(v)))
                    and (JC_5:
                        (forall i_0:int.
                         ((le_int((0), i_0)
                          and le_int(i_0, sub_int(integer_of_int32(n), (1)))) ->
                          (not double_is_NaN(select(double_P_double_M_t_2,
                                             shift(t_0, i_0))))))))))))}
      int32
      { ((sorted(t_0@, (0), sub_int(integer_of_int32(n@), (1)),
          double_P_double_M_t_2@) ->
          (JC_26:
          (eq_int(integer_of_int32(result), neg_int((1))) ->
           (forall k_1:int.
            ((le_int((0), k_1) and lt_int(k_1, integer_of_int32(n@))) ->
             ne_double(select(double_P_double_M_t_2, shift(t_0@, k_1)), v@))))))
        and ((JC_24:
             (ge_int(integer_of_int32(result), (0)) ->
              eq_double(select(double_P_double_M_t_2,
                        shift(t_0@, integer_of_int32(result))),
              v@)))
            and (JC_20:
                ((JC_18: le_int(neg_int((1)), integer_of_int32(result)))
                and (JC_19:
                    lt_int(integer_of_int32(result), integer_of_int32(n@))))))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let binary_search_ensures_default =
 fun (t_0 : double_P pointer) (n : int32) (v : double) (double_P_t_2_alloc_table : double_P alloc_table) (double_P_double_M_t_2 : (double_P, double) memory) ->
  { (JC_13:
    ((JC_8: ge_int(integer_of_int32(n), (0)))
    and ((JC_9: le_int(offset_min(double_P_t_2_alloc_table, t_0), (0)))
        and ((JC_10:
             ge_int(offset_max(double_P_t_2_alloc_table, t_0),
             sub_int(integer_of_int32(n), (1))))
            and ((JC_11: (not double_is_NaN(v)))
                and (JC_12:
                    (forall i_0:int.
                     ((le_int((0), i_0)
                      and le_int(i_0, sub_int(integer_of_int32(n), (1)))) ->
                      (not double_is_NaN(select(double_P_double_M_t_2,
                                         shift(t_0, i_0)))))))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let l = ref (any_int32 void) in
     (let u = ref (any_int32 void) in
     (let m = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_<num> =
      begin
        try
         (let jessie_<num> =
         (C_1:
         (C_4:
         begin
           (let jessie_<num> = (l := (safe_int32_of_integer_ (0))) in void);
          (let jessie_<num> =
          (u := (C_3:
                (safe_int32_of_integer_ (C_2:
                                        ((sub_int (integer_of_int32 n)) (1)))))) in
          void);
          (loop_2:
          while true do
          { invariant
              (JC_50:
              ((JC_48: le_int((0), integer_of_int32(l)))
              and (JC_49:
                  le_int(integer_of_int32(u),
                  sub_int(integer_of_int32(n), (1))))))  }
           begin
             [ { } unit { true } ];
            try
             (let jessie_<num> =
             (C_17:
             begin
               (if ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u))
               then void
               else
                (let jessie_<num> = (raise (Goto_while_0_break_exc void)) in
                void));
              (let jessie_<num> =
              (m := (C_16:
                    (safe_int32_of_integer_ (C_15:
                                            ((add_int (integer_of_int32 !l)) 
                                             (integer_of_int32 (C_14:
                                                               (safe_int32_of_integer_ 
                                                                (C_13:
                                                                (JC_54:
                                                                ((computer_div 
                                                                  (integer_of_int32 
                                                                   (C_12:
                                                                   (safe_int32_of_integer_ 
                                                                    (C_11:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !u)) 
                                                                    (integer_of_int32 !l))))))) (2)))))))))))) in
              void);
              (assert
              { (JC_57:
                ((JC_55: le_int(integer_of_int32(l), integer_of_int32(m)))
                and (JC_56: le_int(integer_of_int32(m), integer_of_int32(u))))) };
              void); void;
              (if ((lt_double (C_32:
                              ((safe_acc_ double_P_double_M_t_2) (C_31:
                                                                 ((shift t_0) 
                                                                  (integer_of_int32 !m)))))) v)
              then
               (let jessie_<num> =
               (C_30:
               (l := (C_29:
                     (safe_int32_of_integer_ (C_28:
                                             ((add_int (integer_of_int32 !m)) (1))))))) in
               void)
              else
               (if ((gt_double (C_27:
                               ((safe_acc_ double_P_double_M_t_2) (C_26:
                                                                  ((shift t_0) 
                                                                   (integer_of_int32 !m)))))) v)
               then
                (let jessie_<num> =
                (C_25:
                (u := (C_24:
                      (safe_int32_of_integer_ (C_23:
                                              ((sub_int (integer_of_int32 !m)) (1))))))) in
                void)
               else
                (let jessie_<num> =
                (C_22:
                begin
                  (assert { (JC_58: neq_int((0), (0))) }; void); void;
                 (let jessie_<num> = (__retres := !m) in void);
                 (raise (Return_label_exc void)) end) in void)));
              (raise (Loop_continue_exc void)) end) in void) with
             Loop_continue_exc jessie_<num> -> void end end done);
          (raise (Goto_while_0_break_exc void)) end)) in void) with
         Goto_while_0_break_exc jessie_<num> ->
         (let jessie_<num> =
         (while_0_break:
         (C_34:
         begin
           void; (assert { (JC_59: neq_int((0), (0))) }; void); void;
          (__retres := (safe_int32_of_integer_ (neg_int (1)))); !__retres end)) in
         void) end; (raise (Return_label_exc void)) end in void) with
      Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end))));
    absurd  end with Return -> !return end))
  { (JC_17:
    ((JC_15: le_int(neg_int((1)), integer_of_int32(result)))
    and (JC_16: lt_int(integer_of_int32(result), integer_of_int32(n@))))) }

let binary_search_ensures_failure =
 fun (t_0 : double_P pointer) (n : int32) (v : double) (double_P_t_2_alloc_table : double_P alloc_table) (double_P_double_M_t_2 : (double_P, double) memory) ->
  { (sorted(t_0, (0), sub_int(integer_of_int32(n), (1)),
     double_P_double_M_t_2)
    and (JC_13:
        ((JC_8: ge_int(integer_of_int32(n), (0)))
        and ((JC_9: le_int(offset_min(double_P_t_2_alloc_table, t_0), (0)))
            and ((JC_10:
                 ge_int(offset_max(double_P_t_2_alloc_table, t_0),
                 sub_int(integer_of_int32(n), (1))))
                and ((JC_11: (not double_is_NaN(v)))
                    and (JC_12:
                        (forall i_0:int.
                         ((le_int((0), i_0)
                          and le_int(i_0, sub_int(integer_of_int32(n), (1)))) ->
                          (not double_is_NaN(select(double_P_double_M_t_2,
                                             shift(t_0, i_0))))))))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let l = ref (any_int32 void) in
     (let u = ref (any_int32 void) in
     (let m = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_<num> =
      begin
        try
         (let jessie_<num> =
         (C_1:
         (C_4:
         begin
           (let jessie_<num> = (l := (safe_int32_of_integer_ (0))) in void);
          (let jessie_<num> =
          (u := (C_3:
                (safe_int32_of_integer_ (C_2:
                                        ((sub_int (integer_of_int32 n)) (1)))))) in
          void);
          (loop_4:
          while true do
          { invariant
              ((JC_72:
               (forall k_0:int.
                ((lt_int(integer_of_int32(u), k_0)
                 and le_int(k_0, sub_int(integer_of_int32(n), (1)))) ->
                 lt_double(v, select(double_P_double_M_t_2, shift(t_0, k_0))))))
              and (JC_73:
                  (forall k:int.
                   ((le_int((0), k) and lt_int(k, integer_of_int32(l))) ->
                    lt_double(select(double_P_double_M_t_2, shift(t_0, k)),
                    v)))))  }
           begin
             [ { } unit reads l,u
               { (JC_76:
                 ((JC_74: le_int((0), integer_of_int32(l)))
                 and (JC_75:
                     le_int(integer_of_int32(u),
                     sub_int(integer_of_int32(n), (1)))))) } ];
            try
             (let jessie_<num> =
             (C_17:
             begin
               (if ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u))
               then void
               else
                (let jessie_<num> = (raise (Goto_while_0_break_exc void)) in
                void));
              (let jessie_<num> =
              (m := (C_16:
                    (safe_int32_of_integer_ (C_15:
                                            ((add_int (integer_of_int32 !l)) 
                                             (integer_of_int32 (C_14:
                                                               (safe_int32_of_integer_ 
                                                                (C_13:
                                                                (JC_80:
                                                                ((computer_div 
                                                                  (integer_of_int32 
                                                                   (C_12:
                                                                   (safe_int32_of_integer_ 
                                                                    (C_11:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !u)) 
                                                                    (integer_of_int32 !l))))))) (2)))))))))))) in
              void);
              [ { } unit reads l,m,u
                { (JC_83:
                  ((JC_81: le_int(integer_of_int32(l), integer_of_int32(m)))
                  and (JC_82:
                      le_int(integer_of_int32(m), integer_of_int32(u))))) } ];
              void;
              (if ((lt_double (C_32:
                              ((safe_acc_ double_P_double_M_t_2) (C_31:
                                                                 ((shift t_0) 
                                                                  (integer_of_int32 !m)))))) v)
              then
               (let jessie_<num> =
               (C_30:
               (l := (C_29:
                     (safe_int32_of_integer_ (C_28:
                                             ((add_int (integer_of_int32 !m)) (1))))))) in
               void)
              else
               (if ((gt_double (C_27:
                               ((safe_acc_ double_P_double_M_t_2) (C_26:
                                                                  ((shift t_0) 
                                                                   (integer_of_int32 !m)))))) v)
               then
                (let jessie_<num> =
                (C_25:
                (u := (C_24:
                      (safe_int32_of_integer_ (C_23:
                                              ((sub_int (integer_of_int32 !m)) (1))))))) in
                void)
               else
                (let jessie_<num> =
                (C_22:
                begin
                  [ { } unit { (JC_84: neq_int((0), (0))) } ]; void;
                 (let jessie_<num> = (__retres := !m) in void);
                 (raise (Return_label_exc void)) end) in void)));
              (raise (Loop_continue_exc void)) end) in void) with
             Loop_continue_exc jessie_<num> -> void end end done);
          (raise (Goto_while_0_break_exc void)) end)) in void) with
         Goto_while_0_break_exc jessie_<num> ->
         (let jessie_<num> =
         (while_0_break:
         (C_34:
         begin
           void; [ { } unit { (JC_85: neq_int((0), (0))) } ]; void;
          (__retres := (safe_int32_of_integer_ (neg_int (1)))); !__retres end)) in
         void) end; (raise (Return_label_exc void)) end in void) with
      Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end))));
    absurd  end with Return -> !return end))
  { (JC_25:
    (eq_int(integer_of_int32(result), neg_int((1))) ->
     (forall k_1:int.
      ((le_int((0), k_1) and lt_int(k_1, integer_of_int32(n@))) ->
       ne_double(select(double_P_double_M_t_2, shift(t_0@, k_1)), v@))))) }

let binary_search_ensures_success =
 fun (t_0 : double_P pointer) (n : int32) (v : double) (double_P_t_2_alloc_table : double_P alloc_table) (double_P_double_M_t_2 : (double_P, double) memory) ->
  { (JC_13:
    ((JC_8: ge_int(integer_of_int32(n), (0)))
    and ((JC_9: le_int(offset_min(double_P_t_2_alloc_table, t_0), (0)))
        and ((JC_10:
             ge_int(offset_max(double_P_t_2_alloc_table, t_0),
             sub_int(integer_of_int32(n), (1))))
            and ((JC_11: (not double_is_NaN(v)))
                and (JC_12:
                    (forall i_0:int.
                     ((le_int((0), i_0)
                      and le_int(i_0, sub_int(integer_of_int32(n), (1)))) ->
                      (not double_is_NaN(select(double_P_double_M_t_2,
                                         shift(t_0, i_0)))))))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let l = ref (any_int32 void) in
     (let u = ref (any_int32 void) in
     (let m = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_<num> =
      begin
        try
         (let jessie_<num> =
         (C_1:
         (C_4:
         begin
           (let jessie_<num> = (l := (safe_int32_of_integer_ (0))) in void);
          (let jessie_<num> =
          (u := (C_3:
                (safe_int32_of_integer_ (C_2:
                                        ((sub_int (integer_of_int32 n)) (1)))))) in
          void);
          (loop_3:
          while true do
          { invariant (JC_64: true)  }
           begin
             [ { } unit reads l,u
               { (JC_62:
                 ((JC_60: le_int((0), integer_of_int32(l)))
                 and (JC_61:
                     le_int(integer_of_int32(u),
                     sub_int(integer_of_int32(n), (1)))))) } ];
            try
             (let jessie_<num> =
             (C_17:
             begin
               (if ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u))
               then void
               else
                (let jessie_<num> = (raise (Goto_while_0_break_exc void)) in
                void));
              (let jessie_<num> =
              (m := (C_16:
                    (safe_int32_of_integer_ (C_15:
                                            ((add_int (integer_of_int32 !l)) 
                                             (integer_of_int32 (C_14:
                                                               (safe_int32_of_integer_ 
                                                                (C_13:
                                                                (JC_66:
                                                                ((computer_div 
                                                                  (integer_of_int32 
                                                                   (C_12:
                                                                   (safe_int32_of_integer_ 
                                                                    (C_11:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !u)) 
                                                                    (integer_of_int32 !l))))))) (2)))))))))))) in
              void);
              [ { } unit reads l,m,u
                { (JC_69:
                  ((JC_67: le_int(integer_of_int32(l), integer_of_int32(m)))
                  and (JC_68:
                      le_int(integer_of_int32(m), integer_of_int32(u))))) } ];
              void;
              (if ((lt_double (C_32:
                              ((safe_acc_ double_P_double_M_t_2) (C_31:
                                                                 ((shift t_0) 
                                                                  (integer_of_int32 !m)))))) v)
              then
               (let jessie_<num> =
               (C_30:
               (l := (C_29:
                     (safe_int32_of_integer_ (C_28:
                                             ((add_int (integer_of_int32 !m)) (1))))))) in
               void)
              else
               (if ((gt_double (C_27:
                               ((safe_acc_ double_P_double_M_t_2) (C_26:
                                                                  ((shift t_0) 
                                                                   (integer_of_int32 !m)))))) v)
               then
                (let jessie_<num> =
                (C_25:
                (u := (C_24:
                      (safe_int32_of_integer_ (C_23:
                                              ((sub_int (integer_of_int32 !m)) (1))))))) in
                void)
               else
                (let jessie_<num> =
                (C_22:
                begin
                  [ { } unit { (JC_70: neq_int((0), (0))) } ]; void;
                 (let jessie_<num> = (__retres := !m) in void);
                 (raise (Return_label_exc void)) end) in void)));
              (raise (Loop_continue_exc void)) end) in void) with
             Loop_continue_exc jessie_<num> -> void end end done);
          (raise (Goto_while_0_break_exc void)) end)) in void) with
         Goto_while_0_break_exc jessie_<num> ->
         (let jessie_<num> =
         (while_0_break:
         (C_34:
         begin
           void; [ { } unit { (JC_71: neq_int((0), (0))) } ]; void;
          (__retres := (safe_int32_of_integer_ (neg_int (1)))); !__retres end)) in
         void) end; (raise (Return_label_exc void)) end in void) with
      Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end))));
    absurd  end with Return -> !return end))
  { (JC_23:
    (ge_int(integer_of_int32(result), (0)) ->
     eq_double(select(double_P_double_M_t_2,
               shift(t_0@, integer_of_int32(result))),
     v@))) }

let binary_search_safety =
 fun (t_0 : double_P pointer) (n : int32) (v : double) (double_P_t_2_alloc_table : double_P alloc_table) (double_P_double_M_t_2 : (double_P, double) memory) ->
  { (JC_13:
    ((JC_8: ge_int(integer_of_int32(n), (0)))
    and ((JC_9: le_int(offset_min(double_P_t_2_alloc_table, t_0), (0)))
        and ((JC_10:
             ge_int(offset_max(double_P_t_2_alloc_table, t_0),
             sub_int(integer_of_int32(n), (1))))
            and ((JC_11: (not double_is_NaN(v)))
                and (JC_12:
                    (forall i_0:int.
                     ((le_int((0), i_0)
                      and le_int(i_0, sub_int(integer_of_int32(n), (1)))) ->
                      (not double_is_NaN(select(double_P_double_M_t_2,
                                         shift(t_0, i_0)))))))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let l = ref (any_int32 void) in
     (let u = ref (any_int32 void) in
     (let m = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_<num> =
      begin
        try
         (let jessie_<num> =
         (C_1:
         (C_4:
         begin
           (let jessie_<num> = (l := (safe_int32_of_integer_ (0))) in void);
          (let jessie_<num> =
          (u := (C_3:
                (JC_27:
                (int32_of_integer_ (C_2:
                                   ((sub_int (integer_of_int32 n)) (1))))))) in
          void);
          (loop_1:
          while true do
          { invariant (JC_32: true)
            variant (JC_46 : sub_int(integer_of_int32(u),
                             integer_of_int32(l))) }
           begin
             [ { } unit reads l,u
               { (JC_30:
                 ((JC_28: le_int((0), integer_of_int32(l)))
                 and (JC_29:
                     le_int(integer_of_int32(u),
                     sub_int(integer_of_int32(n), (1)))))) } ];
            try
             (let jessie_<num> =
             (C_17:
             begin
               (if ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u))
               then void
               else
                (let jessie_<num> = (raise (Goto_while_0_break_exc void)) in
                void));
              (let jessie_<num> =
              (m := (C_16:
                    (JC_37:
                    (int32_of_integer_ (C_15:
                                       ((add_int (integer_of_int32 !l)) 
                                        (integer_of_int32 (C_14:
                                                          (JC_36:
                                                          (int32_of_integer_ 
                                                           (C_13:
                                                           (JC_35:
                                                           ((computer_div_ 
                                                             (integer_of_int32 
                                                              (C_12:
                                                              (JC_34:
                                                              (int32_of_integer_ 
                                                               (C_11:
                                                               ((sub_int 
                                                                 (integer_of_int32 !u)) 
                                                                (integer_of_int32 !l)))))))) (2)))))))))))))) in
              void);
              [ { } unit reads l,m,u
                { (JC_40:
                  ((JC_38: le_int(integer_of_int32(l), integer_of_int32(m)))
                  and (JC_39:
                      le_int(integer_of_int32(m), integer_of_int32(u))))) } ];
              void;
              (if ((lt_double (C_32:
                              (JC_41:
                              ((((offset_acc_ double_P_t_2_alloc_table) double_P_double_M_t_2) t_0) 
                               (integer_of_int32 !m))))) v)
              then
               (let jessie_<num> =
               (C_30:
               (l := (C_29:
                     (JC_42:
                     (int32_of_integer_ (C_28:
                                        ((add_int (integer_of_int32 !m)) (1)))))))) in
               void)
              else
               (if ((gt_double (C_27:
                               (JC_43:
                               ((((offset_acc_ double_P_t_2_alloc_table) double_P_double_M_t_2) t_0) 
                                (integer_of_int32 !m))))) v)
               then
                (let jessie_<num> =
                (C_25:
                (u := (C_24:
                      (JC_44:
                      (int32_of_integer_ (C_23:
                                         ((sub_int (integer_of_int32 !m)) (1)))))))) in
                void)
               else
                (let jessie_<num> =
                (C_22:
                begin
                  [ { } unit { (JC_45: neq_int((0), (0))) } ]; void;
                 (let jessie_<num> = (__retres := !m) in void);
                 (raise (Return_label_exc void)) end) in void)));
              (raise (Loop_continue_exc void)) end) in void) with
             Loop_continue_exc jessie_<num> -> void end end done);
          (raise (Goto_while_0_break_exc void)) end)) in void) with
         Goto_while_0_break_exc jessie_<num> ->
         (let jessie_<num> =
         (while_0_break:
         (C_34:
         begin
           void; [ { } unit { (JC_47: neq_int((0), (0))) } ]; void;
          (__retres := (safe_int32_of_integer_ (neg_int (1)))); !__retres end)) in
         void) end; (raise (Return_label_exc void)) end in void) with
      Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end))));
    absurd  end with Return -> !return end)) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/floats_bsearch.why
========== file tests/c/floats_bsearch.jessie/why/floats_bsearch_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s2) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s3))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type mode

logic nearest_even : mode

logic to_zero : mode

logic up : mode

logic down : mode

logic nearest_away : mode

logic mode_match : mode, 'a1, 'a1, 'a1, 'a1, 'a1 -> 'a1

axiom mode_match_nearest_even:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(nearest_even, aux_2, aux_3, aux_4,
            aux_5, aux_6)]. (mode_match(nearest_even, aux_2, aux_3, aux_4,
            aux_5, aux_6) = aux_2))))))

axiom mode_match_to_zero:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(to_zero, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(to_zero, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_3))))))

axiom mode_match_up:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(up, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(up, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_4))))))

axiom mode_match_down:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(down, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(down, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_5))))))

axiom mode_match_nearest_away:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(nearest_away, aux_2, aux_3, aux_4,
            aux_5, aux_6)]. (mode_match(nearest_away, aux_2, aux_3, aux_4,
            aux_5, aux_6) = aux_6))))))

axiom mode_inversion:
  (forall aux_1:mode.
    (((((aux_1 = nearest_even) or (aux_1 = to_zero)) or (aux_1 = up)) or
      (aux_1 = down)) or
     (aux_1 = nearest_away)))

logic mode_to_int : mode -> int

axiom mode_to_int_nearest_even: (mode_to_int(nearest_even) = 0)

axiom mode_to_int_to_zero: (mode_to_int(to_zero) = 1)

axiom mode_to_int_up: (mode_to_int(up) = 2)

axiom mode_to_int_down: (mode_to_int(down) = 3)

axiom mode_to_int_nearest_away: (mode_to_int(nearest_away) = 4)

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

logic single_to_double : single -> double

logic double_to_single : mode, double -> single

axiom single_to_double_val:
  (forall s:single. (double_value(single_to_double(s)) = single_value(s)))

axiom double_to_single_val:
  (forall m:mode.
    (forall d:double. (single_value(double_to_single(m, d)) = round_single(m,
      double_value(d)))))

function min_single() : real = 0x1.p-149

function min_double() : real = 0x1.p-1074

type Float_class

logic Finite : Float_class

logic Infinite : Float_class

logic NaN : Float_class

logic Float_class_match : Float_class, 'a1, 'a1, 'a1 -> 'a1

axiom Float_class_match_Finite:
  (forall aux_8:'a1.
    (forall aux_9:'a1.
      (forall aux_10:'a1 [Float_class_match(Finite, aux_8, aux_9, aux_10)].
        (Float_class_match(Finite, aux_8, aux_9, aux_10) = aux_8))))

axiom Float_class_match_Infinite:
  (forall aux_8:'a1.
    (forall aux_9:'a1.
      (forall aux_10:'a1 [Float_class_match(Infinite, aux_8, aux_9, aux_10)].
        (Float_class_match(Infinite, aux_8, aux_9, aux_10) = aux_9))))

axiom Float_class_match_NaN:
  (forall aux_8:'a1.
    (forall aux_9:'a1.
      (forall aux_10:'a1 [Float_class_match(NaN, aux_8, aux_9, aux_10)].
        (Float_class_match(NaN, aux_8, aux_9, aux_10) = aux_10))))

axiom Float_class_inversion:
  (forall aux_7:Float_class.
    (((aux_7 = Finite) or (aux_7 = Infinite)) or (aux_7 = NaN)))

logic Float_class_to_int : Float_class -> int

axiom Float_class_to_int_Finite: (Float_class_to_int(Finite) = 0)

axiom Float_class_to_int_Infinite: (Float_class_to_int(Infinite) = 1)

axiom Float_class_to_int_NaN: (Float_class_to_int(NaN) = 2)

type sign

logic Negative : sign

logic Positive : sign

logic sign_match : sign, 'a1, 'a1 -> 'a1

axiom sign_match_Negative:
  (forall aux_12:'a1.
    (forall aux_13:'a1 [sign_match(Negative, aux_12, aux_13)].
      (sign_match(Negative, aux_12, aux_13) = aux_12)))

axiom sign_match_Positive:
  (forall aux_12:'a1.
    (forall aux_13:'a1 [sign_match(Positive, aux_12, aux_13)].
      (sign_match(Positive, aux_12, aux_13) = aux_13)))

axiom sign_inversion:
  (forall aux_11:sign. ((aux_11 = Negative) or (aux_11 = Positive)))

logic sign_to_int : sign -> int

axiom sign_to_int_Negative: (sign_to_int(Negative) = 0)

axiom sign_to_int_Positive: (sign_to_int(Positive) = 1)

logic single_class : single -> Float_class

logic double_class : double -> Float_class

logic single_sign : single -> sign

logic double_sign : double -> sign

logic same_sign_real_bool : sign, real -> prop

axiom same_sign_real_bool_inversion:
  (forall aux_14:sign.
    (forall aux_15:real [same_sign_real_bool(aux_14, aux_15)].
      (same_sign_real_bool(aux_14, aux_15) ->
       ((exists x:real.
          ((x < 0.0) and ((aux_14 = Negative) and (aux_15 = x)))) or
        (exists x:real.
          ((x > 0.0) and ((aux_14 = Positive) and (aux_15 = x))))))))

axiom neg_case:
  (forall x:real. ((x < 0.0) -> same_sign_real_bool(Negative, x)))

axiom pos_case:
  (forall x:real. ((x > 0.0) -> same_sign_real_bool(Positive, x)))

axiom same_sign_real_bool_zero1:
  (forall b:sign. (not same_sign_real_bool(b, 0.0)))

axiom same_sign_real_bool_zero2:
  (forall x:real.
    ((same_sign_real_bool(Negative, x) and same_sign_real_bool(Positive, x)) ->
     false))

axiom same_sign_real_bool_zero3:
  (forall b:sign. (forall x:real. (same_sign_real_bool(b, x) -> (x <> 0.0))))

axiom same_sign_real_bool_correct2:
  (forall b:sign.
    (forall x:real.
      (same_sign_real_bool(b, x) -> ((x < 0.0) <-> (b = Negative)))))

axiom same_sign_real_bool_correct3:
  (forall b:sign.
    (forall x:real.
      (same_sign_real_bool(b, x) -> ((x > 0.0) <-> (b = Positive)))))

predicate single_same_sign_real(x: single, y: real) =
  same_sign_real_bool(single_sign(x), y)

predicate single_same_sign(x: single, y: single) =
  (single_sign(x) = single_sign(y))

predicate single_diff_sign(x: single, y: single) =
  (single_sign(x) <> single_sign(y))

predicate single_product_sign(z: single, x: single, y: single) =
  ((single_same_sign(x, y) -> (single_sign(z) = Positive)) and
   (single_diff_sign(x, y) -> (single_sign(z) = Negative)))

predicate double_same_sign_real(x: double, y: real) =
  same_sign_real_bool(double_sign(x), y)

predicate double_same_sign(x: double, y: double) =
  (double_sign(x) = double_sign(y))

predicate double_diff_sign(x: double, y: double) =
  (double_sign(x) <> double_sign(y))

predicate double_product_sign(z: double, x: double, y: double) =
  ((double_same_sign(x, y) -> (double_sign(z) = Positive)) and
   (double_diff_sign(x, y) -> (double_sign(z) = Negative)))

predicate single_same_class(x: single, y: single) =
  (single_class(x) = single_class(y))

predicate singlediff_class(x: single, y: single) =
  (single_class(x) <> single_class(y))

predicate double_same_class(x: double, y: double) =
  (double_class(x) = double_class(y))

predicate doublediff_class(x: double, y: double) =
  (double_class(x) <> double_class(y))

axiom single_finite_sign:
  (forall x:single.
    (((single_class(x) = Finite) and (single_value(x) <> 0.0)) ->
     single_same_sign_real(x, single_value(x))))

axiom single_finite_sign_neg1:
  (forall x:single.
    (((single_class(x) = Finite) and (single_value(x) < 0.0)) ->
     (single_sign(x) = Negative)))

axiom single_finite_sign_neg2:
  (forall x:single.
    (((single_class(x) = Finite) and
      ((single_value(x) <> 0.0) and (single_sign(x) = Negative))) ->
     (single_value(x) < 0.0)))

axiom single_finite_sign_pos1:
  (forall x:single.
    (((single_class(x) = Finite) and (single_value(x) > 0.0)) ->
     (single_sign(x) = Positive)))

axiom single_finite_sign_pos2:
  (forall x:single.
    (((single_class(x) = Finite) and
      ((single_value(x) <> 0.0) and (single_sign(x) = Positive))) ->
     (single_value(x) > 0.0)))

axiom single_diff_sign_trans:
  (forall x:single.
    (forall y:single.
      (forall z:single.
        ((single_diff_sign(x, y) and single_diff_sign(y, z)) ->
         single_same_sign(x, z)))))

axiom single_same_sign_product:
  (forall x:single.
    (forall y:single.
      (((single_class(x) = Finite) and
        ((single_class(y) = Finite) and single_same_sign(x, y))) ->
       ((single_value(x) * single_value(y)) >= 0.0))))

axiom single_diff_sign_product:
  (forall x:single.
    (forall y:single.
      (((single_class(x) = Finite) and
        ((single_class(y) = Finite) and
         ((single_value(x) * single_value(y)) < 0.0))) ->
       single_diff_sign(x, y))))

axiom double_finite_sign:
  (forall x:double.
    (((double_class(x) = Finite) and (double_value(x) <> 0.0)) ->
     double_same_sign_real(x, double_value(x))))

axiom double_finite_sign_neg1:
  (forall x:double.
    (((double_class(x) = Finite) and (double_value(x) < 0.0)) ->
     (double_sign(x) = Negative)))

axiom double_finite_sign_neg2:
  (forall x:double.
    (((double_class(x) = Finite) and
      ((double_value(x) <> 0.0) and (double_sign(x) = Negative))) ->
     (double_value(x) < 0.0)))

axiom double_finite_sign_pos1:
  (forall x:double.
    (((double_class(x) = Finite) and (double_value(x) > 0.0)) ->
     (double_sign(x) = Positive)))

axiom double_finite_sign_pos2:
  (forall x:double.
    (((double_class(x) = Finite) and
      ((double_value(x) <> 0.0) and (double_sign(x) = Positive))) ->
     (double_value(x) > 0.0)))

axiom double_diff_sign_trans:
  (forall x:double.
    (forall y:double.
      (forall z:double.
        ((double_diff_sign(x, y) and double_diff_sign(y, z)) ->
         double_same_sign(x, z)))))

axiom double_same_sign_product:
  (forall x:double.
    (forall y:double.
      (((double_class(x) = Finite) and
        ((double_class(y) = Finite) and double_same_sign(x, y))) ->
       ((double_value(x) * double_value(y)) >= 0.0))))

axiom double_diff_sign_product:
  (forall x:double.
    (forall y:double.
      (((double_class(x) = Finite) and
        ((double_class(y) = Finite) and
         ((double_value(x) * double_value(y)) < 0.0))) ->
       double_diff_sign(x, y))))

predicate single_is_finite(x: single) = (single_class(x) = Finite)

predicate single_is_infinite(x: single) = (single_class(x) = Infinite)

predicate single_is_NaN(x: single) = (single_class(x) = NaN)

predicate single_is_not_NaN(x: single) =
  (single_is_finite(x) or single_is_infinite(x))

predicate single_is_minus_infinity(x: single) =
  (single_is_infinite(x) and (single_sign(x) = Negative))

predicate single_is_plus_infinity(x: single) =
  (single_is_infinite(x) and (single_sign(x) = Positive))

predicate single_is_gen_zero(x: single) =
  (single_is_finite(x) and (single_value(x) = 0.0))

predicate single_is_gen_zero_plus(x: single) =
  (single_is_gen_zero(x) and (single_sign(x) = Positive))

predicate single_is_gen_zero_minus(x: single) =
  (single_is_gen_zero(x) and (single_sign(x) = Negative))

predicate double_is_finite(x: double) = (double_class(x) = Finite)

predicate double_is_infinite(x: double) = (double_class(x) = Infinite)

predicate double_is_NaN(x: double) = (double_class(x) = NaN)

predicate double_is_not_NaN(x: double) =
  (double_is_finite(x) or double_is_infinite(x))

predicate double_is_minus_infinity(x: double) =
  (double_is_infinite(x) and (double_sign(x) = Negative))

predicate double_is_plus_infinity(x: double) =
  (double_is_infinite(x) and (double_sign(x) = Positive))

predicate double_is_gen_zero(x: double) =
  (double_is_finite(x) and (double_value(x) = 0.0))

predicate double_is_gen_zero_plus(x: double) =
  (double_is_gen_zero(x) and (double_sign(x) = Positive))

predicate double_is_gen_zero_minus(x: double) =
  (double_is_gen_zero(x) and (double_sign(x) = Negative))

predicate single_overflow_value(m: mode, x: single) =
  (((m = down) ->
    (((single_sign(x) = Negative) -> single_is_infinite(x)) and
     ((single_sign(x) = Positive) ->
      (single_is_finite(x) and (single_value(x) = max_single))))) and
   (((m = up) ->
     (((single_sign(x) = Negative) ->
       (single_is_finite(x) and (single_value(x) = (-max_single)))) and
      ((single_sign(x) = Positive) -> single_is_infinite(x)))) and
    (((m = to_zero) ->
      (single_is_finite(x) and
       (((single_sign(x) = Negative) -> (single_value(x) = (-max_single))) and
        ((single_sign(x) = Positive) -> (single_value(x) = max_single))))) and
     (((m = nearest_away) or (m = nearest_even)) -> single_is_infinite(x)))))

predicate double_overflow_value(m: mode, x: double) =
  (((m = down) ->
    (((double_sign(x) = Negative) -> double_is_infinite(x)) and
     ((double_sign(x) = Positive) ->
      (double_is_finite(x) and (double_value(x) = max_double))))) and
   (((m = up) ->
     (((double_sign(x) = Negative) ->
       (double_is_finite(x) and (double_value(x) = (-max_double)))) and
      ((double_sign(x) = Positive) -> double_is_infinite(x)))) and
    (((m = to_zero) ->
      (double_is_finite(x) and
       (((double_sign(x) = Negative) -> (double_value(x) = (-max_double))) and
        ((double_sign(x) = Positive) -> (double_value(x) = max_double))))) and
     (((m = nearest_away) or (m = nearest_even)) -> double_is_infinite(x)))))

predicate single_underflow_value(m: mode, x: single) =
  (single_is_finite(x) and
   (((single_sign(x) = Positive) ->
     ((((m = down) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (single_value(x) = 0.0)) and
      ((m = up) -> (single_value(x) = min_single)))) and
    ((single_sign(x) = Negative) ->
     ((((m = up) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (single_value(x) = 0.0)) and
      ((m = down) -> (single_value(x) = (-min_single)))))))

predicate double_underflow_value(m: mode, x: double) =
  (double_is_finite(x) and
   (((double_sign(x) = Positive) ->
     ((((m = down) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (double_value(x) = 0.0)) and
      ((m = up) -> (double_value(x) = min_double)))) and
    ((double_sign(x) = Negative) ->
     ((((m = up) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (double_value(x) = 0.0)) and
      ((m = down) -> (double_value(x) = (-min_double)))))))

predicate single_sign_zero_result(m: mode, x: single) =
  ((single_value(x) = 0.0) ->
   (((m = down) -> (single_sign(x) = Negative)) and
    ((m <> down) -> (single_sign(x) = Positive))))

predicate double_sign_zero_result(m: mode, x: double) =
  ((double_value(x) = 0.0) ->
   (((m = down) -> (double_sign(x) = Negative)) and
    ((m <> down) -> (double_sign(x) = Positive))))

predicate le_single(x: single, y: single) =
  ((single_is_finite(x) and
    (single_is_finite(y) and (single_value(x) <= single_value(y)))) or
   ((single_is_minus_infinity(x) and single_is_not_NaN(y)) or
    (single_is_not_NaN(x) and single_is_plus_infinity(y))))

predicate lt_single(x: single, y: single) =
  ((single_is_finite(x) and
    (single_is_finite(y) and (single_value(x) < single_value(y)))) or
   ((single_is_minus_infinity(x) and
     (single_is_not_NaN(y) and (not single_is_minus_infinity(y)))) or
    (single_is_not_NaN(x) and
     ((not single_is_plus_infinity(x)) and single_is_plus_infinity(y)))))

predicate ge_single(x: single, y: single) = le_single(y, x)

predicate gt_single(x: single, y: single) = lt_single(y, x)

predicate eq_single(x: single, y: single) =
  (single_is_not_NaN(x) and
   (single_is_not_NaN(y) and
    ((single_is_finite(x) and
      (single_is_finite(y) and (single_value(x) = single_value(y)))) or
     (single_is_infinite(x) and
      (single_is_infinite(y) and single_same_sign(x, y))))))

predicate ne_single(x: single, y: single) = (not eq_single(x, y))

predicate le_double(x: double, y: double) =
  ((double_is_finite(x) and
    (double_is_finite(y) and (double_value(x) <= double_value(y)))) or
   ((double_is_minus_infinity(x) and double_is_not_NaN(y)) or
    (double_is_not_NaN(x) and double_is_plus_infinity(y))))

predicate lt_double(x: double, y: double) =
  ((double_is_finite(x) and
    (double_is_finite(y) and (double_value(x) < double_value(y)))) or
   ((double_is_minus_infinity(x) and
     (double_is_not_NaN(y) and (not double_is_minus_infinity(y)))) or
    (double_is_not_NaN(x) and
     ((not double_is_plus_infinity(x)) and double_is_plus_infinity(y)))))

predicate ge_double(x: double, y: double) = le_double(y, x)

predicate gt_double(x: double, y: double) = lt_double(y, x)

predicate eq_double(x: double, y: double) =
  (double_is_not_NaN(x) and
   (double_is_not_NaN(y) and
    ((double_is_finite(x) and
      (double_is_finite(y) and (double_value(x) = double_value(y)))) or
     (double_is_infinite(x) and
      (double_is_infinite(y) and double_same_sign(x, y))))))

predicate ne_double(x: double, y: double) = (not eq_double(x, y))

axiom le_lt_double_trans:
  (forall x:double.
    (forall y:double.
      (forall z:double.
        ((le_double(x, y) and lt_double(y, z)) -> lt_double(x, z)))))

axiom lt_le_double_trans:
  (forall x:double.
    (forall y:double.
      (forall z:double.
        ((lt_double(x, y) and le_double(y, z)) -> lt_double(x, z)))))

axiom round_single1:
  (forall m:mode.
    (forall x:real.
      (no_overflow_single(m, x) ->
       (single_is_finite(round_single_logic(m, x)) and
        (single_value(round_single_logic(m, x)) = round_single(m, x))))))

axiom round_single2:
  (forall m:mode.
    (forall x:real.
      ((not no_overflow_single(m, x)) ->
       (single_same_sign_real(round_single_logic(m, x), x) and
        single_overflow_value(m, round_single_logic(m, x))))))

axiom round_single3:
  (forall m:mode.
    (forall x:real. (single_exact(round_single_logic(m, x)) = x)))

axiom round_single4:
  (forall m:mode.
    (forall x:real. (single_model(round_single_logic(m, x)) = x)))

axiom single_of_zero:
  (forall m:mode. single_is_gen_zero(round_single_logic(m, 0.0)))

axiom round_single_logic_le:
  (forall m:mode.
    (forall x:real.
      (single_is_finite(round_single_logic(m, x)) ->
       (abs_real(single_value(round_single_logic(m, x))) <= max_single))))

axiom round_single_no_overflow:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) ->
       (single_is_finite(round_single_logic(m, x)) and
        (single_value(round_single_logic(m, x)) = round_single(m, x))))))

axiom single_positive_constant:
  (forall m:mode.
    (forall x:real.
      (((min_single <= x) and (x <= max_single)) ->
       (single_is_finite(round_single_logic(m, x)) and
        ((single_value(round_single_logic(m, x)) > 0.0) and
         (single_sign(round_single_logic(m, x)) = Positive))))))

axiom single_negative_constant:
  (forall m:mode.
    (forall x:real.
      ((((-max_single) <= x) and (x <= (-min_single))) ->
       (single_is_finite(round_single_logic(m, x)) and
        ((single_value(round_single_logic(m, x)) < 0.0) and
         (single_sign(round_single_logic(m, x)) = Negative))))))

axiom round_double1:
  (forall m:mode.
    (forall x:real.
      (no_overflow_double(m, x) ->
       (double_is_finite(round_double_logic(m, x)) and
        (double_value(round_double_logic(m, x)) = round_double(m, x))))))

axiom round_double2:
  (forall m:mode.
    (forall x:real.
      ((not no_overflow_double(m, x)) ->
       (double_same_sign_real(round_double_logic(m, x), x) and
        double_overflow_value(m, round_double_logic(m, x))))))

axiom round_double3:
  (forall m:mode.
    (forall x:real. (double_exact(round_double_logic(m, x)) = x)))

axiom round_double4:
  (forall m:mode.
    (forall x:real. (double_model(round_double_logic(m, x)) = x)))

axiom double_of_zero:
  (forall m:mode. double_is_gen_zero(round_double_logic(m, 0.0)))

axiom round_double_logic_le:
  (forall m:mode.
    (forall x:real.
      (double_is_finite(round_double_logic(m, x)) ->
       (abs_real(double_value(round_double_logic(m, x))) <= max_double))))

axiom round_double_no_overflow:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) ->
       (double_is_finite(round_double_logic(m, x)) and
        (double_value(round_double_logic(m, x)) = round_double(m, x))))))

axiom double_positive_constant:
  (forall m:mode.
    (forall x:real.
      (((min_double <= x) and (x <= max_double)) ->
       (double_is_finite(round_double_logic(m, x)) and
        ((double_value(round_double_logic(m, x)) > 0.0) and
         (double_sign(round_double_logic(m, x)) = Positive))))))

axiom double_negative_constant:
  (forall m:mode.
    (forall x:real.
      ((((-max_double) <= x) and (x <= (-min_double))) ->
       (double_is_finite(round_double_logic(m, x)) and
        ((double_value(round_double_logic(m, x)) < 0.0) and
         (double_sign(round_double_logic(m, x)) = Negative))))))

axiom single_is_gen_zero_comp1:
  (forall x:single.
    (forall y:single.
      ((single_is_gen_zero(x) and
        ((single_value(x) = single_value(y)) and single_is_finite(y))) ->
       single_is_gen_zero(y))))

axiom single_is_gen_zero_comp2:
  (forall x:single.
    (forall y:single.
      ((single_is_finite(x) and
        ((not single_is_gen_zero(x)) and (single_value(x) = single_value(y)))) ->
       (not single_is_gen_zero(y)))))

axiom double_is_gen_zero_comp1:
  (forall x:double.
    (forall y:double.
      ((double_is_gen_zero(x) and
        ((double_value(x) = double_value(y)) and double_is_finite(y))) ->
       double_is_gen_zero(y))))

axiom double_is_gen_zero_comp2:
  (forall x:double.
    (forall y:double.
      ((double_is_finite(x) and
        ((not double_is_gen_zero(x)) and (double_value(x) = double_value(y)))) ->
       (not double_is_gen_zero(y)))))

type char_P

type double_P

type int32

type int8

type padding

type void_P

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic double_P_tag : double_P tag_id

axiom double_P_int: (int_of_tag(double_P_tag) = 1)

logic double_P_of_pointer_address : unit pointer -> double_P pointer

axiom double_P_of_pointer_address_of_pointer_addr:
  (forall p:double_P pointer.
    (p = double_P_of_pointer_address(pointer_address(p))))

axiom double_P_parenttag_bottom: parenttag(double_P_tag, bottom_tag)

axiom double_P_tags:
  (forall x:double_P pointer.
    (forall double_P_tag_table:double_P tag_table.
      instanceof(double_P_tag_table, x, double_P_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_double_P(p: double_P pointer, a: int,
  double_P_alloc_table: double_P alloc_table) =
  (offset_min(double_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_double_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(double_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_double_P(p: double_P pointer, b: int,
  double_P_alloc_table: double_P alloc_table) =
  (offset_max(double_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate sorted(t: double_P pointer, a: int, b: int,
  double_P_double_M_t_1_at_L: (double_P, double) memory) =
  (forall i:int.
    (forall j:int.
      (((a <= i) and ((i <= j) and (j <= b))) ->
       le_double(select(double_P_double_M_t_1_at_L, shift(t, i)),
       select(double_P_double_M_t_1_at_L, shift(t, j))))))

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_double_P(p: double_P pointer, a: int, b: int,
  double_P_alloc_table: double_P alloc_table) =
  ((offset_min(double_P_alloc_table, p) = a) and
   (offset_max(double_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_double_P(p: double_P pointer, a: int, b: int,
  double_P_alloc_table: double_P alloc_table) =
  ((offset_min(double_P_alloc_table, p) = a) and
   (offset_max(double_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_double_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_double_P(p: double_P pointer, a: int, b: int,
  double_P_alloc_table: double_P alloc_table) =
  ((offset_min(double_P_alloc_table, p) <= a) and
   (offset_max(double_P_alloc_table, p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_double_P(p: double_P pointer, a: int, b: int,
  double_P_alloc_table: double_P alloc_table) =
  ((offset_min(double_P_alloc_table, p) <= a) and
   (offset_max(double_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

goal binary_search_ensures_default_po_1:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  ("JC_50": ("JC_48": ("JC_48": (0 <= integer_of_int32(l)))))

goal binary_search_ensures_default_po_2:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  ("JC_50":
  ("JC_49": ("JC_49": (integer_of_int32(u) <= (integer_of_int32(n) - 1)))))

goal binary_search_ensures_default_po_3:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_50":
  (("JC_48": (0 <= integer_of_int32(l0))) and
   ("JC_49": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(l0) + integer_of_int32(result2))) ->
  forall m:int32.
  (m = result3) ->
  ("JC_57":
  ("JC_55": ("JC_55": (integer_of_int32(l0) <= integer_of_int32(m)))))

goal binary_search_ensures_default_po_4:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_50":
  (("JC_48": (0 <= integer_of_int32(l0))) and
   ("JC_49": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(l0) + integer_of_int32(result2))) ->
  forall m:int32.
  (m = result3) ->
  ("JC_57":
  ("JC_56": ("JC_56": (integer_of_int32(m) <= integer_of_int32(u0)))))

goal binary_search_ensures_default_po_5:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_50":
  (("JC_48": (0 <= integer_of_int32(l0))) and
   ("JC_49": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(l0) + integer_of_int32(result2))) ->
  forall m:int32.
  (m = result3) ->
  ("JC_57":
  (("JC_55": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_56": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result4:double.
  (result4 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  lt_double(result4, v) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(m) + 1)) ->
  forall l1:int32.
  (l1 = result5) ->
  ("JC_50": ("JC_48": ("JC_48": (0 <= integer_of_int32(l1)))))

goal binary_search_ensures_default_po_6:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_50":
  (("JC_48": (0 <= integer_of_int32(l0))) and
   ("JC_49": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(l0) + integer_of_int32(result2))) ->
  forall m:int32.
  (m = result3) ->
  ("JC_57":
  (("JC_55": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_56": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result4:double.
  (result4 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not lt_double(result4, v)) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  gt_double(result5, v) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(m) - 1)) ->
  forall u1:int32.
  (u1 = result6) ->
  ("JC_50":
  ("JC_49": ("JC_49": (integer_of_int32(u1) <= (integer_of_int32(n) - 1)))))

goal binary_search_ensures_default_po_7:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_50":
  (("JC_48": (0 <= integer_of_int32(l0))) and
   ("JC_49": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(l0) + integer_of_int32(result2))) ->
  forall m:int32.
  (m = result3) ->
  ("JC_57":
  (("JC_55": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_56": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result4:double.
  (result4 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not lt_double(result4, v)) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not gt_double(result5, v)) ->
  ("JC_58": ("JC_58": (0 <> 0)))

goal binary_search_ensures_default_po_8:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_50":
  (("JC_48": (0 <= integer_of_int32(l0))) and
   ("JC_49": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(l0) + integer_of_int32(result2))) ->
  forall m:int32.
  (m = result3) ->
  ("JC_57":
  (("JC_55": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_56": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result4:double.
  (result4 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not lt_double(result4, v)) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not gt_double(result5, v)) ->
  ("JC_58": (0 <> 0)) ->
  forall __retres:int32.
  (__retres = m) ->
  forall return:int32.
  (return = __retres) ->
  ("JC_17": ("JC_15": ("JC_15": ((-1) <= integer_of_int32(return)))))

goal binary_search_ensures_default_po_9:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_50":
  (("JC_48": (0 <= integer_of_int32(l0))) and
   ("JC_49": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(l0) + integer_of_int32(result2))) ->
  forall m:int32.
  (m = result3) ->
  ("JC_57":
  (("JC_55": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_56": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result4:double.
  (result4 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not lt_double(result4, v)) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not gt_double(result5, v)) ->
  ("JC_58": (0 <> 0)) ->
  forall __retres:int32.
  (__retres = m) ->
  forall return:int32.
  (return = __retres) ->
  ("JC_17":
  ("JC_16": ("JC_16": (integer_of_int32(return) < integer_of_int32(n)))))

goal binary_search_ensures_default_po_10:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_50":
  (("JC_48": (0 <= integer_of_int32(l0))) and
   ("JC_49": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) > integer_of_int32(u0)) ->
  ("JC_59": ("JC_59": (0 <> 0)))

goal binary_search_ensures_default_po_11:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_50":
  (("JC_48": (0 <= integer_of_int32(l0))) and
   ("JC_49": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) > integer_of_int32(u0)) ->
  ("JC_59": (0 <> 0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (-1)) ->
  forall __retres:int32.
  (__retres = result1) ->
  forall return:int32.
  (return = __retres) ->
  ("JC_17": ("JC_15": ("JC_15": ((-1) <= integer_of_int32(return)))))

goal binary_search_ensures_default_po_12:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_50":
  (("JC_48": (0 <= integer_of_int32(l0))) and
   ("JC_49": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) > integer_of_int32(u0)) ->
  ("JC_59": (0 <> 0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (-1)) ->
  forall __retres:int32.
  (__retres = result1) ->
  forall return:int32.
  (return = __retres) ->
  ("JC_17":
  ("JC_16": ("JC_16": (integer_of_int32(return) < integer_of_int32(n)))))

goal binary_search_ensures_failure_po_1:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), double_P_double_M_t_2) and
   ("JC_13":
   (("JC_8": (integer_of_int32(n) >= 0)) and
    (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
     (("JC_10": (offset_max(double_P_t_2_alloc_table,
      t_0) >= (integer_of_int32(n) - 1))) and
      (("JC_11": (not double_is_NaN(v))) and
       ("JC_12":
       (forall i_0:int.
         (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
          (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0))))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  ("JC_72":
  ("JC_72":
  (forall k_0:int.
    (((integer_of_int32(u) < k_0) and (k_0 <= (integer_of_int32(n) - 1))) ->
     lt_double(v, select(double_P_double_M_t_2, shift(t_0, k_0)))))))

goal binary_search_ensures_failure_po_2:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), double_P_double_M_t_2) and
   ("JC_13":
   (("JC_8": (integer_of_int32(n) >= 0)) and
    (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
     (("JC_10": (offset_max(double_P_t_2_alloc_table,
      t_0) >= (integer_of_int32(n) - 1))) and
      (("JC_11": (not double_is_NaN(v))) and
       ("JC_12":
       (forall i_0:int.
         (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
          (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0))))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  ("JC_73":
  ("JC_73":
  (forall k:int.
    (((0 <= k) and (k < integer_of_int32(l))) ->
     lt_double(select(double_P_double_M_t_2, shift(t_0, k)), v)))))

goal binary_search_ensures_failure_po_3:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), double_P_double_M_t_2) and
   ("JC_13":
   (("JC_8": (integer_of_int32(n) >= 0)) and
    (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
     (("JC_10": (offset_max(double_P_t_2_alloc_table,
      t_0) >= (integer_of_int32(n) - 1))) and
      (("JC_11": (not double_is_NaN(v))) and
       ("JC_12":
       (forall i_0:int.
         (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
          (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0))))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  (("JC_72":
   (forall k_0:int.
     (((integer_of_int32(u0) < k_0) and (k_0 <= (integer_of_int32(n) - 1))) ->
      lt_double(v, select(double_P_double_M_t_2, shift(t_0, k_0)))))) and
   ("JC_73":
   (forall k:int.
     (((0 <= k) and (k < integer_of_int32(l0))) ->
      lt_double(select(double_P_double_M_t_2, shift(t_0, k)), v))))) ->
  ("JC_76":
  (("JC_74": (0 <= integer_of_int32(l0))) and
   ("JC_75": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(l0) + integer_of_int32(result2))) ->
  forall m:int32.
  (m = result3) ->
  ("JC_83":
  (("JC_81": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_82": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result4:double.
  (result4 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  lt_double(result4, v) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(m) + 1)) ->
  forall l1:int32.
  (l1 = result5) ->
  ("JC_72":
  ("JC_72":
  (forall k_0:int.
    (((integer_of_int32(u0) < k_0) and (k_0 <= (integer_of_int32(n) - 1))) ->
     lt_double(v, select(double_P_double_M_t_2, shift(t_0, k_0)))))))

goal binary_search_ensures_failure_po_4:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), double_P_double_M_t_2) and
   ("JC_13":
   (("JC_8": (integer_of_int32(n) >= 0)) and
    (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
     (("JC_10": (offset_max(double_P_t_2_alloc_table,
      t_0) >= (integer_of_int32(n) - 1))) and
      (("JC_11": (not double_is_NaN(v))) and
       ("JC_12":
       (forall i_0:int.
         (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
          (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0))))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  (("JC_72":
   (forall k_0:int.
     (((integer_of_int32(u0) < k_0) and (k_0 <= (integer_of_int32(n) - 1))) ->
      lt_double(v, select(double_P_double_M_t_2, shift(t_0, k_0)))))) and
   ("JC_73":
   (forall k:int.
     (((0 <= k) and (k < integer_of_int32(l0))) ->
      lt_double(select(double_P_double_M_t_2, shift(t_0, k)), v))))) ->
  ("JC_76":
  (("JC_74": (0 <= integer_of_int32(l0))) and
   ("JC_75": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(l0) + integer_of_int32(result2))) ->
  forall m:int32.
  (m = result3) ->
  ("JC_83":
  (("JC_81": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_82": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result4:double.
  (result4 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  lt_double(result4, v) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(m) + 1)) ->
  forall l1:int32.
  (l1 = result5) ->
  ("JC_73":
  ("JC_73":
  (forall k:int.
    (((0 <= k) and (k < integer_of_int32(l1))) ->
     lt_double(select(double_P_double_M_t_2, shift(t_0, k)), v)))))

goal binary_search_ensures_failure_po_5:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), double_P_double_M_t_2) and
   ("JC_13":
   (("JC_8": (integer_of_int32(n) >= 0)) and
    (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
     (("JC_10": (offset_max(double_P_t_2_alloc_table,
      t_0) >= (integer_of_int32(n) - 1))) and
      (("JC_11": (not double_is_NaN(v))) and
       ("JC_12":
       (forall i_0:int.
         (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
          (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0))))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  (("JC_72":
   (forall k_0:int.
     (((integer_of_int32(u0) < k_0) and (k_0 <= (integer_of_int32(n) - 1))) ->
      lt_double(v, select(double_P_double_M_t_2, shift(t_0, k_0)))))) and
   ("JC_73":
   (forall k:int.
     (((0 <= k) and (k < integer_of_int32(l0))) ->
      lt_double(select(double_P_double_M_t_2, shift(t_0, k)), v))))) ->
  ("JC_76":
  (("JC_74": (0 <= integer_of_int32(l0))) and
   ("JC_75": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(l0) + integer_of_int32(result2))) ->
  forall m:int32.
  (m = result3) ->
  ("JC_83":
  (("JC_81": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_82": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result4:double.
  (result4 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not lt_double(result4, v)) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  gt_double(result5, v) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(m) - 1)) ->
  forall u1:int32.
  (u1 = result6) ->
  ("JC_72":
  ("JC_72":
  (forall k_0:int.
    (((integer_of_int32(u1) < k_0) and (k_0 <= (integer_of_int32(n) - 1))) ->
     lt_double(v, select(double_P_double_M_t_2, shift(t_0, k_0)))))))

goal binary_search_ensures_failure_po_6:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), double_P_double_M_t_2) and
   ("JC_13":
   (("JC_8": (integer_of_int32(n) >= 0)) and
    (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
     (("JC_10": (offset_max(double_P_t_2_alloc_table,
      t_0) >= (integer_of_int32(n) - 1))) and
      (("JC_11": (not double_is_NaN(v))) and
       ("JC_12":
       (forall i_0:int.
         (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
          (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0))))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  (("JC_72":
   (forall k_0:int.
     (((integer_of_int32(u0) < k_0) and (k_0 <= (integer_of_int32(n) - 1))) ->
      lt_double(v, select(double_P_double_M_t_2, shift(t_0, k_0)))))) and
   ("JC_73":
   (forall k:int.
     (((0 <= k) and (k < integer_of_int32(l0))) ->
      lt_double(select(double_P_double_M_t_2, shift(t_0, k)), v))))) ->
  ("JC_76":
  (("JC_74": (0 <= integer_of_int32(l0))) and
   ("JC_75": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(l0) + integer_of_int32(result2))) ->
  forall m:int32.
  (m = result3) ->
  ("JC_83":
  (("JC_81": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_82": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result4:double.
  (result4 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not lt_double(result4, v)) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  gt_double(result5, v) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(m) - 1)) ->
  forall u1:int32.
  (u1 = result6) ->
  ("JC_73":
  ("JC_73":
  (forall k:int.
    (((0 <= k) and (k < integer_of_int32(l0))) ->
     lt_double(select(double_P_double_M_t_2, shift(t_0, k)), v)))))

goal binary_search_ensures_failure_po_7:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), double_P_double_M_t_2) and
   ("JC_13":
   (("JC_8": (integer_of_int32(n) >= 0)) and
    (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
     (("JC_10": (offset_max(double_P_t_2_alloc_table,
      t_0) >= (integer_of_int32(n) - 1))) and
      (("JC_11": (not double_is_NaN(v))) and
       ("JC_12":
       (forall i_0:int.
         (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
          (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0))))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  (("JC_72":
   (forall k_0:int.
     (((integer_of_int32(u0) < k_0) and (k_0 <= (integer_of_int32(n) - 1))) ->
      lt_double(v, select(double_P_double_M_t_2, shift(t_0, k_0)))))) and
   ("JC_73":
   (forall k:int.
     (((0 <= k) and (k < integer_of_int32(l0))) ->
      lt_double(select(double_P_double_M_t_2, shift(t_0, k)), v))))) ->
  ("JC_76":
  (("JC_74": (0 <= integer_of_int32(l0))) and
   ("JC_75": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(l0) + integer_of_int32(result2))) ->
  forall m:int32.
  (m = result3) ->
  ("JC_83":
  (("JC_81": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_82": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result4:double.
  (result4 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not lt_double(result4, v)) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not gt_double(result5, v)) ->
  ("JC_84": (0 <> 0)) ->
  forall __retres:int32.
  (__retres = m) ->
  forall return:int32.
  (return = __retres) ->
  (integer_of_int32(return) = (-1)) ->
  forall k_1:int.
  ((0 <= k_1) and (k_1 < integer_of_int32(n))) ->
  ("JC_25": ne_double(select(double_P_double_M_t_2, shift(t_0, k_1)), v))

goal binary_search_ensures_failure_po_8:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), double_P_double_M_t_2) and
   ("JC_13":
   (("JC_8": (integer_of_int32(n) >= 0)) and
    (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
     (("JC_10": (offset_max(double_P_t_2_alloc_table,
      t_0) >= (integer_of_int32(n) - 1))) and
      (("JC_11": (not double_is_NaN(v))) and
       ("JC_12":
       (forall i_0:int.
         (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
          (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0))))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  (("JC_72":
   (forall k_0:int.
     (((integer_of_int32(u0) < k_0) and (k_0 <= (integer_of_int32(n) - 1))) ->
      lt_double(v, select(double_P_double_M_t_2, shift(t_0, k_0)))))) and
   ("JC_73":
   (forall k:int.
     (((0 <= k) and (k < integer_of_int32(l0))) ->
      lt_double(select(double_P_double_M_t_2, shift(t_0, k)), v))))) ->
  ("JC_76":
  (("JC_74": (0 <= integer_of_int32(l0))) and
   ("JC_75": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) > integer_of_int32(u0)) ->
  ("JC_85": (0 <> 0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (-1)) ->
  forall __retres:int32.
  (__retres = result1) ->
  forall return:int32.
  (return = __retres) ->
  (integer_of_int32(return) = (-1)) ->
  forall k_1:int.
  ((0 <= k_1) and (k_1 < integer_of_int32(n))) ->
  ("JC_25": ne_double(select(double_P_double_M_t_2, shift(t_0, k_1)), v))

goal binary_search_ensures_success_po_1:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_64": true) ->
  ("JC_62":
  (("JC_60": (0 <= integer_of_int32(l0))) and
   ("JC_61": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(l0) + integer_of_int32(result2))) ->
  forall m:int32.
  (m = result3) ->
  ("JC_69":
  (("JC_67": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_68": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result4:double.
  (result4 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not lt_double(result4, v)) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not gt_double(result5, v)) ->
  ("JC_70": (0 <> 0)) ->
  forall __retres:int32.
  (__retres = m) ->
  forall return:int32.
  (return = __retres) ->
  (integer_of_int32(return) >= 0) ->
  ("JC_23": eq_double(select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(return))), v))

goal binary_search_ensures_success_po_2:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_64": true) ->
  ("JC_62":
  (("JC_60": (0 <= integer_of_int32(l0))) and
   ("JC_61": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) > integer_of_int32(u0)) ->
  ("JC_71": (0 <> 0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (-1)) ->
  forall __retres:int32.
  (__retres = result1) ->
  forall return:int32.
  (return = __retres) ->
  (integer_of_int32(return) >= 0) ->
  ("JC_23": eq_double(select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(return))), v))

goal binary_search_safety_po_1:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  ((-2147483648) <= (integer_of_int32(n) - 1))

goal binary_search_safety_po_2:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  ((integer_of_int32(n) - 1) <= 2147483647)

goal binary_search_safety_po_3:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  ((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0)))

goal binary_search_safety_po_4:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)

goal binary_search_safety_po_5:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0)

goal binary_search_safety_po_6:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  ((-2147483648) <= result2)

goal binary_search_safety_po_7:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (result2 <= 2147483647)

goal binary_search_safety_po_8:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  ((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(result3)))

goal binary_search_safety_po_9:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  ((integer_of_int32(l0) + integer_of_int32(result3)) <= 2147483647)

goal binary_search_safety_po_10:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(result3))) and
   ((integer_of_int32(l0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l0) + integer_of_int32(result3))) ->
  forall m:int32.
  (m = result4) ->
  ("JC_40":
  (("JC_38": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_39": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  (offset_min(double_P_t_2_alloc_table, t_0) <= integer_of_int32(m))

goal binary_search_safety_po_11:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(result3))) and
   ((integer_of_int32(l0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l0) + integer_of_int32(result3))) ->
  forall m:int32.
  (m = result4) ->
  ("JC_40":
  (("JC_38": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_39": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  (integer_of_int32(m) <= offset_max(double_P_t_2_alloc_table, t_0))

goal binary_search_safety_po_12:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(result3))) and
   ((integer_of_int32(l0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l0) + integer_of_int32(result3))) ->
  forall m:int32.
  (m = result4) ->
  ("JC_40":
  (("JC_38": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_39": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(double_P_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(double_P_t_2_alloc_table, t_0))) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  lt_double(result5, v) ->
  ((-2147483648) <= (integer_of_int32(m) + 1))

goal binary_search_safety_po_13:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(result3))) and
   ((integer_of_int32(l0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l0) + integer_of_int32(result3))) ->
  forall m:int32.
  (m = result4) ->
  ("JC_40":
  (("JC_38": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_39": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(double_P_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(double_P_t_2_alloc_table, t_0))) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  lt_double(result5, v) ->
  ((integer_of_int32(m) + 1) <= 2147483647)

goal binary_search_safety_po_14:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(result3))) and
   ((integer_of_int32(l0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l0) + integer_of_int32(result3))) ->
  forall m:int32.
  (m = result4) ->
  ("JC_40":
  (("JC_38": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_39": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(double_P_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(double_P_t_2_alloc_table, t_0))) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  lt_double(result5, v) ->
  (((-2147483648) <= (integer_of_int32(m) + 1)) and
   ((integer_of_int32(m) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(m) + 1)) ->
  forall l1:int32.
  (l1 = result6) ->
  (0 <= ("JC_46": (integer_of_int32(u0) - integer_of_int32(l0))))

goal binary_search_safety_po_15:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(result3))) and
   ((integer_of_int32(l0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l0) + integer_of_int32(result3))) ->
  forall m:int32.
  (m = result4) ->
  ("JC_40":
  (("JC_38": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_39": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(double_P_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(double_P_t_2_alloc_table, t_0))) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  lt_double(result5, v) ->
  (((-2147483648) <= (integer_of_int32(m) + 1)) and
   ((integer_of_int32(m) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(m) + 1)) ->
  forall l1:int32.
  (l1 = result6) ->
  (("JC_46": (integer_of_int32(u0) - integer_of_int32(l1))) < ("JC_46":
                                                              (integer_of_int32(u0) - integer_of_int32(l0))))

goal binary_search_safety_po_16:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(result3))) and
   ((integer_of_int32(l0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l0) + integer_of_int32(result3))) ->
  forall m:int32.
  (m = result4) ->
  ("JC_40":
  (("JC_38": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_39": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(double_P_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(double_P_t_2_alloc_table, t_0))) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not lt_double(result5, v)) ->
  ((offset_min(double_P_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(double_P_t_2_alloc_table, t_0))) ->
  forall result6:double.
  (result6 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  gt_double(result6, v) ->
  ((-2147483648) <= (integer_of_int32(m) - 1))

goal binary_search_safety_po_17:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(result3))) and
   ((integer_of_int32(l0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l0) + integer_of_int32(result3))) ->
  forall m:int32.
  (m = result4) ->
  ("JC_40":
  (("JC_38": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_39": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(double_P_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(double_P_t_2_alloc_table, t_0))) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not lt_double(result5, v)) ->
  ((offset_min(double_P_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(double_P_t_2_alloc_table, t_0))) ->
  forall result6:double.
  (result6 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  gt_double(result6, v) ->
  ((integer_of_int32(m) - 1) <= 2147483647)

goal binary_search_safety_po_18:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(result3))) and
   ((integer_of_int32(l0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l0) + integer_of_int32(result3))) ->
  forall m:int32.
  (m = result4) ->
  ("JC_40":
  (("JC_38": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_39": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(double_P_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(double_P_t_2_alloc_table, t_0))) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not lt_double(result5, v)) ->
  ((offset_min(double_P_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(double_P_t_2_alloc_table, t_0))) ->
  forall result6:double.
  (result6 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  gt_double(result6, v) ->
  (((-2147483648) <= (integer_of_int32(m) - 1)) and
   ((integer_of_int32(m) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(m) - 1)) ->
  forall u1:int32.
  (u1 = result7) ->
  (0 <= ("JC_46": (integer_of_int32(u0) - integer_of_int32(l0))))

goal binary_search_safety_po_19:
  forall t_0:double_P pointer.
  forall n:int32.
  forall v:double.
  forall double_P_t_2_alloc_table:double_P alloc_table.
  forall double_P_double_M_t_2:(double_P,
  double) memory.
  ("JC_13":
  (("JC_8": (integer_of_int32(n) >= 0)) and
   (("JC_9": (offset_min(double_P_t_2_alloc_table, t_0) <= 0)) and
    (("JC_10": (offset_max(double_P_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))) and
     (("JC_11": (not double_is_NaN(v))) and
      ("JC_12":
      (forall i_0:int.
        (((0 <= i_0) and (i_0 <= (integer_of_int32(n) - 1))) ->
         (not double_is_NaN(select(double_P_double_M_t_2, shift(t_0, i_0)))))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_28": (0 <= integer_of_int32(l0))) and
   ("JC_29": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(u0) - integer_of_int32(l0))) and
   ((integer_of_int32(u0) - integer_of_int32(l0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(u0) - integer_of_int32(l0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(result3))) and
   ((integer_of_int32(l0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l0) + integer_of_int32(result3))) ->
  forall m:int32.
  (m = result4) ->
  ("JC_40":
  (("JC_38": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_39": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(double_P_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(double_P_t_2_alloc_table, t_0))) ->
  forall result5:double.
  (result5 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  (not lt_double(result5, v)) ->
  ((offset_min(double_P_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(double_P_t_2_alloc_table, t_0))) ->
  forall result6:double.
  (result6 = select(double_P_double_M_t_2, shift(t_0,
  integer_of_int32(m)))) ->
  gt_double(result6, v) ->
  (((-2147483648) <= (integer_of_int32(m) - 1)) and
   ((integer_of_int32(m) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(m) - 1)) ->
  forall u1:int32.
  (u1 = result7) ->
  (("JC_46": (integer_of_int32(u1) - integer_of_int32(l0))) < ("JC_46":
                                                              (integer_of_int32(u0) - integer_of_int32(l0))))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/floats_bsearch_why.why    : ......#..?.....##........................ (37/0/1/3/0)
total   :  41
valid   :  37 ( 90%)
invalid :   0 (  0%)
unknown :   1 (  2%)
timeout :   3 (  7%)
failure :   0 (  0%)
