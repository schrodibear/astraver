========== file tests/c/heap_sort.c ==========

#include "binary_heap.h"


/*@ requires len >= 0;
  @ requires \valid_range(arr,0,len-1);
  @ // assigns arr[..];
  @ ensures \forall integer i,j; 0 <= i <= j < len ==> arr[i] <= arr[j]; 
  @*/
void heap_sort(int *arr, uint len) {
  uint i;
  heap h = create(len);
  /*@ loop invariant 0 <= i <= len;
    @ loop variant len - i;
    @*/
  for (i = 0; i < len; ++i) insert(h,arr[i]);
  /*@ loop invariant 0 <= i <= len;
    @ loop variant len - i;
    @*/
  for (i = 0; i < len; ++i) arr[i] = extract_min(h);
}



void main() {
  int arr[] = {42, 13, 42};
  heap_sort(arr,3);
  //@ assert arr[0] <= arr[1] && arr[1] <= arr[2];
  //@ assert arr[0] == 13 && arr[1] == 42 && arr[2] == 42;
}
  
========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/heap_sort.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir tests/c/heap_sort.jessie
[jessie] File tests/c/heap_sort.jessie/heap_sort.jc written.
[jessie] File tests/c/heap_sort.jessie/heap_sort.cloc written.
========== file tests/c/heap_sort.jessie/heap_sort.jc ==========
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint32 = 0..4294967295

type int32 = -2147483648..2147483647

type int8 = -128..127

tag int_P = {
  int32 int_M: 32;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M: 8;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

tag Heap = {
  int32 x: 32;
}

type Heap = [Heap]

Heap[..] create(uint32 sz)
behavior default:
  assigns \nothing;
  ensures (C_1 : true);
;

unit insert(Heap[..] u_0, int32 e)
behavior default:
  assigns u_0.x;
  ensures (C_2 : true);
;

int32 extract_min(Heap[..] u)
behavior default:
  assigns \nothing;
  ensures (C_3 : true);
;

unit heap_sort(int_P[..] arr, uint32 len)
  requires (C_33 : (len >= 0));
  requires (C_30 : ((C_31 : (\offset_min(arr) <= 0)) &&
                     (C_32 : (\offset_max(arr) >= (len - 1)))));
behavior default:
  ensures (C_29 : (\forall integer i;
                    (\forall integer j;
                      (((0 <= i) && ((i <= j) && (j < \at(len,Old)))) ==>
                        ((\at(arr,Old) + i).int_M <=
                          (\at(arr,Old) + j).int_M)))));
{  
   (var uint32 i);
   
   (var Heap[..] h);
   
   {  (C_5 : (h = (C_4 : create(len))));
      (C_6 : (i = 0));
      
      loop 
      behavior default:
        invariant (C_8 : ((C_9 : (0 <= i)) && (C_10 : (i <= len))));
      variant (C_7 : (len - i));
      while (true)
      {  
         {  (if (i < len) then () else 
            (goto while_0_break));
            (C_13 : insert(h, (C_12 : (C_11 : (arr + i)).int_M)));
            (C_16 : (i = (C_15 : ((C_14 : (i + 1)) :> uint32))))
         }
      };
      (while_0_break : ());
      (C_17 : (i = 0));
      
      loop 
      behavior default:
        invariant (C_19 : ((C_20 : (0 <= i)) && (C_21 : (i <= len))));
      variant (C_18 : (len - i));
      while (true)
      {  
         {  (if (i < len) then () else 
            (goto while_1_break));
            (C_25 : ((C_24 : (C_23 : (arr + i)).int_M) = (C_22 : extract_min(
                                                         h))));
            (C_28 : (i = (C_27 : ((C_26 : (i + 1)) :> uint32))))
         }
      };
      (while_1_break : ());
      
      (return ())
   }
}

unit main()
behavior default:
  ensures (C_52 : true);
{  
   (var int_P[0..2] arr_0);
   
   {  (C_35 : (arr_0 = (C_34 : (new int_P[3]))));
      (C_37 : ((C_36 : (arr_0 + 0).int_M) = 42));
      (C_39 : ((C_38 : (arr_0 + 1).int_M) = 13));
      (C_41 : ((C_40 : (arr_0 + 2).int_M) = 42));
      (C_42 : heap_sort(arr_0, 3));
      
      {  
         (assert for default: (C_43 : ((C_44 : ((arr_0 + 0).int_M <=
                                                 (arr_0 + 1).int_M)) &&
                                        (C_45 : ((arr_0 + 1).int_M <=
                                                  (arr_0 + 2).int_M)))));
         ()
      };
      
      {  
         (assert for default: (C_46 : (((C_48 : ((arr_0 + 0).int_M == 13)) &&
                                         (C_49 : ((arr_0 + 1).int_M == 42))) &&
                                        (C_50 : ((arr_0 + 2).int_M == 42)))));
         ()
      };
      
      {  (C_51 : (free(arr_0)));
         
         (return ())
      }
   }
}
========== file tests/c/heap_sort.jessie/heap_sort.cloc ==========
[C_50]
file = "HOME/tests/c/heap_sort.c"
line = 29
begin = 45
end = 57

[C_51]
file = "HOME/tests/c/heap_sort.c"
line = 26
begin = 6
end = 9

[C_52]
file = "HOME/"
line = 0
begin = -1
end = -1

[main]
name = "Function main"
file = "HOME/tests/c/heap_sort.c"
line = 25
begin = 5
end = 9

[C_10]
file = "HOME/tests/c/heap_sort.c"
line = 13
begin = 26
end = 34

[C_11]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_12]
file = "HOME/tests/c/heap_sort.c"
line = 16
begin = 37
end = 43

[C_13]
file = "HOME/tests/c/heap_sort.c"
line = 16
begin = 28
end = 44

[C_14]
file = "HOME/tests/c/heap_sort.c"
line = 16
begin = 23
end = 26

[C_15]
file = "HOME/tests/c/heap_sort.c"
line = 16
begin = 23
end = 26

[C_16]
file = "HOME/tests/c/heap_sort.c"
line = 16
begin = 23
end = 26

[C_17]
file = "HOME/tests/c/heap_sort.c"
line = 20
begin = 11
end = 12

[C_18]
file = "HOME/tests/c/heap_sort.c"
line = 18
begin = 19
end = 26

[C_19]
file = "HOME/tests/c/heap_sort.c"
line = 17
begin = 21
end = 34

[heap_sort]
name = "Function heap_sort"
file = "HOME/tests/c/heap_sort.c"
line = 10
begin = 5
end = 14

[C_1]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_3]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_4]
file = "HOME/tests/c/heap_sort.c"
line = 12
begin = 11
end = 22

[C_20]
file = "HOME/tests/c/heap_sort.c"
line = 17
begin = 21
end = 27

[C_5]
file = "HOME/tests/c/heap_sort.c"
line = 12
begin = 11
end = 22

[C_21]
file = "HOME/tests/c/heap_sort.c"
line = 17
begin = 26
end = 34

[C_6]
file = "HOME/tests/c/heap_sort.c"
line = 16
begin = 11
end = 12

[C_22]
file = "HOME/tests/c/heap_sort.c"
line = 20
begin = 37
end = 51

[C_7]
file = "HOME/tests/c/heap_sort.c"
line = 14
begin = 19
end = 26

[C_23]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_8]
file = "HOME/tests/c/heap_sort.c"
line = 13
begin = 21
end = 34

[C_24]
file = "HOME/tests/c/heap_sort.c"
line = 20
begin = 37
end = 51

[C_9]
file = "HOME/tests/c/heap_sort.c"
line = 13
begin = 21
end = 27

[C_25]
file = "HOME/tests/c/heap_sort.c"
line = 20
begin = 37
end = 51

[C_26]
file = "HOME/tests/c/heap_sort.c"
line = 20
begin = 23
end = 26

[C_27]
file = "HOME/tests/c/heap_sort.c"
line = 20
begin = 23
end = 26

[C_28]
file = "HOME/tests/c/heap_sort.c"
line = 20
begin = 23
end = 26

[C_29]
file = "HOME/tests/c/heap_sort.c"
line = 8
begin = 12
end = 71

[C_30]
file = "HOME/tests/c/heap_sort.c"
line = 6
begin = 13
end = 38

[C_31]
file = "HOME/tests/c/heap_sort.c"
line = 6
begin = 13
end = 38

[C_32]
file = "HOME/tests/c/heap_sort.c"
line = 6
begin = 13
end = 38

[C_33]
file = "HOME/tests/c/heap_sort.c"
line = 5
begin = 13
end = 21

[C_34]
file = "HOME/tests/c/heap_sort.c"
line = 26
begin = 6
end = 9

[C_35]
file = "HOME/tests/c/heap_sort.c"
line = 26
begin = 6
end = 9

[C_36]
file = "HOME/tests/c/heap_sort.c"
line = 26
begin = 2
end = 5

[C_37]
file = "HOME/tests/c/heap_sort.c"
line = 26
begin = 2
end = 5

[C_38]
file = "HOME/tests/c/heap_sort.c"
line = 26
begin = 2
end = 5

[C_39]
file = "HOME/tests/c/heap_sort.c"
line = 26
begin = 2
end = 5

[C_40]
file = "HOME/tests/c/heap_sort.c"
line = 26
begin = 2
end = 5

[C_41]
file = "HOME/tests/c/heap_sort.c"
line = 26
begin = 2
end = 5

[C_42]
file = "HOME/tests/c/heap_sort.c"
line = 27
begin = 2
end = 18

[C_43]
file = "HOME/tests/c/heap_sort.c"
line = 28
begin = 13
end = 49

[C_44]
file = "HOME/tests/c/heap_sort.c"
line = 28
begin = 13
end = 29

[C_45]
file = "HOME/tests/c/heap_sort.c"
line = 28
begin = 33
end = 49

[C_46]
file = "HOME/tests/c/heap_sort.c"
line = 29
begin = 13
end = 57

[C_47]
file = "HOME/tests/c/heap_sort.c"
line = 29
begin = 13
end = 41

[C_48]
file = "HOME/tests/c/heap_sort.c"
line = 29
begin = 13
end = 25

[C_49]
file = "HOME/tests/c/heap_sort.c"
line = 29
begin = 29
end = 41

========== jessie execution ==========
Generating Why function heap_sort
Generating Why function main
========== file tests/c/heap_sort.jessie/heap_sort.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs heap_sort.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs heap_sort.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why

COQDEP = coqdep

.PHONY: all coq pvs simplify cvcl harvey smtlib zenon

all: simplify/heap_sort_why.sx

project: why/heap_sort.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/heap_sort_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/heap_sort_why.vo

coq/heap_sort_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/heap_sort_why.v: why/heap_sort.why
	@echo 'why -coq [...] why/heap_sort.why' && $(WHY) $(JESSIELIBFILES) why/heap_sort.why && rm -f coq/jessie_why.v

coq-goals: goals coq/heap_sort_ctx_why.vo
	for f in why/*_po*.why; do make -f heap_sort.makefile coq/`basename $$f .why`_why.v ; done

coq/heap_sort_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/heap_sort_ctx_why.v: why/heap_sort_ctx.why
	@echo 'why -coq [...] why/heap_sort_ctx.why' && $(WHY) why/heap_sort_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export heap_sort_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/heap_sort_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/heap_sort_ctx_why.vo

pvs: pvs/heap_sort_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/heap_sort_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/heap_sort_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/heap_sort_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/heap_sort_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/heap_sort_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/heap_sort_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/heap_sort_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/heap_sort_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/heap_sort_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/heap_sort_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/heap_sort_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/heap_sort_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/heap_sort_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: heap_sort.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/heap_sort_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ide: why/heap_sort_why3.why
	@echo 'why3ide [...] $<' && why3ide $<

-include heap_sort.depend

depend: coq/heap_sort_why.v
	-$(COQDEP) -I coq coq/heap_sort*_why.v > heap_sort.depend

clean:
	rm -f coq/*.vo

========== file tests/c/heap_sort.jessie/heap_sort.loc ==========
[JC_90]
kind = IndexBounds
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 118
begin = 15
end = 46

[main_ensures_default]
name = "Function main"
behavior = "Default behavior"
file = "HOME/tests/c/heap_sort.c"
line = 25
begin = 5
end = 9

[JC_91]
kind = UserCall
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 122
begin = 14
end = 33

[JC_92]
file = "HOME/tests/c/heap_sort.c"
line = 28
begin = 13
end = 29

[JC_40]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_93]
file = "HOME/tests/c/heap_sort.c"
line = 28
begin = 33
end = 49

[JC_41]
file = "HOME/tests/c/heap_sort.c"
line = 8
begin = 12
end = 71

[JC_94]
file = "HOME/tests/c/heap_sort.c"
line = 28
begin = 13
end = 49

[JC_42]
file = "HOME/tests/c/heap_sort.c"
line = 8
begin = 12
end = 71

[JC_95]
file = "HOME/tests/c/heap_sort.c"
line = 29
begin = 13
end = 25

[JC_43]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_96]
file = "HOME/tests/c/heap_sort.c"
line = 29
begin = 29
end = 41

[JC_44]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_97]
file = "HOME/tests/c/heap_sort.c"
line = 29
begin = 45
end = 57

[JC_45]
kind = UserCall
file = "HOME/tests/c/heap_sort.c"
line = 12
begin = 11
end = 22

[JC_98]
file = "HOME/tests/c/heap_sort.c"
line = 29
begin = 13
end = 57

[JC_46]
file = "HOME/tests/c/heap_sort.c"
line = 13
begin = 21
end = 27

[JC_1]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 42
begin = 9
end = 15

[JC_100]
kind = UserCall
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 122
begin = 14
end = 33

[JC_99]
kind = AllocSize
file = "HOME/tests/c/heap_sort.c"
line = 26
begin = 6
end = 9

[JC_47]
file = "HOME/tests/c/heap_sort.c"
line = 13
begin = 26
end = 34

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_101]
file = "HOME/tests/c/heap_sort.c"
line = 28
begin = 13
end = 29

[JC_48]
file = "HOME/tests/c/heap_sort.c"
line = 13
begin = 21
end = 34

[JC_3]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 42
begin = 9
end = 15

[JC_102]
file = "HOME/tests/c/heap_sort.c"
line = 28
begin = 33
end = 49

[JC_49]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_103]
file = "HOME/tests/c/heap_sort.c"
line = 28
begin = 13
end = 49

[JC_5]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_104]
file = "HOME/tests/c/heap_sort.c"
line = 29
begin = 13
end = 25

[JC_6]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 44
begin = 10
end = 18

[JC_105]
file = "HOME/tests/c/heap_sort.c"
line = 29
begin = 29
end = 41

[heap_sort_ensures_default]
name = "Function heap_sort"
behavior = "Default behavior"
file = "HOME/tests/c/heap_sort.c"
line = 10
begin = 5
end = 14

[JC_7]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_106]
file = "HOME/tests/c/heap_sort.c"
line = 29
begin = 45
end = 57

[JC_8]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 44
begin = 10
end = 18

[JC_107]
file = "HOME/tests/c/heap_sort.c"
line = 29
begin = 13
end = 57

[JC_9]
file = "HOME/"
line = 0
begin = -1
end = -1

[heap_sort_safety]
name = "Function heap_sort"
behavior = "Safety"
file = "HOME/tests/c/heap_sort.c"
line = 10
begin = 5
end = 14

[JC_50]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 78
begin = 6
end = 392

[JC_51]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 78
begin = 6
end = 392

[JC_52]
kind = PointerDeref
file = "HOME/tests/c/heap_sort.c"
line = 16
begin = 37
end = 43

[JC_53]
kind = UserCall
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 86
begin = 20
end = 64

[JC_54]
kind = ArithOverflow
file = "HOME/tests/c/heap_sort.c"
line = 16
begin = 23
end = 26

[JC_55]
file = "HOME/tests/c/heap_sort.c"
line = 14
begin = 19
end = 26

[JC_56]
file = "HOME/tests/c/heap_sort.c"
line = 17
begin = 21
end = 27

[JC_57]
file = "HOME/tests/c/heap_sort.c"
line = 17
begin = 26
end = 34

[JC_58]
file = "HOME/tests/c/heap_sort.c"
line = 17
begin = 21
end = 34

[JC_59]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_60]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 93
begin = 6
end = 470

[JC_61]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 93
begin = 6
end = 470

[JC_62]
kind = UserCall
file = "HOME/tests/c/heap_sort.c"
line = 20
begin = 37
end = 51

[JC_10]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_63]
kind = PointerDeref
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 101
begin = 21
end = 138

[JC_11]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 48
begin = 5
end = 11

[JC_64]
kind = ArithOverflow
file = "HOME/tests/c/heap_sort.c"
line = 20
begin = 23
end = 26

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_65]
file = "HOME/tests/c/heap_sort.c"
line = 18
begin = 19
end = 26

[JC_13]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 48
begin = 5
end = 11

[JC_66]
kind = UserCall
file = "HOME/tests/c/heap_sort.c"
line = 12
begin = 11
end = 22

[JC_14]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_67]
file = "HOME/tests/c/heap_sort.c"
line = 13
begin = 21
end = 27

[JC_15]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_68]
file = "HOME/tests/c/heap_sort.c"
line = 13
begin = 26
end = 34

[JC_16]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 48
begin = 5
end = 11

[JC_69]
file = "HOME/tests/c/heap_sort.c"
line = 13
begin = 21
end = 34

[JC_17]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_18]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 48
begin = 5
end = 11

[JC_19]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_70]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_71]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 78
begin = 6
end = 392

[JC_72]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 78
begin = 6
end = 392

[JC_20]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_73]
kind = UserCall
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 86
begin = 20
end = 64

[JC_21]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 54
begin = 6
end = 17

[JC_74]
file = "HOME/tests/c/heap_sort.c"
line = 17
begin = 21
end = 27

[JC_22]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_75]
file = "HOME/tests/c/heap_sort.c"
line = 17
begin = 26
end = 34

[JC_23]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 54
begin = 6
end = 17

[JC_76]
file = "HOME/tests/c/heap_sort.c"
line = 17
begin = 21
end = 34

[JC_24]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_77]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_25]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_78]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 93
begin = 6
end = 470

[JC_26]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 56
begin = 10
end = 18

[JC_79]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 93
begin = 6
end = 470

[JC_27]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_28]
file = "HOME/tests/c/heap_sort.jessie/heap_sort.jc"
line = 56
begin = 10
end = 18

[JC_29]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_80]
kind = UserCall
file = "HOME/tests/c/heap_sort.c"
line = 20
begin = 37
end = 51

[JC_81]
file = "HOME/tests/c/heap_sort.c"
line = 25
begin = 5
end = 9

[JC_82]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_30]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_83]
file = "HOME/tests/c/heap_sort.c"
line = 25
begin = 5
end = 9

[JC_31]
file = "HOME/tests/c/heap_sort.c"
line = 5
begin = 13
end = 21

[JC_84]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_32]
file = "HOME/tests/c/heap_sort.c"
line = 6
begin = 13
end = 38

[JC_85]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_33]
file = "HOME/tests/c/heap_sort.c"
line = 6
begin = 13
end = 38

[JC_86]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_34]
file = "HOME/"
line = 0
begin = -1
end = -1

[main_safety]
name = "Function main"
behavior = "Safety"
file = "HOME/tests/c/heap_sort.c"
line = 25
begin = 5
end = 9

[JC_87]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_35]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_88]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_36]
file = "HOME/tests/c/heap_sort.c"
line = 5
begin = 13
end = 21

[JC_89]
kind = AllocSize
file = "HOME/tests/c/heap_sort.c"
line = 26
begin = 6
end = 9

[JC_37]
file = "HOME/tests/c/heap_sort.c"
line = 6
begin = 13
end = 38

[JC_38]
file = "HOME/tests/c/heap_sort.c"
line = 6
begin = 13
end = 38

[JC_39]
file = "HOME/"
line = 0
begin = -1
end = -1

========== file tests/c/heap_sort.jessie/why/heap_sort.why ==========
type Heap

type char_P

type int32

type int8

type int_P

type padding

type uint32

type void_P

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

logic Heap_tag:  -> Heap tag_id

axiom Heap_int : (int_of_tag(Heap_tag) = (1))

logic Heap_of_pointer_address: unit pointer -> Heap pointer

axiom Heap_of_pointer_address_of_pointer_addr :
 (forall p:Heap pointer. (p = Heap_of_pointer_address(pointer_address(p))))

axiom Heap_parenttag_bottom : parenttag(Heap_tag, bottom_tag)

axiom Heap_tags :
 (forall x:Heap pointer.
  (forall Heap_tag_table:Heap tag_table.
   instanceof(Heap_tag_table, x, Heap_tag)))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

logic char_P_of_pointer_address: unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr :
 (forall p:char_P pointer.
  (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32, y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

logic int_P_of_pointer_address: unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr :
 (forall p:int_P pointer. (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

predicate left_valid_struct_Heap(p:Heap pointer, a:int,
 Heap_alloc_table:Heap alloc_table) = (offset_min(Heap_alloc_table, p) <= a)

predicate left_valid_struct_char_P(p:char_P pointer, a:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_min(char_P_alloc_table, p) <= a)

predicate left_valid_struct_int_P(p:int_P pointer, a:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_min(int_P_alloc_table, p) <= a)

predicate left_valid_struct_void_P(p:void_P pointer, a:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_min(void_P_alloc_table, p) <= a)

axiom pointer_addr_of_Heap_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(Heap_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address: unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_Heap(p:Heap pointer, b:int,
 Heap_alloc_table:Heap alloc_table) = (offset_max(Heap_alloc_table, p) >= b)

predicate right_valid_struct_char_P(p:char_P pointer, b:int,
 char_P_alloc_table:char_P alloc_table) =
 (offset_max(char_P_alloc_table, p) >= b)

predicate right_valid_struct_int_P(p:int_P pointer, b:int,
 int_P_alloc_table:int_P alloc_table) =
 (offset_max(int_P_alloc_table, p) >= b)

predicate right_valid_struct_void_P(p:void_P pointer, b:int,
 void_P_alloc_table:void_P alloc_table) =
 (offset_max(void_P_alloc_table, p) >= b)

predicate strict_valid_root_Heap(p:Heap pointer, a:int, b:int,
 Heap_alloc_table:Heap alloc_table) =
 ((offset_min(Heap_alloc_table, p) = a)
 and (offset_max(Heap_alloc_table, p) = b))

predicate strict_valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_Heap(p:Heap pointer, a:int, b:int,
 Heap_alloc_table:Heap alloc_table) =
 ((offset_min(Heap_alloc_table, p) = a)
 and (offset_max(Heap_alloc_table, p) = b))

predicate strict_valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate strict_valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

predicate valid_bitvector_struct_Heap(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Heap(p:Heap pointer, a:int, b:int,
 Heap_alloc_table:Heap alloc_table) =
 ((offset_min(Heap_alloc_table, p) <= a)
 and (offset_max(Heap_alloc_table, p) >= b))

predicate valid_root_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_root_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_Heap(p:Heap pointer, a:int, b:int,
 Heap_alloc_table:Heap alloc_table) =
 ((offset_min(Heap_alloc_table, p) <= a)
 and (offset_max(Heap_alloc_table, p) >= b))

predicate valid_struct_char_P(p:char_P pointer, a:int, b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) <= a)
 and (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p:int_P pointer, a:int, b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) <= a)
 and (offset_max(int_P_alloc_table, p) >= b))

predicate valid_struct_void_P(p:void_P pointer, a:int, b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) <= a)
 and (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_of_pointer_address_of_pointer_addr :
 (forall p:void_P pointer.
  (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter Heap_alloc_table : Heap alloc_table ref

parameter Heap_tag_table : Heap tag_table ref

parameter alloc_bitvector_struct_Heap :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Heap(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Heap_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Heap(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_char_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_char_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_int_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_int_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_void_P_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_void_P(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_struct_Heap :
 n:int ->
  Heap_alloc_table:Heap alloc_table ref ->
   Heap_tag_table:Heap tag_table ref ->
    { } Heap pointer writes Heap_alloc_table,Heap_tag_table
    { (strict_valid_struct_Heap(result, (0), sub_int(n, (1)),
       Heap_alloc_table)
      and (alloc_extends(Heap_alloc_table@, Heap_alloc_table)
          and (alloc_fresh(Heap_alloc_table@, result, n)
              and instanceof(Heap_tag_table, result, Heap_tag)))) }

parameter alloc_struct_Heap_requires :
 n:int ->
  Heap_alloc_table:Heap alloc_table ref ->
   Heap_tag_table:Heap tag_table ref ->
    { ge_int(n, (0))} Heap pointer writes Heap_alloc_table,Heap_tag_table
    { (strict_valid_struct_Heap(result, (0), sub_int(n, (1)),
       Heap_alloc_table)
      and (alloc_extends(Heap_alloc_table@, Heap_alloc_table)
          and (alloc_fresh(Heap_alloc_table@, result, n)
              and instanceof(Heap_tag_table, result, Heap_tag)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_struct_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { } char_P pointer writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter alloc_struct_char_P_requires :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_tag_table:char_P tag_table ref ->
    { ge_int(n, (0))} char_P pointer
    writes char_P_alloc_table,char_P_tag_table
    { (strict_valid_struct_char_P(result, (0), sub_int(n, (1)),
       char_P_alloc_table)
      and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
          and (alloc_fresh(char_P_alloc_table@, result, n)
              and instanceof(char_P_tag_table, result, char_P_tag)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_struct_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { } int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter alloc_struct_int_P_requires :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_tag_table:int_P tag_table ref ->
    { ge_int(n, (0))} int_P pointer writes int_P_alloc_table,int_P_tag_table
    { (strict_valid_struct_int_P(result, (0), sub_int(n, (1)),
       int_P_alloc_table)
      and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
          and (alloc_fresh(int_P_alloc_table@, result, n)
              and instanceof(int_P_tag_table, result, int_P_tag)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_struct_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { } void_P pointer writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter alloc_struct_void_P_requires :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_tag_table:void_P tag_table ref ->
    { ge_int(n, (0))} void_P pointer
    writes void_P_alloc_table,void_P_tag_table
    { (strict_valid_struct_void_P(result, (0), sub_int(n, (1)),
       void_P_alloc_table)
      and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
          and (alloc_fresh(void_P_alloc_table@, result, n)
              and instanceof(void_P_tag_table, result, void_P_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter create : sz:uint32 -> { } Heap pointer { true }

parameter create_requires : sz:uint32 -> { } Heap pointer { true }

parameter extract_min : u:Heap pointer -> { } int32 { true }

parameter extract_min_requires : u:Heap pointer -> { } int32 { true }

parameter heap_sort :
 arr:int_P pointer ->
  len:uint32 ->
   int_P_int_M_arr_5:(int_P, int32) memory ref ->
    int_P_arr_5_alloc_table:int_P alloc_table ->
     { } unit reads int_P_int_M_arr_5 writes int_P_int_M_arr_5
     { (JC_42:
       (forall i:int.
        (forall j:int.
         ((le_int((0), i)
          and (le_int(i, j) and lt_int(j, integer_of_uint32(len@)))) ->
          le_int(integer_of_int32(select(int_P_int_M_arr_5, shift(arr@, i))),
          integer_of_int32(select(int_P_int_M_arr_5, shift(arr@, j)))))))) }

parameter heap_sort_requires :
 arr:int_P pointer ->
  len:uint32 ->
   int_P_int_M_arr_5:(int_P, int32) memory ref ->
    int_P_arr_5_alloc_table:int_P alloc_table ->
     { (JC_34:
       ((JC_31: ge_int(integer_of_uint32(len), (0)))
       and ((JC_32: le_int(offset_min(int_P_arr_5_alloc_table, arr), (0)))
           and (JC_33:
               ge_int(offset_max(int_P_arr_5_alloc_table, arr),
               sub_int(integer_of_uint32(len), (1)))))))}
     unit reads int_P_int_M_arr_5 writes int_P_int_M_arr_5
     { (JC_42:
       (forall i:int.
        (forall j:int.
         ((le_int((0), i)
          and (le_int(i, j) and lt_int(j, integer_of_uint32(len@)))) ->
          le_int(integer_of_int32(select(int_P_int_M_arr_5, shift(arr@, i))),
          integer_of_int32(select(int_P_int_M_arr_5, shift(arr@, j)))))))) }

parameter insert :
 u_0:Heap pointer ->
  e:int32 ->
   Heap_x_u_0_3:(Heap, int32) memory ref ->
    Heap_u_0_3_alloc_table:Heap alloc_table ->
     { } unit writes Heap_x_u_0_3
     { (JC_18:
       not_assigns(Heap_u_0_3_alloc_table@, Heap_x_u_0_3@, Heap_x_u_0_3,
       pset_singleton(u_0@))) }

parameter insert_requires :
 u_0:Heap pointer ->
  e:int32 ->
   Heap_x_u_0_3:(Heap, int32) memory ref ->
    Heap_u_0_3_alloc_table:Heap alloc_table ->
     { } unit writes Heap_x_u_0_3
     { (JC_18:
       not_assigns(Heap_u_0_3_alloc_table@, Heap_x_u_0_3@, Heap_x_u_0_3,
       pset_singleton(u_0@))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter main : tt:unit -> { } unit { true }

parameter main_requires : tt:unit -> { } unit { true }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

let heap_sort_ensures_default =
 fun (arr : int_P pointer) (len : uint32) (int_P_int_M_arr_5 : (int_P, int32) memory ref) (int_P_arr_5_alloc_table : int_P alloc_table) ->
  { (JC_39:
    ((JC_36: ge_int(integer_of_uint32(len), (0)))
    and ((JC_37: le_int(offset_min(int_P_arr_5_alloc_table, arr), (0)))
        and (JC_38:
            ge_int(offset_max(int_P_arr_5_alloc_table, arr),
            sub_int(integer_of_uint32(len), (1))))))) }
  (init:
  try
   begin
     (let Heap_x_h_6 = ref (any_memory void) in
     (let Heap_h_6_alloc_table = (any_alloc_table void) in
     (let i_0 = ref (any_uint32 void) in
     (let h = ref (any_pointer void) in
     try
      (let jessie_<num> =
      begin
        try
         (let jessie_<num> =
         (C_5:
         (C_6:
         begin
           (let jessie_<num> =
           (h := (C_4: (let jessie_<num> = len in (JC_66: (create jessie_<num>))))) in
           void);
          (let jessie_<num> = (i_0 := (safe_uint32_of_integer_ (0))) in void);
          (loop_3:
          while true do
          { invariant
              (JC_69:
              ((JC_67: le_int((0), integer_of_uint32(i_0)))
              and (JC_68:
                  le_int(integer_of_uint32(i_0), integer_of_uint32(len)))))
             }
           begin
             [ { } unit { true } ];
            try
             (let jessie_<num> =
             begin
               (let jessie_<num> =
               (C_13:
               (C_16:
               begin
                 (if ((lt_int_ (integer_of_uint32 !i_0)) (integer_of_uint32 len))
                 then void
                 else
                  (let jessie_<num> = (raise (Goto_while_0_break_exc void)) in
                  void));
                (let jessie_<num> = !h in
                (let jessie_<num> =
                (C_12:
                ((safe_acc_ !int_P_int_M_arr_5) (C_11:
                                                ((shift arr) (integer_of_uint32 !i_0))))) in
                (JC_73:
                ((((insert jessie_<num>) jessie_<num>) Heap_x_h_6) Heap_h_6_alloc_table))));
                (i_0 := (C_15:
                        (safe_uint32_of_integer_ (C_14:
                                                 ((add_int (integer_of_uint32 !i_0)) (1))))));
                !i_0 end)) in void); (raise (Loop_continue_exc void)) end in
             void) with Loop_continue_exc jessie_<num> -> void end end done);
          (raise (Goto_while_0_break_exc void)) end)) in void) with
         Goto_while_0_break_exc jessie_<num> ->
         (while_0_break:
         (C_17:
         begin
           void;
          (let jessie_<num> = (i_0 := (safe_uint32_of_integer_ (0))) in void);
          (loop_4:
          while true do
          { invariant
              (JC_76:
              ((JC_74: le_int((0), integer_of_uint32(i_0)))
              and (JC_75:
                  le_int(integer_of_uint32(i_0), integer_of_uint32(len)))))
             }
           begin
             [ { } unit { true } ];
            try
             (let jessie_<num> =
             begin
               (let jessie_<num> =
               (C_25:
               (C_28:
               begin
                 (if ((lt_int_ (integer_of_uint32 !i_0)) (integer_of_uint32 len))
                 then void
                 else
                  (let jessie_<num> = (raise (Goto_while_1_break_exc void)) in
                  void));
                (let jessie_<num> =
                (let jessie_<num> =
                (C_22:
                (let jessie_<num> = !h in (JC_80: (extract_min jessie_<num>)))) in
                (let jessie_<num> = arr in
                (let jessie_<num> = (integer_of_uint32 !i_0) in
                (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
                (((safe_upd_ int_P_int_M_arr_5) jessie_<num>) jessie_<num>))))) in
                void);
                (i_0 := (C_27:
                        (safe_uint32_of_integer_ (C_26:
                                                 ((add_int (integer_of_uint32 !i_0)) (1))))));
                !i_0 end)) in void); (raise (Loop_continue_exc void)) end in
             void) with Loop_continue_exc jessie_<num> -> void end end done) end)) end;
       (raise (Goto_while_1_break_exc void)) end in void) with
      Goto_while_1_break_exc jessie_<num> ->
      (while_1_break: begin   void; (raise Return) end) end))));
    (raise Return) end with Return -> void end)
  { (JC_41:
    (forall i:int.
     (forall j:int.
      ((le_int((0), i)
       and (le_int(i, j) and lt_int(j, integer_of_uint32(len@)))) ->
       le_int(integer_of_int32(select(int_P_int_M_arr_5, shift(arr@, i))),
       integer_of_int32(select(int_P_int_M_arr_5, shift(arr@, j)))))))) }

let heap_sort_safety =
 fun (arr : int_P pointer) (len : uint32) (int_P_int_M_arr_5 : (int_P, int32) memory ref) (int_P_arr_5_alloc_table : int_P alloc_table) ->
  { (JC_39:
    ((JC_36: ge_int(integer_of_uint32(len), (0)))
    and ((JC_37: le_int(offset_min(int_P_arr_5_alloc_table, arr), (0)))
        and (JC_38:
            ge_int(offset_max(int_P_arr_5_alloc_table, arr),
            sub_int(integer_of_uint32(len), (1))))))) }
  (init:
  try
   begin
     (let Heap_x_h_6 = ref (any_memory void) in
     (let Heap_h_6_alloc_table = (any_alloc_table void) in
     (let i_0 = ref (any_uint32 void) in
     (let h = ref (any_pointer void) in
     try
      (let jessie_<num> =
      begin
        try
         (let jessie_<num> =
         (C_5:
         (C_6:
         begin
           (let jessie_<num> =
           (h := (C_4:
                 (let jessie_<num> = len in (JC_45: (create_requires jessie_<num>))))) in
           void);
          (let jessie_<num> = (i_0 := (safe_uint32_of_integer_ (0))) in void);
          (loop_1:
          while true do
          { invariant (JC_50: true)
            variant (JC_55 : sub_int(integer_of_uint32(len),
                             integer_of_uint32(i_0))) }
           begin
             [ { } unit reads i_0
               { (JC_48:
                 ((JC_46: le_int((0), integer_of_uint32(i_0)))
                 and (JC_47:
                     le_int(integer_of_uint32(i_0), integer_of_uint32(len))))) } ];
            try
             (let jessie_<num> =
             begin
               (let jessie_<num> =
               (C_13:
               (C_16:
               begin
                 (if ((lt_int_ (integer_of_uint32 !i_0)) (integer_of_uint32 len))
                 then void
                 else
                  (let jessie_<num> = (raise (Goto_while_0_break_exc void)) in
                  void));
                (let jessie_<num> = !h in
                (let jessie_<num> =
                (C_12:
                (JC_52:
                ((((offset_acc_ int_P_arr_5_alloc_table) !int_P_int_M_arr_5) arr) 
                 (integer_of_uint32 !i_0)))) in
                (JC_53:
                ((((insert_requires jessie_<num>) jessie_<num>) Heap_x_h_6) Heap_h_6_alloc_table))));
                (i_0 := (C_15:
                        (JC_54:
                        (uint32_of_integer_ (C_14:
                                            ((add_int (integer_of_uint32 !i_0)) (1)))))));
                !i_0 end)) in void); (raise (Loop_continue_exc void)) end in
             void) with Loop_continue_exc jessie_<num> -> void end end done);
          (raise (Goto_while_0_break_exc void)) end)) in void) with
         Goto_while_0_break_exc jessie_<num> ->
         (while_0_break:
         (C_17:
         begin
           void;
          (let jessie_<num> = (i_0 := (safe_uint32_of_integer_ (0))) in void);
          (loop_2:
          while true do
          { invariant (JC_60: true)
            variant (JC_65 : sub_int(integer_of_uint32(len),
                             integer_of_uint32(i_0))) }
           begin
             [ { } unit reads i_0
               { (JC_58:
                 ((JC_56: le_int((0), integer_of_uint32(i_0)))
                 and (JC_57:
                     le_int(integer_of_uint32(i_0), integer_of_uint32(len))))) } ];
            try
             (let jessie_<num> =
             begin
               (let jessie_<num> =
               (C_25:
               (C_28:
               begin
                 (if ((lt_int_ (integer_of_uint32 !i_0)) (integer_of_uint32 len))
                 then void
                 else
                  (let jessie_<num> = (raise (Goto_while_1_break_exc void)) in
                  void));
                (let jessie_<num> =
                (let jessie_<num> =
                (C_22:
                (let jessie_<num> = !h in
                (JC_62: (extract_min_requires jessie_<num>)))) in
                (let jessie_<num> = arr in
                (let jessie_<num> = (integer_of_uint32 !i_0) in
                (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
                (JC_63:
                (((((offset_upd_ int_P_arr_5_alloc_table) int_P_int_M_arr_5) jessie_<num>) jessie_<num>) jessie_<num>)))))) in
                void);
                (i_0 := (C_27:
                        (JC_64:
                        (uint32_of_integer_ (C_26:
                                            ((add_int (integer_of_uint32 !i_0)) (1)))))));
                !i_0 end)) in void); (raise (Loop_continue_exc void)) end in
             void) with Loop_continue_exc jessie_<num> -> void end end done) end)) end;
       (raise (Goto_while_1_break_exc void)) end in void) with
      Goto_while_1_break_exc jessie_<num> ->
      (while_1_break: begin   void; (raise Return) end) end))));
    (raise Return) end with Return -> void end) { true }

let main_ensures_default =
 fun (tt : unit) ->
  { (JC_84: true) }
  (init:
  try
   begin
     (let int_P_int_M_arr_0_8 = ref (any_memory void) in
     (let int_P_arr_0_8_tag_table = ref (any_tag_table void) in
     (let int_P_arr_0_8_alloc_table = ref (any_alloc_table void) in
     (let arr_0 = ref (any_pointer void) in
     (C_35:
     (C_37:
     (C_39:
     (C_41:
     (C_42:
     (C_51:
     begin
       (let jessie_<num> =
       (arr_0 := (C_34:
                 (JC_99:
                 (((alloc_struct_int_P (3)) int_P_arr_0_8_alloc_table) int_P_arr_0_8_tag_table)))) in
       void);
      (let jessie_<num> = (safe_int32_of_integer_ (42)) in
      (let jessie_<num> = !arr_0 in
      (let jessie_<num> = (safe_int32_of_integer_ (13)) in
      (let jessie_<num> = !arr_0 in
      (let jessie_<num> = (1) in
      (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
      (let jessie_<num> = (safe_int32_of_integer_ (42)) in
      (let jessie_<num> = !arr_0 in
      (let jessie_<num> = (2) in
      (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
      [ { } unit reads int_P_arr_0_8_alloc_table,int_P_int_M_arr_0_8
        writes int_P_int_M_arr_0_8
        { (not_assigns(int_P_arr_0_8_alloc_table, int_P_int_M_arr_0_8@,
           int_P_int_M_arr_0_8,
           pset_range(pset_singleton(jessie_<num>), (0), (2)))
          and ((select(int_P_int_M_arr_0_8, shift(jessie_<num>, (0))) = jessie_<num>)
              and ((select(int_P_int_M_arr_0_8, shift(jessie_<num>, (1))) = jessie_<num>)
                  and (select(int_P_int_M_arr_0_8, shift(jessie_<num>, (2))) = jessie_<num>)))) } ]))))))))));
      (let jessie_<num> = !arr_0 in
      (let jessie_<num> = (safe_uint32_of_integer_ (3)) in
      (JC_100:
      ((((heap_sort jessie_<num>) jessie_<num>) int_P_int_M_arr_0_8) !int_P_arr_0_8_alloc_table))));
      (assert
      { (JC_103:
        ((JC_101:
         le_int(integer_of_int32(select(int_P_int_M_arr_0_8,
                                 shift(arr_0, (0)))),
         integer_of_int32(select(int_P_int_M_arr_0_8, shift(arr_0, (1))))))
        and (JC_102:
            le_int(integer_of_int32(select(int_P_int_M_arr_0_8,
                                    shift(arr_0, (1)))),
            integer_of_int32(select(int_P_int_M_arr_0_8, shift(arr_0, (2)))))))) };
      void); void;
      (assert
      { (JC_107:
        ((JC_104:
         eq_int(integer_of_int32(select(int_P_int_M_arr_0_8,
                                 shift(arr_0, (0)))),
         (13)))
        and ((JC_105:
             eq_int(integer_of_int32(select(int_P_int_M_arr_0_8,
                                     shift(arr_0, (1)))),
             (42)))
            and (JC_106:
                eq_int(integer_of_int32(select(int_P_int_M_arr_0_8,
                                        shift(arr_0, (2)))),
                (42)))))) }; void); void;
      ((safe_free_parameter int_P_arr_0_8_alloc_table) !arr_0);
      (raise Return) end)))))))))); (raise Return) end with Return ->
   void end) { (JC_85: true) }

let main_safety =
 fun (tt : unit) ->
  { (JC_84: true) }
  (init:
  try
   begin
     (let int_P_int_M_arr_0_8 = ref (any_memory void) in
     (let int_P_arr_0_8_tag_table = ref (any_tag_table void) in
     (let int_P_arr_0_8_alloc_table = ref (any_alloc_table void) in
     (let arr_0 = ref (any_pointer void) in
     (C_35:
     (C_37:
     (C_39:
     (C_41:
     (C_42:
     (C_51:
     begin
       (let jessie_<num> =
       (arr_0 := (let jessie_<num> =
                 (C_34:
                 (JC_89:
                 (((alloc_struct_int_P_requires (3)) int_P_arr_0_8_alloc_table) int_P_arr_0_8_tag_table))) in
                 (JC_90:
                 (assert
                 { ge_int(offset_max(int_P_arr_0_8_alloc_table, jessie_<num>),
                   (2)) }; jessie_<num>)))) in void);
      (let jessie_<num> = (safe_int32_of_integer_ (42)) in
      (let jessie_<num> = !arr_0 in
      (let jessie_<num> = (safe_int32_of_integer_ (13)) in
      (let jessie_<num> = !arr_0 in
      (let jessie_<num> = (1) in
      (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
      (let jessie_<num> = (safe_int32_of_integer_ (42)) in
      (let jessie_<num> = !arr_0 in
      (let jessie_<num> = (2) in
      (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
      [ { } unit reads int_P_arr_0_8_alloc_table,int_P_int_M_arr_0_8
        writes int_P_int_M_arr_0_8
        { (not_assigns(int_P_arr_0_8_alloc_table, int_P_int_M_arr_0_8@,
           int_P_int_M_arr_0_8,
           pset_range(pset_singleton(jessie_<num>), (0), (2)))
          and ((select(int_P_int_M_arr_0_8, shift(jessie_<num>, (0))) = jessie_<num>)
              and ((select(int_P_int_M_arr_0_8, shift(jessie_<num>, (1))) = jessie_<num>)
                  and (select(int_P_int_M_arr_0_8, shift(jessie_<num>, (2))) = jessie_<num>)))) } ]))))))))));
      (let jessie_<num> = !arr_0 in
      (let jessie_<num> = (safe_uint32_of_integer_ (3)) in
      (JC_91:
      ((((heap_sort_requires jessie_<num>) jessie_<num>) int_P_int_M_arr_0_8) !int_P_arr_0_8_alloc_table))));
      [ { } unit reads arr_0,int_P_int_M_arr_0_8
        { (JC_94:
          ((JC_92:
           le_int(integer_of_int32(select(int_P_int_M_arr_0_8,
                                   shift(arr_0, (0)))),
           integer_of_int32(select(int_P_int_M_arr_0_8, shift(arr_0, (1))))))
          and (JC_93:
              le_int(integer_of_int32(select(int_P_int_M_arr_0_8,
                                      shift(arr_0, (1)))),
              integer_of_int32(select(int_P_int_M_arr_0_8, shift(arr_0, (2)))))))) } ];
      void;
      [ { } unit reads arr_0,int_P_int_M_arr_0_8
        { (JC_98:
          ((JC_95:
           eq_int(integer_of_int32(select(int_P_int_M_arr_0_8,
                                   shift(arr_0, (0)))),
           (13)))
          and ((JC_96:
               eq_int(integer_of_int32(select(int_P_int_M_arr_0_8,
                                       shift(arr_0, (1)))),
               (42)))
              and (JC_97:
                  eq_int(integer_of_int32(select(int_P_int_M_arr_0_8,
                                          shift(arr_0, (2)))),
                  (42)))))) } ]; void;
      ((free_parameter int_P_arr_0_8_alloc_table) !arr_0); (raise Return) end))))))))));
    (raise Return) end with Return -> void end) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/heap_sort.why
========== file tests/c/heap_sort.jessie/why/heap_sort_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s2) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s3))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type Heap

type char_P

type int32

type int8

type int_P

type padding

type uint32

type void_P

logic Heap_tag : Heap tag_id

axiom Heap_int: (int_of_tag(Heap_tag) = 1)

logic Heap_of_pointer_address : unit pointer -> Heap pointer

axiom Heap_of_pointer_address_of_pointer_addr:
  (forall p:Heap pointer. (p = Heap_of_pointer_address(pointer_address(p))))

axiom Heap_parenttag_bottom: parenttag(Heap_tag, bottom_tag)

axiom Heap_tags:
  (forall x:Heap pointer.
    (forall Heap_tag_table:Heap tag_table. instanceof(Heap_tag_table, x,
      Heap_tag)))

logic char_P_tag : char_P tag_id

axiom char_P_int: (int_of_tag(char_P_tag) = 1)

logic char_P_of_pointer_address : unit pointer -> char_P pointer

axiom char_P_of_pointer_address_of_pointer_addr:
  (forall p:char_P pointer.
    (p = char_P_of_pointer_address(pointer_address(p))))

axiom char_P_parenttag_bottom: parenttag(char_P_tag, bottom_tag)

axiom char_P_tags:
  (forall x:char_P pointer.
    (forall char_P_tag_table:char_P tag_table. instanceof(char_P_tag_table,
      x, char_P_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint32 : uint32 -> int

predicate eq_uint32(x: uint32, y: uint32) =
  (integer_of_uint32(x) = integer_of_uint32(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic int_P_tag : int_P tag_id

axiom int_P_int: (int_of_tag(int_P_tag) = 1)

logic int_P_of_pointer_address : unit pointer -> int_P pointer

axiom int_P_of_pointer_address_of_pointer_addr:
  (forall p:int_P pointer.
    (p = int_P_of_pointer_address(pointer_address(p))))

axiom int_P_parenttag_bottom: parenttag(int_P_tag, bottom_tag)

axiom int_P_tags:
  (forall x:int_P pointer.
    (forall int_P_tag_table:int_P tag_table. instanceof(int_P_tag_table, x,
      int_P_tag)))

predicate left_valid_struct_Heap(p: Heap pointer, a: int,
  Heap_alloc_table: Heap alloc_table) = (offset_min(Heap_alloc_table,
  p) <= a)

predicate left_valid_struct_char_P(p: char_P pointer, a: int,
  char_P_alloc_table: char_P alloc_table) = (offset_min(char_P_alloc_table,
  p) <= a)

predicate left_valid_struct_int_P(p: int_P pointer, a: int,
  int_P_alloc_table: int_P alloc_table) = (offset_min(int_P_alloc_table,
  p) <= a)

predicate left_valid_struct_void_P(p: void_P pointer, a: int,
  void_P_alloc_table: void_P alloc_table) = (offset_min(void_P_alloc_table,
  p) <= a)

axiom pointer_addr_of_Heap_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(Heap_of_pointer_address(p))))

axiom pointer_addr_of_char_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(char_P_of_pointer_address(p))))

axiom pointer_addr_of_int_P_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(int_P_of_pointer_address(p))))

logic void_P_of_pointer_address : unit pointer -> void_P pointer

axiom pointer_addr_of_void_P_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(void_P_of_pointer_address(p))))

predicate right_valid_struct_Heap(p: Heap pointer, b: int,
  Heap_alloc_table: Heap alloc_table) = (offset_max(Heap_alloc_table,
  p) >= b)

predicate right_valid_struct_char_P(p: char_P pointer, b: int,
  char_P_alloc_table: char_P alloc_table) = (offset_max(char_P_alloc_table,
  p) >= b)

predicate right_valid_struct_int_P(p: int_P pointer, b: int,
  int_P_alloc_table: int_P alloc_table) = (offset_max(int_P_alloc_table,
  p) >= b)

predicate right_valid_struct_void_P(p: void_P pointer, b: int,
  void_P_alloc_table: void_P alloc_table) = (offset_max(void_P_alloc_table,
  p) >= b)

predicate strict_valid_root_Heap(p: Heap pointer, a: int, b: int,
  Heap_alloc_table: Heap alloc_table) =
  ((offset_min(Heap_alloc_table, p) = a) and (offset_max(Heap_alloc_table,
   p) = b))

predicate strict_valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

predicate strict_valid_struct_Heap(p: Heap pointer, a: int, b: int,
  Heap_alloc_table: Heap alloc_table) =
  ((offset_min(Heap_alloc_table, p) = a) and (offset_max(Heap_alloc_table,
   p) = b))

predicate strict_valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) = a) and
   (offset_max(char_P_alloc_table, p) = b))

predicate strict_valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) = a) and (offset_max(int_P_alloc_table,
   p) = b))

predicate strict_valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) = a) and
   (offset_max(void_P_alloc_table, p) = b))

logic uint32_of_integer : int -> uint32

axiom uint32_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 4294967295)) ->
     (integer_of_uint32(uint32_of_integer(x)) = x)))

axiom uint32_range:
  (forall x:uint32.
    ((0 <= integer_of_uint32(x)) and (integer_of_uint32(x) <= 4294967295)))

predicate valid_bitvector_struct_Heap(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_char_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_int_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_void_P(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Heap(p: Heap pointer, a: int, b: int,
  Heap_alloc_table: Heap alloc_table) =
  ((offset_min(Heap_alloc_table, p) <= a) and (offset_max(Heap_alloc_table,
   p) >= b))

predicate valid_root_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_root_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_root_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

predicate valid_struct_Heap(p: Heap pointer, a: int, b: int,
  Heap_alloc_table: Heap alloc_table) =
  ((offset_min(Heap_alloc_table, p) <= a) and (offset_max(Heap_alloc_table,
   p) >= b))

predicate valid_struct_char_P(p: char_P pointer, a: int, b: int,
  char_P_alloc_table: char_P alloc_table) =
  ((offset_min(char_P_alloc_table, p) <= a) and
   (offset_max(char_P_alloc_table, p) >= b))

predicate valid_struct_int_P(p: int_P pointer, a: int, b: int,
  int_P_alloc_table: int_P alloc_table) =
  ((offset_min(int_P_alloc_table, p) <= a) and (offset_max(int_P_alloc_table,
   p) >= b))

predicate valid_struct_void_P(p: void_P pointer, a: int, b: int,
  void_P_alloc_table: void_P alloc_table) =
  ((offset_min(void_P_alloc_table, p) <= a) and
   (offset_max(void_P_alloc_table, p) >= b))

logic void_P_tag : void_P tag_id

axiom void_P_int: (int_of_tag(void_P_tag) = 1)

axiom void_P_of_pointer_address_of_pointer_addr:
  (forall p:void_P pointer.
    (p = void_P_of_pointer_address(pointer_address(p))))

axiom void_P_parenttag_bottom: parenttag(void_P_tag, bottom_tag)

axiom void_P_tags:
  (forall x:void_P pointer.
    (forall void_P_tag_table:void_P tag_table. instanceof(void_P_tag_table,
      x, void_P_tag)))

goal heap_sort_ensures_default_po_1:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  ("JC_69": ("JC_67": ("JC_67": (0 <= integer_of_uint32(i_0)))))

goal heap_sort_ensures_default_po_2:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  ("JC_69":
  ("JC_68": ("JC_68": (integer_of_uint32(i_0) <= integer_of_uint32(len)))))

goal heap_sort_ensures_default_po_3:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  forall int_P_int_M_arr_5:(int_P,
  int32) memory.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result:Heap alloc_table.
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall Heap_x_h_6:(Heap,
  int32) memory.
  forall i_0_0:uint32.
  ("JC_69":
  (("JC_67": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_68": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) < integer_of_uint32(len)) ->
  forall result2:int32.
  (result2 = select(int_P_int_M_arr_5, shift(arr,
  integer_of_uint32(i_0_0)))) ->
  forall Heap_x_h_6_0:(Heap,
  int32) memory.
  ("JC_18": not_assigns(result, Heap_x_h_6, Heap_x_h_6_0, pset_singleton(h))) ->
  forall result3:uint32.
  (integer_of_uint32(result3) = (integer_of_uint32(i_0_0) + 1)) ->
  forall i_0_1:uint32.
  (i_0_1 = result3) ->
  ("JC_69": ("JC_67": ("JC_67": (0 <= integer_of_uint32(i_0_1)))))

goal heap_sort_ensures_default_po_4:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  forall int_P_int_M_arr_5:(int_P,
  int32) memory.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result:Heap alloc_table.
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall Heap_x_h_6:(Heap,
  int32) memory.
  forall i_0_0:uint32.
  ("JC_69":
  (("JC_67": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_68": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) < integer_of_uint32(len)) ->
  forall result2:int32.
  (result2 = select(int_P_int_M_arr_5, shift(arr,
  integer_of_uint32(i_0_0)))) ->
  forall Heap_x_h_6_0:(Heap,
  int32) memory.
  ("JC_18": not_assigns(result, Heap_x_h_6, Heap_x_h_6_0, pset_singleton(h))) ->
  forall result3:uint32.
  (integer_of_uint32(result3) = (integer_of_uint32(i_0_0) + 1)) ->
  forall i_0_1:uint32.
  (i_0_1 = result3) ->
  ("JC_69":
  ("JC_68": ("JC_68": (integer_of_uint32(i_0_1) <= integer_of_uint32(len)))))

goal heap_sort_ensures_default_po_5:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall i_0_0:uint32.
  ("JC_69":
  (("JC_67": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_68": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) >= integer_of_uint32(len)) ->
  forall result2:uint32.
  (integer_of_uint32(result2) = 0) ->
  forall i_0_1:uint32.
  (i_0_1 = result2) ->
  ("JC_76": ("JC_74": ("JC_74": (0 <= integer_of_uint32(i_0_1)))))

goal heap_sort_ensures_default_po_6:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall i_0_0:uint32.
  ("JC_69":
  (("JC_67": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_68": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) >= integer_of_uint32(len)) ->
  forall result2:uint32.
  (integer_of_uint32(result2) = 0) ->
  forall i_0_1:uint32.
  (i_0_1 = result2) ->
  ("JC_76":
  ("JC_75": ("JC_75": (integer_of_uint32(i_0_1) <= integer_of_uint32(len)))))

goal heap_sort_ensures_default_po_7:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall i_0_0:uint32.
  ("JC_69":
  (("JC_67": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_68": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) >= integer_of_uint32(len)) ->
  forall result2:uint32.
  (integer_of_uint32(result2) = 0) ->
  forall i_0_1:uint32.
  (i_0_1 = result2) ->
  forall i_0_2:uint32.
  forall int_P_int_M_arr_5_0:(int_P,
  int32) memory.
  ("JC_76":
  (("JC_74": (0 <= integer_of_uint32(i_0_2))) and
   ("JC_75": (integer_of_uint32(i_0_2) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_2) < integer_of_uint32(len)) ->
  forall result3:int32.
  forall int_P_int_M_arr_5_1:(int_P,
  int32) memory.
  (int_P_int_M_arr_5_1 = store(int_P_int_M_arr_5_0, shift(arr,
  integer_of_uint32(i_0_2)), result3)) ->
  forall result4:uint32.
  (integer_of_uint32(result4) = (integer_of_uint32(i_0_2) + 1)) ->
  forall i_0_3:uint32.
  (i_0_3 = result4) ->
  ("JC_76": ("JC_74": ("JC_74": (0 <= integer_of_uint32(i_0_3)))))

goal heap_sort_ensures_default_po_8:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall i_0_0:uint32.
  ("JC_69":
  (("JC_67": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_68": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) >= integer_of_uint32(len)) ->
  forall result2:uint32.
  (integer_of_uint32(result2) = 0) ->
  forall i_0_1:uint32.
  (i_0_1 = result2) ->
  forall i_0_2:uint32.
  forall int_P_int_M_arr_5_0:(int_P,
  int32) memory.
  ("JC_76":
  (("JC_74": (0 <= integer_of_uint32(i_0_2))) and
   ("JC_75": (integer_of_uint32(i_0_2) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_2) < integer_of_uint32(len)) ->
  forall result3:int32.
  forall int_P_int_M_arr_5_1:(int_P,
  int32) memory.
  (int_P_int_M_arr_5_1 = store(int_P_int_M_arr_5_0, shift(arr,
  integer_of_uint32(i_0_2)), result3)) ->
  forall result4:uint32.
  (integer_of_uint32(result4) = (integer_of_uint32(i_0_2) + 1)) ->
  forall i_0_3:uint32.
  (i_0_3 = result4) ->
  ("JC_76":
  ("JC_75": ("JC_75": (integer_of_uint32(i_0_3) <= integer_of_uint32(len)))))

goal heap_sort_ensures_default_po_9:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall i_0_0:uint32.
  ("JC_69":
  (("JC_67": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_68": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) >= integer_of_uint32(len)) ->
  forall result2:uint32.
  (integer_of_uint32(result2) = 0) ->
  forall i_0_1:uint32.
  (i_0_1 = result2) ->
  forall i_0_2:uint32.
  forall int_P_int_M_arr_5_0:(int_P,
  int32) memory.
  ("JC_76":
  (("JC_74": (0 <= integer_of_uint32(i_0_2))) and
   ("JC_75": (integer_of_uint32(i_0_2) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_2) >= integer_of_uint32(len)) ->
  forall i:int.
  forall j:int.
  ((0 <= i) and ((i <= j) and (j < integer_of_uint32(len)))) ->
  ("JC_41": (integer_of_int32(select(int_P_int_M_arr_5_0, shift(arr,
  i))) <= integer_of_int32(select(int_P_int_M_arr_5_0, shift(arr, j)))))

goal heap_sort_safety_po_1:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall i_0_0:uint32.
  ("JC_50": true) ->
  ("JC_48":
  (("JC_46": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_47": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) < integer_of_uint32(len)) ->
  (offset_min(int_P_arr_5_alloc_table, arr) <= integer_of_uint32(i_0_0))

goal heap_sort_safety_po_2:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall i_0_0:uint32.
  ("JC_50": true) ->
  ("JC_48":
  (("JC_46": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_47": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) < integer_of_uint32(len)) ->
  (integer_of_uint32(i_0_0) <= offset_max(int_P_arr_5_alloc_table, arr))

goal heap_sort_safety_po_3:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  forall int_P_int_M_arr_5:(int_P,
  int32) memory.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result:Heap alloc_table.
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall Heap_x_h_6:(Heap,
  int32) memory.
  forall i_0_0:uint32.
  ("JC_50": true) ->
  ("JC_48":
  (("JC_46": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_47": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) < integer_of_uint32(len)) ->
  ((offset_min(int_P_arr_5_alloc_table, arr) <= integer_of_uint32(i_0_0)) and
   (integer_of_uint32(i_0_0) <= offset_max(int_P_arr_5_alloc_table, arr))) ->
  forall result2:int32.
  (result2 = select(int_P_int_M_arr_5, shift(arr,
  integer_of_uint32(i_0_0)))) ->
  forall Heap_x_h_6_0:(Heap,
  int32) memory.
  ("JC_18": not_assigns(result, Heap_x_h_6, Heap_x_h_6_0, pset_singleton(h))) ->
  (0 <= (integer_of_uint32(i_0_0) + 1))

goal heap_sort_safety_po_4:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  forall int_P_int_M_arr_5:(int_P,
  int32) memory.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result:Heap alloc_table.
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall Heap_x_h_6:(Heap,
  int32) memory.
  forall i_0_0:uint32.
  ("JC_50": true) ->
  ("JC_48":
  (("JC_46": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_47": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) < integer_of_uint32(len)) ->
  ((offset_min(int_P_arr_5_alloc_table, arr) <= integer_of_uint32(i_0_0)) and
   (integer_of_uint32(i_0_0) <= offset_max(int_P_arr_5_alloc_table, arr))) ->
  forall result2:int32.
  (result2 = select(int_P_int_M_arr_5, shift(arr,
  integer_of_uint32(i_0_0)))) ->
  forall Heap_x_h_6_0:(Heap,
  int32) memory.
  ("JC_18": not_assigns(result, Heap_x_h_6, Heap_x_h_6_0, pset_singleton(h))) ->
  ((integer_of_uint32(i_0_0) + 1) <= 4294967295)

goal heap_sort_safety_po_5:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  forall int_P_int_M_arr_5:(int_P,
  int32) memory.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result:Heap alloc_table.
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall Heap_x_h_6:(Heap,
  int32) memory.
  forall i_0_0:uint32.
  ("JC_50": true) ->
  ("JC_48":
  (("JC_46": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_47": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) < integer_of_uint32(len)) ->
  ((offset_min(int_P_arr_5_alloc_table, arr) <= integer_of_uint32(i_0_0)) and
   (integer_of_uint32(i_0_0) <= offset_max(int_P_arr_5_alloc_table, arr))) ->
  forall result2:int32.
  (result2 = select(int_P_int_M_arr_5, shift(arr,
  integer_of_uint32(i_0_0)))) ->
  forall Heap_x_h_6_0:(Heap,
  int32) memory.
  ("JC_18": not_assigns(result, Heap_x_h_6, Heap_x_h_6_0, pset_singleton(h))) ->
  ((0 <= (integer_of_uint32(i_0_0) + 1)) and
   ((integer_of_uint32(i_0_0) + 1) <= 4294967295)) ->
  forall result3:uint32.
  (integer_of_uint32(result3) = (integer_of_uint32(i_0_0) + 1)) ->
  forall i_0_1:uint32.
  (i_0_1 = result3) ->
  (0 <= ("JC_55": (integer_of_uint32(len) - integer_of_uint32(i_0_0))))

goal heap_sort_safety_po_6:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  forall int_P_int_M_arr_5:(int_P,
  int32) memory.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result:Heap alloc_table.
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall Heap_x_h_6:(Heap,
  int32) memory.
  forall i_0_0:uint32.
  ("JC_50": true) ->
  ("JC_48":
  (("JC_46": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_47": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) < integer_of_uint32(len)) ->
  ((offset_min(int_P_arr_5_alloc_table, arr) <= integer_of_uint32(i_0_0)) and
   (integer_of_uint32(i_0_0) <= offset_max(int_P_arr_5_alloc_table, arr))) ->
  forall result2:int32.
  (result2 = select(int_P_int_M_arr_5, shift(arr,
  integer_of_uint32(i_0_0)))) ->
  forall Heap_x_h_6_0:(Heap,
  int32) memory.
  ("JC_18": not_assigns(result, Heap_x_h_6, Heap_x_h_6_0, pset_singleton(h))) ->
  ((0 <= (integer_of_uint32(i_0_0) + 1)) and
   ((integer_of_uint32(i_0_0) + 1) <= 4294967295)) ->
  forall result3:uint32.
  (integer_of_uint32(result3) = (integer_of_uint32(i_0_0) + 1)) ->
  forall i_0_1:uint32.
  (i_0_1 = result3) ->
  (("JC_55": (integer_of_uint32(len) - integer_of_uint32(i_0_1))) < ("JC_55":
                                                                    (integer_of_uint32(len) - integer_of_uint32(i_0_0))))

goal heap_sort_safety_po_7:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall i_0_0:uint32.
  ("JC_50": true) ->
  ("JC_48":
  (("JC_46": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_47": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) >= integer_of_uint32(len)) ->
  forall result2:uint32.
  (integer_of_uint32(result2) = 0) ->
  forall i_0_1:uint32.
  (i_0_1 = result2) ->
  forall i_0_2:uint32.
  ("JC_60": true) ->
  ("JC_58":
  (("JC_56": (0 <= integer_of_uint32(i_0_2))) and
   ("JC_57": (integer_of_uint32(i_0_2) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_2) < integer_of_uint32(len)) ->
  (offset_min(int_P_arr_5_alloc_table, arr) <= integer_of_uint32(i_0_2))

goal heap_sort_safety_po_8:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall i_0_0:uint32.
  ("JC_50": true) ->
  ("JC_48":
  (("JC_46": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_47": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) >= integer_of_uint32(len)) ->
  forall result2:uint32.
  (integer_of_uint32(result2) = 0) ->
  forall i_0_1:uint32.
  (i_0_1 = result2) ->
  forall i_0_2:uint32.
  ("JC_60": true) ->
  ("JC_58":
  (("JC_56": (0 <= integer_of_uint32(i_0_2))) and
   ("JC_57": (integer_of_uint32(i_0_2) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_2) < integer_of_uint32(len)) ->
  (integer_of_uint32(i_0_2) <= offset_max(int_P_arr_5_alloc_table, arr))

goal heap_sort_safety_po_9:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall i_0_0:uint32.
  ("JC_50": true) ->
  ("JC_48":
  (("JC_46": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_47": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) >= integer_of_uint32(len)) ->
  forall result2:uint32.
  (integer_of_uint32(result2) = 0) ->
  forall i_0_1:uint32.
  (i_0_1 = result2) ->
  forall i_0_2:uint32.
  forall int_P_int_M_arr_5_0:(int_P,
  int32) memory.
  ("JC_60": true) ->
  ("JC_58":
  (("JC_56": (0 <= integer_of_uint32(i_0_2))) and
   ("JC_57": (integer_of_uint32(i_0_2) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_2) < integer_of_uint32(len)) ->
  forall result3:int32.
  ((offset_min(int_P_arr_5_alloc_table, arr) <= integer_of_uint32(i_0_2)) and
   (integer_of_uint32(i_0_2) <= offset_max(int_P_arr_5_alloc_table, arr))) ->
  forall int_P_int_M_arr_5_1:(int_P,
  int32) memory.
  (int_P_int_M_arr_5_1 = store(int_P_int_M_arr_5_0, shift(arr,
  integer_of_uint32(i_0_2)), result3)) ->
  (0 <= (integer_of_uint32(i_0_2) + 1))

goal heap_sort_safety_po_10:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall i_0_0:uint32.
  ("JC_50": true) ->
  ("JC_48":
  (("JC_46": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_47": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) >= integer_of_uint32(len)) ->
  forall result2:uint32.
  (integer_of_uint32(result2) = 0) ->
  forall i_0_1:uint32.
  (i_0_1 = result2) ->
  forall i_0_2:uint32.
  forall int_P_int_M_arr_5_0:(int_P,
  int32) memory.
  ("JC_60": true) ->
  ("JC_58":
  (("JC_56": (0 <= integer_of_uint32(i_0_2))) and
   ("JC_57": (integer_of_uint32(i_0_2) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_2) < integer_of_uint32(len)) ->
  forall result3:int32.
  ((offset_min(int_P_arr_5_alloc_table, arr) <= integer_of_uint32(i_0_2)) and
   (integer_of_uint32(i_0_2) <= offset_max(int_P_arr_5_alloc_table, arr))) ->
  forall int_P_int_M_arr_5_1:(int_P,
  int32) memory.
  (int_P_int_M_arr_5_1 = store(int_P_int_M_arr_5_0, shift(arr,
  integer_of_uint32(i_0_2)), result3)) ->
  ((integer_of_uint32(i_0_2) + 1) <= 4294967295)

goal heap_sort_safety_po_11:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall i_0_0:uint32.
  ("JC_50": true) ->
  ("JC_48":
  (("JC_46": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_47": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) >= integer_of_uint32(len)) ->
  forall result2:uint32.
  (integer_of_uint32(result2) = 0) ->
  forall i_0_1:uint32.
  (i_0_1 = result2) ->
  forall i_0_2:uint32.
  forall int_P_int_M_arr_5_0:(int_P,
  int32) memory.
  ("JC_60": true) ->
  ("JC_58":
  (("JC_56": (0 <= integer_of_uint32(i_0_2))) and
   ("JC_57": (integer_of_uint32(i_0_2) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_2) < integer_of_uint32(len)) ->
  forall result3:int32.
  ((offset_min(int_P_arr_5_alloc_table, arr) <= integer_of_uint32(i_0_2)) and
   (integer_of_uint32(i_0_2) <= offset_max(int_P_arr_5_alloc_table, arr))) ->
  forall int_P_int_M_arr_5_1:(int_P,
  int32) memory.
  (int_P_int_M_arr_5_1 = store(int_P_int_M_arr_5_0, shift(arr,
  integer_of_uint32(i_0_2)), result3)) ->
  ((0 <= (integer_of_uint32(i_0_2) + 1)) and
   ((integer_of_uint32(i_0_2) + 1) <= 4294967295)) ->
  forall result4:uint32.
  (integer_of_uint32(result4) = (integer_of_uint32(i_0_2) + 1)) ->
  forall i_0_3:uint32.
  (i_0_3 = result4) ->
  (0 <= ("JC_65": (integer_of_uint32(len) - integer_of_uint32(i_0_2))))

goal heap_sort_safety_po_12:
  forall arr:int_P pointer.
  forall len:uint32.
  forall int_P_arr_5_alloc_table:int_P alloc_table.
  ("JC_39":
  (("JC_36": (integer_of_uint32(len) >= 0)) and
   (("JC_37": (offset_min(int_P_arr_5_alloc_table, arr) <= 0)) and
    ("JC_38": (offset_max(int_P_arr_5_alloc_table,
    arr) >= (integer_of_uint32(len) - 1)))))) ->
  forall result0:Heap pointer.
  forall h:Heap pointer.
  (h = result0) ->
  forall result1:uint32.
  (integer_of_uint32(result1) = 0) ->
  forall i_0:uint32.
  (i_0 = result1) ->
  forall i_0_0:uint32.
  ("JC_50": true) ->
  ("JC_48":
  (("JC_46": (0 <= integer_of_uint32(i_0_0))) and
   ("JC_47": (integer_of_uint32(i_0_0) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_0) >= integer_of_uint32(len)) ->
  forall result2:uint32.
  (integer_of_uint32(result2) = 0) ->
  forall i_0_1:uint32.
  (i_0_1 = result2) ->
  forall i_0_2:uint32.
  forall int_P_int_M_arr_5_0:(int_P,
  int32) memory.
  ("JC_60": true) ->
  ("JC_58":
  (("JC_56": (0 <= integer_of_uint32(i_0_2))) and
   ("JC_57": (integer_of_uint32(i_0_2) <= integer_of_uint32(len))))) ->
  (integer_of_uint32(i_0_2) < integer_of_uint32(len)) ->
  forall result3:int32.
  ((offset_min(int_P_arr_5_alloc_table, arr) <= integer_of_uint32(i_0_2)) and
   (integer_of_uint32(i_0_2) <= offset_max(int_P_arr_5_alloc_table, arr))) ->
  forall int_P_int_M_arr_5_1:(int_P,
  int32) memory.
  (int_P_int_M_arr_5_1 = store(int_P_int_M_arr_5_0, shift(arr,
  integer_of_uint32(i_0_2)), result3)) ->
  ((0 <= (integer_of_uint32(i_0_2) + 1)) and
   ((integer_of_uint32(i_0_2) + 1) <= 4294967295)) ->
  forall result4:uint32.
  (integer_of_uint32(result4) = (integer_of_uint32(i_0_2) + 1)) ->
  forall i_0_3:uint32.
  (i_0_3 = result4) ->
  (("JC_65": (integer_of_uint32(len) - integer_of_uint32(i_0_3))) < ("JC_65":
                                                                    (integer_of_uint32(len) - integer_of_uint32(i_0_2))))

goal main_ensures_default_po_1:
  ("JC_84": true) ->
  forall result:(int_P,
  int32) memory.
  forall result0:int_P alloc_table.
  forall result1:int_P pointer.
  forall int_P_arr_0_8_alloc_table:int_P alloc_table.
  forall int_P_arr_0_8_tag_table:int_P tag_table.
  (strict_valid_struct_int_P(result1, 0, (3 - 1),
   int_P_arr_0_8_alloc_table) and
   (alloc_extends(result0, int_P_arr_0_8_alloc_table) and
    (alloc_fresh(result0, result1, 3) and instanceof(int_P_arr_0_8_tag_table,
     result1, int_P_tag)))) ->
  forall arr_0:int_P pointer.
  (arr_0 = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 42) ->
  forall result3:int32.
  (integer_of_int32(result3) = 13) ->
  forall result4:int32.
  (integer_of_int32(result4) = 42) ->
  forall int_P_int_M_arr_0_8:(int_P,
  int32) memory.
  (not_assigns(int_P_arr_0_8_alloc_table, result, int_P_int_M_arr_0_8,
   pset_range(pset_singleton(arr_0), 0, 2)) and
   ((select(int_P_int_M_arr_0_8, shift(arr_0, 0)) = result2) and
    ((select(int_P_int_M_arr_0_8, shift(arr_0, 1)) = result3) and
     (select(int_P_int_M_arr_0_8, shift(arr_0, 2)) = result4)))) ->
  forall result5:uint32.
  (integer_of_uint32(result5) = 3) ->
  forall int_P_int_M_arr_0_8_0:(int_P,
  int32) memory.
  ("JC_42":
  (forall i:int.
    (forall j:int.
      (((0 <= i) and ((i <= j) and (j < integer_of_uint32(result5)))) ->
       (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
       i))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
       j)))))))) ->
  ("JC_103":
  ("JC_101":
  ("JC_101": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
  0))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0, 1)))))))

goal main_ensures_default_po_2:
  ("JC_84": true) ->
  forall result:(int_P,
  int32) memory.
  forall result0:int_P alloc_table.
  forall result1:int_P pointer.
  forall int_P_arr_0_8_alloc_table:int_P alloc_table.
  forall int_P_arr_0_8_tag_table:int_P tag_table.
  (strict_valid_struct_int_P(result1, 0, (3 - 1),
   int_P_arr_0_8_alloc_table) and
   (alloc_extends(result0, int_P_arr_0_8_alloc_table) and
    (alloc_fresh(result0, result1, 3) and instanceof(int_P_arr_0_8_tag_table,
     result1, int_P_tag)))) ->
  forall arr_0:int_P pointer.
  (arr_0 = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 42) ->
  forall result3:int32.
  (integer_of_int32(result3) = 13) ->
  forall result4:int32.
  (integer_of_int32(result4) = 42) ->
  forall int_P_int_M_arr_0_8:(int_P,
  int32) memory.
  (not_assigns(int_P_arr_0_8_alloc_table, result, int_P_int_M_arr_0_8,
   pset_range(pset_singleton(arr_0), 0, 2)) and
   ((select(int_P_int_M_arr_0_8, shift(arr_0, 0)) = result2) and
    ((select(int_P_int_M_arr_0_8, shift(arr_0, 1)) = result3) and
     (select(int_P_int_M_arr_0_8, shift(arr_0, 2)) = result4)))) ->
  forall result5:uint32.
  (integer_of_uint32(result5) = 3) ->
  forall int_P_int_M_arr_0_8_0:(int_P,
  int32) memory.
  ("JC_42":
  (forall i:int.
    (forall j:int.
      (((0 <= i) and ((i <= j) and (j < integer_of_uint32(result5)))) ->
       (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
       i))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
       j)))))))) ->
  ("JC_103":
  ("JC_102":
  ("JC_102": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
  1))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0, 2)))))))

goal main_ensures_default_po_3:
  ("JC_84": true) ->
  forall result:(int_P,
  int32) memory.
  forall result0:int_P alloc_table.
  forall result1:int_P pointer.
  forall int_P_arr_0_8_alloc_table:int_P alloc_table.
  forall int_P_arr_0_8_tag_table:int_P tag_table.
  (strict_valid_struct_int_P(result1, 0, (3 - 1),
   int_P_arr_0_8_alloc_table) and
   (alloc_extends(result0, int_P_arr_0_8_alloc_table) and
    (alloc_fresh(result0, result1, 3) and instanceof(int_P_arr_0_8_tag_table,
     result1, int_P_tag)))) ->
  forall arr_0:int_P pointer.
  (arr_0 = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 42) ->
  forall result3:int32.
  (integer_of_int32(result3) = 13) ->
  forall result4:int32.
  (integer_of_int32(result4) = 42) ->
  forall int_P_int_M_arr_0_8:(int_P,
  int32) memory.
  (not_assigns(int_P_arr_0_8_alloc_table, result, int_P_int_M_arr_0_8,
   pset_range(pset_singleton(arr_0), 0, 2)) and
   ((select(int_P_int_M_arr_0_8, shift(arr_0, 0)) = result2) and
    ((select(int_P_int_M_arr_0_8, shift(arr_0, 1)) = result3) and
     (select(int_P_int_M_arr_0_8, shift(arr_0, 2)) = result4)))) ->
  forall result5:uint32.
  (integer_of_uint32(result5) = 3) ->
  forall int_P_int_M_arr_0_8_0:(int_P,
  int32) memory.
  ("JC_42":
  (forall i:int.
    (forall j:int.
      (((0 <= i) and ((i <= j) and (j < integer_of_uint32(result5)))) ->
       (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
       i))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
       j)))))))) ->
  ("JC_103":
  (("JC_101": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
   0))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0, 1))))) and
   ("JC_102": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
   1))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0, 2))))))) ->
  ("JC_107":
  ("JC_104":
  ("JC_104": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
  0))) = 13))))

goal main_ensures_default_po_4:
  ("JC_84": true) ->
  forall result:(int_P,
  int32) memory.
  forall result0:int_P alloc_table.
  forall result1:int_P pointer.
  forall int_P_arr_0_8_alloc_table:int_P alloc_table.
  forall int_P_arr_0_8_tag_table:int_P tag_table.
  (strict_valid_struct_int_P(result1, 0, (3 - 1),
   int_P_arr_0_8_alloc_table) and
   (alloc_extends(result0, int_P_arr_0_8_alloc_table) and
    (alloc_fresh(result0, result1, 3) and instanceof(int_P_arr_0_8_tag_table,
     result1, int_P_tag)))) ->
  forall arr_0:int_P pointer.
  (arr_0 = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 42) ->
  forall result3:int32.
  (integer_of_int32(result3) = 13) ->
  forall result4:int32.
  (integer_of_int32(result4) = 42) ->
  forall int_P_int_M_arr_0_8:(int_P,
  int32) memory.
  (not_assigns(int_P_arr_0_8_alloc_table, result, int_P_int_M_arr_0_8,
   pset_range(pset_singleton(arr_0), 0, 2)) and
   ((select(int_P_int_M_arr_0_8, shift(arr_0, 0)) = result2) and
    ((select(int_P_int_M_arr_0_8, shift(arr_0, 1)) = result3) and
     (select(int_P_int_M_arr_0_8, shift(arr_0, 2)) = result4)))) ->
  forall result5:uint32.
  (integer_of_uint32(result5) = 3) ->
  forall int_P_int_M_arr_0_8_0:(int_P,
  int32) memory.
  ("JC_42":
  (forall i:int.
    (forall j:int.
      (((0 <= i) and ((i <= j) and (j < integer_of_uint32(result5)))) ->
       (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
       i))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
       j)))))))) ->
  ("JC_103":
  (("JC_101": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
   0))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0, 1))))) and
   ("JC_102": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
   1))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0, 2))))))) ->
  ("JC_107":
  ("JC_105":
  ("JC_105": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
  1))) = 42))))

goal main_ensures_default_po_5:
  ("JC_84": true) ->
  forall result:(int_P,
  int32) memory.
  forall result0:int_P alloc_table.
  forall result1:int_P pointer.
  forall int_P_arr_0_8_alloc_table:int_P alloc_table.
  forall int_P_arr_0_8_tag_table:int_P tag_table.
  (strict_valid_struct_int_P(result1, 0, (3 - 1),
   int_P_arr_0_8_alloc_table) and
   (alloc_extends(result0, int_P_arr_0_8_alloc_table) and
    (alloc_fresh(result0, result1, 3) and instanceof(int_P_arr_0_8_tag_table,
     result1, int_P_tag)))) ->
  forall arr_0:int_P pointer.
  (arr_0 = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 42) ->
  forall result3:int32.
  (integer_of_int32(result3) = 13) ->
  forall result4:int32.
  (integer_of_int32(result4) = 42) ->
  forall int_P_int_M_arr_0_8:(int_P,
  int32) memory.
  (not_assigns(int_P_arr_0_8_alloc_table, result, int_P_int_M_arr_0_8,
   pset_range(pset_singleton(arr_0), 0, 2)) and
   ((select(int_P_int_M_arr_0_8, shift(arr_0, 0)) = result2) and
    ((select(int_P_int_M_arr_0_8, shift(arr_0, 1)) = result3) and
     (select(int_P_int_M_arr_0_8, shift(arr_0, 2)) = result4)))) ->
  forall result5:uint32.
  (integer_of_uint32(result5) = 3) ->
  forall int_P_int_M_arr_0_8_0:(int_P,
  int32) memory.
  ("JC_42":
  (forall i:int.
    (forall j:int.
      (((0 <= i) and ((i <= j) and (j < integer_of_uint32(result5)))) ->
       (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
       i))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
       j)))))))) ->
  ("JC_103":
  (("JC_101": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
   0))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0, 1))))) and
   ("JC_102": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
   1))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0, 2))))))) ->
  ("JC_107":
  ("JC_106":
  ("JC_106": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
  2))) = 42))))

goal main_safety_po_1:
  ("JC_84": true) ->
  (3 >= 0)

goal main_safety_po_2:
  ("JC_84": true) ->
  forall result0:int_P alloc_table.
  (3 >= 0) ->
  forall result1:int_P pointer.
  forall int_P_arr_0_8_alloc_table:int_P alloc_table.
  forall int_P_arr_0_8_tag_table:int_P tag_table.
  (strict_valid_struct_int_P(result1, 0, (3 - 1),
   int_P_arr_0_8_alloc_table) and
   (alloc_extends(result0, int_P_arr_0_8_alloc_table) and
    (alloc_fresh(result0, result1, 3) and instanceof(int_P_arr_0_8_tag_table,
     result1, int_P_tag)))) ->
  (offset_max(int_P_arr_0_8_alloc_table, result1) >= 2)

goal main_safety_po_3:
  ("JC_84": true) ->
  forall result:(int_P,
  int32) memory.
  forall result0:int_P alloc_table.
  (3 >= 0) ->
  forall result1:int_P pointer.
  forall int_P_arr_0_8_alloc_table:int_P alloc_table.
  forall int_P_arr_0_8_tag_table:int_P tag_table.
  (strict_valid_struct_int_P(result1, 0, (3 - 1),
   int_P_arr_0_8_alloc_table) and
   (alloc_extends(result0, int_P_arr_0_8_alloc_table) and
    (alloc_fresh(result0, result1, 3) and instanceof(int_P_arr_0_8_tag_table,
     result1, int_P_tag)))) ->
  (offset_max(int_P_arr_0_8_alloc_table, result1) >= 2) ->
  forall arr_0:int_P pointer.
  (arr_0 = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 42) ->
  forall result3:int32.
  (integer_of_int32(result3) = 13) ->
  forall result4:int32.
  (integer_of_int32(result4) = 42) ->
  forall int_P_int_M_arr_0_8:(int_P,
  int32) memory.
  (not_assigns(int_P_arr_0_8_alloc_table, result, int_P_int_M_arr_0_8,
   pset_range(pset_singleton(arr_0), 0, 2)) and
   ((select(int_P_int_M_arr_0_8, shift(arr_0, 0)) = result2) and
    ((select(int_P_int_M_arr_0_8, shift(arr_0, 1)) = result3) and
     (select(int_P_int_M_arr_0_8, shift(arr_0, 2)) = result4)))) ->
  forall result5:uint32.
  (integer_of_uint32(result5) = 3) ->
  ("JC_34": ("JC_31": ("JC_31": (integer_of_uint32(result5) >= 0))))

goal main_safety_po_4:
  ("JC_84": true) ->
  forall result:(int_P,
  int32) memory.
  forall result0:int_P alloc_table.
  (3 >= 0) ->
  forall result1:int_P pointer.
  forall int_P_arr_0_8_alloc_table:int_P alloc_table.
  forall int_P_arr_0_8_tag_table:int_P tag_table.
  (strict_valid_struct_int_P(result1, 0, (3 - 1),
   int_P_arr_0_8_alloc_table) and
   (alloc_extends(result0, int_P_arr_0_8_alloc_table) and
    (alloc_fresh(result0, result1, 3) and instanceof(int_P_arr_0_8_tag_table,
     result1, int_P_tag)))) ->
  (offset_max(int_P_arr_0_8_alloc_table, result1) >= 2) ->
  forall arr_0:int_P pointer.
  (arr_0 = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 42) ->
  forall result3:int32.
  (integer_of_int32(result3) = 13) ->
  forall result4:int32.
  (integer_of_int32(result4) = 42) ->
  forall int_P_int_M_arr_0_8:(int_P,
  int32) memory.
  (not_assigns(int_P_arr_0_8_alloc_table, result, int_P_int_M_arr_0_8,
   pset_range(pset_singleton(arr_0), 0, 2)) and
   ((select(int_P_int_M_arr_0_8, shift(arr_0, 0)) = result2) and
    ((select(int_P_int_M_arr_0_8, shift(arr_0, 1)) = result3) and
     (select(int_P_int_M_arr_0_8, shift(arr_0, 2)) = result4)))) ->
  forall result5:uint32.
  (integer_of_uint32(result5) = 3) ->
  ("JC_34":
  ("JC_32": ("JC_32": (offset_min(int_P_arr_0_8_alloc_table, arr_0) <= 0))))

goal main_safety_po_5:
  ("JC_84": true) ->
  forall result:(int_P,
  int32) memory.
  forall result0:int_P alloc_table.
  (3 >= 0) ->
  forall result1:int_P pointer.
  forall int_P_arr_0_8_alloc_table:int_P alloc_table.
  forall int_P_arr_0_8_tag_table:int_P tag_table.
  (strict_valid_struct_int_P(result1, 0, (3 - 1),
   int_P_arr_0_8_alloc_table) and
   (alloc_extends(result0, int_P_arr_0_8_alloc_table) and
    (alloc_fresh(result0, result1, 3) and instanceof(int_P_arr_0_8_tag_table,
     result1, int_P_tag)))) ->
  (offset_max(int_P_arr_0_8_alloc_table, result1) >= 2) ->
  forall arr_0:int_P pointer.
  (arr_0 = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 42) ->
  forall result3:int32.
  (integer_of_int32(result3) = 13) ->
  forall result4:int32.
  (integer_of_int32(result4) = 42) ->
  forall int_P_int_M_arr_0_8:(int_P,
  int32) memory.
  (not_assigns(int_P_arr_0_8_alloc_table, result, int_P_int_M_arr_0_8,
   pset_range(pset_singleton(arr_0), 0, 2)) and
   ((select(int_P_int_M_arr_0_8, shift(arr_0, 0)) = result2) and
    ((select(int_P_int_M_arr_0_8, shift(arr_0, 1)) = result3) and
     (select(int_P_int_M_arr_0_8, shift(arr_0, 2)) = result4)))) ->
  forall result5:uint32.
  (integer_of_uint32(result5) = 3) ->
  ("JC_34":
  ("JC_33":
  ("JC_33": (offset_max(int_P_arr_0_8_alloc_table,
  arr_0) >= (integer_of_uint32(result5) - 1)))))

goal main_safety_po_6:
  ("JC_84": true) ->
  forall result:(int_P,
  int32) memory.
  forall result0:int_P alloc_table.
  (3 >= 0) ->
  forall result1:int_P pointer.
  forall int_P_arr_0_8_alloc_table:int_P alloc_table.
  forall int_P_arr_0_8_tag_table:int_P tag_table.
  (strict_valid_struct_int_P(result1, 0, (3 - 1),
   int_P_arr_0_8_alloc_table) and
   (alloc_extends(result0, int_P_arr_0_8_alloc_table) and
    (alloc_fresh(result0, result1, 3) and instanceof(int_P_arr_0_8_tag_table,
     result1, int_P_tag)))) ->
  (offset_max(int_P_arr_0_8_alloc_table, result1) >= 2) ->
  forall arr_0:int_P pointer.
  (arr_0 = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 42) ->
  forall result3:int32.
  (integer_of_int32(result3) = 13) ->
  forall result4:int32.
  (integer_of_int32(result4) = 42) ->
  forall int_P_int_M_arr_0_8:(int_P,
  int32) memory.
  (not_assigns(int_P_arr_0_8_alloc_table, result, int_P_int_M_arr_0_8,
   pset_range(pset_singleton(arr_0), 0, 2)) and
   ((select(int_P_int_M_arr_0_8, shift(arr_0, 0)) = result2) and
    ((select(int_P_int_M_arr_0_8, shift(arr_0, 1)) = result3) and
     (select(int_P_int_M_arr_0_8, shift(arr_0, 2)) = result4)))) ->
  forall result5:uint32.
  (integer_of_uint32(result5) = 3) ->
  ("JC_34":
  (("JC_31": (integer_of_uint32(result5) >= 0)) and
   (("JC_32": (offset_min(int_P_arr_0_8_alloc_table, arr_0) <= 0)) and
    ("JC_33": (offset_max(int_P_arr_0_8_alloc_table,
    arr_0) >= (integer_of_uint32(result5) - 1)))))) ->
  forall int_P_int_M_arr_0_8_0:(int_P,
  int32) memory.
  ("JC_42":
  (forall i:int.
    (forall j:int.
      (((0 <= i) and ((i <= j) and (j < integer_of_uint32(result5)))) ->
       (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
       i))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
       j)))))))) ->
  ("JC_94":
  (("JC_92": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
   0))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0, 1))))) and
   ("JC_93": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
   1))) <= integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0, 2))))))) ->
  ("JC_98":
  (("JC_95": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
   0))) = 13)) and
   (("JC_96": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
    1))) = 42)) and
    ("JC_97": (integer_of_int32(select(int_P_int_M_arr_0_8_0, shift(arr_0,
    2))) = 42))))) ->
  ((arr_0 = null) or (offset_max(int_P_arr_0_8_alloc_table, arr_0) >= 0))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/heap_sort_why.why         : ........?..............###...... (28/0/1/3/0)
total   :  32
valid   :  28 ( 88%)
invalid :   0 (  0%)
unknown :   1 (  3%)
timeout :   3 (  9%)
failure :   0 (  0%)
