rm -f dassault_1.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only dassault_1.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs dassault_1.cloc dassault_1.jc
Normalized expression:
(((\offset_min(y)) <= 0) && ((\offset_max(y)) >= 0))

Normalized expression:
(((\offset_min(x)) <= 0) && ((\offset_max(x)) >= 0))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let int32 __retres in
   {
   { (C_9: { (__retres = (C_8: (TODO cast))); (return __retres) }) }
   })
}

Normalized expression:
(C_10: (\result == ((x.a.d.b + 0).c + (y.b + 1).c)))

Normalized expression:
true

Generating Why function f
cat why/dassault_1.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type las

type las1

type las2

type las3

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic x:  -> las pointer

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic y:  -> las2 pointer

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic las1_tag:  -> las1 tag_id

axiom las1_int : (int_of_tag(las1_tag) = (1))

axiom las1_parenttag_bottom : parenttag(las1_tag, bottom_tag)

axiom las1_tags :
 (forall x:las1 pointer.
  (forall las1_tag_table:las1 tag_table.
   instanceof(las1_tag_table, x, las1_tag)))

logic las2_tag:  -> las2 tag_id

axiom las2_int : (int_of_tag(las2_tag) = (1))

axiom las2_parenttag_bottom : parenttag(las2_tag, bottom_tag)

axiom las2_tags :
 (forall x:las2 pointer.
  (forall las2_tag_table:las2 tag_table.
   instanceof(las2_tag_table, x, las2_tag)))

logic las3_tag:  -> las3 tag_id

axiom las3_int : (int_of_tag(las3_tag) = (1))

axiom las3_parenttag_bottom : parenttag(las3_tag, bottom_tag)

axiom las3_tags :
 (forall x:las3 pointer.
  (forall las3_tag_table:las3 tag_table.
   instanceof(las3_tag_table, x, las3_tag)))

logic las_tag:  -> las tag_id

axiom las_int : (int_of_tag(las_tag) = (1))

axiom las_parenttag_bottom : parenttag(las_tag, bottom_tag)

axiom las_tags :
 (forall x:las pointer.
  (forall las_tag_table:las tag_table. instanceof(las_tag_table, x, las_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_las3(p:las3 pointer,
 a:int,
 b:int,
 las3_alloc_table:las3 alloc_table) =
 ((offset_min(las3_alloc_table, p) = a)
 and (offset_max(las3_alloc_table, p) = b))

predicate valid_struct_las2(p:las2 pointer,
 a:int,
 b:int,
 las2_alloc_table:las2 alloc_table,
 las3_alloc_table:las3 alloc_table,
 las2_b:(las2,
 las3 pointer) memory) =
 ((offset_min(las2_alloc_table, p) = a)
 and ((offset_max(las2_alloc_table, p) = b)
     and valid_struct_las3(select(las2_b, p), (0), (2), las3_alloc_table)))

predicate valid_struct_las1(p:las1 pointer,
 a:int,
 b:int,
 las1_alloc_table:las1 alloc_table,
 las2_alloc_table:las2 alloc_table,
 las3_alloc_table:las3 alloc_table,
 las1_d:(las1,
 las2 pointer) memory,
 las2_b:(las2,
 las3 pointer) memory) =
 ((offset_min(las1_alloc_table, p) = a)
 and ((offset_max(las1_alloc_table, p) = b)
     and valid_struct_las2(select(las1_d, p), (0), (0), las2_alloc_table,
         las3_alloc_table, las2_b)))

predicate valid_struct_las(p:las pointer,
 a:int,
 b:int,
 las_alloc_table:las alloc_table,
 las1_alloc_table:las1 alloc_table,
 las2_alloc_table:las2 alloc_table,
 las3_alloc_table:las3 alloc_table,
 las1_d:(las1,
 las2 pointer) memory,
 las2_b:(las2,
 las3 pointer) memory,
 las_a:(las,
 las1 pointer) memory) =
 ((offset_min(las_alloc_table, p) = a)
 and ((offset_max(las_alloc_table, p) = b)
     and valid_struct_las1(select(las_a, p), (0), (0), las1_alloc_table,
         las2_alloc_table, las3_alloc_table, las1_d, las2_b)))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_las(p:las pointer,
 a:int,
 b:int,
 las_alloc_table:las alloc_table) =
 ((offset_min(las_alloc_table, p) = a)
 and (offset_max(las_alloc_table, p) = b))

predicate valid_variant_las1(p:las1 pointer,
 a:int,
 b:int,
 las1_alloc_table:las1 alloc_table) =
 ((offset_min(las1_alloc_table, p) = a)
 and (offset_max(las1_alloc_table, p) = b))

predicate valid_variant_las2(p:las2 pointer,
 a:int,
 b:int,
 las2_alloc_table:las2 alloc_table) =
 ((offset_min(las2_alloc_table, p) = a)
 and (offset_max(las2_alloc_table, p) = b))

predicate valid_variant_las3(p:las3 pointer,
 a:int,
 b:int,
 las3_alloc_table:las3 alloc_table) =
 ((offset_min(las3_alloc_table, p) = a)
 and (offset_max(las3_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_x(x:las pointer,
 las_alloc_table:las alloc_table,
 y:las2 pointer,
 x:las pointer) =
 (le_int(offset_min(las_alloc_table, x), (0))
 and ge_int(offset_max(las_alloc_table, x), (0)))

predicate valid_y(y:las2 pointer,
 las2_alloc_table:las2 alloc_table,
 y:las2 pointer,
 x:las pointer) =
 (le_int(offset_min(las2_alloc_table, y), (0))
 and ge_int(offset_max(las2_alloc_table, y), (0)))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter las_alloc_table : las alloc_table ref

parameter las1_alloc_table : las1 alloc_table ref

parameter las2_alloc_table : las2 alloc_table ref

parameter las3_alloc_table : las3 alloc_table ref

parameter las1_d : (las1, las2 pointer) memory ref

parameter las2_b : (las2, las3 pointer) memory ref

parameter las_a : (las, las1 pointer) memory ref

parameter las_tag_table : las tag_table ref

parameter alloc_las :
 n:int ->
  las_alloc_table:las alloc_table ref ->
   las_alloc_table:las alloc_table ref ->
    las1_alloc_table:las1 alloc_table ref ->
     las2_alloc_table:las2 alloc_table ref ->
      las3_alloc_table:las3 alloc_table ref ->
       las1_d:(las1,
        las2 pointer) memory ref ->
        las2_b:(las2,
         las3 pointer) memory ref ->
         las_a:(las,
          las1 pointer) memory ref ->
          { ge_int(n, (0))} las pointer
          reads las1_alloc_table,las1_d,las2_alloc_table,las2_b,las3_alloc_table,las_a,las_alloc_table
          writes las_alloc_table,las_tag_table
          { (valid_struct_las(result, (0), sub_int(n, (1)), las_alloc_table,
             las1_alloc_table, las2_alloc_table, las3_alloc_table, las1_d,
             las2_b, las_a)
            and (instanceof(las_tag_table, result, las_tag)
                and (alloc_extends(las_alloc_table@, las_alloc_table)
                    and alloc_extern(las_alloc_table@, result)))) }

parameter las1_tag_table : las1 tag_table ref

parameter alloc_las1 :
 n:int ->
  las1_alloc_table:las1 alloc_table ref ->
   las1_alloc_table:las1 alloc_table ref ->
    las2_alloc_table:las2 alloc_table ref ->
     las3_alloc_table:las3 alloc_table ref ->
      las1_d:(las1,
       las2 pointer) memory ref ->
       las2_b:(las2,
        las3 pointer) memory ref ->
        { ge_int(n, (0))} las1 pointer
        reads las1_alloc_table,las1_d,las2_alloc_table,las2_b,las3_alloc_table
        writes las1_alloc_table,las1_tag_table
        { (valid_struct_las1(result, (0), sub_int(n, (1)), las1_alloc_table,
           las2_alloc_table, las3_alloc_table, las1_d, las2_b)
          and (instanceof(las1_tag_table, result, las1_tag)
              and (alloc_extends(las1_alloc_table@, las1_alloc_table)
                  and alloc_extern(las1_alloc_table@, result)))) }

parameter las2_tag_table : las2 tag_table ref

parameter alloc_las2 :
 n:int ->
  las2_alloc_table:las2 alloc_table ref ->
   las2_alloc_table:las2 alloc_table ref ->
    las3_alloc_table:las3 alloc_table ref ->
     las2_b:(las2,
      las3 pointer) memory ref ->
      { ge_int(n, (0))} las2 pointer
      reads las2_alloc_table,las2_b,las3_alloc_table
      writes las2_alloc_table,las2_tag_table
      { (valid_struct_las2(result, (0), sub_int(n, (1)), las2_alloc_table,
         las3_alloc_table, las2_b)
        and (instanceof(las2_tag_table, result, las2_tag)
            and (alloc_extends(las2_alloc_table@, las2_alloc_table)
                and alloc_extern(las2_alloc_table@, result)))) }

parameter las3_tag_table : las3 tag_table ref

parameter alloc_las3 :
 n:int ->
  las3_alloc_table:las3 alloc_table ref ->
   las3_alloc_table:las3 alloc_table ref ->
    { ge_int(n, (0))} las3 pointer reads las3_alloc_table
    writes las3_alloc_table,las3_tag_table
    { (valid_struct_las3(result, (0), sub_int(n, (1)), las3_alloc_table)
      and (instanceof(las3_tag_table, result, las3_tag)
          and (alloc_extends(las3_alloc_table@, las3_alloc_table)
              and alloc_extern(las3_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_las :
 tt:unit ->
  las_alloc_table:las alloc_table ref ->
   las_alloc_table:las alloc_table ref ->
    las1_alloc_table:las1 alloc_table ref ->
     las2_alloc_table:las2 alloc_table ref ->
      las3_alloc_table:las3 alloc_table ref ->
       las1_d:(las1,
        las2 pointer) memory ref ->
        las2_b:(las2,
         las3 pointer) memory ref ->
         las_a:(las,
          las1 pointer) memory ref ->
          { } las pointer
          reads las1_alloc_table,las1_d,las2_alloc_table,las2_b,las3_alloc_table,las_a,las_alloc_table
          writes las_alloc_table,las_tag_table
          { (valid_struct_las(result, (0), (0), las_alloc_table,
             las1_alloc_table, las2_alloc_table, las3_alloc_table, las1_d,
             las2_b, las_a)
            and (instanceof(las_tag_table, result, las_tag)
                and (alloc_extends(las_alloc_table@, las_alloc_table)
                    and alloc_extern(las_alloc_table@, result)))) }

parameter alloc_one_las1 :
 tt:unit ->
  las1_alloc_table:las1 alloc_table ref ->
   las1_alloc_table:las1 alloc_table ref ->
    las2_alloc_table:las2 alloc_table ref ->
     las3_alloc_table:las3 alloc_table ref ->
      las1_d:(las1,
       las2 pointer) memory ref ->
       las2_b:(las2,
        las3 pointer) memory ref ->
        { } las1 pointer
        reads las1_alloc_table,las1_d,las2_alloc_table,las2_b,las3_alloc_table
        writes las1_alloc_table,las1_tag_table
        { (valid_struct_las1(result, (0), (0), las1_alloc_table,
           las2_alloc_table, las3_alloc_table, las1_d, las2_b)
          and (instanceof(las1_tag_table, result, las1_tag)
              and (alloc_extends(las1_alloc_table@, las1_alloc_table)
                  and alloc_extern(las1_alloc_table@, result)))) }

parameter alloc_one_las2 :
 tt:unit ->
  las2_alloc_table:las2 alloc_table ref ->
   las2_alloc_table:las2 alloc_table ref ->
    las3_alloc_table:las3 alloc_table ref ->
     las2_b:(las2,
      las3 pointer) memory ref ->
      { } las2 pointer reads las2_alloc_table,las2_b,las3_alloc_table
      writes las2_alloc_table,las2_tag_table
      { (valid_struct_las2(result, (0), (0), las2_alloc_table,
         las3_alloc_table, las2_b)
        and (instanceof(las2_tag_table, result, las2_tag)
            and (alloc_extends(las2_alloc_table@, las2_alloc_table)
                and alloc_extern(las2_alloc_table@, result)))) }

parameter alloc_one_las3 :
 tt:unit ->
  las3_alloc_table:las3 alloc_table ref ->
   las3_alloc_table:las3 alloc_table ref ->
    { } las3 pointer reads las3_alloc_table
    writes las3_alloc_table,las3_tag_table
    { (valid_struct_las3(result, (0), (0), las3_alloc_table)
      and (instanceof(las3_tag_table, result, las3_tag)
          and (alloc_extends(las3_alloc_table@, las3_alloc_table)
              and alloc_extern(las3_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter las3_c : (las3, int32) memory ref

parameter f :
 tt:unit ->
  { (JC_1:
    (valid_y(y, las2_alloc_table, y, x)
    and valid_x(x, las_alloc_table, y, x)))}
  int32
  reads las1_alloc_table,las1_d,las2_alloc_table,las2_b,las3_alloc_table,las3_c,las_a,las_alloc_table
  { ((JC_3:
     (valid_y(y, las2_alloc_table, y, x)
     and valid_x(x, las_alloc_table, y, x)))
    and ((true = true) ->
         (JC_4:
         ((C_10:
          eq_int(integer_of_int32(result),
          add_int(integer_of_int32(select(las3_c,
                                   shift(select(las2_b,
                                         select(las1_d, select(las_a, x))),
                                   (0)))),
          integer_of_int32(select(las3_c, shift(select(las2_b, y), (1)))))))
         and (valid_y(y, las2_alloc_table, y, x)
             and valid_x(x, las_alloc_table, y, x)))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f_ensures_default =
 fun (tt : unit) ->
  { (JC_1:
    (valid_y(y, las2_alloc_table, y, x)
    and valid_x(x, las_alloc_table, y, x))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (C_9:
     begin
       (let jessie_2 = (__retres := (safe_int32_of_integer_ (C_7:
                                                            ((add_int 
                                                              (integer_of_int32 
                                                               ((safe_acc_ !las3_c) 
                                                                ((shift 
                                                                  ((safe_acc_ !las2_b) 
                                                                   ((safe_acc_ !las1_d) 
                                                                    ((safe_acc_ !las_a) x)))) (0))))) 
                                                             (integer_of_int32 
                                                              ((safe_acc_ !las3_c) 
                                                               ((shift 
                                                                 ((safe_acc_ !las2_b) y)) (1)))))))) in
       void);
      (jessie_returned_value := !__retres);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_4:
     ((C_10:
      eq_int(integer_of_int32(result),
      add_int(integer_of_int32(select(las3_c,
                               shift(select(las2_b,
                                     select(las1_d, select(las_a, x))),
                               (0)))),
      integer_of_int32(select(las3_c, shift(select(las2_b, y), (1)))))))
     and (valid_y(y, las2_alloc_table, y, x)
         and valid_x(x, las_alloc_table, y, x))))) }

let f_safety =
 fun (tt : unit) ->
  { (JC_1:
    (valid_y(y, las2_alloc_table, y, x)
    and valid_x(x, las_alloc_table, y, x))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (C_9:
     begin
       (let jessie_1 = (__retres := (C_8:
                                    (int32_of_integer_ (C_7:
                                                       ((add_int (integer_of_int32 
                                                                  ((safe_acc_ !las3_c) 
                                                                   ((shift 
                                                                    ((safe_acc_ !las2_b) 
                                                                    ((safe_acc_ !las1_d) 
                                                                    ((safe_acc_ !las_a) x)))) (0))))) 
                                                        (integer_of_int32 
                                                         ((safe_acc_ !las3_c) 
                                                          ((shift ((safe_acc_ !las2_b) y)) (1))))))))) in
       void);
      (jessie_returned_value := !__retres);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_3:
    (valid_y(y, las2_alloc_table, y, x)
    and valid_x(x, las_alloc_table, y, x))) }


