rm -f struct3.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only struct3.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs struct3.cloc struct3.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let S[0] a in
   {
   (let int32 __retres in
      {
      {
        (C_2:
           {
           (a = (C_1: (TODO alloc)));
             (C_4:
                {
                ((C_3: a.x) = 1);
                  (C_6:
                     {
                     ((C_5: a.y) = 2);
                       (C_8:
                          {
                          (__retres = (C_7: a.y));
                            {
                            (C_9: { (TODO free); (return __retres) })
                            }
                          })
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
(C_10: (\result == 2))

Normalized expression:
true

Normalized expression:
{
(let U[0] u in
   {
   (let int32 __retres in
      {
      {
        (C_12:
           {
           (u = (C_11: (TODO alloc)));
             (C_14:
                {
                ((C_13: u.z) = 1);
                  (C_17:
                     {
                     ((C_16: (C_15: u.s).x) = 2);
                       (C_20:
                          {
                          ((C_19: (C_18: u.s).y) = 3);
                            (C_23:
                               {
                               (__retres = (C_22: (C_21: u.s).y));
                                 {
                                 (C_24: { (TODO free); (return __retres) })
                                 }
                               })
                          })
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
(C_25: (\result == 3))

Normalized expression:
true

Generating Why function f
Generating Why function g
cat why/struct3.why
type S

type U

type _bool

type char_P

type int16

type int32

type int64

type int8

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic U_tag:  -> U tag_id

axiom U_int : (int_of_tag(U_tag) = (1))

axiom U_parenttag_bottom : parenttag(U_tag, bottom_tag)

axiom U_tags :
 (forall x:U pointer.
  (forall U_tag_table:U tag_table. instanceof(U_tag_table, x, U_tag)))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_struct_U(p:U pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table,
 U_alloc_table:U alloc_table,
 U_s:(U,
 S pointer) memory) =
 ((offset_min(U_alloc_table, p) = a)
 and ((offset_max(U_alloc_table, p) = b)
     and valid_struct_S(select(U_s, p), (0), (0), S_alloc_table)))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_variant_U(p:U pointer,
 a:int,
 b:int,
 U_alloc_table:U alloc_table) =
 ((offset_min(U_alloc_table, p) = a) and (offset_max(U_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter S_alloc_table : S alloc_table ref

parameter S_tag_table : S tag_table ref

parameter S_x : (S, int32) memory ref

parameter S_y : (S, int32) memory ref

parameter U_alloc_table : U alloc_table ref

parameter U_s : (U, S pointer) memory ref

parameter U_tag_table : U tag_table ref

parameter U_z : (U, int32) memory ref

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter alloc_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    { ge_int(n, (0))} S pointer reads S_alloc_table
    writes S_alloc_table,S_tag_table
    { (valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table)
      and (instanceof(S_tag_table, result, S_tag)
          and (alloc_extends(S_alloc_table@, S_alloc_table)
              and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_U :
 n:int ->
  U_alloc_table:U alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    U_alloc_table:U alloc_table ref ->
     U_s:(U,
      S pointer) memory ref ->
      { ge_int(n, (0))} U pointer reads S_alloc_table,U_alloc_table,U_s
      writes U_alloc_table,U_tag_table
      { (valid_struct_U(result, (0), sub_int(n, (1)), S_alloc_table,
         U_alloc_table, U_s)
        and (instanceof(U_tag_table, result, U_tag)
            and (alloc_extends(U_alloc_table@, U_alloc_table)
                and alloc_extern(U_alloc_table@, result)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_S :
 tt:unit ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    { } S pointer reads S_alloc_table writes S_alloc_table,S_tag_table
    { (valid_struct_S(result, (0), (0), S_alloc_table)
      and (instanceof(S_tag_table, result, S_tag)
          and (alloc_extends(S_alloc_table@, S_alloc_table)
              and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_one_U :
 tt:unit ->
  U_alloc_table:U alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    U_alloc_table:U alloc_table ref ->
     U_s:(U,
      S pointer) memory ref ->
      { } U pointer reads S_alloc_table,U_alloc_table,U_s
      writes U_alloc_table,U_tag_table
      { (valid_struct_U(result, (0), (0), S_alloc_table, U_alloc_table, U_s)
        and (instanceof(U_tag_table, result, U_tag)
            and (alloc_extends(U_alloc_table@, U_alloc_table)
                and alloc_extern(U_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter f :
 tt:unit ->
  { (JC_1: true)} int32 reads S_alloc_table,S_y
  writes S_alloc_table,S_tag_table,S_x,S_y
  { ((true = true) -> (C_10: eq_int(integer_of_int32(result), (2)))) }

parameter g :
 tt:unit ->
  { (JC_4: true)} int32 reads S_alloc_table,S_y,U_alloc_table,U_s
  writes S_alloc_table,S_tag_table,S_x,S_y,U_alloc_table,U_s,U_tag_table,U_z
  { ((true = true) -> (C_25: eq_int(integer_of_int32(result), (3)))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f_ensures_default =
 fun (tt : unit) ->
  { (JC_2: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let a = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_11 = (let jessie_10 = (C_1:
                                         (((alloc_one_S void) S_alloc_table) S_alloc_table)) in
                        (a := (C_1:
                              (((alloc_one_S void) S_alloc_table) S_alloc_table)))) in
       void);
      (C_4:
      begin
        (let jessie_14 = (let jessie_12 = !a in
                         (let jessie_13 = (safe_int32_of_integer_ (1)) in
                         (((safe_upd_ S_x) !a) jessie_13))) in
        void);
       (C_6:
       begin
         (let jessie_17 = (let jessie_15 = !a in
                          (let jessie_16 = (safe_int32_of_integer_ (2)) in
                          (((safe_upd_ S_y) !a) jessie_16))) in
         void);
        (C_8:
        begin
          (let jessie_18 = (__retres := ((safe_acc_ !S_y) !a)) in void);
         (C_9:
         begin
           ((free_parameter S_alloc_table) !a);
          (jessie_returned_value := !__retres);
          (raise Return)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) -> (C_10: eq_int(integer_of_int32(result), (2)))) }

let f_safety =
 fun (tt : unit) ->
  { (JC_2: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let a = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_2 = (let jessie_1 = (C_1:
                                       (((alloc_one_S void) S_alloc_table) S_alloc_table)) in
                       (assert
                       { ge_int(offset_max(S_alloc_table, jessie_1), (0)) };
                       (a := (C_1:
                             (((alloc_one_S void) S_alloc_table) S_alloc_table))))) in
       void);
      (C_4:
      begin
        (let jessie_5 = (let jessie_3 = !a in
                        (let jessie_4 = (safe_int32_of_integer_ (1)) in
                        (((safe_upd_ S_x) !a) jessie_4))) in
        void);
       (C_6:
       begin
         (let jessie_8 = (let jessie_6 = !a in
                         (let jessie_7 = (safe_int32_of_integer_ (2)) in
                         (((safe_upd_ S_y) !a) jessie_7))) in
         void);
        (C_8:
        begin
          (let jessie_9 = (__retres := ((safe_acc_ !S_y) !a)) in void);
         (C_9:
         begin
           ((free_parameter S_alloc_table) !a);
          (jessie_returned_value := !__retres);
          (raise Return)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let g_ensures_default_1 =
 fun (tt : unit) ->
  { (JC_5: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let u = ref (any_pointer void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_12:
     begin
       (let jessie_32 = (let jessie_31 = (C_11:
                                         (((((alloc_one_U void) U_alloc_table) S_alloc_table) U_alloc_table) U_s)) in
                        (u := (C_11:
                              (((((alloc_one_U void) U_alloc_table) S_alloc_table) U_alloc_table) U_s)))) in
       void);
      (C_14:
      begin
        (let jessie_35 = (let jessie_33 = !u in
                         (let jessie_34 = (safe_int32_of_integer_ (1)) in
                         (((safe_upd_ U_z) !u) jessie_34))) in
        void);
       (C_17:
       begin
         (let jessie_38 = (let jessie_36 = ((safe_acc_ !U_s) !u) in
                          (let jessie_37 = (safe_int32_of_integer_ (2)) in
                          (((safe_upd_ S_x) ((safe_acc_ !U_s) !u)) jessie_37))) in
         void);
        (C_20:
        begin
          (let jessie_41 = (let jessie_39 = ((safe_acc_ !U_s) !u) in
                           (let jessie_40 = (safe_int32_of_integer_ (3)) in
                           (((safe_upd_ S_y) ((safe_acc_ !U_s) !u)) jessie_40))) in
          void);
         (C_23:
         begin
           (let jessie_42 = (__retres_0 := ((safe_acc_ !S_y) ((safe_acc_ !U_s) !u))) in
           void);
          (C_24:
          begin
            ((free_parameter U_alloc_table) !u);
           (jessie_returned_value := !__retres_0);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) -> (C_25: eq_int(integer_of_int32(result), (3)))) }

let g_safety =
 fun (tt : unit) ->
  { (JC_5: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let u = ref (any_pointer void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_12:
     begin
       (let jessie_20 = (let jessie_19 = (C_11:
                                         (((((alloc_one_U void) U_alloc_table) S_alloc_table) U_alloc_table) U_s)) in
                        (assert
                        { ge_int(offset_max(U_alloc_table, jessie_19), (0)) };
                        (u := (C_11:
                              (((((alloc_one_U void) U_alloc_table) S_alloc_table) U_alloc_table) U_s))))) in
       void);
      (C_14:
      begin
        (let jessie_23 = (let jessie_21 = !u in
                         (let jessie_22 = (safe_int32_of_integer_ (1)) in
                         (((safe_upd_ U_z) !u) jessie_22))) in
        void);
       (C_17:
       begin
         (let jessie_26 = (let jessie_24 = ((safe_acc_ !U_s) !u) in
                          (let jessie_25 = (safe_int32_of_integer_ (2)) in
                          (((safe_upd_ S_x) ((safe_acc_ !U_s) !u)) jessie_25))) in
         void);
        (C_20:
        begin
          (let jessie_29 = (let jessie_27 = ((safe_acc_ !U_s) !u) in
                           (let jessie_28 = (safe_int32_of_integer_ (3)) in
                           (((safe_upd_ S_y) ((safe_acc_ !U_s) !u)) jessie_28))) in
          void);
         (C_23:
         begin
           (let jessie_30 = (__retres_0 := ((safe_acc_ !S_y) ((safe_acc_ !U_s) !u))) in
           void);
          (C_24:
          begin
            ((free_parameter U_alloc_table) !u);
           (jessie_returned_value := !__retres_0);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }


