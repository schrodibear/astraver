rm -f array_struct.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only array_struct.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs array_struct.cloc array_struct.jc
Normalized expression:
(((\offset_min(ga3)) <= 0) && ((\offset_max(ga3)) >= 2))

Normalized expression:
(((\offset_min(ga2)) <= 0) && ((\offset_max(ga2)) >= 1))

Normalized expression:
(((\offset_min(ga1)) <= 0) && ((\offset_max(ga1)) >= 0))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
{
  (C_2:
     {
     ((C_1: (ga1 + 0).ii) = i);
       (C_4:
          {
          ((C_3: (ga2 + 1).ii) = i);
            (C_6: { ((C_5: (ga3 + 2).ii) = i); (return) })
          })
     })
  }
}

Normalized expression:
(C_7:
   ((C_8: ((ga1 + 0).ii == i)) &&
      ((C_10: ((ga2 + 1).ii == i)) && (C_11: ((ga3 + 2).ii == i)))))

Normalized expression:
true

Normalized expression:
{
{
  (C_12:
     {
     fg{}(5);
       {
       (assert (C_13: ((ga1 + 0).ii == 5))); ()
       };
       {
       (assert (C_14: ((ga2 + 1).ii == 5))); ()
       };
       {
       (assert (C_15: ((ga3 + 2).ii == 5))); ()
       };
       (return)
     })
  }
}

Normalized expression:
{
(let S[0] la1 in
   {
   (let S[0..1] la2 in
      {
      (let S[0..2] la3 in
         {
         {
           (C_17:
              {
              (la1 = (C_16: (TODO alloc)));
                (C_19:
                   {
                   (la2 = (C_18: (TODO alloc)));
                     (C_21:
                        {
                        (la3 = (C_20: (TODO alloc)));
                          (C_23:
                             {
                             ((C_22: (la3 + 0).ii) = 0);
                               (C_25:
                                  {
                                  ((C_24: (la3 + 0).jj) = 0);
                                    (C_27:
                                       {
                                       ((C_26: (la3 + 1).ii) = 0);
                                         (C_29:
                                            {
                                            ((C_28: (la3 + 1).jj) = 0);
                                              (C_31:
                                                 {
                                                 ((C_30: (la3 + 2).ii) = 0);
                                                   (C_33:
                                                      {
                                                      ((C_32: (la3 + 2).jj) =
                                                         0);
                                                        (C_35:
                                                           {
                                                           ((C_34:
                                                               (la1 + 0).jj) =
                                                              i);
                                                             (C_37:
                                                                {
                                                                ((C_36:
                                                                    (
                                                                    la2 + 1).jj) =
                                                                   i);
                                                                  (C_39:
                                                                    {
                                                                    ((C_38:
                                                                    (la3 + 2).jj) =
                                                                    i);
                                                                    {
                                                                    (assert (
                                                                    C_40:
                                                                    ((la1 + 0).jj ==
                                                                    i)));
                                                                    ()
                                                                    };
                                                                    {
                                                                    (assert (
                                                                    C_41:
                                                                    ((la2 + 1).jj ==
                                                                    i)));
                                                                    ()
                                                                    };
                                                                    {
                                                                    (assert (
                                                                    C_42:
                                                                    ((la3 + 2).jj ==
                                                                    i)));
                                                                    ()
                                                                    };
                                                                    {
                                                                    (C_43:
                                                                    {
                                                                    (TODO free);
                                                                    (C_44:
                                                                    {
                                                                    (TODO free);
                                                                    (C_45:
                                                                    {
                                                                    (TODO free);
                                                                    (return)
                                                                    })
                                                                    })
                                                                    })
                                                                    }
                                                                    })
                                                                })
                                                           })
                                                      })
                                                 })
                                            })
                                       })
                                  })
                             })
                        })
                   })
              })
           }
         })
      })
   })
}

Generating Why function fg
Generating Why function testg
Generating Why function lg
cat why/array_struct.why
type S

type _bool

type char_P

type int16

type int32

type int64

type int8

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic ga1:  -> S pointer

logic ga2:  -> S pointer

logic ga3:  -> S pointer

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_6:int32.
    ((le_int((0), integer_of_int32(i_6))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_6)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_6)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_7:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_7))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_7)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_7), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and lt_int(integer_of_int32(i_1),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i_1)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and (le_int(integer_of_int32(i_2),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_2)))),
             (0)))) ->
     lt_int(integer_of_int32(i_2),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_5:int32.
    ((le_int((0), integer_of_int32(i_5))
     and le_int(integer_of_int32(i_5),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_5)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_5)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_4)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and (le_int(integer_of_int32(i_3),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_3)))),
             (0)))) ->
     eq_int(integer_of_int32(i_3),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_ga1(ga1:S pointer,
 S_alloc_table:S alloc_table,
 ga3:S pointer,
 ga2:S pointer,
 ga1:S pointer) =
 (le_int(offset_min(S_alloc_table, ga1), (0))
 and ge_int(offset_max(S_alloc_table, ga1), (0)))

predicate valid_ga2(ga2:S pointer,
 S_alloc_table:S alloc_table,
 ga3:S pointer,
 ga2:S pointer,
 ga1:S pointer) =
 (le_int(offset_min(S_alloc_table, ga2), (0))
 and ge_int(offset_max(S_alloc_table, ga2), (1)))

predicate valid_ga3(ga3:S pointer,
 S_alloc_table:S alloc_table,
 ga3:S pointer,
 ga2:S pointer,
 ga1:S pointer) =
 (le_int(offset_min(S_alloc_table, ga3), (0))
 and ge_int(offset_max(S_alloc_table, ga3), (2)))

predicate valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter S_alloc_table : S alloc_table ref

parameter S_ii : (S, int32) memory ref

parameter S_jj : (S, int32) memory ref

parameter S_tag_table : S tag_table ref

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter alloc_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    { ge_int(n, (0))} S pointer reads S_alloc_table
    writes S_alloc_table,S_tag_table
    { (valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table)
      and (instanceof(S_tag_table, result, S_tag)
          and (alloc_extends(S_alloc_table@, S_alloc_table)
              and alloc_extern(S_alloc_table@, result)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_S :
 tt:unit ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    { } S pointer reads S_alloc_table writes S_alloc_table,S_tag_table
    { (valid_struct_S(result, (0), (0), S_alloc_table)
      and (instanceof(S_tag_table, result, S_tag)
          and (alloc_extends(S_alloc_table@, S_alloc_table)
              and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter fg :
 i:int32 ->
  { (JC_1:
    (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1))))}
  unit reads S_alloc_table,S_ii writes S_ii
  { ((JC_3:
     (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
     and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
         and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1))))
    and ((true = true) ->
         (JC_4:
         ((C_7:
          ((C_8:
           eq_int(integer_of_int32(select(S_ii, shift(ga1, (0)))),
           integer_of_int32(i)))
          and ((C_10:
               eq_int(integer_of_int32(select(S_ii, shift(ga2, (1)))),
               integer_of_int32(i)))
              and (C_11:
                  eq_int(integer_of_int32(select(S_ii, shift(ga3, (2)))),
                  integer_of_int32(i))))))
         and (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
             and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
                 and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1))))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter lg :
 i_0:int32 ->
  { (JC_10:
    (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1))))}
  unit reads S_alloc_table,S_jj writes S_alloc_table,S_ii,S_jj,S_tag_table
  { (JC_12:
    (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1)))) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter testg :
 tt:unit ->
  { (JC_5:
    (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1))))}
  unit reads S_alloc_table,S_ii writes S_ii
  { (JC_7:
    (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1)))) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let fg_ensures_default =
 fun (i : int32) ->
  { (JC_1:
    (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1)))) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_12 = (let jessie_10 = ((shift ga1) (0)) in
                        (let jessie_11 = i in
                        (((safe_upd_ S_ii) ((shift ga1) (0))) jessie_11))) in
       void);
      (C_4:
      begin
        (let jessie_15 = (let jessie_13 = ((shift ga2) (1)) in
                         (let jessie_14 = i in
                         (((safe_upd_ S_ii) ((shift ga2) (1))) jessie_14))) in
        void);
       (C_6:
       begin
         (let jessie_18 = (let jessie_16 = ((shift ga3) (2)) in
                          (let jessie_17 = i in
                          (((safe_upd_ S_ii) ((shift ga3) (2))) jessie_17))) in
         void);
        (raise Return)
       end)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_4:
     ((C_7:
      ((C_8:
       eq_int(integer_of_int32(select(S_ii, shift(ga1, (0)))),
       integer_of_int32(i)))
      and ((C_10:
           eq_int(integer_of_int32(select(S_ii, shift(ga2, (1)))),
           integer_of_int32(i)))
          and (C_11:
              eq_int(integer_of_int32(select(S_ii, shift(ga3, (2)))),
              integer_of_int32(i))))))
     and (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
         and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
             and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1)))))) }

let fg_safety =
 fun (i : int32) ->
  { (JC_1:
    (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1)))) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_3 = (let jessie_1 = ((shift ga1) (0)) in
                       (let jessie_2 = i in
                       (((safe_upd_ S_ii) ((shift ga1) (0))) jessie_2))) in
       void);
      (C_4:
      begin
        (let jessie_6 = (let jessie_4 = ((shift ga2) (1)) in
                        (let jessie_5 = i in
                        (((safe_upd_ S_ii) ((shift ga2) (1))) jessie_5))) in
        void);
       (C_6:
       begin
         (let jessie_9 = (let jessie_7 = ((shift ga3) (2)) in
                         (let jessie_8 = i in
                         (((safe_upd_ S_ii) ((shift ga3) (2))) jessie_8))) in
         void);
        (raise Return)
       end)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_3:
    (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1)))) }

let lg_safety =
 fun (i_0 : int32) ->
  { (JC_10:
    (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1)))) }
  (init:
  try
   begin
     (let la1 = ref (any_pointer void) in
     (let la2 = ref (any_pointer void) in
     (let la3 = ref (any_pointer void) in
     (C_17:
     begin
       (let jessie_20 = (let jessie_19 = (C_16:
                                         (((alloc_one_S void) S_alloc_table) S_alloc_table)) in
                        (assert
                        { ge_int(offset_max(S_alloc_table, jessie_19), (0)) };
                        (la1 := (C_16:
                                (((alloc_one_S void) S_alloc_table) S_alloc_table))))) in
       void);
      (C_19:
      begin
        (let jessie_22 = (let jessie_21 = (C_18:
                                          (((alloc_S (2)) S_alloc_table) S_alloc_table)) in
                         (assert
                         { ge_int(offset_max(S_alloc_table, jessie_21), (1)) };
                         (la2 := (C_18:
                                 (((alloc_S (2)) S_alloc_table) S_alloc_table))))) in
        void);
       (C_21:
       begin
         (let jessie_24 = (let jessie_23 = (C_20:
                                           (((alloc_S (3)) S_alloc_table) S_alloc_table)) in
                          (assert
                          { ge_int(offset_max(S_alloc_table, jessie_23), (2)) };
                          (la3 := (C_20:
                                  (((alloc_S (3)) S_alloc_table) S_alloc_table))))) in
         void);
        (C_23:
        begin
          (let jessie_27 = (let jessie_25 = ((shift !la3) (0)) in
                           (let jessie_26 = (safe_int32_of_integer_ (0)) in
                           (((safe_upd_ S_ii) ((shift !la3) (0))) jessie_26))) in
          void);
         (C_25:
         begin
           (let jessie_30 = (let jessie_28 = ((shift !la3) (0)) in
                            (let jessie_29 = (safe_int32_of_integer_ (0)) in
                            (((safe_upd_ S_jj) ((shift !la3) (0))) jessie_29))) in
           void);
          (C_27:
          begin
            (let jessie_33 = (let jessie_31 = ((shift !la3) (1)) in
                             (let jessie_32 = (safe_int32_of_integer_ (0)) in
                             (((safe_upd_ S_ii) ((shift !la3) (1))) jessie_32))) in
            void);
           (C_29:
           begin
             (let jessie_36 = (let jessie_34 = ((shift !la3) (1)) in
                              (let jessie_35 = (safe_int32_of_integer_ (0)) in
                              (((safe_upd_ S_jj) ((shift !la3) (1))) jessie_35))) in
             void);
            (C_31:
            begin
              (let jessie_39 = (let jessie_37 = ((shift !la3) (2)) in
                               (let jessie_38 = (safe_int32_of_integer_ (0)) in
                               (((safe_upd_ S_ii) ((shift !la3) (2))) jessie_38))) in
              void);
             (C_33:
             begin
               (let jessie_42 = (let jessie_40 = ((shift !la3) (2)) in
                                (let jessie_41 = (safe_int32_of_integer_ (0)) in
                                (((safe_upd_ S_jj) ((shift !la3) (2))) jessie_41))) in
               void);
              (C_35:
              begin
                (let jessie_45 = (let jessie_43 = ((shift !la1) (0)) in
                                 (let jessie_44 = i_0 in
                                 (((safe_upd_ S_jj) ((shift !la1) (0))) jessie_44))) in
                void);
               (C_37:
               begin
                 (let jessie_48 = (let jessie_46 = ((shift !la2) (1)) in
                                  (let jessie_47 = i_0 in
                                  (((safe_upd_ S_jj) ((shift !la2) (1))) jessie_47))) in
                 void);
                (C_39:
                begin
                  (let jessie_51 = (let jessie_49 = ((shift !la3) (2)) in
                                   (let jessie_50 = i_0 in
                                   (((safe_upd_ S_jj) ((shift !la3) (2))) jessie_50))) in
                  void);
                 (assert
                 { (C_40:
                   eq_int(integer_of_int32(select(S_jj, shift(la1, (0)))),
                   integer_of_int32(i_0))) };
                 void);
                 void;
                 (assert
                 { (C_41:
                   eq_int(integer_of_int32(select(S_jj, shift(la2, (1)))),
                   integer_of_int32(i_0))) };
                 void);
                 void;
                 (assert
                 { (C_42:
                   eq_int(integer_of_int32(select(S_jj, shift(la3, (2)))),
                   integer_of_int32(i_0))) };
                 void);
                 void;
                 (C_43:
                 begin
                   ((free_parameter S_alloc_table) !la1);
                  (C_44:
                  begin
                    ((free_parameter S_alloc_table) !la2);
                   (C_45:
                   begin
                     ((free_parameter S_alloc_table) !la3); (raise Return)
                   end)
                  end)
                 end)
                end)
               end)
              end)
             end)
            end)
           end)
          end)
         end)
        end)
       end)
      end)
     end))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_12:
    (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1)))) }

let testg_safety =
 fun (tt : unit) ->
  { (JC_5:
    (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1)))) }
  (init:
  try
   begin
     (C_12:
     begin
       (JC_8: (fg (safe_int32_of_integer_ (5))));
      (assert
      { (C_13: eq_int(integer_of_int32(select(S_ii, shift(ga1, (0)))), (5))) };
      void);
      void;
      (assert
      { (C_14: eq_int(integer_of_int32(select(S_ii, shift(ga2, (1)))), (5))) };
      void);
      void;
      (assert
      { (C_15: eq_int(integer_of_int32(select(S_ii, shift(ga3, (2)))), (5))) };
      void);
      void;
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_7:
    (valid_ga3(ga3, S_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, S_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, S_alloc_table, ga3, ga2, ga1)))) }


