rm -f array_multi.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only array_multi.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs array_multi.cloc array_multi.jc
Normalized expression:
(((\offset_min(ga3)) <= 0) && ((\offset_max(ga3)) >= 8))

Normalized expression:
(((\offset_min(ga2)) <= 0) && ((\offset_max(ga2)) >= 3))

Normalized expression:
(((\offset_min(ga1)) <= 0) && ((\offset_max(ga1)) >= 0))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
{
  (C_6:
     {
     ((C_5: (ga1 + (C_4: (TODO cast))).int_M) = i);
       (C_12:
          {
          ((C_11: (ga2 + (C_10: (TODO cast))).int_M) = i);
            (C_18:
               {
               ((C_17: (ga3 + (C_16: (TODO cast))).int_M) = i); (return)
               })
          })
     })
  }
}

Normalized expression:
(C_19:
   ((C_20: ((ga1 + ((0 * 1) + 0)).int_M == i)) &&
      ((C_22: ((ga2 + ((1 * 2) + 1)).int_M == i)) &&
         (C_23: ((ga3 + ((2 * 3) + 2)).int_M == i)))))

Normalized expression:
true

Normalized expression:
{
{
  (C_24:
     {
     fg{}(5);
       {
       (assert (C_25: ((ga1 + ((0 * 1) + 0)).int_M == 5))); ()
       };
       {
       (assert (C_26: ((ga2 + ((1 * 2) + 1)).int_M == 5))); ()
       };
       {
       (assert (C_27: ((ga3 + ((2 * 3) + 2)).int_M == 5))); ()
       };
       (return)
     })
  }
}

Normalized expression:
{
(let int_P[0] la1 in
   {
   (let int_P[0..3] la2 in
      {
      (let int_P[0..8] la3 in
         {
         {
           (C_29:
              {
              (la1 = (C_28: (TODO alloc)));
                (C_31:
                   {
                   (la2 = (C_30: (TODO alloc)));
                     (C_33:
                        {
                        (la3 = (C_32: (TODO alloc)));
                          (C_39:
                             {
                             ((C_38: (la3 + (C_37: (TODO cast))).int_M) = 0);
                               (C_45:
                                  {
                                  ((C_44: (la3 + (C_43: (TODO cast))).int_M) =
                                     0);
                                    (C_51:
                                       {
                                       ((C_50:
                                           (la3 + (C_49: (TODO cast))).int_M) =
                                          0);
                                         (C_57:
                                            {
                                            ((C_56:
                                                (la3 + (C_55: (TODO cast))).int_M) =
                                               0);
                                              (C_63:
                                                 {
                                                 ((C_62:
                                                     (la3 +
                                                        (C_61: (TODO cast))).int_M) =
                                                    0);
                                                   (C_69:
                                                      {
                                                      ((C_68:
                                                          (la3 +
                                                             (C_67:
                                                                (TODO cast))).int_M) =
                                                         0);
                                                        (C_75:
                                                           {
                                                           ((C_74:
                                                               (la3 +
                                                                  (C_73:
                                                                    (TODO cast))).int_M) =
                                                              0);
                                                             (C_81:
                                                                {
                                                                ((C_80:
                                                                    (
                                                                    la3 +
                                                                    (C_79:
                                                                    (TODO cast))).int_M) =
                                                                   0);
                                                                  (C_87:
                                                                    {
                                                                    ((C_86:
                                                                    (la3 +
                                                                    (C_85:
                                                                    (TODO cast))).int_M) =
                                                                    0);
                                                                    (C_93:
                                                                    {
                                                                    ((C_92:
                                                                    (la1 +
                                                                    (C_91:
                                                                    (TODO cast))).int_M) =
                                                                    i);
                                                                    (C_99:
                                                                    {
                                                                    ((C_98:
                                                                    (la2 +
                                                                    (C_97:
                                                                    (TODO cast))).int_M) =
                                                                    i);
                                                                    (C_105:
                                                                    {
                                                                    ((C_104:
                                                                    (la3 +
                                                                    (C_103:
                                                                    (TODO cast))).int_M) =
                                                                    i);
                                                                    {
                                                                    (assert (
                                                                    C_106:
                                                                    ((la1 +
                                                                    ((0 * 1) +
                                                                    0)).int_M ==
                                                                    i)));
                                                                    ()
                                                                    };
                                                                    {
                                                                    (assert (
                                                                    C_107:
                                                                    ((la2 +
                                                                    ((1 * 2) +
                                                                    1)).int_M ==
                                                                    i)));
                                                                    ()
                                                                    };
                                                                    {
                                                                    (assert (
                                                                    C_108:
                                                                    ((la3 +
                                                                    ((2 * 3) +
                                                                    2)).int_M ==
                                                                    i)));
                                                                    ()
                                                                    };
                                                                    {
                                                                    (C_109:
                                                                    {
                                                                    (TODO free);
                                                                    (C_110:
                                                                    {
                                                                    (TODO free);
                                                                    (C_111:
                                                                    {
                                                                    (TODO free);
                                                                    (return)
                                                                    })
                                                                    })
                                                                    })
                                                                    }
                                                                    })
                                                                    })
                                                                    })
                                                                    })
                                                                })
                                                           })
                                                      })
                                                 })
                                            })
                                       })
                                  })
                             })
                        })
                   })
              })
           }
         })
      })
   })
}

Generating Why function fg
Generating Why function testg
Generating Why function lg
cat why/array_multi.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic ga1:  -> int_P pointer

logic ga2:  -> int_P pointer

logic ga3:  -> int_P pointer

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_6:int32.
    ((le_int((0), integer_of_int32(i_6))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_6)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_6)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_7:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_7))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_7)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_7), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and lt_int(integer_of_int32(i_1),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i_1)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and (le_int(integer_of_int32(i_2),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_2)))),
             (0)))) ->
     lt_int(integer_of_int32(i_2),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_5:int32.
    ((le_int((0), integer_of_int32(i_5))
     and le_int(integer_of_int32(i_5),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_5)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_5)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_4)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and (le_int(integer_of_int32(i_3),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_3)))),
             (0)))) ->
     eq_int(integer_of_int32(i_3),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_ga1(ga1:int_P pointer,
 int_P_alloc_table:int_P alloc_table,
 ga3:int_P pointer,
 ga2:int_P pointer,
 ga1:int_P pointer) =
 (le_int(offset_min(int_P_alloc_table, ga1), (0))
 and ge_int(offset_max(int_P_alloc_table, ga1), (0)))

predicate valid_ga2(ga2:int_P pointer,
 int_P_alloc_table:int_P alloc_table,
 ga3:int_P pointer,
 ga2:int_P pointer,
 ga1:int_P pointer) =
 (le_int(offset_min(int_P_alloc_table, ga2), (0))
 and ge_int(offset_max(int_P_alloc_table, ga2), (3)))

predicate valid_ga3(ga3:int_P pointer,
 int_P_alloc_table:int_P alloc_table,
 ga3:int_P pointer,
 ga2:int_P pointer,
 ga1:int_P pointer) =
 (le_int(offset_min(int_P_alloc_table, ga3), (0))
 and ge_int(offset_max(int_P_alloc_table, ga3), (8)))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int_P_int_M : (int_P, int32) memory ref

parameter fg :
 i:int32 ->
  { (JC_1:
    (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1))))}
  unit reads int_P_alloc_table,int_P_int_M writes int_P_int_M
  { ((JC_3:
     (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
     and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
         and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1))))
    and ((true = true) ->
         (JC_4:
         ((C_19:
          ((C_20:
           eq_int(integer_of_int32(select(int_P_int_M,
                                   shift(ga1,
                                   add_int(mul_int((0), (1)), (0))))),
           integer_of_int32(i)))
          and ((C_22:
               eq_int(integer_of_int32(select(int_P_int_M,
                                       shift(ga2,
                                       add_int(mul_int((1), (2)), (1))))),
               integer_of_int32(i)))
              and (C_23:
                  eq_int(integer_of_int32(select(int_P_int_M,
                                          shift(ga3,
                                          add_int(mul_int((2), (3)), (2))))),
                  integer_of_int32(i))))))
         and (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
             and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
                 and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1))))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter lg :
 i_0:int32 ->
  { (JC_13:
    (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1))))}
  unit reads int_P_alloc_table,int_P_int_M
  writes int_P_alloc_table,int_P_int_M,int_P_tag_table
  { (JC_15:
    (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1)))) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter testg :
 tt:unit ->
  { (JC_8:
    (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1))))}
  unit reads int_P_alloc_table,int_P_int_M writes int_P_int_M
  { (JC_10:
    (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1)))) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let fg_ensures_default =
 fun (i : int32) ->
  { (JC_1:
    (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1)))) }
  (init:
  try
   begin
     (C_6:
     begin
       (let jessie_12 = (let jessie_10 = ((shift ga1) (integer_of_int32 
                                                       (safe_int32_of_integer_ 
                                                        (C_3:
                                                        ((add_int (integer_of_int32 
                                                                   (safe_int32_of_integer_ 
                                                                    (C_1:
                                                                    ((mul_int (0)) (1)))))) (0)))))) in
                        (let jessie_11 = i in
                        (((safe_upd_ int_P_int_M) ((shift ga1) (integer_of_int32 
                                                                (safe_int32_of_integer_ 
                                                                 (C_3:
                                                                 ((add_int 
                                                                   (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_1:
                                                                    ((mul_int (0)) (1)))))) (0))))))) jessie_11))) in
       void);
      (C_12:
      begin
        (let jessie_15 = (let jessie_13 = ((shift ga2) (integer_of_int32 
                                                        (safe_int32_of_integer_ 
                                                         (C_9:
                                                         ((add_int (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_7:
                                                                    ((mul_int (1)) (2)))))) (1)))))) in
                         (let jessie_14 = i in
                         (((safe_upd_ int_P_int_M) ((shift ga2) (integer_of_int32 
                                                                 (safe_int32_of_integer_ 
                                                                  (C_9:
                                                                  ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_7:
                                                                    ((mul_int (1)) (2)))))) (1))))))) jessie_14))) in
        void);
       (C_18:
       begin
         (let jessie_18 = (let jessie_16 = ((shift ga3) (integer_of_int32 
                                                         (safe_int32_of_integer_ 
                                                          (C_15:
                                                          ((add_int (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_13:
                                                                    ((mul_int (2)) (3)))))) (2)))))) in
                          (let jessie_17 = i in
                          (((safe_upd_ int_P_int_M) ((shift ga3) (integer_of_int32 
                                                                  (safe_int32_of_integer_ 
                                                                   (C_15:
                                                                   ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_13:
                                                                    ((mul_int (2)) (3)))))) (2))))))) jessie_17))) in
         void);
        (raise Return)
       end)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_4:
     ((C_19:
      ((C_20:
       eq_int(integer_of_int32(select(int_P_int_M,
                               shift(ga1, add_int(mul_int((0), (1)), (0))))),
       integer_of_int32(i)))
      and ((C_22:
           eq_int(integer_of_int32(select(int_P_int_M,
                                   shift(ga2,
                                   add_int(mul_int((1), (2)), (1))))),
           integer_of_int32(i)))
          and (C_23:
              eq_int(integer_of_int32(select(int_P_int_M,
                                      shift(ga3,
                                      add_int(mul_int((2), (3)), (2))))),
              integer_of_int32(i))))))
     and (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
         and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
             and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1)))))) }

let fg_safety =
 fun (i : int32) ->
  { (JC_1:
    (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1)))) }
  (init:
  try
   begin
     (C_6:
     begin
       (let jessie_3 = (let jessie_1 = ((shift ga1) (integer_of_int32 
                                                     (safe_int32_of_integer_ 
                                                      (C_3:
                                                      ((add_int (integer_of_int32 
                                                                 (safe_int32_of_integer_ 
                                                                  (C_1:
                                                                  ((mul_int (0)) (1)))))) (0)))))) in
                       (let jessie_2 = i in
                       (JC_5:
                       ((((((bound_upd_ int_P_int_M) ga1) (integer_of_int32 
                                                           (safe_int32_of_integer_ 
                                                            (C_3:
                                                            ((add_int 
                                                              (integer_of_int32 
                                                               (safe_int32_of_integer_ 
                                                                (C_1:
                                                                ((mul_int (0)) (1)))))) (0)))))) (0)) (0)) jessie_2)))) in
       void);
      (C_12:
      begin
        (let jessie_6 = (let jessie_4 = ((shift ga2) (integer_of_int32 
                                                      (safe_int32_of_integer_ 
                                                       (C_9:
                                                       ((add_int (integer_of_int32 
                                                                  (safe_int32_of_integer_ 
                                                                   (C_7:
                                                                   ((mul_int (1)) (2)))))) (1)))))) in
                        (let jessie_5 = i in
                        (JC_6:
                        ((((((bound_upd_ int_P_int_M) ga2) (integer_of_int32 
                                                            (safe_int32_of_integer_ 
                                                             (C_9:
                                                             ((add_int 
                                                               (integer_of_int32 
                                                                (safe_int32_of_integer_ 
                                                                 (C_7:
                                                                 ((mul_int (1)) (2)))))) (1)))))) (0)) (3)) jessie_5)))) in
        void);
       (C_18:
       begin
         (let jessie_9 = (let jessie_7 = ((shift ga3) (integer_of_int32 
                                                       (safe_int32_of_integer_ 
                                                        (C_15:
                                                        ((add_int (integer_of_int32 
                                                                   (safe_int32_of_integer_ 
                                                                    (C_13:
                                                                    ((mul_int (2)) (3)))))) (2)))))) in
                         (let jessie_8 = i in
                         (JC_7:
                         ((((((bound_upd_ int_P_int_M) ga3) (integer_of_int32 
                                                             (safe_int32_of_integer_ 
                                                              (C_15:
                                                              ((add_int 
                                                                (integer_of_int32 
                                                                 (safe_int32_of_integer_ 
                                                                  (C_13:
                                                                  ((mul_int (2)) (3)))))) (2)))))) (0)) (8)) jessie_8)))) in
         void);
        (raise Return)
       end)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_3:
    (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1)))) }

let lg_safety =
 fun (i_0 : int32) ->
  { (JC_13:
    (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1)))) }
  (init:
  try
   begin
     (let la1 = ref (any_pointer void) in
     (let la2 = ref (any_pointer void) in
     (let la3 = ref (any_pointer void) in
     (C_29:
     begin
       (let jessie_20 = (let jessie_19 = (C_28:
                                         (((alloc_one_int_P void) int_P_alloc_table) int_P_alloc_table)) in
                        (assert
                        { ge_int(offset_max(int_P_alloc_table, jessie_19),
                          (0)) };
                        (la1 := (C_28:
                                (((alloc_one_int_P void) int_P_alloc_table) int_P_alloc_table))))) in
       void);
      (C_31:
      begin
        (let jessie_22 = (let jessie_21 = (C_30:
                                          (((alloc_int_P (4)) int_P_alloc_table) int_P_alloc_table)) in
                         (assert
                         { ge_int(offset_max(int_P_alloc_table, jessie_21),
                           (3)) };
                         (la2 := (C_30:
                                 (((alloc_int_P (4)) int_P_alloc_table) int_P_alloc_table))))) in
        void);
       (C_33:
       begin
         (let jessie_24 = (let jessie_23 = (C_32:
                                           (((alloc_int_P (9)) int_P_alloc_table) int_P_alloc_table)) in
                          (assert
                          { ge_int(offset_max(int_P_alloc_table, jessie_23),
                            (8)) };
                          (la3 := (C_32:
                                  (((alloc_int_P (9)) int_P_alloc_table) int_P_alloc_table))))) in
         void);
        (C_39:
        begin
          (let jessie_27 = (let jessie_25 = ((shift !la3) (integer_of_int32 
                                                           (safe_int32_of_integer_ 
                                                            (C_36:
                                                            ((add_int 
                                                              (integer_of_int32 
                                                               (safe_int32_of_integer_ 
                                                                (C_34:
                                                                ((mul_int (0)) (3)))))) (0)))))) in
                           (let jessie_26 = (safe_int32_of_integer_ (0)) in
                           (JC_16:
                           ((((((bound_upd_ int_P_int_M) !la3) (integer_of_int32 
                                                                (safe_int32_of_integer_ 
                                                                 (C_36:
                                                                 ((add_int 
                                                                   (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_34:
                                                                    ((mul_int (0)) (3)))))) (0)))))) (0)) (8)) jessie_26)))) in
          void);
         (C_45:
         begin
           (let jessie_30 = (let jessie_28 = ((shift !la3) (integer_of_int32 
                                                            (safe_int32_of_integer_ 
                                                             (C_42:
                                                             ((add_int 
                                                               (integer_of_int32 
                                                                (safe_int32_of_integer_ 
                                                                 (C_40:
                                                                 ((mul_int (0)) (3)))))) (1)))))) in
                            (let jessie_29 = (safe_int32_of_integer_ (0)) in
                            (JC_17:
                            ((((((bound_upd_ int_P_int_M) !la3) (integer_of_int32 
                                                                 (safe_int32_of_integer_ 
                                                                  (C_42:
                                                                  ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_40:
                                                                    ((mul_int (0)) (3)))))) (1)))))) (0)) (8)) jessie_29)))) in
           void);
          (C_51:
          begin
            (let jessie_33 = (let jessie_31 = ((shift !la3) (integer_of_int32 
                                                             (safe_int32_of_integer_ 
                                                              (C_48:
                                                              ((add_int 
                                                                (integer_of_int32 
                                                                 (safe_int32_of_integer_ 
                                                                  (C_46:
                                                                  ((mul_int (0)) (3)))))) (2)))))) in
                             (let jessie_32 = (safe_int32_of_integer_ (0)) in
                             (JC_18:
                             ((((((bound_upd_ int_P_int_M) !la3) (integer_of_int32 
                                                                  (safe_int32_of_integer_ 
                                                                   (C_48:
                                                                   ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_46:
                                                                    ((mul_int (0)) (3)))))) (2)))))) (0)) (8)) jessie_32)))) in
            void);
           (C_57:
           begin
             (let jessie_36 = (let jessie_34 = ((shift !la3) (integer_of_int32 
                                                              (safe_int32_of_integer_ 
                                                               (C_54:
                                                               ((add_int 
                                                                 (integer_of_int32 
                                                                  (safe_int32_of_integer_ 
                                                                   (C_52:
                                                                   ((mul_int (1)) (3)))))) (0)))))) in
                              (let jessie_35 = (safe_int32_of_integer_ (0)) in
                              (JC_19:
                              ((((((bound_upd_ int_P_int_M) !la3) (integer_of_int32 
                                                                   (safe_int32_of_integer_ 
                                                                    (C_54:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_52:
                                                                    ((mul_int (1)) (3)))))) (0)))))) (0)) (8)) jessie_35)))) in
             void);
            (C_63:
            begin
              (let jessie_39 = (let jessie_37 = ((shift !la3) (integer_of_int32 
                                                               (safe_int32_of_integer_ 
                                                                (C_60:
                                                                ((add_int 
                                                                  (integer_of_int32 
                                                                   (safe_int32_of_integer_ 
                                                                    (C_58:
                                                                    ((mul_int (1)) (3)))))) (1)))))) in
                               (let jessie_38 = (safe_int32_of_integer_ (0)) in
                               (JC_20:
                               ((((((bound_upd_ int_P_int_M) !la3) (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_60:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_58:
                                                                    ((mul_int (1)) (3)))))) (1)))))) (0)) (8)) jessie_38)))) in
              void);
             (C_69:
             begin
               (let jessie_42 = (let jessie_40 = ((shift !la3) (integer_of_int32 
                                                                (safe_int32_of_integer_ 
                                                                 (C_66:
                                                                 ((add_int 
                                                                   (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_64:
                                                                    ((mul_int (1)) (3)))))) (2)))))) in
                                (let jessie_41 = (safe_int32_of_integer_ (0)) in
                                (JC_21:
                                ((((((bound_upd_ int_P_int_M) !la3) (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_66:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_64:
                                                                    ((mul_int (1)) (3)))))) (2)))))) (0)) (8)) jessie_41)))) in
               void);
              (C_75:
              begin
                (let jessie_45 = (let jessie_43 = ((shift !la3) (integer_of_int32 
                                                                 (safe_int32_of_integer_ 
                                                                  (C_72:
                                                                  ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_70:
                                                                    ((mul_int (2)) (3)))))) (0)))))) in
                                 (let jessie_44 = (safe_int32_of_integer_ (0)) in
                                 (JC_22:
                                 ((((((bound_upd_ int_P_int_M) !la3) 
                                     (integer_of_int32 (safe_int32_of_integer_ 
                                                        (C_72:
                                                        ((add_int (integer_of_int32 
                                                                   (safe_int32_of_integer_ 
                                                                    (C_70:
                                                                    ((mul_int (2)) (3)))))) (0)))))) (0)) (8)) jessie_44)))) in
                void);
               (C_81:
               begin
                 (let jessie_48 = (let jessie_46 = ((shift !la3) (integer_of_int32 
                                                                  (safe_int32_of_integer_ 
                                                                   (C_78:
                                                                   ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_76:
                                                                    ((mul_int (2)) (3)))))) (1)))))) in
                                  (let jessie_47 = (safe_int32_of_integer_ (0)) in
                                  (JC_23:
                                  ((((((bound_upd_ int_P_int_M) !la3) 
                                      (integer_of_int32 (safe_int32_of_integer_ 
                                                         (C_78:
                                                         ((add_int (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_76:
                                                                    ((mul_int (2)) (3)))))) (1)))))) (0)) (8)) jessie_47)))) in
                 void);
                (C_87:
                begin
                  (let jessie_51 = (let jessie_49 = ((shift !la3) (integer_of_int32 
                                                                   (safe_int32_of_integer_ 
                                                                    (C_84:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_82:
                                                                    ((mul_int (2)) (3)))))) (2)))))) in
                                   (let jessie_50 = (safe_int32_of_integer_ (0)) in
                                   (JC_24:
                                   ((((((bound_upd_ int_P_int_M) !la3) 
                                       (integer_of_int32 (safe_int32_of_integer_ 
                                                          (C_84:
                                                          ((add_int (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_82:
                                                                    ((mul_int (2)) (3)))))) (2)))))) (0)) (8)) jessie_50)))) in
                  void);
                 (C_93:
                 begin
                   (let jessie_54 = (let jessie_52 = ((shift !la1) (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_90:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_88:
                                                                    ((mul_int (0)) (1)))))) (0)))))) in
                                    (let jessie_53 = i_0 in
                                    (JC_25:
                                    ((((((bound_upd_ int_P_int_M) !la1) 
                                        (integer_of_int32 (safe_int32_of_integer_ 
                                                           (C_90:
                                                           ((add_int 
                                                             (integer_of_int32 
                                                              (safe_int32_of_integer_ 
                                                               (C_88:
                                                               ((mul_int (0)) (1)))))) (0)))))) (0)) (0)) jessie_53)))) in
                   void);
                  (C_99:
                  begin
                    (let jessie_57 = (let jessie_55 = ((shift !la2) (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_96:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_94:
                                                                    ((mul_int (1)) (2)))))) (1)))))) in
                                     (let jessie_56 = i_0 in
                                     (JC_26:
                                     ((((((bound_upd_ int_P_int_M) !la2) 
                                         (integer_of_int32 (safe_int32_of_integer_ 
                                                            (C_96:
                                                            ((add_int 
                                                              (integer_of_int32 
                                                               (safe_int32_of_integer_ 
                                                                (C_94:
                                                                ((mul_int (1)) (2)))))) (1)))))) (0)) (3)) jessie_56)))) in
                    void);
                   (C_105:
                   begin
                     (let jessie_60 = (let jessie_58 = ((shift !la3) 
                                                        (integer_of_int32 
                                                         (safe_int32_of_integer_ 
                                                          (C_102:
                                                          ((add_int (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_100:
                                                                    ((mul_int (2)) (3)))))) (2)))))) in
                                      (let jessie_59 = i_0 in
                                      (JC_27:
                                      ((((((bound_upd_ int_P_int_M) !la3) 
                                          (integer_of_int32 (safe_int32_of_integer_ 
                                                             (C_102:
                                                             ((add_int 
                                                               (integer_of_int32 
                                                                (safe_int32_of_integer_ 
                                                                 (C_100:
                                                                 ((mul_int (2)) (3)))))) (2)))))) (0)) (8)) jessie_59)))) in
                     void);
                    (assert
                    { (C_106:
                      eq_int(integer_of_int32(select(int_P_int_M,
                                              shift(la1,
                                              add_int(mul_int((0), (1)), (0))))),
                      integer_of_int32(i_0))) };
                    void);
                    void;
                    (assert
                    { (C_107:
                      eq_int(integer_of_int32(select(int_P_int_M,
                                              shift(la2,
                                              add_int(mul_int((1), (2)), (1))))),
                      integer_of_int32(i_0))) };
                    void);
                    void;
                    (assert
                    { (C_108:
                      eq_int(integer_of_int32(select(int_P_int_M,
                                              shift(la3,
                                              add_int(mul_int((2), (3)), (2))))),
                      integer_of_int32(i_0))) };
                    void);
                    void;
                    (C_109:
                    begin
                      ((free_parameter int_P_alloc_table) !la1);
                     (C_110:
                     begin
                       ((free_parameter int_P_alloc_table) !la2);
                      (C_111:
                      begin
                        ((free_parameter int_P_alloc_table) !la3);
                       (raise Return)
                      end)
                     end)
                    end)
                   end)
                  end)
                 end)
                end)
               end)
              end)
             end)
            end)
           end)
          end)
         end)
        end)
       end)
      end)
     end))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_15:
    (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1)))) }

let testg_safety =
 fun (tt : unit) ->
  { (JC_8:
    (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1)))) }
  (init:
  try
   begin
     (C_24:
     begin
       (JC_11: (fg (safe_int32_of_integer_ (5))));
      (assert
      { (C_25:
        eq_int(integer_of_int32(select(int_P_int_M,
                                shift(ga1, add_int(mul_int((0), (1)), (0))))),
        (5))) };
      void);
      void;
      (assert
      { (C_26:
        eq_int(integer_of_int32(select(int_P_int_M,
                                shift(ga2, add_int(mul_int((1), (2)), (1))))),
        (5))) };
      void);
      void;
      (assert
      { (C_27:
        eq_int(integer_of_int32(select(int_P_int_M,
                                shift(ga3, add_int(mul_int((2), (3)), (2))))),
        (5))) };
      void);
      void;
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_10:
    (valid_ga3(ga3, int_P_alloc_table, ga3, ga2, ga1)
    and (valid_ga2(ga2, int_P_alloc_table, ga3, ga2, ga1)
        and valid_ga1(ga1, int_P_alloc_table, ga3, ga2, ga1)))) }


