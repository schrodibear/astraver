rm -f addrof_field.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only addrof_field.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs addrof_field.cloc addrof_field.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{ { (C_3: { ((C_2: (C_1: s.p).int_M) = i); (return) }) }
}

Normalized expression:
(C_4: ((C_5: ((\offset_min(s)) <= 0)) && (C_6: ((\offset_max(s)) >= 0))))

Normalized expression:
(C_7: (s.p.int_M == (TODO old)))

Normalized expression:
true

Normalized expression:
{
(let S[0] s in
   {
   (let int32 __retres in
      {
      {
        (C_9:
           {
           (s = (C_8: (TODO alloc)));
             (C_12:
                {
                ((C_11: (C_10: s.i).int_M) = 0);
                  (C_15:
                     {
                     ((C_14: s.p) = (C_13: s.i));
                       (C_18:
                          {
                          gs{}(s, (C_17: (C_16: s.i).int_M));
                            (C_21:
                               {
                               (__retres = (C_20: (C_19: s.i).int_M));
                                 {
                                 (C_22: { (TODO free); (return __retres) })
                                 }
                               })
                          })
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
(C_23: (\result == 0))

Normalized expression:
true

Normalized expression:
{
{ (C_27: { ((C_26: (C_25: (C_24: s.struct_S_xM).p).int_M) = i); (return) }) }
}

Normalized expression:
(C_28:
   (((C_30: ((\offset_min(s)) <= 0)) && (C_31: ((\offset_max(s)) >= 0))) &&
      ((C_33: ((\offset_min(s.struct_S_xM)) <= 0)) &&
         (C_34: ((\offset_max(s.struct_S_xM)) >= 0)))))

Normalized expression:
(C_35: (s.struct_S_xM.p.int_M == (TODO old)))

Normalized expression:
true

Normalized expression:
{
(let S[0] s in
   {
   (let struct_S_xP[0] ps in
      {
      (let int32 __retres in
         {
         {
           (C_37:
              {
              (ps = (C_36: (TODO alloc)));
                (C_39:
                   {
                   (s = (C_38: (TODO alloc)));
                     (C_42:
                        {
                        ((C_41: (C_40: s.i).int_M) = 0);
                          (C_45:
                             {
                             ((C_44: s.p) = (C_43: s.i));
                               (C_47:
                                  {
                                  ((C_46: ps.struct_S_xM) = s);
                                    (C_50:
                                       {
                                       gps{}(ps, (C_49: (C_48: s.i).int_M));
                                         (C_53:
                                            {
                                            (__retres =
                                               (C_52: (C_51: s.i).int_M));
                                              {
                                              (C_54:
                                                 {
                                                 (TODO free);
                                                   {
                                                   (C_55:
                                                      {
                                                      (TODO free);
                                                        (return __retres)
                                                      })
                                                   }
                                                 })
                                              }
                                            })
                                       })
                                  })
                             })
                        })
                   })
              })
           }
         })
      })
   })
}

Normalized expression:
(C_56: (\result == 0))

Normalized expression:
true

Generating Why function gs
Generating Why function fs
Generating Why function gps
Generating Why function fps
cat why/addrof_field.why
type S

type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type struct_S_xP

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_8:char_P pointer.
   (forall i_6:int32.
    ((le_int((0), integer_of_int32(i_6))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_8, integer_of_int32(i_6)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_8)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_8)),
         integer_of_int32(i_6)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_9:char_P pointer.
   (forall i_7:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_7))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_9, integer_of_int32(i_7)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_9, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_9, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_7), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and lt_int(integer_of_int32(i_1),
         integer_of_int32(strlen(char_P_char_M_at_L, s_2)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_2, integer_of_int32(i_1)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_3,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_3))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and (le_int(integer_of_int32(i_2),
          integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_4, integer_of_int32(i_2)))),
             (0)))) ->
     lt_int(integer_of_int32(i_2),
     integer_of_int32(strlen(char_P_char_M_at_L, s_4)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    ((le_int((0), integer_of_int32(i_5))
     and le_int(integer_of_int32(i_5),
         integer_of_int32(strlen(char_P_char_M_at_L, s_7)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_7, integer_of_int32(i_5)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_7)),
     integer_of_int32(i_5)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and (le_int(integer_of_int32(i_3),
          integer_of_int32(strlen(char_P_char_M_at_L, s_5)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_5, integer_of_int32(i_3)))),
             (0)))) ->
     eq_int(integer_of_int32(i_3),
     integer_of_int32(strlen(char_P_char_M_at_L, s_5)))))))

logic struct_S_xP_tag:  -> struct_S_xP tag_id

axiom struct_S_xP_int : (int_of_tag(struct_S_xP_tag) = (1))

axiom struct_S_xP_parenttag_bottom : parenttag(struct_S_xP_tag, bottom_tag)

axiom struct_S_xP_tags :
 (forall x:struct_S_xP pointer.
  (forall struct_S_xP_tag_table:struct_S_xP tag_table.
   instanceof(struct_S_xP_tag_table, x, struct_S_xP_tag)))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S_i:(S,
 int_P pointer) memory) =
 ((offset_min(S_alloc_table, p) = a)
 and ((offset_max(S_alloc_table, p) = b)
     and valid_struct_int_P(select(S_i, p), (0), (0), int_P_alloc_table)))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_struct_S_xP(p:struct_S_xP pointer,
 a:int,
 b:int,
 struct_S_xP_alloc_table:struct_S_xP alloc_table) =
 ((offset_min(struct_S_xP_alloc_table, p) = a)
 and (offset_max(struct_S_xP_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_struct_S_xP(p:struct_S_xP pointer,
 a:int,
 b:int,
 struct_S_xP_alloc_table:struct_S_xP alloc_table) =
 ((offset_min(struct_S_xP_alloc_table, p) = a)
 and (offset_max(struct_S_xP_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter S_alloc_table : S alloc_table ref

parameter S_i : (S, int_P pointer) memory ref

parameter S_p : (S, int_P pointer) memory ref

parameter S_tag_table : S tag_table ref

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter alloc_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    int_P_alloc_table:int_P alloc_table ref ->
     S_i:(S,
      int_P pointer) memory ref ->
      { ge_int(n, (0))} S pointer reads S_alloc_table,S_i,int_P_alloc_table
      writes S_alloc_table,S_tag_table
      { (valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table,
         int_P_alloc_table, S_i)
        and (instanceof(S_tag_table, result, S_tag)
            and (alloc_extends(S_alloc_table@, S_alloc_table)
                and alloc_extern(S_alloc_table@, result)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_S :
 tt:unit ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    int_P_alloc_table:int_P alloc_table ref ->
     S_i:(S,
      int_P pointer) memory ref ->
      { } S pointer reads S_alloc_table,S_i,int_P_alloc_table
      writes S_alloc_table,S_tag_table
      { (valid_struct_S(result, (0), (0), S_alloc_table, int_P_alloc_table,
         S_i)
        and (instanceof(S_tag_table, result, S_tag)
            and (alloc_extends(S_alloc_table@, S_alloc_table)
                and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter struct_S_xP_alloc_table : struct_S_xP alloc_table ref

parameter struct_S_xP_tag_table : struct_S_xP tag_table ref

parameter alloc_one_struct_S_xP :
 tt:unit ->
  struct_S_xP_alloc_table:struct_S_xP alloc_table ref ->
   struct_S_xP_alloc_table:struct_S_xP alloc_table ref ->
    { } struct_S_xP pointer reads struct_S_xP_alloc_table
    writes struct_S_xP_alloc_table,struct_S_xP_tag_table
    { (valid_struct_struct_S_xP(result, (0), (0), struct_S_xP_alloc_table)
      and (instanceof(struct_S_xP_tag_table, result, struct_S_xP_tag)
          and (alloc_extends(struct_S_xP_alloc_table@,
               struct_S_xP_alloc_table)
              and alloc_extern(struct_S_xP_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_struct_S_xP :
 n:int ->
  struct_S_xP_alloc_table:struct_S_xP alloc_table ref ->
   struct_S_xP_alloc_table:struct_S_xP alloc_table ref ->
    { ge_int(n, (0))} struct_S_xP pointer reads struct_S_xP_alloc_table
    writes struct_S_xP_alloc_table,struct_S_xP_tag_table
    { (valid_struct_struct_S_xP(result, (0), sub_int(n, (1)),
       struct_S_xP_alloc_table)
      and (instanceof(struct_S_xP_tag_table, result, struct_S_xP_tag)
          and (alloc_extends(struct_S_xP_alloc_table@,
               struct_S_xP_alloc_table)
              and alloc_extern(struct_S_xP_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int_P_int_M : (int_P, int32) memory ref

parameter struct_S_xP_struct_S_xM : (struct_S_xP, S pointer) memory ref

parameter fps :
 tt:unit ->
  { (JC_12: true)} int32
  reads S_alloc_table,S_i,S_p,int_P_alloc_table,int_P_int_M,struct_S_xP_alloc_table,struct_S_xP_struct_S_xM,struct_S_xP_tag_table
  writes S_alloc_table,S_i,S_p,S_tag_table,int_P_alloc_table,int_P_int_M,int_P_tag_table,struct_S_xP_alloc_table,struct_S_xP_struct_S_xM,struct_S_xP_tag_table
  { ((true = true) -> (C_56: eq_int(integer_of_int32(result), (0)))) }

parameter fs :
 tt:unit ->
  { (JC_4: true)} int32
  reads S_alloc_table,S_i,S_p,S_tag_table,int_P_alloc_table,int_P_int_M
  writes S_alloc_table,S_i,S_p,S_tag_table,int_P_alloc_table,int_P_int_M,int_P_tag_table
  { ((true = true) -> (C_23: eq_int(integer_of_int32(result), (0)))) }

parameter gps :
 s_1:struct_S_xP pointer ->
  i_0:int32 ->
   { (C_28:
     ((C_30: le_int(offset_min(struct_S_xP_alloc_table, s_1), (0)))
     and ((C_31: ge_int(offset_max(struct_S_xP_alloc_table, s_1), (0)))
         and ((C_33:
              le_int(offset_min(S_alloc_table,
                     select(struct_S_xP_struct_S_xM, s_1)),
              (0)))
             and (C_34:
                 ge_int(offset_max(S_alloc_table,
                        select(struct_S_xP_struct_S_xM, s_1)),
                 (0)))))))}
   unit
   reads S_alloc_table,S_p,int_P_alloc_table,int_P_int_M,struct_S_xP_alloc_table,struct_S_xP_struct_S_xM,struct_S_xP_tag_table
   writes int_P_int_M
   { ((true = true) ->
      (C_35:
      eq_int(integer_of_int32(select(int_P_int_M,
                              select(S_p,
                              select(struct_S_xP_struct_S_xM, s_1)))),
      integer_of_int32(i_0)))) }

parameter gs :
 s_0:S pointer ->
  i:int32 ->
   { (C_4:
     ((C_5: le_int(offset_min(S_alloc_table, s_0), (0)))
     and (C_6: ge_int(offset_max(S_alloc_table, s_0), (0)))))}
   unit reads S_alloc_table,S_p,S_tag_table,int_P_alloc_table,int_P_int_M
   writes int_P_int_M
   { ((true = true) ->
      (C_7:
      eq_int(integer_of_int32(select(int_P_int_M, select(S_p, s_0))),
      integer_of_int32(i)))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let fps_ensures_default_3 =
 fun (tt : unit) ->
  { (JC_13: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let s_11 = ref (any_pointer void) in
     (let ps = ref (any_pointer void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_37:
     begin
       (let jessie_53 = (let jessie_52 = (C_36:
                                         (((alloc_one_struct_S_xP void) struct_S_xP_alloc_table) struct_S_xP_alloc_table)) in
                        (ps := (C_36:
                               (((alloc_one_struct_S_xP void) struct_S_xP_alloc_table) struct_S_xP_alloc_table)))) in
       void);
      (C_39:
      begin
        (let jessie_55 = (let jessie_54 = (C_38:
                                          (((((alloc_one_S void) S_alloc_table) S_alloc_table) int_P_alloc_table) S_i)) in
                         (s_11 := (C_38:
                                  (((((alloc_one_S void) S_alloc_table) S_alloc_table) int_P_alloc_table) S_i)))) in
        void);
       (C_42:
       begin
         (let jessie_58 = (let jessie_56 = ((safe_acc_ !S_i) !s_11) in
                          (let jessie_57 = (safe_int32_of_integer_ (0)) in
                          (((safe_upd_ int_P_int_M) ((safe_acc_ !S_i) !s_11)) jessie_57))) in
         void);
        (C_45:
        begin
          (let jessie_62 = (let jessie_59 = !s_11 in
                           (let jessie_60 = ((safe_acc_ !S_i) !s_11) in
                           (((safe_upd_ S_p) !s_11) jessie_60))) in
          void);
         (C_47:
         begin
           (let jessie_66 = (let jessie_63 = !ps in
                            (let jessie_64 = !s_11 in
                            (((safe_upd_ struct_S_xP_struct_S_xM) !ps) jessie_64))) in
           void);
          (C_50:
          begin
            (JC_16:
            ((gps !ps) ((safe_acc_ !int_P_int_M) ((safe_acc_ !S_i) !s_11))));
           (C_53:
           begin
             (let jessie_68 = (__retres_0 := ((safe_acc_ !int_P_int_M) 
                                              ((safe_acc_ !S_i) !s_11))) in
             void);
            (C_54:
            begin
              ((free_parameter struct_S_xP_alloc_table) !ps);
             (C_55:
             begin
               ((free_parameter S_alloc_table) !s_11);
              (jessie_returned_value := !__retres_0);
              (raise Return)
             end)
            end)
           end)
          end)
         end)
        end)
       end)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) -> (C_56: eq_int(integer_of_int32(result), (0)))) }

let fps_safety =
 fun (tt : unit) ->
  { (JC_13: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let s_11 = ref (any_pointer void) in
     (let ps = ref (any_pointer void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_37:
     begin
       (let jessie_36 = (let jessie_35 = (C_36:
                                         (((alloc_one_struct_S_xP void) struct_S_xP_alloc_table) struct_S_xP_alloc_table)) in
                        (assert
                        { ge_int(offset_max(struct_S_xP_alloc_table,
                                 jessie_35),
                          (0)) };
                        (ps := (C_36:
                               (((alloc_one_struct_S_xP void) struct_S_xP_alloc_table) struct_S_xP_alloc_table))))) in
       void);
      (C_39:
      begin
        (let jessie_38 = (let jessie_37 = (C_38:
                                          (((((alloc_one_S void) S_alloc_table) S_alloc_table) int_P_alloc_table) S_i)) in
                         (assert
                         { ge_int(offset_max(S_alloc_table, jessie_37), (0)) };
                         (s_11 := (C_38:
                                  (((((alloc_one_S void) S_alloc_table) S_alloc_table) int_P_alloc_table) S_i))))) in
        void);
       (C_42:
       begin
         (let jessie_41 = (let jessie_39 = ((safe_acc_ !S_i) !s_11) in
                          (let jessie_40 = (safe_int32_of_integer_ (0)) in
                          (((safe_upd_ int_P_int_M) ((safe_acc_ !S_i) !s_11)) jessie_40))) in
         void);
        (C_45:
        begin
          (let jessie_45 = (let jessie_42 = !s_11 in
                           (let jessie_43 = ((safe_acc_ !S_i) !s_11) in
                           (((safe_upd_ S_p) !s_11) jessie_43))) in
          void);
         (C_47:
         begin
           (let jessie_49 = (let jessie_46 = !ps in
                            (let jessie_47 = !s_11 in
                            (((safe_upd_ struct_S_xP_struct_S_xM) !ps) jessie_47))) in
           void);
          (C_50:
          begin
            (JC_15:
            ((gps !ps) ((safe_acc_ !int_P_int_M) ((safe_acc_ !S_i) !s_11))));
           (C_53:
           begin
             (let jessie_51 = (__retres_0 := ((safe_acc_ !int_P_int_M) 
                                              ((safe_acc_ !S_i) !s_11))) in
             void);
            (C_54:
            begin
              ((free_parameter struct_S_xP_alloc_table) !ps);
             (C_55:
             begin
               ((free_parameter S_alloc_table) !s_11);
              (jessie_returned_value := !__retres_0);
              (raise Return)
             end)
            end)
           end)
          end)
         end)
        end)
       end)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let fs_ensures_default_1 =
 fun (tt : unit) ->
  { (JC_5: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let s_10 = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_9:
     begin
       (let jessie_19 = (let jessie_18 = (C_8:
                                         (((((alloc_one_S void) S_alloc_table) S_alloc_table) int_P_alloc_table) S_i)) in
                        (s_10 := (C_8:
                                 (((((alloc_one_S void) S_alloc_table) S_alloc_table) int_P_alloc_table) S_i)))) in
       void);
      (C_12:
      begin
        (let jessie_22 = (let jessie_20 = ((safe_acc_ !S_i) !s_10) in
                         (let jessie_21 = (safe_int32_of_integer_ (0)) in
                         (((safe_upd_ int_P_int_M) ((safe_acc_ !S_i) !s_10)) jessie_21))) in
        void);
       (C_15:
       begin
         (let jessie_26 = (let jessie_23 = !s_10 in
                          (let jessie_24 = ((safe_acc_ !S_i) !s_10) in
                          (((safe_upd_ S_p) !s_10) jessie_24))) in
         void);
        (C_18:
        begin
          (JC_8:
          ((gs !s_10) ((safe_acc_ !int_P_int_M) ((safe_acc_ !S_i) !s_10))));
         (C_21:
         begin
           (let jessie_28 = (__retres := ((safe_acc_ !int_P_int_M) ((safe_acc_ !S_i) !s_10))) in
           void);
          (C_22:
          begin
            ((free_parameter S_alloc_table) !s_10);
           (jessie_returned_value := !__retres);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) -> (C_23: eq_int(integer_of_int32(result), (0)))) }

let fs_safety =
 fun (tt : unit) ->
  { (JC_5: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let s_10 = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_9:
     begin
       (let jessie_8 = (let jessie_7 = (C_8:
                                       (((((alloc_one_S void) S_alloc_table) S_alloc_table) int_P_alloc_table) S_i)) in
                       (assert
                       { ge_int(offset_max(S_alloc_table, jessie_7), (0)) };
                       (s_10 := (C_8:
                                (((((alloc_one_S void) S_alloc_table) S_alloc_table) int_P_alloc_table) S_i))))) in
       void);
      (C_12:
      begin
        (let jessie_11 = (let jessie_9 = ((safe_acc_ !S_i) !s_10) in
                         (let jessie_10 = (safe_int32_of_integer_ (0)) in
                         (((safe_upd_ int_P_int_M) ((safe_acc_ !S_i) !s_10)) jessie_10))) in
        void);
       (C_15:
       begin
         (let jessie_15 = (let jessie_12 = !s_10 in
                          (let jessie_13 = ((safe_acc_ !S_i) !s_10) in
                          (((safe_upd_ S_p) !s_10) jessie_13))) in
         void);
        (C_18:
        begin
          (JC_7:
          ((gs !s_10) ((safe_acc_ !int_P_int_M) ((safe_acc_ !S_i) !s_10))));
         (C_21:
         begin
           (let jessie_17 = (__retres := ((safe_acc_ !int_P_int_M) ((safe_acc_ !S_i) !s_10))) in
           void);
          (C_22:
          begin
            ((free_parameter S_alloc_table) !s_10);
           (jessie_returned_value := !__retres);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let gps_ensures_default_2 =
 fun (s_1 : struct_S_xP pointer) (i_0 : int32) ->
  { (C_28:
    ((C_30: le_int(offset_min(struct_S_xP_alloc_table, s_1), (0)))
    and ((C_31: ge_int(offset_max(struct_S_xP_alloc_table, s_1), (0)))
        and ((C_33:
             le_int(offset_min(S_alloc_table,
                    select(struct_S_xP_struct_S_xM, s_1)),
             (0)))
            and (C_34:
                ge_int(offset_max(S_alloc_table,
                       select(struct_S_xP_struct_S_xM, s_1)),
                (0))))))) }
  (init:
  try
   begin
     (C_27:
     begin
       (let jessie_34 = (let jessie_32 = ((safe_acc_ !S_p) ((safe_acc_ !struct_S_xP_struct_S_xM) s_1)) in
                        (let jessie_33 = i_0 in
                        (((safe_upd_ int_P_int_M) ((safe_acc_ !S_p) ((safe_acc_ !struct_S_xP_struct_S_xM) s_1))) jessie_33))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (C_35:
     eq_int(integer_of_int32(select(int_P_int_M,
                             select(S_p,
                             select(struct_S_xP_struct_S_xM, s_1)))),
     integer_of_int32(i_0)))) }

let gps_safety =
 fun (s_1 : struct_S_xP pointer) (i_0 : int32) ->
  { (C_28:
    ((C_30: le_int(offset_min(struct_S_xP_alloc_table, s_1), (0)))
    and ((C_31: ge_int(offset_max(struct_S_xP_alloc_table, s_1), (0)))
        and ((C_33:
             le_int(offset_min(S_alloc_table,
                    select(struct_S_xP_struct_S_xM, s_1)),
             (0)))
            and (C_34:
                ge_int(offset_max(S_alloc_table,
                       select(struct_S_xP_struct_S_xM, s_1)),
                (0))))))) }
  (init:
  try
   begin
     (C_27:
     begin
       (let jessie_31 = (let jessie_29 = (C_25:
                                         (((acc_ !S_alloc_table) !S_p) 
                                          (C_24:
                                          (((acc_ !struct_S_xP_alloc_table) !struct_S_xP_struct_S_xM) s_1)))) in
                        (let jessie_30 = i_0 in
                        (JC_11:
                        ((((upd_ !int_P_alloc_table) int_P_int_M) (C_25:
                                                                  (((acc_ !S_alloc_table) !S_p) 
                                                                   (C_24:
                                                                   (((acc_ !struct_S_xP_alloc_table) !struct_S_xP_struct_S_xM) s_1))))) jessie_30)))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let gs_ensures_default =
 fun (s_0 : S pointer) (i : int32) ->
  { (C_4:
    ((C_5: le_int(offset_min(S_alloc_table, s_0), (0)))
    and (C_6: ge_int(offset_max(S_alloc_table, s_0), (0))))) }
  (init:
  try
   begin
     (C_3:
     begin
       (let jessie_6 = (let jessie_4 = ((safe_acc_ !S_p) s_0) in
                       (let jessie_5 = i in
                       (((safe_upd_ int_P_int_M) ((safe_acc_ !S_p) s_0)) jessie_5))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (C_7:
     eq_int(integer_of_int32(select(int_P_int_M, select(S_p, s_0))),
     integer_of_int32(i)))) }

let gs_safety =
 fun (s_0 : S pointer) (i : int32) ->
  { (C_4:
    ((C_5: le_int(offset_min(S_alloc_table, s_0), (0)))
    and (C_6: ge_int(offset_max(S_alloc_table, s_0), (0))))) }
  (init:
  try
   begin
     (C_3:
     begin
       (let jessie_3 = (let jessie_1 = (C_1:
                                       (((acc_ !S_alloc_table) !S_p) s_0)) in
                       (let jessie_2 = i in
                       (JC_3:
                       ((((upd_ !int_P_alloc_table) int_P_int_M) (C_1:
                                                                 (((acc_ !S_alloc_table) !S_p) s_0))) jessie_2)))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


