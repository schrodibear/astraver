rm -f compound_local.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only compound_local.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs compound_local.cloc compound_local.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let int_P[..] tmp in
   {
   {
     (C_2:
        {
        (tmp = (C_1: s.p));
          (C_5:
             {
             ((C_4: s.p) = (C_3: s.i));
               (C_8:
                  {
                  ((C_7: (C_6: s.i).int_M) = 2);
                    (C_12:
                       {
                       ((C_11: tmp.int_M) = (C_10: (C_9: s.p).int_M));
                         (C_14:
                            {
                            ((C_13: s.p) = tmp);
                              (C_17:
                                 {
                                 ((C_16: (C_15: s.i).int_M) = 1); (return)
                                 })
                            })
                       })
                  })
             })
        })
     }
   })
}

Normalized expression:
(C_18:
   (((C_20: ((\offset_min(s)) <= 0)) && (C_21: ((\offset_max(s)) >= 0))) &&
      ((C_23: ((\offset_min(s.p)) <= 0)) && (C_24: ((\offset_max(s.p)) >= 0)))))

Normalized expression:
(C_25: ((C_26: (s.i.int_M == 1)) && (C_27: (s.p.int_M == 2))))

Normalized expression:
true

Normalized expression:
{
(let T[0] tmp in
   {
   {
     (C_29:
        {
        (tmp = (C_28: (TODO alloc)));
          (C_31:
             {
             ((C_30: tmp.ti) = 1);
               (C_33:
                  {
                  ((C_32: tmp.tj) = 2);
                    {
                    (C_36:
                       {
                       ((C_35: t.ti) = (C_34: tmp.ti));
                         (C_39: { ((C_38: t.tj) = (C_37: tmp.tj)) })
                       })
                    };
                    {
                    (C_40: { (TODO free); (return) })
                    }
                  })
             })
        })
     }
   })
}

Normalized expression:
(C_41: ((C_42: ((\offset_min(t)) <= 0)) && (C_43: ((\offset_max(t)) >= 0))))

Normalized expression:
(C_44: ((C_45: (t.ti == 1)) && (C_46: (t.tj == 2))))

Normalized expression:
true

Generating Why function f
Generating Why function fc
cat why/compound_local.why
type S

type T

type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic T_tag:  -> T tag_id

axiom T_int : (int_of_tag(T_tag) = (1))

axiom T_parenttag_bottom : parenttag(T_tag, bottom_tag)

axiom T_tags :
 (forall x:T pointer.
  (forall T_tag_table:T tag_table. instanceof(T_tag_table, x, T_tag)))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_7, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_7)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_7)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_8:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_8, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_8, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_8, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_1)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_1, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_2,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_2))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_3, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_6)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_6, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_5, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_5)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_4, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_4)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S_i:(S,
 int_P pointer) memory) =
 ((offset_min(S_alloc_table, p) = a)
 and ((offset_max(S_alloc_table, p) = b)
     and valid_struct_int_P(select(S_i, p), (0), (0), int_P_alloc_table)))

predicate valid_struct_T(p:T pointer,
 a:int,
 b:int,
 T_alloc_table:T alloc_table) =
 ((offset_min(T_alloc_table, p) = a) and (offset_max(T_alloc_table, p) = b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_variant_T(p:T pointer,
 a:int,
 b:int,
 T_alloc_table:T alloc_table) =
 ((offset_min(T_alloc_table, p) = a) and (offset_max(T_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter S_alloc_table : S alloc_table ref

parameter S_i : (S, int_P pointer) memory ref

parameter S_p : (S, int_P pointer) memory ref

parameter S_tag_table : S tag_table ref

parameter T_alloc_table : T alloc_table ref

parameter T_tag_table : T tag_table ref

parameter T_ti : (T, int32) memory ref

parameter T_tj : (T, int32) memory ref

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter alloc_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    int_P_alloc_table:int_P alloc_table ref ->
     S_i:(S,
      int_P pointer) memory ref ->
      { ge_int(n, (0))} S pointer reads S_alloc_table,S_i,int_P_alloc_table
      writes S_alloc_table,S_tag_table
      { (valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table,
         int_P_alloc_table, S_i)
        and (instanceof(S_tag_table, result, S_tag)
            and (alloc_extends(S_alloc_table@, S_alloc_table)
                and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_T :
 n:int ->
  T_alloc_table:T alloc_table ref ->
   T_alloc_table:T alloc_table ref ->
    { ge_int(n, (0))} T pointer reads T_alloc_table
    writes T_alloc_table,T_tag_table
    { (valid_struct_T(result, (0), sub_int(n, (1)), T_alloc_table)
      and (instanceof(T_tag_table, result, T_tag)
          and (alloc_extends(T_alloc_table@, T_alloc_table)
              and alloc_extern(T_alloc_table@, result)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_S :
 tt:unit ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    int_P_alloc_table:int_P alloc_table ref ->
     S_i:(S,
      int_P pointer) memory ref ->
      { } S pointer reads S_alloc_table,S_i,int_P_alloc_table
      writes S_alloc_table,S_tag_table
      { (valid_struct_S(result, (0), (0), S_alloc_table, int_P_alloc_table,
         S_i)
        and (instanceof(S_tag_table, result, S_tag)
            and (alloc_extends(S_alloc_table@, S_alloc_table)
                and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_one_T :
 tt:unit ->
  T_alloc_table:T alloc_table ref ->
   T_alloc_table:T alloc_table ref ->
    { } T pointer reads T_alloc_table writes T_alloc_table,T_tag_table
    { (valid_struct_T(result, (0), (0), T_alloc_table)
      and (instanceof(T_tag_table, result, T_tag)
          and (alloc_extends(T_alloc_table@, T_alloc_table)
              and alloc_extern(T_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int_P_int_M : (int_P, int32) memory ref

parameter f :
 s_0:S pointer ->
  { (C_18:
    ((C_20: le_int(offset_min(S_alloc_table, s_0), (0)))
    and ((C_21: ge_int(offset_max(S_alloc_table, s_0), (0)))
        and ((C_23:
             le_int(offset_min(int_P_alloc_table, select(S_p, s_0)), (0)))
            and (C_24:
                ge_int(offset_max(int_P_alloc_table, select(S_p, s_0)), (0)))))))}
  unit reads S_alloc_table,S_i,S_p,S_tag_table,int_P_alloc_table,int_P_int_M
  writes S_p,int_P_int_M
  { ((true = true) ->
     (C_25:
     ((C_26:
      eq_int(integer_of_int32(select(int_P_int_M, select(S_i, s_0))), (1)))
     and (C_27:
         eq_int(integer_of_int32(select(int_P_int_M, select(S_p, s_0))), (2)))))) }

parameter fc :
 t:T pointer ->
  { (C_41:
    ((C_42: le_int(offset_min(T_alloc_table, t), (0)))
    and (C_43: ge_int(offset_max(T_alloc_table, t), (0)))))}
  unit reads T_alloc_table,T_tag_table,T_ti,T_tj
  writes T_alloc_table,T_tag_table,T_ti,T_tj
  { ((true = true) ->
     (C_44:
     ((C_45: eq_int(integer_of_int32(select(T_ti, t)), (1)))
     and (C_46: eq_int(integer_of_int32(select(T_tj, t)), (2)))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f_ensures_default =
 fun (s_0 : S pointer) ->
  { (C_18:
    ((C_20: le_int(offset_min(S_alloc_table, s_0), (0)))
    and ((C_21: ge_int(offset_max(S_alloc_table, s_0), (0)))
        and ((C_23:
             le_int(offset_min(int_P_alloc_table, select(S_p, s_0)), (0)))
            and (C_24:
                ge_int(offset_max(int_P_alloc_table, select(S_p, s_0)), (0))))))) }
  (init:
  try
   begin
     (let tmp = ref (any_pointer void) in
     (C_2:
     begin
       (let jessie_21 = (tmp := ((safe_acc_ !S_p) s_0)) in void);
      (C_5:
      begin
        (let jessie_25 = (let jessie_22 = s_0 in
                         (let jessie_23 = ((safe_acc_ !S_i) s_0) in
                         (((safe_upd_ S_p) s_0) jessie_23))) in
        void);
       (C_8:
       begin
         (let jessie_28 = (let jessie_26 = ((safe_acc_ !S_i) s_0) in
                          (let jessie_27 = (safe_int32_of_integer_ (2)) in
                          (((safe_upd_ int_P_int_M) ((safe_acc_ !S_i) s_0)) jessie_27))) in
         void);
        (C_12:
        begin
          (let jessie_31 = (let jessie_29 = !tmp in
                           (let jessie_30 = ((safe_acc_ !int_P_int_M) 
                                             ((safe_acc_ !S_p) s_0)) in
                           (((safe_upd_ int_P_int_M) !tmp) jessie_30))) in
          void);
         (C_14:
         begin
           (let jessie_35 = (let jessie_32 = s_0 in
                            (let jessie_33 = !tmp in
                            (((safe_upd_ S_p) s_0) jessie_33))) in
           void);
          (C_17:
          begin
            (let jessie_38 = (let jessie_36 = ((safe_acc_ !S_i) s_0) in
                             (let jessie_37 = (safe_int32_of_integer_ (1)) in
                             (((safe_upd_ int_P_int_M) ((safe_acc_ !S_i) s_0)) jessie_37))) in
            void);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (C_25:
     ((C_26:
      eq_int(integer_of_int32(select(int_P_int_M, select(S_i, s_0))), (1)))
     and (C_27:
         eq_int(integer_of_int32(select(int_P_int_M, select(S_p, s_0))), (2)))))) }

let f_safety =
 fun (s_0 : S pointer) ->
  { (C_18:
    ((C_20: le_int(offset_min(S_alloc_table, s_0), (0)))
    and ((C_21: ge_int(offset_max(S_alloc_table, s_0), (0)))
        and ((C_23:
             le_int(offset_min(int_P_alloc_table, select(S_p, s_0)), (0)))
            and (C_24:
                ge_int(offset_max(int_P_alloc_table, select(S_p, s_0)), (0))))))) }
  (init:
  try
   begin
     (let tmp = ref (any_pointer void) in
     (C_2:
     begin
       (let jessie_2 = (tmp := (C_1: (((acc_ !S_alloc_table) !S_p) s_0))) in
       void);
      (C_5:
      begin
        (let jessie_6 = (let jessie_3 = s_0 in
                        (let jessie_4 = (C_3:
                                        (((acc_ !S_alloc_table) !S_i) s_0)) in
                        (JC_3: ((((upd_ !S_alloc_table) S_p) s_0) jessie_4)))) in
        void);
       (C_8:
       begin
         (let jessie_9 = (let jessie_7 = (C_6:
                                         (((acc_ !S_alloc_table) !S_i) s_0)) in
                         (let jessie_8 = (safe_int32_of_integer_ (2)) in
                         (((safe_upd_ int_P_int_M) (C_6:
                                                   (((acc_ !S_alloc_table) !S_i) s_0))) jessie_8))) in
         void);
        (C_12:
        begin
          (let jessie_12 = (let jessie_10 = !tmp in
                           (let jessie_11 = (C_10:
                                            (((acc_ !int_P_alloc_table) !int_P_int_M) 
                                             (C_9:
                                             (((acc_ !S_alloc_table) !S_p) s_0)))) in
                           (JC_4:
                           ((((upd_ !int_P_alloc_table) int_P_int_M) !tmp) jessie_11)))) in
          void);
         (C_14:
         begin
           (let jessie_16 = (let jessie_13 = s_0 in
                            (let jessie_14 = !tmp in
                            (JC_5:
                            ((((upd_ !S_alloc_table) S_p) s_0) jessie_14)))) in
           void);
          (C_17:
          begin
            (let jessie_19 = (let jessie_17 = (C_15:
                                              (((acc_ !S_alloc_table) !S_i) s_0)) in
                             (let jessie_18 = (safe_int32_of_integer_ (1)) in
                             (((safe_upd_ int_P_int_M) (C_15:
                                                       (((acc_ !S_alloc_table) !S_i) s_0))) jessie_18))) in
            void);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let fc_ensures_default_1 =
 fun (t : T pointer) ->
  { (C_41:
    ((C_42: le_int(offset_min(T_alloc_table, t), (0)))
    and (C_43: ge_int(offset_max(T_alloc_table, t), (0))))) }
  (init:
  try
   begin
     (let tmp_0 = ref (any_pointer void) in
     (C_29:
     begin
       (let jessie_54 = (let jessie_53 = (C_28:
                                         (((alloc_one_T void) T_alloc_table) T_alloc_table)) in
                        (tmp_0 := (C_28:
                                  (((alloc_one_T void) T_alloc_table) T_alloc_table)))) in
       void);
      (C_31:
      begin
        (let jessie_57 = (let jessie_55 = !tmp_0 in
                         (let jessie_56 = (safe_int32_of_integer_ (1)) in
                         (((safe_upd_ T_ti) !tmp_0) jessie_56))) in
        void);
       (C_33:
       begin
         (let jessie_60 = (let jessie_58 = !tmp_0 in
                          (let jessie_59 = (safe_int32_of_integer_ (2)) in
                          (((safe_upd_ T_tj) !tmp_0) jessie_59))) in
         void);
        (let jessie_66 = (C_36:
                         begin
                           (let jessie_63 = (let jessie_61 = t in
                                            (let jessie_62 = ((safe_acc_ !T_ti) !tmp_0) in
                                            (((safe_upd_ T_ti) t) jessie_62))) in
                           void);
                          (C_39:
                          (let jessie_64 = t in
                          (let jessie_65 = ((safe_acc_ !T_tj) !tmp_0) in
                          begin
                            (((safe_upd_ T_tj) t) jessie_65);
                           ((safe_acc_ !T_tj) jessie_64)
                          end)))
                         end) in
        void);
        (C_40:
        begin   ((free_parameter T_alloc_table) !tmp_0); (raise Return) end)
       end)
      end)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (C_44:
     ((C_45: eq_int(integer_of_int32(select(T_ti, t)), (1)))
     and (C_46: eq_int(integer_of_int32(select(T_tj, t)), (2)))))) }

let fc_safety =
 fun (t : T pointer) ->
  { (C_41:
    ((C_42: le_int(offset_min(T_alloc_table, t), (0)))
    and (C_43: ge_int(offset_max(T_alloc_table, t), (0))))) }
  (init:
  try
   begin
     (let tmp_0 = ref (any_pointer void) in
     (C_29:
     begin
       (let jessie_40 = (let jessie_39 = (C_28:
                                         (((alloc_one_T void) T_alloc_table) T_alloc_table)) in
                        (assert
                        { ge_int(offset_max(T_alloc_table, jessie_39), (0)) };
                        (tmp_0 := (C_28:
                                  (((alloc_one_T void) T_alloc_table) T_alloc_table))))) in
       void);
      (C_31:
      begin
        (let jessie_43 = (let jessie_41 = !tmp_0 in
                         (let jessie_42 = (safe_int32_of_integer_ (1)) in
                         (((safe_upd_ T_ti) !tmp_0) jessie_42))) in
        void);
       (C_33:
       begin
         (let jessie_46 = (let jessie_44 = !tmp_0 in
                          (let jessie_45 = (safe_int32_of_integer_ (2)) in
                          (((safe_upd_ T_tj) !tmp_0) jessie_45))) in
         void);
        (let jessie_52 = (C_36:
                         begin
                           (let jessie_49 = (let jessie_47 = t in
                                            (let jessie_48 = ((safe_acc_ !T_ti) !tmp_0) in
                                            (JC_8:
                                            ((((upd_ !T_alloc_table) T_ti) t) jessie_48)))) in
                           void);
                          (C_39:
                          (let jessie_50 = t in
                          (let jessie_51 = ((safe_acc_ !T_tj) !tmp_0) in
                          begin
                            (JC_9:
                            ((((upd_ !T_alloc_table) T_tj) t) jessie_51));
                           ((safe_acc_ !T_tj) jessie_50)
                          end)))
                         end) in
        void);
        (C_40:
        begin   ((free_parameter T_alloc_table) !tmp_0); (raise Return) end)
       end)
      end)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


