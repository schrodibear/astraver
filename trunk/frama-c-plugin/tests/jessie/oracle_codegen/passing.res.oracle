rm -f passing.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only passing.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs passing.cloc passing.jc
Normalized expression:
(((\offset_min(t)) <= 0) && ((\offset_max(t)) >= 1))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{ { (C_2: { ((C_1: x.int_M) = 0); (return) }) }
}

Normalized expression:
(C_3: ((C_4: ((\offset_min(x)) <= 0)) && (C_5: ((\offset_max(x)) >= 0))))

Normalized expression:
(C_6: (x.int_M == 0))

Normalized expression:
x.int_M

Normalized expression:
true

Normalized expression:
{
(let int32 __retres in
   {
   {
     (C_7:
        {
        g{}(r); (C_9: { (__retres = (C_8: r.int_M)); (return __retres) })
        })
     }
   })
}

Normalized expression:
(C_10: ((C_11: ((\offset_min(r)) <= 0)) && (C_12: ((\offset_max(r)) >= 0))))

Normalized expression:
(C_13: (\result == 0))

Normalized expression:
true

Normalized expression:
{ { (C_16: { ((C_15: (C_14: (x + 0)).int_M) = 1); (return) }) }
}

Normalized expression:
(C_17: ((C_18: ((\offset_min(x)) <= 0)) && (C_19: ((\offset_max(x)) >= 0))))

Normalized expression:
(C_20: ((x + 0).int_M == 1))

Normalized expression:
(x + 0).int_M

Normalized expression:
true

Normalized expression:
{ { (C_21: { __globinit_whole_program{}(); (C_22: { f{}(t); (return) }) }) }
}

Normalized expression:
(C_23: ((t + 0).int_M == 1))

Normalized expression:
true

Normalized expression:
{
{
  (C_25:
     {
     (t = (C_24: (TODO alloc)));
       (C_26:
          {
          (r = null);
            {
            (C_28: { ((C_27: (t + 0).int_M) = 0); (); () })
            };
            {
            (C_30: { ((C_29: (t + 1).int_M) = 0); (); () })
            }
          })
     })
  }
}

Generating Why function g
Generating Why function g2
Generating Why function f
Generating Why function main
Generating Why function __globinit_whole_program
cat why/passing.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_t(t:int_P pointer,
 int_P_alloc_table:int_P alloc_table,
 t:int_P pointer,
 r:int_P pointer) =
 (le_int(offset_min(int_P_alloc_table, t), (0))
 and ge_int(offset_max(int_P_alloc_table, t), (1)))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter t : int_P pointer ref

parameter int_P_alloc_table : int_P alloc_table ref

parameter r : int_P pointer ref

parameter int_P_tag_table : int_P tag_table ref

parameter int_P_int_M : (int_P, int32) memory ref

parameter __globinit_whole_program :
 tt:unit ->
  { (JC_29: valid_t(t, int_P_alloc_table, t, r))} unit
  reads int_P_alloc_table
  writes int_P_alloc_table,int_P_int_M,int_P_tag_table,r,t
  { (JC_31: valid_t(t, int_P_alloc_table, t, r)) }

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter f :
 x_0:int_P pointer ->
  { (JC_14:
    ((C_17:
     ((C_18: le_int(offset_min(int_P_alloc_table, x_0), (0)))
     and (C_19: ge_int(offset_max(int_P_alloc_table, x_0), (0)))))
    and valid_t(t, int_P_alloc_table, t, r)))}
  unit reads int_P_alloc_table,int_P_int_M,int_P_tag_table,r,t
  writes int_P_int_M
  { ((JC_16: valid_t(t, int_P_alloc_table, t, r))
    and ((true = true) ->
         (JC_19:
         ((JC_18:
          ((C_20:
           eq_int(integer_of_int32(select(int_P_int_M, shift(x_0, (0)))),
           (1)))
          and valid_t(t, int_P_alloc_table, t, r)))
         and (JC_17:
             not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
             pset_range(pset_singleton(x_0), (0), (0)))))))) }

parameter g :
 x:int_P pointer ->
  { (JC_1:
    ((C_3:
     ((C_4: le_int(offset_min(int_P_alloc_table, x), (0)))
     and (C_5: ge_int(offset_max(int_P_alloc_table, x), (0)))))
    and valid_t(t, int_P_alloc_table, t, r)))}
  unit reads int_P_alloc_table,int_P_int_M,int_P_tag_table,r,t
  writes int_P_int_M
  { ((JC_3: valid_t(t, int_P_alloc_table, t, r))
    and ((true = true) ->
         (JC_6:
         ((JC_5:
          ((C_6: eq_int(integer_of_int32(select(int_P_int_M, x)), (0)))
          and valid_t(t, int_P_alloc_table, t, r)))
         and (JC_4:
             not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
             pset_singleton(x))))))) }

parameter g2 :
 tt:unit ->
  { (JC_8:
    ((C_10:
     ((C_11: le_int(offset_min(int_P_alloc_table, r), (0)))
     and (C_12: ge_int(offset_max(int_P_alloc_table, r), (0)))))
    and valid_t(t, int_P_alloc_table, t, r)))}
  int32 reads int_P_alloc_table,int_P_int_M,int_P_tag_table,r,t
  writes int_P_int_M
  { ((JC_10: valid_t(t, int_P_alloc_table, t, r))
    and ((true = true) ->
         (JC_11:
         ((C_13: eq_int(integer_of_int32(result), (0)))
         and valid_t(t, int_P_alloc_table, t, r))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter main :
 tt:unit ->
  { (JC_21: valid_t(t, int_P_alloc_table, t, r))} unit
  reads int_P_alloc_table,int_P_int_M,int_P_tag_table
  writes int_P_alloc_table,int_P_int_M,int_P_tag_table,r,t
  { ((JC_23: valid_t(t, int_P_alloc_table, t, r))
    and ((true = true) ->
         (JC_24:
         ((C_23:
          eq_int(integer_of_int32(select(int_P_int_M, shift(t, (0)))), (1)))
         and valid_t(t, int_P_alloc_table, t, r))))) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let __globinit_whole_program_safety =
 fun (tt : unit) ->
  { (JC_29: valid_t(t, int_P_alloc_table, t, r)) }
  (init:
  try
   begin
     (C_25:
     begin
       (let jessie_20 = (let jessie_19 = (C_24:
                                         (((alloc_int_P (2)) int_P_alloc_table) int_P_alloc_table)) in
                        (assert
                        { ge_int(offset_max(int_P_alloc_table, jessie_19),
                          (1)) };
                        (t := (C_24:
                              (((alloc_int_P (2)) int_P_alloc_table) int_P_alloc_table))))) in
       void);
      (C_26:
      begin
        (let jessie_22 = (r := null) in void);
       (C_28:
       begin
         (let jessie_25 = (let jessie_23 = ((shift !t) (0)) in
                          (let jessie_24 = (safe_int32_of_integer_ (0)) in
                          (((safe_upd_ int_P_int_M) ((shift !t) (0))) jessie_24))) in
         void);
        void;
        void
       end);
       (C_30:
       begin
         (let jessie_28 = (let jessie_26 = ((shift !t) (1)) in
                          (let jessie_27 = (safe_int32_of_integer_ (0)) in
                          (((safe_upd_ int_P_int_M) ((shift !t) (1))) jessie_27))) in
         void);
        void;
        void
       end)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_31: valid_t(t, int_P_alloc_table, t, r)) }

let f_ensures_default_2 =
 fun (x_0 : int_P pointer) ->
  { (JC_14:
    ((C_17:
     ((C_18: le_int(offset_min(int_P_alloc_table, x_0), (0)))
     and (C_19: ge_int(offset_max(int_P_alloc_table, x_0), (0)))))
    and valid_t(t, int_P_alloc_table, t, r))) }
  (init:
  try
   begin
     (C_16:
     begin
       (let jessie_16 = (let jessie_14 = (C_14: ((shift x_0) (0))) in
                        (let jessie_15 = (safe_int32_of_integer_ (1)) in
                        (((safe_upd_ int_P_int_M) (C_14: ((shift x_0) (0)))) jessie_15))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_19:
     ((JC_18:
      ((C_20:
       eq_int(integer_of_int32(select(int_P_int_M, shift(x_0, (0)))), (1)))
      and valid_t(t, int_P_alloc_table, t, r)))
     and (JC_17:
         not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
         pset_range(pset_singleton(x_0), (0), (0))))))) }

let f_safety =
 fun (x_0 : int_P pointer) ->
  { (JC_14:
    ((C_17:
     ((C_18: le_int(offset_min(int_P_alloc_table, x_0), (0)))
     and (C_19: ge_int(offset_max(int_P_alloc_table, x_0), (0)))))
    and valid_t(t, int_P_alloc_table, t, r))) }
  (init:
  try
   begin
     (C_16:
     begin
       (let jessie_13 = (let jessie_11 = (C_14: ((shift x_0) (0))) in
                        (let jessie_12 = (safe_int32_of_integer_ (1)) in
                        (JC_20:
                        ((((upd_ !int_P_alloc_table) int_P_int_M) x_0) jessie_12)))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_16: valid_t(t, int_P_alloc_table, t, r)) }

let g2_ensures_default_1 =
 fun (tt : unit) ->
  { (JC_8:
    ((C_10:
     ((C_11: le_int(offset_min(int_P_alloc_table, r), (0)))
     and (C_12: ge_int(offset_max(int_P_alloc_table, r), (0)))))
    and valid_t(t, int_P_alloc_table, t, r))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (C_7:
     begin
       (JC_13: (g !r));
      (C_9:
      begin
        (let jessie_10 = (__retres := ((safe_acc_ !int_P_int_M) !r)) in void);
       (jessie_returned_value := !__retres);
       (raise Return)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_11:
     ((C_13: eq_int(integer_of_int32(result), (0)))
     and valid_t(t, int_P_alloc_table, t, r)))) }

let g2_safety =
 fun (tt : unit) ->
  { (JC_8:
    ((C_10:
     ((C_11: le_int(offset_min(int_P_alloc_table, r), (0)))
     and (C_12: ge_int(offset_max(int_P_alloc_table, r), (0)))))
    and valid_t(t, int_P_alloc_table, t, r))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (C_7:
     begin
       (JC_12: (g !r));
      (C_9:
      begin
        (let jessie_8 = (__retres := (C_8:
                                     (((acc_ !int_P_alloc_table) !int_P_int_M) !r))) in
        void);
       (jessie_returned_value := !__retres);
       (raise Return)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_10: valid_t(t, int_P_alloc_table, t, r)) }

let g_ensures_default =
 fun (x : int_P pointer) ->
  { (JC_1:
    ((C_3:
     ((C_4: le_int(offset_min(int_P_alloc_table, x), (0)))
     and (C_5: ge_int(offset_max(int_P_alloc_table, x), (0)))))
    and valid_t(t, int_P_alloc_table, t, r))) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_6 = (let jessie_4 = x in
                       (let jessie_5 = (safe_int32_of_integer_ (0)) in
                       (((safe_upd_ int_P_int_M) x) jessie_5))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_6:
     ((JC_5:
      ((C_6: eq_int(integer_of_int32(select(int_P_int_M, x)), (0)))
      and valid_t(t, int_P_alloc_table, t, r)))
     and (JC_4:
         not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
         pset_singleton(x)))))) }

let g_safety =
 fun (x : int_P pointer) ->
  { (JC_1:
    ((C_3:
     ((C_4: le_int(offset_min(int_P_alloc_table, x), (0)))
     and (C_5: ge_int(offset_max(int_P_alloc_table, x), (0)))))
    and valid_t(t, int_P_alloc_table, t, r))) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_3 = (let jessie_1 = x in
                       (let jessie_2 = (safe_int32_of_integer_ (0)) in
                       (JC_7:
                       ((((upd_ !int_P_alloc_table) int_P_int_M) x) jessie_2)))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_3: valid_t(t, int_P_alloc_table, t, r)) }

let main_ensures_default_3 =
 fun (tt : unit) ->
  { (JC_21: valid_t(t, int_P_alloc_table, t, r)) }
  (init:
  try
   begin
     (C_21:
     begin
       (JC_27: (__globinit_whole_program void));
      (C_22: begin   (JC_28: (f !t)); (raise Return) end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_24:
     ((C_23:
      eq_int(integer_of_int32(select(int_P_int_M, shift(t, (0)))), (1)))
     and valid_t(t, int_P_alloc_table, t, r)))) }

let main_safety =
 fun (tt : unit) ->
  { (JC_21: valid_t(t, int_P_alloc_table, t, r)) }
  (init:
  try
   begin
     (C_21:
     begin
       (JC_25: (__globinit_whole_program void));
      (C_22: begin   (JC_26: (f !t)); (raise Return) end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_23: valid_t(t, int_P_alloc_table, t, r)) }


