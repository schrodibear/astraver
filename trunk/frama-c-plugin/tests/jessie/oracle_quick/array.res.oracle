rm -f array.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only array.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat array.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 foo(int_P[..] arr, int32 n)
{  
   (var int32 i);
   
   {  (C_1 : (i = 0));
      
      {  
         invariant (C_2 : true);
         while (true)
         {  
            {  (if (i < n) then (C_5 : ((C_4 : (C_3 : (arr + i)).int_M) = 0)) else ());
               (C_8 : (i = (C_7 : ((C_6 : (i + 1)) :> int32))))
            }
         }
      };
      
      (return i)
   }
}

unit f(int32 i, int32 j, int32 k)
{  
   {  (C_9 : (j = 0));
      (C_10 : (k = 10));
      (C_11 : (i = 0));
      
      {  
         invariant (C_12 : true);
         while (true)
         {  
            {  (if (i < 10) then () else 
               (goto while_1_break));
               (C_15 : (j = (C_14 : ((C_13 : (j + 1)) :> int32))));
               (C_18 : (k = (C_17 : ((C_16 : (k - 1)) :> int32))));
               (C_21 : (i = (C_20 : ((C_19 : (i + 1)) :> int32))))
            }
         };
         (while_1_break : ())
      };
      
      (return ())
   }
}
