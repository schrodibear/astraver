rm -f init.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only init.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat init.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_s :
((\offset_min(s) <= 0) && (\offset_max(s) >= 0))

invariant valid_t :
((\offset_min(t) <= 0) && (\offset_max(t) >= 2))

tag S = {
  int32 a; 
  int_P[0..2] b;
}

type S = [S]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 x;

int_P[0..2] t;

invariant t_const :
((t + 1).int_M == 2)

S[0] s;

invariant s_const :
(((s.b + 0).int_M == 1) && ((s.b + 2).int_M == 4))

int32 f()
behavior default:
  assumes true;
  ensures (C_12 : (\result == 7));
{  
   (var int32 y);
   
   (var int32 __retres);
   
   {  (C_1 : (y = x));
      (C_11 : (__retres = (C_10 : ((C_9 : ((C_8 : ((C_7 : ((C_6 : (t + 1).int_M) +
                                                            (C_5 : ((C_4 : s.b) +
                                                                    0).int_M))) :> int32)) +
                                            (C_3 : ((C_2 : s.b) + 2).int_M))) :> int32))));
      
      (return __retres)
   }
}

int32 g()
behavior default_1:
  assumes true;
  ensures (C_23 : (\result == 4));
{  
   (var int_P[0..1] t_0);
   
   (var int32 x_0);
   
   (var int32 __retres);
   
   {  (C_14 : (t_0 = (C_13 : (new int_P[2]))));
      (C_16 : ((C_15 : (t_0 + 0).int_M) = 4));
      (C_18 : ((C_17 : (t_0 + 1).int_M) = 5));
      (C_19 : (x_0 = 45));
      (C_21 : (__retres = (C_20 : (t_0 + 0).int_M)));
      
      {  (C_22 : (free(t_0)));
         
         (return __retres)
      }
   }
}

int32 h()
behavior default_2:
  assumes true;
  ensures (C_41 : (\result == 12));
{  
   (var int_P[0..2] u);
   
   (var int32 __retres);
   
   {  (C_25 : (u = (C_24 : (new int_P[3]))));
      (C_27 : ((C_26 : (u + 0).int_M) = 3));
      (C_29 : ((C_28 : (u + 1).int_M) = 4));
      (C_31 : ((C_30 : (u + 2).int_M) = 5));
      (C_39 : (__retres = (C_38 : ((C_37 : ((C_36 : ((C_35 : ((C_34 : 
                                                              (u + 0).int_M) +
                                                               (C_33 : 
                                                               (u +
                                                                 1).int_M))) :> int32)) +
                                             (C_32 : (u + 2).int_M))) :> int32))));
      
      {  (C_40 : (free(u)));
         
         (return __retres)
      }
   }
}
