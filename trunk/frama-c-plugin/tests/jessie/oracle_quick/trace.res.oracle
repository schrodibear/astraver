rm -f trace.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only trace.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat trace.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

tag S = {
  int32 f;
}

type S = [S]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

unit trace(S[..] this)
behavior default:
  assumes true;
  ensures (C_3 : (this.f == 0));
{  
   {  (C_2 : ((C_1 : this.f) = 0));
      
      (return ())
   }
}

int32 m1(int32 x)
  requires (C_10 : (x > 0));
{  
   (var int32 __retres);
   
   {  
      {  
         (assert (C_4 : ((C_5 : (x >= 0)) && (C_6 : (x < 9)))));
         ()
      };
      (C_9 : (__retres = (C_8 : ((C_7 : (x + 1)) :> int32))));
      
      (return __retres)
   }
}

int32 m2(int32 x)
  requires (C_18 : ((C_19 : (0 < x)) &&
                     ((C_21 : (x < 100)) &&
                       ((C_23 : (100 < 200)) && (C_24 : (200 < 300))))));
behavior default_1:
  assumes true;
  ensures (C_25 : ((((C_28 : (0 < x)) && (C_29 : (x < 100))) &&
                     (C_30 : (\result != 0))) &&
                    (C_31 : (\result > 10))));
{  
   (var int32 y);
   
   (var int32 __retres);
   
   {  (if (x < 50) then 
      {  (C_16 : (__retres = (C_15 : ((C_14 : (x + 1)) :> int32))));
         
         (goto return_label)
      } else (C_13 : (y = (C_12 : ((C_11 : (x - 1)) :> int32)))));
      (C_17 : (__retres = y));
      (return_label : 
      (return __retres))
   }
}

int32 m3(int32 x)
  requires (C_34 : ((C_35 : (x >= 0)) && (C_36 : (x < 50))));
{  
   (var int32 tmp);
   
   {  (C_33 : (tmp = (C_32 : m2(x))));
      
      (return tmp)
   }
}

unit m4(int32 x)
{  
   (var int32 y);
   
   {  (C_37 : (y = x));
      
      {  
         invariant (C_38 : ((C_39 : (0 <= y)) && (C_40 : (y <= x))));
         variant (C_41 : y);
         while (true)
         {  
            {  (if (y > 0) then () else 
               (goto while_0_break));
               (C_44 : (y = (C_43 : ((C_42 : (y - 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      (return ())
   }
}

unit m5(int32 x)
{  
   (var int32 y);
   
   {  (C_45 : (y = x));
      
      {  
         invariant (C_46 : (y == x));
         variant (C_47 : y);
         while (true)
         {  
            {  (if (y > 0) then () else 
               (goto while_1_break));
               (C_50 : (y = (C_49 : ((C_48 : (y - 1)) :> int32))))
            }
         };
         (while_1_break : ())
      };
      
      (return ())
   }
}

int8 m6(int8 x)
{  
   (var int8 __retres);
   
   {  (C_57 : (x = (C_56 : ((C_55 : ((C_54 : (x :> int32)) +
                                      (C_53 : ((C_52 : ((C_51 : (x :> int32)) +
                                                         1)) :> int32)))) :> int8))));
      (C_61 : (x = (C_60 : ((C_59 : ((C_58 : (x :> int32)) + 1)) :> int8))));
      (C_65 : (__retres = (C_64 : ((C_63 : ((C_62 : (x :> int32)) + 2)) :> int8))));
      
      (return __retres)
   }
}

int32 m7(S[..] p)
{  
   (var int32 __retres);
   
   {  (C_67 : (__retres = (C_66 : p.f)));
      
      (return __retres)
   }
}

unit m8(S[..] p)
behavior default_2:
  assumes true;
  assigns p.f;
  ensures (C_70 : (p.f == 0));
{  
   {  (C_69 : ((C_68 : p.f) = 0));
      
      (return ())
   }
}
