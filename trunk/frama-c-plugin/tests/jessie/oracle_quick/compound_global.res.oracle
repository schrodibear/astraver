rm -f compound_global.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only compound_global.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat compound_global.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_gs :
((\offset_min(gs) <= 0) && (\offset_max(gs) >= 0))

invariant valid_gt :
((\offset_min(gt) <= 0) && (\offset_max(gt) >= 0))

tag T = {
  int32 ti; 
  int32 tj;
}

type T = [T]

tag S = {
  int32 i; 
  int_P[..] p;
}

type S = [S]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

T[0] gt;

invariant gt :
((gt.ti == 1) && (gt.tj == 2))

unit fc(T[..] t)
  requires (C_7 : ((C_8 : (\offset_min(t) <= 0)) &&
                    (C_9 : (\offset_max(t) >= 0))));
behavior default:
  assumes true;
  ensures (C_10 : ((C_11 : (t.ti == 1)) && (C_12 : (t.tj == 2))));
{  
   {  
      {  (C_3 : ((C_2 : t.ti) = (C_1 : gt.ti)));
         (C_6 : ((C_5 : t.tj) = (C_4 : gt.tj)))
      };
      
      (return ())
   }
}

S[0] gs;

invariant gt2 :
((gs.i == 1) && ((gs.p - null) == 0))

unit fcp(S[..] s)
  requires (C_19 : ((C_20 : (\offset_min(s) <= 0)) &&
                     (C_21 : (\offset_max(s) >= 0))));
behavior default_1:
  assumes true;
  ensures (C_22 : ((C_23 : (s.i == 1)) && (C_24 : ((s.p - null) == 0))));
{  
   {  
      {  (C_15 : ((C_14 : s.i) = (C_13 : gs.i)));
         (C_18 : ((C_17 : s.p) = (C_16 : gs.p)))
      };
      
      (return ())
   }
}
