rm -f fs249.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only fs249.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat fs249.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_t :
((\offset_min(t) <= 0) && (\offset_max(t) >= 9))

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 x;

int_P[..] p;

int_P[0..9] t;

unit CEA_F(int32 unnamed)
behavior generated:
  assumes true;
  assigns \nothing;
  ensures (C_1 : true);
;

unit main()
{  
   (var int32 y);
   
   {  (C_2 : __globinit_whole_program());
      (C_4 : (y = (C_3 : (0 :> int32))));
      (C_7 : ((C_6 : (t + 1).int_M) = (C_5 : (y :> int32))));
      (C_12 : CEA_F((C_11 : ((C_10 : ((C_9 : (t + 1).int_M) -
                                       (C_8 : (y :> int32)))) :> int32))));
      
      {  (C_14 : ((C_13 : (t + 0).int_M) = 0));
         ();
         ()
      };
      (C_19 : CEA_F((C_18 : ((C_17 : ((C_16 : (t + 1).int_M) -
                                       (C_15 : (y :> int32)))) :> int32))));
      
      (return ())
   }
}

unit __globinit_whole_program()
{  
   {  (C_21 : (t = (C_20 : (new int_P[10]))))
   }
}
