rm -f array_ptr.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only array_ptr.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat array_ptr.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_ga :
((\offset_min(ga) <= 0) && (\offset_max(ga) >= 9))

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int_P[0..9] ga;

unit init()
behavior default:
  assumes true;
  ensures (C_10 : (\forall int32 i;
                    (((0 <= i) && (i < 10)) ==> ((ga + i).int_M == i))));
{  
   (var int32 i);
   
   {  (C_1 : (i = 0));
      
      {  
         invariant (C_2 : ((C_3 : (i >= 0)) &&
                            (C_4 : (\forall int32 k;
                                     (((0 <= k) && (k < i)) ==>
                                       ((ga + k).int_M == k))))));
         while (true)
         {  
            {  (if (i < 10) then () else 
               (goto while_0_break));
               (C_6 : ((C_5 : (ga + i).int_M) = i));
               (C_9 : (i = (C_8 : ((C_7 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      (return ())
   }
}

unit initp()
behavior default_1:
  assumes true;
  ensures (C_22 : (\forall int32 i;
                    (((0 <= i) && (i < 10)) ==> ((ga + i).int_M == i))));
{  
   (var int32 i);
   
   (var int_P[..] p);
   
   {  (C_11 : (p = ga));
      (C_12 : (i = 0));
      
      {  
         invariant (C_13 : ((C_14 : (i >= 0)) &&
                             (C_15 : (\forall int32 k;
                                       (((0 <= k) && (k < i)) ==>
                                         ((ga + k).int_M == k))))));
         while (true)
         {  
            {  (if (i < 10) then () else 
               (goto while_1_break));
               (C_18 : ((C_17 : (C_16 : (p + i)).int_M) = i));
               (C_21 : (i = (C_20 : ((C_19 : (i + 1)) :> int32))))
            }
         };
         (while_1_break : ())
      };
      
      (return ())
   }
}

unit initparith()
behavior default_2:
  assumes true;
  ensures (C_37 : (\forall int32 i;
                    (((0 <= i) && (i < 10)) ==> ((ga + i).int_M == i))));
{  
   (var int32 i);
   
   (var int_P[..] p);
   
   {  (C_23 : (p = ga));
      (C_24 : (i = 0));
      
      {  
         invariant (C_25 : (((C_27 : (i >= 0)) &&
                              (C_28 : ((p - (ga + i)) == 0))) &&
                             (C_29 : (\forall int32 k;
                                       (((0 <= k) && (k < i)) ==>
                                         ((ga + k).int_M == k))))));
         while (true)
         {  
            {  (if (i < 10) then () else 
               (goto while_2_break));
               (C_31 : ((C_30 : p.int_M) = i));
               (C_34 : (i = (C_33 : ((C_32 : (i + 1)) :> int32))));
               (C_36 : (p = (C_35 : (p + 1))))
            }
         };
         (while_2_break : ())
      };
      
      (return ())
   }
}
