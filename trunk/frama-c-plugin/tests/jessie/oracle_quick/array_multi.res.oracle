rm -f array_multi.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only array_multi.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat array_multi.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_ga3 :
((\offset_min(ga3) <= 0) && (\offset_max(ga3) >= 8))

invariant valid_ga2 :
((\offset_min(ga2) <= 0) && (\offset_max(ga2) >= 3))

invariant valid_ga1 :
((\offset_min(ga1) <= 0) && (\offset_max(ga1) >= 0))

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int_P[0] ga1;

int_P[0..3] ga2;

int_P[0..8] ga3;

unit fg(int32 i)
behavior default:
  assumes true;
  ensures (C_19 : ((C_20 : ((ga1 + ((0 * 1) + 0)).int_M == i)) &&
                    ((C_22 : ((ga2 + ((1 * 2) + 1)).int_M == i)) &&
                      (C_23 : ((ga3 + ((2 * 3) + 2)).int_M == i)))));
{  
   {  (C_6 : ((C_5 : (ga1 +
                       (C_4 : ((C_3 : ((C_2 : ((C_1 : (0 * 1)) :> int32)) +
                                        0)) :> int32))).int_M) = i));
      (C_12 : ((C_11 : (ga2 +
                         (C_10 : ((C_9 : ((C_8 : ((C_7 : (1 * 2)) :> int32)) +
                                           1)) :> int32))).int_M) = i));
      (C_18 : ((C_17 : (ga3 +
                         (C_16 : ((C_15 : ((C_14 : ((C_13 : (2 * 3)) :> int32)) +
                                            2)) :> int32))).int_M) = i));
      
      (return ())
   }
}

unit testg()
{  
   {  (C_24 : fg(5));
      
      {  
         (assert (C_25 : ((ga1 + ((0 * 1) + 0)).int_M == 5)));
         ()
      };
      
      {  
         (assert (C_26 : ((ga2 + ((1 * 2) + 1)).int_M == 5)));
         ()
      };
      
      {  
         (assert (C_27 : ((ga3 + ((2 * 3) + 2)).int_M == 5)));
         ()
      };
      
      (return ())
   }
}

unit lg(int32 i)
{  
   (var int_P[0] la1);
   
   (var int_P[0..3] la2);
   
   (var int_P[0..8] la3);
   
   {  (C_29 : (la1 = (C_28 : (new int_P[1]))));
      (C_31 : (la2 = (C_30 : (new int_P[4]))));
      (C_33 : (la3 = (C_32 : (new int_P[9]))));
      (C_39 : ((C_38 : (la3 +
                         (C_37 : ((C_36 : ((C_35 : ((C_34 : (0 * 3)) :> int32)) +
                                            0)) :> int32))).int_M) = 0));
      (C_45 : ((C_44 : (la3 +
                         (C_43 : ((C_42 : ((C_41 : ((C_40 : (0 * 3)) :> int32)) +
                                            1)) :> int32))).int_M) = 0));
      (C_51 : ((C_50 : (la3 +
                         (C_49 : ((C_48 : ((C_47 : ((C_46 : (0 * 3)) :> int32)) +
                                            2)) :> int32))).int_M) = 0));
      (C_57 : ((C_56 : (la3 +
                         (C_55 : ((C_54 : ((C_53 : ((C_52 : (1 * 3)) :> int32)) +
                                            0)) :> int32))).int_M) = 0));
      (C_63 : ((C_62 : (la3 +
                         (C_61 : ((C_60 : ((C_59 : ((C_58 : (1 * 3)) :> int32)) +
                                            1)) :> int32))).int_M) = 0));
      (C_69 : ((C_68 : (la3 +
                         (C_67 : ((C_66 : ((C_65 : ((C_64 : (1 * 3)) :> int32)) +
                                            2)) :> int32))).int_M) = 0));
      (C_75 : ((C_74 : (la3 +
                         (C_73 : ((C_72 : ((C_71 : ((C_70 : (2 * 3)) :> int32)) +
                                            0)) :> int32))).int_M) = 0));
      (C_81 : ((C_80 : (la3 +
                         (C_79 : ((C_78 : ((C_77 : ((C_76 : (2 * 3)) :> int32)) +
                                            1)) :> int32))).int_M) = 0));
      (C_87 : ((C_86 : (la3 +
                         (C_85 : ((C_84 : ((C_83 : ((C_82 : (2 * 3)) :> int32)) +
                                            2)) :> int32))).int_M) = 0));
      (C_93 : ((C_92 : (la1 +
                         (C_91 : ((C_90 : ((C_89 : ((C_88 : (0 * 1)) :> int32)) +
                                            0)) :> int32))).int_M) = i));
      (C_99 : ((C_98 : (la2 +
                         (C_97 : ((C_96 : ((C_95 : ((C_94 : (1 * 2)) :> int32)) +
                                            1)) :> int32))).int_M) = i));
      (C_105 : ((C_104 : (la3 +
                           (C_103 : ((C_102 : ((C_101 : ((C_100 : (2 * 3)) :> int32)) +
                                                2)) :> int32))).int_M) = i));
      
      {  
         (assert (C_106 : ((la1 + ((0 * 1) + 0)).int_M == i)));
         ()
      };
      
      {  
         (assert (C_107 : ((la2 + ((1 * 2) + 1)).int_M == i)));
         ()
      };
      
      {  
         (assert (C_108 : ((la3 + ((2 * 3) + 2)).int_M == i)));
         ()
      };
      
      {  (C_109 : (free(la1)));
         (C_110 : (free(la2)));
         (C_111 : (free(la3)));
         
         (return ())
      }
   }
}
