rm -f overflow.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only overflow.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat overflow.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

type E1 = 0..1

type E2 = 0..2

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

uint8 c;

int8 sc;

int8 c1;

int16 s;

E1 e1;

E2 e2;

unit f()
  requires (C_3 : (e2 != 2));
{  
   {  (C_2 : (e1 = (C_1 : (e2 :> int32))));
      
      (return ())
   }
}

unit g()
  requires (C_6 : ((C_7 : (0 <= s)) && (C_8 : (s <= 255))));
{  
   {  (C_5 : (c = (C_4 : (s :> uint8))));
      
      (return ())
   }
}

int32 i;

int32 li;

int64 lli;

unit h()
{  
   {  (C_9 : (c = 10));
      (C_11 : (sc = (C_10 : (c :> int8))));
      (C_13 : (s = (C_12 : (c1 :> int16))));
      (C_15 : (i = (C_14 : (s :> int32))));
      (C_17 : (li = (C_16 : (i :> int32))));
      (C_19 : (lli = (C_18 : (li :> int64))));
      
      (return ())
   }
}

unit hh()
{  
   {  (C_20 : (i = 7));
      (C_22 : (s = (C_21 : (i :> int16))));
      (C_24 : (c = (C_23 : (s :> uint8))));
      
      (return ())
   }
}
