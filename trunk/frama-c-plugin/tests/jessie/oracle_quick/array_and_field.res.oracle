rm -f array_and_field.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only array_and_field.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat array_and_field.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_sg :
((\offset_min(sg) <= 0) && (\offset_max(sg) >= 0))

tag S = {
  int32 i; 
  int32 j;
}

type S = [S]

tag T = {
  S[0] ai; 
  S[0..1] aj;
}

type T = [T]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

T[0] sg;

unit fg()
behavior default:
  assumes true;
  ensures (C_15 : ((C_16 : ((sg.aj + 0).i == ((sg.ai + 0).j - 1))) &&
                    (C_17 : ((sg.aj + 1).j == ((sg.ai + 0).i + 1)))));
{  
   {  (C_7 : ((C_6 : ((C_5 : sg.aj) + 0).i) = (C_4 : ((C_3 : ((C_2 : 
                                                              ((C_1 : sg.ai) +
                                                                0).j) -
                                                               1)) :> int32))));
      (C_14 : ((C_13 : ((C_12 : sg.aj) + 1).j) = (C_11 : ((C_10 : ((C_9 : 
                                                                   ((C_8 : sg.ai) +
                                                                    0).i) +
                                                                    1)) :> int32))));
      
      (return ())
   }
}

unit fl()
{  
   (var T[0] lg);
   
   {  (C_19 : (lg = (C_18 : (new T[1]))));
      (C_26 : ((C_25 : ((C_24 : lg.aj) + 0).i) = (C_23 : ((C_22 : ((C_21 : 
                                                                   ((C_20 : lg.ai) +
                                                                    0).j) -
                                                                    1)) :> int32))));
      (C_33 : ((C_32 : ((C_31 : lg.aj) + 1).j) = (C_30 : ((C_29 : ((C_28 : 
                                                                   ((C_27 : lg.ai) +
                                                                    0).i) +
                                                                    1)) :> int32))));
      
      {  
         (assert (C_34 : ((lg.aj + 0).i == ((lg.ai + 0).j - 1))));
         ()
      };
      
      {  
         (assert (C_35 : ((lg.aj + 1).j == ((lg.ai + 0).i + 1))));
         ()
      };
      
      {  (C_36 : (free(lg)));
         
         (return ())
      }
   }
}
