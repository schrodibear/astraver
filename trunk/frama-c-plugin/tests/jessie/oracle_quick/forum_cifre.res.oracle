rm -f forum_cifre.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only forum_cifre.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat forum_cifre.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

tag __anonstruct_paquet_t_1 = {
  uint32 longueur; 
  char_P[..] message;
}

type __anonstruct_paquet_t_1 = [__anonstruct_paquet_t_1]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

char_P[..] strncpy(char_P[..] destination, char_P[..] source, uint32 taille)
  requires (C_45 : (taille < 1000000));
{  
   (var char_P[..] curseur);
   
   (var char_P[..] tmp);
   
   (var int8 tmp_0);
   
   (var char_P[..] tmp_1);
   
   (var char_P[..] tmp_2);
   
   (var int32 __jc_off_destination);
   
   (var int32 __jc_off_source);
   
   (var int32 __jc_off_curseur);
   
   (var int32 __jc_off_tmp);
   
   (var int32 __jc_off_tmp_1);
   
   (var int32 __jc_off_tmp_2);
   
   {  (C_1 : (__jc_off_destination = 0));
      (C_2 : (__jc_off_source = 0));
      (C_3 : (__jc_off_curseur = __jc_off_destination));
      (if (taille > 0) then 
      {  
         {  
            invariant (C_4 : true);
            while (true)
            {  
               {  (C_5 : (__jc_off_tmp = __jc_off_curseur));
                  (C_8 : (__jc_off_curseur = (C_7 : ((C_6 : (__jc_off_curseur +
                                                              1)) :> int32))));
                  (C_9 : (__jc_off_tmp_1 = __jc_off_source));
                  (C_12 : (__jc_off_source = (C_11 : ((C_10 : (__jc_off_source +
                                                                1)) :> int32))));
                  (C_15 : (tmp_0 = (C_14 : (C_13 : (source + __jc_off_tmp_1)).char_M)));
                  (C_18 : ((C_17 : (C_16 : (destination + __jc_off_tmp)).char_M) = tmp_0));
                  (if (tmp_0 != 0) then 
                  {  (C_21 : (taille = (C_20 : ((C_19 : (taille - 1)) :> uint32))));
                     (if (taille > 0) then () else 
                     (goto while_0_break))
                  } else 
                  (goto while_0_break));
                  
                  (goto _L);
                  
                  (goto while_0_break);
                  (_L : ())
               }
            };
            (while_0_break : ())
         };
         (C_26 : (__jc_off_source = (C_25 : ((C_24 : (__jc_off_source +
                                                       (C_23 : ((C_22 : 
                                                                (- 1)) :> int32)))) :> int32))));
         (if ((C_43 : ((C_42 : (C_41 : (source + __jc_off_source)).char_M) :> int32)) ==
               0) then 
         {  ();
            (C_29 : (taille = (C_28 : ((C_27 : (taille - 1)) :> uint32))));
            (if (taille > 0) then 
            {  
               invariant (C_30 : true);
               while (true)
               {  
                  {  (C_31 : (__jc_off_tmp_2 = __jc_off_destination));
                     (C_34 : (__jc_off_destination = (C_33 : ((C_32 : 
                                                              (__jc_off_destination +
                                                                1)) :> int32))));
                     
                     {  (C_37 : ((C_36 : (C_35 : (destination +
                                                   __jc_off_tmp_2)).char_M) = 0));
                        ();
                        ()
                     };
                     (C_40 : (taille = (C_39 : ((C_38 : (taille - 1)) :> uint32))));
                     (if (taille > 0) then () else 
                     (goto while_1_break))
                  }
               };
               (while_1_break : ())
            } else ())
         } else ());
         
         (goto _L_0);
         (_L_0 : ())
      } else ());
      
      (return (C_44 : (destination + __jc_off_destination)))
   }
}

int32 recevoir_un_paquet(char_P[..] destination, uint32 taille,
                         __anonstruct_paquet_t_1[..] paquet)
  requires (C_51 : (((C_53 : (\offset_min(paquet) <= 0)) &&
                      (C_54 : (\offset_max(paquet) >= 0))) &&
                     ((C_56 : (\offset_min(destination) <= 0)) &&
                       (C_57 : (\offset_max(destination) >= (taille - 1))))));
behavior echec:
  assumes (taille < paquet.longueur);
  assigns \nothing;
  ensures (C_58 : (\result == 0));
behavior succes:
  assumes (taille >= paquet.longueur);
  assigns (destination + [0..(taille - 1)]).char_M;
  ensures (C_59 : (\result == 1));
{  
   (var int32 __retres);
   
   {  (if (taille < (C_47 : paquet.longueur)) then 
      {  (C_46 : (__retres = 0));
         
         (goto return_label)
      } else ());
      (C_49 : strncpy(destination, (C_48 : paquet.message), taille));
      (C_50 : (__retres = 1));
      (return_label : 
      (return __retres))
   }
}
