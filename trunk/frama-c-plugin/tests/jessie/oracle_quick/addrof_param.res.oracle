rm -f addrof_param.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only addrof_param.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat addrof_param.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag int_xP = {
  int_P[..] int_xM;
}

type int_xP = [int_xP]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

unit gi(int_P[..] p, int32 i)
  requires (C_3 : ((C_4 : (\offset_min(p) <= 0)) &&
                    (C_5 : (\offset_max(p) >= 0))));
behavior default:
  assumes true;
  ensures (C_6 : (p.int_M == \old(i)));
{  
   {  (C_2 : ((C_1 : p.int_M) = i));
      
      (return ())
   }
}

int32 fi(int32 v_i)
behavior zero:
  assumes (v_i == 0);
  ensures (C_15 : (\result == 0));
{  
   (var int_P[0] i);
   
   {  (C_8 : (i = (C_7 : (new int_P[1]))));
      (C_10 : ((C_9 : i.int_M) = v_i));
      (C_12 : gi(i, (C_11 : i.int_M)));
      
      {  (C_13 : (free(i)));
         
         (return (C_14 : i.int_M))
      }
   }
}

unit gp(int_xP[..] p, int_P[..] i)
  requires (C_22 : ((((C_25 : (\offset_min(p) <= 0)) &&
                       (C_26 : (\offset_max(p) >= 0))) &&
                      ((C_28 : (\offset_min(p.int_xM) <= 0)) &&
                        (C_29 : (\offset_max(p.int_xM) >= 0)))) &&
                     ((C_31 : (\offset_min(i) <= 0)) &&
                       (C_32 : (\offset_max(i) >= 0)))));
behavior default_1:
  assumes true;
  ensures (C_33 : ((C_34 : (p.int_xM.int_M == \old(i.int_M))) &&
                    (C_35 : ((p.int_xM - \old(i)) == 0))));
{  
   {  (C_19 : ((C_18 : (C_17 : p.int_xM).int_M) = (C_16 : i.int_M)));
      (C_21 : ((C_20 : p.int_xM) = i));
      
      (return ())
   }
}

int32 fp(int32 i, int_P[..] v_p)
behavior zero_1:
  assumes ((i == 0) && ((\offset_min(v_p) <= 0) && (\offset_max(v_p) >= 0)));
  ensures (C_47 : (\result == 0));
{  
   (var int_xP[0] p);
   
   {  (C_37 : (p = (C_36 : (new int_xP[1]))));
      (C_39 : ((C_38 : p.int_xM) = v_p));
      (C_41 : gp(p, (C_40 : p.int_xM)));
      
      {  
         (assert (C_42 : (i == 0)));
         ()
      };
      (C_45 : ((C_44 : (C_43 : p.int_xM).int_M) = 0));
      
      {  (C_46 : (free(p)));
         
         (return i)
      }
   }
}
