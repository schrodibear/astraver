rm -f array_addr.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only array_addr.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat array_addr.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_t2 :
((\offset_min(t2) <= 0) && (\offset_max(t2) >= 8))

invariant valid_t :
((\offset_min(t) <= 0) && (\offset_max(t) >= 8))

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int_P[0..8] t;

unit h(int_P[..] p)
behavior default:
  assumes true;
  assigns p.int_M;
  ensures (C_1 : (p.int_M == 0));
;

unit f()
  requires (C_6 : ((C_7 : (\offset_min((t + (1 * 3))) <= 2)) &&
                    (C_8 : (\offset_max((t + (1 * 3))) >= 2))));
{  
   {  (C_5 : h((C_4 : (t + (C_3 : ((C_2 : (1 * 3)) :> int32))))));
      
      (return ())
   }
}

unit g()
  requires (C_13 : ((C_14 : (\offset_min((t + (1 * 3))) <= 2)) &&
                     (C_15 : (\offset_max((t + (1 * 3))) >= 2))));
{  
   {  (C_12 : h((C_11 : (t + (C_10 : ((C_9 : (1 * 3)) :> int32))))));
      
      (return ())
   }
}

int_P[0..8] t2;

logic int32 deref{Current}(int_P[..] p) =
\at(p.int_M,Current)

unit m()
behavior default_1:
  assumes true;
  ensures (C_22 : (deref{Here}((t2 + ((1 * 3) + 2))) == 0));
{  
   {  (C_21 : h((C_20 : (t2 +
                          (C_19 : ((C_18 : ((C_17 : ((C_16 : (1 * 3)) :> int32)) +
                                             2)) :> int32))))));
      
      (return ())
   }
}
