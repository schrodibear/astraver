rm -f bresenham.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only bresenham.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat bresenham.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads (s + [0..]).char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 x2;

int32 y2;

invariant first_octant :
((0 <= y2) && (y2 <= x2))

axiom ax_first_octant{Here} :
((0 <= y2) && (y2 <= x2))

logic integer abs(integer x) reads \nothing;

axiom abs_def :
(\forall int32 x;
  (((x >= 0) && (abs(x) == x)) || ((x <= 0) && (abs(x) == (- x)))))

logic best{Here}(int32 x, int32 y) =
(\forall int32 yp;
  (abs(((x2 * y) - (x * y2))) <= abs(((x2 * yp) - (x * y2)))))

logic Invariant{Here}(int32 x, int32 y, int32 e) =
((e == (((2 * (x + 1)) * y2) - (((2 * y) + 1) * x2))) &&
  (((2 * (y2 - x2)) <= e) && (e <= (2 * y2))))

axiom invariant_is_ok{Here} :
(\forall int32 x;
  (\forall int32 y;
    (\forall int32 e;
      (Invariant{Here}(x, y, e) ==> best{Here}(x, y)))))

axiom z_ring_0 :
(\forall int32 a;
  (\forall int32 b;
    (\forall int32 c;
      ((a * (b + c)) == ((a * b) + (a * c))))))

axiom z_ring_1 :
(\forall int32 a;
  (\forall int32 b;
    (\forall int32 c;
      (((b + c) * a) == ((b * a) + (c * a))))))

unit bresenham()
{  
   (var int32 x);
   
   (var int32 y);
   
   (var int32 e);
   
   {  (C_1 : (x = 0));
      (C_2 : (y = 0));
      (C_7 : (e = (C_6 : ((C_5 : ((C_4 : ((C_3 : (2 * y2)) :> int32)) - x2)) :> int32))));
      (C_8 : (x = 0));
      
      {  
         invariant (C_9 : (((C_11 : (0 <= x)) && (C_12 : (x <= (x2 + 1)))) &&
                            (C_13 : Invariant{Here}(x, y, e))));
         variant (C_14 : (x2 - x));
         while (true)
         {  
            {  (if (x <= x2) then () else 
               (goto while_0_break));
               
               {  
                  (assert (C_15 : best{Here}(x, y)));
                  ()
               };
               (if (e < 0) then (C_30 : (e = (C_29 : ((C_28 : (e +
                                                                (C_27 : (
                                                                (C_26 : 
                                                                (2 *
                                                                  y2)) :> int32)))) :> int32)))) else 
               {  (C_18 : (y = (C_17 : ((C_16 : (y + 1)) :> int32))));
                  (C_25 : (e = (C_24 : ((C_23 : (e +
                                                  (C_22 : ((C_21 : (2 *
                                                                    (C_20 : (
                                                                    (C_19 : 
                                                                    (y2 -
                                                                    x2)) :> int32)))) :> int32)))) :> int32))))
               });
               (C_33 : (x = (C_32 : ((C_31 : (x + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      (return ())
   }
}
