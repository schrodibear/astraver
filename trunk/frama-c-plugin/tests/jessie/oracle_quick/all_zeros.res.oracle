rm -f all_zeros.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only all_zeros.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat all_zeros.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 all_zeros(int_P[..] t, int32 n)
  requires (C_14 : (((C_16 : (\offset_min(t) <= 0)) &&
                      (C_17 : (\offset_max(t) >= n))) &&
                     (C_18 : (n >= 0))));
behavior default:
  assumes true;
  ensures (C_19 : ((\result != 0) <==>
                    (\forall int32 i;
                      (((0 <= i) && (i < n)) ==> ((t + i).int_M == 0)))));
{  
   (var int32 __retres);
   
   {  
      {  
         invariant (C_1 : (((C_3 : (0 <= n)) && (C_4 : (n <= \at(n,Pre)))) &&
                            (C_5 : (\forall int32 i;
                                     (((n <= i) && (i < \at(n,Pre))) ==>
                                       ((t + i).int_M == 0))))));
         variant (C_6 : n);
         while (true)
         {  
            {  (C_9 : (n = (C_8 : ((C_7 : (n - 1)) :> int32))));
               (if (n >= 0) then (if (! ((C_11 : (C_10 : (t + n)).int_M) !=
                                          0)) then () else 
                                 (goto while_0_break)) else 
               (goto while_0_break));
               
               (goto _L);
               
               (goto while_0_break);
               (_L : ())
            }
         };
         (while_0_break : ())
      };
      (C_13 : (__retres = (C_12 : ((if (n < 0) then 1 else 0) :> int32))));
      
      (return __retres)
   }
}

int32 all_zeros_1(int_P[..] t, int32 n)
  requires (C_35 : (((C_37 : (\offset_min(t) <= 0)) &&
                      (C_38 : (\offset_max(t) >= n))) &&
                     (C_39 : (n >= 0))));
behavior default_1:
  assumes true;
  ensures (C_40 : ((\result != 0) <==>
                    (\forall int32 i;
                      (((0 <= i) && (i < n)) ==> ((t + i).int_M == 0)))));
{  
   (var int32 k);
   
   (var int32 tmp);
   
   (var int32 __retres);
   
   {  (C_20 : (k = 0));
      
      {  
         invariant (C_21 : (((C_23 : (0 <= k)) && (C_24 : (k <= n))) &&
                             (C_25 : (\forall int32 i;
                                       (((0 <= i) && (i < k)) ==>
                                         ((t + i).int_M == 0))))));
         variant (C_26 : (n - k));
         while (true)
         {  
            {  (if (k < n) then 
               {  (C_27 : (tmp = k));
                  (C_30 : (k = (C_29 : ((C_28 : (k + 1)) :> int32))));
                  (if ((C_32 : (C_31 : (t + tmp)).int_M) != 0) then 
                  (goto while_1_break) else ())
               } else 
               (goto while_1_break));
               
               (goto _L);
               
               (goto while_1_break);
               (_L : ())
            }
         };
         (while_1_break : ())
      };
      (C_34 : (__retres = (C_33 : ((if (k == n) then 1 else 0) :> int32))));
      
      (return __retres)
   }
}

int32 all_zeros_0(int_P[..] t, int32 n)
  requires (C_55 : (((C_57 : (\offset_min(t) <= 0)) &&
                      (C_58 : (\offset_max(t) >= n))) &&
                     (C_59 : (n >= 0))));
behavior default_2:
  assumes true;
  ensures (C_60 : ((\result != 0) <==>
                    (\forall int32 i;
                      (((0 <= i) && (i < n)) ==> ((t + i).int_M == 0)))));
{  
   (var int32 k);
   
   (var int32 __retres);
   
   {  (C_41 : (k = 0));
      
      {  
         invariant (C_42 : (((C_44 : (0 <= k)) && (C_45 : (k <= n))) &&
                             (C_46 : (\forall int32 i;
                                       (((0 <= i) && (i < k)) ==>
                                         ((t + i).int_M == 0))))));
         variant (C_47 : (n - k));
         while (true)
         {  
            {  (if (k < n) then () else 
               (goto while_2_break));
               (if ((C_50 : (C_49 : (t + k)).int_M) != 0) then 
               {  (C_48 : (__retres = 0));
                  
                  (goto return_label)
               } else ());
               (C_53 : (k = (C_52 : ((C_51 : (k + 1)) :> int32))))
            }
         };
         (while_2_break : ())
      };
      (C_54 : (__retres = 1));
      (return_label : 
      (return __retres))
   }
}
