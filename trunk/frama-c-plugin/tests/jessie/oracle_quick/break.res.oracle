rm -f break.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only break.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat break.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 f1()
behavior default:
  assumes true;
  ensures (C_4 : (\result == 12));
{  
   (var int32 __retres);
   
   {  
      {  
         invariant (C_1 : true);
         variant (C_2 : 1);
         while (true)
         {  
            (goto while_0_break)
         };
         (while_0_break : ())
      };
      (C_3 : (__retres = 12));
      
      (return __retres)
   }
}

int32 f2()
behavior default_1:
  assumes true;
  ensures (C_14 : (\result == 1));
{  
   (var int32 n);
   
   {  (C_5 : (n = 10));
      
      {  
         invariant (C_6 : (0 <= n));
         variant (C_7 : n);
         while (true)
         {  
            {  (if (n >= 0) then () else 
               (goto while_1_break));
               (if (n == 0) then 
               {  (C_10 : (n = (C_9 : ((C_8 : (n + 1)) :> int32))));
                  
                  (goto while_1_break)
               } else ());
               (C_13 : (n = (C_12 : ((C_11 : (n - 1)) :> int32))))
            }
         };
         (while_1_break : ())
      };
      
      (return n)
   }
}

int32 f3()
behavior default_2:
  assumes true;
  ensures (C_24 : (\result == 2));
{  
   (var int32 n);
   
   {  (C_15 : (n = 10));
      
      {  
         invariant (C_16 : (1 <= n));
         variant (C_17 : n);
         while (true)
         {  
            {  (if (n >= 0) then () else 
               (goto while_2_break));
               (if (n == 1) then 
               {  (C_20 : (n = (C_19 : ((C_18 : (n + 1)) :> int32))));
                  
                  (goto while_2_break)
               } else ());
               (C_23 : (n = (C_22 : ((C_21 : (n - 1)) :> int32))))
            }
         };
         (while_2_break : ())
      };
      
      (return n)
   }
}

int32 f4(int32 x)
behavior default_3:
  assumes true;
  ensures (C_32 : (\result == 3));
{  
   (var int32 i);
   
   {  (C_25 : (i = 0));
      (C_26 : (i = 0));
      
      {  
         invariant (C_27 : (i <= 3));
         variant (C_28 : (10 - i));
         while (true)
         {  
            {  (if (i < 10) then () else 
               (goto while_3_break));
               (if (i == 3) then 
               (goto while_3_break) else ());
               (C_31 : (i = (C_30 : ((C_29 : (i + 1)) :> int32))))
            }
         };
         (while_3_break : ())
      };
      
      (return i)
   }
}
