rm -f arith.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only arith.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat arith.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 i;

int32 j;

unit test(int32 k)
behavior default:
  assumes true;
  ensures (C_20 : ((C_21 : (i == (\old(j) + k))) &&
                    (C_22 : (j == (((3 * \old(j)) + (11 * k)) + 12)))));
{  
   (var int32 l);
   
   (var int32 m);
   
   {  (C_1 : (l = 1));
      (C_2 : (m = 12));
      (C_5 : (i = (C_4 : ((C_3 : (j + k)) :> int32))));
      (C_8 : (l = (C_7 : ((C_6 : (l * j)) :> int32))));
      (C_19 : (j = (C_18 : ((C_17 : (j +
                                      (C_16 : ((C_15 : ((C_14 : ((C_13 : 
                                                                 ((C_12 : (
                                                                  (C_11 : 
                                                                  (l +
                                                                    (C_10 : (
                                                                    (C_9 : 
                                                                    (10 *
                                                                    k)) :> int32)))) :> int32)) +
                                                                   i)) :> int32)) +
                                                         m)) :> int32)))) :> int32))));
      
      (return ())
   }
}

lemma dist1 :
(\forall int32 x;
  (\forall int32 y;
    (\forall int32 z;
      ((x * (y + z)) == ((x * y) + (x * z))))))

lemma dist2 :
(\forall int32 x;
  (\forall int32 y;
    (\forall int32 z;
      (((x + y) * z) == ((x * z) + (y * z))))))

lemma id1 :
(\forall int32 x;
  ((x * 1) == x))

lemma id2 :
(\forall int32 x;
  ((1 * x) == x))
