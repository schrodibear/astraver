rm -f fs252.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only fs252.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat fs252.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

logic int_P[0] int__to_struct_int_P_x(int32 x) reads \nothing;

logic int32 struct_int_P_x_to_int_(int_P[0] x) reads \nothing;

axiom int__to_struct_int_P_x_axiom :
(\forall int32 x;
  (x == struct_int_P_x_to_int_(int__to_struct_int_P_x(x))))

axiom struct_int_P_x_to_int__axiom :
(\forall int_P[0] x;
  (x == int__to_struct_int_P_x(struct_int_P_x_to_int_(x))))

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_t :
((\offset_min(t) <= 0) && (\offset_max(t) >= 4))

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 X;

int32 Y;

int32 Z1;

int_P[0] Z2;

int32 T;

int32 U1;

int32 U2;

int32 V;

int32 W1;

int32 W2;

int32 a;

int32 b;

int_P[0..4] t;

int_P[..] p;

unit main()
{  
   (var int32 c);
   
   {  (C_1 : __globinit_whole_program());
      (C_3 : (c = (C_2 : (0 :> int32))));
      
      {  
         invariant (C_4 : true);
         while (true)
         {  
            {  (if ((C_7 : ((C_6 : (c + (C_5 : (1 :> int32)))) :> int32)) !=
                     0) then () else 
               (goto while_0_break));
               (if (c != 0) then (C_10 : (X = (C_9 : ((C_8 : (X + 1)) :> int32)))) else ());
               (if ((C_16 : ((C_15 : (c + (C_14 : (2 :> int32)))) :> int32)) !=
                     0) then (C_13 : (X = (C_12 : ((C_11 : (X - 1)) :> int32)))) else ())
            }
         };
         (while_0_break : ())
      };
      (C_17 : (Y = -5));
      (if (X >= Y) then (if (X <= 12) then (C_18 : (Y = X)) else ()) else ());
      
      (goto _L);
      (_L : ());
      (C_23 : (Y = (C_22 : ((C_21 : ((C_20 : ((C_19 : (27 * Y)) :> int32)) +
                                      9)) :> int32))));
      (C_26 : (Z1 = (C_25 : ((C_24 : (Y / 3)) :> int32))));
      (C_30 : ((C_29 : Z2.int_M) = (C_28 : ((C_27 : (Y / 5)) :> int32))));
      (C_33 : (V = (C_32 : ((C_31 : (Y + 1)) :> int32))));
      (C_36 : (W1 = (C_35 : ((C_34 : (V / 3)) :> int32))));
      (C_39 : (W2 = (C_38 : ((C_37 : (V / 5)) :> int32))));
      (C_42 : (T = (C_41 : ((C_40 : (Y + 160)) :> int32))));
      (C_45 : (U1 = (C_44 : ((C_43 : (T / 3)) :> int32))));
      (C_48 : (U2 = (C_47 : ((C_46 : (T / 5)) :> int32))));
      (C_50 : (p = (C_49 : (t + 3))));
      (C_54 : (a = (C_53 : ((C_52 : (40000 / (C_51 : Z2.int_M))) :> int32))));
      (C_58 : (b = (C_57 : ((C_56 : (struct_int_P_x_to_int_(Z2) /
                                      (C_55 : Z2.int_M))) :> int32))));
      
      (return ())
   }
}

unit __globinit_whole_program()
{  
   {  (C_60 : (Z2 = (C_59 : (new int_P[1]))));
      (C_62 : (t = (C_61 : (new int_P[5]))))
   }
}
