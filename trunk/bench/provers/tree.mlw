
type 'a tree

logic leaf : 'a tree
logic node : 'a tree, 'a, 'a tree -> 'a tree

axiom leaf_not_node :
  forall l,r : 'a tree. forall v:'a. leaf <> node(l,v,r)

logic left, right : 'a tree -> 'a tree
logic value : 'a tree -> 'a

axiom leaf_or_node : 
  forall t: 'a tree. t = leaf or t = node(left(t), value(t), right(t))

axiom left_node :
  forall l,r: 'a tree. forall v: 'a. left(node(l,v,r)) = l

axiom right_node :
  forall l,r: 'a tree. forall v: 'a. right(node(l,v,r)) = r

axiom value_node :
  forall l,r: 'a tree. forall v: 'a. value(node(l,v,r)) = v

(* peut se déduire de ce qui précède *)
goal node_injective :
  forall l1,l2,r1,r2: 'a tree. forall v1,v2: 'a. 
  node(l1,v1,r1) = node(l2,v2,r2) -> l1 = l2 and v1 = v2 and r1 = r2

parameter is_leaf :
  t: 'a tree -> 
  {} bool {if result then t = leaf else t = node(left(t), value(t), right(t))}

let rec nb_nodes (t : 'a tree) : int = 
  if is_leaf t then
    0
  else
    1 + nb_nodes (left t) + nb_nodes (right t)
  { result >= 0 }
