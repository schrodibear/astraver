
type list

type ('a,'b) map

logic select : ('a,'b) map, 'a -> 'b

logic store : ('a,'b) map, 'a, 'b -> ('a, 'b) map

axiom select_store_eq :
  forall m:('a,'b) map.
  forall x:'a.
  forall v:'b.
  select(store(m,x,v),x) = v

axiom select_store_neq :
  forall m:('a,'b) map.
  forall x:'a.
  forall y:'a.
  forall v:'b.
  x <> y -> select(store(m,x,v),y) = select(m,y)

parameter next: (list, list) map ref

parameter val: (list, int) map ref

(*
predicate in_list(val:(list, 'a) map, next:(list,list) map, x:'a, l:list) =
   select(val,l) = x or in_list(val,next,x,select(next,l))
*)

logic in_list : (list, 'a) map, (list,list) map, 'a, list -> prop

axiom in_list_def :
  forall val: (list, 'a) map.
  forall next: (list,list) map.
  forall x:'a. 
  forall l:list. 
     in_list(val,next,x,l) <->
        select(val,l) = x or in_list(val,next,x,select(next,l))
        

let test(l1:list)(l2:list) = 
    { true }
    begin
      val := store !val l1 0;
      val := store !val l2 1;
      next := store !next l1 l2
    end
    { in_list(val,next,1,l1) }
