axiomatic Power { 

  logic real lpower(real x, integer n)

  axiom lpower_square: \forall real t; \forall integer n;
    lpower(t*t, n) == lpower(t, 2*n)

  axiom lpower_mult: \forall real t; \forall integer n;
    t*lpower(t, n) == lpower(t, n+1)

  axiom lpower_zero: \forall real t;
    lpower(t, 0) == 1.0

}

lemma assoc_mult: \forall real x, y, z;
  x*(y*z) == (x*y)*z

lemma int_deux: \forall integer i;
  i % 2 != 1 ==> 2*(i/2) == i

lemma int_deux_impair: \forall integer i;
  i % 2 == 1 ==> 2*(i/2) == i-1

lemma real_unit_left: \forall real x; 1.0*x == x
lemma real_unit_right: \forall real x; x*1.0 == x

real power(real x, integer n)
  requires n >= 0;
  behavior result_is_power:
    ensures \result == lpower(x, n);
{
  var real r = 1.;
  var real t = x;
  var integer i = n;
    invariant r * lpower(t, i) == lpower(x, n) && i >= 0;
    variant i;
  while (i > 0)
  {
    if i % 2 == 1 then r = r * t;
    t = t * t;
    i = i / 2;
  };
  return r;
}


/*
Local Variables: 
compile-command: "make power"
End: 
*/