
# AnnotationPolicy = Invariants
# AbstractDomain = Box

type intM = { integer val; }


integer f() { return 0; }


// OK inferred post: <\result >= 0>
integer sum(integer n) {
    var integer s = 0;
    var integer i = 0;
    // inferred loop inv: <i >= 0 && s >= 0>
    variant n - i; 
    while (i < n) 
    {
	s += i;
	i++;
    };
    return s;
}


// post \result >= 0 is *not* inferred
integer max_pos(integer n, integer m) {
    if (n <= 0 && m <= 0) then
	return 0;
    if (n < m) then
	return m;
    return n;
}


// post \offset_max(\result) >= 0 is inferred
intM[0..] reset(intM[0..] t) {
    var integer i = 0;
    invariant true;
    variant \offset_max(t) - i;
    while (i < \offset_max(t)) 
    {
	(t + i).val = 0;
	i++;
    };
    return t;
}


/*
Local Variables: 
mode: java
compile-command: "make ai_result"
End: 
*/
