
# AnnotationPolicy = Invariants
# AbstractDomain = Box

type integerT = { integer integerM; }


unit test0(integerT[0..10] t) {
  var integer x = 0;
  invariant true;
  variant 10 - x;
  while (x <= 9) 
  {
    (t + x).integerM = x;
    x++;
  }
}

unit test0bis(integerT[0..10] t) {
  var integer x = 0;
  invariant true;
  variant 10 - x;
  while (x < 10) 
  {
    (t + x).integerM = x;
    x++;
  }
}

integer v;

unit test0ter() {
    v = 0;
    variant 10 - v;
  while (v <= 9) 
  {
    v++;
  }
  //@ assert v == 9;
}

unit test1(integerT[0..] t, integer max) requires \offset_max(t) == max; {
  var integer x = 0;
  invariant true;
  variant max - x;
  while (x < max) 
  {
    (t + x).integerM = x;
    x++;
  }
}

/*
Local Variables: 
mode: java
compile-command: "make ai_loop"
End: 
*/
