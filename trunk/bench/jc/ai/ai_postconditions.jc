
# InvariantPolicy = Arguments
# AnnotationPolicy = Invariants
# AbstractDomain = Oct


exception E of unit

unit g()
  behavior exceptional:
    throws E;
    ensures true;
;

integer h()
  behavior normal:
    ensures \result >= 0;
;

integer n;

integer getN()
  behavior normal:
    ensures \result == n;
;

unit f0() {
   var integer tmp = getN();
   if (n < 0) then g();
}


type intM = { integer intP; }

intM[0..] buffer;

unit f1() requires \offset_max(buffer) >= 1; {
   var intM[0..] tmp = buffer;
   var integer n = (tmp + 1).intP;
   if (n != h()) then g();
}


intM[0..] getBuffer()
  behavior normal:
    assigns \nothing;
    ensures \result == buffer;
;

unit f2() requires \offset_max(buffer) >= 1; {
   var intM[0..] tmp = getBuffer();
   var integer n = (tmp + 1).intP;
   if (n != h()) then g();
}

unit f3() requires \offset_max(buffer) >= 1; {
   var intM[0..] tmp = getBuffer();
   var integer n = ((tmp + 1).intP & 0xFF);
   if (n != h()) then g();
}


tag Object = {
}

type Object = [Object]

tag APDU = Object with {
  intM[0..] _buffer;
}


intM[0..] APDU_getBuffer(APDU[0] this_33)
  requires (K_107 : true);
  behavior normal:
    assigns \nothing;
    ensures (K_106 : (\result == this_33._buffer));
;

integer i(APDU[0] this_33)
  behavior normal:
    ensures \result >= 0;
;

unit f4(APDU[0] this_33) requires \offset_max(this_33._buffer) >= 1; {
   var intM[0..] tmp = APDU_getBuffer(this_33);
   var integer n = ((tmp + 1).intP & 0xFF);
   if (n != i(this_33)) then g();
}
