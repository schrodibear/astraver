type 'a list = Nil | Cons ('a, 'a list)

type ('sym,'val) formula =
  | False
  | Implies (('sym,'val) formula, ('sym,'val) formula)
  | Forall (('sym,'val) formula)
  | Atom ('sym, ('sym,'val) term list)

and ('sym,'val) term =
  | Value ('val)
  | Variable (int)
  | Epsilon (('sym,'val) formula)
  | Term ('sym, ('sym,'val) term list)

predicate isEmpty (l : 'a list) =
  match l with
  | nil -> true
  | cons (a,b) -> false
  end

type float

type FPencoding = BinSingle | BinDouble | BinQuad
                            | DecDouble | DecQuad

logic floatEnc : float -> FPencoding

function expMax (r : float) : int =
  match (floatEnc (r)) with
  | BinSingle -> 127
  | BinDouble -> 1023
  | BinQuad -> 16383
  | DecDouble -> 384
  | DecQuad -> 6144
  end

