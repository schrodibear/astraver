
(***************************************************************************)
(***************************************************************************)
(*** Jessie prelude for floating-point arithmetic (Strict and Full mode) ***)
(***************************************************************************)
(***************************************************************************)


include "real.why"

type mode = nearest_even | to_zero | up | down | nearest_away

parameter current_rounding_mode : mode ref

(***************************)    
(* About the double format *)
(***************************)    

type double

logic round_double : mode, real -> real
logic round_double_logic : mode, real -> double

logic double_value : double -> real
logic double_exact : double -> real
logic double_model : double -> real

function double_round_error(x:double) : real = 
	 abs_real(double_value(x) - double_exact(x))
function double_total_error(x:double) : real = 
	 abs_real(double_value(x) - double_model(x))

parameter double_set_model : x:double ref -> y:real ->
  { } 
  unit writes x
  { double_value(x) = double_value(x@)
    and double_exact(x) = double_exact(x@)
    and double_model(x) = y }

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023
parameter any_double : unit -> { } double { true }

predicate no_overflow_double(m:mode,x:real) = 
	  abs_real(round_double(m,x)) <= max_double

axiom bounded_real_no_overflow_double : forall m:mode. forall x:real. 
      abs_real(x) <= max_double -> no_overflow_double(m,x)

axiom round_double_monotonic: 
  forall x,y:real. forall m:mode.
   x <= y -> round_double(m,x) <= round_double(m,y)

axiom exact_round_double_for_integers:
  forall i:int. forall m:mode.
     -9007199254740992 <= i <= 9007199254740992 (* 2^53 *) ->
     round_double(m,real_of_int(i)) = real_of_int(i)

axiom round_double_idempotent:
      forall m1:mode. forall m2:mode. forall x:real. 
      round_double(m1,round_double(m2,x)) = round_double(m2,x)

(* rounding and negation *)

axiom round_down_double_neg: forall x:real. 
     round_double(down,-x) = -round_double(up,x)
axiom round_up_double_neg: forall x:real. 
     round_double(up,-x) = -round_double(down,x)

(* rounding up and down *)
axiom round_double_down_le: forall x:real. 
      round_double(down,x) <= x
axiom round_up_double_ge: forall x:real. 
      round_double(up,x) >= x


(***************************)    
(* About the single format *)
(***************************)    

type single

logic round_single : mode, real -> real
logic round_single_logic : mode, real -> single

logic single_value : single -> real
logic single_exact : single -> real
logic single_model : single -> real

function single_round_error(x:single) : real = 
	 abs_real(single_value(x) - single_exact(x))
function single_total_error(x:single) : real = 
	 abs_real(single_value(x) - single_model(x))

parameter single_set_model : x:single ref -> y:real ->
  { } 
  unit writes x
  { single_value(x) = single_value(x@)
    and single_exact(x) = single_exact(x@)
    and single_model(x) = y }

function max_single() : real = 0x1.FFFFFEp127
parameter any_single : unit -> { } single { true }

predicate no_overflow_single(m:mode,x:real) = 
	  abs_real(round_single(m,x)) <= max_single

axiom bounded_real_no_overflow_single : forall m:mode. forall x:real. 
      abs_real(x) <= max_single -> no_overflow_single(m,x)

axiom round_single_monotonic: 
  forall x,y:real. forall m:mode.
   x <= y -> round_single(m,x) <= round_single(m,y)

axiom exact_round_single_for_integers:
  forall i:int. forall m:mode.
     -16777216 <= i <= 16777216 (* 2^24 *) ->
     round_single(m,real_of_int(i)) = real_of_int(i)

axiom round_single_idempotent:
      forall m1:mode. forall m2:mode. forall x:real. 
      round_single(m1,round_single(m2,x)) = round_single(m2,x)

(* rounding and negation *)
axiom round_down_single_neg: forall x:real. 
     round_single(down,-x) = -round_single(up,x)

axiom round_up_single_neg: forall x:real. 
     round_single(up,-x) = -round_single(down,x)

(* rounding up and down *)
axiom round_single_down_le: forall x:real. 
      round_single(down,x) <= x

axiom round_up_single_ge: forall x:real. 
      round_single(up,x) >= x










(***************************)    
(* Casts                   *)
(***************************)    

logic single_to_double: single -> double
logic double_to_single: mode, double -> single

axiom single_to_double_val: forall s:single.
  double_value(single_to_double(s)) = single_value(s)
axiom double_to_single_val: forall m:mode. forall d:double.
  single_value(double_to_single(m,d))=round_single(m,double_value(d))

