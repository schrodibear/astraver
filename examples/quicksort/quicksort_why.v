(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Why.
Require Omega.
Require Partition.
Require Quicksort.

Require partition_why.

(* Why obligation from file "quicksort.mlw", characters 1603-1620 *)
Lemma quick_rec_po_1 : 
  (l: Z)
  (r: Z)
  (t: (array Z))
  (Pre15: `0 <= l` /\ `r < (array_length t)`)
  (Variant1: Z)
  (l0: Z)
  (r0: Z)
  (t0: (array Z))
  (Pre14: Variant1 = `1 + r0 - l0`)
  (Pre13: `0 <= l0` /\ `r0 < (array_length t0)`)
  (Test2: `l0 < r0`)
  (`0 <= l0` /\ `l0 < r0`) /\ `r0 < (array_length t0)`.
Proof.
Intros; Omega.
Save.

(* Why obligation from file "quicksort.mlw", characters 1646-1667 *)
Lemma quick_rec_po_2 : 
  (l: Z)
  (r: Z)
  (t: (array Z))
  (Pre15: `0 <= l` /\ `r < (array_length t)`)
  (Variant1: Z)
  (l0: Z)
  (r0: Z)
  (t0: (array Z))
  (Pre14: Variant1 = `1 + r0 - l0`)
  (Pre13: `0 <= l0` /\ `r0 < (array_length t0)`)
  (Test2: `l0 < r0`)
  (Pre12: (`0 <= l0` /\ `l0 < r0`) /\ `r0 < (array_length t0)`)
  (t1: (array Z))
  (p: Z)
  (Post5: (`l0 <= p` /\ `p <= r0`) /\ (partition_p t1 l0 r0 p) /\
          (sub_permut l0 r0 t1 t0))
  `0 <= l0` /\ `p - 1 < (array_length t1)`.
Proof.
Intuition (SameLength t1 t0; Omega).
Save.

(* Why obligation from file "quicksort.mlw", characters 1523-1762 *)
Lemma quick_rec_po_3 : 
  (l: Z)
  (r: Z)
  (t: (array Z))
  (Pre15: `0 <= l` /\ `r < (array_length t)`)
  (Variant1: Z)
  (l0: Z)
  (r0: Z)
  (t0: (array Z))
  (Pre14: Variant1 = `1 + r0 - l0`)
  (Pre13: `0 <= l0` /\ `r0 < (array_length t0)`)
  (Test2: `l0 < r0`)
  (Pre12: (`0 <= l0` /\ `l0 < r0`) /\ `r0 < (array_length t0)`)
  (t1: (array Z))
  (p: Z)
  (Post5: (`l0 <= p` /\ `p <= r0`) /\ (partition_p t1 l0 r0 p) /\
          (sub_permut l0 r0 t1 t0))
  (Pre11: `0 <= l0` /\ `p - 1 < (array_length t1)`)
  (Pre5: `0 <= l0` /\ `p - 1 < (array_length t1)`)
  (Pre6: `0 <= l0` /\ `p - 1 < (array_length t1)`)
  (Zwf `0` `1 + (p - 1) - l0` Variant1).
Proof.
Intuition.
Unfold Zwf; Omega.
Save.

(* Why obligation from file "quicksort.mlw", characters 1671-1692 *)
Lemma quick_rec_po_4 : 
  (l: Z)
  (r: Z)
  (t: (array Z))
  (Pre15: `0 <= l` /\ `r < (array_length t)`)
  (Variant1: Z)
  (l0: Z)
  (r0: Z)
  (t0: (array Z))
  (Pre14: Variant1 = `1 + r0 - l0`)
  (Pre13: `0 <= l0` /\ `r0 < (array_length t0)`)
  (Test2: `l0 < r0`)
  (Pre12: (`0 <= l0` /\ `l0 < r0`) /\ `r0 < (array_length t0)`)
  (t1: (array Z))
  (p: Z)
  (Post5: (`l0 <= p` /\ `p <= r0`) /\ (partition_p t1 l0 r0 p) /\
          (sub_permut l0 r0 t1 t0))
  (Pre11: `0 <= l0` /\ `p - 1 < (array_length t1)`)
  (t2: (array Z))
  (Post8: (sorted_array t2 l0 `p - 1`) /\ (sub_permut l0 `p - 1` t2 t1))
  `0 <= p + 1` /\ `r0 < (array_length t2)`.
Proof.
Intuition; SameLength t2 t1; SameLength t1 t0; Omega.
Save.

(* Why obligation from file "quicksort.mlw", characters 1523-1762 *)
Lemma quick_rec_po_5 : 
  (l: Z)
  (r: Z)
  (t: (array Z))
  (Pre15: `0 <= l` /\ `r < (array_length t)`)
  (Variant1: Z)
  (l0: Z)
  (r0: Z)
  (t0: (array Z))
  (Pre14: Variant1 = `1 + r0 - l0`)
  (Pre13: `0 <= l0` /\ `r0 < (array_length t0)`)
  (Test2: `l0 < r0`)
  (Pre12: (`0 <= l0` /\ `l0 < r0`) /\ `r0 < (array_length t0)`)
  (t1: (array Z))
  (p: Z)
  (Post5: (`l0 <= p` /\ `p <= r0`) /\ (partition_p t1 l0 r0 p) /\
          (sub_permut l0 r0 t1 t0))
  (Pre11: `0 <= l0` /\ `p - 1 < (array_length t1)`)
  (t2: (array Z))
  (Post8: (sorted_array t2 l0 `p - 1`) /\ (sub_permut l0 `p - 1` t2 t1))
  (Pre10: `0 <= p + 1` /\ `r0 < (array_length t2)`)
  (Pre8: `0 <= p + 1` /\ `r0 < (array_length t2)`)
  (Pre9: `0 <= p + 1` /\ `r0 < (array_length t2)`)
  (Zwf `0` `1 + r0 - (p + 1)` Variant1).
Proof.
Intros; Unfold Zwf; Omega.
Save.

(* Why obligation from file "quicksort.mlw", characters 1631-1703 *)
Lemma quick_rec_po_6 : 
  (l: Z)
  (r: Z)
  (t: (array Z))
  (Pre15: `0 <= l` /\ `r < (array_length t)`)
  (Variant1: Z)
  (l0: Z)
  (r0: Z)
  (t0: (array Z))
  (Pre14: Variant1 = `1 + r0 - l0`)
  (Pre13: `0 <= l0` /\ `r0 < (array_length t0)`)
  (Test2: `l0 < r0`)
  (Pre12: (`0 <= l0` /\ `l0 < r0`) /\ `r0 < (array_length t0)`)
  (t1: (array Z))
  (p: Z)
  (Post5: (`l0 <= p` /\ `p <= r0`) /\ (partition_p t1 l0 r0 p) /\
          (sub_permut l0 r0 t1 t0))
  (Pre11: `0 <= l0` /\ `p - 1 < (array_length t1)`)
  (t2: (array Z))
  (Post8: (sorted_array t2 l0 `p - 1`) /\ (sub_permut l0 `p - 1` t2 t1))
  (Pre10: `0 <= p + 1` /\ `r0 < (array_length t2)`)
  (t3: (array Z))
  (Post10: (sorted_array t3 `p + 1` r0) /\ (sub_permut `p + 1` r0 t3 t2))
  (sorted_array t3 l0 r0) /\ (sub_permut l0 r0 t3 t0).
Proof.
Intros.
Apply quicksort_lemma with t1:=t1 t2:=t2 p:=p;
Intuition. 
Save.

(* Why obligation from file "quicksort.mlw", characters 1574-1703 *)
Lemma quick_rec_po_7 : 
  (l: Z)
  (r: Z)
  (t: (array Z))
  (Pre15: `0 <= l` /\ `r < (array_length t)`)
  (Variant1: Z)
  (l0: Z)
  (r0: Z)
  (t0: (array Z))
  (Pre14: Variant1 = `1 + r0 - l0`)
  (Pre13: `0 <= l0` /\ `r0 < (array_length t0)`)
  (Test1: `l0 >= r0`)
  (sorted_array t0 l0 r0) /\ (sub_permut l0 r0 t0 t0).
Proof.
Intros; Apply quicksort_trivial; Intuition.
Save.


(* Why obligation from file "quicksort.mlw", characters 1877-1984 *)
Lemma quicksort_po_1 : 
  (t: (array Z))
  `0 <= 0` /\ `(array_length t) - 1 < (array_length t)`.
Proof.
Intuition Omega.
Save.

(* Why obligation from file "quicksort.mlw", characters 1877-1984 *)
Lemma quicksort_po_2 : 
  (t: (array Z))
  (Pre1: `0 <= 0` /\ `(array_length t) - 1 < (array_length t)`)
  (t0: (array Z))
  (Post1: (sorted_array t0 `0` `(array_length t) - 1`) /\
          (sub_permut `0` `(array_length t) - 1` t0 t))
  (sorted_array t0 `0` `(array_length t0) - 1`) /\ (permut t0 t).
Proof.
Intuition EAuto.
SameLength t0 t; Rewrite H3; Trivial.
Save.


