(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.
Require Export Partition.
Require Import Omega.
Require Import ZArithRing.


 Proof.
 tauto.
Qed.

Proof.
intuition.
intros; ArraySubst t0.
Qed.


Proof.
intros; subst t1 t0 v.
auto with datatypes.
Qed.

Proof.
intros; omega.
Qed.

Proof.
intuition ArrayLength; omega.
Qed.

Proof.
intuition.
destruct result1; intuition.
Qed.

Proof.
intuition.
induction result1; auto.
 discriminate Post2.
Qed.

Proof.
intuition try discriminate.
omega.
omega.
replace (i3 - 1)%Z with (i2 - 1 + 1)%Z.
apply array_le_right_extension.
assumption.
ring (i2 - 1 + 1)%Z.
 assumption.
omega.
unfold Zwf; omega.
Qed.

Proof.
intuition.
Qed.

Proof.
intuition ArrayLength; omega.
Qed.

 Proof.
 intuition.
induction result2; auto.
induction result2; auto.
Qed.

Proof.
intuition.
induction result2; auto || discriminate Post5.
induction result2; auto || discriminate Post5.
Qed.

Proof.
intuition.
apply array_ge_cons.
 intros j0 Hj0.
 elim (Z_le_gt_dec (j2 + 1) j0); intro.
elim H16; intros.
 apply H12; omega.
cut (j0 = j2); [ intro | omega ].
rewrite H12; omega.
apply array_ge_cons.
 intros j0 Hj0.
 omega.
Qed.

Proof.
intuition.
Qed.

Proof.
intuition ArrayLength; omega.
Qed.

Proof.
intros.
decompose [and or] Invj; clear Invj.
 intuition unfold Zwf; ArrayLength; try omega.
replace (i3 - 1)%Z with (i2 - 1 + 1)%Z.
apply array_le_right_extension.
apply array_le_exchange with (t := t0) (x := i2) (y := j2).
omega.
 omega.
 assumption.
omega.
 apply exchange_sym; assumption.
ring (i2 - 1 + 1)%Z.
 elim Post25; intros.
 rewrite H26.
omega.
omega.
replace (j3 + 1)%Z with (j2 + 1 - 1)%Z.
apply array_ge_left_extension.
apply array_ge_exchange with (t := t0) (x := i2) (y := j2).
omega.
 generalize (sub_permut_length H20); intro; omega.
assumption.
 omega.
 apply exchange_sym; assumption.
ring (j2 + 1 - 1)%Z.
 elim Post25; intros.
 rewrite H27.
omega.
omega.
apply sub_permut_trans with (t' := t0).
apply exchange_is_sub_permut with (i := i2) (j := j2);
 [ omega | omega | assumption ].
assumption.
rewrite <- H23.
elim Post25; intros.
apply H28; omega.
absurd (i2 < j2)%Z; omega.
replace (j3 + 1)%Z with (j2 + 1 - 1)%Z.
apply array_ge_left_extension.
apply array_ge_exchange with (t := t0) (x := i2) (y := j2).
omega.
 intuition; generalize (sub_permut_length H21); intro; omega.
assumption.
 omega.
 apply exchange_sym; assumption.
ring (j2 + 1 - 1)%Z.
 elim Post25; intros.
 rewrite H28.
omega.
omega.
apply sub_permut_trans with (t' := t0).
apply exchange_is_sub_permut with (i := i2) (j := j2);
 [ omega | omega | assumption ].
assumption.
absurd (i2 < j2)%Z; omega.
Qed.

Proof.
intuition unfold Zwf; SameLength t t0; omega.
Qed.

Proof.
intuition.
apply array_le_empty; omega.
apply array_ge_empty; omega.
Qed.

Proof.
intuition SameLength t t0; omega.
Qed.

Proof.
intuition SameLength t t0; auto with *.
Qed.

Proof.
intuition.
apply piv.
omega.
omega.
apply array_le_cons.
intros i0 Hi0.
 elim (Z_le_lt_eq_dec l i0); intros.
(* case l < i *)
elim Post34; intros.
elim H11; intros.
rewrite H22.
 rewrite (H23 i0).
 rewrite H18.
 rewrite <- Post11.
apply H24; omega.
omega.
omega.
omega.
(* case l = i *)
elim Post34; intros.
rewrite <- b.
 rewrite H21.
 rewrite H22.
rewrite H18.
omega.
omega.
(* array_ge *)
apply array_ge_cons.
intros j0 Hj0.
elim Post34; intros.
 rewrite H22.
rewrite H18.
rewrite (H23 j0).
elim H15; intros.
 rewrite <- Post11.
 apply H24; omega.
SameLength t1 t0; SameLength t0 t; omega.
omega.
omega.
(* (sub_permut l r t1 t) *)
apply sub_permut_trans with (t' := t0).
apply exchange_is_sub_permut with (i := l) (j := i1).
omega.
omega.
assumption.
assumption.
Qed.

Proof.
intuition SameLength t0 t; omega.
Qed.

Proof.
intuition.
apply piv.
omega.
omega.
(* array_le *)
apply array_le_cons.
intros i0 Hi0.
 elim (Z_le_lt_eq_dec l i0); intros.
(* case l < i *)
elim Post30; intros.
 rewrite H22.
rewrite H18.
rewrite (H23 i0).
 elim H11; intros.
 rewrite <- Post11.
 apply H24; omega.
omega.
omega.
omega.
(* case l = i *)
rewrite <- b.
 elim Post30; intros.
rewrite H22.
 rewrite H18.
rewrite H21.
elim H11; intros.
 rewrite <- Post11.
 apply H24; omega.
omega.
(* array_ge *)
apply array_ge_cons.
intro j0.
 ring (i1 - 1 + 1)%Z.
 intro Hj.
 elim Post30; intros.
rewrite H22.
 rewrite (H23 j0).
rewrite H18.
elim H15; intros.
 elim (Z_le_lt_eq_dec i1 j0); intros.
(* case i0 < j *)
rewrite <- Post11.
 apply H24; omega.
(* case i0 = j *)
rewrite <- b.
 omega.
omega.
SameLength t1 t0; SameLength t0 t; omega.
omega.
omega.
(* (sub_permut t1 t l r) *)
apply sub_permut_trans with (t' := t0).
apply exchange_is_sub_permut with (i := l) (j := Zpred i1).
omega.
unfold Zpred; omega.
assumption.
assumption.
Qed.


Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma swap_po_1 : 
  forall (i: Z),
  forall (j: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= i /\ i < (array_length t)) /\ 0 <= j /\ j <
                (array_length t)),
  0 <= i /\ i < (array_length t).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma swap_po_2 : 
  forall (i: Z),
  forall (j: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= i /\ i < (array_length t)) /\ 0 <= j /\ j <
                (array_length t)),
  forall (HW_2: 0 <= i /\ i < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t i)),
  0 <= j /\ j < (array_length t).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma swap_po_3 : 
  forall (i: Z),
  forall (j: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= i /\ i < (array_length t)) /\ 0 <= j /\ j <
                (array_length t)),
  forall (HW_2: 0 <= i /\ i < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t i)),
  forall (HW_4: 0 <= j /\ j < (array_length t)),
  forall (result0: Z),
  forall (HW_5: result0 = (access t j)),
  0 <= i /\ i < (array_length t).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma swap_po_4 : 
  forall (i: Z),
  forall (j: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= i /\ i < (array_length t)) /\ 0 <= j /\ j <
                (array_length t)),
  forall (HW_2: 0 <= i /\ i < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t i)),
  forall (HW_4: 0 <= j /\ j < (array_length t)),
  forall (result0: Z),
  forall (HW_5: result0 = (access t j)),
  forall (HW_6: 0 <= i /\ i < (array_length t)),
  forall (t0: (array Z)),
  forall (HW_7: t0 = (update t i result0)),
  0 <= j /\ j < (array_length t0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma swap_po_5 : 
  forall (i: Z),
  forall (j: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= i /\ i < (array_length t)) /\ 0 <= j /\ j <
                (array_length t)),
  forall (HW_2: 0 <= i /\ i < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t i)),
  forall (HW_4: 0 <= j /\ j < (array_length t)),
  forall (result0: Z),
  forall (HW_5: result0 = (access t j)),
  forall (HW_6: 0 <= i /\ i < (array_length t)),
  forall (t0: (array Z)),
  forall (HW_7: t0 = (update t i result0)),
  forall (HW_8: 0 <= j /\ j < (array_length t0)),
  forall (t1: (array Z)),
  forall (HW_9: t1 = (update t0 j result)),
  (exchange t1 t i j).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_1 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  0 <= l /\ l < (array_length t).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_2 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
  (array_le t (l + 1) (l + 1 - 1) result) /\ (array_ge t (r + 1) r result) /\
  (sub_permut l r t t) /\ (access t l) = (access t l).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_3 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_4 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  0 <= i0 /\ i0 < (array_length t0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_5 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_11: result0 <= result),
  forall (HW_12: i0 < j),
  forall (i1: Z),
  forall (HW_13: i1 = (i0 + 1)),
  ((i <= i1 /\ i1 <= r) /\ (array_le t0 (l + 1) (i1 - 1) result)) /\
  (Zwf 0 (r - i1) (r - i0)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_6 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_11: result0 <= result),
  forall (HW_14: i0 >= j),
  (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_7 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_11: result0 <= result),
  forall (HW_14: i0 >= j),
  forall (HW_15: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_16: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  0 <= j0 /\ j0 < (array_length t0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_8 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_11: result0 <= result),
  forall (HW_14: i0 >= j),
  forall (HW_15: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_16: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_17: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_18: result1 = (access t0 j0)),
  forall (HW_19: result1 >= result),
  forall (HW_20: i0 < j0),
  forall (j1: Z),
  forall (HW_21: j1 = (j0 - 1)),
  ((l <= j1 /\ j1 <= j) /\ (array_ge t0 (j1 + 1) r result)) /\ (Zwf 0 j1 j0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_9 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_11: result0 <= result),
  forall (HW_14: i0 >= j),
  forall (HW_15: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_16: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_17: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_18: result1 = (access t0 j0)),
  forall (HW_19: result1 >= result),
  forall (HW_22: i0 >= j0),
  forall (HW_23: i0 < j0),
  (0 <= i0 /\ i0 < (array_length t0)) /\ 0 <= j0 /\ j0 < (array_length t0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_10 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_11: result0 <= result),
  forall (HW_14: i0 >= j),
  forall (HW_15: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_16: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_17: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_18: result1 = (access t0 j0)),
  forall (HW_19: result1 >= result),
  forall (HW_22: i0 >= j0),
  forall (HW_23: i0 < j0),
  forall (HW_24: (0 <= i0 /\ i0 < (array_length t0)) /\ 0 <= j0 /\ j0 <
                 (array_length t0)),
  forall (t1: (array Z)),
  forall (HW_25: (exchange t1 t0 i0 j0)),
  forall (i1: Z),
  forall (HW_26: i1 = (i0 + 1)),
  forall (j1: Z),
  forall (HW_27: j1 = (j0 - 1)),
  (((l + 1) <= i1 /\ i1 <= r) /\ j1 <= r /\
  (array_le t1 (l + 1) (i1 - 1) result) /\ (array_ge t1 (j1 + 1) r result) /\
  (sub_permut l r t1 t) /\ (access t1 l) = (access t l)) /\
  (Zwf 0 ((array_length t1) + 2 + j1 - i1) ((array_length t0) + 2 + j - i)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_11 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_11: result0 <= result),
  forall (HW_14: i0 >= j),
  forall (HW_15: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_16: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_17: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_18: result1 = (access t0 j0)),
  forall (HW_19: result1 >= result),
  forall (HW_28: i0 >= j0),
  (((l + 1) <= i0 /\ i0 <= r) /\ j0 <= r /\
  (array_le t0 (l + 1) (i0 - 1) result) /\ (array_ge t0 (j0 + 1) r result) /\
  (sub_permut l r t0 t) /\ (access t0 l) = (access t l)) /\
  (Zwf 0 ((array_length t0) + 2 + j0 - i0) ((array_length t0) + 2 + j - i)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_12 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_11: result0 <= result),
  forall (HW_14: i0 >= j),
  forall (HW_15: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_16: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_17: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_18: result1 = (access t0 j0)),
  forall (HW_29: result1 < result),
  forall (HW_30: i0 < j0),
  (0 <= i0 /\ i0 < (array_length t0)) /\ 0 <= j0 /\ j0 < (array_length t0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_13 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_11: result0 <= result),
  forall (HW_14: i0 >= j),
  forall (HW_15: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_16: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_17: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_18: result1 = (access t0 j0)),
  forall (HW_29: result1 < result),
  forall (HW_30: i0 < j0),
  forall (HW_31: (0 <= i0 /\ i0 < (array_length t0)) /\ 0 <= j0 /\ j0 <
                 (array_length t0)),
  forall (t1: (array Z)),
  forall (HW_32: (exchange t1 t0 i0 j0)),
  forall (i1: Z),
  forall (HW_33: i1 = (i0 + 1)),
  forall (j1: Z),
  forall (HW_34: j1 = (j0 - 1)),
  (((l + 1) <= i1 /\ i1 <= r) /\ j1 <= r /\
  (array_le t1 (l + 1) (i1 - 1) result) /\ (array_ge t1 (j1 + 1) r result) /\
  (sub_permut l r t1 t) /\ (access t1 l) = (access t l)) /\
  (Zwf 0 ((array_length t1) + 2 + j1 - i1) ((array_length t0) + 2 + j - i)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_14 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_11: result0 <= result),
  forall (HW_14: i0 >= j),
  forall (HW_15: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_16: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_17: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_18: result1 = (access t0 j0)),
  forall (HW_29: result1 < result),
  forall (HW_35: i0 >= j0),
  (((l + 1) <= i0 /\ i0 <= r) /\ j0 <= r /\
  (array_le t0 (l + 1) (i0 - 1) result) /\ (array_ge t0 (j0 + 1) r result) /\
  (sub_permut l r t0 t) /\ (access t0 l) = (access t l)) /\
  (Zwf 0 ((array_length t0) + 2 + j0 - i0) ((array_length t0) + 2 + j - i)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_15 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_36: result0 > result),
  (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_16 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_36: result0 > result),
  forall (HW_37: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_38: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  0 <= j0 /\ j0 < (array_length t0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_17 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_36: result0 > result),
  forall (HW_37: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_38: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_39: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_40: result1 = (access t0 j0)),
  forall (HW_41: result1 >= result),
  forall (HW_42: i0 < j0),
  forall (j1: Z),
  forall (HW_43: j1 = (j0 - 1)),
  ((l <= j1 /\ j1 <= j) /\ (array_ge t0 (j1 + 1) r result)) /\ (Zwf 0 j1 j0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_18 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_36: result0 > result),
  forall (HW_37: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_38: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_39: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_40: result1 = (access t0 j0)),
  forall (HW_41: result1 >= result),
  forall (HW_44: i0 >= j0),
  forall (HW_45: i0 < j0),
  (0 <= i0 /\ i0 < (array_length t0)) /\ 0 <= j0 /\ j0 < (array_length t0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_19 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_36: result0 > result),
  forall (HW_37: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_38: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_39: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_40: result1 = (access t0 j0)),
  forall (HW_41: result1 >= result),
  forall (HW_44: i0 >= j0),
  forall (HW_45: i0 < j0),
  forall (HW_46: (0 <= i0 /\ i0 < (array_length t0)) /\ 0 <= j0 /\ j0 <
                 (array_length t0)),
  forall (t1: (array Z)),
  forall (HW_47: (exchange t1 t0 i0 j0)),
  forall (i1: Z),
  forall (HW_48: i1 = (i0 + 1)),
  forall (j1: Z),
  forall (HW_49: j1 = (j0 - 1)),
  (((l + 1) <= i1 /\ i1 <= r) /\ j1 <= r /\
  (array_le t1 (l + 1) (i1 - 1) result) /\ (array_ge t1 (j1 + 1) r result) /\
  (sub_permut l r t1 t) /\ (access t1 l) = (access t l)) /\
  (Zwf 0 ((array_length t1) + 2 + j1 - i1) ((array_length t0) + 2 + j - i)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_20 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_36: result0 > result),
  forall (HW_37: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_38: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_39: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_40: result1 = (access t0 j0)),
  forall (HW_41: result1 >= result),
  forall (HW_50: i0 >= j0),
  (((l + 1) <= i0 /\ i0 <= r) /\ j0 <= r /\
  (array_le t0 (l + 1) (i0 - 1) result) /\ (array_ge t0 (j0 + 1) r result) /\
  (sub_permut l r t0 t) /\ (access t0 l) = (access t l)) /\
  (Zwf 0 ((array_length t0) + 2 + j0 - i0) ((array_length t0) + 2 + j - i)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_21 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_36: result0 > result),
  forall (HW_37: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_38: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_39: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_40: result1 = (access t0 j0)),
  forall (HW_51: result1 < result),
  forall (HW_52: i0 < j0),
  (0 <= i0 /\ i0 < (array_length t0)) /\ 0 <= j0 /\ j0 < (array_length t0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_22 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_36: result0 > result),
  forall (HW_37: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_38: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_39: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_40: result1 = (access t0 j0)),
  forall (HW_51: result1 < result),
  forall (HW_52: i0 < j0),
  forall (HW_53: (0 <= i0 /\ i0 < (array_length t0)) /\ 0 <= j0 /\ j0 <
                 (array_length t0)),
  forall (t1: (array Z)),
  forall (HW_54: (exchange t1 t0 i0 j0)),
  forall (i1: Z),
  forall (HW_55: i1 = (i0 + 1)),
  forall (j1: Z),
  forall (HW_56: j1 = (j0 - 1)),
  (((l + 1) <= i1 /\ i1 <= r) /\ j1 <= r /\
  (array_le t1 (l + 1) (i1 - 1) result) /\ (array_ge t1 (j1 + 1) r result) /\
  (sub_permut l r t1 t) /\ (access t1 l) = (access t l)) /\
  (Zwf 0 ((array_length t1) + 2 + j1 - i1) ((array_length t0) + 2 + j - i)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_23 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_6: i < j),
  forall (HW_7: (i <= i /\ i <= r) /\ (array_le t0 (l + 1) (i - 1) result)),
  forall (i0: Z),
  forall (HW_8: (i <= i0 /\ i0 <= r) /\ (array_le t0 (l + 1) (i0 - 1) result)),
  forall (HW_9: 0 <= i0 /\ i0 < (array_length t0)),
  forall (result0: Z),
  forall (HW_10: result0 = (access t0 i0)),
  forall (HW_36: result0 > result),
  forall (HW_37: (l <= j /\ j <= j) /\ (array_ge t0 (j + 1) r result)),
  forall (j0: Z),
  forall (HW_38: (l <= j0 /\ j0 <= j) /\ (array_ge t0 (j0 + 1) r result)),
  forall (HW_39: 0 <= j0 /\ j0 < (array_length t0)),
  forall (result1: Z),
  forall (HW_40: result1 = (access t0 j0)),
  forall (HW_51: result1 < result),
  forall (HW_57: i0 >= j0),
  (((l + 1) <= i0 /\ i0 <= r) /\ j0 <= r /\
  (array_le t0 (l + 1) (i0 - 1) result) /\ (array_ge t0 (j0 + 1) r result) /\
  (sub_permut l r t0 t) /\ (access t0 l) = (access t l)) /\
  (Zwf 0 ((array_length t0) + 2 + j0 - i0) ((array_length t0) + 2 + j - i)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_24 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_58: i >= j),
  0 <= i /\ i < (array_length t0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_25 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_58: i >= j),
  forall (HW_59: 0 <= i /\ i < (array_length t0)),
  forall (result0: Z),
  forall (HW_60: result0 = (access t0 i)),
  forall (HW_61: result0 < result),
  (0 <= l /\ l < (array_length t0)) /\ 0 <= i /\ i < (array_length t0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_26 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_58: i >= j),
  forall (HW_59: 0 <= i /\ i < (array_length t0)),
  forall (result0: Z),
  forall (HW_60: result0 = (access t0 i)),
  forall (HW_61: result0 < result),
  forall (HW_62: (0 <= l /\ l < (array_length t0)) /\ 0 <= i /\ i <
                 (array_length t0)),
  forall (t1: (array Z)),
  forall (HW_63: (exchange t1 t0 l i)),
  (l <= i /\ i <= r) /\ (partition_p t1 l r i) /\ (sub_permut l r t1 t).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_27 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_58: i >= j),
  forall (HW_59: 0 <= i /\ i < (array_length t0)),
  forall (result0: Z),
  forall (HW_60: result0 = (access t0 i)),
  forall (HW_64: result0 >= result),
  (0 <= l /\ l < (array_length t0)) /\ 0 <= (i - 1) /\ (i - 1) <
  (array_length t0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma partition_po_28 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (HW_1: (0 <= l /\ l < r) /\ r < (array_length t)),
  forall (HW_2: 0 <= l /\ l < (array_length t)),
  forall (result: Z),
  forall (HW_3: result = (access t l)),
  forall (HW_4: ((l + 1) <= (l + 1) /\ (l + 1) <= r) /\ r <= r /\
                (array_le t (l + 1) (l + 1 - 1) result) /\
                (array_ge t (r + 1) r result) /\ (sub_permut l r t t) /\
                (access t l) = (access t l)),
  forall (i: Z),
  forall (j: Z),
  forall (t0: (array Z)),
  forall (HW_5: ((l + 1) <= i /\ i <= r) /\ j <= r /\
                (array_le t0 (l + 1) (i - 1) result) /\
                (array_ge t0 (j + 1) r result) /\ (sub_permut l r t0 t) /\
                (access t0 l) = (access t l)),
  forall (HW_58: i >= j),
  forall (HW_59: 0 <= i /\ i < (array_length t0)),
  forall (result0: Z),
  forall (HW_60: result0 = (access t0 i)),
  forall (HW_64: result0 >= result),
  forall (HW_65: (0 <= l /\ l < (array_length t0)) /\ 0 <= (i - 1) /\
                 (i - 1) < (array_length t0)),
  forall (t1: (array Z)),
  forall (HW_66: (exchange t1 t0 l (i - 1))),
  (l <= (i - 1) /\ (i - 1) <= r) /\ (partition_p t1 l r (i - 1)) /\
  (sub_permut l r t1 t).
Proof.
(* FILL PROOF HERE *)
Save.

