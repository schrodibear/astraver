rm -f pointer.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only pointer.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat pointer.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_s :
((\offset_min(s) <= 0) && (\offset_max(s) >= 0))

invariant valid_t :
((\offset_min(t) <= 0) && (\offset_max(t) >= 4))

tag S = {
  int_P[0] x; 
  int32 y;
}

type S = [S]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 f(int_P[..] x)
  requires (C_10 : ((C_11 : (\offset_min(x) <= 0)) &&
                     (C_12 : (\offset_max(x) >= 0))));
behavior default:
  assumes true;
  assigns x.int_M;
  ensures (C_13 : ((C_14 : (x.int_M == 1)) && (C_15 : (\result == 0))));
{  
   (var int32 tmp);
   
   {  (C_2 : ((C_1 : x.int_M) = 0));
      (C_4 : (tmp = (C_3 : x.int_M)));
      (C_9 : ((C_8 : x.int_M) = (C_7 : ((C_6 : ((C_5 : x.int_M) + 1)) :> int32))));
      
      (return tmp)
   }
}

int32 f2(int_P[..] x)
  requires (C_25 : ((C_26 : (\offset_min(x) <= 0)) &&
                     (C_27 : (\offset_max(x) >= 0))));
behavior default_1:
  assumes true;
  ensures (C_28 : ((C_29 : (x.int_M == 1)) && (C_30 : (\result == 1))));
{  
   (var int32 __retres);
   
   {  (C_17 : ((C_16 : x.int_M) = 0));
      (C_22 : ((C_21 : x.int_M) = (C_20 : ((C_19 : ((C_18 : x.int_M) + 1)) :> int32))));
      (C_24 : (__retres = (C_23 : x.int_M)));
      
      (return __retres)
   }
}

int_P[..] r;

int32 g()
  requires (C_33 : ((C_34 : (\offset_min(r) <= 0)) &&
                     (C_35 : (\offset_max(r) >= 0))));
behavior default_2:
  assumes true;
  ensures (C_36 : (r.int_M == 1));
{  
   (var int32 tmp);
   
   {  (C_32 : (tmp = (C_31 : f(r))));
      
      (return tmp)
   }
}

int32 g2()
behavior default_3:
  assumes true;
  ensures (C_41 : (r.int_M == 1));
{  
   (var int32 tmp_0);
   
   {  (C_38 : (r = (C_37 : (new int_P[1]))));
      (C_40 : (tmp_0 = (C_39 : f(r))));
      
      (return tmp_0)
   }
}

int32 h()
behavior default_4:
  assumes true;
  ensures (C_53 : (\result == 1));
{  
   (var int_P[0] z);
   
   (var int32 tmp);
   
   (var int32 __retres);
   
   {  (C_43 : (z = (C_42 : (new int_P[1]))));
      (C_45 : ((C_44 : z.int_M) = 0));
      (C_47 : (tmp = (C_46 : f(z))));
      (C_51 : (__retres = (C_50 : ((C_49 : (tmp + (C_48 : z.int_M))) :> int32))));
      
      {  (C_52 : (free(z)));
         
         (return __retres)
      }
   }
}

int_P[0..4] t;

int32 array1()
  requires (C_62 : ((C_63 : (\offset_min(t) <= 2)) &&
                     (C_64 : (\offset_max(t) >= 2))));
behavior default_5:
  assumes true;
  ensures (C_65 : (\result == 1));
{  
   (var int_P[..] p);
   
   (var int_P[..] tmp);
   
   (var int32 tmp_0);
   
   {  (C_55 : (p = (C_54 : (t + 2))));
      (C_56 : (tmp = p));
      (C_58 : (p = (C_57 : (p + 1))));
      (C_59 : (tmp_0 = 1));
      (C_61 : ((C_60 : tmp.int_M) = tmp_0));
      
      (return tmp_0)
   }
}

S[0] s;

int32 struct1(int32 n)
behavior default_6:
  assumes true;
  ensures (C_74 : (\result >= 1));
{  
   (var int_P[..] p);
   
   (var int32 __retres);
   
   {  (C_67 : (p = (C_66 : s.x)));
      (C_69 : ((C_68 : p.int_M) = 1));
      (C_71 : ((C_70 : s.y) = 2));
      (C_73 : (__retres = (C_72 : p.int_M)));
      
      (return __retres)
   }
}
