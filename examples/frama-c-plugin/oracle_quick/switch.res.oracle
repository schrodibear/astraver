rm -f switch.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only switch.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat switch.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 f1(int32 x)
behavior default:
  assumes true;
  ensures (C_7 : ((x == 4) ==> (\result == 2)));
{  
   (var int32 y);
   
   {  
      {  
         switch (x) {
           case 0:
           case 1:
           {  (C_1 : (y = 1));
              (C_2 : (y = 4));
              
              (goto switch_0_break)
           }
           case 2:
           case 4:
           {  (C_3 : (y = 2));
              
              (goto switch_0_break)
           }
           case 3:
           {  (C_4 : (y = 3));
              
              (goto switch_0_break)
           }
           default:
           {  ();
              (C_5 : (y = 4));
              (C_6 : (y = 5))
           }
         };
         (switch_0_break : ())
      };
      
      (return y)
   }
}

int32 f1a(int32 x)
behavior default_1:
  assumes true;
  ensures (C_17 : ((x == 4) ==> (\result == 2)));
{  
   (var int32 y);
   
   (var int32 __retres);
   
   {  
      {  
         switch (x) {
           case 0:
           case 1:
           {  (C_8 : (y = 1));
              (C_9 : (y = 4));
              
              (goto switch_1_break)
           }
           case 2:
           case 4:
           {  (C_10 : (y = 2));
              (C_11 : (__retres = y));
              
              (goto return_label)
           }
           case 3:
           {  (C_12 : (y = 3));
              (C_13 : (__retres = y));
              
              (goto return_label)
           }
           default:
           {  ();
              (C_14 : (y = 4))
           }
         };
         (switch_1_break : ())
      };
      (C_15 : (y = 5));
      (C_16 : (__retres = y));
      (return_label : 
      (return __retres))
   }
}

int32 f2(int32 x)
behavior default_2:
  assumes true;
  ensures (C_22 : (\result == 4));
{  
   (var int32 y);
   
   {  
      {  
         switch (x) {
           case 0:
           case 1:
           {  (C_18 : (y = 1))
           }
           case 2:
           case 4:
           {  (C_19 : (y = 2))
           }
           case 3:
           {  (C_20 : (y = 3))
           }
           default:
           {  ();
              (C_21 : (y = 4))
           }
         }
      };
      
      (return y)
   }
}

int32 f3(int32 x)
behavior default_3:
  assumes true;
  ensures (C_27 : (\result == 4));
{  
   (var int32 y);
   
   {  
      {  
         switch (x) {
           case 0:
           case 1:
           {  (C_23 : (y = 1))
           }
           default:
           {  ();
              (C_24 : (y = 2))
           }
           case 3:
           {  (C_25 : (y = 3))
           }
           case 2:
           {  (C_26 : (y = 4))
           }
         }
      };
      
      (return y)
   }
}

int32 f4(int32 x)
behavior default_4:
  assumes true;
  ensures (C_30 : (\result == 0));
{  
   (var int32 y);
   
   {  (C_28 : (y = 0));
      
      {  
         switch (x) {
           case 0:
           {  (if (x == 0) then 
              (goto switch_4_break) else ());
              (C_29 : (y = 1))
           }
         };
         (switch_4_break : ())
      };
      
      (return y)
   }
}

int32 f5(int32 x)
behavior default_5:
  assumes true;
  ensures (C_34 : ((x == 1) ==> (\result == 1)));
{  
   (var int32 y);
   
   {  (C_31 : (y = 0));
      
      {  
         switch (x) {
           case 1:
           {  
              {  
                 invariant (C_32 : true);
                 while (true)
                 {  
                    {  (if (x > 0) then () else 
                       (goto while_6_break));
                       
                       (goto while_6_break)
                    }
                 };
                 (while_6_break : ())
              };
              (C_33 : (y = 1))
           }
         }
      };
      
      (return y)
   }
}

int32 f6(int32 x)
behavior default_6:
  assumes true;
  ensures (C_37 : ((x == 2) ==> (\result == 1)));
{  
   (var int32 y);
   
   {  (C_35 : (y = 0));
      
      {  
         switch (x) {
           case 2:
           {  (C_36 : (y = 1))
           }
         }
      };
      
      (return y)
   }
}

int32 f7(int32 x)
behavior default_7:
  assumes true;
  ensures (C_40 : ((x == 5) ==> (\result == 1)));
{  
   (var int32 y);
   
   {  (C_38 : (y = 0));
      
      {  
         switch (x) {
           case 5:
           {  (C_39 : (y = 1))
           }
         }
      };
      
      (return y)
   }
}
