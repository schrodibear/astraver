rm -f division.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only division.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat division.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

axiom distr_right :
(\forall int32 x;
  (\forall int32 y;
    (\forall int32 z;
      ((x * (y + z)) == ((x * y) + (x * z))))))

axiom distr_left :
(\forall int32 x;
  (\forall int32 y;
    (\forall int32 z;
      (((x + y) * z) == ((x * z) + (y * z))))))

int32 division(int32 x, int32 y)
  requires (C_13 : ((C_14 : (x >= 0)) && (C_15 : (y > 0))));
behavior default:
  assumes true;
  ensures (C_16 : (\exists int32 r;
                    ((x == ((\result * y) + r)) && ((0 <= r) && (r < y)))));
{  
   (var int32 i);
   
   (var int32 j);
   
   {  (C_1 : (i = 0));
      (C_2 : (j = x));
      
      {  
         invariant (C_3 : ((C_4 : (x == ((i * y) + j))) && (C_5 : (0 <= j))));
         variant (C_6 : j);
         while (true)
         {  
            {  (if (j >= y) then () else 
               (goto while_0_break));
               (C_9 : (i = (C_8 : ((C_7 : (i + 1)) :> int32))));
               (C_12 : (j = (C_11 : ((C_10 : (j - y)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      (return i)
   }
}
