rm -f phase1.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only phase1.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat phase1.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag enum___anonenum_T_RESULTAT_1_P = {
  __anonenum_T_RESULTAT_1 enum___anonenum_T_RESULTAT_1_M;
}

type enum___anonenum_T_RESULTAT_1_P = [enum___anonenum_T_RESULTAT_1_P]

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
}

type void_P = [void_P]

type __anonenum_T_RESULTAT_1 = 0..1

type __anonenum_T_ID_TEST_2 = 0..7

logic int32 strlen{L}(char_P[..] s) reads (s + [0..]).char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      ((((0 <= k) && (k <= i)) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

uint32 __ConsignerPanne_cpt;

enum___anonenum_T_RESULTAT_1_P[..] __ConsignerPanne_v0;

uint32 __TT0_cpt;

enum___anonenum_T_RESULTAT_1_P[..] __TT0_v0;

uint32 __TT1_cpt;

enum___anonenum_T_RESULTAT_1_P[..] __TT1_v0;

uint32 __TT2_cpt;

enum___anonenum_T_RESULTAT_1_P[..] __TT2_v0;

uint32 __TT3_cpt;

enum___anonenum_T_RESULTAT_1_P[..] __TT3_v0;

uint32 __TT4_cpt;

enum___anonenum_T_RESULTAT_1_P[..] __TT4_v0;

uint32 __TT5_cpt;

enum___anonenum_T_RESULTAT_1_P[..] __TT5_v0;

uint32 __TT6_cpt;

enum___anonenum_T_RESULTAT_1_P[..] __TT6_v0;

uint32 __TT7_cpt;

enum___anonenum_T_RESULTAT_1_P[..] __TT7_v0;

logic f_cond0{L}(enum___anonenum_T_RESULTAT_1_P[..] testv0, integer cpt) =
((testv0 + cpt).enum___anonenum_T_RESULTAT_1_M == 1)

logic f_cond1{L}(enum___anonenum_T_RESULTAT_1_P[..] testv0, integer cpt) =
((testv0 + cpt).enum___anonenum_T_RESULTAT_1_M == 0)

logic f_cond_OK{L}(enum___anonenum_T_RESULTAT_1_P[..] testv0, integer cpt,
                   integer cpt_panne) =
(f_cond0{L}(testv0, cpt) ||
  (f_cond1{L}(testv0, cpt) &&
    ((__ConsignerPanne_v0 + cpt_panne).enum___anonenum_T_RESULTAT_1_M == 1)))

__anonenum_T_RESULTAT_1 TesterOK(enum___anonenum_T_RESULTAT_1_P[..] status,
                                 __anonenum_T_ID_TEST_2 id_test)
  requires (C_1 : ((C_2 : (\offset_min(status) <= 0)) &&
                    (C_3 : (\offset_max(status) >= 0))));
behavior default_1:
  assumes true;
  assigns status.enum___anonenum_T_RESULTAT_1_M,
  __ConsignerPanne_cpt,
  __TT0_cpt,
  __TT1_cpt,
  __TT2_cpt,
  __TT3_cpt,
  __TT4_cpt,
  __TT5_cpt,
  __TT6_cpt,
  __TT7_cpt;
  ensures (C_4 : ((C_5 : (\old(__ConsignerPanne_cpt) <= __ConsignerPanne_cpt)) &&
                   (C_6 : (__ConsignerPanne_cpt <=
                            (\old(__ConsignerPanne_cpt) + 1)))));
behavior T0:
  assumes ((id_test == 0) && (status.enum___anonenum_T_RESULTAT_1_M == 1));
  assigns status.enum___anonenum_T_RESULTAT_1_M,
  __ConsignerPanne_cpt,
  __TT0_cpt;
  ensures (C_7 : (f_cond_OK{Here}(__TT0_v0, \old(__TT0_cpt),
                                  \old(__ConsignerPanne_cpt)) ==>
                   (status.enum___anonenum_T_RESULTAT_1_M == 1)));
behavior T1:
  assumes ((id_test == 1) && (status.enum___anonenum_T_RESULTAT_1_M == 1));
  assigns status.enum___anonenum_T_RESULTAT_1_M,
  __ConsignerPanne_cpt,
  __TT1_cpt;
  ensures (C_8 : (f_cond_OK{Here}(__TT1_v0, \old(__TT1_cpt),
                                  \old(__ConsignerPanne_cpt)) ==>
                   (status.enum___anonenum_T_RESULTAT_1_M == 1)));
behavior T2:
  assumes ((id_test == 2) && (status.enum___anonenum_T_RESULTAT_1_M == 1));
  assigns status.enum___anonenum_T_RESULTAT_1_M,
  __ConsignerPanne_cpt,
  __TT2_cpt;
  ensures (C_9 : (f_cond_OK{Here}(__TT2_v0, \old(__TT2_cpt),
                                  \old(__ConsignerPanne_cpt)) ==>
                   (status.enum___anonenum_T_RESULTAT_1_M == 1)));
behavior T3:
  assumes ((id_test == 3) && (status.enum___anonenum_T_RESULTAT_1_M == 1));
  assigns status.enum___anonenum_T_RESULTAT_1_M,
  __ConsignerPanne_cpt,
  __TT3_cpt;
  ensures (C_10 : (f_cond_OK{Here}(__TT3_v0, \old(__TT3_cpt),
                                   \old(__ConsignerPanne_cpt)) ==>
                    (status.enum___anonenum_T_RESULTAT_1_M == 1)));
behavior T4:
  assumes ((id_test == 4) && (status.enum___anonenum_T_RESULTAT_1_M == 1));
  assigns status.enum___anonenum_T_RESULTAT_1_M,
  __ConsignerPanne_cpt,
  __TT4_cpt;
  ensures (C_11 : (f_cond_OK{Here}(__TT4_v0, \old(__TT4_cpt),
                                   \old(__ConsignerPanne_cpt)) ==>
                    (status.enum___anonenum_T_RESULTAT_1_M == 1)));
behavior T5:
  assumes ((id_test == 5) && (status.enum___anonenum_T_RESULTAT_1_M == 1));
  assigns status.enum___anonenum_T_RESULTAT_1_M,
  __ConsignerPanne_cpt,
  __TT5_cpt;
  ensures (C_12 : (f_cond_OK{Here}(__TT5_v0, \old(__TT5_cpt),
                                   \old(__ConsignerPanne_cpt)) ==>
                    (status.enum___anonenum_T_RESULTAT_1_M == 1)));
behavior T6:
  assumes ((id_test == 6) && (status.enum___anonenum_T_RESULTAT_1_M == 1));
  assigns status.enum___anonenum_T_RESULTAT_1_M,
  __ConsignerPanne_cpt,
  __TT6_cpt;
  ensures (C_13 : (f_cond_OK{Here}(__TT6_v0, \old(__TT6_cpt),
                                   \old(__ConsignerPanne_cpt)) ==>
                    (status.enum___anonenum_T_RESULTAT_1_M == 1)));
behavior T7:
  assumes ((id_test == 7) && (status.enum___anonenum_T_RESULTAT_1_M == 1));
  assigns status.enum___anonenum_T_RESULTAT_1_M,
  __ConsignerPanne_cpt,
  __TT7_cpt;
  ensures (C_14 : (f_cond_OK{Here}(__TT7_v0, \old(__TT7_cpt),
                                   \old(__ConsignerPanne_cpt)) ==>
                    (status.enum___anonenum_T_RESULTAT_1_M == 1)));
;

uint32 __ConsignerPanne_cpt_t0;

uint32 __ConsignerPanne_cpt_t1;

uint32 __ConsignerPanne_cpt_t2;

uint32 __ConsignerPanne_cpt_t3;

uint32 __ConsignerPanne_cpt_t4;

uint32 __ConsignerPanne_cpt_t5;

uint32 __ConsignerPanne_cpt_t6;

uint32 __ConsignerPanne_cpt_t7;

__anonenum_T_RESULTAT_1 phase1()
  requires (C_37 : ((C_38 : (\offset_min(__TT0_v0) <= __TT0_cpt)) &&
                     (C_39 : (\offset_max(__TT0_v0) >= (__TT0_cpt + 1)))));
  requires (C_40 : ((C_41 : (\offset_min(__TT1_v0) <= __TT1_cpt)) &&
                     (C_42 : (\offset_max(__TT1_v0) >= (__TT1_cpt + 1)))));
  requires (C_43 : ((C_44 : (\offset_min(__TT2_v0) <= __TT2_cpt)) &&
                     (C_45 : (\offset_max(__TT2_v0) >= (__TT2_cpt + 1)))));
  requires (C_46 : ((C_47 : (\offset_min(__TT3_v0) <= __TT3_cpt)) &&
                     (C_48 : (\offset_max(__TT3_v0) >= (__TT3_cpt + 1)))));
  requires (C_49 : ((C_50 : (\offset_min(__TT4_v0) <= __TT4_cpt)) &&
                     (C_51 : (\offset_max(__TT4_v0) >= (__TT4_cpt + 1)))));
  requires (C_52 : ((C_53 : (\offset_min(__TT5_v0) <= __TT5_cpt)) &&
                     (C_54 : (\offset_max(__TT5_v0) >= (__TT5_cpt + 1)))));
  requires (C_55 : ((C_56 : (\offset_min(__TT6_v0) <= __TT6_cpt)) &&
                     (C_57 : (\offset_max(__TT6_v0) >= (__TT6_cpt + 1)))));
  requires (C_58 : ((C_59 : (\offset_min(__TT7_v0) <= __TT7_cpt)) &&
                     (C_60 : (\offset_max(__TT7_v0) >= (__TT7_cpt + 1)))));
  requires (C_61 : ((C_62 : (\offset_min(__ConsignerPanne_v0) <=
                              __ConsignerPanne_cpt)) &&
                     (C_63 : (\offset_max(__ConsignerPanne_v0) >=
                               (__ConsignerPanne_cpt + 7)))));
behavior default_2:
  assumes true;
  ensures (C_64 : ((((((((f_cond_OK{Here}(__TT0_v0, \old(__TT0_cpt),
                                          __ConsignerPanne_cpt_t0) &&
                           f_cond_OK{Here}(__TT1_v0, \old(__TT1_cpt),
                                           __ConsignerPanne_cpt_t1)) &&
                          f_cond_OK{Here}(__TT2_v0, \old(__TT2_cpt),
                                          __ConsignerPanne_cpt_t2)) &&
                         f_cond_OK{Here}(__TT3_v0, \old(__TT3_cpt),
                                         __ConsignerPanne_cpt_t3)) &&
                        f_cond_OK{Here}(__TT4_v0, \old(__TT4_cpt),
                                        __ConsignerPanne_cpt_t4)) &&
                       f_cond_OK{Here}(__TT5_v0, \old(__TT5_cpt),
                                       __ConsignerPanne_cpt_t5)) &&
                      f_cond_OK{Here}(__TT6_v0, \old(__TT6_cpt),
                                      __ConsignerPanne_cpt_t6)) &&
                     f_cond_OK{Here}(__TT7_v0, \old(__TT7_cpt),
                                     __ConsignerPanne_cpt_t7)) ==>
                    (\result == 1)));
{  
   (var enum___anonenum_T_RESULTAT_1_P[0] Rl_Status);
   
   {  (C_16 : (Rl_Status = (C_15 : (new enum___anonenum_T_RESULTAT_1_P[1]))));
      (C_18 : ((C_17 : Rl_Status.enum___anonenum_T_RESULTAT_1_M) = 1));
      (C_19 : (__ConsignerPanne_cpt_t0 = __ConsignerPanne_cpt));
      (C_20 : TesterOK(Rl_Status, 0));
      (C_21 : (__ConsignerPanne_cpt_t1 = __ConsignerPanne_cpt));
      (C_22 : TesterOK(Rl_Status, 1));
      (C_23 : (__ConsignerPanne_cpt_t2 = __ConsignerPanne_cpt));
      (C_24 : TesterOK(Rl_Status, 2));
      (C_25 : (__ConsignerPanne_cpt_t3 = __ConsignerPanne_cpt));
      (C_26 : TesterOK(Rl_Status, 3));
      (C_27 : (__ConsignerPanne_cpt_t4 = __ConsignerPanne_cpt));
      (C_28 : TesterOK(Rl_Status, 4));
      (C_29 : (__ConsignerPanne_cpt_t5 = __ConsignerPanne_cpt));
      (C_30 : TesterOK(Rl_Status, 5));
      (C_31 : (__ConsignerPanne_cpt_t6 = __ConsignerPanne_cpt));
      (C_32 : TesterOK(Rl_Status, 6));
      (C_33 : (__ConsignerPanne_cpt_t7 = __ConsignerPanne_cpt));
      (C_34 : TesterOK(Rl_Status, 7));
      
      {  (C_35 : (free(Rl_Status)));
         
         (return (C_36 : Rl_Status.enum___anonenum_T_RESULTAT_1_M))
      }
   }
}
