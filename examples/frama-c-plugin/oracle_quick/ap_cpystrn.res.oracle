rm -f ap_cpystrn.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only ap_cpystrn.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat ap_cpystrn.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

char_P[..] ap_cpystrn(char_P[..] dst, char_P[..] src, uint32 dst_size)
{  
   (var int32 i);
   
   (var char_P[..] __retres);
   
   (var int32 __jc_off___retres);
   
   {  (if (dst_size == 0) then 
      {  (C_1 : (__jc_off___retres = 0));
         
         (goto return_label)
      } else ());
      (C_2 : (i = 0));
      
      {  
         invariant (C_3 : true);
         while (true)
         {  
            {  (if ((C_6 : (i :> uint32)) <
                     (C_5 : ((C_4 : (dst_size - 1)) :> uint32))) then () else 
               (goto while_0_break));
               
               {  
                  (assert (C_7 : (hint : (strlen(src) >= i))));
                  (C_12 : ((C_11 : (C_10 : (dst + i)).char_M) = (C_9 : 
                                                                (C_8 : 
                                                                (src +
                                                                  i)).char_M)))
               };
               
               {  
                  (assert (C_13 : (hint : (strlen(src) >= i))));
                  
                  (assert (C_14 : (hint : (strlen(src) >= i))));
                  (if ((C_18 : ((C_17 : (C_16 : (src + i)).char_M) :> int32)) ==
                        0) then 
                  {  ();
                     (C_15 : (__jc_off___retres = i));
                     
                     (goto return_label)
                  } else ())
               };
               (C_21 : (i = (C_20 : ((C_19 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      {  (C_24 : ((C_23 : (C_22 : (dst + i)).char_M) = 0));
         ();
         ()
      };
      (C_25 : (__jc_off___retres = i));
      (return_label : 
      (return (C_26 : (dst + __jc_off___retres))))
   }
}
