rm -f ref_glob.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only ref_glob.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat ref_glob.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag int_xP = {
  int_P[..] int_xM;
}

type int_xP = [int_xP]

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_t :
((\offset_min(t) <= 0) && (\offset_max(t) >= 2))

tag __anonstruct_las_1 = {
  int_P[0] c1; 
  int_P[0] c2;
}

type __anonstruct_las_1 = [__anonstruct_las_1]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

unit g(int_P[..] p)
  requires (C_3 : ((C_4 : (\offset_min(p) <= 0)) &&
                    (C_5 : (\offset_max(p) >= 0))));
behavior default:
  assumes true;
  assigns p.int_M;
  ensures (C_6 : (p.int_M == 1));
{  
   {  (C_2 : ((C_1 : p.int_M) = 1));
      
      (return ())
   }
}

int_P[0] x;

unit f1()
behavior default_1:
  assumes true;
  assigns x.int_M;
  ensures (C_9 : (x.int_M == 1));
{  
   {  (C_8 : ((C_7 : x.int_M) = 1));
      
      (return ())
   }
}

unit f2()
behavior default_2:
  assumes true;
  assigns x.int_M;
  ensures (C_11 : (x.int_M == 1));
{  
   {  (C_10 : g(x));
      
      (return ())
   }
}

__anonstruct_las_1[..] plas;

unit f4()
  requires (C_19 : ((C_20 : (\offset_min(plas) <= 0)) &&
                     (C_21 : (\offset_max(plas) >= 0))));
behavior default_3:
  assumes true;
  assigns plas.c1.int_M,
  plas.c2.int_M;
  ensures (C_22 : ((C_23 : (plas.c1.int_M == 1)) &&
                    (C_24 : (plas.c2.int_M == 1))));
{  
   {  (C_14 : ((C_13 : (C_12 : plas.c2).int_M) = 2));
      (C_16 : g((C_15 : plas.c1)));
      (C_18 : g((C_17 : plas.c2)));
      
      (return ())
   }
}

int_P[0..2] t;

unit h(int_xP[..] p)
  requires (C_28 : (((C_30 : (\offset_min(p) <= 0)) &&
                      (C_31 : (\offset_max(p) >= 0))) &&
                     ((C_33 : (\offset_min(p.int_xM) <= 0)) &&
                       (C_34 : (\offset_max(p.int_xM) >= 0)))));
behavior default_4:
  assumes true;
  assigns p.int_xM.int_M;
  ensures (C_35 : (p.int_xM.int_M == 2));
{  
   {  (C_27 : ((C_26 : (C_25 : p.int_xM).int_M) = 2));
      
      (return ())
   }
}
