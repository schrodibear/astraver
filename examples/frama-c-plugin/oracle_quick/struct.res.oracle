rm -f struct.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only struct.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat struct.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag struct_S_xP = {
  S[..] struct_S_xM;
}

type struct_S_xP = [struct_S_xP]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_s :
((\offset_min(s) <= 0) && (\offset_max(s) >= 0))

invariant valid_pps :
((\offset_min(pps) <= 0) && (\offset_max(pps) >= 0))

tag T = {
  int32 x; 
  int32 y;
}

type T = [T]

tag S = {
  int32 z; 
  T[0] t;
}

type S = [S]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 f(T[..] t2)
  requires (C_13 : (((C_15 : (\offset_min(t2) <= 0)) &&
                      (C_16 : (\offset_max(t2) >= 0))) &&
                     (C_17 : (t2.x == 0))));
behavior default:
  assumes true;
  assigns t2.x;
  ensures (C_18 : (((C_20 : (\result == 1)) && (C_21 : (t2.x == 2))) &&
                    (C_22 : (t2.y == \old(t2.y)))));
{  
   (var int32 tmp);
   
   {  (C_5 : ((C_4 : t2.x) = (C_3 : ((C_2 : ((C_1 : t2.x) + 1)) :> int32))));
      (C_7 : (tmp = (C_6 : t2.x)));
      (C_12 : ((C_11 : t2.x) = (C_10 : ((C_9 : ((C_8 : t2.x) + 1)) :> int32))));
      
      (return tmp)
   }
}

S[0] s;

S[..] ps;

struct_S_xP[0] pps;

int32 g()
  requires (C_34 : ((C_35 : (\offset_min(ps) <= 0)) &&
                     (C_36 : (\offset_max(ps) >= 0))));
behavior default_1:
  assumes true;
  ensures (C_37 : (\result == 1));
{  
   (var T[..] p);
   
   (var int32 __retres);
   
   {  (C_23 : (ps = s));
      (C_25 : ((C_24 : (pps + 0).struct_S_xM) = ps));
      (C_27 : (p = (C_26 : s.t)));
      (C_30 : ((C_29 : (C_28 : ps.t).x) = 1));
      (C_33 : (__retres = (C_32 : (C_31 : s.t).x)));
      
      (return __retres)
   }
}
