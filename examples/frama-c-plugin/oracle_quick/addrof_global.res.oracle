rm -f addrof_global.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only addrof_global.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat addrof_global.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag int_xP = {
  int_P[..] int_xM;
}

type int_xP = [int_xP]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int_P[0] i;

int_xP[0] p;

unit gi(int_P[..] p_0, int32 i_0)
  requires (C_3 : ((C_4 : (\offset_min(p_0) <= 0)) &&
                    (C_5 : (\offset_max(p_0) >= 0))));
behavior default:
  assumes true;
  ensures (C_6 : (p_0.int_M == \old(i_0)));
{  
   {  (C_2 : ((C_1 : p_0.int_M) = i_0));
      
      (return ())
   }
}

int32 fi()
behavior default_1:
  assumes true;
  ensures (C_10 : (\result == 0));
{  
   {  (C_8 : gi(i, (C_7 : i.int_M)));
      
      (return (C_9 : i.int_M))
   }
}

unit gp(int_xP[..] p_0, int_P[..] i_0)
  requires (C_17 : ((((C_20 : (\offset_min(p_0) <= 0)) &&
                       (C_21 : (\offset_max(p_0) >= 0))) &&
                      ((C_23 : (\offset_min(p_0.int_xM) <= 0)) &&
                        (C_24 : (\offset_max(p_0.int_xM) >= 0)))) &&
                     ((C_26 : (\offset_min(i_0) <= 0)) &&
                       (C_27 : (\offset_max(i_0) >= 0)))));
behavior default_2:
  assumes true;
  ensures (C_28 : ((C_29 : (p_0.int_xM.int_M == \old(i_0.int_M))) &&
                    (C_30 : ((p_0.int_xM - \old(i_0)) == 0))));
{  
   {  (C_14 : ((C_13 : (C_12 : p_0.int_xM).int_M) = (C_11 : i_0.int_M)));
      (C_16 : ((C_15 : p_0.int_xM) = i_0));
      
      (return ())
   }
}

int32 fp()
behavior default_3:
  assumes true;
  ensures (C_38 : (\result == 0));
{  
   {  (C_32 : gp(p, (C_31 : p.int_xM)));
      
      {  
         (assert (C_33 : (i.int_M == 0)));
         ()
      };
      (C_36 : ((C_35 : (C_34 : p.int_xM).int_M) = 0));
      
      (return (C_37 : i.int_M))
   }
}
