rm -f addrof_field.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only addrof_field.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat addrof_field.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag struct_S_xP = {
  S[..] struct_S_xM;
}

type struct_S_xP = [struct_S_xP]

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

tag S = {
  int_P[0] i; 
  int_P[..] p;
}

type S = [S]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

unit gs(S[..] s, int32 i)
  requires (C_4 : ((C_5 : (\offset_min(s) <= 0)) &&
                    (C_6 : (\offset_max(s) >= 0))));
behavior default:
  assumes true;
  ensures (C_7 : (s.p.int_M == \old(i)));
{  
   {  (C_3 : ((C_2 : (C_1 : s.p).int_M) = i));
      
      (return ())
   }
}

int32 fs()
behavior default_1:
  assumes true;
  ensures (C_23 : (\result == 0));
{  
   (var S[0] s);
   
   (var int32 __retres);
   
   {  (C_9 : (s = (C_8 : (new S[1]))));
      (C_12 : ((C_11 : (C_10 : s.i).int_M) = 0));
      (C_15 : ((C_14 : s.p) = (C_13 : s.i)));
      (C_18 : gs(s, (C_17 : (C_16 : s.i).int_M)));
      (C_21 : (__retres = (C_20 : (C_19 : s.i).int_M)));
      
      {  (C_22 : (free(s)));
         
         (return __retres)
      }
   }
}

unit gps(struct_S_xP[..] s, int32 i)
  requires (C_28 : (((C_30 : (\offset_min(s) <= 0)) &&
                      (C_31 : (\offset_max(s) >= 0))) &&
                     ((C_33 : (\offset_min(s.struct_S_xM) <= 0)) &&
                       (C_34 : (\offset_max(s.struct_S_xM) >= 0)))));
behavior default_2:
  assumes true;
  ensures (C_35 : (s.struct_S_xM.p.int_M == \old(i)));
{  
   {  (C_27 : ((C_26 : (C_25 : (C_24 : s.struct_S_xM).p).int_M) = i));
      
      (return ())
   }
}

int32 fps()
behavior default_3:
  assumes true;
  ensures (C_56 : (\result == 0));
{  
   (var S[0] s);
   
   (var struct_S_xP[0] ps);
   
   (var int32 __retres);
   
   {  (C_37 : (ps = (C_36 : (new struct_S_xP[1]))));
      (C_39 : (s = (C_38 : (new S[1]))));
      (C_42 : ((C_41 : (C_40 : s.i).int_M) = 0));
      (C_45 : ((C_44 : s.p) = (C_43 : s.i)));
      (C_47 : ((C_46 : ps.struct_S_xM) = s));
      (C_50 : gps(ps, (C_49 : (C_48 : s.i).int_M)));
      (C_53 : (__retres = (C_52 : (C_51 : s.i).int_M)));
      
      {  (C_54 : (free(ps)));
         
         {  (C_55 : (free(s)));
            
            (return __retres)
         }
      }
   }
}
