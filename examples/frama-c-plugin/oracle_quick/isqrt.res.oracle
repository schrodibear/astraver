rm -f isqrt.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only isqrt.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat isqrt.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

axiom asr_max_int :
(\forall integer s;
  (((0 <= s) && (s <= 30)) ==> (1 <= (2147483647 >>> s))))

int32 isqrt(uint32 x)
{  
   (var uint32 x1);
   
   (var int32 s);
   
   (var int32 g0);
   
   (var int32 g1);
   
   (var int32 __retres);
   
   {  (if (x <= 1) then 
      {  (C_2 : (__retres = (C_1 : (x :> int32))));
         
         (goto return_label)
      } else ());
      (C_3 : (s = 1));
      (C_6 : (x1 = (C_5 : ((C_4 : (x - 1)) :> uint32))));
      (if (x1 > 65535) then 
      {  (C_9 : (s = (C_8 : ((C_7 : (s + 8)) :> int32))));
         (C_12 : (x1 = (C_11 : ((C_10 : (x1 / 65536)) :> uint32))))
      } else ());
      (if (x1 > 255) then 
      {  (C_15 : (s = (C_14 : ((C_13 : (s + 4)) :> int32))));
         (C_18 : (x1 = (C_17 : ((C_16 : (x1 / 256)) :> uint32))))
      } else ());
      (if (x1 > 15) then 
      {  (C_21 : (s = (C_20 : ((C_19 : (s + 2)) :> int32))));
         (C_24 : (x1 = (C_23 : ((C_22 : (x1 / 16)) :> uint32))))
      } else ());
      (if (x1 > 3) then (C_27 : (s = (C_26 : ((C_25 : (s + 1)) :> int32)))) else ());
      
      {  
         (assert (C_28 : (s >= 0)));
         
         (assert (C_29 : (s < 32)));
         
         (assert (C_30 : (1 <= (2147483647 >>> s))));
         (C_33 : (g0 = (C_32 : ((C_31 : (1 << s)) :> int32))))
      };
      
      {  
         (assert (C_34 : (s < 32)));
         (C_42 : (g1 = (C_41 : ((C_40 : ((C_39 : ((C_38 : ((C_37 : (g0 :> uint32)) +
                                                            (C_36 : (
                                                            (C_35 : (x >> s)) :> uint32)))) :> uint32)) /
                                          2)) :> int32))))
      };
      
      {  
         invariant (C_43 : true);
         while (true)
         {  
            {  (if (g1 < g0) then () else 
               (goto while_0_break));
               (C_44 : (g0 = g1));
               (C_53 : (g1 = (C_52 : ((C_51 : ((C_50 : ((C_49 : ((C_48 : (g0 :> uint32)) +
                                                                  (C_47 : (
                                                                  (C_46 : 
                                                                  (x /
                                                                    (C_45 : (g0 :> uint32)))) :> uint32)))) :> uint32)) /
                                                2)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      (C_54 : (__retres = g0));
      (return_label : 
      (return __retres))
   }
}
