rm -f dassault_1.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only dassault_1.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat dassault_1.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_y :
((\offset_min(y) <= 0) && (\offset_max(y) >= 0))

invariant valid_x :
((\offset_min(x) <= 0) && (\offset_max(x) >= 0))

tag las3 = {
  int32 c;
}

type las3 = [las3]

tag las2 = {
  las3[0..2] b;
}

type las2 = [las2]

tag las1 = {
  las2[0] d;
}

type las1 = [las1]

tag las = {
  las1[0] a;
}

type las = [las]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

las[0] x;

las2[0] y;

int32 f()
behavior default:
  assumes true;
  ensures (C_10 : (\result == ((x.a.d.b + 0).c + (y.b + 1).c)));
{  
   (var int32 __retres);
   
   {  (C_9 : (__retres = (C_8 : ((C_7 : ((C_6 : ((C_5 : (C_4 : (C_3 : x.a).d).b) +
                                                  0).c) +
                                          (C_2 : ((C_1 : y.b) + 1).c))) :> int32))));
      
      (return __retres)
   }
}
