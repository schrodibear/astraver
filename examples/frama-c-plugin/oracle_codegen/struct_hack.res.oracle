rm -f struct_hack.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only struct_hack.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs struct_hack.cloc struct_hack.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let S[0] s in
   {
   (let int32 j in
      {
      {
        (C_2:
           {
           (s = (C_1: (TODO alloc)));
             (C_5:
                {
                ((C_4: s.i) = (C_3: v_s.i));
                  (C_6:
                     {
                     (j = 0);
                       (try {
                          (try loop
                                 invariant (C_7:
                                              (((C_9: (0 <= j)) &&
                                                  (C_10: (j <= v_s.i))) &&
                                                 (C_11:
                                                    (\forall int32 k,
                                                       (((0 <= k) && (k > j)) ==>
                                                          ((v_s.a + k).int_M ==
                                                             0))))));
                                 variant (C_12: (v_s.i - j));
                                 (try {
                                    {
                                      {
                                        (TODO if);
                                          (C_16:
                                             {
                                             ((C_15: ((C_14: s.a) + j).int_M) =
                                                0);
                                               (C_19:
                                                  {
                                                  (j = (C_18: (TODO cast)))
                                                  })
                                             })
                                        }
                                      };
                                      (throw Loop_continue ())
                                    } with
                                    | Loop_continue jessie_3 -> ()
                                    | default -> ()) done with
                             | Loop_exit jessie_2 -> ()
                             | default -> ())
                          } with
                          | Goto_while_0_break jessie_1 -> {
                          (while_0_break: { () })
                          }
                          | default -> ());
                       {
                       (assert (C_20:
                                  (\forall int32 k,
                                     (((0 <= k) && (k > v_s.i)) ==>
                                        ((v_s.a + k).int_M == 0)))));
                         ()
                       };
                       {
                       (C_21: { (TODO free); (return) })
                       }
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
(C_22:
   ((C_23: (v_s.i >= 0)) &&
      ((C_25: ((\offset_min(v_s.a)) <= 0)) &&
         (C_26: ((\offset_max(v_s.a)) >= (v_s.i - 1))))))

Normalized expression:
{
(let S0[0] s in
   {
   (let int32 j in
      {
      {
        (C_28:
           {
           (s = (C_27: (TODO alloc)));
             (C_31:
                {
                ((C_30: s.i0) = (C_29: v_s_1.i0));
                  (C_32:
                     {
                     (j = 0);
                       (try {
                          (try loop
                                 invariant (C_33:
                                              (((C_35: (0 <= j)) &&
                                                  (C_36: (j <= v_s_1.i0))) &&
                                                 (C_37:
                                                    (\forall int32 k,
                                                       (((0 <= k) && (k > j)) ==>
                                                          ((v_s_1.a0 + k).int_M ==
                                                             0))))));
                                 variant (C_38: (v_s_1.i0 - j));
                                 (try {
                                    {
                                      {
                                        (TODO if);
                                          (C_42:
                                             {
                                             ((C_41: ((C_40: s.a0) + j).int_M) =
                                                0);
                                               (C_45:
                                                  {
                                                  (j = (C_44: (TODO cast)))
                                                  })
                                             })
                                        }
                                      };
                                      (throw Loop_continue ())
                                    } with
                                    | Loop_continue jessie_6 -> ()
                                    | default -> ()) done with
                             | Loop_exit jessie_5 -> ()
                             | default -> ())
                          } with
                          | Goto_while_1_break jessie_4 -> {
                          (while_1_break: { () })
                          }
                          | default -> ());
                       {
                       (assert (C_46:
                                  (\forall int32 k,
                                     (((0 <= k) && (k > v_s_1.i0)) ==>
                                        ((v_s_1.a0 + k).int_M == 0)))));
                         ()
                       };
                       {
                       (C_47: { (TODO free); (return) })
                       }
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
(C_48:
   ((C_49: (v_s_1.i0 >= 0)) &&
      ((C_51: ((\offset_min(v_s_1.a0)) <= 0)) &&
         (C_52: ((\offset_max(v_s_1.a0)) >= (v_s_1.i0 - 1))))))

Normalized expression:
{
(let S1[0] s in
   {
   (let int32 j in
      {
      {
        (C_54:
           {
           (s = (C_53: (TODO alloc)));
             {
             (C_57:
                {
                ((C_56: s.i1) = (C_55: v_s_2.i1));
                  (C_62:
                     {
                     ((C_61: ((C_60: s.a1) + 0).int_M) =
                        (C_59: ((C_58: v_s_2.a1) + 0).int_M))
                     })
                })
             };
             (C_63:
                {
                (j = 0);
                  (try {
                     (try loop
                            invariant (C_64:
                                         (((C_66: (0 <= j)) &&
                                             (C_67: (j <= v_s_2.i1))) &&
                                            (C_68:
                                               (\forall int32 k,
                                                  (((0 <= k) && (k > j)) ==>
                                                     ((v_s_2.a1 + k).int_M ==
                                                        0))))));
                            variant (C_69: (v_s_2.i1 - j));
                            (try {
                               {
                                 {
                                   (TODO if);
                                     (C_73:
                                        {
                                        ((C_72: ((C_71: s.a1) + j).int_M) = 0);
                                          (C_76:
                                             {
                                             (j = (C_75: (TODO cast)))
                                             })
                                        })
                                   }
                                 };
                                 (throw Loop_continue ())
                               } with
                               | Loop_continue jessie_9 -> ()
                               | default -> ()) done with
                        | Loop_exit jessie_8 -> ()
                        | default -> ())
                     } with
                     | Goto_while_2_break jessie_7 -> {
                     (while_2_break: { () })
                     }
                     | default -> ());
                  {
                  (assert (C_77:
                             (\forall int32 k,
                                (((0 <= k) && (k > v_s_2.i1)) ==>
                                   ((v_s_2.a1 + k).int_M == 0)))));
                    ()
                  };
                  {
                  (C_78: { (TODO free); (return) })
                  }
                })
           })
        }
      })
   })
}

Normalized expression:
(C_79:
   ((C_80: (v_s_2.i1 >= 0)) &&
      ((C_82: ((\offset_min(v_s_2.a1)) <= 0)) &&
         (C_83: ((\offset_max(v_s_2.a1)) >= (v_s_2.i1 - 1))))))

Generating Why function f
Generating Why function f0
Generating Why function f1
cat why/struct_hack.why
type S

type S0

type S1

type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type uint16

type uint32

type uint64

type uint8

type void_P

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Goto_while_2_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic S0_tag:  -> S0 tag_id

axiom S0_int : (int_of_tag(S0_tag) = (1))

axiom S0_parenttag_bottom : parenttag(S0_tag, bottom_tag)

axiom S0_tags :
 (forall x:S0 pointer.
  (forall S0_tag_table:S0 tag_table. instanceof(S0_tag_table, x, S0_tag)))

logic S1_tag:  -> S1 tag_id

axiom S1_int : (int_of_tag(S1_tag) = (1))

axiom S1_parenttag_bottom : parenttag(S1_tag, bottom_tag)

axiom S1_tags :
 (forall x:S1 pointer.
  (forall S1_tag_table:S1 tag_table. instanceof(S1_tag_table, x, S1_tag)))

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_struct_S0(p:S0 pointer,
 a:int,
 b:int,
 S0_alloc_table:S0 alloc_table) =
 ((offset_min(S0_alloc_table, p) = a)
 and (offset_max(S0_alloc_table, p) = b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_struct_S1(p:S1 pointer,
 a:int,
 b:int,
 S1_alloc_table:S1 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 S1_a1:(S1,
 int_P pointer) memory) =
 ((offset_min(S1_alloc_table, p) = a)
 and ((offset_max(S1_alloc_table, p) = b)
     and valid_struct_int_P(select(S1_a1, p), (0), (0), int_P_alloc_table)))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_variant_S0(p:S0 pointer,
 a:int,
 b:int,
 S0_alloc_table:S0 alloc_table) =
 ((offset_min(S0_alloc_table, p) = a)
 and (offset_max(S0_alloc_table, p) = b))

predicate valid_variant_S1(p:S1 pointer,
 a:int,
 b:int,
 S1_alloc_table:S1 alloc_table) =
 ((offset_min(S1_alloc_table, p) = a)
 and (offset_max(S1_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter S0_a0 : (S0, int_P pointer) memory ref

parameter S0_alloc_table : S0 alloc_table ref

parameter S0_i0 : (S0, int32) memory ref

parameter S0_tag_table : S0 tag_table ref

parameter S1_a1 : (S1, int_P pointer) memory ref

parameter S1_alloc_table : S1 alloc_table ref

parameter S1_i1 : (S1, int32) memory ref

parameter S1_tag_table : S1 tag_table ref

parameter S_a : (S, int_P pointer) memory ref

parameter S_alloc_table : S alloc_table ref

parameter S_i : (S, int32) memory ref

parameter S_tag_table : S tag_table ref

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter alloc_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    { ge_int(n, (0))} S pointer reads S_alloc_table
    writes S_alloc_table,S_tag_table
    { (valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table)
      and (instanceof(S_tag_table, result, S_tag)
          and (alloc_extends(S_alloc_table@, S_alloc_table)
              and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_S0 :
 n:int ->
  S0_alloc_table:S0 alloc_table ref ->
   S0_alloc_table:S0 alloc_table ref ->
    { ge_int(n, (0))} S0 pointer reads S0_alloc_table
    writes S0_alloc_table,S0_tag_table
    { (valid_struct_S0(result, (0), sub_int(n, (1)), S0_alloc_table)
      and (instanceof(S0_tag_table, result, S0_tag)
          and (alloc_extends(S0_alloc_table@, S0_alloc_table)
              and alloc_extern(S0_alloc_table@, result)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter alloc_S1 :
 n:int ->
  S1_alloc_table:S1 alloc_table ref ->
   S1_alloc_table:S1 alloc_table ref ->
    int_P_alloc_table:int_P alloc_table ref ->
     S1_a1:(S1,
      int_P pointer) memory ref ->
      { ge_int(n, (0))} S1 pointer
      reads S1_a1,S1_alloc_table,int_P_alloc_table
      writes S1_alloc_table,S1_tag_table
      { (valid_struct_S1(result, (0), sub_int(n, (1)), S1_alloc_table,
         int_P_alloc_table, S1_a1)
        and (instanceof(S1_tag_table, result, S1_tag)
            and (alloc_extends(S1_alloc_table@, S1_alloc_table)
                and alloc_extern(S1_alloc_table@, result)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_S :
 tt:unit ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    { } S pointer reads S_alloc_table writes S_alloc_table,S_tag_table
    { (valid_struct_S(result, (0), (0), S_alloc_table)
      and (instanceof(S_tag_table, result, S_tag)
          and (alloc_extends(S_alloc_table@, S_alloc_table)
              and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_one_S0 :
 tt:unit ->
  S0_alloc_table:S0 alloc_table ref ->
   S0_alloc_table:S0 alloc_table ref ->
    { } S0 pointer reads S0_alloc_table writes S0_alloc_table,S0_tag_table
    { (valid_struct_S0(result, (0), (0), S0_alloc_table)
      and (instanceof(S0_tag_table, result, S0_tag)
          and (alloc_extends(S0_alloc_table@, S0_alloc_table)
              and alloc_extern(S0_alloc_table@, result)))) }

parameter alloc_one_S1 :
 tt:unit ->
  S1_alloc_table:S1 alloc_table ref ->
   S1_alloc_table:S1 alloc_table ref ->
    int_P_alloc_table:int_P alloc_table ref ->
     S1_a1:(S1,
      int_P pointer) memory ref ->
      { } S1 pointer reads S1_a1,S1_alloc_table,int_P_alloc_table
      writes S1_alloc_table,S1_tag_table
      { (valid_struct_S1(result, (0), (0), S1_alloc_table, int_P_alloc_table,
         S1_a1)
        and (instanceof(S1_tag_table, result, S1_tag)
            and (alloc_extends(S1_alloc_table@, S1_alloc_table)
                and alloc_extern(S1_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int_P_int_M : (int_P, int32) memory ref

parameter f :
 v_s:S pointer ->
  { (C_22:
    ((C_23: ge_int(integer_of_int32(select(S_i, v_s)), (0)))
    and ((C_25: le_int(offset_min(int_P_alloc_table, select(S_a, v_s)), (0)))
        and (C_26:
            ge_int(offset_max(int_P_alloc_table, select(S_a, v_s)),
            sub_int(integer_of_int32(select(S_i, v_s)), (1)))))))}
  unit reads S_a,S_alloc_table,S_i,S_tag_table,int_P_alloc_table,int_P_int_M
  writes S_alloc_table,S_i,S_tag_table,int_P_int_M { true }

parameter f0 :
 v_s_1:S0 pointer ->
  { (C_48:
    ((C_49: ge_int(integer_of_int32(select(S0_i0, v_s_1)), (0)))
    and ((C_51:
         le_int(offset_min(int_P_alloc_table, select(S0_a0, v_s_1)), (0)))
        and (C_52:
            ge_int(offset_max(int_P_alloc_table, select(S0_a0, v_s_1)),
            sub_int(integer_of_int32(select(S0_i0, v_s_1)), (1)))))))}
  unit
  reads S0_a0,S0_alloc_table,S0_i0,S0_tag_table,int_P_alloc_table,int_P_int_M
  writes S0_alloc_table,S0_i0,S0_tag_table,int_P_int_M { true }

parameter f1 :
 v_s_2:S1 pointer ->
  { (C_79:
    ((C_80: ge_int(integer_of_int32(select(S1_i1, v_s_2)), (0)))
    and ((C_82:
         le_int(offset_min(int_P_alloc_table, select(S1_a1, v_s_2)), (0)))
        and (C_83:
            ge_int(offset_max(int_P_alloc_table, select(S1_a1, v_s_2)),
            sub_int(integer_of_int32(select(S1_i1, v_s_2)), (1)))))))}
  unit
  reads S1_a1,S1_alloc_table,S1_i1,S1_tag_table,int_P_alloc_table,int_P_int_M
  writes S1_a1,S1_alloc_table,S1_i1,S1_tag_table,int_P_alloc_table,int_P_int_M,int_P_tag_table
  { true }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f0_safety =
 fun (v_s_1 : S0 pointer) ->
  { (valid_struct_S0(v_s_1, (0), (0), S0_alloc_table)
    and (C_48:
        ((C_49: ge_int(integer_of_int32(select(S0_i0, v_s_1)), (0)))
        and ((C_51:
             le_int(offset_min(int_P_alloc_table, select(S0_a0, v_s_1)), (0)))
            and (C_52:
                ge_int(offset_max(int_P_alloc_table, select(S0_a0, v_s_1)),
                sub_int(integer_of_int32(select(S0_i0, v_s_1)), (1)))))))) }
  (init:
  try
   begin
     (let s_9 = ref (any_pointer void) in
     (let j_0 = ref (any_int32 void) in
     (C_28:
     begin
       (let jessie_35 = (let jessie_34 = (C_27:
                                         (((alloc_S0 (0)) S0_alloc_table) S0_alloc_table)) in
                        (assert
                        { ge_int(offset_max(S0_alloc_table, jessie_34), (0)) };
                        (s_9 := (C_27:
                                (((alloc_S0 (0)) S0_alloc_table) S0_alloc_table))))) in
       void);
      (C_31:
      begin
        (let jessie_38 = (let jessie_36 = !s_9 in
                         (let jessie_37 = ((safe_acc_ !S0_i0) v_s_1) in
                         (((safe_upd_ S0_i0) !s_9) jessie_37))) in
        void);
       (C_32:
       begin
         (let jessie_39 = (j_0 := (safe_int32_of_integer_ (0))) in void);
        try
         while true do
         { invariant
             (C_33:
             ((C_35: le_int((0), integer_of_int32(j_0)))
             and ((C_36:
                  le_int(integer_of_int32(j_0),
                  integer_of_int32(select(S0_i0, v_s_1))))
                 and (C_37:
                     (forall k_2:int32.
                      ((le_int((0), integer_of_int32(k_2))
                       and lt_int(integer_of_int32(k_2),
                           integer_of_int32(j_0))) ->
                       eq_int(integer_of_int32(select(int_P_int_M,
                                               shift(select(S0_a0, v_s_1),
                                               integer_of_int32(k_2)))),
                       (0))))))))
           variant (C_38 : sub_int(integer_of_int32(select(S0_i0, v_s_1)),
                           integer_of_int32(j_0))) }
          try
           (let jessie_45 = begin
                              (let jessie_44 = begin
                                                 (if ((lt_int_ (integer_of_int32 !j_0)) 
                                                      (integer_of_int32 
                                                       ((safe_acc_ !S0_i0) !s_9)))
                                                 then void
                                                 else
                                                  (let jessie_40 = (raise
                                                                    (Goto_while_1_break_exc
                                                                    void)) in
                                                  void));
                                                (C_42:
                                                begin
                                                  (let jessie_43 = (let jessie_41 = 
                                                                   ((shift 
                                                                    ((safe_acc_ !S0_a0) !s_9)) 
                                                                    (integer_of_int32 !j_0)) in
                                                                   (let jessie_42 = 
                                                                   (safe_int32_of_integer_ (0)) in
                                                                   (JC_9:
                                                                   (((((offset_upd_ !int_P_alloc_table) int_P_int_M) 
                                                                    ((safe_acc_ !S0_a0) !s_9)) 
                                                                    (integer_of_int32 !j_0)) jessie_42)))) in
                                                  void);
                                                 (C_45:
                                                 begin
                                                   (j_0 := (C_44:
                                                           (int32_of_integer_ 
                                                            (C_43:
                                                            ((add_int 
                                                              (integer_of_int32 !j_0)) (1))))));
                                                  !j_0
                                                 end)
                                                end)
                                               end in
                              void);
                             (raise (Loop_continue_exc void))
                            end in
           void)
           with
           Loop_continue_exc jessie_6 ->
           void end
         done
         with
         Goto_while_1_break_exc jessie_4 ->
         (while_1_break: void) end;
        (assert
        { (C_46:
          (forall k_3:int32.
           ((le_int((0), integer_of_int32(k_3))
            and lt_int(integer_of_int32(k_3),
                integer_of_int32(select(S0_i0, v_s_1)))) ->
            eq_int(integer_of_int32(select(int_P_int_M,
                                    shift(select(S0_a0, v_s_1),
                                    integer_of_int32(k_3)))),
            (0))))) };
        void);
        void;
        (C_47:
        begin   ((free_parameter S0_alloc_table) !s_9); (raise Return) end)
       end)
      end)
     end)));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let f1_safety =
 fun (v_s_2 : S1 pointer) ->
  { (valid_struct_S1(v_s_2, (0), (0), S1_alloc_table, int_P_alloc_table,
     S1_a1)
    and (C_79:
        ((C_80: ge_int(integer_of_int32(select(S1_i1, v_s_2)), (0)))
        and ((C_82:
             le_int(offset_min(int_P_alloc_table, select(S1_a1, v_s_2)), (0)))
            and (C_83:
                ge_int(offset_max(int_P_alloc_table, select(S1_a1, v_s_2)),
                sub_int(integer_of_int32(select(S1_i1, v_s_2)), (1)))))))) }
  (init:
  try
   begin
     (let s_10 = ref (any_pointer void) in
     (let j_1 = ref (any_int32 void) in
     (C_54:
     begin
       (let jessie_59 = (let jessie_58 = (C_53:
                                         (((((alloc_one_S1 void) S1_alloc_table) S1_alloc_table) int_P_alloc_table) S1_a1)) in
                        (assert
                        { ge_int(offset_max(S1_alloc_table, jessie_58), (0)) };
                        (s_10 := (C_53:
                                 (((((alloc_one_S1 void) S1_alloc_table) S1_alloc_table) int_P_alloc_table) S1_a1))))) in
       void);
      (let jessie_65 = (C_57:
                       begin
                         (let jessie_62 = (let jessie_60 = !s_10 in
                                          (let jessie_61 = ((safe_acc_ !S1_i1) v_s_2) in
                                          (((safe_upd_ S1_i1) !s_10) jessie_61))) in
                         void);
                        (C_62:
                        (let jessie_63 = ((shift ((safe_acc_ !S1_a1) !s_10)) (0)) in
                        (let jessie_64 = ((safe_acc_ !int_P_int_M) ((shift 
                                                                    ((safe_acc_ !S1_a1) v_s_2)) (0))) in
                        begin
                          (((safe_upd_ int_P_int_M) ((shift ((safe_acc_ !S1_a1) !s_10)) (0))) jessie_64);
                         ((safe_acc_ !int_P_int_M) jessie_63)
                        end)))
                       end) in
      void);
      (C_63:
      begin
        (let jessie_66 = (j_1 := (safe_int32_of_integer_ (0))) in void);
       try
        while true do
        { invariant
            (C_64:
            ((C_66: le_int((0), integer_of_int32(j_1)))
            and ((C_67:
                 le_int(integer_of_int32(j_1),
                 integer_of_int32(select(S1_i1, v_s_2))))
                and (C_68:
                    (forall k_4:int32.
                     ((le_int((0), integer_of_int32(k_4))
                      and lt_int(integer_of_int32(k_4),
                          integer_of_int32(j_1))) ->
                      eq_int(integer_of_int32(select(int_P_int_M,
                                              shift(select(S1_a1, v_s_2),
                                              integer_of_int32(k_4)))),
                      (0))))))))
          variant (C_69 : sub_int(integer_of_int32(select(S1_i1, v_s_2)),
                          integer_of_int32(j_1))) }
         try
          (let jessie_72 = begin
                             (let jessie_71 = begin
                                                (if ((lt_int_ (integer_of_int32 !j_1)) 
                                                     (integer_of_int32 
                                                      ((safe_acc_ !S1_i1) !s_10)))
                                                then void
                                                else
                                                 (let jessie_67 = (raise
                                                                   (Goto_while_2_break_exc
                                                                   void)) in
                                                 void));
                                               (C_73:
                                               begin
                                                 (let jessie_70 = (let jessie_68 = 
                                                                  ((shift 
                                                                    ((safe_acc_ !S1_a1) !s_10)) 
                                                                   (integer_of_int32 !j_1)) in
                                                                  (let jessie_69 = 
                                                                  (safe_int32_of_integer_ (0)) in
                                                                  (JC_14:
                                                                  ((((((bound_upd_ int_P_int_M) 
                                                                    ((safe_acc_ !S1_a1) !s_10)) 
                                                                    (integer_of_int32 !j_1)) (0)) (0)) jessie_69)))) in
                                                 void);
                                                (C_76:
                                                begin
                                                  (j_1 := (C_75:
                                                          (int32_of_integer_ 
                                                           (C_74:
                                                           ((add_int 
                                                             (integer_of_int32 !j_1)) (1))))));
                                                 !j_1
                                                end)
                                               end)
                                              end in
                             void);
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_9 ->
          void end
        done
        with
        Goto_while_2_break_exc jessie_7 ->
        (while_2_break: void) end;
       (assert
       { (C_77:
         (forall k_5:int32.
          ((le_int((0), integer_of_int32(k_5))
           and lt_int(integer_of_int32(k_5),
               integer_of_int32(select(S1_i1, v_s_2)))) ->
           eq_int(integer_of_int32(select(int_P_int_M,
                                   shift(select(S1_a1, v_s_2),
                                   integer_of_int32(k_5)))),
           (0))))) };
       void);
       void;
       (C_78:
       begin   ((free_parameter S1_alloc_table) !s_10); (raise Return) end)
      end)
     end)));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let f_safety =
 fun (v_s : S pointer) ->
  { (valid_struct_S(v_s, (0), (0), S_alloc_table)
    and (C_22:
        ((C_23: ge_int(integer_of_int32(select(S_i, v_s)), (0)))
        and ((C_25:
             le_int(offset_min(int_P_alloc_table, select(S_a, v_s)), (0)))
            and (C_26:
                ge_int(offset_max(int_P_alloc_table, select(S_a, v_s)),
                sub_int(integer_of_int32(select(S_i, v_s)), (1)))))))) }
  (init:
  try
   begin
     (let s_8 = ref (any_pointer void) in
     (let j = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_11 = (let jessie_10 = (C_1:
                                         (((alloc_S (0)) S_alloc_table) S_alloc_table)) in
                        (assert
                        { ge_int(offset_max(S_alloc_table, jessie_10), (0)) };
                        (s_8 := (C_1:
                                (((alloc_S (0)) S_alloc_table) S_alloc_table))))) in
       void);
      (C_5:
      begin
        (let jessie_14 = (let jessie_12 = !s_8 in
                         (let jessie_13 = ((safe_acc_ !S_i) v_s) in
                         (((safe_upd_ S_i) !s_8) jessie_13))) in
        void);
       (C_6:
       begin
         (let jessie_15 = (j := (safe_int32_of_integer_ (0))) in void);
        try
         while true do
         { invariant
             (C_7:
             ((C_9: le_int((0), integer_of_int32(j)))
             and ((C_10:
                  le_int(integer_of_int32(j),
                  integer_of_int32(select(S_i, v_s))))
                 and (C_11:
                     (forall k_0:int32.
                      ((le_int((0), integer_of_int32(k_0))
                       and lt_int(integer_of_int32(k_0), integer_of_int32(j))) ->
                       eq_int(integer_of_int32(select(int_P_int_M,
                                               shift(select(S_a, v_s),
                                               integer_of_int32(k_0)))),
                       (0))))))))
           variant (C_12 : sub_int(integer_of_int32(select(S_i, v_s)),
                           integer_of_int32(j))) }
          try
           (let jessie_21 = begin
                              (let jessie_20 = begin
                                                 (if ((lt_int_ (integer_of_int32 !j)) 
                                                      (integer_of_int32 
                                                       ((safe_acc_ !S_i) !s_8)))
                                                 then void
                                                 else
                                                  (let jessie_16 = (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                  void));
                                                (C_16:
                                                begin
                                                  (let jessie_19 = (let jessie_17 = 
                                                                   ((shift 
                                                                    ((safe_acc_ !S_a) !s_8)) 
                                                                    (integer_of_int32 !j)) in
                                                                   (let jessie_18 = 
                                                                   (safe_int32_of_integer_ (0)) in
                                                                   (JC_4:
                                                                   (((((offset_upd_ !int_P_alloc_table) int_P_int_M) 
                                                                    ((safe_acc_ !S_a) !s_8)) 
                                                                    (integer_of_int32 !j)) jessie_18)))) in
                                                  void);
                                                 (C_19:
                                                 begin
                                                   (j := (C_18:
                                                         (int32_of_integer_ 
                                                          (C_17:
                                                          ((add_int (integer_of_int32 !j)) (1))))));
                                                  !j
                                                 end)
                                                end)
                                               end in
                              void);
                             (raise (Loop_continue_exc void))
                            end in
           void)
           with
           Loop_continue_exc jessie_3 ->
           void end
         done
         with
         Goto_while_0_break_exc jessie_1 ->
         (while_0_break: void) end;
        (assert
        { (C_20:
          (forall k_1:int32.
           ((le_int((0), integer_of_int32(k_1))
            and lt_int(integer_of_int32(k_1),
                integer_of_int32(select(S_i, v_s)))) ->
            eq_int(integer_of_int32(select(int_P_int_M,
                                    shift(select(S_a, v_s),
                                    integer_of_int32(k_1)))),
            (0))))) };
        void);
        void;
        (C_21:
        begin   ((free_parameter S_alloc_table) !s_8); (raise Return) end)
       end)
      end)
     end)));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


