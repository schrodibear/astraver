rm -f isqrt.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only isqrt.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs isqrt.cloc isqrt.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
(\forall integer s,
   (((0 <= s) && (s <= 30)) ==> (1 <= (2147483647 arith_shift_right s))))

Normalized expression:
{
(let uint32 x1 in
   {
   (let int32 s in
      {
      (let int32 g0 in
         {
         (let int32 g1 in
            {
            (let int32 __retres in
               {
               (try {
                  (TODO if);
                    (C_3:
                       {
                       (s = 1);
                         (C_6:
                            {
                            (x1 = (C_5: (TODO cast)));
                              (TODO if);
                              (TODO if);
                              (TODO if);
                              (TODO if);
                              {
                              (assert (C_28: (s >= 0)));
                                (assert (C_29: (s > 32)));
                                (assert (C_30:
                                           (1 <=
                                              (2147483647 arith_shift_right s))));
                                (C_33: { (g0 = (C_32: (TODO cast))) })
                              };
                              {
                              (assert (C_34: (s > 32)));
                                (C_42: { (g1 = (C_41: (TODO cast))) })
                              };
                              (try {
                                 (try loop
                                        invariant (C_43: true);
                                        (try {
                                           {
                                             {
                                               (TODO if);
                                                 (C_44:
                                                    {
                                                    (g0 = g1);
                                                      (C_53:
                                                         {
                                                         (g1 =
                                                            (C_52:
                                                               (TODO cast)))
                                                         })
                                                    })
                                               }
                                             };
                                             (throw Loop_continue ())
                                           } with
                                           | Loop_continue jessie_4 -> ()
                                           | default -> ()) done with
                                    | Loop_exit jessie_3 -> ()
                                    | default -> ())
                                 } with
                                 | Goto_while_0_break jessie_1 -> {
                                 (while_0_break: { () })
                                 }
                                 | default -> ());
                              (C_54: { (__retres = g0) })
                            })
                       })
                  } with
                  | Goto_return_label jessie_2 -> {
                  (return_label: { (return __retres) })
                  }
                  | default -> ())
               })
            })
         })
      })
   })
}

Generating Why function isqrt
cat why/isqrt.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type uint16

type uint32

type uint64

type uint8

exception Goto_return_label_exc of unit

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

axiom asr_max_int :
 (forall s_8:int.
  ((le_int((0), s_8) and le_int(s_8, (30))) ->
   le_int((1), asr((2147483647), s_8))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter isqrt : x:uint32 -> { (JC_1: true)} int32 { true }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let isqrt_safety =
 fun (x : uint32) ->
  { (JC_2: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let x1 = ref (any_uint32 void) in
     (let s_9 = ref (any_int32 void) in
     (let g0 = ref (any_int32 void) in
     (let g1 = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_22 = begin
                         (if ((le_int_ (integer_of_uint32 x)) (1))
                         then
                          (let jessie_6 = (C_2:
                                          begin
                                            (let jessie_5 = (__retres := 
                                                             (C_1:
                                                             (int32_of_integer_ 
                                                              (integer_of_uint32 x)))) in
                                            void);
                                           (raise
                                            (Goto_return_label_exc
                                            void))
                                          end) in
                          void)
                         else void);
                        (C_3:
                        begin
                          (let jessie_7 = (s_9 := (safe_int32_of_integer_ (1))) in
                          void);
                         (C_6:
                         begin
                           (let jessie_8 = (x1 := (C_5:
                                                  (uint32_of_integer_ 
                                                   (C_4:
                                                   ((sub_int (integer_of_uint32 x)) (1)))))) in
                           void);
                          (if ((gt_int_ (integer_of_uint32 !x1)) (65535))
                          then
                           (let jessie_10 = (C_9:
                                            begin
                                              (let jessie_9 = (s_9 := 
                                                               (C_8:
                                                               (int32_of_integer_ 
                                                                (C_7:
                                                                ((add_int 
                                                                  (integer_of_int32 !s_9)) (8)))))) in
                                              void);
                                             (C_12:
                                             begin
                                               (x1 := (C_11:
                                                      (uint32_of_integer_ 
                                                       (C_10:
                                                       ((div_int_ (integer_of_uint32 !x1)) (65536))))));
                                              !x1
                                             end)
                                            end) in
                           void)
                          else void);
                          (if ((gt_int_ (integer_of_uint32 !x1)) (255))
                          then
                           (let jessie_12 = (C_15:
                                            begin
                                              (let jessie_11 = (s_9 := 
                                                                (C_14:
                                                                (int32_of_integer_ 
                                                                 (C_13:
                                                                 ((add_int 
                                                                   (integer_of_int32 !s_9)) (4)))))) in
                                              void);
                                             (C_18:
                                             begin
                                               (x1 := (C_17:
                                                      (uint32_of_integer_ 
                                                       (C_16:
                                                       ((div_int_ (integer_of_uint32 !x1)) (256))))));
                                              !x1
                                             end)
                                            end) in
                           void)
                          else void);
                          (if ((gt_int_ (integer_of_uint32 !x1)) (15))
                          then
                           (let jessie_14 = (C_21:
                                            begin
                                              (let jessie_13 = (s_9 := 
                                                                (C_20:
                                                                (int32_of_integer_ 
                                                                 (C_19:
                                                                 ((add_int 
                                                                   (integer_of_int32 !s_9)) (2)))))) in
                                              void);
                                             (C_24:
                                             begin
                                               (x1 := (C_23:
                                                      (uint32_of_integer_ 
                                                       (C_22:
                                                       ((div_int_ (integer_of_uint32 !x1)) (16))))));
                                              !x1
                                             end)
                                            end) in
                           void)
                          else void);
                          (if ((gt_int_ (integer_of_uint32 !x1)) (3))
                          then
                           (C_27:
                           (let jessie_15 = (s_9 := (C_26:
                                                    (int32_of_integer_ 
                                                     (C_25:
                                                     ((add_int (integer_of_int32 !s_9)) (1)))))) in
                           void))
                          else void);
                          (let jessie_16 = begin
                                             (assert
                                             { (C_28:
                                               ge_int(integer_of_int32(s_9),
                                               (0))) };
                                             void);
                                            (assert
                                            { (C_29:
                                              lt_int(integer_of_int32(s_9),
                                              (32))) };
                                            void);
                                            (assert
                                            { (C_30:
                                              le_int((1),
                                              asr((2147483647),
                                              integer_of_int32(s_9)))) };
                                            void);
                                            (C_33:
                                            begin
                                              (g0 := (C_32:
                                                     (int32_of_integer_ 
                                                      (C_31:
                                                      ((lsl (1)) (integer_of_int32 !s_9))))));
                                             !g0
                                            end)
                                           end in
                          void);
                          (let jessie_17 = begin
                                             (assert
                                             { (C_34:
                                               lt_int(integer_of_int32(s_9),
                                               (32))) };
                                             void);
                                            (C_42:
                                            begin
                                              (g1 := (C_41:
                                                     (int32_of_integer_ 
                                                      (C_40:
                                                      ((div_int_ (integer_of_uint32 
                                                                  (C_39:
                                                                  (uint32_of_integer_ 
                                                                   (C_38:
                                                                   ((add_int 
                                                                    (integer_of_uint32 
                                                                    (C_37:
                                                                    (uint32_of_integer_ 
                                                                    (integer_of_int32 !g0))))) 
                                                                    (integer_of_uint32 
                                                                    (C_36:
                                                                    (uint32_of_integer_ 
                                                                    (C_35:
                                                                    ((lsr 
                                                                    (integer_of_uint32 x)) 
                                                                    (integer_of_int32 !s_9)))))))))))) (2))))));
                                             !g1
                                            end)
                                           end in
                          void);
                          try
                           while true do
                           { invariant (C_43: (true = true))  }
                            try
                             (let jessie_21 = begin
                                                (let jessie_20 = begin
                                                                   (if 
                                                                   ((lt_int_ 
                                                                    (integer_of_int32 !g1)) 
                                                                    (integer_of_int32 !g0))
                                                                   then void
                                                                   else
                                                                    (let jessie_18 = 
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                                    void));
                                                                  (C_44:
                                                                  begin
                                                                    (let jessie_19 = 
                                                                    (g0 := !g1) in
                                                                    void);
                                                                   (C_53:
                                                                   begin
                                                                     
                                                                    (g1 := 
                                                                    (C_52:
                                                                    (int32_of_integer_ 
                                                                    (C_51:
                                                                    ((div_int_ 
                                                                    (integer_of_uint32 
                                                                    (C_50:
                                                                    (uint32_of_integer_ 
                                                                    (C_49:
                                                                    ((add_int 
                                                                    (integer_of_uint32 
                                                                    (C_48:
                                                                    (uint32_of_integer_ 
                                                                    (integer_of_int32 !g0))))) 
                                                                    (integer_of_uint32 
                                                                    (C_47:
                                                                    (uint32_of_integer_ 
                                                                    (C_46:
                                                                    ((div_int_ 
                                                                    (integer_of_uint32 x)) 
                                                                    (integer_of_uint32 
                                                                    (C_45:
                                                                    (uint32_of_integer_ 
                                                                    (integer_of_int32 !g0))))))))))))))) (2))))));
                                                                    !g1
                                                                   end)
                                                                  end)
                                                                 end in
                                                void);
                                               (raise
                                                (Loop_continue_exc
                                                void))
                                              end in
                             void)
                             with
                             Loop_continue_exc jessie_4 ->
                             void end
                           done
                           with
                           Goto_while_0_break_exc jessie_1 ->
                           (while_0_break: void) end;
                          (C_54: begin   (__retres := !g0); !__retres end)
                         end)
                        end)
                       end in
      void)
      with
      Goto_return_label_exc jessie_2 ->
      (return_label:
      begin   (jessie_returned_value := !__retres); (raise Return) end) end)))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }


