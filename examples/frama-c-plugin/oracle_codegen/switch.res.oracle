rm -f switch.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only switch.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs switch.cloc switch.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let int32 y in
   {
   {
     (try {
        (let jessie_2 = x in
           (try {
              (TODO if); (TODO if); (TODO if); (TODO if)
              } with
              | Loop_exit jessie_3 -> ()
              | default -> ()))
        } with
        | Goto_switch_0_break jessie_1 -> {
        (switch_0_break: { () })
        }
        | default -> ());
       (return y)
     }
   })
}

Normalized expression:
(C_7: ((x == 4) ==> (\result == 2)))

Normalized expression:
true

Normalized expression:
{
(let int32 y in
   {
   (let int32 __retres in
      {
      (try {
         (try {
            (let jessie_6 = x in
               (try {
                  (TODO if); (TODO if); (TODO if); (TODO if)
                  } with
                  | Loop_exit jessie_7 -> ()
                  | default -> ()))
            } with
            | Goto_switch_1_break jessie_4 -> {
            (switch_1_break: { () })
            }
            | default -> ());
           (C_15: { (y = 5); (C_16: { (__retres = y) }) })
         } with
         | Goto_return_label jessie_5 -> {
         (return_label: { (return __retres) })
         }
         | default -> ())
      })
   })
}

Normalized expression:
(C_17: ((x == 4) ==> (\result == 2)))

Normalized expression:
true

Normalized expression:
{
(let int32 y in
   {
   {
     {
       (let jessie_8 = x in
          (try {
             (TODO if); (TODO if); (TODO if); (TODO if)
             } with
             | Loop_exit jessie_9 -> ()
             | default -> ()))
       };
       (return y)
     }
   })
}

Normalized expression:
(C_22: (\result == 4))

Normalized expression:
true

Normalized expression:
{
(let int32 y in
   {
   {
     {
       (let jessie_10 = x in
          (try {
             (TODO if); (TODO if); (TODO if); (TODO if)
             } with
             | Loop_exit jessie_11 -> ()
             | default -> ()))
       };
       (return y)
     }
   })
}

Normalized expression:
(C_27: (\result == 4))

Normalized expression:
true

Normalized expression:
{
(let int32 y in
   {
   {
     (C_28:
        {
        (y = 0);
          (try {
             (let jessie_13 = x in
                (try {
                   (TODO if)
                   } with
                   | Loop_exit jessie_14 -> ()
                   | default -> ()))
             } with
             | Goto_switch_4_break jessie_12 -> {
             (switch_4_break: { () })
             }
             | default -> ());
          (return y)
        })
     }
   })
}

Normalized expression:
(C_30: (\result == 0))

Normalized expression:
true

Normalized expression:
{
(let int32 y in
   {
   {
     (C_31:
        {
        (y = 0);
          {
          (let jessie_18 = x in
             (try {
                (TODO if)
                } with
                | Loop_exit jessie_19 -> ()
                | default -> ()))
          };
          (return y)
        })
     }
   })
}

Normalized expression:
(C_34: ((x == 1) ==> (\result == 1)))

Normalized expression:
true

Normalized expression:
{
(let int32 y in
   {
   {
     (C_35:
        {
        (y = 0);
          {
          (let jessie_20 = x in
             (try {
                (TODO if)
                } with
                | Loop_exit jessie_21 -> ()
                | default -> ()))
          };
          (return y)
        })
     }
   })
}

Normalized expression:
(C_37: ((x == 2) ==> (\result == 1)))

Normalized expression:
true

Normalized expression:
{
(let int32 y in
   {
   {
     (C_38:
        {
        (y = 0);
          {
          (let jessie_22 = x in
             (try {
                (TODO if)
                } with
                | Loop_exit jessie_23 -> ()
                | default -> ()))
          };
          (return y)
        })
     }
   })
}

Normalized expression:
(C_40: ((x == 5) ==> (\result == 1)))

Normalized expression:
true

Generating Why function f1
Generating Why function f1a
Generating Why function f2
Generating Why function f3
Generating Why function f4
Generating Why function f5
Generating Why function f6
Generating Why function f7
cat why/switch.why
type __anonenum_1

type _bool

type char_P

type int16

type int32

type int64

type int8

type uint16

type uint32

type uint64

type uint8

exception Goto_return_label_exc of unit

exception Goto_switch_0_break_exc of unit

exception Goto_switch_1_break_exc of unit

exception Goto_switch_4_break_exc of unit

exception Goto_while_6_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic integer_of___anonenum_1: __anonenum_1 -> int

logic __anonenum_1_of_integer: int -> __anonenum_1

axiom __anonenum_1_coerce :
 (forall x:int.
  ((le_int((5), x) and le_int(x, (5))) ->
   eq_int(integer_of___anonenum_1(__anonenum_1_of_integer(x)), x)))

axiom __anonenum_1_range :
 (forall x:__anonenum_1.
  (le_int((5), integer_of___anonenum_1(x))
  and le_int(integer_of___anonenum_1(x), (5))))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq___anonenum_1(x:__anonenum_1,
 y:__anonenum_1) =
 eq_int(integer_of___anonenum_1(x), integer_of___anonenum_1(y))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

parameter __anonenum_1_of_integer_ :
 x:int ->
  { (le_int((5), x) and le_int(x, (5)))} __anonenum_1
  { eq_int(integer_of___anonenum_1(result), x) }

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter any___anonenum_1 : unit -> { } __anonenum_1 { true }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter f1 :
 x:int32 ->
  { (JC_1: true)} int32
  { ((true = true) ->
     (C_7:
     (eq_int(integer_of_int32(x), (4)) ->
      eq_int(integer_of_int32(result), (2))))) }

parameter f1a :
 x_0:int32 ->
  { (JC_4: true)} int32
  { ((true = true) ->
     (C_17:
     (eq_int(integer_of_int32(x_0), (4)) ->
      eq_int(integer_of_int32(result), (2))))) }

parameter f2 :
 x_1:int32 ->
  { (JC_7: true)} int32
  { ((true = true) -> (C_22: eq_int(integer_of_int32(result), (4)))) }

parameter f3 :
 x_2:int32 ->
  { (JC_10: true)} int32
  { ((true = true) -> (C_27: eq_int(integer_of_int32(result), (4)))) }

parameter f4 :
 x_3:int32 ->
  { (JC_13: true)} int32
  { ((true = true) -> (C_30: eq_int(integer_of_int32(result), (0)))) }

parameter f5 :
 x_4:int32 ->
  { (JC_16: true)} int32
  { ((true = true) ->
     (C_34:
     (eq_int(integer_of_int32(x_4), (1)) ->
      eq_int(integer_of_int32(result), (1))))) }

parameter f6 :
 x_5:int32 ->
  { (JC_21: true)} int32
  { ((true = true) ->
     (C_37:
     (eq_int(integer_of_int32(x_5), (2)) ->
      eq_int(integer_of_int32(result), (1))))) }

parameter f7 :
 x_6:int32 ->
  { (JC_24: true)} int32
  { ((true = true) ->
     (C_40:
     (eq_int(integer_of_int32(x_6), (5)) ->
      eq_int(integer_of_int32(result), (1))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe___anonenum_1_of_integer_ :
 x:int -> { } __anonenum_1 { eq_int(integer_of___anonenum_1(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f1_ensures_default =
 fun (x : int32) ->
  { (JC_2: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y = ref (any_int32 void) in
     begin
       try
        (let jessie_2 = x in
        begin
          (if (if ((eq_int_ (integer_of_int32 jessie_2)) (1))
              then true
              else
               (if ((eq_int_ (integer_of_int32 jessie_2)) (0))
               then true
               else true))
          then
           (let jessie_35 = (C_1:
                            begin
                              (let jessie_33 = (y := (safe_int32_of_integer_ (1))) in
                              void);
                             (C_2:
                             begin
                               (let jessie_34 = (y := (safe_int32_of_integer_ (4))) in
                               void);
                              (raise (Goto_switch_0_break_exc void))
                             end)
                            end) in
           void)
          else void);
         (if (if ((eq_int_ (integer_of_int32 jessie_2)) (4))
             then true
             else
              (if ((eq_int_ (integer_of_int32 jessie_2)) (2))
              then true
              else
               (if ((eq_int_ (integer_of_int32 jessie_2)) (1))
               then true
               else
                (if ((eq_int_ (integer_of_int32 jessie_2)) (0))
                then true
                else true))))
         then
          (let jessie_37 = (C_3:
                           begin
                             (let jessie_36 = (y := (safe_int32_of_integer_ (2))) in
                             void);
                            (raise (Goto_switch_0_break_exc void))
                           end) in
          void)
         else void);
         (if (if ((eq_int_ (integer_of_int32 jessie_2)) (3))
             then true
             else
              (if ((eq_int_ (integer_of_int32 jessie_2)) (4))
              then true
              else
               (if ((eq_int_ (integer_of_int32 jessie_2)) (2))
               then true
               else
                (if ((eq_int_ (integer_of_int32 jessie_2)) (1))
                then true
                else
                 (if ((eq_int_ (integer_of_int32 jessie_2)) (0))
                 then true
                 else true)))))
         then
          (let jessie_39 = (C_4:
                           begin
                             (let jessie_38 = (y := (safe_int32_of_integer_ (3))) in
                             void);
                            (raise (Goto_switch_0_break_exc void))
                           end) in
          void)
         else void);
         (if (if true then true else true)
         then
          (let jessie_41 = begin
                             void;
                            (C_5:
                            begin
                              (let jessie_40 = (y := (safe_int32_of_integer_ (4))) in
                              void);
                             (C_6:
                             begin
                               (y := (safe_int32_of_integer_ (5))); !y
                             end)
                            end)
                           end in
          void)
         else void)
        end)
        with
        Goto_switch_0_break_exc jessie_1 ->
        (switch_0_break: void) end;
      (jessie_returned_value := !y);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (C_7:
     (eq_int(integer_of_int32(x), (4)) ->
      eq_int(integer_of_int32(result), (2))))) }

let f1_safety =
 fun (x : int32) ->
  { (JC_2: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y = ref (any_int32 void) in
     begin
       try
        (let jessie_2 = x in
        begin
          (if (if ((eq_int_ (integer_of_int32 jessie_2)) (1))
              then true
              else
               (if ((eq_int_ (integer_of_int32 jessie_2)) (0))
               then true
               else true))
          then
           (let jessie_26 = (C_1:
                            begin
                              (let jessie_24 = (y := (safe_int32_of_integer_ (1))) in
                              void);
                             (C_2:
                             begin
                               (let jessie_25 = (y := (safe_int32_of_integer_ (4))) in
                               void);
                              (raise (Goto_switch_0_break_exc void))
                             end)
                            end) in
           void)
          else void);
         (if (if ((eq_int_ (integer_of_int32 jessie_2)) (4))
             then true
             else
              (if ((eq_int_ (integer_of_int32 jessie_2)) (2))
              then true
              else
               (if ((eq_int_ (integer_of_int32 jessie_2)) (1))
               then true
               else
                (if ((eq_int_ (integer_of_int32 jessie_2)) (0))
                then true
                else true))))
         then
          (let jessie_28 = (C_3:
                           begin
                             (let jessie_27 = (y := (safe_int32_of_integer_ (2))) in
                             void);
                            (raise (Goto_switch_0_break_exc void))
                           end) in
          void)
         else void);
         (if (if ((eq_int_ (integer_of_int32 jessie_2)) (3))
             then true
             else
              (if ((eq_int_ (integer_of_int32 jessie_2)) (4))
              then true
              else
               (if ((eq_int_ (integer_of_int32 jessie_2)) (2))
               then true
               else
                (if ((eq_int_ (integer_of_int32 jessie_2)) (1))
                then true
                else
                 (if ((eq_int_ (integer_of_int32 jessie_2)) (0))
                 then true
                 else true)))))
         then
          (let jessie_30 = (C_4:
                           begin
                             (let jessie_29 = (y := (safe_int32_of_integer_ (3))) in
                             void);
                            (raise (Goto_switch_0_break_exc void))
                           end) in
          void)
         else void);
         (if (if true then true else true)
         then
          (let jessie_32 = begin
                             void;
                            (C_5:
                            begin
                              (let jessie_31 = (y := (safe_int32_of_integer_ (4))) in
                              void);
                             (C_6:
                             begin
                               (y := (safe_int32_of_integer_ (5))); !y
                             end)
                            end)
                           end in
          void)
         else void)
        end)
        with
        Goto_switch_0_break_exc jessie_1 ->
        (switch_0_break: void) end;
      (jessie_returned_value := !y);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let f1a_ensures_default_1 =
 fun (x_0 : int32) ->
  { (JC_5: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_0 = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_65 = begin
                         try
                          (let jessie_6 = x_0 in
                          begin
                            (if (if ((eq_int_ (integer_of_int32 jessie_6)) (1))
                                then true
                                else
                                 (if ((eq_int_ (integer_of_int32 jessie_6)) (0))
                                 then true
                                 else true))
                            then
                             (let jessie_56 = (C_8:
                                              begin
                                                (let jessie_54 = (y_0 := 
                                                                  (safe_int32_of_integer_ (1))) in
                                                void);
                                               (C_9:
                                               begin
                                                 (let jessie_55 = (y_0 := 
                                                                   (safe_int32_of_integer_ (4))) in
                                                 void);
                                                (raise
                                                 (Goto_switch_1_break_exc
                                                 void))
                                               end)
                                              end) in
                             void)
                            else void);
                           (if (if ((eq_int_ (integer_of_int32 jessie_6)) (4))
                               then true
                               else
                                (if ((eq_int_ (integer_of_int32 jessie_6)) (2))
                                then true
                                else
                                 (if ((eq_int_ (integer_of_int32 jessie_6)) (1))
                                 then true
                                 else
                                  (if ((eq_int_ (integer_of_int32 jessie_6)) (0))
                                  then true
                                  else true))))
                           then
                            (let jessie_59 = (C_10:
                                             begin
                                               (let jessie_57 = (y_0 := 
                                                                 (safe_int32_of_integer_ (2))) in
                                               void);
                                              (C_11:
                                              begin
                                                (let jessie_58 = (__retres := !y_0) in
                                                void);
                                               (raise
                                                (Goto_return_label_exc
                                                void))
                                              end)
                                             end) in
                            void)
                           else void);
                           (if (if ((eq_int_ (integer_of_int32 jessie_6)) (3))
                               then true
                               else
                                (if ((eq_int_ (integer_of_int32 jessie_6)) (4))
                                then true
                                else
                                 (if ((eq_int_ (integer_of_int32 jessie_6)) (2))
                                 then true
                                 else
                                  (if ((eq_int_ (integer_of_int32 jessie_6)) (1))
                                  then true
                                  else
                                   (if ((eq_int_ (integer_of_int32 jessie_6)) (0))
                                   then true
                                   else true)))))
                           then
                            (let jessie_62 = (C_12:
                                             begin
                                               (let jessie_60 = (y_0 := 
                                                                 (safe_int32_of_integer_ (3))) in
                                               void);
                                              (C_13:
                                              begin
                                                (let jessie_61 = (__retres := !y_0) in
                                                void);
                                               (raise
                                                (Goto_return_label_exc
                                                void))
                                              end)
                                             end) in
                            void)
                           else void);
                           (if (if true then true else true)
                           then
                            (let jessie_63 = begin
                                               void;
                                              (C_14:
                                              begin
                                                (y_0 := (safe_int32_of_integer_ (4)));
                                               !y_0
                                              end)
                                             end in
                            void)
                           else void)
                          end)
                          with
                          Goto_switch_1_break_exc jessie_4 ->
                          (switch_1_break: void) end;
                        (C_15:
                        begin
                          (let jessie_64 = (y_0 := (safe_int32_of_integer_ (5))) in
                          void);
                         (C_16: begin   (__retres := !y_0); !__retres end)
                        end)
                       end in
      void)
      with
      Goto_return_label_exc jessie_5 ->
      (return_label:
      begin   (jessie_returned_value := !__retres); (raise Return) end) end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (C_17:
     (eq_int(integer_of_int32(x_0), (4)) ->
      eq_int(integer_of_int32(result), (2))))) }

let f1a_safety =
 fun (x_0 : int32) ->
  { (JC_5: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_0 = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      (let jessie_53 = begin
                         try
                          (let jessie_6 = x_0 in
                          begin
                            (if (if ((eq_int_ (integer_of_int32 jessie_6)) (1))
                                then true
                                else
                                 (if ((eq_int_ (integer_of_int32 jessie_6)) (0))
                                 then true
                                 else true))
                            then
                             (let jessie_44 = (C_8:
                                              begin
                                                (let jessie_42 = (y_0 := 
                                                                  (safe_int32_of_integer_ (1))) in
                                                void);
                                               (C_9:
                                               begin
                                                 (let jessie_43 = (y_0 := 
                                                                   (safe_int32_of_integer_ (4))) in
                                                 void);
                                                (raise
                                                 (Goto_switch_1_break_exc
                                                 void))
                                               end)
                                              end) in
                             void)
                            else void);
                           (if (if ((eq_int_ (integer_of_int32 jessie_6)) (4))
                               then true
                               else
                                (if ((eq_int_ (integer_of_int32 jessie_6)) (2))
                                then true
                                else
                                 (if ((eq_int_ (integer_of_int32 jessie_6)) (1))
                                 then true
                                 else
                                  (if ((eq_int_ (integer_of_int32 jessie_6)) (0))
                                  then true
                                  else true))))
                           then
                            (let jessie_47 = (C_10:
                                             begin
                                               (let jessie_45 = (y_0 := 
                                                                 (safe_int32_of_integer_ (2))) in
                                               void);
                                              (C_11:
                                              begin
                                                (let jessie_46 = (__retres := !y_0) in
                                                void);
                                               (raise
                                                (Goto_return_label_exc
                                                void))
                                              end)
                                             end) in
                            void)
                           else void);
                           (if (if ((eq_int_ (integer_of_int32 jessie_6)) (3))
                               then true
                               else
                                (if ((eq_int_ (integer_of_int32 jessie_6)) (4))
                                then true
                                else
                                 (if ((eq_int_ (integer_of_int32 jessie_6)) (2))
                                 then true
                                 else
                                  (if ((eq_int_ (integer_of_int32 jessie_6)) (1))
                                  then true
                                  else
                                   (if ((eq_int_ (integer_of_int32 jessie_6)) (0))
                                   then true
                                   else true)))))
                           then
                            (let jessie_50 = (C_12:
                                             begin
                                               (let jessie_48 = (y_0 := 
                                                                 (safe_int32_of_integer_ (3))) in
                                               void);
                                              (C_13:
                                              begin
                                                (let jessie_49 = (__retres := !y_0) in
                                                void);
                                               (raise
                                                (Goto_return_label_exc
                                                void))
                                              end)
                                             end) in
                            void)
                           else void);
                           (if (if true then true else true)
                           then
                            (let jessie_51 = begin
                                               void;
                                              (C_14:
                                              begin
                                                (y_0 := (safe_int32_of_integer_ (4)));
                                               !y_0
                                              end)
                                             end in
                            void)
                           else void)
                          end)
                          with
                          Goto_switch_1_break_exc jessie_4 ->
                          (switch_1_break: void) end;
                        (C_15:
                        begin
                          (let jessie_52 = (y_0 := (safe_int32_of_integer_ (5))) in
                          void);
                         (C_16: begin   (__retres := !y_0); !__retres end)
                        end)
                       end in
      void)
      with
      Goto_return_label_exc jessie_5 ->
      (return_label:
      begin   (jessie_returned_value := !__retres); (raise Return) end) end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let f2_ensures_default_2 =
 fun (x_1 : int32) ->
  { (JC_8: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_1 = ref (any_int32 void) in
     begin
       (let jessie_8 = x_1 in
       begin
         (if (if ((eq_int_ (integer_of_int32 jessie_8)) (1))
             then true
             else
              (if ((eq_int_ (integer_of_int32 jessie_8)) (0))
              then true
              else true))
         then
          (let jessie_70 = (C_18:
                           begin
                             (y_1 := (safe_int32_of_integer_ (1))); !y_1
                           end) in
          void)
         else void);
        (if (if ((eq_int_ (integer_of_int32 jessie_8)) (4))
            then true
            else
             (if ((eq_int_ (integer_of_int32 jessie_8)) (2))
             then true
             else
              (if ((eq_int_ (integer_of_int32 jessie_8)) (1))
              then true
              else
               (if ((eq_int_ (integer_of_int32 jessie_8)) (0))
               then true
               else true))))
        then
         (let jessie_71 = (C_19:
                          begin
                            (y_1 := (safe_int32_of_integer_ (2))); !y_1
                          end) in
         void)
        else void);
        (if (if ((eq_int_ (integer_of_int32 jessie_8)) (3))
            then true
            else
             (if ((eq_int_ (integer_of_int32 jessie_8)) (4))
             then true
             else
              (if ((eq_int_ (integer_of_int32 jessie_8)) (2))
              then true
              else
               (if ((eq_int_ (integer_of_int32 jessie_8)) (1))
               then true
               else
                (if ((eq_int_ (integer_of_int32 jessie_8)) (0))
                then true
                else true)))))
        then
         (let jessie_72 = (C_20:
                          begin
                            (y_1 := (safe_int32_of_integer_ (3))); !y_1
                          end) in
         void)
        else void);
        (if (if true then true else true)
        then
         (let jessie_73 = begin
                            void;
                           (C_21:
                           begin
                             (y_1 := (safe_int32_of_integer_ (4))); !y_1
                           end)
                          end in
         void)
        else void)
       end);
      (jessie_returned_value := !y_1);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) -> (C_22: eq_int(integer_of_int32(result), (4)))) }

let f2_safety =
 fun (x_1 : int32) ->
  { (JC_8: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_1 = ref (any_int32 void) in
     begin
       (let jessie_8 = x_1 in
       begin
         (if (if ((eq_int_ (integer_of_int32 jessie_8)) (1))
             then true
             else
              (if ((eq_int_ (integer_of_int32 jessie_8)) (0))
              then true
              else true))
         then
          (let jessie_66 = (C_18:
                           begin
                             (y_1 := (safe_int32_of_integer_ (1))); !y_1
                           end) in
          void)
         else void);
        (if (if ((eq_int_ (integer_of_int32 jessie_8)) (4))
            then true
            else
             (if ((eq_int_ (integer_of_int32 jessie_8)) (2))
             then true
             else
              (if ((eq_int_ (integer_of_int32 jessie_8)) (1))
              then true
              else
               (if ((eq_int_ (integer_of_int32 jessie_8)) (0))
               then true
               else true))))
        then
         (let jessie_67 = (C_19:
                          begin
                            (y_1 := (safe_int32_of_integer_ (2))); !y_1
                          end) in
         void)
        else void);
        (if (if ((eq_int_ (integer_of_int32 jessie_8)) (3))
            then true
            else
             (if ((eq_int_ (integer_of_int32 jessie_8)) (4))
             then true
             else
              (if ((eq_int_ (integer_of_int32 jessie_8)) (2))
              then true
              else
               (if ((eq_int_ (integer_of_int32 jessie_8)) (1))
               then true
               else
                (if ((eq_int_ (integer_of_int32 jessie_8)) (0))
                then true
                else true)))))
        then
         (let jessie_68 = (C_20:
                          begin
                            (y_1 := (safe_int32_of_integer_ (3))); !y_1
                          end) in
         void)
        else void);
        (if (if true then true else true)
        then
         (let jessie_69 = begin
                            void;
                           (C_21:
                           begin
                             (y_1 := (safe_int32_of_integer_ (4))); !y_1
                           end)
                          end in
         void)
        else void)
       end);
      (jessie_returned_value := !y_1);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let f3_ensures_default_3 =
 fun (x_2 : int32) ->
  { (JC_11: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_2 = ref (any_int32 void) in
     begin
       (let jessie_10 = x_2 in
       begin
         (if (if ((eq_int_ (integer_of_int32 jessie_10)) (1))
             then true
             else
              (if ((eq_int_ (integer_of_int32 jessie_10)) (0))
              then true
              else true))
         then
          (let jessie_78 = (C_23:
                           begin
                             (y_2 := (safe_int32_of_integer_ (1))); !y_2
                           end) in
          void)
         else void);
        (if (if (if ((neq_int_ (integer_of_int32 jessie_10)) (3))
                then
                 (if ((neq_int_ (integer_of_int32 jessie_10)) (2))
                 then true
                 else false)
                else false)
            then true
            else true)
        then
         (let jessie_79 = begin
                            void;
                           (C_24:
                           begin
                             (y_2 := (safe_int32_of_integer_ (2))); !y_2
                           end)
                          end in
         void)
        else void);
        (if (if ((eq_int_ (integer_of_int32 jessie_10)) (3))
            then true
            else
             (if (if ((neq_int_ (integer_of_int32 jessie_10)) (3))
                 then
                  (if ((neq_int_ (integer_of_int32 jessie_10)) (2))
                  then true
                  else false)
                 else false)
             then true
             else true))
        then
         (let jessie_80 = (C_25:
                          begin
                            (y_2 := (safe_int32_of_integer_ (3))); !y_2
                          end) in
         void)
        else void);
        (if (if ((eq_int_ (integer_of_int32 jessie_10)) (2))
            then true
            else
             (if ((eq_int_ (integer_of_int32 jessie_10)) (3))
             then true
             else
              (if (if ((neq_int_ (integer_of_int32 jessie_10)) (3))
                  then
                   (if ((neq_int_ (integer_of_int32 jessie_10)) (2))
                   then true
                   else false)
                  else false)
              then true
              else true)))
        then
         (let jessie_81 = (C_26:
                          begin
                            (y_2 := (safe_int32_of_integer_ (4))); !y_2
                          end) in
         void)
        else void)
       end);
      (jessie_returned_value := !y_2);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) -> (C_27: eq_int(integer_of_int32(result), (4)))) }

let f3_safety =
 fun (x_2 : int32) ->
  { (JC_11: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_2 = ref (any_int32 void) in
     begin
       (let jessie_10 = x_2 in
       begin
         (if (if ((eq_int_ (integer_of_int32 jessie_10)) (1))
             then true
             else
              (if ((eq_int_ (integer_of_int32 jessie_10)) (0))
              then true
              else true))
         then
          (let jessie_74 = (C_23:
                           begin
                             (y_2 := (safe_int32_of_integer_ (1))); !y_2
                           end) in
          void)
         else void);
        (if (if (if ((neq_int_ (integer_of_int32 jessie_10)) (3))
                then
                 (if ((neq_int_ (integer_of_int32 jessie_10)) (2))
                 then true
                 else false)
                else false)
            then true
            else true)
        then
         (let jessie_75 = begin
                            void;
                           (C_24:
                           begin
                             (y_2 := (safe_int32_of_integer_ (2))); !y_2
                           end)
                          end in
         void)
        else void);
        (if (if ((eq_int_ (integer_of_int32 jessie_10)) (3))
            then true
            else
             (if (if ((neq_int_ (integer_of_int32 jessie_10)) (3))
                 then
                  (if ((neq_int_ (integer_of_int32 jessie_10)) (2))
                  then true
                  else false)
                 else false)
             then true
             else true))
        then
         (let jessie_76 = (C_25:
                          begin
                            (y_2 := (safe_int32_of_integer_ (3))); !y_2
                          end) in
         void)
        else void);
        (if (if ((eq_int_ (integer_of_int32 jessie_10)) (2))
            then true
            else
             (if ((eq_int_ (integer_of_int32 jessie_10)) (3))
             then true
             else
              (if (if ((neq_int_ (integer_of_int32 jessie_10)) (3))
                  then
                   (if ((neq_int_ (integer_of_int32 jessie_10)) (2))
                   then true
                   else false)
                  else false)
              then true
              else true)))
        then
         (let jessie_77 = (C_26:
                          begin
                            (y_2 := (safe_int32_of_integer_ (4))); !y_2
                          end) in
         void)
        else void)
       end);
      (jessie_returned_value := !y_2);
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let f4_ensures_default_4 =
 fun (x_3 : int32) ->
  { (JC_14: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_3 = ref (any_int32 void) in
     (C_28:
     begin
       (let jessie_85 = (y_3 := (safe_int32_of_integer_ (0))) in void);
      try
       (let jessie_13 = x_3 in
       (if (if ((eq_int_ (integer_of_int32 jessie_13)) (0))
           then true
           else true)
       then
        (let jessie_87 = begin
                           (if ((eq_int_ (integer_of_int32 x_3)) (0))
                           then
                            (let jessie_86 = (raise
                                              (Goto_switch_4_break_exc
                                              void)) in
                            void)
                           else void);
                          (C_29:
                          begin
                            (y_3 := (safe_int32_of_integer_ (1))); !y_3
                          end)
                         end in
        void)
       else void))
       with
       Goto_switch_4_break_exc jessie_12 ->
       (switch_4_break: void) end;
      (jessie_returned_value := !y_3);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) -> (C_30: eq_int(integer_of_int32(result), (0)))) }

let f4_safety =
 fun (x_3 : int32) ->
  { (JC_14: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_3 = ref (any_int32 void) in
     (C_28:
     begin
       (let jessie_82 = (y_3 := (safe_int32_of_integer_ (0))) in void);
      try
       (let jessie_13 = x_3 in
       (if (if ((eq_int_ (integer_of_int32 jessie_13)) (0))
           then true
           else true)
       then
        (let jessie_84 = begin
                           (if ((eq_int_ (integer_of_int32 x_3)) (0))
                           then
                            (let jessie_83 = (raise
                                              (Goto_switch_4_break_exc
                                              void)) in
                            void)
                           else void);
                          (C_29:
                          begin
                            (y_3 := (safe_int32_of_integer_ (1))); !y_3
                          end)
                         end in
        void)
       else void))
       with
       Goto_switch_4_break_exc jessie_12 ->
       (switch_4_break: void) end;
      (jessie_returned_value := !y_3);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let f5_ensures_default_5 =
 fun (x_4 : int32) ->
  { (JC_17: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_4 = ref (any_int32 void) in
     (C_31:
     begin
       (let jessie_93 = (y_4 := (safe_int32_of_integer_ (0))) in void);
      (let jessie_18 = x_4 in
      (if (if ((eq_int_ (integer_of_int32 jessie_18)) (1))
          then true
          else true)
      then
       (let jessie_97 = begin
                          try
                           while true do
                           { invariant (C_32: (true = true))  }
                            try
                             (let jessie_96 = begin
                                                (let jessie_95 = begin
                                                                   (if 
                                                                   ((gt_int_ 
                                                                    (integer_of_int32 x_4)) (0))
                                                                   then void
                                                                   else
                                                                    (let jessie_94 = 
                                                                    (raise
                                                                    (Goto_while_6_break_exc
                                                                    void)) in
                                                                    void));
                                                                  (raise
                                                                   (Goto_while_6_break_exc
                                                                   void))
                                                                 end in
                                                void);
                                               (raise
                                                (Loop_continue_exc
                                                void))
                                              end in
                             void)
                             with
                             Loop_continue_exc jessie_17 ->
                             void end
                           done
                           with
                           Goto_while_6_break_exc jessie_15 ->
                           (while_6_break: void) end;
                         (C_33:
                         begin
                           (y_4 := (safe_int32_of_integer_ (1))); !y_4
                         end)
                        end in
       void)
      else void));
      (jessie_returned_value := !y_4);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (C_34:
     (eq_int(integer_of_int32(x_4), (1)) ->
      eq_int(integer_of_int32(result), (1))))) }

let f5_safety =
 fun (x_4 : int32) ->
  { (JC_17: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_4 = ref (any_int32 void) in
     (C_31:
     begin
       (let jessie_88 = (y_4 := (safe_int32_of_integer_ (0))) in void);
      (let jessie_18 = x_4 in
      (if (if ((eq_int_ (integer_of_int32 jessie_18)) (1))
          then true
          else true)
      then
       (let jessie_92 = begin
                          try
                           while true do
                           { invariant (C_32: (true = true))  }
                            try
                             (let jessie_91 = begin
                                                (let jessie_90 = begin
                                                                   (if 
                                                                   ((gt_int_ 
                                                                    (integer_of_int32 x_4)) (0))
                                                                   then void
                                                                   else
                                                                    (let jessie_89 = 
                                                                    (raise
                                                                    (Goto_while_6_break_exc
                                                                    void)) in
                                                                    void));
                                                                  (raise
                                                                   (Goto_while_6_break_exc
                                                                   void))
                                                                 end in
                                                void);
                                               (raise
                                                (Loop_continue_exc
                                                void))
                                              end in
                             void)
                             with
                             Loop_continue_exc jessie_17 ->
                             void end
                           done
                           with
                           Goto_while_6_break_exc jessie_15 ->
                           (while_6_break: void) end;
                         (C_33:
                         begin
                           (y_4 := (safe_int32_of_integer_ (1))); !y_4
                         end)
                        end in
       void)
      else void));
      (jessie_returned_value := !y_4);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let f6_ensures_default_6 =
 fun (x_5 : int32) ->
  { (JC_22: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_5 = ref (any_int32 void) in
     (C_35:
     begin
       (let jessie_100 = (y_5 := (safe_int32_of_integer_ (0))) in void);
      (let jessie_20 = x_5 in
      (if (if ((eq_int_ (integer_of_int32 jessie_20)) (2))
          then true
          else true)
      then
       (let jessie_101 = (C_36:
                         begin
                           (y_5 := (safe_int32_of_integer_ (1))); !y_5
                         end) in
       void)
      else void));
      (jessie_returned_value := !y_5);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (C_37:
     (eq_int(integer_of_int32(x_5), (2)) ->
      eq_int(integer_of_int32(result), (1))))) }

let f6_safety =
 fun (x_5 : int32) ->
  { (JC_22: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_5 = ref (any_int32 void) in
     (C_35:
     begin
       (let jessie_98 = (y_5 := (safe_int32_of_integer_ (0))) in void);
      (let jessie_20 = x_5 in
      (if (if ((eq_int_ (integer_of_int32 jessie_20)) (2))
          then true
          else true)
      then
       (let jessie_99 = (C_36:
                        begin
                          (y_5 := (safe_int32_of_integer_ (1))); !y_5
                        end) in
       void)
      else void));
      (jessie_returned_value := !y_5);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let f7_ensures_default_7 =
 fun (x_6 : int32) ->
  { (JC_25: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_6 = ref (any_int32 void) in
     (C_38:
     begin
       (let jessie_104 = (y_6 := (safe_int32_of_integer_ (0))) in void);
      (let jessie_22 = x_6 in
      (if (if ((eq_int_ (integer_of_int32 jessie_22)) (5))
          then true
          else true)
      then
       (let jessie_105 = (C_39:
                         begin
                           (y_6 := (safe_int32_of_integer_ (1))); !y_6
                         end) in
       void)
      else void));
      (jessie_returned_value := !y_6);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (C_40:
     (eq_int(integer_of_int32(x_6), (5)) ->
      eq_int(integer_of_int32(result), (1))))) }

let f7_safety =
 fun (x_6 : int32) ->
  { (JC_25: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y_6 = ref (any_int32 void) in
     (C_38:
     begin
       (let jessie_102 = (y_6 := (safe_int32_of_integer_ (0))) in void);
      (let jessie_22 = x_6 in
      (if (if ((eq_int_ (integer_of_int32 jessie_22)) (5))
          then true
          else true)
      then
       (let jessie_103 = (C_39:
                         begin
                           (y_6 := (safe_int32_of_integer_ (1))); !y_6
                         end) in
       void)
      else void));
      (jessie_returned_value := !y_6);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }


