rm -f copy_struct.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only copy_struct.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs copy_struct.cloc copy_struct.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
{
  {
    (C_5:
       {
       ((C_4: (C_3: q.a).i) = (C_2: (C_1: p.a).i));
         (C_10:
            {
            ((C_9: (C_8: q.a).j) = (C_7: (C_6: p.a).j));
              (C_15:
                 {
                 ((C_14: (C_13: q.b).i) = (C_12: (C_11: p.b).i));
                   (C_20: { ((C_19: (C_18: q.b).j) = (C_17: (C_16: p.b).j)) })
                 })
            })
       })
    };
    (return)
  }
}

Normalized expression:
(C_21:
   (((C_23: ((\offset_min(p)) <= 0)) && (C_24: ((\offset_max(p)) >= 0))) &&
      ((C_26: ((\offset_min(q)) <= 0)) && (C_27: ((\offset_max(q)) >= 0)))))

Normalized expression:
(C_28:
   (((C_30: (p.a.i == q.a.i)) && (C_31: (p.a.j == q.a.j))) &&
      ((C_33: (p.b.i == q.b.i)) && (C_34: (p.b.j == q.b.j)))))

Normalized expression:
true

Normalized expression:
{
(let T[0] p in
   {
   {
     (C_36:
        {
        (p = (C_35: (TODO alloc)));
          {
          (C_41:
             {
             ((C_40: (C_39: p.a).i) = (C_38: (C_37: v_p.a).i));
               (C_46:
                  {
                  ((C_45: (C_44: p.a).j) = (C_43: (C_42: v_p.a).j));
                    (C_51:
                       {
                       ((C_50: (C_49: p.b).i) = (C_48: (C_47: v_p.b).i));
                         (C_56:
                            {
                            ((C_55: (C_54: p.b).j) = (C_53: (C_52: v_p.b).j))
                            })
                       })
                  })
             })
          };
          {
          (C_57: { (TODO free); (return p) })
          }
        })
     }
   })
}

Normalized expression:
(C_58:
   (((C_60: (\result.a.i == v_p.a.i)) && (C_61: (\result.a.j == v_p.a.j))) &&
      ((C_63: (\result.b.i == v_p.b.i)) && (C_64: (\result.b.j == v_p.b.j)))))

Normalized expression:
true

Normalized expression:
{
(let T[0] __retres in
   {
   {
     (C_66:
        {
        (__retres = (C_65: (TODO alloc)));
          {
          (C_71:
             {
             ((C_70: (C_69: __retres.a).i) = (C_68: (C_67: p.a).i));
               (C_76:
                  {
                  ((C_75: (C_74: __retres.a).j) = (C_73: (C_72: p.a).j));
                    (C_81:
                       {
                       ((C_80: (C_79: __retres.b).i) = (C_78: (C_77: p.b).i));
                         (C_86:
                            {
                            ((C_85: (C_84: __retres.b).j) =
                               (C_83: (C_82: p.b).j))
                            })
                       })
                  })
             })
          };
          {
          (C_87: { (TODO free); (return __retres) })
          }
        })
     }
   })
}

Normalized expression:
(C_88: ((C_89: ((\offset_min(p)) <= 0)) && (C_90: ((\offset_max(p)) >= 0))))

Normalized expression:
(C_91:
   (((C_93: (\result.a.i == p.a.i)) && (C_94: (\result.a.j == p.a.j))) &&
      ((C_96: (\result.b.i == p.b.i)) && (C_97: (\result.b.j == p.b.j)))))

Normalized expression:
true

Normalized expression:
{
(let T[0] copy in
   {
   (let T[0] copy2 in
      {
      (let T[0] __cil_tmp6 in
         {
         (let T[0] __cil_tmp7 in
            {
            {
              (C_99:
                 {
                 (copy = (C_98: (TODO alloc)));
                   (C_101:
                      {
                      (copy2 = (C_100: (TODO alloc)));
                        {
                        (C_103:
                           {
                           (__cil_tmp6 = (C_102: id{}(p)));
                             {
                             (C_108:
                                {
                                ((C_107: (C_106: copy.a).i) =
                                   (C_105: (C_104: __cil_tmp6.a).i));
                                  (C_113:
                                     {
                                     ((C_112: (C_111: copy.a).j) =
                                        (C_110: (C_109: __cil_tmp6.a).j));
                                       (C_118:
                                          {
                                          ((C_117: (C_116: copy.b).i) =
                                             (C_115: (C_114: __cil_tmp6.b).i));
                                            (C_123:
                                               {
                                               ((C_122: (C_121: copy.b).j) =
                                                  (C_120:
                                                     (C_119: __cil_tmp6.b).j))
                                               })
                                          })
                                     })
                                })
                             };
                             (C_124: { (TODO free) })
                           })
                        };
                        {
                        (C_126:
                           {
                           (__cil_tmp7 = (C_125: idp{}(p)));
                             {
                             (C_131:
                                {
                                ((C_130: (C_129: copy2.a).i) =
                                   (C_128: (C_127: __cil_tmp7.a).i));
                                  (C_136:
                                     {
                                     ((C_135: (C_134: copy2.a).j) =
                                        (C_133: (C_132: __cil_tmp7.a).j));
                                       (C_141:
                                          {
                                          ((C_140: (C_139: copy2.b).i) =
                                             (C_138: (C_137: __cil_tmp7.b).i));
                                            (C_146:
                                               {
                                               ((C_145: (C_144: copy2.b).j) =
                                                  (C_143:
                                                     (C_142: __cil_tmp7.b).j))
                                               })
                                          })
                                     })
                                })
                             };
                             (C_147: { (TODO free) })
                           })
                        };
                        (C_150:
                           {
                           ((C_149: (C_148: copy2.a).i) = 0);
                             {
                             (assert (C_151: (p.a.i == copy.a.i))); ()
                             };
                             (C_154:
                                {
                                ((C_153: (C_152: copy.a).j) = 1);
                                  {
                                  (assert (C_155: (p.a.j == copy2.a.j))); ()
                                  };
                                  (C_158:
                                     {
                                     ((C_157: (C_156: p.b).i) = 0);
                                       {
                                       (assert (C_159:
                                                  (copy.b.i == copy2.b.i)));
                                         ()
                                       };
                                       {
                                       (assert (C_160:
                                                  ((C_161:
                                                      (p.b.j == copy.b.j)) &&
                                                     (C_162:
                                                        (copy.b.j ==
                                                           copy2.b.j)))));
                                         ()
                                       };
                                       {
                                       (C_163:
                                          {
                                          (TODO free);
                                            (C_164: { (TODO free); (return) })
                                          })
                                       }
                                     })
                                })
                           })
                      })
                 })
              }
            })
         })
      })
   })
}

Normalized expression:
(C_165:
   ((C_166: ((\offset_min(p)) <= 0)) && (C_167: ((\offset_max(p)) >= 0))))

Generating Why function f
Generating Why function id
Generating Why function idp
Generating Why function g
cat why/copy_struct.why
type S

type T

type _bool

type char_P

type int16

type int32

type int64

type int8

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic T_tag:  -> T tag_id

axiom T_int : (int_of_tag(T_tag) = (1))

axiom T_parenttag_bottom : parenttag(T_tag, bottom_tag)

axiom T_tags :
 (forall x:T pointer.
  (forall T_tag_table:T tag_table. instanceof(T_tag_table, x, T_tag)))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_struct_T(p:T pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table,
 T_alloc_table:T alloc_table,
 T_a:(T,
 S pointer) memory,
 T_b:(T,
 S pointer) memory) =
 ((offset_min(T_alloc_table, p) = a)
 and ((offset_max(T_alloc_table, p) = b)
     and (valid_struct_S(select(T_a, p), (0), (0), S_alloc_table)
         and valid_struct_S(select(T_b, p), (0), (0), S_alloc_table))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_variant_T(p:T pointer,
 a:int,
 b:int,
 T_alloc_table:T alloc_table) =
 ((offset_min(T_alloc_table, p) = a) and (offset_max(T_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter S_alloc_table : S alloc_table ref

parameter S_i : (S, int32) memory ref

parameter S_j : (S, int32) memory ref

parameter S_tag_table : S tag_table ref

parameter T_a : (T, S pointer) memory ref

parameter T_alloc_table : T alloc_table ref

parameter T_b : (T, S pointer) memory ref

parameter T_tag_table : T tag_table ref

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter alloc_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    { ge_int(n, (0))} S pointer reads S_alloc_table
    writes S_alloc_table,S_tag_table
    { (valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table)
      and (instanceof(S_tag_table, result, S_tag)
          and (alloc_extends(S_alloc_table@, S_alloc_table)
              and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_T :
 n:int ->
  T_alloc_table:T alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    T_alloc_table:T alloc_table ref ->
     T_a:(T,
      S pointer) memory ref ->
      T_b:(T,
       S pointer) memory ref ->
       { ge_int(n, (0))} T pointer reads S_alloc_table,T_a,T_alloc_table,T_b
       writes T_alloc_table,T_tag_table
       { (valid_struct_T(result, (0), sub_int(n, (1)), S_alloc_table,
          T_alloc_table, T_a, T_b)
         and (instanceof(T_tag_table, result, T_tag)
             and (alloc_extends(T_alloc_table@, T_alloc_table)
                 and alloc_extern(T_alloc_table@, result)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_S :
 tt:unit ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    { } S pointer reads S_alloc_table writes S_alloc_table,S_tag_table
    { (valid_struct_S(result, (0), (0), S_alloc_table)
      and (instanceof(S_tag_table, result, S_tag)
          and (alloc_extends(S_alloc_table@, S_alloc_table)
              and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_one_T :
 tt:unit ->
  T_alloc_table:T alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    T_alloc_table:T alloc_table ref ->
     T_a:(T,
      S pointer) memory ref ->
      T_b:(T,
       S pointer) memory ref ->
       { } T pointer reads S_alloc_table,T_a,T_alloc_table,T_b
       writes T_alloc_table,T_tag_table
       { (valid_struct_T(result, (0), (0), S_alloc_table, T_alloc_table, T_a,
          T_b)
         and (instanceof(T_tag_table, result, T_tag)
             and (alloc_extends(T_alloc_table@, T_alloc_table)
                 and alloc_extern(T_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter f :
 p:T pointer ->
  q:T pointer ->
   { (C_21:
     ((C_23: le_int(offset_min(T_alloc_table, p), (0)))
     and ((C_24: ge_int(offset_max(T_alloc_table, p), (0)))
         and ((C_26: le_int(offset_min(T_alloc_table, q), (0)))
             and (C_27: ge_int(offset_max(T_alloc_table, q), (0)))))))}
   unit reads S_alloc_table,S_i,S_j,T_a,T_alloc_table,T_b,T_tag_table
   writes S_i,S_j
   { ((true = true) ->
      (C_28:
      ((C_30:
       eq_int(integer_of_int32(select(S_i, select(T_a, p))),
       integer_of_int32(select(S_i, select(T_a, q)))))
      and ((C_31:
           eq_int(integer_of_int32(select(S_j, select(T_a, p))),
           integer_of_int32(select(S_j, select(T_a, q)))))
          and ((C_33:
               eq_int(integer_of_int32(select(S_i, select(T_b, p))),
               integer_of_int32(select(S_i, select(T_b, q)))))
              and (C_34:
                  eq_int(integer_of_int32(select(S_j, select(T_b, p))),
                  integer_of_int32(select(S_j, select(T_b, q)))))))))) }

parameter g :
 p_1:T pointer ->
  { (C_165:
    ((C_166: le_int(offset_min(T_alloc_table, p_1), (0)))
    and (C_167: ge_int(offset_max(T_alloc_table, p_1), (0)))))}
  unit reads S_alloc_table,S_i,S_j,T_a,T_alloc_table,T_b,T_tag_table
  writes S_alloc_table,S_i,S_j,S_tag_table,T_a,T_alloc_table,T_b,T_tag_table
  { true }

parameter id :
 v_p:T pointer ->
  { (JC_3: true)} T pointer
  reads S_alloc_table,S_i,S_j,T_a,T_alloc_table,T_b,T_tag_table
  writes S_alloc_table,S_i,S_j,S_tag_table,T_a,T_alloc_table,T_b,T_tag_table
  { ((true = true) ->
     (C_58:
     ((C_60:
      eq_int(integer_of_int32(select(S_i, select(T_a, result))),
      integer_of_int32(select(S_i, select(T_a, v_p)))))
     and ((C_61:
          eq_int(integer_of_int32(select(S_j, select(T_a, result))),
          integer_of_int32(select(S_j, select(T_a, v_p)))))
         and ((C_63:
              eq_int(integer_of_int32(select(S_i, select(T_b, result))),
              integer_of_int32(select(S_i, select(T_b, v_p)))))
             and (C_64:
                 eq_int(integer_of_int32(select(S_j, select(T_b, result))),
                 integer_of_int32(select(S_j, select(T_b, v_p)))))))))) }

parameter idp :
 p_0:T pointer ->
  { (C_88:
    ((C_89: le_int(offset_min(T_alloc_table, p_0), (0)))
    and (C_90: ge_int(offset_max(T_alloc_table, p_0), (0)))))}
  T pointer reads S_alloc_table,S_i,S_j,T_a,T_alloc_table,T_b,T_tag_table
  writes S_alloc_table,S_i,S_j,S_tag_table,T_a,T_alloc_table,T_b,T_tag_table
  { ((true = true) ->
     (C_91:
     ((C_93:
      eq_int(integer_of_int32(select(S_i, select(T_a, result))),
      integer_of_int32(select(S_i, select(T_a, p_0)))))
     and ((C_94:
          eq_int(integer_of_int32(select(S_j, select(T_a, result))),
          integer_of_int32(select(S_j, select(T_a, p_0)))))
         and ((C_96:
              eq_int(integer_of_int32(select(S_i, select(T_b, result))),
              integer_of_int32(select(S_i, select(T_b, p_0)))))
             and (C_97:
                 eq_int(integer_of_int32(select(S_j, select(T_b, result))),
                 integer_of_int32(select(S_j, select(T_b, p_0)))))))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f_ensures_default =
 fun (p : T pointer) (q : T pointer) ->
  { (C_21:
    ((C_23: le_int(offset_min(T_alloc_table, p), (0)))
    and ((C_24: ge_int(offset_max(T_alloc_table, p), (0)))
        and ((C_26: le_int(offset_min(T_alloc_table, q), (0)))
            and (C_27: ge_int(offset_max(T_alloc_table, q), (0))))))) }
  (init:
  try
   begin
     (let jessie_24 = (C_5:
                      begin
                        (let jessie_15 = (let jessie_13 = ((safe_acc_ !T_a) q) in
                                         (let jessie_14 = ((safe_acc_ !S_i) 
                                                           ((safe_acc_ !T_a) p)) in
                                         (((safe_upd_ S_i) ((safe_acc_ !T_a) q)) jessie_14))) in
                        void);
                       (C_10:
                       begin
                         (let jessie_18 = (let jessie_16 = ((safe_acc_ !T_a) q) in
                                          (let jessie_17 = ((safe_acc_ !S_j) 
                                                            ((safe_acc_ !T_a) p)) in
                                          (((safe_upd_ S_j) ((safe_acc_ !T_a) q)) jessie_17))) in
                         void);
                        (C_15:
                        begin
                          (let jessie_21 = (let jessie_19 = ((safe_acc_ !T_b) q) in
                                           (let jessie_20 = ((safe_acc_ !S_i) 
                                                             ((safe_acc_ !T_b) p)) in
                                           (((safe_upd_ S_i) ((safe_acc_ !T_b) q)) jessie_20))) in
                          void);
                         (C_20:
                         (let jessie_22 = ((safe_acc_ !T_b) q) in
                         (let jessie_23 = ((safe_acc_ !S_j) ((safe_acc_ !T_b) p)) in
                         begin
                           (((safe_upd_ S_j) ((safe_acc_ !T_b) q)) jessie_23);
                          ((safe_acc_ !S_j) jessie_22)
                         end)))
                        end)
                       end)
                      end) in
     void);
    (raise Return);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (C_28:
     ((C_30:
      eq_int(integer_of_int32(select(S_i, select(T_a, p))),
      integer_of_int32(select(S_i, select(T_a, q)))))
     and ((C_31:
          eq_int(integer_of_int32(select(S_j, select(T_a, p))),
          integer_of_int32(select(S_j, select(T_a, q)))))
         and ((C_33:
              eq_int(integer_of_int32(select(S_i, select(T_b, p))),
              integer_of_int32(select(S_i, select(T_b, q)))))
             and (C_34:
                 eq_int(integer_of_int32(select(S_j, select(T_b, p))),
                 integer_of_int32(select(S_j, select(T_b, q)))))))))) }

let f_safety =
 fun (p : T pointer) (q : T pointer) ->
  { (C_21:
    ((C_23: le_int(offset_min(T_alloc_table, p), (0)))
    and ((C_24: ge_int(offset_max(T_alloc_table, p), (0)))
        and ((C_26: le_int(offset_min(T_alloc_table, q), (0)))
            and (C_27: ge_int(offset_max(T_alloc_table, q), (0))))))) }
  (init:
  try
   begin
     (let jessie_12 = (C_5:
                      begin
                        (let jessie_3 = (let jessie_1 = (C_3:
                                                        (((acc_ !T_alloc_table) !T_a) q)) in
                                        (let jessie_2 = ((safe_acc_ !S_i) 
                                                         (C_1:
                                                         (((acc_ !T_alloc_table) !T_a) p))) in
                                        (((safe_upd_ S_i) (C_3:
                                                          (((acc_ !T_alloc_table) !T_a) q))) jessie_2))) in
                        void);
                       (C_10:
                       begin
                         (let jessie_6 = (let jessie_4 = (C_8:
                                                         (((acc_ !T_alloc_table) !T_a) q)) in
                                         (let jessie_5 = ((safe_acc_ !S_j) 
                                                          (C_6:
                                                          (((acc_ !T_alloc_table) !T_a) p))) in
                                         (((safe_upd_ S_j) (C_8:
                                                           (((acc_ !T_alloc_table) !T_a) q))) jessie_5))) in
                         void);
                        (C_15:
                        begin
                          (let jessie_9 = (let jessie_7 = (C_13:
                                                          (((acc_ !T_alloc_table) !T_b) q)) in
                                          (let jessie_8 = ((safe_acc_ !S_i) 
                                                           (C_11:
                                                           (((acc_ !T_alloc_table) !T_b) p))) in
                                          (((safe_upd_ S_i) (C_13:
                                                            (((acc_ !T_alloc_table) !T_b) q))) jessie_8))) in
                          void);
                         (C_20:
                         (let jessie_10 = (C_18:
                                          (((acc_ !T_alloc_table) !T_b) q)) in
                         (let jessie_11 = ((safe_acc_ !S_j) (C_16:
                                                            (((acc_ !T_alloc_table) !T_b) p))) in
                         begin
                           (((safe_upd_ S_j) (C_18:
                                             (((acc_ !T_alloc_table) !T_b) q))) jessie_11);
                          ((safe_acc_ !S_j) jessie_10)
                         end)))
                        end)
                       end)
                      end) in
     void);
    (raise Return);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let g_safety =
 fun (p_1 : T pointer) ->
  { (C_165:
    ((C_166: le_int(offset_min(T_alloc_table, p_1), (0)))
    and (C_167: ge_int(offset_max(T_alloc_table, p_1), (0))))) }
  (init:
  try
   begin
     (let copy = ref (any_pointer void) in
     (let copy2 = ref (any_pointer void) in
     (let __cil_tmp6 = ref (any_pointer void) in
     (let __cil_tmp7 = ref (any_pointer void) in
     (C_99:
     begin
       (let jessie_86 = (let jessie_85 = (C_98:
                                         ((((((alloc_one_T void) T_alloc_table) S_alloc_table) T_alloc_table) T_a) T_b)) in
                        (assert
                        { ge_int(offset_max(T_alloc_table, jessie_85), (0)) };
                        (copy := (C_98:
                                 ((((((alloc_one_T void) T_alloc_table) S_alloc_table) T_alloc_table) T_a) T_b))))) in
       void);
      (C_101:
      begin
        (let jessie_88 = (let jessie_87 = (C_100:
                                          ((((((alloc_one_T void) T_alloc_table) S_alloc_table) T_alloc_table) T_a) T_b)) in
                         (assert
                         { ge_int(offset_max(T_alloc_table, jessie_87), (0)) };
                         (copy2 := (C_100:
                                   ((((((alloc_one_T void) T_alloc_table) S_alloc_table) T_alloc_table) T_a) T_b))))) in
        void);
       (C_103:
       begin
         (let jessie_92 = (__cil_tmp6 := (let jessie_89 = p_1 in
                                         (assert
                                         { (le_int(offset_min(T_alloc_table,
                                                   jessie_89),
                                            (0))
                                           and ge_int(offset_max(T_alloc_table,
                                                      jessie_89),
                                               (0))) };
                                         (C_102: (id jessie_89))))) in
         void);
        (let jessie_104 = (C_108:
                          begin
                            (let jessie_95 = (let jessie_93 = ((safe_acc_ !T_a) !copy) in
                                             (let jessie_94 = ((safe_acc_ !S_i) 
                                                               ((safe_acc_ !T_a) !__cil_tmp6)) in
                                             (((safe_upd_ S_i) ((safe_acc_ !T_a) !copy)) jessie_94))) in
                            void);
                           (C_113:
                           begin
                             (let jessie_98 = (let jessie_96 = ((safe_acc_ !T_a) !copy) in
                                              (let jessie_97 = ((safe_acc_ !S_j) 
                                                                ((safe_acc_ !T_a) !__cil_tmp6)) in
                                              (((safe_upd_ S_j) ((safe_acc_ !T_a) !copy)) jessie_97))) in
                             void);
                            (C_118:
                            begin
                              (let jessie_101 = (let jessie_99 = ((safe_acc_ !T_b) !copy) in
                                                (let jessie_100 = ((safe_acc_ !S_i) 
                                                                   ((safe_acc_ !T_b) !__cil_tmp6)) in
                                                (((safe_upd_ S_i) ((safe_acc_ !T_b) !copy)) jessie_100))) in
                              void);
                             (C_123:
                             (let jessie_102 = ((safe_acc_ !T_b) !copy) in
                             (let jessie_103 = ((safe_acc_ !S_j) ((safe_acc_ !T_b) !__cil_tmp6)) in
                             begin
                               (((safe_upd_ S_j) ((safe_acc_ !T_b) !copy)) jessie_103);
                              ((safe_acc_ !S_j) jessie_102)
                             end)))
                            end)
                           end)
                          end) in
        void);
        (C_124: ((free_parameter T_alloc_table) !__cil_tmp6))
       end);
       (C_126:
       begin
         (let jessie_108 = (__cil_tmp7 := (C_125: (idp p_1))) in void);
        (let jessie_120 = (C_131:
                          begin
                            (let jessie_111 = (let jessie_109 = ((safe_acc_ !T_a) !copy2) in
                                              (let jessie_110 = ((safe_acc_ !S_i) 
                                                                 ((safe_acc_ !T_a) !__cil_tmp7)) in
                                              (((safe_upd_ S_i) ((safe_acc_ !T_a) !copy2)) jessie_110))) in
                            void);
                           (C_136:
                           begin
                             (let jessie_114 = (let jessie_112 = ((safe_acc_ !T_a) !copy2) in
                                               (let jessie_113 = ((safe_acc_ !S_j) 
                                                                  ((safe_acc_ !T_a) !__cil_tmp7)) in
                                               (((safe_upd_ S_j) ((safe_acc_ !T_a) !copy2)) jessie_113))) in
                             void);
                            (C_141:
                            begin
                              (let jessie_117 = (let jessie_115 = ((safe_acc_ !T_b) !copy2) in
                                                (let jessie_116 = ((safe_acc_ !S_i) 
                                                                   ((safe_acc_ !T_b) !__cil_tmp7)) in
                                                (((safe_upd_ S_i) ((safe_acc_ !T_b) !copy2)) jessie_116))) in
                              void);
                             (C_146:
                             (let jessie_118 = ((safe_acc_ !T_b) !copy2) in
                             (let jessie_119 = ((safe_acc_ !S_j) ((safe_acc_ !T_b) !__cil_tmp7)) in
                             begin
                               (((safe_upd_ S_j) ((safe_acc_ !T_b) !copy2)) jessie_119);
                              ((safe_acc_ !S_j) jessie_118)
                             end)))
                            end)
                           end)
                          end) in
        void);
        (C_147: ((free_parameter T_alloc_table) !__cil_tmp7))
       end);
       (C_150:
       begin
         (let jessie_123 = (let jessie_121 = ((safe_acc_ !T_a) !copy2) in
                           (let jessie_122 = (safe_int32_of_integer_ (0)) in
                           (((safe_upd_ S_i) ((safe_acc_ !T_a) !copy2)) jessie_122))) in
         void);
        (assert
        { (C_151:
          eq_int(integer_of_int32(select(S_i, select(T_a, p_1))),
          integer_of_int32(select(S_i, select(T_a, copy))))) };
        void);
        void;
        (C_154:
        begin
          (let jessie_126 = (let jessie_124 = ((safe_acc_ !T_a) !copy) in
                            (let jessie_125 = (safe_int32_of_integer_ (1)) in
                            (((safe_upd_ S_j) ((safe_acc_ !T_a) !copy)) jessie_125))) in
          void);
         (assert
         { (C_155:
           eq_int(integer_of_int32(select(S_j, select(T_a, p_1))),
           integer_of_int32(select(S_j, select(T_a, copy2))))) };
         void);
         void;
         (C_158:
         begin
           (let jessie_129 = (let jessie_127 = (C_156:
                                               (((acc_ !T_alloc_table) !T_b) p_1)) in
                             (let jessie_128 = (safe_int32_of_integer_ (0)) in
                             (((safe_upd_ S_i) (C_156:
                                               (((acc_ !T_alloc_table) !T_b) p_1))) jessie_128))) in
           void);
          (assert
          { (C_159:
            eq_int(integer_of_int32(select(S_i, select(T_b, copy))),
            integer_of_int32(select(S_i, select(T_b, copy2))))) };
          void);
          void;
          (assert
          { (C_160:
            ((C_161:
             eq_int(integer_of_int32(select(S_j, select(T_b, p_1))),
             integer_of_int32(select(S_j, select(T_b, copy)))))
            and (C_162:
                eq_int(integer_of_int32(select(S_j, select(T_b, copy))),
                integer_of_int32(select(S_j, select(T_b, copy2))))))) };
          void);
          void;
          (C_163:
          begin
            ((free_parameter T_alloc_table) !copy);
           (C_164:
           begin
             ((free_parameter T_alloc_table) !copy2); (raise Return)
           end)
          end)
         end)
        end)
       end)
      end)
     end)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let id_ensures_default_1 =
 fun (v_p : T pointer) ->
  { valid_struct_T(v_p, (0), (0), S_alloc_table, T_alloc_table, T_a, T_b) }
  (init:
  (let jessie_returned_value = ref (any_pointer void) in
  try
   begin
     (let p_2 = ref (any_pointer void) in
     (C_36:
     begin
       (let jessie_41 = (let jessie_40 = (C_35:
                                         ((((((alloc_one_T void) T_alloc_table) S_alloc_table) T_alloc_table) T_a) T_b)) in
                        (p_2 := (C_35:
                                ((((((alloc_one_T void) T_alloc_table) S_alloc_table) T_alloc_table) T_a) T_b)))) in
       void);
      (let jessie_53 = (C_41:
                       begin
                         (let jessie_44 = (let jessie_42 = ((safe_acc_ !T_a) !p_2) in
                                          (let jessie_43 = ((safe_acc_ !S_i) 
                                                            ((safe_acc_ !T_a) v_p)) in
                                          (((safe_upd_ S_i) ((safe_acc_ !T_a) !p_2)) jessie_43))) in
                         void);
                        (C_46:
                        begin
                          (let jessie_47 = (let jessie_45 = ((safe_acc_ !T_a) !p_2) in
                                           (let jessie_46 = ((safe_acc_ !S_j) 
                                                             ((safe_acc_ !T_a) v_p)) in
                                           (((safe_upd_ S_j) ((safe_acc_ !T_a) !p_2)) jessie_46))) in
                          void);
                         (C_51:
                         begin
                           (let jessie_50 = (let jessie_48 = ((safe_acc_ !T_b) !p_2) in
                                            (let jessie_49 = ((safe_acc_ !S_i) 
                                                              ((safe_acc_ !T_b) v_p)) in
                                            (((safe_upd_ S_i) ((safe_acc_ !T_b) !p_2)) jessie_49))) in
                           void);
                          (C_56:
                          (let jessie_51 = ((safe_acc_ !T_b) !p_2) in
                          (let jessie_52 = ((safe_acc_ !S_j) ((safe_acc_ !T_b) v_p)) in
                          begin
                            (((safe_upd_ S_j) ((safe_acc_ !T_b) !p_2)) jessie_52);
                           ((safe_acc_ !S_j) jessie_51)
                          end)))
                         end)
                        end)
                       end) in
      void);
      (C_57:
      begin
        ((free_parameter T_alloc_table) !p_2);
       (jessie_returned_value := !p_2);
       (raise Return)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (C_58:
     ((C_60:
      eq_int(integer_of_int32(select(S_i, select(T_a, result))),
      integer_of_int32(select(S_i, select(T_a, v_p)))))
     and ((C_61:
          eq_int(integer_of_int32(select(S_j, select(T_a, result))),
          integer_of_int32(select(S_j, select(T_a, v_p)))))
         and ((C_63:
              eq_int(integer_of_int32(select(S_i, select(T_b, result))),
              integer_of_int32(select(S_i, select(T_b, v_p)))))
             and (C_64:
                 eq_int(integer_of_int32(select(S_j, select(T_b, result))),
                 integer_of_int32(select(S_j, select(T_b, v_p)))))))))) }

let id_safety =
 fun (v_p : T pointer) ->
  { valid_struct_T(v_p, (0), (0), S_alloc_table, T_alloc_table, T_a, T_b) }
  (init:
  (let jessie_returned_value = ref (any_pointer void) in
  try
   begin
     (let p_2 = ref (any_pointer void) in
     (C_36:
     begin
       (let jessie_26 = (let jessie_25 = (C_35:
                                         ((((((alloc_one_T void) T_alloc_table) S_alloc_table) T_alloc_table) T_a) T_b)) in
                        (assert
                        { ge_int(offset_max(T_alloc_table, jessie_25), (0)) };
                        (p_2 := (C_35:
                                ((((((alloc_one_T void) T_alloc_table) S_alloc_table) T_alloc_table) T_a) T_b))))) in
       void);
      (let jessie_38 = (C_41:
                       begin
                         (let jessie_29 = (let jessie_27 = ((safe_acc_ !T_a) !p_2) in
                                          (let jessie_28 = ((safe_acc_ !S_i) 
                                                            ((safe_acc_ !T_a) v_p)) in
                                          (((safe_upd_ S_i) ((safe_acc_ !T_a) !p_2)) jessie_28))) in
                         void);
                        (C_46:
                        begin
                          (let jessie_32 = (let jessie_30 = ((safe_acc_ !T_a) !p_2) in
                                           (let jessie_31 = ((safe_acc_ !S_j) 
                                                             ((safe_acc_ !T_a) v_p)) in
                                           (((safe_upd_ S_j) ((safe_acc_ !T_a) !p_2)) jessie_31))) in
                          void);
                         (C_51:
                         begin
                           (let jessie_35 = (let jessie_33 = ((safe_acc_ !T_b) !p_2) in
                                            (let jessie_34 = ((safe_acc_ !S_i) 
                                                              ((safe_acc_ !T_b) v_p)) in
                                            (((safe_upd_ S_i) ((safe_acc_ !T_b) !p_2)) jessie_34))) in
                           void);
                          (C_56:
                          (let jessie_36 = ((safe_acc_ !T_b) !p_2) in
                          (let jessie_37 = ((safe_acc_ !S_j) ((safe_acc_ !T_b) v_p)) in
                          begin
                            (((safe_upd_ S_j) ((safe_acc_ !T_b) !p_2)) jessie_37);
                           ((safe_acc_ !S_j) jessie_36)
                          end)))
                         end)
                        end)
                       end) in
      void);
      (C_57:
      begin
        ((free_parameter T_alloc_table) !p_2);
       (jessie_returned_value := !p_2);
       (raise Return)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let idp_ensures_default_2 =
 fun (p_0 : T pointer) ->
  { (C_88:
    ((C_89: le_int(offset_min(T_alloc_table, p_0), (0)))
    and (C_90: ge_int(offset_max(T_alloc_table, p_0), (0))))) }
  (init:
  (let jessie_returned_value = ref (any_pointer void) in
  try
   begin
     (let __retres = ref (any_pointer void) in
     (C_66:
     begin
       (let jessie_71 = (let jessie_70 = (C_65:
                                         ((((((alloc_one_T void) T_alloc_table) S_alloc_table) T_alloc_table) T_a) T_b)) in
                        (__retres := (C_65:
                                     ((((((alloc_one_T void) T_alloc_table) S_alloc_table) T_alloc_table) T_a) T_b)))) in
       void);
      (let jessie_83 = (C_71:
                       begin
                         (let jessie_74 = (let jessie_72 = ((safe_acc_ !T_a) !__retres) in
                                          (let jessie_73 = ((safe_acc_ !S_i) 
                                                            ((safe_acc_ !T_a) p_0)) in
                                          (((safe_upd_ S_i) ((safe_acc_ !T_a) !__retres)) jessie_73))) in
                         void);
                        (C_76:
                        begin
                          (let jessie_77 = (let jessie_75 = ((safe_acc_ !T_a) !__retres) in
                                           (let jessie_76 = ((safe_acc_ !S_j) 
                                                             ((safe_acc_ !T_a) p_0)) in
                                           (((safe_upd_ S_j) ((safe_acc_ !T_a) !__retres)) jessie_76))) in
                          void);
                         (C_81:
                         begin
                           (let jessie_80 = (let jessie_78 = ((safe_acc_ !T_b) !__retres) in
                                            (let jessie_79 = ((safe_acc_ !S_i) 
                                                              ((safe_acc_ !T_b) p_0)) in
                                            (((safe_upd_ S_i) ((safe_acc_ !T_b) !__retres)) jessie_79))) in
                           void);
                          (C_86:
                          (let jessie_81 = ((safe_acc_ !T_b) !__retres) in
                          (let jessie_82 = ((safe_acc_ !S_j) ((safe_acc_ !T_b) p_0)) in
                          begin
                            (((safe_upd_ S_j) ((safe_acc_ !T_b) !__retres)) jessie_82);
                           ((safe_acc_ !S_j) jessie_81)
                          end)))
                         end)
                        end)
                       end) in
      void);
      (C_87:
      begin
        ((free_parameter T_alloc_table) !__retres);
       (jessie_returned_value := !__retres);
       (raise Return)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (C_91:
     ((C_93:
      eq_int(integer_of_int32(select(S_i, select(T_a, result))),
      integer_of_int32(select(S_i, select(T_a, p_0)))))
     and ((C_94:
          eq_int(integer_of_int32(select(S_j, select(T_a, result))),
          integer_of_int32(select(S_j, select(T_a, p_0)))))
         and ((C_96:
              eq_int(integer_of_int32(select(S_i, select(T_b, result))),
              integer_of_int32(select(S_i, select(T_b, p_0)))))
             and (C_97:
                 eq_int(integer_of_int32(select(S_j, select(T_b, result))),
                 integer_of_int32(select(S_j, select(T_b, p_0)))))))))) }

let idp_safety =
 fun (p_0 : T pointer) ->
  { (C_88:
    ((C_89: le_int(offset_min(T_alloc_table, p_0), (0)))
    and (C_90: ge_int(offset_max(T_alloc_table, p_0), (0))))) }
  (init:
  (let jessie_returned_value = ref (any_pointer void) in
  try
   begin
     (let __retres = ref (any_pointer void) in
     (C_66:
     begin
       (let jessie_56 = (let jessie_55 = (C_65:
                                         ((((((alloc_one_T void) T_alloc_table) S_alloc_table) T_alloc_table) T_a) T_b)) in
                        (assert
                        { ge_int(offset_max(T_alloc_table, jessie_55), (0)) };
                        (__retres := (C_65:
                                     ((((((alloc_one_T void) T_alloc_table) S_alloc_table) T_alloc_table) T_a) T_b))))) in
       void);
      (let jessie_68 = (C_71:
                       begin
                         (let jessie_59 = (let jessie_57 = ((safe_acc_ !T_a) !__retres) in
                                          (let jessie_58 = ((safe_acc_ !S_i) 
                                                            (C_67:
                                                            (((acc_ !T_alloc_table) !T_a) p_0))) in
                                          (((safe_upd_ S_i) ((safe_acc_ !T_a) !__retres)) jessie_58))) in
                         void);
                        (C_76:
                        begin
                          (let jessie_62 = (let jessie_60 = ((safe_acc_ !T_a) !__retres) in
                                           (let jessie_61 = ((safe_acc_ !S_j) 
                                                             (C_72:
                                                             (((acc_ !T_alloc_table) !T_a) p_0))) in
                                           (((safe_upd_ S_j) ((safe_acc_ !T_a) !__retres)) jessie_61))) in
                          void);
                         (C_81:
                         begin
                           (let jessie_65 = (let jessie_63 = ((safe_acc_ !T_b) !__retres) in
                                            (let jessie_64 = ((safe_acc_ !S_i) 
                                                              (C_77:
                                                              (((acc_ !T_alloc_table) !T_b) p_0))) in
                                            (((safe_upd_ S_i) ((safe_acc_ !T_b) !__retres)) jessie_64))) in
                           void);
                          (C_86:
                          (let jessie_66 = ((safe_acc_ !T_b) !__retres) in
                          (let jessie_67 = ((safe_acc_ !S_j) (C_82:
                                                             (((acc_ !T_alloc_table) !T_b) p_0))) in
                          begin
                            (((safe_upd_ S_j) ((safe_acc_ !T_b) !__retres)) jessie_67);
                           ((safe_acc_ !S_j) jessie_66)
                          end)))
                         end)
                        end)
                       end) in
      void);
      (C_87:
      begin
        ((free_parameter T_alloc_table) !__retres);
       (jessie_returned_value := !__retres);
       (raise Return)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }


