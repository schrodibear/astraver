rm -f binary_search.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only binary_search.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs binary_search.cloc binary_search.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
(\forall int32 x,
   (\forall int32 y,
      ((x <= y) ==> ((x <= ((x + y) / 2)) && (((x + y) / 2) <= y)))))

Normalized expression:
{
(let int32 l in
   {
   (let int32 u in
      {
      (let int32 p in
         {
         (let int32 m in
            {
            {
              (C_1:
                 {
                 (l = 0);
                   (C_4:
                      {
                      (u = (C_3: (TODO cast)));
                        (C_5:
                           {
                           (p = (unary - 1));
                             (try {
                                (try loop
                                       invariant (C_6:
                                                    (((((C_10: (0 <= l)) &&
                                                          (C_11:
                                                             (u <= (n - 1)))) &&
                                                         ((C_13:
                                                             ((unary - 1) <=
                                                                p)) &&
                                                            (C_14:
                                                               (p <= (n - 1))))) &&
                                                        (C_15:
                                                           ((p == (unary - 1)) ==>
                                                              (\forall int32 k,
                                                                 (((0 <= k) &&
                                                                    (k > n)) ==>
                                                                    (
                                                                    ((t + k).int_M ==
                                                                    v) ==>
                                                                    ((l <= k) &&
                                                                    (k <= u)))))))) &&
                                                       (C_16:
                                                          ((p >= 0) ==>
                                                             ((t + p).int_M ==
                                                                v)))));
                                       variant (C_17: (u - l));
                                       (try {
                                          {
                                            {
                                              (TODO if);
                                                (C_22:
                                                   {
                                                   (m = (C_21: (TODO cast)));
                                                     {
                                                     (assert (C_23:
                                                                ((C_24:
                                                                    (
                                                                    l <= m)) &&
                                                                   (C_25:
                                                                    (m <= u)))));
                                                       ()
                                                     };
                                                     (TODO if)
                                                   })
                                              }
                                            };
                                            (throw Loop_continue ())
                                          } with
                                          | Loop_continue jessie_3 -> ()
                                          | default -> ()) done with
                                   | Loop_exit jessie_2 -> ()
                                   | default -> ())
                                } with
                                | Goto_while_0_break jessie_1 -> {
                                (while_0_break: { () })
                                }
                                | default -> ());
                             (return p)
                           })
                      })
                 })
              }
            })
         })
      })
   })
}

Normalized expression:
(C_37:
   (((C_39: (n >= 0)) &&
       ((C_41: ((\offset_min(t)) <= 0)) &&
          (C_42: ((\offset_max(t)) >= (n - 1))))) &&
      (C_43:
         (\forall int32 k1,
            (\forall int32 k2,
               (((0 <= k1) && ((k1 <= k2) && (k2 <= (n - 1)))) ==>
                  ((t + k1).int_M <= (t + k2).int_M)))))))

Normalized expression:
(C_44:
   (((\result >= 0) && ((t + \result).int_M == v)) ||
      ((\result == (unary - 1)) &&
         (\forall int32 k, (((0 <= k) && (k > n)) ==> ((t + k).int_M != v))))))

Normalized expression:
true

Generating Why function binary_search
cat why/binary_search.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type uint16

type uint32

type uint64

type uint8

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

goal mean_1 :
 (forall x:int32.
  (forall y:int32.
   (le_int(integer_of_int32(x), integer_of_int32(y)) ->
    (le_int(integer_of_int32(x),
     div_int(add_int(integer_of_int32(x), integer_of_int32(y)), (2)))
    and le_int(div_int(add_int(integer_of_int32(x), integer_of_int32(y)),
               (2)),
        integer_of_int32(y))))))

axiom mean_1_as_axiom :
 (forall x:int32.
  (forall y:int32.
   (le_int(integer_of_int32(x), integer_of_int32(y)) ->
    (le_int(integer_of_int32(x),
     div_int(add_int(integer_of_int32(x), integer_of_int32(y)), (2)))
    and le_int(div_int(add_int(integer_of_int32(x), integer_of_int32(y)),
               (2)),
        integer_of_int32(y))))))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter int_P_int_M : (int_P, int32) memory ref

parameter binary_search :
 t:int_P pointer ->
  n_0:int32 ->
   v:int32 ->
    { (C_37:
      ((C_39: ge_int(integer_of_int32(n_0), (0)))
      and ((C_41: le_int(offset_min(int_P_alloc_table, t), (0)))
          and ((C_42:
               ge_int(offset_max(int_P_alloc_table, t),
               sub_int(integer_of_int32(n_0), (1))))
              and (C_43:
                  (forall k1:int32.
                   (forall k2:int32.
                    ((le_int((0), integer_of_int32(k1))
                     and (le_int(integer_of_int32(k1), integer_of_int32(k2))
                         and le_int(integer_of_int32(k2),
                             sub_int(integer_of_int32(n_0), (1))))) ->
                     le_int(integer_of_int32(select(int_P_int_M,
                                             shift(t, integer_of_int32(k1)))),
                     integer_of_int32(select(int_P_int_M,
                                      shift(t, integer_of_int32(k2)))))))))))))}
    int32 reads int_P_alloc_table,int_P_int_M,int_P_tag_table
    { ((true = true) ->
       (C_44:
       ((ge_int(integer_of_int32(result), (0))
        and eq_int(integer_of_int32(select(int_P_int_M,
                                    shift(t, integer_of_int32(result)))),
            integer_of_int32(v)))
       or (eq_int(integer_of_int32(result), neg_int((1)))
          and (forall k_0:int32.
               ((le_int((0), integer_of_int32(k_0))
                and lt_int(integer_of_int32(k_0), integer_of_int32(n_0))) ->
                neq_int(integer_of_int32(select(int_P_int_M,
                                         shift(t, integer_of_int32(k_0)))),
                integer_of_int32(v)))))))) }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let binary_search_ensures_default =
 fun (t : int_P pointer) (n_0 : int32) (v : int32) ->
  { (C_37:
    ((C_39: ge_int(integer_of_int32(n_0), (0)))
    and ((C_41: le_int(offset_min(int_P_alloc_table, t), (0)))
        and ((C_42:
             ge_int(offset_max(int_P_alloc_table, t),
             sub_int(integer_of_int32(n_0), (1))))
            and (C_43:
                (forall k1:int32.
                 (forall k2:int32.
                  ((le_int((0), integer_of_int32(k1))
                   and (le_int(integer_of_int32(k1), integer_of_int32(k2))
                       and le_int(integer_of_int32(k2),
                           sub_int(integer_of_int32(n_0), (1))))) ->
                   le_int(integer_of_int32(select(int_P_int_M,
                                           shift(t, integer_of_int32(k1)))),
                   integer_of_int32(select(int_P_int_M,
                                    shift(t, integer_of_int32(k2))))))))))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let l = ref (any_int32 void) in
     (let u = ref (any_int32 void) in
     (let p = ref (any_int32 void) in
     (let m = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_14 = (l := (safe_int32_of_integer_ (0))) in void);
      (C_4:
      begin
        (let jessie_15 = (u := (safe_int32_of_integer_ (C_2:
                                                       ((sub_int (integer_of_int32 n_0)) (1))))) in
        void);
       (C_5:
       begin
         (let jessie_16 = (p := (safe_int32_of_integer_ (neg_int (1)))) in
         void);
        try
         while true do
         { invariant
             (C_6:
             ((C_10: le_int((0), integer_of_int32(l)))
             and ((C_11:
                  le_int(integer_of_int32(u),
                  sub_int(integer_of_int32(n_0), (1))))
                 and ((C_13: le_int(neg_int((1)), integer_of_int32(p)))
                     and ((C_14:
                          le_int(integer_of_int32(p),
                          sub_int(integer_of_int32(n_0), (1))))
                         and ((C_15:
                              (eq_int(integer_of_int32(p), neg_int((1))) ->
                               (forall k_1:int32.
                                ((le_int((0), integer_of_int32(k_1))
                                 and lt_int(integer_of_int32(k_1),
                                     integer_of_int32(n_0))) ->
                                 (eq_int(integer_of_int32(select(int_P_int_M,
                                                          shift(t,
                                                          integer_of_int32(k_1)))),
                                  integer_of_int32(v)) ->
                                  (le_int(integer_of_int32(l),
                                   integer_of_int32(k_1))
                                  and le_int(integer_of_int32(k_1),
                                      integer_of_int32(u))))))))
                             and (C_16:
                                 (ge_int(integer_of_int32(p), (0)) ->
                                  eq_int(integer_of_int32(select(int_P_int_M,
                                                          shift(t,
                                                          integer_of_int32(p)))),
                                  integer_of_int32(v))))))))))
            }
          try
           (let jessie_23 = begin
                              (if ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u))
                              then void
                              else
                               (let jessie_17 = (raise
                                                 (Goto_while_0_break_exc
                                                 void)) in
                               void));
                             (C_22:
                             begin
                               (let jessie_18 = (m := (safe_int32_of_integer_ 
                                                       (C_20:
                                                       ((div_int_ (integer_of_int32 
                                                                   (safe_int32_of_integer_ 
                                                                    (C_18:
                                                                    ((add_int 
                                                                    (integer_of_int32 !l)) 
                                                                    (integer_of_int32 !u)))))) (2))))) in
                               void);
                              (assert
                              { (C_23:
                                ((C_24:
                                 le_int(integer_of_int32(l),
                                 integer_of_int32(m)))
                                and (C_25:
                                    le_int(integer_of_int32(m),
                                    integer_of_int32(u))))) };
                              void);
                              void;
                              (if ((lt_int_ (integer_of_int32 ((safe_acc_ !int_P_int_M) 
                                                               (C_35:
                                                               ((shift t) 
                                                                (integer_of_int32 !m)))))) 
                                   (integer_of_int32 v))
                              then
                               (C_34:
                               (let jessie_19 = (l := (safe_int32_of_integer_ 
                                                       (C_32:
                                                       ((add_int (integer_of_int32 !m)) (1))))) in
                               void))
                              else
                               (if ((gt_int_ (integer_of_int32 ((safe_acc_ !int_P_int_M) 
                                                                (C_30:
                                                                ((shift t) 
                                                                 (integer_of_int32 !m)))))) 
                                    (integer_of_int32 v))
                               then
                                (C_29:
                                (let jessie_20 = (u := (safe_int32_of_integer_ 
                                                        (C_27:
                                                        ((sub_int (integer_of_int32 !m)) (1))))) in
                                void))
                               else
                                (let jessie_22 = (C_26:
                                                 begin
                                                   (let jessie_21 = (p := !m) in
                                                   void);
                                                  (raise
                                                   (Goto_while_0_break_exc
                                                   void))
                                                 end) in
                                void)))
                             end);
                             (raise (Loop_continue_exc void))
                            end in
           void)
           with
           Loop_continue_exc jessie_3 ->
           void end
         done
         with
         Goto_while_0_break_exc jessie_1 ->
         (while_0_break: void) end;
        (jessie_returned_value := !p);
        (raise Return)
       end)
      end)
     end)))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (C_44:
     ((ge_int(integer_of_int32(result), (0))
      and eq_int(integer_of_int32(select(int_P_int_M,
                                  shift(t, integer_of_int32(result)))),
          integer_of_int32(v)))
     or (eq_int(integer_of_int32(result), neg_int((1)))
        and (forall k_0:int32.
             ((le_int((0), integer_of_int32(k_0))
              and lt_int(integer_of_int32(k_0), integer_of_int32(n_0))) ->
              neq_int(integer_of_int32(select(int_P_int_M,
                                       shift(t, integer_of_int32(k_0)))),
              integer_of_int32(v)))))))) }

let binary_search_safety =
 fun (t : int_P pointer) (n_0 : int32) (v : int32) ->
  { (C_37:
    ((C_39: ge_int(integer_of_int32(n_0), (0)))
    and ((C_41: le_int(offset_min(int_P_alloc_table, t), (0)))
        and ((C_42:
             ge_int(offset_max(int_P_alloc_table, t),
             sub_int(integer_of_int32(n_0), (1))))
            and (C_43:
                (forall k1:int32.
                 (forall k2:int32.
                  ((le_int((0), integer_of_int32(k1))
                   and (le_int(integer_of_int32(k1), integer_of_int32(k2))
                       and le_int(integer_of_int32(k2),
                           sub_int(integer_of_int32(n_0), (1))))) ->
                   le_int(integer_of_int32(select(int_P_int_M,
                                           shift(t, integer_of_int32(k1)))),
                   integer_of_int32(select(int_P_int_M,
                                    shift(t, integer_of_int32(k2))))))))))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let l = ref (any_int32 void) in
     (let u = ref (any_int32 void) in
     (let p = ref (any_int32 void) in
     (let m = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_4 = (l := (safe_int32_of_integer_ (0))) in void);
      (C_4:
      begin
        (let jessie_5 = (u := (C_3:
                              (int32_of_integer_ (C_2:
                                                 ((sub_int (integer_of_int32 n_0)) (1)))))) in
        void);
       (C_5:
       begin
         (let jessie_6 = (p := (safe_int32_of_integer_ (neg_int (1)))) in
         void);
        try
         while true do
         { invariant
             (C_6:
             ((C_10: le_int((0), integer_of_int32(l)))
             and ((C_11:
                  le_int(integer_of_int32(u),
                  sub_int(integer_of_int32(n_0), (1))))
                 and ((C_13: le_int(neg_int((1)), integer_of_int32(p)))
                     and ((C_14:
                          le_int(integer_of_int32(p),
                          sub_int(integer_of_int32(n_0), (1))))
                         and ((C_15:
                              (eq_int(integer_of_int32(p), neg_int((1))) ->
                               (forall k_1:int32.
                                ((le_int((0), integer_of_int32(k_1))
                                 and lt_int(integer_of_int32(k_1),
                                     integer_of_int32(n_0))) ->
                                 (eq_int(integer_of_int32(select(int_P_int_M,
                                                          shift(t,
                                                          integer_of_int32(k_1)))),
                                  integer_of_int32(v)) ->
                                  (le_int(integer_of_int32(l),
                                   integer_of_int32(k_1))
                                  and le_int(integer_of_int32(k_1),
                                      integer_of_int32(u))))))))
                             and (C_16:
                                 (ge_int(integer_of_int32(p), (0)) ->
                                  eq_int(integer_of_int32(select(int_P_int_M,
                                                          shift(t,
                                                          integer_of_int32(p)))),
                                  integer_of_int32(v))))))))))
           variant (C_17 : sub_int(integer_of_int32(u), integer_of_int32(l))) }
          try
           (let jessie_13 = begin
                              (if ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u))
                              then void
                              else
                               (let jessie_7 = (raise
                                                (Goto_while_0_break_exc
                                                void)) in
                               void));
                             (C_22:
                             begin
                               (let jessie_8 = (m := (C_21:
                                                     (int32_of_integer_ 
                                                      (C_20:
                                                      ((div_int_ (integer_of_int32 
                                                                  (C_19:
                                                                  (int32_of_integer_ 
                                                                   (C_18:
                                                                   ((add_int 
                                                                    (integer_of_int32 !l)) 
                                                                    (integer_of_int32 !u))))))) (2)))))) in
                               void);
                              (assert
                              { (C_23:
                                ((C_24:
                                 le_int(integer_of_int32(l),
                                 integer_of_int32(m)))
                                and (C_25:
                                    le_int(integer_of_int32(m),
                                    integer_of_int32(u))))) };
                              void);
                              void;
                              (if ((lt_int_ (integer_of_int32 (C_36:
                                                              ((((offset_acc_ !int_P_alloc_table) !int_P_int_M) t) 
                                                               (integer_of_int32 !m))))) 
                                   (integer_of_int32 v))
                              then
                               (C_34:
                               (let jessie_9 = (l := (C_33:
                                                     (int32_of_integer_ 
                                                      (C_32:
                                                      ((add_int (integer_of_int32 !m)) (1)))))) in
                               void))
                              else
                               (if ((gt_int_ (integer_of_int32 (C_31:
                                                               ((((offset_acc_ !int_P_alloc_table) !int_P_int_M) t) 
                                                                (integer_of_int32 !m))))) 
                                    (integer_of_int32 v))
                               then
                                (C_29:
                                (let jessie_10 = (u := (C_28:
                                                       (int32_of_integer_ 
                                                        (C_27:
                                                        ((sub_int (integer_of_int32 !m)) (1)))))) in
                                void))
                               else
                                (let jessie_12 = (C_26:
                                                 begin
                                                   (let jessie_11 = (p := !m) in
                                                   void);
                                                  (raise
                                                   (Goto_while_0_break_exc
                                                   void))
                                                 end) in
                                void)))
                             end);
                             (raise (Loop_continue_exc void))
                            end in
           void)
           with
           Loop_continue_exc jessie_3 ->
           void end
         done
         with
         Goto_while_0_break_exc jessie_1 ->
         (while_0_break: void) end;
        (jessie_returned_value := !p);
        (raise Return)
       end)
      end)
     end)))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }


