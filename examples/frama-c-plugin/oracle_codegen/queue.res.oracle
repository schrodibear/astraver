rm -f queue.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only queue.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs queue.cloc queue.jc
Normalized expression:
(((\offset_min(q)) <= 0) && ((\offset_max(q)) >= 0))

Normalized expression:
(((\offset_min(t)) <= 0) && ((\offset_max(t)) >= 4))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
(((((\offset_min(q.contents)) <= 0) &&
     ((\offset_max(q.contents)) >= (q.length - 1))) &&
    ((0 <= q.first) && (q.first > q.length))) &&
   ((0 <= q.last) && (q.last > q.length)))

Normalized expression:
{
(let int32 tmp in
   {
   {
     (C_2:
        {
        (tmp = (C_1: q.last));
          (C_7:
             {
             ((C_6: q.last) = (C_5: (TODO cast)));
               (C_11:
                  {
                  ((C_10: (C_9: ((C_8: q.contents) + tmp)).char_M) = c);
                    (TODO if);
                    (C_17:
                       {
                       ((C_16: q.empty) = 0);
                         (C_22:
                            {
                            ((C_21: q.full) = (C_20: (TODO cast))); (return)
                            })
                       })
                  })
             })
        })
     }
   })
}

Normalized expression:
(C_23: (q.full == 0))

Normalized expression:
(C_24: ((C_25: (q.empty == 0)) && (C_26: ((TODO cast) == (TODO cast)))))

Normalized expression:
q.empty

Normalized expression:
q.full

Normalized expression:
q.last

Normalized expression:
(q.contents + q.last).char_M

Normalized expression:
true

Normalized expression:
{
(let int8 r in
   {
   (let int32 tmp in
      {
      {
        (C_28:
           {
           (tmp = (C_27: q.first));
             (C_33:
                {
                ((C_32: q.first) = (C_31: (TODO cast)));
                  (C_37:
                     {
                     (r = (C_36: (C_35: ((C_34: q.contents) + tmp)).char_M));
                       (TODO if);
                       (C_43:
                          {
                          ((C_42: q.full) = 0);
                            (C_48:
                               {
                               ((C_47: q.empty) = (C_46: (TODO cast)));
                                 (return r)
                               })
                          })
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
(C_49: (q.empty == 0))

Normalized expression:
(C_50: ((C_51: (q.full == 0)) && (C_52: ((TODO cast) == (TODO cast)))))

Normalized expression:
q.empty

Normalized expression:
q.full

Normalized expression:
q.first

Normalized expression:
true

Normalized expression:
{
(let int8 c in
   {
   (let int32 __retres in
      {
      {
        (C_54:
           {
           (c = (C_53: pop{}()));
             (C_57: { (__retres = (C_56: (TODO cast))); (return __retres) })
           })
        }
      })
   })
}

Normalized expression:
(C_58:
   (((C_60: ((\offset_min(q1)) <= 0)) && (C_61: ((\offset_max(q1)) >= 0))) &&
      (C_62: (q.empty == 0))))

Normalized expression:
(C_63: ((TODO cast) == (TODO old)))

Normalized expression:
true

Generating Why function push
Generating Why function pop
Generating Why function test
cat why/queue.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type queue

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic t:  -> char_P pointer

logic q:  -> queue pointer

predicate q_invariant(q:queue pointer,
 char_P_alloc_table:char_P alloc_table,
 queue_last:(queue,
 int32) memory,
 queue_first:(queue,
 int32) memory,
 queue_length:(queue,
 int32) memory,
 queue_contents:(queue,
 char_P pointer) memory,
 q:queue pointer,
 t:char_P pointer) =
 (le_int(offset_min(char_P_alloc_table, select(queue_contents, q)), (0))
 and (ge_int(offset_max(char_P_alloc_table, select(queue_contents, q)),
      sub_int(integer_of_int32(select(queue_length, q)), (1)))
     and (le_int((0), integer_of_int32(select(queue_first, q)))
         and (lt_int(integer_of_int32(select(queue_first, q)),
              integer_of_int32(select(queue_length, q)))
             and (le_int((0), integer_of_int32(select(queue_last, q)))
                 and lt_int(integer_of_int32(select(queue_last, q)),
                     integer_of_int32(select(queue_length, q))))))))

axiom full_separated_q_invariant_contents :
 (forall tmp:queue pointer.
  (forall tmpval:char_P pointer.
   (forall t:char_P pointer.
    (forall q:queue pointer.
     (forall queue_contents:(queue,
      char_P pointer) memory.
      (forall queue_length:(queue,
       int32) memory.
       (forall queue_first:(queue,
        int32) memory.
        (forall queue_last:(queue,
         int32) memory.
         (forall char_P_alloc_table:char_P alloc_table.
          (forall q:queue pointer.
           ((full_separated(tmp, t) and full_separated(tmp, q)) ->
            (q_invariant(q, char_P_alloc_table, queue_last, queue_first,
             queue_length, queue_contents, q, t)
            <-> q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                queue_length, store(queue_contents, tmp, tmpval), q, t)))))))))))))

axiom full_separated_q_invariant_first :
 (forall tmp:queue pointer.
  (forall tmpval:int32.
   (forall t:char_P pointer.
    (forall q:queue pointer.
     (forall queue_contents:(queue,
      char_P pointer) memory.
      (forall queue_length:(queue,
       int32) memory.
       (forall queue_first:(queue,
        int32) memory.
        (forall queue_last:(queue,
         int32) memory.
         (forall char_P_alloc_table:char_P alloc_table.
          (forall q:queue pointer.
           ((full_separated(tmp, t) and full_separated(tmp, q)) ->
            (q_invariant(q, char_P_alloc_table, queue_last, queue_first,
             queue_length, queue_contents, q, t)
            <-> q_invariant(q, char_P_alloc_table, queue_last,
                store(queue_first, tmp, tmpval), queue_length,
                queue_contents, q, t)))))))))))))

axiom full_separated_q_invariant_last :
 (forall tmp:queue pointer.
  (forall tmpval:int32.
   (forall t:char_P pointer.
    (forall q:queue pointer.
     (forall queue_contents:(queue,
      char_P pointer) memory.
      (forall queue_length:(queue,
       int32) memory.
       (forall queue_first:(queue,
        int32) memory.
        (forall queue_last:(queue,
         int32) memory.
         (forall char_P_alloc_table:char_P alloc_table.
          (forall q:queue pointer.
           ((full_separated(tmp, t) and full_separated(tmp, q)) ->
            (q_invariant(q, char_P_alloc_table, queue_last, queue_first,
             queue_length, queue_contents, q, t)
            <-> q_invariant(q, char_P_alloc_table,
                store(queue_last, tmp, tmpval), queue_first, queue_length,
                queue_contents, q, t)))))))))))))

axiom full_separated_q_invariant_length :
 (forall tmp:queue pointer.
  (forall tmpval:int32.
   (forall t:char_P pointer.
    (forall q:queue pointer.
     (forall queue_contents:(queue,
      char_P pointer) memory.
      (forall queue_length:(queue,
       int32) memory.
       (forall queue_first:(queue,
        int32) memory.
        (forall queue_last:(queue,
         int32) memory.
         (forall char_P_alloc_table:char_P alloc_table.
          (forall q:queue pointer.
           ((full_separated(tmp, t) and full_separated(tmp, q)) ->
            (q_invariant(q, char_P_alloc_table, queue_last, queue_first,
             queue_length, queue_contents, q, t)
            <-> q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                store(queue_length, tmp, tmpval), queue_contents, q, t)))))))))))))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic queue_tag:  -> queue tag_id

axiom queue_int : (int_of_tag(queue_tag) = (1))

axiom queue_parenttag_bottom : parenttag(queue_tag, bottom_tag)

axiom queue_tags :
 (forall x:queue pointer.
  (forall queue_tag_table:queue tag_table.
   instanceof(queue_tag_table, x, queue_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_q(q:queue pointer,
 queue_alloc_table:queue alloc_table,
 q:queue pointer,
 t:char_P pointer) =
 (le_int(offset_min(queue_alloc_table, q), (0))
 and ge_int(offset_max(queue_alloc_table, q), (0)))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_queue(p:queue pointer,
 a:int,
 b:int,
 queue_alloc_table:queue alloc_table) =
 ((offset_min(queue_alloc_table, p) = a)
 and (offset_max(queue_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_t(t:char_P pointer,
 char_P_alloc_table:char_P alloc_table,
 q:queue pointer,
 t:char_P pointer) =
 (le_int(offset_min(char_P_alloc_table, t), (0))
 and ge_int(offset_max(char_P_alloc_table, t), (4)))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_queue(p:queue pointer,
 a:int,
 b:int,
 queue_alloc_table:queue alloc_table) =
 ((offset_min(queue_alloc_table, p) = a)
 and (offset_max(queue_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter queue_alloc_table : queue alloc_table ref

parameter queue_tag_table : queue tag_table ref

parameter alloc_one_queue :
 tt:unit ->
  queue_alloc_table:queue alloc_table ref ->
   queue_alloc_table:queue alloc_table ref ->
    { } queue pointer reads queue_alloc_table
    writes queue_alloc_table,queue_tag_table
    { (valid_struct_queue(result, (0), (0), queue_alloc_table)
      and (instanceof(queue_tag_table, result, queue_tag)
          and (alloc_extends(queue_alloc_table@, queue_alloc_table)
              and alloc_extern(queue_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_queue :
 n:int ->
  queue_alloc_table:queue alloc_table ref ->
   queue_alloc_table:queue alloc_table ref ->
    { ge_int(n, (0))} queue pointer reads queue_alloc_table
    writes queue_alloc_table,queue_tag_table
    { (valid_struct_queue(result, (0), sub_int(n, (1)), queue_alloc_table)
      and (instanceof(queue_tag_table, result, queue_tag)
          and (alloc_extends(queue_alloc_table@, queue_alloc_table)
              and alloc_extern(queue_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter queue_empty : (queue, uint32) memory ref

parameter queue_last : (queue, int32) memory ref

parameter queue_first : (queue, int32) memory ref

parameter queue_length : (queue, int32) memory ref

parameter queue_contents : (queue, char_P pointer) memory ref

parameter queue_full : (queue, uint32) memory ref

parameter pop :
 tt:unit ->
  { (JC_8:
    ((C_49: eq_int(integer_of_uint32(select(queue_empty, q)), (0)))
    and (valid_q(q, queue_alloc_table, q, t)
        and (valid_t(t, char_P_alloc_table, q, t)
            and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                queue_length, queue_contents, q, t)))))}
  int8
  reads char_P_alloc_table,char_P_char_M,queue_alloc_table,queue_contents,queue_empty,queue_first,queue_full,queue_last,queue_length
  writes queue_empty,queue_first,queue_full
  { ((JC_10:
     (valid_q(q, queue_alloc_table, q, t)
     and (valid_t(t, char_P_alloc_table, q, t)
         and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
             queue_length, queue_contents, q, t))))
    and ((true = true) ->
         (JC_13:
         ((JC_12:
          ((C_50:
           ((C_51: eq_int(integer_of_uint32(select(queue_full, q)), (0)))
           and (C_52:
               eq_int(integer_of_int32(int32_of_integer(integer_of_int8(result))),
               integer_of_int32(int32_of_integer(integer_of_int8(select(char_P_char_M,
                                                                 shift(
                                                                 select(queue_contents,
                                                                 q),
                                                                 integer_of_int32(
                                                                 select(queue_first@,
                                                                 q)))))))))))
          and (valid_q(q, queue_alloc_table, q, t)
              and (valid_t(t, char_P_alloc_table, q, t)
                  and q_invariant(q, char_P_alloc_table, queue_last,
                      queue_first, queue_length, queue_contents, q, t)))))
         and (JC_11:
             ((not_assigns(queue_alloc_table@, queue_first@, queue_first,
               pset_singleton(q))
              and not_assigns(queue_alloc_table@, queue_empty@, queue_empty,
                  pset_singleton(q)))
             and not_assigns(queue_alloc_table@, queue_full@, queue_full,
                 pset_singleton(q)))))))) }

parameter push :
 c:int8 ->
  { (JC_1:
    ((C_23: eq_int(integer_of_uint32(select(queue_full, q)), (0)))
    and (valid_q(q, queue_alloc_table, q, t)
        and (valid_t(t, char_P_alloc_table, q, t)
            and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                queue_length, queue_contents, q, t)))))}
  unit
  reads char_P_alloc_table,char_P_char_M,queue_alloc_table,queue_contents,queue_empty,queue_first,queue_full,queue_last,queue_length
  writes char_P_char_M,queue_empty,queue_full,queue_last
  { ((JC_3:
     (valid_q(q, queue_alloc_table, q, t)
     and (valid_t(t, char_P_alloc_table, q, t)
         and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
             queue_length, queue_contents, q, t))))
    and ((true = true) ->
         (JC_6:
         ((JC_5:
          ((C_24:
           ((C_25: eq_int(integer_of_uint32(select(queue_empty, q)), (0)))
           and (C_26:
               eq_int(integer_of_int32(int32_of_integer(integer_of_int8(
                                                        select(char_P_char_M,
                                                        shift(select(queue_contents,
                                                              q),
                                                        integer_of_int32(
                                                        select(queue_last@,
                                                        q))))))),
               integer_of_int32(int32_of_integer(integer_of_int8(c)))))))
          and (valid_q(q, queue_alloc_table, q, t)
              and (valid_t(t, char_P_alloc_table, q, t)
                  and q_invariant(q, char_P_alloc_table, queue_last,
                      queue_first, queue_length, queue_contents, q, t)))))
         and (JC_4:
             (((not_assigns(char_P_alloc_table@, char_P_char_M@,
                char_P_char_M,
                pset_range(pset_deref(queue_contents, pset_singleton(q)),
                integer_of_int32(select(queue_last, q)),
                integer_of_int32(select(queue_last, q))))
               and not_assigns(queue_alloc_table@, queue_last@, queue_last,
                   pset_singleton(q)))
              and not_assigns(queue_alloc_table@, queue_empty@, queue_empty,
                  pset_singleton(q)))
             and not_assigns(queue_alloc_table@, queue_full@, queue_full,
                 pset_singleton(q)))))))) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter test :
 q1:queue pointer ->
  { (JC_14:
    ((C_58:
     ((C_60: le_int(offset_min(queue_alloc_table, q1), (0)))
     and ((C_61: ge_int(offset_max(queue_alloc_table, q1), (0)))
         and (C_62: eq_int(integer_of_uint32(select(queue_empty, q)), (0))))))
    and (valid_q(q, queue_alloc_table, q, t)
        and (valid_t(t, char_P_alloc_table, q, t)
            and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                queue_length, queue_contents, q, t)))))}
  int32
  reads char_P_alloc_table,char_P_char_M,queue_alloc_table,queue_contents,queue_empty,queue_first,queue_full,queue_last,queue_length,queue_tag_table
  writes queue_empty,queue_first,queue_full
  { ((JC_16:
     (valid_q(q, queue_alloc_table, q, t)
     and (valid_t(t, char_P_alloc_table, q, t)
         and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
             queue_length, queue_contents, q, t))))
    and ((true = true) ->
         (JC_17:
         ((C_63:
          eq_int(integer_of_uint32(uint32_of_integer(integer_of_int32(result))),
          integer_of_uint32(select(queue_empty@, q1))))
         and (valid_q(q, queue_alloc_table, q, t)
             and (valid_t(t, char_P_alloc_table, q, t)
                 and q_invariant(q, char_P_alloc_table, queue_last,
                     queue_first, queue_length, queue_contents, q, t))))))) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let pop_ensures_default_1 =
 fun (tt : unit) ->
  { (JC_8:
    ((C_49: eq_int(integer_of_uint32(select(queue_empty, q)), (0)))
    and (valid_q(q, queue_alloc_table, q, t)
        and (valid_t(t, char_P_alloc_table, q, t)
            and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                queue_length, queue_contents, q, t))))) }
  (init:
  (let jessie_returned_value = ref (any_int8 void) in
  try
   begin
     (let r = ref (any_int8 void) in
     (let tmp_0 = ref (any_int32 void) in
     (C_28:
     begin
       (let jessie_47 = (tmp_0 := ((safe_acc_ !queue_first) q)) in void);
      (C_33:
      begin
        (let jessie_50 = (let jessie_48 = q in
                         (let jessie_49 = (safe_int32_of_integer_ (C_30:
                                                                  ((add_int 
                                                                    (integer_of_int32 
                                                                    ((safe_acc_ !queue_first) q))) (1)))) in
                         (((safe_upd_ queue_first) q) jessie_49))) in
        void);
       (C_37:
       begin
         (let jessie_51 = (r := ((safe_acc_ !char_P_char_M) (C_35:
                                                            ((shift ((safe_acc_ !queue_contents) q)) 
                                                             (integer_of_int32 !tmp_0))))) in
         void);
        (if ((eq_int_ (integer_of_int32 ((safe_acc_ !queue_first) q))) 
             (integer_of_int32 ((safe_acc_ !queue_length) q)))
        then
         (let jessie_54 = (let jessie_52 = q in
                          (let jessie_53 = (safe_int32_of_integer_ (0)) in
                          (((safe_upd_ queue_first) q) jessie_53))) in
         void)
        else void);
        (C_43:
        begin
          (let jessie_57 = (let jessie_55 = q in
                           (let jessie_56 = (safe_uint32_of_integer_ (0)) in
                           (((safe_upd_ queue_full) q) jessie_56))) in
          void);
         (C_48:
         begin
           (let jessie_60 = (let jessie_58 = q in
                            (let jessie_59 = (safe_uint32_of_integer_ 
                                              (if ((eq_int_ (integer_of_int32 
                                                             ((safe_acc_ !queue_first) q))) 
                                                   (integer_of_int32 
                                                    ((safe_acc_ !queue_last) q)))
                                              then (1)
                                              else (0))) in
                            (((safe_upd_ queue_empty) q) jessie_59))) in
           void);
          (jessie_returned_value := !r);
          (raise Return)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_13:
     ((JC_12:
      ((C_50:
       ((C_51: eq_int(integer_of_uint32(select(queue_full, q)), (0)))
       and (C_52:
           eq_int(integer_of_int32(int32_of_integer(integer_of_int8(result))),
           integer_of_int32(int32_of_integer(integer_of_int8(select(char_P_char_M,
                                                             shift(select(queue_contents,
                                                                   q),
                                                             integer_of_int32(
                                                             select(queue_first@,
                                                             q)))))))))))
      and (valid_q(q, queue_alloc_table, q, t)
          and (valid_t(t, char_P_alloc_table, q, t)
              and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                  queue_length, queue_contents, q, t)))))
     and (JC_11:
         ((not_assigns(queue_alloc_table@, queue_first@, queue_first,
           pset_singleton(q))
          and not_assigns(queue_alloc_table@, queue_empty@, queue_empty,
              pset_singleton(q)))
         and not_assigns(queue_alloc_table@, queue_full@, queue_full,
             pset_singleton(q))))))) }

let pop_safety =
 fun (tt : unit) ->
  { (JC_8:
    ((C_49: eq_int(integer_of_uint32(select(queue_empty, q)), (0)))
    and (valid_q(q, queue_alloc_table, q, t)
        and (valid_t(t, char_P_alloc_table, q, t)
            and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                queue_length, queue_contents, q, t))))) }
  (init:
  (let jessie_returned_value = ref (any_int8 void) in
  try
   begin
     (let r = ref (any_int8 void) in
     (let tmp_0 = ref (any_int32 void) in
     (C_28:
     begin
       (let jessie_33 = (tmp_0 := ((safe_acc_ !queue_first) q)) in void);
      (C_33:
      begin
        (let jessie_36 = (let jessie_34 = q in
                         (let jessie_35 = (C_31:
                                          (int32_of_integer_ (C_30:
                                                             ((add_int 
                                                               (integer_of_int32 
                                                                ((safe_acc_ !queue_first) q))) (1))))) in
                         (((safe_upd_ queue_first) q) jessie_35))) in
        void);
       (C_37:
       begin
         (let jessie_37 = (r := (C_36:
                                ((((offset_acc_ !char_P_alloc_table) !char_P_char_M) 
                                  ((safe_acc_ !queue_contents) q)) (integer_of_int32 !tmp_0)))) in
         void);
        (if ((eq_int_ (integer_of_int32 ((safe_acc_ !queue_first) q))) 
             (integer_of_int32 ((safe_acc_ !queue_length) q)))
        then
         (let jessie_40 = (let jessie_38 = q in
                          (let jessie_39 = (safe_int32_of_integer_ (0)) in
                          (((safe_upd_ queue_first) q) jessie_39))) in
         void)
        else void);
        (C_43:
        begin
          (let jessie_43 = (let jessie_41 = q in
                           (let jessie_42 = (safe_uint32_of_integer_ (0)) in
                           (((safe_upd_ queue_full) q) jessie_42))) in
          void);
         (C_48:
         begin
           (let jessie_46 = (let jessie_44 = q in
                            (let jessie_45 = (C_46:
                                             (uint32_of_integer_ (if 
                                                                 ((eq_int_ 
                                                                   (integer_of_int32 
                                                                    ((safe_acc_ !queue_first) q))) 
                                                                  (integer_of_int32 
                                                                   ((safe_acc_ !queue_last) q)))
                                                                 then (1)
                                                                 else (0)))) in
                            (((safe_upd_ queue_empty) q) jessie_45))) in
           void);
          (jessie_returned_value := !r);
          (raise Return)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_10:
    (valid_q(q, queue_alloc_table, q, t)
    and (valid_t(t, char_P_alloc_table, q, t)
        and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
            queue_length, queue_contents, q, t)))) }

let push_ensures_default =
 fun (c : int8) ->
  { (JC_1:
    ((C_23: eq_int(integer_of_uint32(select(queue_full, q)), (0)))
    and (valid_q(q, queue_alloc_table, q, t)
        and (valid_t(t, char_P_alloc_table, q, t)
            and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                queue_length, queue_contents, q, t))))) }
  (init:
  try
   begin
     (let tmp = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_17 = (tmp := ((safe_acc_ !queue_last) q)) in void);
      (C_7:
      begin
        (let jessie_20 = (let jessie_18 = q in
                         (let jessie_19 = (safe_int32_of_integer_ (C_4:
                                                                  ((add_int 
                                                                    (integer_of_int32 
                                                                    ((safe_acc_ !queue_last) q))) (1)))) in
                         (((safe_upd_ queue_last) q) jessie_19))) in
        void);
       (C_11:
       begin
         (let jessie_23 = (let jessie_21 = (C_9:
                                           ((shift ((safe_acc_ !queue_contents) q)) 
                                            (integer_of_int32 !tmp))) in
                          (let jessie_22 = c in
                          (((safe_upd_ char_P_char_M) (C_9:
                                                      ((shift ((safe_acc_ !queue_contents) q)) 
                                                       (integer_of_int32 !tmp)))) jessie_22))) in
         void);
        (if ((eq_int_ (integer_of_int32 ((safe_acc_ !queue_last) q))) 
             (integer_of_int32 ((safe_acc_ !queue_length) q)))
        then
         (let jessie_26 = (let jessie_24 = q in
                          (let jessie_25 = (safe_int32_of_integer_ (0)) in
                          (((safe_upd_ queue_last) q) jessie_25))) in
         void)
        else void);
        (C_17:
        begin
          (let jessie_29 = (let jessie_27 = q in
                           (let jessie_28 = (safe_uint32_of_integer_ (0)) in
                           (((safe_upd_ queue_empty) q) jessie_28))) in
          void);
         (C_22:
         begin
           (let jessie_32 = (let jessie_30 = q in
                            (let jessie_31 = (safe_uint32_of_integer_ 
                                              (if ((eq_int_ (integer_of_int32 
                                                             ((safe_acc_ !queue_first) q))) 
                                                   (integer_of_int32 
                                                    ((safe_acc_ !queue_last) q)))
                                              then (1)
                                              else (0))) in
                            (((safe_upd_ queue_full) q) jessie_31))) in
           void);
          (raise Return)
         end)
        end)
       end)
      end)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_6:
     ((JC_5:
      ((C_24:
       ((C_25: eq_int(integer_of_uint32(select(queue_empty, q)), (0)))
       and (C_26:
           eq_int(integer_of_int32(int32_of_integer(integer_of_int8(select(char_P_char_M,
                                                                    shift(
                                                                    select(queue_contents,
                                                                    q),
                                                                    integer_of_int32(
                                                                    select(queue_last@,
                                                                    q))))))),
           integer_of_int32(int32_of_integer(integer_of_int8(c)))))))
      and (valid_q(q, queue_alloc_table, q, t)
          and (valid_t(t, char_P_alloc_table, q, t)
              and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                  queue_length, queue_contents, q, t)))))
     and (JC_4:
         (((not_assigns(char_P_alloc_table@, char_P_char_M@, char_P_char_M,
            pset_range(pset_deref(queue_contents, pset_singleton(q)),
            integer_of_int32(select(queue_last, q)),
            integer_of_int32(select(queue_last, q))))
           and not_assigns(queue_alloc_table@, queue_last@, queue_last,
               pset_singleton(q)))
          and not_assigns(queue_alloc_table@, queue_empty@, queue_empty,
              pset_singleton(q)))
         and not_assigns(queue_alloc_table@, queue_full@, queue_full,
             pset_singleton(q))))))) }

let push_safety =
 fun (c : int8) ->
  { (JC_1:
    ((C_23: eq_int(integer_of_uint32(select(queue_full, q)), (0)))
    and (valid_q(q, queue_alloc_table, q, t)
        and (valid_t(t, char_P_alloc_table, q, t)
            and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                queue_length, queue_contents, q, t))))) }
  (init:
  try
   begin
     (let tmp = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_1 = (tmp := ((safe_acc_ !queue_last) q)) in void);
      (C_7:
      begin
        (let jessie_4 = (let jessie_2 = q in
                        (let jessie_3 = (C_5:
                                        (int32_of_integer_ (C_4:
                                                           ((add_int 
                                                             (integer_of_int32 
                                                              ((safe_acc_ !queue_last) q))) (1))))) in
                        (((safe_upd_ queue_last) q) jessie_3))) in
        void);
       (C_11:
       begin
         (let jessie_7 = (let jessie_5 = (C_9:
                                         ((shift ((safe_acc_ !queue_contents) q)) 
                                          (integer_of_int32 !tmp))) in
                         (let jessie_6 = c in
                         (JC_7:
                         (((((offset_upd_ !char_P_alloc_table) char_P_char_M) 
                            ((safe_acc_ !queue_contents) q)) (integer_of_int32 !tmp)) jessie_6)))) in
         void);
        (if ((eq_int_ (integer_of_int32 ((safe_acc_ !queue_last) q))) 
             (integer_of_int32 ((safe_acc_ !queue_length) q)))
        then
         (let jessie_10 = (let jessie_8 = q in
                          (let jessie_9 = (safe_int32_of_integer_ (0)) in
                          (((safe_upd_ queue_last) q) jessie_9))) in
         void)
        else void);
        (C_17:
        begin
          (let jessie_13 = (let jessie_11 = q in
                           (let jessie_12 = (safe_uint32_of_integer_ (0)) in
                           (((safe_upd_ queue_empty) q) jessie_12))) in
          void);
         (C_22:
         begin
           (let jessie_16 = (let jessie_14 = q in
                            (let jessie_15 = (C_20:
                                             (uint32_of_integer_ (if 
                                                                 ((eq_int_ 
                                                                   (integer_of_int32 
                                                                    ((safe_acc_ !queue_first) q))) 
                                                                  (integer_of_int32 
                                                                   ((safe_acc_ !queue_last) q)))
                                                                 then (1)
                                                                 else (0)))) in
                            (((safe_upd_ queue_full) q) jessie_15))) in
           void);
          (raise Return)
         end)
        end)
       end)
      end)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_3:
    (valid_q(q, queue_alloc_table, q, t)
    and (valid_t(t, char_P_alloc_table, q, t)
        and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
            queue_length, queue_contents, q, t)))) }

let test_ensures_default_2 =
 fun (q1 : queue pointer) ->
  { (JC_14:
    ((C_58:
     ((C_60: le_int(offset_min(queue_alloc_table, q1), (0)))
     and ((C_61: ge_int(offset_max(queue_alloc_table, q1), (0)))
         and (C_62: eq_int(integer_of_uint32(select(queue_empty, q)), (0))))))
    and (valid_q(q, queue_alloc_table, q, t)
        and (valid_t(t, char_P_alloc_table, q, t)
            and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                queue_length, queue_contents, q, t))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let c_0 = ref (any_int8 void) in
     (let __retres = ref (any_int32 void) in
     (C_54:
     begin
       (let jessie_63 = (c_0 := (C_53: (pop void))) in void);
      (C_57:
      begin
        (let jessie_64 = (__retres := (safe_int32_of_integer_ (integer_of_uint32 
                                                               ((safe_acc_ !queue_empty) q1)))) in
        void);
       (jessie_returned_value := !__retres);
       (raise Return)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_17:
     ((C_63:
      eq_int(integer_of_uint32(uint32_of_integer(integer_of_int32(result))),
      integer_of_uint32(select(queue_empty@, q1))))
     and (valid_q(q, queue_alloc_table, q, t)
         and (valid_t(t, char_P_alloc_table, q, t)
             and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                 queue_length, queue_contents, q, t)))))) }

let test_safety =
 fun (q1 : queue pointer) ->
  { (JC_14:
    ((C_58:
     ((C_60: le_int(offset_min(queue_alloc_table, q1), (0)))
     and ((C_61: ge_int(offset_max(queue_alloc_table, q1), (0)))
         and (C_62: eq_int(integer_of_uint32(select(queue_empty, q)), (0))))))
    and (valid_q(q, queue_alloc_table, q, t)
        and (valid_t(t, char_P_alloc_table, q, t)
            and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
                queue_length, queue_contents, q, t))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let c_0 = ref (any_int8 void) in
     (let __retres = ref (any_int32 void) in
     (C_54:
     begin
       (let jessie_61 = (c_0 := (C_53: (pop void))) in void);
      (C_57:
      begin
        (let jessie_62 = (__retres := (C_56:
                                      (int32_of_integer_ (integer_of_uint32 
                                                          (C_55:
                                                          (((acc_ !queue_alloc_table) !queue_empty) q1)))))) in
        void);
       (jessie_returned_value := !__retres);
       (raise Return)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_16:
    (valid_q(q, queue_alloc_table, q, t)
    and (valid_t(t, char_P_alloc_table, q, t)
        and q_invariant(q, char_P_alloc_table, queue_last, queue_first,
            queue_length, queue_contents, q, t)))) }


