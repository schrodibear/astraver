rm -f struct4.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only struct4.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs struct4.cloc struct4.jc
Normalized expression:
(((\offset_min(aaa)) <= 0) && ((\offset_max(aaa)) >= 0))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let S[0] x in
   {
   (let int32 __retres in
      {
      {
        (C_2:
           {
           (x = (C_1: (TODO alloc)));
             {
             (C_7:
                {
                ((C_6: (C_5: x.a).v) = (C_4: (C_3: v_x.a).v));
                  (C_10:
                     {
                     ((C_9: x.b) = (C_8: v_x.b));
                       (C_15:
                          {
                          ((C_14: ((C_13: x.c) + 0).v) =
                             (C_12: ((C_11: v_x.c) + 0).v));
                            (C_20:
                               {
                               ((C_19: ((C_18: x.c) + 1).v) =
                                  (C_17: ((C_16: v_x.c) + 1).v));
                                 (C_25:
                                    {
                                    ((C_24: ((C_23: x.c) + 2).v) =
                                       (C_22: ((C_21: v_x.c) + 2).v));
                                      (C_28:
                                         {
                                         ((C_27: x.s) = (C_26: v_x.s));
                                           (C_31:
                                              {
                                              ((C_30: x.i) = (C_29: v_x.i))
                                              })
                                         })
                                    })
                               })
                          })
                     })
                })
             };
             (C_35:
                {
                ((C_34: (C_33: (C_32: x.s).a).v) = 0);
                  (C_37:
                     {
                     ((C_36: aaa.i) = 97);
                       (C_41:
                          {
                          (__retres = (C_40: (TODO cast)));
                            {
                            (C_42: { (TODO free); (return __retres) })
                            }
                          })
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
(C_43:
   ((C_44: ((\offset_min(v_x.s)) <= 0)) &&
      (C_45: ((\offset_max(v_x.s)) >= 0))))

Generating Why function f
cat why/struct4.why
type A

type S

type _bool

type char_P

type int16

type int32

type int64

type int8

type uint16

type uint32

type uint64

type uint8

type void_P

logic A_tag:  -> A tag_id

axiom A_int : (int_of_tag(A_tag) = (1))

axiom A_parenttag_bottom : parenttag(A_tag, bottom_tag)

axiom A_tags :
 (forall x:A pointer.
  (forall A_tag_table:A tag_table. instanceof(A_tag_table, x, A_tag)))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic aaa:  -> S pointer

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_aaa(aaa:S pointer,
 S_alloc_table:S alloc_table,
 aaa:S pointer) =
 (le_int(offset_min(S_alloc_table, aaa), (0))
 and ge_int(offset_max(S_alloc_table, aaa), (0)))

predicate valid_struct_A(p:A pointer,
 a:int,
 b:int,
 A_alloc_table:A alloc_table) =
 ((offset_min(A_alloc_table, p) = a) and (offset_max(A_alloc_table, p) = b))

predicate valid_struct_S(p:S pointer,
 a:int,
 b:int,
 A_alloc_table:A alloc_table,
 S_alloc_table:S alloc_table,
 S_a:(S,
 A pointer) memory,
 S_c:(S,
 A pointer) memory) =
 ((offset_min(S_alloc_table, p) = a)
 and ((offset_max(S_alloc_table, p) = b)
     and (valid_struct_A(select(S_a, p), (0), (0), A_alloc_table)
         and valid_struct_A(select(S_c, p), (0), (2), A_alloc_table))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_A(p:A pointer,
 a:int,
 b:int,
 A_alloc_table:A alloc_table) =
 ((offset_min(A_alloc_table, p) = a) and (offset_max(A_alloc_table, p) = b))

predicate valid_variant_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter A_alloc_table : A alloc_table ref

parameter A_tag_table : A tag_table ref

parameter A_v : (A, uint8) memory ref

parameter S_a : (S, A pointer) memory ref

parameter S_alloc_table : S alloc_table ref

parameter S_b : (S, A pointer) memory ref

parameter S_c : (S, A pointer) memory ref

parameter S_i : (S, uint8) memory ref

parameter S_s : (S, S pointer) memory ref

parameter S_tag_table : S tag_table ref

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter alloc_A :
 n:int ->
  A_alloc_table:A alloc_table ref ->
   A_alloc_table:A alloc_table ref ->
    { ge_int(n, (0))} A pointer reads A_alloc_table
    writes A_alloc_table,A_tag_table
    { (valid_struct_A(result, (0), sub_int(n, (1)), A_alloc_table)
      and (instanceof(A_tag_table, result, A_tag)
          and (alloc_extends(A_alloc_table@, A_alloc_table)
              and alloc_extern(A_alloc_table@, result)))) }

parameter alloc_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   A_alloc_table:A alloc_table ref ->
    S_alloc_table:S alloc_table ref ->
     S_a:(S,
      A pointer) memory ref ->
      S_c:(S,
       A pointer) memory ref ->
       { ge_int(n, (0))} S pointer reads A_alloc_table,S_a,S_alloc_table,S_c
       writes S_alloc_table,S_tag_table
       { (valid_struct_S(result, (0), sub_int(n, (1)), A_alloc_table,
          S_alloc_table, S_a, S_c)
         and (instanceof(S_tag_table, result, S_tag)
             and (alloc_extends(S_alloc_table@, S_alloc_table)
                 and alloc_extern(S_alloc_table@, result)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_A :
 tt:unit ->
  A_alloc_table:A alloc_table ref ->
   A_alloc_table:A alloc_table ref ->
    { } A pointer reads A_alloc_table writes A_alloc_table,A_tag_table
    { (valid_struct_A(result, (0), (0), A_alloc_table)
      and (instanceof(A_tag_table, result, A_tag)
          and (alloc_extends(A_alloc_table@, A_alloc_table)
              and alloc_extern(A_alloc_table@, result)))) }

parameter alloc_one_S :
 tt:unit ->
  S_alloc_table:S alloc_table ref ->
   A_alloc_table:A alloc_table ref ->
    S_alloc_table:S alloc_table ref ->
     S_a:(S,
      A pointer) memory ref ->
      S_c:(S,
       A pointer) memory ref ->
       { } S pointer reads A_alloc_table,S_a,S_alloc_table,S_c
       writes S_alloc_table,S_tag_table
       { (valid_struct_S(result, (0), (0), A_alloc_table, S_alloc_table, S_a,
          S_c)
         and (instanceof(S_tag_table, result, S_tag)
             and (alloc_extends(S_alloc_table@, S_alloc_table)
                 and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter f :
 v_x:S pointer ->
  { (JC_1:
    ((C_43:
     ((C_44: le_int(offset_min(S_alloc_table, select(S_s, v_x)), (0)))
     and (C_45: ge_int(offset_max(S_alloc_table, select(S_s, v_x)), (0)))))
    and valid_aaa(aaa, S_alloc_table, aaa)))}
  int32 reads A_alloc_table,A_v,S_a,S_alloc_table,S_b,S_c,S_i,S_s,S_tag_table
  writes A_alloc_table,A_tag_table,A_v,S_a,S_alloc_table,S_b,S_c,S_i,S_s,S_tag_table
  { (JC_3: valid_aaa(aaa, S_alloc_table, aaa)) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f_safety =
 fun (v_x : S pointer) ->
  { (valid_struct_S(v_x, (0), (0), A_alloc_table, S_alloc_table, S_a, S_c)
    and (JC_1:
        ((C_43:
         ((C_44: le_int(offset_min(S_alloc_table, select(S_s, v_x)), (0)))
         and (C_45: ge_int(offset_max(S_alloc_table, select(S_s, v_x)), (0)))))
        and valid_aaa(aaa, S_alloc_table, aaa)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let x = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_2:
     begin
       (let jessie_2 = (let jessie_1 = (C_1:
                                       ((((((alloc_one_S void) S_alloc_table) A_alloc_table) S_alloc_table) S_a) S_c)) in
                       (assert
                       { ge_int(offset_max(S_alloc_table, jessie_1), (0)) };
                       (x := (C_1:
                             ((((((alloc_one_S void) S_alloc_table) A_alloc_table) S_alloc_table) S_a) S_c))))) in
       void);
      (let jessie_25 = (C_7:
                       begin
                         (let jessie_5 = (let jessie_3 = ((safe_acc_ !S_a) !x) in
                                         (let jessie_4 = ((safe_acc_ !A_v) 
                                                          ((safe_acc_ !S_a) v_x)) in
                                         (((safe_upd_ A_v) ((safe_acc_ !S_a) !x)) jessie_4))) in
                         void);
                        (C_10:
                        begin
                          (let jessie_9 = (let jessie_6 = !x in
                                          (let jessie_7 = ((safe_acc_ !S_b) v_x) in
                                          (((safe_upd_ S_b) !x) jessie_7))) in
                          void);
                         (C_15:
                         begin
                           (let jessie_12 = (let jessie_10 = ((shift 
                                                               ((safe_acc_ !S_c) !x)) (0)) in
                                            (let jessie_11 = ((safe_acc_ !A_v) 
                                                              ((shift 
                                                                ((safe_acc_ !S_c) v_x)) (0))) in
                                            (((safe_upd_ A_v) ((shift 
                                                                ((safe_acc_ !S_c) !x)) (0))) jessie_11))) in
                           void);
                          (C_20:
                          begin
                            (let jessie_15 = (let jessie_13 = ((shift 
                                                                ((safe_acc_ !S_c) !x)) (1)) in
                                             (let jessie_14 = ((safe_acc_ !A_v) 
                                                               ((shift 
                                                                 ((safe_acc_ !S_c) v_x)) (1))) in
                                             (((safe_upd_ A_v) ((shift 
                                                                 ((safe_acc_ !S_c) !x)) (1))) jessie_14))) in
                            void);
                           (C_25:
                           begin
                             (let jessie_18 = (let jessie_16 = ((shift 
                                                                 ((safe_acc_ !S_c) !x)) (2)) in
                                              (let jessie_17 = ((safe_acc_ !A_v) 
                                                                ((shift 
                                                                  ((safe_acc_ !S_c) v_x)) (2))) in
                                              (((safe_upd_ A_v) ((shift 
                                                                  ((safe_acc_ !S_c) !x)) (2))) jessie_17))) in
                             void);
                            (C_28:
                            begin
                              (let jessie_22 = (let jessie_19 = !x in
                                               (let jessie_20 = ((safe_acc_ !S_s) v_x) in
                                               (((safe_upd_ S_s) !x) jessie_20))) in
                              void);
                             (C_31:
                             (let jessie_23 = !x in
                             (let jessie_24 = ((safe_acc_ !S_i) v_x) in
                             begin
                               (((safe_upd_ S_i) !x) jessie_24);
                              ((safe_acc_ !S_i) jessie_23)
                             end)))
                            end)
                           end)
                          end)
                         end)
                        end)
                       end) in
      void);
      (C_35:
      begin
        (let jessie_28 = (let jessie_26 = (C_33:
                                          (((acc_ !S_alloc_table) !S_a) 
                                           ((safe_acc_ !S_s) !x))) in
                         (let jessie_27 = (safe_uint8_of_integer_ (0)) in
                         (((safe_upd_ A_v) (C_33:
                                           (((acc_ !S_alloc_table) !S_a) 
                                            ((safe_acc_ !S_s) !x)))) jessie_27))) in
        void);
       (C_37:
       begin
         (let jessie_31 = (let jessie_29 = aaa in
                          (let jessie_30 = (safe_uint8_of_integer_ (97)) in
                          (((safe_upd_ S_i) aaa) jessie_30))) in
         void);
        (C_41:
        begin
          (let jessie_32 = (__retres := (C_40:
                                        (int32_of_integer_ (integer_of_uint8 
                                                            ((safe_acc_ !A_v) 
                                                             ((shift 
                                                               ((safe_acc_ !S_c) !x)) (1))))))) in
          void);
         (C_42:
         begin
           ((free_parameter S_alloc_table) !x);
          (jessie_returned_value := !__retres);
          (raise Return)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_3: valid_aaa(aaa, S_alloc_table, aaa)) }


