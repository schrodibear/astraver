
(***
   	
C. A. R. Hoare 	 
Elliott Brothers Ltd., Hertfordshire, England, U.K.

Communications of the ACM  archive
Volume 4 ,  Issue 7  (July 1961) table of contents
Pages: 321 - 322   

***)

(* Algorithm 63 *)

parameter partition : 
  a : int array -> m:int -> n:int -> i:int ref -> j:int ref ->
  { m < n } 
  unit writes a,i,j
  { m <= j and j < i and i <= n and sub_permut(m,n,a@,a) and
    exists x:int.
      (forall r:int. m <= r <= j -> a[r] <= x) and
      (forall r:int. j < r < i -> a[r] = x) and
      (forall r:int. i <= r <= n -> a[r] >= x) }

(* Algorithm 65 (fixed version) *)

let rec find (a:int array) (m:int) (n:int) (k:int) : unit { variant n-m } =
  { m <= k <= n }
  if m < n then begin
    let i = ref 0 in
    let j = ref 0 in
    partition a m n i j;
    if k <= !j then find a m !j k;
    if !i <= k then find a !i n k
  end
  { sub_permut(m,n,a@,a) and 
    (forall r:int. m <= r <= k -> a[r] <= a[k]) and
    (forall r:int. k <= r <= n -> a[k] <= a[r]) }
