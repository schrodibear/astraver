
UNIT: TYPE;
tt: UNIT;
array_length_INT: [ARRAY INT OF INT -> INT];
sqrt_real: [REAL -> REAL];
int_of_real: [REAL -> INT];
mod_int: [[INT, INT] -> INT];


%%%% DO NOT EDIT BELOW THIS LINE

%% Why logic sorted_array
sorted_array: [[ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic exchange
exchange: [[ARRAY INT OF INT, ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic sub_permut
sub_permut: [[INT, INT, ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic permut
permut: [[ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic array_le
array_le: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_ge
array_ge: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_length
array_length_INT: [ARRAY INT OF INT -> INT];

%% Why logic store
store_INT: [[ARRAY INT OF INT, INT, INT] -> UNIT];

%% Why axiom array_length_store
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (v:INT):
       (array_length_INT((t WITH [i] := v)) = array_length_INT(t)))));

%% Why logic access
access_INT: [[ARRAY INT OF INT, INT] -> INT];

%% Why axiom exchange_def
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (exchange(t1, t2, i, j) <=>
       ((array_length_INT(t1) = array_length_INT(t2)) AND
       ((t1[i] = t2[j]) AND
       ((t2[i] = t1[j]) AND
       (FORALL (k:INT): (((k /= i) AND (k /= j)) => (t1[k] = t2[k])))))))))));

%% Why axiom permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT): permut(t, t));

%% Why axiom permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT): (permut(t1, t2) => permut(t2, t1))));

%% Why axiom permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       ((permut(t1, t2) AND permut(t2, t3)) => permut(t1, t3)))));

%% Why axiom permut_exchange
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT): permut(t, ((t WITH [i] := t[j]) WITH [j] := t[i])))));

%% Why axiom permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (permut(t1, t2) => (array_length_INT(t1) = array_length_INT(t2)))));

%% Why axiom sub_permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT): (FORALL (d:INT): sub_permut(g, d, t, t))));

%% Why axiom sub_permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) => sub_permut(g, d, t2, t1))))));

%% Why axiom sub_permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (sub_permut(g, d, t2, t3) => sub_permut(g, d, t1, t3))))))));

%% Why axiom sub_permut_exchange_1
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND ((i <= d) AND ((g <= j) AND (j <= d)))) =>
       sub_permut(g, d, t, ((t WITH [i] := t[j]) WITH [j] := t[i]))))))));

%% Why axiom sub_permut_exchange_2
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND
        ((i <= d) AND ((g <= j) AND ((j <= d) AND exchange(t1, t2, i, j))))) =>
       sub_permut(g, d, t1, t2))))))));

%% Why axiom sub_permut_permut
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT): (sub_permut(g, d, t1, t2) => permut(t1, t2))))));

%% Why axiom sub_permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (array_length_INT(t1) = array_length_INT(t2)))))));

%% Why axiom sorted_array_def
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (sorted_array(t, i, j) <=>
       (FORALL (k:INT): (((i <= k) AND (k < j)) => (t[k] <= t[(k + 1)])))))));

%% mult_po_1, Why obligation from file "arith.mlw", characters 358-368
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (((x >= 0) AND (y >= 0)) =>
      (FORALL (a:INT):
      ((a = x) =>
      (FORALL (b:INT):
      ((b = y) =>
      (FORALL (p:INT):
      ((p = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (a1:INT):
      (FORALL (b1:INT):
      (FORALL (p1:INT):
      ((Variant1 = a1) =>
      (((a1 >= 0) AND ((p1 + (a1 * b1)) = (x * y))) =>
      ((a1 /= 0) => (2 /= 0)))))))))))))))));

%% mult_po_2, Why obligation from file "arith.mlw", characters 374-386
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (((x >= 0) AND (y >= 0)) =>
      (FORALL (a:INT):
      ((a = x) =>
      (FORALL (b:INT):
      ((b = y) =>
      (FORALL (p:INT):
      ((p = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (a1:INT):
      (FORALL (b1:INT):
      (FORALL (p1:INT):
      ((Variant1 = a1) =>
      (((a1 >= 0) AND ((p1 + (a1 * b1)) = (x * y))) =>
      ((a1 /= 0) =>
      ((2 /= 0) =>
      ((mod_int(a1, 2) = 1) =>
      (FORALL (p2:INT):
      ((p2 = (p1 + b1)) =>
      (FORALL (a:INT):
      ((a = (a1 / 2)) =>
      (FORALL (b:INT):
      ((b = (2 * b1)) =>
      (((a >= 0) AND ((p2 + (a * b)) = (x * y))) AND
      ((0 <= a1) AND (a < a1)))))))))))))))))))))))))));

%% mult_po_3, Why obligation from file "arith.mlw", characters 386-386
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (((x >= 0) AND (y >= 0)) =>
      (FORALL (a:INT):
      ((a = x) =>
      (FORALL (b:INT):
      ((b = y) =>
      (FORALL (p:INT):
      ((p = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (a1:INT):
      (FORALL (b1:INT):
      (FORALL (p1:INT):
      ((Variant1 = a1) =>
      (((a1 >= 0) AND ((p1 + (a1 * b1)) = (x * y))) =>
      ((a1 /= 0) =>
      ((2 /= 0) =>
      ((mod_int(a1, 2) /= 1) =>
      (FORALL (result1:UNIT):
      ((result1 = tt) =>
      (FORALL (a:INT):
      ((a = (a1 / 2)) =>
      (FORALL (b:INT):
      ((b = (2 * b1)) =>
      (((a >= 0) AND ((p1 + (a * b)) = (x * y))) AND
      ((0 <= a1) AND (a < a1)))))))))))))))))))))))))));

%% mult_po_4, Why obligation from file "arith.mlw", characters 400-406
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (((x >= 0) AND (y >= 0)) =>
      (FORALL (a:INT):
      ((a = x) =>
      (FORALL (b:INT):
      ((b = y) =>
      (FORALL (p:INT):
      ((p = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (a1:INT):
      (FORALL (b1:INT):
      (FORALL (p1:INT):
      ((Variant1 = a1) =>
      (((a1 >= 0) AND ((p1 + (a1 * b1)) = (x * y))) =>
      ((a1 /= 0) => (FORALL (p2:INT): (2 /= 0))))))))))))))))));

%% mult_po_5, Why obligation from file "arith.mlw", characters 268-436
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (((x >= 0) AND (y >= 0)) =>
      (FORALL (a:INT):
      ((a = x) =>
      (FORALL (b:INT):
      ((b = y) =>
      (FORALL (p:INT):
      ((p = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (a1:INT):
      (FORALL (b1:INT):
      (FORALL (p1:INT):
      ((Variant1 = a1) =>
      (((a1 >= 0) AND ((p1 + (a1 * b1)) = (x * y))) =>
      ((a1 = 0) =>
      (FORALL (result:INT): ((result = p1) => (result = (x * y))))))))))))))))))));

%% mult_po_6, Why obligation from file "arith.mlw", characters 304-333
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (((x >= 0) AND (y >= 0)) =>
      (FORALL (a:INT):
      ((a = x) =>
      (FORALL (b:INT):
      ((b = y) =>
      (FORALL (p:INT): ((p = 0) => ((a >= 0) AND ((p + (a * b)) = (x * y))))))))))));

