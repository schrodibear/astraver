(* Load Programs. *)(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.

Lemma mean1 : forall x y:Z, (x <= y)%Z -> (x <= (x + y) / 2)%Z.
Proof.
intros.
assert ((x + y) / 2 >= (x + x) / 2)%Z.
apply Z_div_ge; omega.
assert (((x + x) / 2)%Z = x); auto with *.
replace (x + x)%Z with (0 + x * 2)%Z; auto with *.
rewrite (Z_div_plus 0 x 2); auto with *.
Qed.

Lemma mean2 : forall x y:Z, (x < y)%Z -> ((x + y) / 2 < y)%Z.
Proof.
intros.
apply (Zlt_Zmult_right2 ((x + y) / 2) y (z:=2)).
auto with *.
replace ((x + y) / 2 * 2)%Z with (2 * ((x + y) / 2))%Z; auto with *.
assert (2 * ((x + y) / 2) <= x + y)%Z.
apply (Z_mult_div_ge (x + y) 2).
auto with *.
omega.
Qed.

Hints Resolve mean1 mean2 .

(* Why obligation from file , characters 326-346 *)
Lemma sqrt_po_1 :
 forall (x:Z) (Pre5:(x >= 0)%Z) (inf:Z) (Post7:inf = 0%Z) (sup:Z)
   (Post6:sup = (x + 1)%Z) (mil:Z) (Post5:mil = 0%Z)
   (Variant1 inf1 sup1:Z) (Pre4:Variant1 = (sup1 - inf1)%Z)
   (Pre3:(inf1 * inf1 <= x)%Z /\ (x < sup1 * sup1)%Z /\ (inf1 < sup1)%Z)
   (Test4:(inf1 + 1)%Z <> sup1), 2%Z <> 0%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 375-386 *)
Lemma sqrt_po_2 :
 forall (x:Z) (Pre5:(x >= 0)%Z) (inf:Z) (Post7:inf = 0%Z) (sup:Z)
   (Post6:sup = (x + 1)%Z) (mil:Z) (Post5:mil = 0%Z)
   (Variant1 inf1 sup1:Z) (Pre4:Variant1 = (sup1 - inf1)%Z)
   (Pre3:(inf1 * inf1 <= x)%Z /\ (x < sup1 * sup1)%Z /\ (inf1 < sup1)%Z)
   (Test4:(inf1 + 1)%Z <> sup1) (Pre2:2%Z <> 0%Z) (mil2:Z)
   (Post1:mil2 = ((inf1 + (sup1 + 1)) / 2)%Z)
   (Test3:(x < mil2 * mil2)%Z) (sup2:Z) (Post2:sup2 = mil2),
   ((inf1 * inf1 <= x)%Z /\ (x < sup2 * sup2)%Z /\ (inf1 < sup2)%Z) /\
   Zwf 0 (sup2 - inf1) (sup1 - inf1).
Proof.
intuition.
subst sup2; trivial.
subst mil2 sup2.
replace (inf1 + (sup1 + 1))%Z with (inf1 + (sup1 - 1) + 1 * 2)%Z;
 try omega.
rewrite Z_div_plus; try omega.
assert (inf1 <= (inf1 + (sup1 - 1)) / 2)%Z.
apply mean1; omega.
omega.
unfold Zwf.
split; try omega.
subst mil2 sup2.
 replace (inf1 + (sup1 + 1))%Z with (inf1 + 1 + sup1)%Z; try omega.
assert ((inf1 + 1 + sup1) / 2 < sup1)%Z.
apply mean2; omega.
omega.
Qed.

(* Why obligation from file , characters 392-403 *)
Lemma sqrt_po_3 :
 forall (x:Z) (Pre5:(x >= 0)%Z) (inf:Z) (Post7:inf = 0%Z) (sup:Z)
   (Post6:sup = (x + 1)%Z) (mil:Z) (Post5:mil = 0%Z)
   (Variant1 inf1 sup1:Z) (Pre4:Variant1 = (sup1 - inf1)%Z)
   (Pre3:(inf1 * inf1 <= x)%Z /\ (x < sup1 * sup1)%Z /\ (inf1 < sup1)%Z)
   (Test4:(inf1 + 1)%Z <> sup1) (Pre2:2%Z <> 0%Z) (mil2:Z)
   (Post1:mil2 = ((inf1 + (sup1 + 1)) / 2)%Z)
   (Test2:(x >= mil2 * mil2)%Z) (inf2:Z) (Post3:inf2 = mil2),
   ((inf2 * inf2 <= x)%Z /\ (x < sup1 * sup1)%Z /\ (inf2 < sup1)%Z) /\
   Zwf 0 (sup1 - inf2) (sup1 - inf1).
Proof.
intuition.
subst mil2 inf2; omega.
subst mil2 inf2.
replace (inf1 + (sup1 + 1))%Z with (inf1 + 1 + sup1)%Z; try omega.
assert ((inf1 + 1 + sup1) / 2 < sup1)%Z.
apply mean2; omega.
omega.
unfold Zwf; split; try omega.
subst inf2 mil2.
replace (inf1 + (sup1 + 1))%Z with (inf1 + 1 + sup1)%Z; try omega.
assert (inf1 + 1 <= (inf1 + 1 + sup1) / 2)%Z.
apply mean1; omega.
omega.
Qed.

(* Why obligation from file , characters 235-287 *)
Lemma sqrt_po_4 :
 forall (x:Z) (Pre5:(x >= 0)%Z) (inf:Z) (Post7:inf = 0%Z) (sup:Z)
   (Post6:sup = (x + 1)%Z) (mil:Z) (Post5:mil = 0%Z),
   (inf * inf <= x)%Z /\ (x < sup * sup)%Z /\ (inf < sup)%Z.
Proof.
intuition.
subst inf; omega.
subst sup.
ring ((x + 1) * (x + 1))%Z.
assert (0 <= x * x)%Z.
auto with *.
omega.
Qed.

(* Why obligation from file , characters 412-416 *)
Lemma sqrt_po_5 :
 forall (x:Z) (Pre5:(x >= 0)%Z) (inf:Z) (Post7:inf = 0%Z) (sup:Z)
   (Post6:sup = (x + 1)%Z) (mil:Z) (Post5:mil = 0%Z) (inf1 sup1:Z)
   (Post4:((inf1 * inf1 <= x)%Z /\
           (x < sup1 * sup1)%Z /\ (inf1 < sup1)%Z) /\
          (inf1 + 1)%Z = sup1),
   (inf1 * inf1 <= x)%Z /\ (x < (inf1 + 1) * (inf1 + 1))%Z.
Proof.
intuition.
rewrite H0; assumption.
Qed.


