(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Why.

Lemma mean1 : (x,y:Z) `x<=y` -> `x <= (x+y)/2 `.
Proof.
Intros.
Assert `(x+y)/2 >= (x+x)/2`.
Apply Z_div_ge; Omega.
Assert `(x+x)/2 = x`; Auto with *.
Replace `x+x` with `0 + x*2`; Auto with *.
Rewrite (Z_div_plus `0` x `2`); Auto with *.
Save.

Lemma mean2 : (x,y:Z) `x<y` -> `(x+y)/2 < y`.
Proof.
Intros.
Apply (!Zlt_Zmult_right2 `(x+y)/2` `y` `2`).
Auto with *.
Replace `(x+y)/2*2` with `2*((x+y)/2)`; Auto with *.
Assert `2*((x+y)/2) <= x+y`.
Apply (Z_mult_div_ge `x+y` `2`).
Auto with *.
Omega.
Save.

Hints Resolve mean1 mean2.

(* Why obligation from file "sqrt_dicho.mlw", characters 326-346 *)
Lemma sqrt_po_1 : 
  (x: Z)
  (Pre5: `x >= 0`)
  (result: Z)
  (Post7: result = `0`)
  (result0: Z)
  (Post6: result0 = `x + 1`)
  (result1: Z)
  (Post5: result1 = `0`)
  (Variant1: Z)
  (inf0: Z)
  (sup0: Z)
  (Pre4: Variant1 = `sup0 - inf0`)
  (Pre3: `inf0 * inf0 <= x` /\ `x < sup0 * sup0` /\ `inf0 < sup0`)
  (Test4: `inf0 + 1 <> sup0`)
  ~(`2` = `0`).
Proof.
Intuition.
Save.

(* Why obligation from file "sqrt_dicho.mlw", characters 375-386 *)
Lemma sqrt_po_2 : 
  (x: Z)
  (Pre5: `x >= 0`)
  (result: Z)
  (Post7: result = `0`)
  (result0: Z)
  (Post6: result0 = `x + 1`)
  (result1: Z)
  (Post5: result1 = `0`)
  (Variant1: Z)
  (inf0: Z)
  (sup0: Z)
  (Pre4: Variant1 = `sup0 - inf0`)
  (Pre3: `inf0 * inf0 <= x` /\ `x < sup0 * sup0` /\ `inf0 < sup0`)
  (Test4: `inf0 + 1 <> sup0`)
  (Pre2: ~(`2` = `0`))
  (mil1: Z)
  (Post1: mil1 = (Zdiv (`inf0 + (sup0 + 1)`) `2`))
  (Test3: `x < mil1 * mil1`)
  (sup1: Z)
  (Post2: sup1 = mil1)
  (`inf0 * inf0 <= x` /\ `x < sup1 * sup1` /\ `inf0 < sup1`) /\
  (Zwf `0` `sup1 - inf0` `sup0 - inf0`).
Proof.
Intuition.
Subst sup1; Trivial.
Subst mil1 sup1.
Replace `inf0+(sup0+1)` with `(inf0+(sup0-1))+1*2`; Try Omega.
Rewrite Z_div_plus; Try Omega.
Assert `inf0 <= (inf0+(sup0-1))/2`.
Apply mean1; Omega.
Omega.
Unfold Zwf.
Split; Try Omega.
Subst mil1 sup1. 
Replace `inf0+(sup0+1)` with `(inf0+1)+sup0`; Try Omega.
Assert `((inf0+1)+sup0)/2 < sup0`.
Apply mean2; Omega.
Omega.
Save.

(* Why obligation from file "sqrt_dicho.mlw", characters 392-403 *)
Lemma sqrt_po_3 : 
  (x: Z)
  (Pre5: `x >= 0`)
  (result: Z)
  (Post7: result = `0`)
  (result0: Z)
  (Post6: result0 = `x + 1`)
  (result1: Z)
  (Post5: result1 = `0`)
  (Variant1: Z)
  (inf0: Z)
  (sup0: Z)
  (Pre4: Variant1 = `sup0 - inf0`)
  (Pre3: `inf0 * inf0 <= x` /\ `x < sup0 * sup0` /\ `inf0 < sup0`)
  (Test4: `inf0 + 1 <> sup0`)
  (Pre2: ~(`2` = `0`))
  (mil1: Z)
  (Post1: mil1 = (Zdiv (`inf0 + (sup0 + 1)`) `2`))
  (Test2: `x >= mil1 * mil1`)
  (inf1: Z)
  (Post3: inf1 = mil1)
  (`inf1 * inf1 <= x` /\ `x < sup0 * sup0` /\ `inf1 < sup0`) /\
  (Zwf `0` `sup0 - inf1` `sup0 - inf0`).
Proof.
Intuition.
Subst mil1 inf1; Omega.
Subst mil1 inf1.
Replace `inf0+(sup0+1)` with `(inf0+1)+sup0`; Try Omega.
Assert `((inf0+1)+sup0)/2 < sup0`.
Apply mean2; Omega.
Omega.
Unfold Zwf; Split; Try Omega.
Subst inf1 mil1.
Replace `inf0+(sup0+1)` with `(inf0+1)+sup0`; Try Omega.
Assert `inf0+1 <= ((inf0+1)+sup0)/2`.
Apply mean1; Omega.
Omega.
Save.

(* Why obligation from file "sqrt_dicho.mlw", characters 235-287 *)
Lemma sqrt_po_4 : 
  (x: Z)
  (Pre5: `x >= 0`)
  (result: Z)
  (Post7: result = `0`)
  (result0: Z)
  (Post6: result0 = `x + 1`)
  (result1: Z)
  (Post5: result1 = `0`)
  `result * result <= x` /\ `x < result0 * result0` /\ `result < result0`.
Proof.
Intuition.
Subst result; Omega.
Subst result0.
Ring `(x+1)*(x+1)`.
Assert `0 <= x*x`.
Auto with *.
Omega.
Save.

(* Why obligation from file "sqrt_dicho.mlw", characters 412-416 *)
Lemma sqrt_po_5 : 
  (x: Z)
  (Pre5: `x >= 0`)
  (result: Z)
  (Post7: result = `0`)
  (result0: Z)
  (Post6: result0 = `x + 1`)
  (result1: Z)
  (Post5: result1 = `0`)
  (inf0: Z)
  (sup0: Z)
  (Post4: (`inf0 * inf0 <= x` /\ `x < sup0 * sup0` /\ `inf0 < sup0`) /\
          `inf0 + 1 = sup0`)
  `inf0 * inf0 <= x` /\ `x < (inf0 + 1) * (inf0 + 1)`.
Proof.
Intuition.
Rewrite H0; Assumption.
Save.


