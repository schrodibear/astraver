(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Why.


(* Why obligation from file "search.mlw", characters 390-395 *)
Lemma search1_po_1 : 
  (t: (array Z))
  (result: Z)
  (Post3: result = `0`)
  (Variant1: Z)
  (i0: Z)
  (Pre4: Variant1 = `(array_length t) - i0`)
  (Pre3: `0 <= i0` /\ ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> 0`)))
  (Test4: `i0 < (array_length t)`)
  `0 <= i0` /\ `i0 < (array_length t)`.
Proof.
Auto with *.
Save.

(* Why obligation from file "search.mlw", characters 387-421 *)
Lemma search1_po_2 : 
  (t: (array Z))
  (result: Z)
  (Post3: result = `0`)
  (Variant1: Z)
  (i0: Z)
  (Pre4: Variant1 = `(array_length t) - i0`)
  (Pre3: `0 <= i0` /\ ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> 0`)))
  (Test4: `i0 < (array_length t)`)
  (Test2: `(access t i0) <> 0`)
  ((i:Z)
   (i = `i0 + 1` -> (`0 <= i` /\
    ((k:Z) (`0 <= k` /\ `k < i` -> `(access t k) <> 0`))) /\
    (Zwf `0` `(array_length t) - i` `(array_length t) - i0`))).
Proof.
Intuition.
Assert k=i0 \/ `k<i0`. Omega. Intuition.
Subst k. Auto.
Apply (H0 k). Omega. Assumption.
Unfold Zwf; Omega.
Save.

(* Why obligation from file "search.mlw", characters 286-334 *)
Lemma search1_po_3 : 
  (t: (array Z))
  (result: Z)
  (Post3: result = `0`)
  `0 <= result` /\ ((k:Z) (`0 <= k` /\ `k < result` -> `(access t k) <> 0`)).
Proof.
Intuition.
Save.

(* Why obligation from file "search.mlw", characters 455-476 *)
Lemma search1_po_4 : 
  (t: (array Z))
  (result: Z)
  (Post3: result = `0`)
  (i0: Z)
  (Post2: (`0 <= i0` /\
          ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> 0`))) /\
          `i0 >= (array_length t)`)
  ((k:Z) (`0 <= k` /\ `k < (array_length t)` -> `(access t k) <> 0`)).
Proof.
Intuition.
Apply (H2 k); Omega.
Save.


(* Why obligation from file "search.mlw", characters 892-897 *)
Lemma search2_po_1 : 
  (t: (array Z))
  (result: Z)
  (Post3: result = `0`)
  (Variant1: Z)
  (i0: Z)
  (Pre4: Variant1 = `(array_length t) - i0`)
  (Pre3: `0 <= i0` /\ ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> 0`)))
  (Test4: `i0 < (array_length t)`)
  `0 <= i0` /\ `i0 < (array_length t)`.
Proof.
Auto with *.
Save.

(* Why obligation from file "search.mlw", characters 889-918 *)
Lemma search2_po_2 : 
  (t: (array Z))
  (result: Z)
  (Post3: result = `0`)
  (Variant1: Z)
  (i0: Z)
  (Pre4: Variant1 = `(array_length t) - i0`)
  (Pre3: `0 <= i0` /\ ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> 0`)))
  (Test4: `i0 < (array_length t)`)
  (Test2: `(access t i0) <> 0`)
  ((i:Z)
   (i = `i0 + 1` -> (`0 <= i` /\
    ((k:Z) (`0 <= k` /\ `k < i` -> `(access t k) <> 0`))) /\
    (Zwf `0` `(array_length t) - i` `(array_length t) - i0`))).
Proof.
Intuition.
Assert k=i0 \/ `k<i0`. Omega. Intuition.
Subst k. Auto.
Apply (H0 k). Omega. Assumption.
Unfold Zwf; Omega.
Save.

(* Why obligation from file "search.mlw", characters 796-844 *)
Lemma search2_po_3 : 
  (t: (array Z))
  (result: Z)
  (Post3: result = `0`)
  `0 <= result` /\ ((k:Z) (`0 <= k` /\ `k < result` -> `(access t k) <> 0`)).
Proof.
Intuition.
Save.

(* Why obligation from file "search.mlw", characters 952-973 *)
Lemma search2_po_4 : 
  (t: (array Z))
  (result: Z)
  (Post3: result = `0`)
  (i0: Z)
  (Post2: (`0 <= i0` /\
          ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> 0`))) /\
          `i0 >= (array_length t)`)
  ((k:Z) (`0 <= k` /\ `k < (array_length t)` -> `(access t k) <> 0`)).
Proof.
Intuition.
Apply (H2 k); Omega.
Save.


(* Why obligation from file "search.mlw", characters 1510-1524 *)
Lemma search3_po_1 : 
  (t: (array Z))
  (Pre13: `0 <= (array_length t)`)
  `0 <= 0` /\ `0 <= (array_length t)`.
Proof.
Intros; Omega.
Save.

(* Why obligation from file "search.mlw", characters 1321-1342 *)
Lemma search3_po_2 : 
  (t: (array Z))
  (Pre13: `0 <= (array_length t)`)
  (Pre12: `0 <= 0` /\ `0 <= (array_length t)`)
  (Pre10: `0 <= 0` /\ `0 <= (array_length t)`)
  (Pre11: `0 <= 0` /\ `0 <= (array_length t)`)
  (Variant1: Z)
  (i0: Z)
  (Pre8: Variant1 = `(array_length t) - i0`)
  (Pre7: `0 <= i0` /\ `i0 <= (array_length t)`)
  (Test4: `i0 = (array_length t)`)
  ((k:Z) (`i0 <= k` /\ `k < (array_length t)` -> `(access t k) <> 0`)).
Proof.
Intros; Omega.
Save.

(* Why obligation from file "search.mlw", characters 1357-1361 *)
Lemma search3_po_3 : 
  (t: (array Z))
  (Pre13: `0 <= (array_length t)`)
  (Pre12: `0 <= 0` /\ `0 <= (array_length t)`)
  (Pre10: `0 <= 0` /\ `0 <= (array_length t)`)
  (Pre11: `0 <= 0` /\ `0 <= (array_length t)`)
  (Variant1: Z)
  (i0: Z)
  (Pre8: Variant1 = `(array_length t) - i0`)
  (Pre7: `0 <= i0` /\ `i0 <= (array_length t)`)
  (Test3: `i0 <> (array_length t)`)
  `0 <= i0` /\ `i0 < (array_length t)`.
Proof.
Intuition.
Save.

(* Why obligation from file "search.mlw", characters 1384-1404 *)
Lemma search3_po_4 : 
  (t: (array Z))
  (Pre13: `0 <= (array_length t)`)
  (Pre12: `0 <= 0` /\ `0 <= (array_length t)`)
  (Pre10: `0 <= 0` /\ `0 <= (array_length t)`)
  (Pre11: `0 <= 0` /\ `0 <= (array_length t)`)
  (Variant1: Z)
  (i0: Z)
  (Pre8: Variant1 = `(array_length t) - i0`)
  (Pre7: `0 <= i0` /\ `i0 <= (array_length t)`)
  (Test3: `i0 <> (array_length t)`)
  (Test1: `(access t i0) <> 0`)
  `0 <= i0 + 1` /\ `i0 + 1 <= (array_length t)`.
Proof.
Intuition.
Save.

(* Why obligation from file "search.mlw", characters 1256-1501 *)
Lemma search3_po_5 : 
  (t: (array Z))
  (Pre13: `0 <= (array_length t)`)
  (Pre12: `0 <= 0` /\ `0 <= (array_length t)`)
  (Pre10: `0 <= 0` /\ `0 <= (array_length t)`)
  (Pre11: `0 <= 0` /\ `0 <= (array_length t)`)
  (Variant1: Z)
  (i0: Z)
  (Pre8: Variant1 = `(array_length t) - i0`)
  (Pre7: `0 <= i0` /\ `i0 <= (array_length t)`)
  (Test3: `i0 <> (array_length t)`)
  (Test1: `(access t i0) <> 0`)
  (Pre6: `0 <= i0 + 1` /\ `i0 + 1 <= (array_length t)`)
  (Pre4: `0 <= i0 + 1` /\ `i0 + 1 <= (array_length t)`)
  (Pre5: `0 <= i0 + 1` /\ `i0 + 1 <= (array_length t)`)
  (Zwf `0` `(array_length t) - (i0 + 1)` Variant1).
Proof.
Unfold Zwf; Intuition.
Save.

(* Why obligation from file "search.mlw", characters 1384-1404 *)
Lemma search3_po_6 : 
  (t: (array Z))
  (Pre13: `0 <= (array_length t)`)
  (Pre12: `0 <= 0` /\ `0 <= (array_length t)`)
  (Pre10: `0 <= 0` /\ `0 <= (array_length t)`)
  (Pre11: `0 <= 0` /\ `0 <= (array_length t)`)
  (Variant1: Z)
  (i0: Z)
  (Pre8: Variant1 = `(array_length t) - i0`)
  (Pre7: `0 <= i0` /\ `i0 <= (array_length t)`)
  (Test3: `i0 <> (array_length t)`)
  (Test1: `(access t i0) <> 0`)
  (Pre6: `0 <= i0 + 1` /\ `i0 + 1 <= (array_length t)`)
  (Post11: ((k:Z)
            (`i0 + 1 <= k` /\ `k < (array_length t)` -> `(access t k) <> 0`)))
  ((k:Z) (`i0 <= k` /\ `k < (array_length t)` -> `(access t k) <> 0`)).
Proof.
Intuition.
Assert k=i0 \/ `i0<k`. Omega. Intuition.
Subst k; Auto.
Apply Post11 with k; Omega.
Save.

