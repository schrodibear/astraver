
;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom access_update
 (FORALL (t i v) (EQ (access (update t i v) i) v)))

(BG_PUSH
 ;; Why axiom access_update_neq
 (FORALL (t i j v)
 (IMPLIES (NEQ i j) (EQ (access (update t i v) j) (access t j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j)
 (FORALL (t v) (EQ (access (update t i v) j) (access t j))))))

(DEFPRED (sorted_array t i j)
  (FORALL (k)
  (IMPLIES (AND (<= i k) (< k j)) (<= (access t k) (access t (+ k 1))))))

(DEFPRED (exchange t1 t2 i j)
  (AND (EQ (array_length t1) (array_length t2))
  (AND (EQ (access t1 i) (access t2 j))
  (AND (EQ (access t2 i) (access t1 j))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i) (NEQ k j)) (EQ (access t1 k) (access t2 k))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t) (EQ (permut t t) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1 t2)
 (IMPLIES (EQ (permut t1 t2) |@true|) (EQ (permut t2 t1) |@true|))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1 t2 t3)
 (IMPLIES (AND (EQ (permut t1 t2) |@true|) (EQ (permut t2 t3) |@true|))
 (EQ (permut t1 t3) |@true|))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (t i j)
 (EQ (permut t (update (update t i (access t j)) j (access t i))) |@true|)))

(BG_PUSH
 ;; Why axiom sub_permut_refl
 (FORALL (t g d) (EQ (sub_permut g d t t) |@true|)))

(BG_PUSH
 ;; Why axiom sub_permut_sym
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (sub_permut g d t2 t1) |@true|))))

(BG_PUSH
 ;; Why axiom sub_permut_trans
 (FORALL (t1 t2 t3 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))

 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_1
 (FORALL (t g d i j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (EQ (sub_permut
 g d t (update (update t i (access t j)) j (access t i))) |@true|)))

 (FORALL (g d i j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (FORALL (t)
 (EQ (sub_permut
 g d t (update (update t i (access t j)) j (access t i))) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_2
 (FORALL (t1 t2 g d i j)
 (IMPLIES
 (AND (<= g i)
 (AND (<= i d) (AND (<= g j) (AND (<= j d) (exchange t1 t2 i j)))))
 (EQ (sub_permut g d t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom sub_permut_weakening
 (FORALL (a1 a2 l1 r1 l2 r2)
 (IMPLIES (AND (<= l1 l2) (AND (<= l2 r2) (<= r2 r1)))
 (IMPLIES (EQ (sub_permut l2 r2 a1 a2) |@true|)
 (EQ (sub_permut l1 r1 a1 a2) |@true|))))

 (FORALL (l1 r1 l2 r2)
 (IMPLIES (AND (<= l1 l2) (AND (<= l2 r2) (<= r2 r1)))
 (FORALL (a2 a1)
 (IMPLIES (EQ (sub_permut l2 r2 a1 a2) |@true|)
 (EQ (sub_permut l1 r1 a1 a2) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_permut_eq
 (FORALL (a1 a2 l r)
 (IMPLIES (<= l r)
 (IMPLIES (EQ (sub_permut l r a1 a2) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< r i)) (EQ (access a2 i) (access a1 i)))))))

 (FORALL (l r)
 (IMPLIES (<= l r)
 (FORALL (a2 a1)
 (IMPLIES (EQ (sub_permut l r a1 a2) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< r i)) (EQ (access a2 i) (access a1 i)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_permut
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|) (EQ (permut t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (t i v) (EQ (array_length (update t i v)) (array_length t))))

(BG_PUSH
 ;; Why axiom sub_permut_array_length
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2)))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (t1 t2)
 (IMPLIES (EQ (permut t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2)))))

(BG_PUSH
 ;; Why axiom F_0
 (EQ (F 0) 1))

(BG_PUSH
 ;; Why axiom F_1
 (EQ (F 1) 1))

(BG_PUSH
 ;; Why axiom F_n
 (FORALL (n) (IMPLIES (>= n 2) (EQ (F n) (+ (F (- n 1)) (F (- n 2)))))))

;; fib1_po_1, File "fib.mlw", line 24, characters 4-17
(FORALL (n) (IMPLIES (>= n 0) (IMPLIES (<= n 1) (EQ 1 (F n)))))

;; fib1_po_2, File "fib.mlw", line 23, characters 6-18
(FORALL (n)
(IMPLIES (>= n 0) (IMPLIES (> n 1) (AND (<= 0 n) (< (- n 1) n)))))

;; fib1_po_3, File "fib.mlw", line 23, characters 6-18
(FORALL (n)
(IMPLIES (>= n 0)
(IMPLIES (> n 1) (IMPLIES (AND (<= 0 n) (< (- n 1) n)) (>= (- n 1) 0)))))

;; fib1_po_4, File "fib.mlw", line 23, characters 23-35
(FORALL (n)
(IMPLIES (>= n 0)
(IMPLIES (> n 1)
(IMPLIES (AND (<= 0 n) (< (- n 1) n))
(IMPLIES (>= (- n 1) 0)
(FORALL (result)
(IMPLIES (EQ result (F (- n 1))) (AND (<= 0 n) (< (- n 2) n)))))))))

;; fib1_po_5, File "fib.mlw", line 23, characters 23-35
(FORALL (n)
(IMPLIES (>= n 0)
(IMPLIES (> n 1)
(IMPLIES (AND (<= 0 n) (< (- n 1) n))
(IMPLIES (>= (- n 1) 0)
(FORALL (result)
(IMPLIES (EQ result (F (- n 1)))
(IMPLIES (AND (<= 0 n) (< (- n 2) n)) (>= (- n 2) 0)))))))))

;; fib1_po_6, File "fib.mlw", line 24, characters 4-17
(FORALL (n)
(IMPLIES (>= n 0)
(IMPLIES (> n 1)
(IMPLIES (AND (<= 0 n) (< (- n 1) n))
(IMPLIES (>= (- n 1) 0)
(FORALL (result)
(IMPLIES (EQ result (F (- n 1)))
(IMPLIES (AND (<= 0 n) (< (- n 2) n))
(IMPLIES (>= (- n 2) 0)
(FORALL (result0)
(IMPLIES (EQ result0 (F (- n 2))) (EQ (+ result result0) (F n)))))))))))))

;; fib2_aux_po_1, File "fib.mlw", line 34, characters 4-17
(FORALL (n)
(FORALL (x)
(FORALL (fx)
(FORALL (fx_1)
(IMPLIES (AND (AND (<= 1 x) (<= x n))
         (AND (EQ fx (F x)) (EQ fx_1 (F (- x 1)))))
(IMPLIES (EQ x n) (EQ fx (F n))))))))

;; fib2_aux_po_2, File "fib.mlw", line 33, characters 6-35
(FORALL (n)
(FORALL (x)
(FORALL (fx)
(FORALL (fx_1)
(IMPLIES (AND (AND (<= 1 x) (<= x n))
         (AND (EQ fx (F x)) (EQ fx_1 (F (- x 1)))))
(IMPLIES (NEQ x n) (AND (<= 0 (- n x)) (< (- n (+ x 1)) (- n x)))))))))

;; fib2_aux_po_3, File "fib.mlw", line 33, characters 6-35
(FORALL (n)
(FORALL (x)
(FORALL (fx)
(FORALL (fx_1)
(IMPLIES (AND (AND (<= 1 x) (<= x n))
         (AND (EQ fx (F x)) (EQ fx_1 (F (- x 1)))))
(IMPLIES (NEQ x n)
(IMPLIES (AND (<= 0 (- n x)) (< (- n (+ x 1)) (- n x)))
(AND (AND (<= 1 (+ x 1)) (<= (+ x 1) n))
(AND (EQ (+ fx fx_1) (F (+ x 1))) (EQ fx (F (- (+ x 1) 1))))))))))))

;; fib2_po_1, File "fib.mlw", line 39, characters 4-17
(FORALL (n) (IMPLIES (>= n 0) (IMPLIES (<= n 1) (EQ 1 (F n)))))

;; fib2_po_2, File "fib.mlw", line 38, characters 26-42
(FORALL (n)
(IMPLIES (>= n 0)
(IMPLIES (> n 1)
(AND (AND (<= 1 1) (<= 1 n)) (AND (EQ 1 (F 1)) (EQ 1 (F (- 1 1))))))))

;; fib2b_po_1, File "fib.mlw", line 49, characters 24-40
(FORALL (n)
(IMPLIES (> n 1)
(AND (AND (<= 0 (- n 1)) (< (- n 1) n))
(AND (EQ 1 (F (- n (- n 1)))) (EQ 1 (F (- (- n (- n 1)) 1)))))))

;; fib2b_po_2, File "fib.mlw", line 47, characters 6-19
(FORALL (n)
(FORALL (x)
(FORALL (fx)
(FORALL (fx_1)
(IMPLIES (AND (AND (<= 0 x) (< x n))
         (AND (EQ fx (F (- n x))) (EQ fx_1 (F (- (- n x) 1)))))
(IMPLIES (EQ x 0) (EQ fx (F n))))))))

;; fib2b_po_3, File "fib.mlw", line 46, characters 26-51
(FORALL (n)
(FORALL (x)
(FORALL (fx)
(FORALL (fx_1)
(IMPLIES (AND (AND (<= 0 x) (< x n))
         (AND (EQ fx (F (- n x))) (EQ fx_1 (F (- (- n x) 1)))))
(IMPLIES (NEQ x 0) (AND (<= 0 x) (< (- x 1) x))))))))

;; fib2b_po_4, File "fib.mlw", line 46, characters 26-51
(FORALL (n)
(FORALL (x)
(FORALL (fx)
(FORALL (fx_1)
(IMPLIES (AND (AND (<= 0 x) (< x n))
         (AND (EQ fx (F (- n x))) (EQ fx_1 (F (- (- n x) 1)))))
(IMPLIES (NEQ x 0)
(IMPLIES (AND (<= 0 x) (< (- x 1) x))
(AND (AND (<= 0 (- x 1)) (< (- x 1) n))
(AND (EQ (+ fx fx_1) (F (- n (- x 1)))) (EQ fx (F (- (- n (- x 1)) 1))))))))))))

;; fib2c_aux_po_1, File "fib.mlw", line 56, characters 4-67
(FORALL (n)
(FORALL (fx)
(FORALL (fx_1)
(IMPLIES (<= 0 n)
(IMPLIES (EQ n 0)
(FORALL (x)
(IMPLIES (<= 1 x)
(IMPLIES (EQ fx (F x)) (IMPLIES (EQ fx_1 (F (- x 1))) (EQ fx (F (+ x n))))))))))))

;; fib2c_aux_po_2, File "fib.mlw", line 55, characters 24-52
(FORALL (n)
(IMPLIES (<= 0 n) (IMPLIES (NEQ n 0) (AND (<= 0 n) (< (- n 1) n)))))

;; fib2c_aux_po_3, File "fib.mlw", line 55, characters 24-52
(FORALL (n)
(IMPLIES (<= 0 n)
(IMPLIES (NEQ n 0) (IMPLIES (AND (<= 0 n) (< (- n 1) n)) (<= 0 (- n 1))))))

;; fib2c_aux_po_4, File "fib.mlw", line 56, characters 4-67
(FORALL (n)
(FORALL (fx)
(FORALL (fx_1)
(IMPLIES (<= 0 n)
(IMPLIES (NEQ n 0)
(IMPLIES (AND (<= 0 n) (< (- n 1) n))
(IMPLIES (<= 0 (- n 1))
(FORALL (result)
(IMPLIES (FORALL (x)
         (IMPLIES (<= 1 x)
         (IMPLIES (EQ (+ fx fx_1) (F x))
         (IMPLIES (EQ fx (F (- x 1))) (EQ result (F (+ x (- n 1))))))))
(FORALL (x)
(IMPLIES (<= 1 x)
(IMPLIES (EQ fx (F x))
(IMPLIES (EQ fx_1 (F (- x 1))) (EQ result (F (+ x n))))))))))))))))

;; fib2c_po_1, File "fib.mlw", line 61, characters 4-17
(FORALL (n) (IMPLIES (>= n 0) (IMPLIES (<= n 1) (EQ 1 (F n)))))

;; fib2c_po_2, File "fib.mlw", line 60, characters 25-44
(FORALL (n) (IMPLIES (>= n 0) (IMPLIES (> n 1) (<= 0 (- n 1)))))

;; fib2c_po_3, File "fib.mlw", line 61, characters 4-17
(FORALL (n)
(IMPLIES (>= n 0)
(IMPLIES (> n 1)
(IMPLIES (<= 0 (- n 1))
(FORALL (result)
(IMPLIES (FORALL (x)
         (IMPLIES (<= 1 x)
         (IMPLIES (EQ 1 (F x))
         (IMPLIES (EQ 1 (F (- x 1))) (EQ result (F (+ x (- n 1))))))))
(EQ result (F n))))))))

;; fib3_po_1, File "fib.mlw", line 73, characters 18-57
(FORALL (n)
(IMPLIES (>= n 0)
(IMPLIES (> n 0)
(AND (AND (<= 1 1) (<= 1 n)) (AND (EQ 1 (F 1)) (EQ 1 (F (- 1 1))))))))

;; fib3_po_2, File "fib.mlw", line 73, characters 18-57
(FORALL (n)
(IMPLIES (>= n 0)
(IMPLIES (> n 0)
(FORALL (k)
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (AND (<= 1 k) (<= k n)) (AND (EQ x (F k)) (EQ y (F (- k 1)))))
(IMPLIES (< k n)
(FORALL (y0)
(IMPLIES (EQ y0 x)
(FORALL (x0)
(IMPLIES (EQ x0 (+ x y))
(FORALL (k0)
(IMPLIES (EQ k0 (+ k 1))
(AND (AND (<= 1 k0) (<= k0 n)) (AND (EQ x0 (F k0)) (EQ y0 (F (- k0 1)))))))))))))))))))

;; fib3_po_3, File "fib.mlw", line 73, characters 67-72
(FORALL (n)
(IMPLIES (>= n 0)
(IMPLIES (> n 0)
(FORALL (k)
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (AND (<= 1 k) (<= k n)) (AND (EQ x (F k)) (EQ y (F (- k 1)))))
(IMPLIES (< k n)
(FORALL (y0)
(IMPLIES (EQ y0 x)
(FORALL (x0)
(IMPLIES (EQ x0 (+ x y))
(FORALL (k0)
(IMPLIES (EQ k0 (+ k 1)) (AND (<= 0 (- n k)) (< (- n k0) (- n k)))))))))))))))))

;; fib3_po_4, File "fib.mlw", line 83, characters 3-16
(FORALL (n)
(IMPLIES (>= n 0)
(IMPLIES (> n 0)
(FORALL (k)
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (AND (<= 1 k) (<= k n)) (AND (EQ x (F k)) (EQ y (F (- k 1)))))
(IMPLIES (>= k n) (EQ x (F n))))))))))

;; fib3_po_5, File "fib.mlw", line 83, characters 3-16
(FORALL (n) (IMPLIES (>= n 0) (IMPLIES (<= n 0) (EQ 1 (F n)))))

;; fib4_po_1, File "fib.mlw", line 107, characters 4-17
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (<= 0 n) (< n (array_length t)))
(IMPLIES (<= n 1) (EQ 1 (F n))))))

;; fib4_po_2, File "fib.mlw", line 95, characters 5-14
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (<= 0 n) (< n (array_length t)))
(IMPLIES (> n 1) (AND (<= 0 0) (< 0 (array_length t)))))))

;; fib4_po_3, File "fib.mlw", line 96, characters 5-14
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (<= 0 n) (< n (array_length t)))
(IMPLIES (> n 1)
(IMPLIES (AND (<= 0 0) (< 0 (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t 0 1)) (AND (<= 0 1) (< 1 (array_length t0))))))))))

;; fib4_po_4, File "fib.mlw", line 99, characters 19-131
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (<= 0 n) (< n (array_length t)))
(IMPLIES (> n 1)
(IMPLIES (AND (<= 0 0) (< 0 (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t 0 1))
(IMPLIES (AND (<= 0 1) (< 1 (array_length t0)))
(FORALL (t1)
(IMPLIES (EQ t1 (update t0 1 1))
(AND (AND (<= 2 2) (<= 2 (+ n 1)))
(AND (EQ (array_length t1) (array_length t))
(FORALL (i) (IMPLIES (AND (<= 0 i) (< i 2)) (EQ (access t1 i) (F i))))))))))))))))

;; fib4_po_5, File "fib.mlw", line 102, characters 16-25
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (<= 0 n) (< n (array_length t)))
(IMPLIES (> n 1)
(IMPLIES (AND (<= 0 0) (< 0 (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t 0 1))
(IMPLIES (AND (<= 0 1) (< 1 (array_length t0)))
(FORALL (t1)
(IMPLIES (EQ t1 (update t0 1 1))
(FORALL (k)
(FORALL (t2)
(IMPLIES (AND (AND (<= 2 k) (<= k (+ n 1)))
         (AND (EQ (array_length t2) (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (< i k)) (EQ (access t2 i) (F i))))))
(IMPLIES (<= k n) (AND (<= 0 (- k 1)) (< (- k 1) (array_length t2)))))))))))))))))

;; fib4_po_6, File "fib.mlw", line 102, characters 28-37
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (<= 0 n) (< n (array_length t)))
(IMPLIES (> n 1)
(IMPLIES (AND (<= 0 0) (< 0 (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t 0 1))
(IMPLIES (AND (<= 0 1) (< 1 (array_length t0)))
(FORALL (t1)
(IMPLIES (EQ t1 (update t0 1 1))
(FORALL (k)
(FORALL (t2)
(IMPLIES (AND (AND (<= 2 k) (<= k (+ n 1)))
         (AND (EQ (array_length t2) (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (< i k)) (EQ (access t2 i) (F i))))))
(IMPLIES (<= k n)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t2)))
(FORALL (result)
(IMPLIES (EQ result (access t2 (- k 1)))
(AND (<= 0 (- k 2)) (< (- k 2) (array_length t2))))))))))))))))))))

;; fib4_po_7, File "fib.mlw", line 102, characters 7-37
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (<= 0 n) (< n (array_length t)))
(IMPLIES (> n 1)
(IMPLIES (AND (<= 0 0) (< 0 (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t 0 1))
(IMPLIES (AND (<= 0 1) (< 1 (array_length t0)))
(FORALL (t1)
(IMPLIES (EQ t1 (update t0 1 1))
(FORALL (k)
(FORALL (t2)
(IMPLIES (AND (AND (<= 2 k) (<= k (+ n 1)))
         (AND (EQ (array_length t2) (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (< i k)) (EQ (access t2 i) (F i))))))
(IMPLIES (<= k n)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t2)))
(FORALL (result)
(IMPLIES (EQ result (access t2 (- k 1)))
(IMPLIES (AND (<= 0 (- k 2)) (< (- k 2) (array_length t2)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t2 (- k 2)))
(AND (<= 0 k) (< k (array_length t2)))))))))))))))))))))))

;; fib4_po_8, File "fib.mlw", line 99, characters 19-131
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (<= 0 n) (< n (array_length t)))
(IMPLIES (> n 1)
(IMPLIES (AND (<= 0 0) (< 0 (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t 0 1))
(IMPLIES (AND (<= 0 1) (< 1 (array_length t0)))
(FORALL (t1)
(IMPLIES (EQ t1 (update t0 1 1))
(FORALL (k)
(FORALL (t2)
(IMPLIES (AND (AND (<= 2 k) (<= k (+ n 1)))
         (AND (EQ (array_length t2) (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (< i k)) (EQ (access t2 i) (F i))))))
(IMPLIES (<= k n)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t2)))
(FORALL (result)
(IMPLIES (EQ result (access t2 (- k 1)))
(IMPLIES (AND (<= 0 (- k 2)) (< (- k 2) (array_length t2)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t2 (- k 2)))
(IMPLIES (AND (<= 0 k) (< k (array_length t2)))
(FORALL (t3)
(IMPLIES (EQ t3 (update t2 k (+ result result0)))
(FORALL (k0)
(IMPLIES (EQ k0 (+ k 1))
(AND (AND (<= 2 k0) (<= k0 (+ n 1)))
(AND (EQ (array_length t3) (array_length t))
(FORALL (i) (IMPLIES (AND (<= 0 i) (< i k0)) (EQ (access t3 i) (F i)))))))))))))))))))))))))))))))

;; fib4_po_9, File "fib.mlw", line 101, characters 17-24
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (<= 0 n) (< n (array_length t)))
(IMPLIES (> n 1)
(IMPLIES (AND (<= 0 0) (< 0 (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t 0 1))
(IMPLIES (AND (<= 0 1) (< 1 (array_length t0)))
(FORALL (t1)
(IMPLIES (EQ t1 (update t0 1 1))
(FORALL (k)
(FORALL (t2)
(IMPLIES (AND (AND (<= 2 k) (<= k (+ n 1)))
         (AND (EQ (array_length t2) (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (< i k)) (EQ (access t2 i) (F i))))))
(IMPLIES (<= k n)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t2)))
(FORALL (result)
(IMPLIES (EQ result (access t2 (- k 1)))
(IMPLIES (AND (<= 0 (- k 2)) (< (- k 2) (array_length t2)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t2 (- k 2)))
(IMPLIES (AND (<= 0 k) (< k (array_length t2)))
(FORALL (t3)
(IMPLIES (EQ t3 (update t2 k (+ result result0)))
(FORALL (k0)
(IMPLIES (EQ k0 (+ k 1))
(AND (<= 0 (- (+ n 1) k)) (< (- (+ n 1) k0) (- (+ n 1) k))))))))))))))))))))))))))))

;; fib4_po_10, File "fib.mlw", line 105, characters 5-9
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (<= 0 n) (< n (array_length t)))
(IMPLIES (> n 1)
(IMPLIES (AND (<= 0 0) (< 0 (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t 0 1))
(IMPLIES (AND (<= 0 1) (< 1 (array_length t0)))
(FORALL (t1)
(IMPLIES (EQ t1 (update t0 1 1))
(FORALL (k)
(FORALL (t2)
(IMPLIES (AND (AND (<= 2 k) (<= k (+ n 1)))
         (AND (EQ (array_length t2) (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (< i k)) (EQ (access t2 i) (F i))))))
(IMPLIES (> k n) (AND (<= 0 n) (< n (array_length t2)))))))))))))))))

;; fib4_po_11, File "fib.mlw", line 107, characters 4-17
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (<= 0 n) (< n (array_length t)))
(IMPLIES (> n 1)
(IMPLIES (AND (<= 0 0) (< 0 (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t 0 1))
(IMPLIES (AND (<= 0 1) (< 1 (array_length t0)))
(FORALL (t1)
(IMPLIES (EQ t1 (update t0 1 1))
(FORALL (k)
(FORALL (t2)
(IMPLIES (AND (AND (<= 2 k) (<= k (+ n 1)))
         (AND (EQ (array_length t2) (array_length t))
         (FORALL (i)
         (IMPLIES (AND (<= 0 i) (< i k)) (EQ (access t2 i) (F i))))))
(IMPLIES (> k n)
(IMPLIES (AND (<= 0 n) (< n (array_length t2)))
(FORALL (result) (IMPLIES (EQ result (access t2 n)) (EQ result (F n)))))))))))))))))))

