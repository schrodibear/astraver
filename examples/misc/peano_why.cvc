
UNIT: TYPE;
tt: UNIT;
array_length_INT: [ARRAY INT OF INT -> INT];
sqrt_real: [REAL -> REAL];
int_of_real: [REAL -> INT];
mod_int: [[INT, INT] -> INT];

%%%% DO NOT EDIT BELOW THIS LINE

%% Why logic sorted_array
sorted_array: [[ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic exchange
exchange: [[ARRAY INT OF INT, ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic sub_permut
sub_permut: [[INT, INT, ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic permut
permut: [[ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic array_le
array_le: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_ge
array_ge: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_length
array_length_INT: [ARRAY INT OF INT -> INT];

%% Why logic store
store_INT: [[ARRAY INT OF INT, INT, INT] -> UNIT];

%% Why axiom array_length_store
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (v:INT):
       (array_length_INT((t WITH [i] := v)) = array_length_INT(t)))));

%% Why logic access
access_INT: [[ARRAY INT OF INT, INT] -> INT];

%% Why axiom exchange_def
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (exchange(t1, t2, i, j) <=>
       ((array_length_INT(t1) = array_length_INT(t2)) AND
       ((t1[i] = t2[j]) AND
       ((t2[i] = t1[j]) AND
       (FORALL (k:INT): (((k /= i) AND (k /= j)) => (t1[k] = t2[k])))))))))));

%% Why axiom permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT): permut(t, t));

%% Why axiom permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT): (permut(t1, t2) => permut(t2, t1))));

%% Why axiom permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       ((permut(t1, t2) AND permut(t2, t3)) => permut(t1, t3)))));

%% Why axiom permut_exchange
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT): permut(t, ((t WITH [i] := t[j]) WITH [j] := t[i])))));

%% Why axiom permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (permut(t1, t2) => (array_length_INT(t1) = array_length_INT(t2)))));

%% Why axiom sub_permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT): (FORALL (d:INT): sub_permut(g, d, t, t))));

%% Why axiom sub_permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) => sub_permut(g, d, t2, t1))))));

%% Why axiom sub_permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (sub_permut(g, d, t2, t3) => sub_permut(g, d, t1, t3))))))));

%% Why axiom sub_permut_exchange_1
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND ((i <= d) AND ((g <= j) AND (j <= d)))) =>
       sub_permut(g, d, t, ((t WITH [i] := t[j]) WITH [j] := t[i]))))))));

%% Why axiom sub_permut_exchange_2
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND
        ((i <= d) AND ((g <= j) AND ((j <= d) AND exchange(t1, t2, i, j))))) =>
       sub_permut(g, d, t1, t2))))))));

%% Why axiom sub_permut_permut
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT): (sub_permut(g, d, t1, t2) => permut(t1, t2))))));

%% Why axiom sub_permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (array_length_INT(t1) = array_length_INT(t2)))))));

%% Why axiom sorted_array_def
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (sorted_array(t, i, j) <=>
       (FORALL (k:INT): (((i <= k) AND (k < j)) => (t[k] <= t[(k + 1)])))))));

%% add1_po_1, Why obligation from file "peano.mlw", characters 272-301
QUERY (FORALL (y:INT):
      (FORALL (x:INT):
      ((y >= 0) =>
      (FORALL (z:INT):
      ((z = y) =>
      (FORALL (Variant1:INT):
      (FORALL (x0:INT):
      (FORALL (z1:INT):
      ((Variant1 = z1) =>
      (((0 <= z1) AND (x0 = (x + (y - z1)))) =>
      ((z1 > 0) =>
      (FORALL (x1:INT):
      ((x1 = (x0 + 1)) =>
      (FORALL (z2:INT):
      ((z2 = (z1 - 1)) =>
      (((0 <= z2) AND (x1 = (x + (y - z2)))) AND ((0 <= z1) AND (z2 < z1))))))))))))))))));

%% add1_po_2, Why obligation from file "peano.mlw", characters 178-309
QUERY (FORALL (y:INT):
      (FORALL (x:INT):
      ((y >= 0) =>
      (FORALL (z:INT):
      ((z = y) =>
      (FORALL (Variant1:INT):
      (FORALL (x0:INT):
      (FORALL (z1:INT):
      ((Variant1 = z1) =>
      (((0 <= z1) AND (x0 = (x + (y - z1)))) =>
      ((z1 <= 0) => (x0 = (x + y)))))))))))));

%% add1_po_3, Why obligation from file "peano.mlw", characters 211-247
QUERY (FORALL (y:INT):
      (FORALL (x:INT):
      ((y >= 0) =>
      (FORALL (z:INT): ((z = y) => ((0 <= z) AND (x = (x + (y - z)))))))));

%% u1_po_1, Why obligation from file "peano.mlw", characters 367-391
QUERY (FORALL (r:INT):
      ((r = 3) => (FORALL (result:INT): ((result = 7) => (7 >= 0)))));

%% u1_po_2, Why obligation from file "peano.mlw", characters 367-391
QUERY (FORALL (r:INT):
      ((r = 3) =>
      (FORALL (result:INT):
      ((result = 7) =>
      ((7 >= 0) => (FORALL (r1:INT): ((r1 = (r + 7)) => (r1 = 10))))))));

%% rec_add1_po_1, Why obligation from file "peano.mlw", characters 527-545
QUERY (FORALL (y:INT):
      ((y >= 0) =>
      (FORALL (Variant1:INT):
      (FORALL (y0:INT):
      (FORALL (x0:INT):
      ((Variant1 = y0) =>
      ((y0 >= 0) =>
      ((0 < y0) => (FORALL (x1:INT): ((x1 = (x0 + 1)) => ((y0 - 1) >= 0)))))))))));

%% rec_add1_po_2, Why obligation from file "peano.mlw", characters 480-567
QUERY (FORALL (y:INT):
      ((y >= 0) =>
      (FORALL (Variant1:INT):
      (FORALL (y0:INT):
      (FORALL (x0:INT):
      ((Variant1 = y0) =>
      ((y0 >= 0) =>
      ((0 < y0) =>
      (FORALL (x1:INT):
      ((x1 = (x0 + 1)) =>
      (((y0 - 1) >= 0) =>
      (FORALL (result1:INT):
      ((result1 = (y0 - 1)) =>
      (((y0 - 1) >= 0) => ((0 <= Variant1) AND (result1 < Variant1))))))))))))))));

%% rec_add1_po_3, Why obligation from file "peano.mlw", characters 508-549
QUERY (FORALL (y:INT):
      ((y >= 0) =>
      (FORALL (Variant1:INT):
      (FORALL (y0:INT):
      (FORALL (x0:INT):
      ((Variant1 = y0) =>
      ((y0 >= 0) =>
      ((0 < y0) =>
      (FORALL (x1:INT):
      ((x1 = (x0 + 1)) =>
      (((y0 - 1) >= 0) =>
      (FORALL (x2:INT): ((x2 = (x1 + (y0 - 1))) => (x2 = (x0 + y0)))))))))))))));

%% rec_add1_po_4, Why obligation from file "peano.mlw", characters 549-549
QUERY (FORALL (y:INT):
      ((y >= 0) =>
      (FORALL (Variant1:INT):
      (FORALL (y0:INT):
      (FORALL (x0:INT):
      ((Variant1 = y0) =>
      ((y0 >= 0) =>
      ((0 >= y0) =>
      (FORALL (result0:UNIT): ((result0 = tt) => (x0 = (x0 + y0))))))))))));

%% u11_po_1, Why obligation from file "peano.mlw", characters 608-636
QUERY (FORALL (r:INT):
      ((r = 3) => (FORALL (result:INT): ((result = 7) => (7 >= 0)))));

%% u11_po_2, Why obligation from file "peano.mlw", characters 608-636
QUERY (FORALL (r:INT):
      ((r = 3) =>
      (FORALL (result:INT):
      ((result = 7) =>
      ((7 >= 0) => (FORALL (r1:INT): ((r1 = (r + 7)) => (r1 = 10))))))));

%% mult1_po_1, Why obligation from file "peano.mlw", characters 933-947
QUERY (FORALL (y:INT):
      (FORALL (x:INT):
      (((x >= 0) AND (y >= 0)) =>
      (FORALL (z:INT):
      ((z = y) =>
      (FORALL (savex:INT):
      ((savex = x) =>
      (FORALL (x0:INT):
      ((x0 = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (x1:INT):
      (FORALL (z1:INT):
      ((Variant1 = z1) =>
      (((0 <= z1) AND (x1 = (x * (y - z1)))) => ((z1 > 0) => (savex >= 0))))))))))))))));

%% mult1_po_2, Why obligation from file "peano.mlw", characters 933-967
QUERY (FORALL (y:INT):
      (FORALL (x:INT):
      (((x >= 0) AND (y >= 0)) =>
      (FORALL (z:INT):
      ((z = y) =>
      (FORALL (savex:INT):
      ((savex = x) =>
      (FORALL (x0:INT):
      ((x0 = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (x1:INT):
      (FORALL (z1:INT):
      ((Variant1 = z1) =>
      (((0 <= z1) AND (x1 = (x * (y - z1)))) =>
      ((z1 > 0) =>
      ((savex >= 0) =>
      (FORALL (x2:INT):
      ((x2 = (x1 + savex)) =>
      (FORALL (z2:INT):
      ((z2 = (z1 - 1)) =>
      (((0 <= z2) AND (x2 = (x * (y - z2)))) AND ((0 <= z1) AND (z2 < z1)))))))))))))))))))))));

%% mult1_po_3, Why obligation from file "peano.mlw", characters 833-977
QUERY (FORALL (y:INT):
      (FORALL (x:INT):
      (((x >= 0) AND (y >= 0)) =>
      (FORALL (z:INT):
      ((z = y) =>
      (FORALL (savex:INT):
      ((savex = x) =>
      (FORALL (x0:INT):
      ((x0 = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (x1:INT):
      (FORALL (z1:INT):
      ((Variant1 = z1) =>
      (((0 <= z1) AND (x1 = (x * (y - z1)))) =>
      ((z1 <= 0) => (x1 = (x * y)))))))))))))))));

%% mult1_po_4, Why obligation from file "peano.mlw", characters 868-904
QUERY (FORALL (y:INT):
      (FORALL (x:INT):
      (((x >= 0) AND (y >= 0)) =>
      (FORALL (z:INT):
      ((z = y) =>
      (FORALL (savex:INT):
      ((savex = x) =>
      (FORALL (x0:INT): ((x0 = 0) => ((0 <= z) AND (x0 = (x * (y - z)))))))))))));

%% u2_po_1, Why obligation from file "peano.mlw", characters 1042-1067
QUERY (FORALL (r:INT):
      ((r = 4) =>
      (FORALL (result:INT): ((result = 6) => ((r >= 0) AND (6 >= 0))))));

%% u2_po_2, Why obligation from file "peano.mlw", characters 1042-1067
QUERY (FORALL (r:INT):
      ((r = 4) =>
      (FORALL (result:INT):
      ((result = 6) =>
      (((r >= 0) AND (6 >= 0)) =>
      (FORALL (r1:INT): ((r1 = (r * 6)) => (r1 = 24))))))));

%% mult2_po_1, Why obligation from file "peano.mlw", characters 1330-1375
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (((x >= 0) AND (y >= 0)) =>
      (FORALL (Variant1:INT):
      (FORALL (x0:INT):
      (FORALL (y0:INT):
      ((Variant1 = x0) =>
      (((x0 >= 0) AND (y0 >= 0)) =>
      ((x0 /= 0) =>
      (((((x0 - 1) >= 0) AND (y0 >= 0)) AND (y0 >= 0)) AND (y0 >= 0)))))))))));

%% mult2_po_2, Why obligation from file "peano.mlw", characters 1185-1391
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (((x >= 0) AND (y >= 0)) =>
      (FORALL (Variant1:INT):
      (FORALL (x0:INT):
      (FORALL (y0:INT):
      ((Variant1 = x0) =>
      (((x0 >= 0) AND (y0 >= 0)) =>
      (((x0 /= 0) =>
       (((((x0 - 1) >= 0) AND (y0 >= 0)) AND (y0 >= 0)) AND (y0 >= 0))) =>
      (FORALL (result:INT):
      ((((x0 = 0) AND (result = 0)) OR
       ((x0 /= 0) AND (result = (y0 + ((x0 - 1) * y0))))) =>
      (result = (x0 * y0)))))))))))));

