
UNIT: TYPE;
tt: UNIT;
array_length_INT: [ARRAY INT OF INT -> INT]; %% should be polymorphic
sqrt_real: [REAL -> REAL];
int_of_real: [REAL -> INT];
mod_int: [[INT, INT] -> INT];


%%%% DO NOT EDIT BELOW THIS LINE

%% Why logic sorted_array
sorted_array: [[ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic exchange
exchange: [[ARRAY INT OF INT, ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic sub_permut
sub_permut: [[INT, INT, ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic permut
permut: [[ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic array_le
array_le: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_ge
array_ge: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_length
array_length_INT: [ARRAY INT OF INT -> INT];

%% Why logic store
store_INT: [[ARRAY INT OF INT, INT, INT] -> UNIT];

%% Why axiom array_length_store
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (v:INT):
       (array_length_INT((t WITH [i] := v)) = array_length_INT(t)))));

%% Why logic access
access_INT: [[ARRAY INT OF INT, INT] -> INT];

%% Why axiom exchange_def
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (exchange(t1, t2, i, j) <=>
       ((array_length_INT(t1) = array_length_INT(t2)) AND
       ((t1[i] = t2[j]) AND
       ((t2[i] = t1[j]) AND
       (FORALL (k:INT): (((k /= i) AND (k /= j)) => (t1[k] = t2[k])))))))))));

%% Why axiom permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT): permut(t, t));

%% Why axiom permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT): (permut(t1, t2) => permut(t2, t1))));

%% Why axiom permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       ((permut(t1, t2) AND permut(t2, t3)) => permut(t1, t3)))));

%% Why axiom permut_exchange
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT): permut(t, ((t WITH [i] := t[j]) WITH [j] := t[i])))));

%% Why axiom permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (permut(t1, t2) => (array_length_INT(t1) = array_length_INT(t2)))));

%% Why axiom sub_permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT): (FORALL (d:INT): sub_permut(g, d, t, t))));

%% Why axiom sub_permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) => sub_permut(g, d, t2, t1))))));

%% Why axiom sub_permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (sub_permut(g, d, t2, t3) => sub_permut(g, d, t1, t3))))))));

%% Why axiom sub_permut_exchange_1
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND ((i <= d) AND ((g <= j) AND (j <= d)))) =>
       sub_permut(g, d, t, ((t WITH [i] := t[j]) WITH [j] := t[i]))))))));

%% Why axiom sub_permut_exchange_2
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND
        ((i <= d) AND ((g <= j) AND ((j <= d) AND exchange(t1, t2, i, j))))) =>
       sub_permut(g, d, t1, t2))))))));

%% Why axiom sub_permut_permut
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT): (sub_permut(g, d, t1, t2) => permut(t1, t2))))));

%% Why axiom sub_permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (array_length_INT(t1) = array_length_INT(t2)))))));

%% Why axiom sorted_array_def
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (sorted_array(t, i, j) <=>
       (FORALL (k:INT): (((i <= k) AND (k < j)) => (t[k] <= t[(k + 1)])))))));

%% swap1_po_1, Why obligation from file "swap0.mlw", characters 149-174
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (FORALL (t:INT):
      ((t = x) =>
      (FORALL (x0:INT):
      ((x0 = y) => (FORALL (y0:INT): ((y0 = t) => ((x0 = y) AND (y0 = x))))))))));

%% swap2_po_1, Why obligation from file "swap0.mlw", characters 316-358
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (FORALL (t:INT):
      ((t = x) =>
      (FORALL (x0:INT):
      ((x0 = y) => (FORALL (y0:INT): ((y0 = t) => ((x0 = y) AND (y0 = x))))))))));

%% swap3_po_1, Why obligation from file "swap0.mlw", characters 509-534
QUERY (FORALL (a:INT):
      (FORALL (b:INT):
      (FORALL (t:INT):
      ((t = a) =>
      (FORALL (a0:INT):
      ((a0 = b) => (FORALL (b0:INT): ((b0 = t) => ((a0 = b) AND (b0 = a))))))))));

%% test_swap3_po_1, Why obligation from file "swap0.mlw", characters 654-678
QUERY (FORALL (c:INT):
      ((c = 1) =>
      (FORALL (d:INT):
      ((d = 2) =>
      (FORALL (c1:INT):
      (FORALL (d1:INT): (((c1 = d) AND (d1 = c)) => (d1 = 1))))))));

%% call_swap3_y_x_po_1, Why obligation from file "swap0.mlw", characters 790-826
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (FORALL (y0:INT):
      (FORALL (x0:INT): (((y0 = x) AND (x0 = y)) => ((x0 = y) AND (y0 = x)))))));

%% swap4_po_1, Why obligation from file "swap0.mlw", characters 945-1014
QUERY (FORALL (a:INT):
      (FORALL (b:INT):
      (FORALL (tmp0:INT):
      ((tmp0 = a) =>
      (FORALL (a0:INT):
      ((a0 = b) =>
      (FORALL (b0:INT): ((b0 = tmp0) => ((a0 = b) AND (b0 = a))))))))));

%% test_swap4_po_1, Why obligation from file "swap0.mlw", characters 1109-1133
QUERY (FORALL (c:INT):
      ((c = 1) =>
      (FORALL (d:INT):
      ((d = 2) =>
      (FORALL (c1:INT):
      (FORALL (d1:INT): (((c1 = d) AND (d1 = c)) => (d1 = 1))))))));

%% call_swap4_x_y_po_1, Why obligation from file "swap0.mlw", characters 1187-1218
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      ((x = 3) =>
      (FORALL (x0:INT):
      (FORALL (y0:INT): (((x0 = y) AND (y0 = x)) => (y0 = 3)))))));

%% call_swap4_y_x_po_1, Why obligation from file "swap0.mlw", characters 1240-1271
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      ((x = 3) =>
      (FORALL (y0:INT):
      (FORALL (x0:INT): (((y0 = x) AND (x0 = y)) => (y0 = 3)))))));

