
UNIT: TYPE;
tt: UNIT;
BOOL: TYPE;
true: BOOL;
false: BOOL;
ASSERT (FORALL (b:BOOL): (b=true OR b=false));
ASSERT (true /= false);

%%%% DO NOT EDIT BELOW THIS LINE

c_unique: TYPE;

c_type: TYPE;

c_Boolean: TYPE;

%% Why logic c_sort
c_sort: ((c_type, c_unique) -> c_unique);

%% Why logic c_Boolean_true
c_Boolean_true: BOOL;

%% Why logic c_Boolean_false
c_Boolean_false: BOOL;

%% Why axiom either true_or_false_c_to_either true_or_false_c
ASSERT (FORALL (b:BOOL): ((c_Boolean_true = b) OR (c_Boolean_false = b)));

%% Why axiom true_neq_false_c_to_true_neq_false_c
ASSERT (c_Boolean_true /= c_Boolean_false);

%% Why logic int2U
int2U: (INT -> c_unique);

%% Why logic u2Int
u2Int: (c_unique -> INT);

%% Why logic real2U
real2U: (REAL -> c_unique);

%% Why logic u2Real
u2Real: (c_unique -> REAL);

%% Why logic bool2U
bool2U: (BOOL -> c_unique);

%% Why logic u2Bool
u2Bool: (c_unique -> BOOL);

%% Why logic c_int
c_int: c_type;

%% Why logic c_bool
c_bool: c_type;

%% Why logic c_real
c_real: c_type;

%% Why logic c_unit
c_unit: c_type;

%% Why logic c_ref
c_ref: (c_unique -> c_unique);

%% Why axiom eq__c_to_eq__cu2Int_int2U
ASSERT (FORALL (x:INT): (u2Int(c_sort(c_int, int2U(x))) = x));

%% Why axiom eq__c_to_eq__cu2Real_real2U
ASSERT (FORALL (x:REAL): (u2Real(c_sort(c_real, real2U(x))) = x));

%% Why axiom eq__c_to_eq__cu2Bool_bool2U
ASSERT (FORALL (x:BOOL): (u2Bool(c_sort(c_bool, bool2U(x))) = x));

%% Why axiom eq__c_to_eq__cint2U_u2Int
ASSERT (FORALL (x:c_unique):
       (int2U(u2Int(c_sort(c_int, x))) = c_sort(c_int, x)));

%% Why axiom eq__c_to_eq__creal2U_u2Real
ASSERT (FORALL (x:c_unique):
       (real2U(u2Real(c_sort(c_real, x))) = c_sort(c_real, x)));

%% Why axiom eq__c_to_eq__cbool2U_u2Bool
ASSERT (FORALL (x:c_unique):
       (bool2U(u2Bool(c_sort(c_bool, x))) = c_sort(c_bool, x)));

%% Why axiom peq_c_to_peq_c
ASSERT (FORALL (alpha:c_type):
       (FORALL (x:c_unique):
       (FORALL (y:c_unique):
       ((c_sort(alpha, x) = c_sort(alpha, y)) => (x = y)))));

%% Why logic eq_int
eq_int: ((INT, INT) -> BOOLEAN);

%% Why logic neq_int
neq_int: ((INT, INT) -> BOOLEAN);

%% Why logic lt_int_bool
lt_int_bool: ((INT, INT) -> BOOL);

%% Why logic le_int_bool
le_int_bool: ((INT, INT) -> BOOL);

%% Why logic gt_int_bool
gt_int_bool: ((INT, INT) -> BOOL);

%% Why logic ge_int_bool
ge_int_bool: ((INT, INT) -> BOOL);

%% Why logic eq_int_bool
eq_int_bool: ((INT, INT) -> BOOL);

%% Why logic neq_int_bool
neq_int_bool: ((INT, INT) -> BOOL);

%% Why axiom lt_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT):
       ((c_sort(c_bool, bool2U(lt_int_bool(x, y))) =
        c_sort(c_bool, bool2U(true))) <=>
       (x < y))));

%% Why axiom le_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT):
       ((c_sort(c_bool, bool2U(le_int_bool(x, y))) =
        c_sort(c_bool, bool2U(true))) <=>
       (x <= y))));

%% Why axiom gt_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT):
       ((c_sort(c_bool, bool2U(gt_int_bool(x, y))) =
        c_sort(c_bool, bool2U(true))) <=>
       (x > y))));

%% Why axiom ge_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT):
       ((c_sort(c_bool, bool2U(ge_int_bool(x, y))) =
        c_sort(c_bool, bool2U(true))) <=>
       (x >= y))));

%% Why axiom eq_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT):
       ((c_sort(c_bool, bool2U(eq_int_bool(x, y))) =
        c_sort(c_bool, bool2U(true))) <=>
       (x = y))));

%% Why axiom neq_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT):
       ((c_sort(c_bool, bool2U(neq_int_bool(x, y))) =
        c_sort(c_bool, bool2U(true))) <=>
       (x /= y))));

%% Why logic add_real
add_real: ((REAL, REAL) -> REAL);

%% Why logic sub_real
sub_real: ((REAL, REAL) -> REAL);

%% Why logic mul_real
mul_real: ((REAL, REAL) -> REAL);

%% Why logic div_real
div_real: ((REAL, REAL) -> REAL);

%% Why logic pow_real
pow_real: ((REAL, REAL) -> REAL);

%% Why logic neg_real
neg_real: (REAL -> REAL);

%% Why logic abs_real
abs_real: (REAL -> REAL);

%% Why logic sqrt_real
sqrt_real: (REAL -> REAL);

%% Why logic real_of_int
real_of_int: (INT -> REAL);

%% Why logic int_of_real
int_of_real: (REAL -> INT);

%% Why logic lt_real
lt_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic le_real
le_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic gt_real
gt_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic ge_real
ge_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic eq_real
eq_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic neq_real
neq_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic eq_bool
eq_bool: ((BOOL, BOOL) -> BOOLEAN);

%% Why logic neq_bool
neq_bool: ((BOOL, BOOL) -> BOOLEAN);

%% Why logic eq_unit
eq_unit: ((c_unique, c_unique) -> BOOLEAN);

%% Why logic neq_unit
neq_unit: ((c_unique, c_unique) -> BOOLEAN);

%% Why logic ite
ite: ((c_unique, c_unique, c_unique) -> c_unique);

%% Why axiom ite_true
ASSERT (FORALL (t1:c_type):
       (FORALL (x:c_unique):
       (FORALL (y:c_unique):
       (c_sort(t1,
        ite(c_sort(c_bool, bool2U(true)), c_sort(t1, x), c_sort(t1, y))) =
       c_sort(t1, x)))));

%% Why axiom ite_false
ASSERT (FORALL (t1:c_type):
       (FORALL (x:c_unique):
       (FORALL (y:c_unique):
       (c_sort(t1,
        ite(c_sort(c_bool, bool2U(false)), c_sort(t1, x), c_sort(t1, y))) =
       c_sort(t1, y)))));

%% Why logic farray
farray: (c_type -> c_type);

%% Why logic array_length
array_length: (c_unique -> INT);

%% Why logic access
access: ((c_unique, INT) -> c_unique);

%% Why logic update
update: ((c_unique, INT, c_unique) -> c_unique);

%% Why axiom access_update
ASSERT (FORALL (t1:c_type):
       (FORALL (t:c_unique):
       (FORALL (i:INT):
       (FORALL (v:c_unique):
       (c_sort(t1,
        access(c_sort(farray(t1),
               update(c_sort(farray(t1), t), i, c_sort(t1, v))),
        i)) =
       c_sort(t1, v))))));

%% Why axiom access_update_eq
ASSERT (FORALL (t1:c_type):
       (FORALL (t:c_unique):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (FORALL (v:c_unique):
       ((i = j) =>
       (c_sort(t1,
        access(c_sort(farray(t1),
               update(c_sort(farray(t1), t), i, c_sort(t1, v))),
        j)) =
       c_sort(t1, v))))))));

%% Why axiom access_update_neq
ASSERT (FORALL (t1:c_type):
       (FORALL (t:c_unique):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (FORALL (v:c_unique):
       ((i /= j) =>
       (c_sort(t1,
        access(c_sort(farray(t1),
               update(c_sort(farray(t1), t), i, c_sort(t1, v))),
        j)) =
       c_sort(t1, access(c_sort(farray(t1), t), j)))))))));

%% Why logic sorted_array
sorted_array: ((c_unique, INT, INT) -> BOOLEAN);

%% Why axiom sorted_array_def
ASSERT (FORALL (t:c_unique):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (sorted_array(c_sort(farray(c_int), t), i, j) <=>
       (FORALL (k:INT):
       (((i <= k) AND (k < j)) =>
       (u2Int(c_sort(c_int, access(c_sort(farray(c_int), t), k))) <= 
       u2Int(c_sort(c_int, access(c_sort(farray(c_int), t), (k + 1)))))))))));

%% Why logic array_le
array_le: ((c_unique, INT, INT, INT) -> BOOLEAN);

%% Why logic array_ge
array_ge: ((c_unique, INT, INT, INT) -> BOOLEAN);

%% Why logic exchange
exchange: ((c_unique, c_unique, INT, INT) -> BOOLEAN);

%% Why axiom exchange_def
ASSERT (FORALL (t1:c_unique):
       (FORALL (t2:c_unique):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (exchange(c_sort(farray(c_int), t1), c_sort(farray(c_int), t2), i, j) <=>
       ((array_length(c_sort(farray(c_int), t1)) =
        array_length(c_sort(farray(c_int), t2))) AND
       ((c_sort(c_int, access(c_sort(farray(c_int), t1), i)) =
        c_sort(c_int, access(c_sort(farray(c_int), t2), j))) AND
       ((c_sort(c_int, access(c_sort(farray(c_int), t2), i)) =
        c_sort(c_int, access(c_sort(farray(c_int), t1), j))) AND
       (FORALL (k:INT):
       (((k /= i) AND (k /= j)) =>
       (c_sort(c_int, access(c_sort(farray(c_int), t1), k)) =
       c_sort(c_int, access(c_sort(farray(c_int), t2), k)))))))))))));

%% Why logic permut
permut: ((c_unique, c_unique) -> BOOLEAN);

%% Why axiom permut_refl
ASSERT (FORALL (t:c_unique):
       permut(c_sort(farray(c_int), t), c_sort(farray(c_int), t)));

%% Why axiom permut_sym
ASSERT (FORALL (t1:c_unique):
       (FORALL (t2:c_unique):
       (permut(c_sort(farray(c_int), t1), c_sort(farray(c_int), t2)) =>
       permut(c_sort(farray(c_int), t2), c_sort(farray(c_int), t1)))));

%% Why axiom permut_trans
ASSERT (FORALL (t1:c_unique):
       (FORALL (t2:c_unique):
       (FORALL (t3:c_unique):
       ((permut(c_sort(farray(c_int), t1), c_sort(farray(c_int), t2)) AND
        permut(c_sort(farray(c_int), t2), c_sort(farray(c_int), t3))) =>
       permut(c_sort(farray(c_int), t1), c_sort(farray(c_int), t3))))));

%% Why axiom permut_exchange
ASSERT (FORALL (t:c_unique):
       (FORALL (i:INT):
       (FORALL (j:INT):
       permut(c_sort(farray(c_int), t),
       c_sort(farray(c_int),
       update(c_sort(farray(c_int),
              update(c_sort(farray(c_int), t), i,
              c_sort(c_int, access(c_sort(farray(c_int), t), j)))),
       j, c_sort(c_int, access(c_sort(farray(c_int), t), i))))))));

%% Why logic sub_permut
sub_permut: ((INT, INT, c_unique, c_unique) -> BOOLEAN);

%% Why axiom sub_permut_refl
ASSERT (FORALL (t:c_unique):
       (FORALL (g:INT):
       (FORALL (d:INT):
       sub_permut(g, d, c_sort(farray(c_int), t), c_sort(farray(c_int), t)))));

%% Why axiom sub_permut_sym
ASSERT (FORALL (t1:c_unique):
       (FORALL (t2:c_unique):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, c_sort(farray(c_int), t1),
        c_sort(farray(c_int), t2)) =>
       sub_permut(g, d, c_sort(farray(c_int), t2), c_sort(farray(c_int), t1)))))));

%% Why axiom sub_permut_trans
ASSERT (FORALL (t1:c_unique):
       (FORALL (t2:c_unique):
       (FORALL (t3:c_unique):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, c_sort(farray(c_int), t1),
        c_sort(farray(c_int), t2)) =>
       (sub_permut(g, d, c_sort(farray(c_int), t2),
        c_sort(farray(c_int), t3)) =>
       sub_permut(g, d, c_sort(farray(c_int), t1), c_sort(farray(c_int), t3)))))))));

%% Why axiom sub_permut_exchange_1
ASSERT (FORALL (t:c_unique):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND ((i <= d) AND ((g <= j) AND (j <= d)))) =>
       sub_permut(g, d, c_sort(farray(c_int), t),
       c_sort(farray(c_int),
       update(c_sort(farray(c_int),
              update(c_sort(farray(c_int), t), i,
              c_sort(c_int, access(c_sort(farray(c_int), t), j)))),
       j, c_sort(c_int, access(c_sort(farray(c_int), t), i)))))))))));

%% Why axiom sub_permut_exchange_2
ASSERT (FORALL (t1:c_unique):
       (FORALL (t2:c_unique):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND
        ((i <= d) AND
        ((g <= j) AND
        ((j <= d) AND
        exchange(c_sort(farray(c_int), t1), c_sort(farray(c_int), t2), i, j))))) =>
       sub_permut(g, d, c_sort(farray(c_int), t1), c_sort(farray(c_int), t2)))))))));

%% Why axiom sub_permut_permut
ASSERT (FORALL (t1:c_unique):
       (FORALL (t2:c_unique):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, c_sort(farray(c_int), t1),
        c_sort(farray(c_int), t2)) =>
       permut(c_sort(farray(c_int), t1), c_sort(farray(c_int), t2)))))));

%% Why axiom array_length_update
ASSERT (FORALL (t:c_unique):
       (FORALL (i:INT):
       (FORALL (v:INT):
       (array_length(c_sort(farray(c_int),
                     update(c_sort(farray(c_int), t), i,
                     c_sort(c_int, int2U(v))))) =
       array_length(c_sort(farray(c_int), t))))));

%% Why axiom sub_permut_array_length
ASSERT (FORALL (t1:c_unique):
       (FORALL (t2:c_unique):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, c_sort(farray(c_int), t1),
        c_sort(farray(c_int), t2)) =>
       (array_length(c_sort(farray(c_int), t1)) =
       array_length(c_sort(farray(c_int), t2))))))));

%% Why axiom permut_array_length
ASSERT (FORALL (t1:c_unique):
       (FORALL (t2:c_unique):
       (permut(c_sort(farray(c_int), t1), c_sort(farray(c_int), t2)) =>
       (array_length(c_sort(farray(c_int), t1)) =
       array_length(c_sort(farray(c_int), t2))))));

%% swap1_po_1, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (FORALL (x0:INT):
      ((x0 = y) => (FORALL (y0:INT): ((y0 = x) => ((x0 = y) AND (y0 = x))))))));
POP;

%% swap2_po_1, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (FORALL (x0:INT):
      ((x0 = y) => (FORALL (y0:INT): ((y0 = x) => ((x0 = y) AND (y0 = x))))))));
POP;

%% swap3_po_1, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (a:INT):
      (FORALL (b:INT):
      (FORALL (a0:INT):
      ((a0 = b) => (FORALL (b0:INT): ((b0 = a) => ((a0 = b) AND (b0 = a))))))));
POP;

%% call_swap3_y_x_po_1, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      (FORALL (x0:INT):
      (FORALL (y0:INT): (((y0 = x) AND (x0 = y)) => ((x0 = y) AND (y0 = x)))))));
POP;

%% swap4_po_1, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (a:INT):
      (FORALL (b:INT):
      (FORALL (tmp:INT):
      ((tmp = a) =>
      (FORALL (a0:INT):
      ((a0 = b) =>
      (FORALL (b0:INT): ((b0 = tmp) => ((a0 = b) AND (b0 = a))))))))));
POP;

%% call_swap4_x_y_po_1, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      ((x = 3) =>
      (FORALL (x0:INT):
      (FORALL (y0:INT): (((x0 = y) AND (y0 = x)) => (y0 = 3)))))));
POP;

%% call_swap4_y_x_po_1, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (x:INT):
      (FORALL (y:INT):
      ((x = 3) =>
      (FORALL (x0:INT):
      (FORALL (y0:INT): (((y0 = x) AND (x0 = y)) => (y0 = 3)))))));
POP;

