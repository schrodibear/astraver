
;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(BG_PUSH
 ;; Why axiom access_update
 (FORALL (t i v) (EQ (access (update t i v) i) v)))

(BG_PUSH
 ;; Why axiom access_update_neq
 (FORALL (t i j v)
 (IMPLIES (NEQ i j) (EQ (access (update t i v) j) (access t j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j)
 (FORALL (t v) (EQ (access (update t i v) j) (access t j))))))

(DEFPRED (sorted_array t i j)
  (FORALL (k1 k2)
  (IMPLIES (AND (AND (<= i k1) (<= k1 k2)) (<= k2 j))
  (<= (access t k1) (access t k2)))))

(DEFPRED (exchange t1 t2 i j)
  (AND (EQ (array_length t1) (array_length t2))
  (AND (EQ (access t1 i) (access t2 j))
  (AND (EQ (access t2 i) (access t1 j))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i) (NEQ k j)) (EQ (access t1 k) (access t2 k))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t) (EQ (permut t t) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1 t2)
 (IMPLIES (EQ (permut t1 t2) |@true|) (EQ (permut t2 t1) |@true|))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1 t2 t3)
 (IMPLIES (AND (EQ (permut t1 t2) |@true|) (EQ (permut t2 t3) |@true|))
 (EQ (permut t1 t3) |@true|))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (t i j)
 (EQ (permut t (update (update t i (access t j)) j (access t i))) |@true|)))

(BG_PUSH
 ;; Why axiom sub_permut_refl
 (FORALL (t g d) (EQ (sub_permut g d t t) |@true|)))

(BG_PUSH
 ;; Why axiom sub_permut_sym
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (sub_permut g d t2 t1) |@true|))))

(BG_PUSH
 ;; Why axiom sub_permut_trans
 (FORALL (t1 t2 t3 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))

 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_1
 (FORALL (t g d i j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (EQ (sub_permut
 g d t (update (update t i (access t j)) j (access t i))) |@true|)))

 (FORALL (g d i j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (FORALL (t)
 (EQ (sub_permut
 g d t (update (update t i (access t j)) j (access t i))) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_2
 (FORALL (t1 t2 g d i j)
 (IMPLIES
 (AND (<= g i)
 (AND (<= i d) (AND (<= g j) (AND (<= j d) (exchange t1 t2 i j)))))
 (EQ (sub_permut g d t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom sub_permut_weakening
 (FORALL (a1 a2 l1 r1 l2 r2)
 (IMPLIES (AND (<= l1 l2) (AND (<= l2 r2) (<= r2 r1)))
 (IMPLIES (EQ (sub_permut l2 r2 a1 a2) |@true|)
 (EQ (sub_permut l1 r1 a1 a2) |@true|))))

 (FORALL (l1 r1 l2 r2)
 (IMPLIES (AND (<= l1 l2) (AND (<= l2 r2) (<= r2 r1)))
 (FORALL (a2 a1)
 (IMPLIES (EQ (sub_permut l2 r2 a1 a2) |@true|)
 (EQ (sub_permut l1 r1 a1 a2) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_permut_eq
 (FORALL (a1 a2 l r)
 (IMPLIES (<= l r)
 (IMPLIES (EQ (sub_permut l r a1 a2) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< r i)) (EQ (access a2 i) (access a1 i)))))))

 (FORALL (l r)
 (IMPLIES (<= l r)
 (FORALL (a2 a1)
 (IMPLIES (EQ (sub_permut l r a1 a2) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< r i)) (EQ (access a2 i) (access a1 i)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_permut
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|) (EQ (permut t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (t i v) (EQ (array_length (update t i v)) (array_length t))))

(BG_PUSH
 ;; Why axiom sub_permut_array_length
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2)))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (t1 t2)
 (IMPLIES (EQ (permut t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2)))))

;; power1_po_1, File "power.mlw", line 23, characters 18-63
(FORALL (n)
(IMPLIES (>= n 0)
(FORALL (m)
(IMPLIES (EQ m x)
(FORALL (y)
(IMPLIES (EQ y 1) (AND (EQ (Zpower x n) (* y (Zpower m n))) (>= n 0))))))))

;; power1_po_2, File "power.mlw", line 23, characters 18-63
(FORALL (n)
(IMPLIES (>= n 0)
(FORALL (m)
(IMPLIES (EQ m x)
(FORALL (y)
(IMPLIES (EQ y 1)
(FORALL (m0)
(FORALL (n0)
(FORALL (y0)
(IMPLIES (AND (EQ (Zpower x n) (* y0 (Zpower m0 n0))) (>= n0 0))
(IMPLIES (> n0 0)
(IMPLIES (EQ (Zodd n0) |@true|)
(FORALL (y1)
(IMPLIES (EQ y1 (* y0 m0))
(FORALL (m1)
(IMPLIES (EQ m1 (* m0 m0))
(FORALL (n1)
(IMPLIES (EQ n1 (div2 n0))
(AND (EQ (Zpower x n) (* y1 (Zpower m1 n1))) (>= n1 0))))))))))))))))))))

;; power1_po_3, File "power.mlw", line 24, characters 16-17
(FORALL (n)
(IMPLIES (>= n 0)
(FORALL (m)
(IMPLIES (EQ m x)
(FORALL (y)
(IMPLIES (EQ y 1)
(FORALL (m0)
(FORALL (n0)
(FORALL (y0)
(IMPLIES (AND (EQ (Zpower x n) (* y0 (Zpower m0 n0))) (>= n0 0))
(IMPLIES (> n0 0)
(IMPLIES (EQ (Zodd n0) |@true|)
(FORALL (y1)
(IMPLIES (EQ y1 (* y0 m0))
(FORALL (m1)
(IMPLIES (EQ m1 (* m0 m0))
(FORALL (n1) (IMPLIES (EQ n1 (div2 n0)) (AND (<= 0 n0) (< n1 n0))))))))))))))))))))

;; power1_po_4, File "power.mlw", line 23, characters 18-63
(FORALL (n)
(IMPLIES (>= n 0)
(FORALL (m)
(IMPLIES (EQ m x)
(FORALL (y)
(IMPLIES (EQ y 1)
(FORALL (m0)
(FORALL (n0)
(FORALL (y0)
(IMPLIES (AND (EQ (Zpower x n) (* y0 (Zpower m0 n0))) (>= n0 0))
(IMPLIES (> n0 0)
(IMPLIES (EQ (Zeven n0) |@true|)
(FORALL (m1)
(IMPLIES (EQ m1 (* m0 m0))
(FORALL (n1)
(IMPLIES (EQ n1 (div2 n0))
(AND (EQ (Zpower x n) (* y0 (Zpower m1 n1))) (>= n1 0))))))))))))))))))

;; power1_po_5, File "power.mlw", line 24, characters 16-17
(FORALL (n)
(IMPLIES (>= n 0)
(FORALL (m)
(IMPLIES (EQ m x)
(FORALL (y)
(IMPLIES (EQ y 1)
(FORALL (m0)
(FORALL (n0)
(FORALL (y0)
(IMPLIES (AND (EQ (Zpower x n) (* y0 (Zpower m0 n0))) (>= n0 0))
(IMPLIES (> n0 0)
(IMPLIES (EQ (Zeven n0) |@true|)
(FORALL (m1)
(IMPLIES (EQ m1 (* m0 m0))
(FORALL (n1) (IMPLIES (EQ n1 (div2 n0)) (AND (<= 0 n0) (< n1 n0))))))))))))))))))

;; power1_po_6, File "power.mlw", line 30, characters 4-20
(FORALL (n)
(IMPLIES (>= n 0)
(FORALL (m)
(IMPLIES (EQ m x)
(FORALL (y)
(IMPLIES (EQ y 1)
(FORALL (m0)
(FORALL (n0)
(FORALL (y0)
(IMPLIES (AND (EQ (Zpower x n) (* y0 (Zpower m0 n0))) (>= n0 0))
(IMPLIES (<= n0 0) (EQ y0 (Zpower x n)))))))))))))

