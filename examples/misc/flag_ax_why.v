(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.

(*Why type*) Definition color: Set.
Admitted.

(*Why logic*) Definition blue : color.
Admitted.

(*Why logic*) Definition white : color.
Admitted.

(*Why logic*) Definition red : color.
Admitted.

(*Why predicate*) Definition is_color  [c:color]
  := c = blue \/ c = white \/ c = red.


(*Why type*) Definition color_array: Set.
Admitted.

(*Why logic*) Definition acc : color_array -> Z -> color.
Admitted.

(*Why logic*) Definition upd : color_array -> Z -> color -> color_array.
Admitted.

(*Why logic*) Definition length : color_array -> Z.
Admitted.

(*Why axiom*) Lemma acc_upd_eq :
  ((a:color_array) ((i:Z) ((c:color) (acc (upd a i c) i) = c))).
Admitted.

(*Why axiom*) Lemma acc_upd_neq :
  ((a:color_array)
   ((i:Z) ((j:Z) ((c:color) (`i <> j` -> (acc (upd a j c) i) = (acc a i)))))).
Admitted.

(*Why axiom*) Lemma length_update :
  ((a:color_array) ((i:Z) ((c:color) `(length (upd a i c)) = (length a)`))).
Admitted.



(*Why predicate*) Definition monochrome  [t:color_array] [i:Z] [j:Z]
  [c:color] := ((k:Z) (`i <= k` /\ `k < j` -> (acc t k) = c)).

(*Why logic*) Definition permutation :
  color_array -> color_array -> Z -> Z -> Prop.
Admitted.

(*Why axiom*) Lemma permut_refl :
  ((t:color_array) ((l:Z) ((r:Z) (permutation t t l r)))).
Admitted.

(*Why axiom*) Lemma permut_swap :
  ((t:color_array)
   ((l:Z)
    ((r:Z)
     ((i:Z)
      ((j:Z)
       (`l <= i` /\ `i <= r` ->
        (`l <= j` /\ `j <= r` ->
         (permutation t (upd (upd t i (acc t j)) j (acc t i)) l r)))))))).
Admitted.

(*Why axiom*) Lemma permut_sym :
  ((t1:color_array)
   ((t2:color_array)
    ((l:Z) ((r:Z) ((permutation t1 t2 l r) -> (permutation t2 t1 l r)))))).
Admitted.

(*Why axiom*) Lemma permut_trans :
  ((t1:color_array)
   ((t2:color_array)
    ((t3:color_array)
     ((l:Z)
      ((r:Z)
       ((permutation t1 t2 l r) ->
        ((permutation t2 t3 l r) -> (permutation t1 t3 l r)))))))).
Admitted.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma swap_po_1 : 
  (i: Z)
  (j: Z)
  (t: color_array)
  (HW_1: (`0 <= i` /\ `i < (length t)`) /\ `0 <= j` /\ `j < (length t)`)
  (HW_2: `0 <= i` /\ `i < (length t)`)
  (result: color)
  (HW_3: result = (acc t i))
  (HW_4: `0 <= j` /\ `j < (length t)`)
  (result0: color)
  (HW_5: result0 = (acc t j))
  (HW_6: `0 <= i` /\ `i < (length t)`)
  (t0: color_array)
  (HW_7: t0 = (upd t i result0))
  `0 <= j` /\ `j < (length t0)`.
Proof.
intuition; subst.
rewrite length_update; intuition.
Qed.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma swap_po_2 : 
  (i: Z)
  (j: Z)
  (t: color_array)
  (HW_1: (`0 <= i` /\ `i < (length t)`) /\ `0 <= j` /\ `j < (length t)`)
  (HW_2: `0 <= i` /\ `i < (length t)`)
  (result: color)
  (HW_3: result = (acc t i))
  (HW_4: `0 <= j` /\ `j < (length t)`)
  (result0: color)
  (HW_5: result0 = (acc t j))
  (HW_6: `0 <= i` /\ `i < (length t)`)
  (t0: color_array)
  (HW_7: t0 = (upd t i result0))
  (HW_8: `0 <= j` /\ `j < (length t0)`)
  (t1: color_array)
  (HW_9: t1 = (upd t0 j result))
  t1 = (upd (upd t i (acc t j)) j (acc t i)).
Proof.
intuition; subst; intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma dutch_flag_po_1 : 
  (n: Z)
  (t: color_array)
  (HW_1: `0 <= n` /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))))
  (`0 <= 0` /\ `0 <= 0`) /\ (`0 <= n` /\ `n <= n`) /\
  (monochrome t `0` `0` blue) /\ (monochrome t `0` `0` white) /\
  (monochrome t n n red) /\ `(length t) = n` /\
  ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))) /\
  (permutation t t `0` `n - 1`).
Proof.
unfold monochrome; intuition.
absurd (0<0); intuition.
absurd (0<0); intuition.
absurd (n<n); intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma dutch_flag_po_2 : 
  (n: Z)
  (t: color_array)
  (HW_1: `0 <= n` /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))))
  (HW_2: (`0 <= 0` /\ `0 <= 0`) /\ (`0 <= n` /\ `n <= n`) /\
         (monochrome t `0` `0` blue) /\ (monochrome t `0` `0` white) /\
         (monochrome t n n red) /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))) /\
         (permutation t t `0` `n - 1`))
  (b: Z)
  (i: Z)
  (r: Z)
  (t0: color_array)
  (HW_3: (`0 <= b` /\ `b <= i`) /\ (`i <= r` /\ `r <= n`) /\
         (monochrome t0 `0` b blue) /\ (monochrome t0 b i white) /\
         (monochrome t0 r n red) /\ `(length t0) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t0 k)))) /\
         (permutation t0 t `0` `n - 1`))
  (HW_4: `i < r`)
  `0 <= i` /\ `i < (length t0)`.
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma dutch_flag_po_3 : 
  (n: Z)
  (t: color_array)
  (HW_1: `0 <= n` /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))))
  (HW_2: (`0 <= 0` /\ `0 <= 0`) /\ (`0 <= n` /\ `n <= n`) /\
         (monochrome t `0` `0` blue) /\ (monochrome t `0` `0` white) /\
         (monochrome t n n red) /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))) /\
         (permutation t t `0` `n - 1`))
  (b: Z)
  (i: Z)
  (r: Z)
  (t0: color_array)
  (HW_3: (`0 <= b` /\ `b <= i`) /\ (`i <= r` /\ `r <= n`) /\
         (monochrome t0 `0` b blue) /\ (monochrome t0 b i white) /\
         (monochrome t0 r n red) /\ `(length t0) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t0 k)))) /\
         (permutation t0 t `0` `n - 1`))
  (HW_4: `i < r`)
  (HW_5: `0 <= i` /\ `i < (length t0)`)
  (result: color)
  (HW_6: result = (acc t0 i))
  (HW_7: result = blue)
  (`0 <= b` /\ `b < (length t0)`) /\ `0 <= i` /\ `i < (length t0)`.
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma dutch_flag_po_4 : 
  (n: Z)
  (t: color_array)
  (HW_1: `0 <= n` /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))))
  (HW_2: (`0 <= 0` /\ `0 <= 0`) /\ (`0 <= n` /\ `n <= n`) /\
         (monochrome t `0` `0` blue) /\ (monochrome t `0` `0` white) /\
         (monochrome t n n red) /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))) /\
         (permutation t t `0` `n - 1`))
  (b: Z)
  (i: Z)
  (r: Z)
  (t0: color_array)
  (HW_3: (`0 <= b` /\ `b <= i`) /\ (`i <= r` /\ `r <= n`) /\
         (monochrome t0 `0` b blue) /\ (monochrome t0 b i white) /\
         (monochrome t0 r n red) /\ `(length t0) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t0 k)))) /\
         (permutation t0 t `0` `n - 1`))
  (HW_4: `i < r`)
  (HW_5: `0 <= i` /\ `i < (length t0)`)
  (result: color)
  (HW_6: result = (acc t0 i))
  (HW_7: result = blue)
  (HW_8: (`0 <= b` /\ `b < (length t0)`) /\ `0 <= i` /\ `i < (length t0)`)
  (t1: color_array)
  (HW_9: t1 = (upd (upd t0 b (acc t0 i)) i (acc t0 b)))
  (b0: Z)
  (HW_10: b0 = `b + 1`)
  (i0: Z)
  (HW_11: i0 = `i + 1`)
  ((`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r` /\ `r <= n`) /\
  (monochrome t1 `0` b0 blue) /\ (monochrome t1 b0 i0 white) /\
  (monochrome t1 r n red) /\ `(length t1) = n` /\
  ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t1 k)))) /\
  (permutation t1 t `0` `n - 1`)) /\ (Zwf `0` `r - i0` `r - i`).
Proof.
unfold monochrome; intuition; subst.
assert (k<b \/ k=b). omega. intuition.
do 2 (rewrite acc_upd_neq; intuition).
subst.
assert (b<i \/ b=i). omega. intuition.
rewrite acc_upd_neq; intuition.
rewrite acc_upd_eq; intuition.
subst.
rewrite acc_upd_eq; intuition.
assert (k<i \/ k=i). omega. intuition.
do 2 (rewrite acc_upd_neq; intuition).
subst.
rewrite acc_upd_eq; intuition.
do 2 (rewrite acc_upd_neq; intuition).
do 2 rewrite length_update; trivial.
assert (k<>i \/ k=i). omega. intuition.
rewrite acc_upd_neq; intuition.
assert (k<>b \/ k=b). omega. intuition.
rewrite acc_upd_neq; intuition.
subst; rewrite acc_upd_eq; intuition.
subst; rewrite acc_upd_eq; intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma dutch_flag_po_5 : 
  (n: Z)
  (t: color_array)
  (HW_1: `0 <= n` /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))))
  (HW_2: (`0 <= 0` /\ `0 <= 0`) /\ (`0 <= n` /\ `n <= n`) /\
         (monochrome t `0` `0` blue) /\ (monochrome t `0` `0` white) /\
         (monochrome t n n red) /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))) /\
         (permutation t t `0` `n - 1`))
  (b: Z)
  (i: Z)
  (r: Z)
  (t0: color_array)
  (HW_3: (`0 <= b` /\ `b <= i`) /\ (`i <= r` /\ `r <= n`) /\
         (monochrome t0 `0` b blue) /\ (monochrome t0 b i white) /\
         (monochrome t0 r n red) /\ `(length t0) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t0 k)))) /\
         (permutation t0 t `0` `n - 1`))
  (HW_4: `i < r`)
  (HW_5: `0 <= i` /\ `i < (length t0)`)
  (result: color)
  (HW_6: result = (acc t0 i))
  (HW_12: ~(result = blue))
  (HW_13: `0 <= i` /\ `i < (length t0)`)
  (result0: color)
  (HW_14: result0 = (acc t0 i))
  (HW_15: result0 = white)
  (i0: Z)
  (HW_16: i0 = `i + 1`)
  ((`0 <= b` /\ `b <= i0`) /\ (`i0 <= r` /\ `r <= n`) /\
  (monochrome t0 `0` b blue) /\ (monochrome t0 b i0 white) /\
  (monochrome t0 r n red) /\ `(length t0) = n` /\
  ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t0 k)))) /\
  (permutation t0 t `0` `n - 1`)) /\ (Zwf `0` `r - i0` `r - i`).
Proof.
unfold monochrome; intuition; subst.
assert (k<i \/ k=i). omega. intuition.
subst; intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma dutch_flag_po_6 : 
  (n: Z)
  (t: color_array)
  (HW_1: `0 <= n` /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))))
  (HW_2: (`0 <= 0` /\ `0 <= 0`) /\ (`0 <= n` /\ `n <= n`) /\
         (monochrome t `0` `0` blue) /\ (monochrome t `0` `0` white) /\
         (monochrome t n n red) /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))) /\
         (permutation t t `0` `n - 1`))
  (b: Z)
  (i: Z)
  (r: Z)
  (t0: color_array)
  (HW_3: (`0 <= b` /\ `b <= i`) /\ (`i <= r` /\ `r <= n`) /\
         (monochrome t0 `0` b blue) /\ (monochrome t0 b i white) /\
         (monochrome t0 r n red) /\ `(length t0) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t0 k)))) /\
         (permutation t0 t `0` `n - 1`))
  (HW_4: `i < r`)
  (HW_5: `0 <= i` /\ `i < (length t0)`)
  (result: color)
  (HW_6: result = (acc t0 i))
  (HW_12: ~(result = blue))
  (HW_13: `0 <= i` /\ `i < (length t0)`)
  (result0: color)
  (HW_14: result0 = (acc t0 i))
  (HW_17: ~(result0 = white))
  (r0: Z)
  (HW_18: r0 = `r - 1`)
  (`0 <= r0` /\ `r0 < (length t0)`) /\ `0 <= i` /\ `i < (length t0)`.
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma dutch_flag_po_7 : 
  (n: Z)
  (t: color_array)
  (HW_1: `0 <= n` /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))))
  (HW_2: (`0 <= 0` /\ `0 <= 0`) /\ (`0 <= n` /\ `n <= n`) /\
         (monochrome t `0` `0` blue) /\ (monochrome t `0` `0` white) /\
         (monochrome t n n red) /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))) /\
         (permutation t t `0` `n - 1`))
  (b: Z)
  (i: Z)
  (r: Z)
  (t0: color_array)
  (HW_3: (`0 <= b` /\ `b <= i`) /\ (`i <= r` /\ `r <= n`) /\
         (monochrome t0 `0` b blue) /\ (monochrome t0 b i white) /\
         (monochrome t0 r n red) /\ `(length t0) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t0 k)))) /\
         (permutation t0 t `0` `n - 1`))
  (HW_4: `i < r`)
  (HW_5: `0 <= i` /\ `i < (length t0)`)
  (result: color)
  (HW_6: result = (acc t0 i))
  (HW_12: ~(result = blue))
  (HW_13: `0 <= i` /\ `i < (length t0)`)
  (result0: color)
  (HW_14: result0 = (acc t0 i))
  (HW_17: ~(result0 = white))
  (r0: Z)
  (HW_18: r0 = `r - 1`)
  (HW_19: (`0 <= r0` /\ `r0 < (length t0)`) /\ `0 <= i` /\ `i < (length t0)`)
  (t1: color_array)
  (HW_20: t1 = (upd (upd t0 r0 (acc t0 i)) i (acc t0 r0)))
  ((`0 <= b` /\ `b <= i`) /\ (`i <= r0` /\ `r0 <= n`) /\
  (monochrome t1 `0` b blue) /\ (monochrome t1 b i white) /\
  (monochrome t1 r0 n red) /\ `(length t1) = n` /\
  ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t1 k)))) /\
  (permutation t1 t `0` `n - 1`)) /\ (Zwf `0` `r0 - i` `r - i`).
Proof.
unfold monochrome; intuition; subst.
do 2 (rewrite acc_upd_neq; intuition).
do 2 (rewrite acc_upd_neq; intuition).
assert (k=i \/ i <k). omega. intuition.
subst; rewrite acc_upd_eq; intuition.
assert (i=r-1). omega. subst.
assert (h:0 <= r-1 < length t). omega.
cut (is_color (acc t0 (r-1))). 
unfold is_color; intuition.
auto.
rewrite acc_upd_neq; intuition.
assert (k=r-1 \/ r-1<k). omega. intuition.
subst; rewrite acc_upd_eq; intuition.
assert (h:0 <= i < length t). omega.
cut (is_color (acc t0 i)). unfold is_color; intuition.
auto.
rewrite acc_upd_neq; intuition.
do 2 rewrite length_update; trivial.
assert (k<>i \/ k=i). omega. intuition.
rewrite acc_upd_neq; intuition.
assert (k<>r-1 \/ k=r-1). omega. intuition.
rewrite acc_upd_neq; intuition.
subst; rewrite acc_upd_eq; intuition.
subst; rewrite acc_upd_eq; intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma dutch_flag_po_8 : 
  (n: Z)
  (t: color_array)
  (HW_1: `0 <= n` /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))))
  (HW_2: (`0 <= 0` /\ `0 <= 0`) /\ (`0 <= n` /\ `n <= n`) /\
         (monochrome t `0` `0` blue) /\ (monochrome t `0` `0` white) /\
         (monochrome t n n red) /\ `(length t) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t k)))) /\
         (permutation t t `0` `n - 1`))
  (b: Z)
  (i: Z)
  (r: Z)
  (t0: color_array)
  (HW_3: (`0 <= b` /\ `b <= i`) /\ (`i <= r` /\ `r <= n`) /\
         (monochrome t0 `0` b blue) /\ (monochrome t0 b i white) /\
         (monochrome t0 r n red) /\ `(length t0) = n` /\
         ((k:Z) (`0 <= k` /\ `k < n` -> (is_color (acc t0 k)))) /\
         (permutation t0 t `0` `n - 1`))
  (HW_21: `i >= r`)
  (EX b:Z |
   (EX r:Z | (monochrome t0 `0` b blue) /\ (monochrome t0 b r white) /\
    (monochrome t0 r n red))) /\
  (permutation t0 t `0` `n - 1`).
Proof.
intros.
exists b; exists r; intuition.
assert (i=r). omega. subst; intuition.
Save.

