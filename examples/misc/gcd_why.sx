(BG_PUSH (FORALL (t i v) (EQ (array_length (store t i v)) (array_length t))))

; axiomatization of gcd
(BG_PUSH
  (FORALL (a b) (EQ (gcd a b) (gcd (- a b) b)))
  (FORALL (a b) (EQ (gcd a b) (gcd a (- b a))))
  (FORALL (a) (EQ (gcd a a) a))
  (FORALL (a) (EQ (gcd a 0) a))
  (FORALL (a b) (EQ (gcd a b) (gcd b (int_mod a b))))
)

; definition of max
(BG_PUSH
(FORALL (a b)
  (PATS (max a b))
  (>= (max a b) a))
(FORALL (a b)
  (PATS (max a b))
  (>= (max a b) b))
(FORALL (a b)
  (PATS (max a b))
  (OR (EQ (max a b) a) (EQ (max a b) b)))
)

; 0 <= int_mod x y < y
(BG_PUSH
  (FORALL (x y) (IMPLIES (AND (<= 0 x) (<= 0 y)) (<= 0 (int_mod x y))))
  (FORALL (x y) (IMPLIES (AND (<= 0 x) (<= 0 y)) (< (int_mod x y) y)))
)

;; DO NOT EDIT BELOW THIS LINE

;; gcd1_po_1, Why obligation from file "gcd.mlw", characters 391-402
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(IMPLIES (EQ x a)
(FORALL (y)
(IMPLIES (EQ y b)
(FORALL (Variant1)
(FORALL (x1)
(FORALL (y1)
(IMPLIES (EQ Variant1 (max x1 y1))
(IMPLIES (AND (< 0 x1) (AND (< 0 y1) (EQ (gcd x1 y1) (gcd a b))))
(IMPLIES (NEQ x1 y1)
(IMPLIES (> x1 y1)
(FORALL (x2)
(IMPLIES (EQ x2 (- x1 y1))
(AND (AND (< 0 x2) (AND (< 0 y1) (EQ (gcd x2 y1) (gcd a b))))
(AND (<= 0 (max x1 y1)) (< (max x2 y1) (max x1 y1))))))))))))))))))))

;; gcd1_po_2, Why obligation from file "gcd.mlw", characters 419-430
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(IMPLIES (EQ x a)
(FORALL (y)
(IMPLIES (EQ y b)
(FORALL (Variant1)
(FORALL (x1)
(FORALL (y1)
(IMPLIES (EQ Variant1 (max x1 y1))
(IMPLIES (AND (< 0 x1) (AND (< 0 y1) (EQ (gcd x1 y1) (gcd a b))))
(IMPLIES (NEQ x1 y1)
(IMPLIES (<= x1 y1)
(FORALL (y2)
(IMPLIES (EQ y2 (- y1 x1))
(AND (AND (< 0 x1) (AND (< 0 y2) (EQ (gcd x1 y2) (gcd a b))))
(AND (<= 0 (max x1 y1)) (< (max x1 y2) (max x1 y1))))))))))))))))))))

;; gcd1_po_3, Why obligation from file "gcd.mlw", characters 262-437
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(IMPLIES (EQ x a)
(FORALL (y)
(IMPLIES (EQ y b)
(FORALL (Variant1)
(FORALL (x1)
(FORALL (y1)
(IMPLIES (EQ Variant1 (max x1 y1))
(IMPLIES (AND (< 0 x1) (AND (< 0 y1) (EQ (gcd x1 y1) (gcd a b))))
(IMPLIES (EQ x1 y1)
(FORALL (result) (IMPLIES (EQ result x1) (EQ result (gcd a b)))))))))))))))))

;; gcd1_po_4, Why obligation from file "gcd.mlw", characters 299-337
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (> a 0) (> b 0))
(FORALL (x)
(IMPLIES (EQ x a)
(FORALL (y)
(IMPLIES (EQ y b) (AND (< 0 x) (AND (< 0 y) (EQ (gcd x y) (gcd a b)))))))))))

;; gcd2_po_1, Why obligation from file "gcd.mlw", characters 723-729
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (>= a 0) (>= b 0))
(FORALL (x)
(IMPLIES (EQ x a)
(FORALL (y)
(IMPLIES (EQ y b)
(FORALL (Variant1)
(FORALL (x1)
(FORALL (y1)
(IMPLIES (EQ Variant1 y1)
(IMPLIES (AND (<= 0 x1) (AND (<= 0 y1) (EQ (gcd x1 y1) (gcd a b))))
(IMPLIES (NEQ y1 0) (NEQ y1 0))))))))))))))

;; gcd2_po_2, Why obligation from file "gcd.mlw", characters 741-774
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (>= a 0) (>= b 0))
(FORALL (x)
(IMPLIES (EQ x a)
(FORALL (y)
(IMPLIES (EQ y b)
(FORALL (Variant1)
(FORALL (x1)
(FORALL (y1)
(IMPLIES (EQ Variant1 y1)
(IMPLIES (AND (<= 0 x1) (AND (<= 0 y1) (EQ (gcd x1 y1) (gcd a b))))
(IMPLIES (NEQ y1 0)
(IMPLIES (NEQ y1 0)
(FORALL (r)
(IMPLIES (EQ r (int_mod x1 y1))
(FORALL (x2)
(IMPLIES (EQ x2 y1)
(FORALL (y2)
(IMPLIES (EQ y2 r)
(AND (AND (<= 0 x2) (AND (<= 0 y2) (EQ (gcd x2 y2) (gcd a b))))
(AND (<= 0 y1) (< y2 y1)))))))))))))))))))))))

;; gcd2_po_3, Why obligation from file "gcd.mlw", characters 617-783
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (>= a 0) (>= b 0))
(FORALL (x)
(IMPLIES (EQ x a)
(FORALL (y)
(IMPLIES (EQ y b)
(FORALL (Variant1)
(FORALL (x1)
(FORALL (y1)
(IMPLIES (EQ Variant1 y1)
(IMPLIES (AND (<= 0 x1) (AND (<= 0 y1) (EQ (gcd x1 y1) (gcd a b))))
(IMPLIES (EQ y1 0)
(FORALL (result) (IMPLIES (EQ result x1) (EQ result (gcd a b)))))))))))))))))

;; gcd2_po_4, Why obligation from file "gcd.mlw", characters 653-693
(FORALL (a)
(FORALL (b)
(IMPLIES (AND (>= a 0) (>= b 0))
(FORALL (x)
(IMPLIES (EQ x a)
(FORALL (y)
(IMPLIES (EQ y b) (AND (<= 0 x) (AND (<= 0 y) (EQ (gcd x y) (gcd a b)))))))))))

