
(**** Swapping the contents of two references *)


(**** 1. with global references *)

parameter x,y : int ref

let swap1 () = 
  {}
  (let t = !x in begin x := !y; y := t end)
  { x = y@ and y = x@ }

(* a different syntax, with begin...end instead of parentheses *)
let swap2 () = 
  {} 
  begin
    let t = !x in
    begin
      x := !y; 
      y := t
    end
  end
  { x = y@ and y = x@ } 


(**** 2. with a function taking references as argument *)

let swap3 = fun (a,b : int ref) ->
  {} 
  (let t = !a in begin a := !b; b := t end)
  { a = b@ and b = a@ }

(* test on some local references *)
let test_swap3 () =
  let c = ref 1 in
  let d = ref 2 in
  (swap3 c d { d = 1 })

(* calls on the globals x,y *)
let call_swap3_x_y () = {} (swap3 x y) { x = y@ and y = x@ }
let call_swap3_y_x () = {} (swap3 y x) { x = y@ and y = x@ }


(**** 3. with a function using a global reference *)

parameter tmp : int ref

let swap4 = fun (a,b : int ref) ->
  {} 
  begin tmp := !a; a := !b; b := !tmp end
  { a = b@ and b = a@ }

(* test on some local references *)
let test_swap4 () =
  let c = ref 1 in
  let d = ref 2 in
  (swap4 c d { d = 1 })

(* calls on the globals x,y *)
let call_swap4_x_y () = { x = 3 } (swap4 x y) { y = 3 }
let call_swap4_y_x () = { x = 3 } (swap4 y x) { y = 3 }
