
;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom access_update
 (FORALL (t i v) (EQ (access (update t i v) i) v)))

(BG_PUSH
 ;; Why axiom access_update_neq
 (FORALL (t i j v)
 (IMPLIES (NEQ i j) (EQ (access (update t i v) j) (access t j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j)
 (FORALL (t v) (EQ (access (update t i v) j) (access t j))))))

(DEFPRED (sorted_array t i j)
  (FORALL (k)
  (IMPLIES (AND (<= i k) (< k j)) (<= (access t k) (access t (+ k 1))))))

(DEFPRED (exchange t1 t2 i j)
  (AND (EQ (array_length t1) (array_length t2))
  (AND (EQ (access t1 i) (access t2 j))
  (AND (EQ (access t2 i) (access t1 j))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i) (NEQ k j)) (EQ (access t1 k) (access t2 k))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t) (EQ (permut t t) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1 t2)
 (IMPLIES (EQ (permut t1 t2) |@true|) (EQ (permut t2 t1) |@true|))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1 t2 t3)
 (IMPLIES (AND (EQ (permut t1 t2) |@true|) (EQ (permut t2 t3) |@true|))
 (EQ (permut t1 t3) |@true|))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (t i j)
 (EQ (permut t (update (update t i (access t j)) j (access t i))) |@true|)))

(BG_PUSH
 ;; Why axiom sub_permut_refl
 (FORALL (t g d) (EQ (sub_permut g d t t) |@true|)))

(BG_PUSH
 ;; Why axiom sub_permut_sym
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (sub_permut g d t2 t1) |@true|))))

(BG_PUSH
 ;; Why axiom sub_permut_trans
 (FORALL (t1 t2 t3 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))

 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_1
 (FORALL (t g d i j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (EQ (sub_permut
 g d t (update (update t i (access t j)) j (access t i))) |@true|)))

 (FORALL (g d i j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (FORALL (t)
 (EQ (sub_permut
 g d t (update (update t i (access t j)) j (access t i))) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_2
 (FORALL (t1 t2 g d i j)
 (IMPLIES
 (AND (<= g i)
 (AND (<= i d) (AND (<= g j) (AND (<= j d) (exchange t1 t2 i j)))))
 (EQ (sub_permut g d t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom sub_permut_weakening
 (FORALL (a1 a2 l1 r1 l2 r2)
 (IMPLIES (AND (<= l1 l2) (AND (<= l2 r2) (<= r2 r1)))
 (IMPLIES (EQ (sub_permut l2 r2 a1 a2) |@true|)
 (EQ (sub_permut l1 r1 a1 a2) |@true|))))

 (FORALL (l1 r1 l2 r2)
 (IMPLIES (AND (<= l1 l2) (AND (<= l2 r2) (<= r2 r1)))
 (FORALL (a2 a1)
 (IMPLIES (EQ (sub_permut l2 r2 a1 a2) |@true|)
 (EQ (sub_permut l1 r1 a1 a2) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_permut_eq
 (FORALL (a1 a2 l r)
 (IMPLIES (<= l r)
 (IMPLIES (EQ (sub_permut l r a1 a2) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< r i)) (EQ (access a2 i) (access a1 i)))))))

 (FORALL (l r)
 (IMPLIES (<= l r)
 (FORALL (a2 a1)
 (IMPLIES (EQ (sub_permut l r a1 a2) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< r i)) (EQ (access a2 i) (access a1 i)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_permut
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|) (EQ (permut t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (t i v) (EQ (array_length (update t i v)) (array_length t))))

(BG_PUSH
 ;; Why axiom sub_permut_array_length
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2)))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (t1 t2)
 (IMPLIES (EQ (permut t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2)))))

;; add1_po_1, File "peano.mlw", line 11, characters 17-53
(FORALL (y)
(FORALL (x) (IMPLIES (>= y 0) (AND (<= 0 y) (EQ x (+ x (- y y)))))))

;; add1_po_2, File "peano.mlw", line 11, characters 17-53
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(FORALL (x0)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x0 (+ x (- y z))))
(IMPLIES (> z 0)
(FORALL (x1)
(IMPLIES (EQ x1 (+ x0 1))
(FORALL (z0)
(IMPLIES (EQ z0 (- z 1)) (AND (<= 0 z0) (EQ x1 (+ x (- y z0)))))))))))))))

;; add1_po_3, File "peano.mlw", line 12, characters 15-16
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(FORALL (x0)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x0 (+ x (- y z))))
(IMPLIES (> z 0)
(FORALL (x1)
(IMPLIES (EQ x1 (+ x0 1))
(FORALL (z0) (IMPLIES (EQ z0 (- z 1)) (AND (<= 0 z) (< z0 z)))))))))))))

;; add1_po_4, File "peano.mlw", line 16, characters 4-14
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(FORALL (x0)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x0 (+ x (- y z))))
(IMPLIES (<= z 0) (EQ x0 (+ x y)))))))))

;; u1_po_1, File "peano.mlw", line 20, characters 30-38
(>= 7 0)

;; u1_po_2, File "peano.mlw", line 20, characters 41-49
(IMPLIES (>= 7 0) (FORALL (r) (IMPLIES (EQ r (+ 3 7)) (EQ r 10))))

;; rec_add1_po_1, File "peano.mlw", line 26, characters 37-53
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(IMPLIES (< 0 y)
(FORALL (x0) (IMPLIES (EQ x0 (+ x 1)) (AND (<= 0 y) (< (- y 1) y))))))))

;; rec_add1_po_2, File "peano.mlw", line 26, characters 37-53
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(IMPLIES (< 0 y)
(FORALL (x0)
(IMPLIES (EQ x0 (+ x 1))
(IMPLIES (AND (<= 0 y) (< (- y 1) y)) (>= (- y 1) 0))))))))

;; rec_add1_po_3, File "peano.mlw", line 27, characters 4-14
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(IMPLIES (< 0 y)
(FORALL (x0)
(IMPLIES (EQ x0 (+ x 1))
(IMPLIES (AND (<= 0 y) (< (- y 1) y))
(IMPLIES (>= (- y 1) 0)
(FORALL (x1) (IMPLIES (EQ x1 (+ x0 (- y 1))) (EQ x1 (+ x y))))))))))))

;; rec_add1_po_4, File "peano.mlw", line 27, characters 4-14
(FORALL (y)
(FORALL (x) (IMPLIES (>= y 0) (IMPLIES (>= 0 y) (EQ x (+ x y))))))

;; u11_po_1, File "peano.mlw", line 31, characters 31-43
(>= 7 0)

;; u11_po_2, File "peano.mlw", line 31, characters 46-54
(IMPLIES (>= 7 0) (FORALL (r) (IMPLIES (EQ r (+ 3 7)) (EQ r 10))))

;; mult1_po_1, File "peano.mlw", line 43, characters 19-53
(FORALL (y)
(FORALL (x)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (x0) (IMPLIES (EQ x0 0) (AND (<= 0 y) (EQ x0 (* x (- y y)))))))))

;; mult1_po_2, File "peano.mlw", line 43, characters 19-53
(FORALL (y)
(FORALL (x)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (x0)
(IMPLIES (EQ x0 0)
(FORALL (x1)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x1 (* x (- y z))))
(IMPLIES (> z 0)
(IMPLIES (>= x 0)
(FORALL (x2)
(IMPLIES (EQ x2 (+ x1 x))
(FORALL (z0)
(IMPLIES (EQ z0 (- z 1)) (AND (<= 0 z0) (EQ x2 (* x (- y z0))))))))))))))))))

;; mult1_po_3, File "peano.mlw", line 44, characters 17-18
(FORALL (y)
(FORALL (x)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (x0)
(IMPLIES (EQ x0 0)
(FORALL (x1)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x1 (* x (- y z))))
(IMPLIES (> z 0)
(IMPLIES (>= x 0)
(FORALL (x2)
(IMPLIES (EQ x2 (+ x1 x))
(FORALL (z0) (IMPLIES (EQ z0 (- z 1)) (AND (<= 0 z) (< z0 z))))))))))))))))

;; mult1_po_4, File "peano.mlw", line 49, characters 4-14
(FORALL (y)
(FORALL (x)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (x0)
(IMPLIES (EQ x0 0)
(FORALL (x1)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x1 (* x (- y z))))
(IMPLIES (<= z 0) (EQ x1 (* x y)))))))))))

;; u2_po_1, File "peano.mlw", line 53, characters 30-39
(AND (>= 4 0) (>= 6 0))

;; u2_po_2, File "peano.mlw", line 53, characters 42-50
(IMPLIES (AND (>= 4 0) (>= 6 0))
(FORALL (r) (IMPLIES (EQ r (* 4 6)) (EQ r 24))))

;; mult2_po_1, File "peano.mlw", line 63, characters 3-13
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0)) (IMPLIES (EQ x 0) (EQ 0 (* x y))))))

;; mult2_po_2, File "peano.mlw", line 62, characters 32-45
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(IMPLIES (NEQ x 0) (AND (<= 0 x) (< (- x 1) x))))))

;; mult2_po_3, File "peano.mlw", line 62, characters 32-45
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(IMPLIES (NEQ x 0)
(IMPLIES (AND (<= 0 x) (< (- x 1) x)) (AND (>= (- x 1) 0) (>= y 0)))))))

;; mult2_po_4, File "peano.mlw", line 63, characters 3-13
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(IMPLIES (NEQ x 0)
(IMPLIES (AND (<= 0 x) (< (- x 1) x))
(IMPLIES (AND (>= (- x 1) 0) (>= y 0))
(FORALL (result)
(IMPLIES (EQ result (* (- x 1) y))
(IMPLIES (>= y 0)
(FORALL (result0) (IMPLIES (EQ result0 (+ y result)) (EQ result0 (* x y)))))))))))))

;; mult2_po_5, File "peano.mlw", line 60, characters 53-63
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (a)
(FORALL (b) (IMPLIES (>= a 0) (IMPLIES (EQ a 0) (EQ b (+ a b)))))))))

;; mult2_po_6, File "peano.mlw", line 60, characters 33-49
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (a)
(IMPLIES (>= a 0) (IMPLIES (NEQ a 0) (AND (<= 0 a) (< (- a 1) a))))))))

;; mult2_po_7, File "peano.mlw", line 60, characters 33-49
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (a)
(IMPLIES (>= a 0)
(IMPLIES (NEQ a 0) (IMPLIES (AND (<= 0 a) (< (- a 1) a)) (>= (- a 1) 0))))))))

;; mult2_po_8, File "peano.mlw", line 60, characters 53-63
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (a)
(FORALL (b)
(IMPLIES (>= a 0)
(IMPLIES (NEQ a 0)
(IMPLIES (AND (<= 0 a) (< (- a 1) a))
(IMPLIES (>= (- a 1) 0)
(FORALL (result)
(IMPLIES (EQ result (+ (- a 1) (+ b 1))) (EQ result (+ a b)))))))))))))

