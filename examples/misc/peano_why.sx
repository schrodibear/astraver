
;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(BG_PUSH
 ;; Why axiom access_update
 (FORALL (a i v) (EQ (access (update a i v) i) v)))

(BG_PUSH
 ;; Why axiom access_update_neq
 (FORALL (a i j v)
 (IMPLIES (NEQ i j) (EQ (access (update a i v) j) (access a j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j)
 (FORALL (a v) (EQ (access (update a i v) j) (access a j))))))

(DEFPRED (sorted_array t i j)
  (FORALL (k1 k2)
  (IMPLIES (AND (AND (<= i k1) (<= k1 k2)) (<= k2 j))
  (<= (access t k1) (access t k2)))))

(DEFPRED (exchange a1 a2 i j)
  (AND (EQ (array_length a1) (array_length a2))
  (AND (EQ (access a1 i) (access a2 j))
  (AND (EQ (access a2 i) (access a1 j))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i) (NEQ k j)) (EQ (access a1 k) (access a2 k))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t l u) (EQ (permut t t l u) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1 t2 l u)
 (IMPLIES (EQ (permut t1 t2 l u) |@true|) (EQ (permut t2 t1 l u) |@true|))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1 t2 t3 l u)
 (IMPLIES (EQ (permut t1 t2 l u) |@true|)
 (IMPLIES (EQ (permut t2 t3 l u) |@true|) (EQ (permut t1 t3 l u) |@true|))))

 (FORALL (t1 t2 l u)
 (IMPLIES (EQ (permut t1 t2 l u) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (permut t2 t3 l u) |@true|) (EQ (permut t1 t3 l u) |@true|))))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (a1 a2 l u i j)
 (IMPLIES (AND (<= l i) (<= i u))
 (IMPLIES (AND (<= l j) (<= j u))
 (IMPLIES (exchange a1 a2 i j) (EQ (permut a1 a2 l u) |@true|)))))

 (FORALL (l u i)
 (IMPLIES (AND (<= l i) (<= i u))
 (FORALL (j)
 (IMPLIES (AND (<= l j) (<= j u))
 (FORALL (a1 a2)
 (IMPLIES (exchange a1 a2 i j) (EQ (permut a1 a2 l u) |@true|))))))))

(BG_PUSH
 ;; Why axiom exchange_upd
 (FORALL (a i j)
 (exchange a (update (update a i (access a j)) j (access a i)) i j)))

(BG_PUSH
 ;; Why axiom permut_weakening
 (FORALL (a1 a2 l1 r1 l2 r2)
 (IMPLIES (AND (AND (<= l1 l2) (<= l2 r2)) (<= r2 r1))
 (IMPLIES (EQ (permut a1 a2 l2 r2) |@true|)
 (EQ (permut a1 a2 l1 r1) |@true|))))

 (FORALL (l1 r1 l2 r2)
 (IMPLIES (AND (AND (<= l1 l2) (<= l2 r2)) (<= r2 r1))
 (FORALL (a2 a1)
 (IMPLIES (EQ (permut a1 a2 l2 r2) |@true|)
 (EQ (permut a1 a2 l1 r1) |@true|))))))

(BG_PUSH
 ;; Why axiom permut_eq
 (FORALL (a1 a2 l u)
 (IMPLIES (<= l u)
 (IMPLIES (EQ (permut a1 a2 l u) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< u i)) (EQ (access a2 i) (access a1 i)))))))

 (FORALL (l u)
 (IMPLIES (<= l u)
 (FORALL (a2 a1)
 (IMPLIES (EQ (permut a1 a2 l u) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< u i)) (EQ (access a2 i) (access a1 i)))))))))

(DEFPRED (permutation a1 a2)
  (EQ (permut a1 a2 0 (- (array_length a1) 1)) |@true|))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (a i v) (EQ (array_length (update a i v)) (array_length a))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (a1 a2 l u)
 (IMPLIES (EQ (permut a1 a2 l u) |@true|)
 (EQ (array_length a1) (array_length a2)))))

;; add1_po_1, File "peano.mlw", line 11, characters 17-53
(FORALL (y) (IMPLIES (>= y 0) (<= 0 y)))

;; add1_po_2, File "peano.mlw", line 11, characters 17-53
(FORALL (y) (FORALL (x) (IMPLIES (>= y 0) (EQ x (+ x (- y y))))))

;; add1_po_3, File "peano.mlw", line 11, characters 17-53
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(FORALL (x0)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x0 (+ x (- y z))))
(IMPLIES (> z 0)
(FORALL (x1)
(IMPLIES (EQ x1 (+ x0 1)) (FORALL (z0) (IMPLIES (EQ z0 (- z 1)) (<= 0 z0))))))))))))

;; add1_po_4, File "peano.mlw", line 11, characters 17-53
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(FORALL (x0)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x0 (+ x (- y z))))
(IMPLIES (> z 0)
(FORALL (x1)
(IMPLIES (EQ x1 (+ x0 1))
(FORALL (z0) (IMPLIES (EQ z0 (- z 1)) (EQ x1 (+ x (- y z0))))))))))))))

;; add1_po_5, File "peano.mlw", line 12, characters 15-16
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(FORALL (x0)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x0 (+ x (- y z))))
(IMPLIES (> z 0)
(FORALL (x1)
(IMPLIES (EQ x1 (+ x0 1)) (FORALL (z0) (IMPLIES (EQ z0 (- z 1)) (< z0 z))))))))))))

;; add1_po_6, File "peano.mlw", line 16, characters 4-14
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(FORALL (x0)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x0 (+ x (- y z))))
(IMPLIES (<= z 0) (EQ x0 (+ x y)))))))))

;; u1_po_1, File "peano.mlw", line 20, characters 30-38
(>= 7 0)

;; u1_po_2, File "peano.mlw", line 20, characters 41-49
(IMPLIES (>= 7 0) (FORALL (r) (IMPLIES (EQ r (+ 3 7)) (EQ r 10))))

;; rec_add1_po_1, File "peano.mlw", line 26, characters 37-53
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(IMPLIES (< 0 y) (FORALL (x0) (IMPLIES (EQ x0 (+ x 1)) (<= 0 y)))))))

;; rec_add1_po_2, File "peano.mlw", line 26, characters 37-53
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(IMPLIES (< 0 y) (FORALL (x0) (IMPLIES (EQ x0 (+ x 1)) (< (- y 1) y)))))))

;; rec_add1_po_3, File "peano.mlw", line 26, characters 37-53
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(IMPLIES (< 0 y)
(FORALL (x0)
(IMPLIES (EQ x0 (+ x 1))
(IMPLIES (AND (<= 0 y) (< (- y 1) y)) (>= (- y 1) 0))))))))

;; rec_add1_po_4, File "peano.mlw", line 27, characters 4-14
(FORALL (y)
(FORALL (x)
(IMPLIES (>= y 0)
(IMPLIES (< 0 y)
(FORALL (x0)
(IMPLIES (EQ x0 (+ x 1))
(IMPLIES (AND (<= 0 y) (< (- y 1) y))
(IMPLIES (>= (- y 1) 0)
(FORALL (x1) (IMPLIES (EQ x1 (+ x0 (- y 1))) (EQ x1 (+ x y))))))))))))

;; rec_add1_po_5, File "peano.mlw", line 27, characters 4-14
(FORALL (y)
(FORALL (x) (IMPLIES (>= y 0) (IMPLIES (>= 0 y) (EQ x (+ x y))))))

;; u11_po_1, File "peano.mlw", line 31, characters 31-43
(>= 7 0)

;; u11_po_2, File "peano.mlw", line 31, characters 46-54
(IMPLIES (>= 7 0) (FORALL (r) (IMPLIES (EQ r (+ 3 7)) (EQ r 10))))

;; mult1_po_1, File "peano.mlw", line 43, characters 19-53
(FORALL (y)
(FORALL (x)
(IMPLIES (AND (>= x 0) (>= y 0)) (FORALL (x0) (IMPLIES (EQ x0 0) (<= 0 y))))))

;; mult1_po_2, File "peano.mlw", line 43, characters 19-53
(FORALL (y)
(FORALL (x)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (x0) (IMPLIES (EQ x0 0) (EQ x0 (* x (- y y))))))))

;; mult1_po_3, File "peano.mlw", line 43, characters 19-53
(FORALL (y)
(FORALL (x)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (x0)
(IMPLIES (EQ x0 0)
(FORALL (x1)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x1 (* x (- y z))))
(IMPLIES (> z 0)
(IMPLIES (>= x 0)
(FORALL (x2)
(IMPLIES (EQ x2 (+ x1 x)) (FORALL (z0) (IMPLIES (EQ z0 (- z 1)) (<= 0 z0)))))))))))))))

;; mult1_po_4, File "peano.mlw", line 43, characters 19-53
(FORALL (y)
(FORALL (x)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (x0)
(IMPLIES (EQ x0 0)
(FORALL (x1)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x1 (* x (- y z))))
(IMPLIES (> z 0)
(IMPLIES (>= x 0)
(FORALL (x2)
(IMPLIES (EQ x2 (+ x1 x))
(FORALL (z0) (IMPLIES (EQ z0 (- z 1)) (EQ x2 (* x (- y z0)))))))))))))))))

;; mult1_po_5, File "peano.mlw", line 44, characters 17-18
(FORALL (y)
(FORALL (x)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (x0)
(IMPLIES (EQ x0 0)
(FORALL (x1)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x1 (* x (- y z))))
(IMPLIES (> z 0)
(IMPLIES (>= x 0)
(FORALL (x2)
(IMPLIES (EQ x2 (+ x1 x)) (FORALL (z0) (IMPLIES (EQ z0 (- z 1)) (< z0 z)))))))))))))))

;; mult1_po_6, File "peano.mlw", line 49, characters 4-14
(FORALL (y)
(FORALL (x)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (x0)
(IMPLIES (EQ x0 0)
(FORALL (x1)
(FORALL (z)
(IMPLIES (AND (<= 0 z) (EQ x1 (* x (- y z))))
(IMPLIES (<= z 0) (EQ x1 (* x y)))))))))))

;; u2_po_1, File "peano.mlw", line 53, characters 30-39
(>= 4 0)

;; u2_po_2, File "peano.mlw", line 53, characters 30-39
(>= 6 0)

;; u2_po_3, File "peano.mlw", line 53, characters 42-50
(IMPLIES (AND (>= 4 0) (>= 6 0))
(FORALL (r) (IMPLIES (EQ r (* 4 6)) (EQ r 24))))

;; mult2_po_1, File "peano.mlw", line 63, characters 3-13
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0)) (IMPLIES (EQ x 0) (EQ 0 (* x y))))))

;; mult2_po_2, File "peano.mlw", line 62, characters 32-45
(FORALL (x)
(FORALL (y) (IMPLIES (AND (>= x 0) (>= y 0)) (IMPLIES (NEQ x 0) (<= 0 x)))))

;; mult2_po_3, File "peano.mlw", line 62, characters 32-45
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0)) (IMPLIES (NEQ x 0) (< (- x 1) x)))))

;; mult2_po_4, File "peano.mlw", line 62, characters 32-45
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(IMPLIES (NEQ x 0) (IMPLIES (AND (<= 0 x) (< (- x 1) x)) (>= (- x 1) 0))))))

;; mult2_po_5, File "peano.mlw", line 63, characters 3-13
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(IMPLIES (NEQ x 0)
(IMPLIES (AND (<= 0 x) (< (- x 1) x))
(IMPLIES (AND (>= (- x 1) 0) (>= y 0))
(FORALL (result)
(IMPLIES (EQ result (* (- x 1) y))
(IMPLIES (>= y 0)
(FORALL (result0) (IMPLIES (EQ result0 (+ y result)) (EQ result0 (* x y)))))))))))))

;; mult2_po_6, File "peano.mlw", line 60, characters 53-63
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (a)
(FORALL (b) (IMPLIES (>= a 0) (IMPLIES (EQ a 0) (EQ b (+ a b)))))))))

;; mult2_po_7, File "peano.mlw", line 60, characters 33-49
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (a) (IMPLIES (>= a 0) (IMPLIES (NEQ a 0) (<= 0 a)))))))

;; mult2_po_8, File "peano.mlw", line 60, characters 33-49
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (a) (IMPLIES (>= a 0) (IMPLIES (NEQ a 0) (< (- a 1) a)))))))

;; mult2_po_9, File "peano.mlw", line 60, characters 33-49
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (a)
(IMPLIES (>= a 0)
(IMPLIES (NEQ a 0) (IMPLIES (AND (<= 0 a) (< (- a 1) a)) (>= (- a 1) 0))))))))

;; mult2_po_10, File "peano.mlw", line 60, characters 53-63
(FORALL (x)
(FORALL (y)
(IMPLIES (AND (>= x 0) (>= y 0))
(FORALL (a)
(FORALL (b)
(IMPLIES (>= a 0)
(IMPLIES (NEQ a 0)
(IMPLIES (AND (<= 0 a) (< (- a 1) a))
(IMPLIES (>= (- a 1) 0)
(FORALL (result)
(IMPLIES (EQ result (+ (- a 1) (+ b 1))) (EQ result (+ a b)))))))))))))

