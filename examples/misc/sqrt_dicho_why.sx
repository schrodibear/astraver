
;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y)))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y)))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y)))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y)))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y)))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y)))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x) (FORALL (y) (EQ (ite |@true| x y) x))))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x) (FORALL (y) (EQ (ite |@false| x y) y))))

(BG_PUSH
 ;; Why axiom access_update
 (FORALL (t) (FORALL (i) (FORALL (v) (EQ (access (update t i v) i) v)))))

(BG_PUSH
 ;; Why axiom access_update_neq
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (FORALL (v) (IMPLIES (NEQ i j) (EQ (access (update t i v) j) (access t j)))))))

 (FORALL (i)
 (FORALL (j)
 (IMPLIES (NEQ i j)
 (FORALL (t) (FORALL (v) (EQ (access (update t i v) j) (access t j))))))))

(DEFPRED (sorted_array t i j)
  (FORALL (k)
  (IMPLIES (AND (<= i k) (< k j)) (<= (access t k) (access t (+ k 1))))))

(DEFPRED (exchange t1 t2 i j)
  (AND (EQ (array_length t1) (array_length t2))
  (AND (EQ (access t1 i) (access t2 j))
  (AND (EQ (access t2 i) (access t1 j))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i) (NEQ k j)) (EQ (access t1 k) (access t2 k))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t) (EQ (permut t t) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1)
 (FORALL (t2)
 (IMPLIES (EQ (permut t1 t2) |@true|) (EQ (permut t2 t1) |@true|)))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (t3)
 (IMPLIES (AND (EQ (permut t1 t2) |@true|) (EQ (permut t2 t3) |@true|))
 (EQ (permut t1 t3) |@true|))))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (EQ (permut t (update (update t i (access t j)) j (access t i))) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_refl
 (FORALL (t) (FORALL (g) (FORALL (d) (EQ (sub_permut g d t t) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_sym
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (sub_permut g d t2 t1) |@true|)))))))

(BG_PUSH
 ;; Why axiom sub_permut_trans
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (t3)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))))))

 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_1
 (FORALL (t)
 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (EQ (sub_permut g d t
 (update (update t i (access t j)) j (access t i))) |@true|)))))))

 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (FORALL (t)
 (EQ (sub_permut g d t
 (update (update t i (access t j)) j (access t i))) |@true|))))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_2
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES
 (AND (<= g i)
 (AND (<= i d) (AND (<= g j) (AND (<= j d) (exchange t1 t2 i j)))))
 (EQ (sub_permut g d t1 t2) |@true|)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_permut
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|) (EQ (permut t1 t2) |@true|)))))))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (t)
 (FORALL (i)
 (FORALL (v) (EQ (array_length (update t i v)) (array_length t))))))

(BG_PUSH
 ;; Why axiom sub_permut_array_length
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2))))))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (t1)
 (FORALL (t2)
 (IMPLIES (EQ (permut t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2))))))

;; sqrt_po_1, Why obligation from file "", line 0, characters 0-0:
(FORALL (x)
(IMPLIES (>= x 0)
(AND (<= (* 0 0) x) (AND (< x (* (+ x 1) (+ x 1))) (< 0 (+ x 1))))))

;; sqrt_po_2, Why obligation from file "", line 0, characters 0-0:
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (AND (<= (* 0 0) x) (AND (< x (* (+ x 1) (+ x 1))) (< 0 (+ x 1))))
(FORALL (inf)
(FORALL (sup)
(IMPLIES (AND (<= (* inf inf) x) (AND (< x (* sup sup)) (< inf sup)))
(IMPLIES (NEQ (+ inf 1) sup) (NEQ 2 0))))))))

;; sqrt_po_3, Why obligation from file "", line 0, characters 0-0:
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (AND (<= (* 0 0) x) (AND (< x (* (+ x 1) (+ x 1))) (< 0 (+ x 1))))
(FORALL (inf)
(FORALL (sup)
(IMPLIES (AND (<= (* inf inf) x) (AND (< x (* sup sup)) (< inf sup)))
(IMPLIES (NEQ (+ inf 1) sup)
(IMPLIES (NEQ 2 0)
(FORALL (result)
(IMPLIES (EQ result (int_div (+ (+ inf sup) 1) 2))
(FORALL (mil)
(IMPLIES (EQ mil result)
(IMPLIES (< x (* mil mil))
(FORALL (sup0)
(IMPLIES (EQ sup0 mil)
(AND (AND (<= (* inf inf) x) (AND (< x (* sup0 sup0)) (< inf sup0)))
(AND (<= 0 (- sup inf)) (< (- sup0 inf) (- sup inf)))))))))))))))))))

;; sqrt_po_4, Why obligation from file "", line 0, characters 0-0:
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (AND (<= (* 0 0) x) (AND (< x (* (+ x 1) (+ x 1))) (< 0 (+ x 1))))
(FORALL (inf)
(FORALL (sup)
(IMPLIES (AND (<= (* inf inf) x) (AND (< x (* sup sup)) (< inf sup)))
(IMPLIES (NEQ (+ inf 1) sup)
(IMPLIES (NEQ 2 0)
(FORALL (result)
(IMPLIES (EQ result (int_div (+ (+ inf sup) 1) 2))
(FORALL (mil)
(IMPLIES (EQ mil result)
(IMPLIES (>= x (* mil mil))
(FORALL (inf0)
(IMPLIES (EQ inf0 mil)
(AND (AND (<= (* inf0 inf0) x) (AND (< x (* sup sup)) (< inf0 sup)))
(AND (<= 0 (- sup inf)) (< (- sup inf0) (- sup inf)))))))))))))))))))

;; sqrt_po_5, Why obligation from file "", line 0, characters 0-0:
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (AND (<= (* 0 0) x) (AND (< x (* (+ x 1) (+ x 1))) (< 0 (+ x 1))))
(FORALL (inf)
(FORALL (sup)
(IMPLIES (AND (<= (* inf inf) x) (AND (< x (* sup sup)) (< inf sup)))
(IMPLIES (EQ (+ inf 1) sup)
(AND (<= (* inf inf) x) (< x (* (+ inf 1) (+ inf 1)))))))))))

