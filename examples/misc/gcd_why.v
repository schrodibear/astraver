(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.

Parameter gcd : Z -> Z -> Z.

Axiom gcd_asubb_b : forall a b:Z, gcd a b = gcd (a - b) b.
Axiom gcd_a_bsuba : forall a b:Z, gcd a b = gcd a (b - a).
Axiom gcd_a_a : forall a:Z, gcd a a = a.
Axiom gcd_a_0 : forall a:Z, gcd a 0 = a.
Axiom gcd_a_amodb : forall a b:Z, gcd a b = gcd b (a mod b).

Hint Resolve gcd_asubb_b gcd_a_bsuba gcd_a_a gcd_a_0 gcd_a_amodb .

Definition max (x y:Z) : Z :=
  match Z_le_gt_dec x y with
  | left _ => y
  | right _ => x
  end.

(* Why obligation from file "gcd.mlw", characters 391-403 *)
Lemma gcd1_po_1 : 
  forall (a: Z),
  forall (b: Z),
  forall (Pre4: a > 0 /\ b > 0),
  forall (x: Z),
  forall (Post4: x = a),
  forall (y: Z),
  forall (Post3: y = b),
  forall (Variant1: Z),
  forall (x1: Z),
  forall (y1: Z),
  forall (Pre3: Variant1 = (max x1 y1)),
  forall (Pre2: 0 < x1 /\ 0 < y1 /\ (gcd x1 y1) = (gcd a b)),
  forall (Test4: x1 <> y1),
  forall (Test3: x1 > y1),
  forall (x2: Z),
  forall (Post1: x2 = (x1 - y1)),
  (0 < x2 /\ 0 < y1 /\ (gcd x2 y1) = (gcd a b)) /\
  (Zwf 0 (max x2 y1) (max x1 y1)).
Proof.
intuition.
subst x2; rewrite <- H4; auto.
unfold Zwf, max.
case (Z_le_gt_dec x2 y1); case (Z_le_gt_dec x1 y1); intros; omega.
Qed.

(* Why obligation from file "gcd.mlw", characters 419-431 *)
Lemma gcd1_po_2 : 
  forall (a: Z),
  forall (b: Z),
  forall (Pre4: a > 0 /\ b > 0),
  forall (x: Z),
  forall (Post4: x = a),
  forall (y: Z),
  forall (Post3: y = b),
  forall (Variant1: Z),
  forall (x1: Z),
  forall (y1: Z),
  forall (Pre3: Variant1 = (max x1 y1)),
  forall (Pre2: 0 < x1 /\ 0 < y1 /\ (gcd x1 y1) = (gcd a b)),
  forall (Test4: x1 <> y1),
  forall (Test2: x1 <= y1),
  forall (y2: Z),
  forall (Post2: y2 = (y1 - x1)),
  (0 < x1 /\ 0 < y2 /\ (gcd x1 y2) = (gcd a b)) /\
  (Zwf 0 (max x1 y2) (max x1 y1)).
Proof.
intuition.
subst y2; rewrite <- H4; auto.
unfold Zwf, max.
assert (h: x1 <> y1).
 assumption.
 case (Z_le_gt_dec x1 y2); case (Z_le_gt_dec x1 y1); intros; omega.
Qed.

(* Why obligation from file "gcd.mlw", characters 262-441 *)
Lemma gcd1_po_3 : 
  forall (a: Z),
  forall (b: Z),
  forall (Pre4: a > 0 /\ b > 0),
  forall (x: Z),
  forall (Post4: x = a),
  forall (y: Z),
  forall (Post3: y = b),
  forall (Variant1: Z),
  forall (x1: Z),
  forall (y1: Z),
  forall (Pre3: Variant1 = (max x1 y1)),
  forall (Pre2: 0 < x1 /\ 0 < y1 /\ (gcd x1 y1) = (gcd a b)),
  forall (Test1: x1 = y1),
  x1 = (gcd a b).
Proof.
intuition.
rewrite <- H4; rewrite Test1.
auto.
Qed.

(* Why obligation from file "gcd.mlw", characters 299-338 *)
Lemma gcd1_po_4 : 
  forall (a: Z),
  forall (b: Z),
  forall (Pre4: a > 0 /\ b > 0),
  forall (x: Z),
  forall (Post4: x = a),
  forall (y: Z),
  forall (Post3: y = b),
  0 < x /\ 0 < y /\ (gcd x y) = (gcd a b).
Proof.
intuition.
subst; reflexivity.
Qed.


(* Why obligation from file "gcd.mlw", characters 723-730 *)
Lemma gcd2_po_1 : 
  forall (a: Z),
  forall (b: Z),
  forall (Pre5: a >= 0 /\ b >= 0),
  forall (x: Z),
  forall (Post5: x = a),
  forall (y: Z),
  forall (Post4: y = b),
  forall (Variant1: Z),
  forall (x1: Z),
  forall (y1: Z),
  forall (Pre4: Variant1 = y1),
  forall (Pre3: 0 <= x1 /\ 0 <= y1 /\ (gcd x1 y1) = (gcd a b)),
  forall (Test2: y1 <> 0),
  ~(y1 = 0).
Proof.
intuition.
Qed.

(* Why obligation from file "gcd.mlw", characters 741-777 *)
Lemma gcd2_po_2 : 
  forall (a: Z),
  forall (b: Z),
  forall (Pre5: a >= 0 /\ b >= 0),
  forall (x: Z),
  forall (Post5: x = a),
  forall (y: Z),
  forall (Post4: y = b),
  forall (Variant1: Z),
  forall (x1: Z),
  forall (y1: Z),
  forall (Pre4: Variant1 = y1),
  forall (Pre3: 0 <= x1 /\ 0 <= y1 /\ (gcd x1 y1) = (gcd a b)),
  forall (Test2: y1 <> 0),
  forall (Pre2: ~(y1 = 0)),
  forall (r: Z),
  forall (Post3: r = ((Zmod x1 y1))),
  forall (x2: Z),
  forall (Post1: x2 = y1),
  forall (y2: Z),
  forall (Post2: y2 = r),
  (0 <= x2 /\ 0 <= y2 /\ (gcd x2 y2) = (gcd a b)) /\ (Zwf 0 y2 y1).
Proof.
intuition.
assert (h_y0: y1 <> 0).
 assumption.
assert (h1_y0: (y1 > 0)).
 omega.
generalize (Z_mod_lt x1 y1 h1_y0); intro.
subst y2 r; tauto.
subst y2 x2 r.
rewrite <- H4; auto.
unfold Zwf.
assert (h_y0: y1 <> 0).
 assumption.
assert (h1_y0: (y1 > 0)).
 omega.
generalize (Z_mod_lt x1 y1 h1_y0); omega.
Qed.

(* Why obligation from file "gcd.mlw", characters 617-787 *)
Lemma gcd2_po_3 : 
  forall (a: Z),
  forall (b: Z),
  forall (Pre5: a >= 0 /\ b >= 0),
  forall (x: Z),
  forall (Post5: x = a),
  forall (y: Z),
  forall (Post4: y = b),
  forall (Variant1: Z),
  forall (x1: Z),
  forall (y1: Z),
  forall (Pre4: Variant1 = y1),
  forall (Pre3: 0 <= x1 /\ 0 <= y1 /\ (gcd x1 y1) = (gcd a b)),
  forall (Test1: y1 = 0),
  x1 = (gcd a b).
Proof.
intuition.
rewrite <- H4; rewrite Test1; auto.
Qed.

(* Why obligation from file "gcd.mlw", characters 653-694 *)
Lemma gcd2_po_4 : 
  forall (a: Z),
  forall (b: Z),
  forall (Pre5: a >= 0 /\ b >= 0),
  forall (x: Z),
  forall (Post5: x = a),
  forall (y: Z),
  forall (Post4: y = b),
  0 <= x /\ 0 <= y /\ (gcd x y) = (gcd a b).
Proof.
intuition.
subst; reflexivity.
Qed.


