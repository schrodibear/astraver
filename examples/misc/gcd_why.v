(* Load Programs. *)(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.

Parameter gcd : Z -> Z -> Z.

Axiom gcd_asubb_b : forall a b:Z, gcd a b = gcd (a - b) b.
Axiom gcd_a_bsuba : forall a b:Z, gcd a b = gcd a (b - a).
Axiom gcd_a_a : forall a:Z, gcd a a = a.
Axiom gcd_a_0 : forall a:Z, gcd a 0 = a.
Axiom gcd_a_amodb : forall a b:Z, gcd a b = gcd b (a mod b).

Hints Resolve gcd_asubb_b gcd_a_bsuba gcd_a_a gcd_a_0 gcd_a_amodb .

Definition max (x y:Z) : Z :=
  match Z_le_gt_dec x y with
  | left _ => y
  | right _ => x
  end.

(* Why obligation from file , characters 373-385 *)
Lemma gcd1_po_1 :
 forall (a b:Z) (Pre4:(a > 0)%Z /\ (b > 0)%Z) (x:Z) (Post5:x = a) 
   (y:Z) (Post4:y = b) (Variant1 x1 y1:Z) (Pre3:Variant1 = max x1 y1)
   (Pre2:(0 < x1)%Z /\ (0 < y1)%Z /\ gcd x1 y1 = gcd a b)
   (Test4:x1 <> y1) (Test3:(x1 > y1)%Z) (x2:Z)
   (Post1:x2 = (x1 - y1)%Z),
   ((0 < x2)%Z /\ (0 < y1)%Z /\ gcd x2 y1 = gcd a b) /\
   Zwf 0 (max x2 y1) (max x1 y1).
Proof.
intuition.
subst x2; rewrite <- H4; auto.
unfold Zwf, max.
case (Z_le_gt_dec x2 y1); case (Z_le_gt_dec x1 y1); intros; omega.
Qed.

(* Why obligation from file , characters 401-413 *)
Lemma gcd1_po_2 :
 forall (a b:Z) (Pre4:(a > 0)%Z /\ (b > 0)%Z) (x:Z) (Post5:x = a) 
   (y:Z) (Post4:y = b) (Variant1 x1 y1:Z) (Pre3:Variant1 = max x1 y1)
   (Pre2:(0 < x1)%Z /\ (0 < y1)%Z /\ gcd x1 y1 = gcd a b)
   (Test4:x1 <> y1) (Test2:(x1 <= y1)%Z) (y2:Z)
   (Post2:y2 = (y1 - x1)%Z),
   ((0 < x1)%Z /\ (0 < y2)%Z /\ gcd x1 y2 = gcd a b) /\
   Zwf 0 (max x1 y2) (max x1 y1).
Proof.
intuition.
subst y2; rewrite <- H4; auto.
unfold Zwf, max.
assert h: x1 <> y1.
 assumption.
 case (Z_le_gt_dec x1 y2); case (Z_le_gt_dec x1 y1); intros; omega.
Qed.

(* Why obligation from file , characters 281-320 *)
Lemma gcd1_po_3 :
 forall (a b:Z) (Pre4:(a > 0)%Z /\ (b > 0)%Z) (x:Z) (Post5:x = a) 
   (y:Z) (Post4:y = b), (0 < x)%Z /\ (0 < y)%Z /\ gcd x y = gcd a b.
Proof.
intuition.
subst; reflexivity.
Qed.

(* Why obligation from file , characters 430-432 *)
Lemma gcd1_po_4 :
 forall (a b:Z) (Pre4:(a > 0)%Z /\ (b > 0)%Z) (x:Z) (Post5:x = a) 
   (y:Z) (Post4:y = b) (x1 y1:Z)
   (Post3:((0 < x1)%Z /\ (0 < y1)%Z /\ gcd x1 y1 = gcd a b) /\ x1 = y1),
   x1 = gcd a b.
Proof.
intuition.
rewrite <- H5; rewrite H2.
auto.
Qed.


(* Why obligation from file , characters 705-712 *)
Lemma gcd2_po_1 :
 forall (a b:Z) (Pre5:(a >= 0)%Z /\ (b >= 0)%Z) (x:Z) (Post6:x = a)
   (y:Z) (Post5:y = b) (Variant1 x1 y1:Z) (Pre4:Variant1 = y1)
   (Pre3:(0 <= x1)%Z /\ (0 <= y1)%Z /\ gcd x1 y1 = gcd a b)
   (Test2:y1 <> 0%Z), y1 <> 0%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 723-759 *)
Lemma gcd2_po_2 :
 forall (a b:Z) (Pre5:(a >= 0)%Z /\ (b >= 0)%Z) (x:Z) (Post6:x = a)
   (y:Z) (Post5:y = b) (Variant1 x1 y1:Z) (Pre4:Variant1 = y1)
   (Pre3:(0 <= x1)%Z /\ (0 <= y1)%Z /\ gcd x1 y1 = gcd a b)
   (Test2 Pre2:y1 <> 0%Z) (r:Z) (Post3:r = (x1 mod y1)%Z) (x2:Z)
   (Post1:x2 = y1) (y2:Z) (Post2:y2 = r),
   ((0 <= x2)%Z /\ (0 <= y2)%Z /\ gcd x2 y2 = gcd a b) /\ Zwf 0 y2 y1.
Proof.
intuition.
assert h_y0: y1 <> 0%Z.
 assumption.
assert h1_y0: (y1 > 0)%Z.
 omega.
generalize (Z_mod_lt x1 y1 h1_y0); intro.
subst y2 r; tauto.
subst y2 x2 r.
rewrite <- H4; auto.
unfold Zwf.
assert h_y0: y1 <> 0%Z.
 assumption.
assert h1_y0: (y1 > 0)%Z.
 omega.
generalize (Z_mod_lt x1 y1 h1_y0); omega.
Qed.

(* Why obligation from file , characters 635-676 *)
Lemma gcd2_po_3 :
 forall (a b:Z) (Pre5:(a >= 0)%Z /\ (b >= 0)%Z) (x:Z) (Post6:x = a)
   (y:Z) (Post5:y = b), (0 <= x)%Z /\ (0 <= y)%Z /\ gcd x y = gcd a b.
Proof.
intuition.
subst; reflexivity.
Qed.

(* Why obligation from file , characters 776-778 *)
Lemma gcd2_po_4 :
 forall (a b:Z) (Pre5:(a >= 0)%Z /\ (b >= 0)%Z) (x:Z) (Post6:x = a)
   (y:Z) (Post5:y = b) (x1 y1:Z)
   (Post4:((0 <= x1)%Z /\ (0 <= y1)%Z /\ gcd x1 y1 = gcd a b) /\
          y1 = 0%Z), x1 = gcd a b.
Proof.
intuition.
rewrite <- H5; rewrite H2; auto.
Qed.


