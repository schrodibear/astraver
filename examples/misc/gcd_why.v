(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Why.

Parameter gcd : Z -> Z -> Z.

Axiom gcd_asubb_b : (a,b:Z) (gcd a b) = (gcd `a-b` b).
Axiom gcd_a_bsuba : (a,b:Z) (gcd a b) = (gcd a `b-a`).
Axiom gcd_a_a : (a:Z) (gcd a a) = a.
Axiom gcd_a_0 : (a:Z) (gcd a `0`) = a.
Axiom gcd_a_amodb : (a,b:Z) (gcd a b) = (gcd b (Zmod a b)).

Hints Resolve gcd_asubb_b gcd_a_bsuba gcd_a_a gcd_a_0 gcd_a_amodb.

Definition max : Z->Z->Z := 
  [x,y] Cases (Z_le_gt_dec x y) of (left _) => y | (right _) => x end.

(* Why obligation from file "gcd.mlw", characters 373-385 *)
Lemma gcd1_po_1 : 
  (a: Z)
  (b: Z)
  (Pre4: `a > 0` /\ `b > 0`)
  (result: Z)
  (Post5: result = a)
  (result0: Z)
  (Post4: result0 = b)
  (Variant1: Z)
  (x0: Z)
  (y0: Z)
  (Pre3: Variant1 = (max x0 y0))
  (Pre2: `0 < x0` /\ `0 < y0` /\ `(gcd x0 y0) = (gcd a b)`)
  (Test4: `x0 <> y0`)
  (Test3: `x0 > y0`)
  (x1: Z)
  (Post1: x1 = `x0 - y0`)
  (`0 < x1` /\ `0 < y0` /\ `(gcd x1 y0) = (gcd a b)`) /\
  (Zwf `0` (max x1 y0) (max x0 y0)).
Proof.
Intuition.
Subst x1; Rewrite <- H4; Auto.
Unfold Zwf max.
Case (Z_le_gt_dec x1 y0); Case (Z_le_gt_dec x0 y0); Intros; Omega.
Save.

(* Why obligation from file "gcd.mlw", characters 401-413 *)
Lemma gcd1_po_2 : 
  (a: Z)
  (b: Z)
  (Pre4: `a > 0` /\ `b > 0`)
  (result: Z)
  (Post5: result = a)
  (result0: Z)
  (Post4: result0 = b)
  (Variant1: Z)
  (x0: Z)
  (y0: Z)
  (Pre3: Variant1 = (max x0 y0))
  (Pre2: `0 < x0` /\ `0 < y0` /\ `(gcd x0 y0) = (gcd a b)`)
  (Test4: `x0 <> y0`)
  (Test2: `x0 <= y0`)
  (y1: Z)
  (Post2: y1 = `y0 - x0`)
  (`0 < x0` /\ `0 < y1` /\ `(gcd x0 y1) = (gcd a b)`) /\
  (Zwf `0` (max x0 y1) (max x0 y0)).
Proof.
Intuition.
Subst y1; Rewrite <- H4; Auto.
Unfold Zwf max.
Assert h:~x0=y0. Assumption. 
Case (Z_le_gt_dec x0 y1); Case (Z_le_gt_dec x0 y0); Intros; Omega.
Save.

(* Why obligation from file "gcd.mlw", characters 281-320 *)
Lemma gcd1_po_3 : 
  (a: Z)
  (b: Z)
  (Pre4: `a > 0` /\ `b > 0`)
  (result: Z)
  (Post5: result = a)
  (result0: Z)
  (Post4: result0 = b)
  `0 < result` /\ `0 < result0` /\ `(gcd result result0) = (gcd a b)`.
Proof.
Intuition.
Subst; Reflexivity.
Save.

(* Why obligation from file "gcd.mlw", characters 430-432 *)
Lemma gcd1_po_4 : 
  (a: Z)
  (b: Z)
  (Pre4: `a > 0` /\ `b > 0`)
  (result: Z)
  (Post5: result = a)
  (result0: Z)
  (Post4: result0 = b)
  (x0: Z)
  (y0: Z)
  (Post3: (`0 < x0` /\ `0 < y0` /\ `(gcd x0 y0) = (gcd a b)`) /\ `x0 = y0`)
  `x0 = (gcd a b)`.
Proof.
Intuition.
Rewrite <- H5; Rewrite H2.
Auto.
Save.


(* Why obligation from file "gcd.mlw", characters 705-712 *)
Lemma gcd2_po_1 : 
  (a: Z)
  (b: Z)
  (Pre5: `a >= 0` /\ `b >= 0`)
  (result: Z)
  (Post6: result = a)
  (result0: Z)
  (Post5: result0 = b)
  (Variant1: Z)
  (x0: Z)
  (y0: Z)
  (Pre4: Variant1 = y0)
  (Pre3: `0 <= x0` /\ `0 <= y0` /\ `(gcd x0 y0) = (gcd a b)`)
  (Test2: `y0 <> 0`)
  ~(y0 = `0`).
Proof.
Intuition.
Save.

(* Why obligation from file "gcd.mlw", characters 723-759 *)
Lemma gcd2_po_2 : 
  (a: Z)
  (b: Z)
  (Pre5: `a >= 0` /\ `b >= 0`)
  (result: Z)
  (Post6: result = a)
  (result0: Z)
  (Post5: result0 = b)
  (Variant1: Z)
  (x0: Z)
  (y0: Z)
  (Pre4: Variant1 = y0)
  (Pre3: `0 <= x0` /\ `0 <= y0` /\ `(gcd x0 y0) = (gcd a b)`)
  (Test2: `y0 <> 0`)
  (Pre2: ~(y0 = `0`))
  (r: Z)
  (Post3: r = (Zmod x0 y0))
  (x1: Z)
  (Post1: x1 = y0)
  (y1: Z)
  (Post2: y1 = r)
  (`0 <= x1` /\ `0 <= y1` /\ `(gcd x1 y1) = (gcd a b)`) /\ (Zwf `0` y1 y0).
Proof.
Intuition.
Assert h_y0 : ~ `y0 = 0`. Assumption.
Assert h1_y0 : `y0 > 0`. Omega.
Generalize (Z_mod_lt x0 y0 h1_y0); Intro.
Subst y1 r; Tauto.
Subst y1 x1 r.
Rewrite <- H4; Auto.
Unfold Zwf.
Assert h_y0 : ~ `y0 = 0`. Assumption.
Assert h1_y0 : `y0 > 0`. Omega.
Generalize (Z_mod_lt x0 y0 h1_y0); Omega.
Save.

(* Why obligation from file "gcd.mlw", characters 635-676 *)
Lemma gcd2_po_3 : 
  (a: Z)
  (b: Z)
  (Pre5: `a >= 0` /\ `b >= 0`)
  (result: Z)
  (Post6: result = a)
  (result0: Z)
  (Post5: result0 = b)
  `0 <= result` /\ `0 <= result0` /\ `(gcd result result0) = (gcd a b)`.
Proof.
Intuition.
Subst; Reflexivity.
Save.

(* Why obligation from file "gcd.mlw", characters 776-778 *)
Lemma gcd2_po_4 : 
  (a: Z)
  (b: Z)
  (Pre5: `a >= 0` /\ `b >= 0`)
  (result: Z)
  (Post6: result = a)
  (result0: Z)
  (Post5: result0 = b)
  (x0: Z)
  (y0: Z)
  (Post4: (`0 <= x0` /\ `0 <= y0` /\ `(gcd x0 y0) = (gcd a b)`) /\ `y0 = 0`)
  `x0 = (gcd a b)`.
Proof.
Intuition.
Rewrite <- H5; Rewrite H2; Auto.
Save.


