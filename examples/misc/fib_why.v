(* Load Programs. *)(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.

Parameter F : Z -> Z.
Axiom F_0 : F 0 = 1%Z.
Axiom F_1 : F 1 = 1%Z.
Axiom F_n : forall n:Z, (n >= 2)%Z -> F n = (F (n - 1) + F (n - 2))%Z.
Hints Resolve F_0 F_1 F_n .

(* Why obligation from file , characters 429-430 *)
Lemma fib1_po_1 :
 forall (n:Z) (Pre12:(n >= 0)%Z) (Variant1 n0:Z) (Pre11:Variant1 = n0)
   (Pre10:(n0 >= 0)%Z) (Test2:(n0 <= 1)%Z), 1%Z = F n0.
Proof.
intros.
assert (n0 = 0%Z \/ n0 = 1%Z); intuition try (rewrite H0; auto with *).
omega.
Qed.

(* Why obligation from file , characters 462-476 *)
Lemma fib1_po_2 :
 forall (n:Z) (Pre12:(n >= 0)%Z) (Variant1 n0:Z) (Pre11:Variant1 = n0)
   (Pre10:(n0 >= 0)%Z) (Test1:(n0 > 1)%Z), (n0 - 2 >= 0)%Z.
Proof.
intros; omega.
Qed.

(* Why obligation from file , characters 395-497 *)
Lemma fib1_po_3 :
 forall (n:Z) (Pre12:(n >= 0)%Z) (Variant1 n0:Z) (Pre11:Variant1 = n0)
   (Pre10:(n0 >= 0)%Z) (Test1:(n0 > 1)%Z)
   (Pre9 Pre3 Pre4:(n0 - 2 >= 0)%Z), Zwf 0 (n0 - 2) Variant1.
Proof.
intros; unfold Zwf; omega.
Qed.

(* Why obligation from file , characters 445-459 *)
Lemma fib1_po_4 :
 forall (n:Z) (Pre12:(n >= 0)%Z) (Variant1 n0:Z) (Pre11:Variant1 = n0)
   (Pre10:(n0 >= 0)%Z) (Test1:(n0 > 1)%Z) (Pre9:(n0 - 2 >= 0)%Z)
   (aux_6:Z) (Post4:aux_6 = F (n0 - 2)), (n0 - 1 >= 0)%Z.
Proof.
intros; omega.
Qed.

(* Why obligation from file , characters 395-497 *)
Lemma fib1_po_5 :
 forall (n:Z) (Pre12:(n >= 0)%Z) (Variant1 n0:Z) (Pre11:Variant1 = n0)
   (Pre10:(n0 >= 0)%Z) (Test1:(n0 > 1)%Z) (Pre9:(n0 - 2 >= 0)%Z)
   (aux_6:Z) (Post4:aux_6 = F (n0 - 2))
   (Pre8 Pre6 Pre7:(n0 - 1 >= 0)%Z), Zwf 0 (n0 - 1) Variant1.
Proof.
intros; unfold Zwf; omega.
Qed.

(* Why obligation from file , characters 445-476 *)
Lemma fib1_po_6 :
 forall (n:Z) (Pre12:(n >= 0)%Z) (Variant1 n0:Z) (Pre11:Variant1 = n0)
   (Pre10:(n0 >= 0)%Z) (Test1:(n0 > 1)%Z) (Pre9:(n0 - 2 >= 0)%Z)
   (aux_6:Z) (Post4:aux_6 = F (n0 - 2)) (Pre8:(n0 - 1 >= 0)%Z)
   (aux_5:Z) (Post7:aux_5 = F (n0 - 1)), (aux_5 + aux_6)%Z = F n0.
Proof.
intros.
subst aux_6 aux_5.
symmetry; auto with *.
Qed.


(* Why obligation from file , characters 695-697 *)
Lemma fib2_aux_po_1 :
 forall (n x fx fx_1:Z)
   (Pre8:((1 <= x)%Z /\ (x <= n)%Z) /\ fx = F x /\ fx_1 = F (x - 1))
   (Variant1 n0 x0 fx0 fx_1_0:Z) (Pre7:Variant1 = (n0 - x0)%Z)
   (Pre6:((1 <= x0)%Z /\ (x0 <= n0)%Z) /\
         fx0 = F x0 /\ fx_1_0 = F (x0 - 1)) (Test2:x0 = n0), fx0 = F n0.
Proof.
intuition.
rewrite <- Test2; assumption.
Qed.

(* Why obligation from file , characters 713-744 *)
Lemma fib2_aux_po_2 :
 forall (n x fx fx_1:Z)
   (Pre8:((1 <= x)%Z /\ (x <= n)%Z) /\ fx = F x /\ fx_1 = F (x - 1))
   (Variant1 n0 x0 fx0 fx_1_0:Z) (Pre7:Variant1 = (n0 - x0)%Z)
   (Pre6:((1 <= x0)%Z /\ (x0 <= n0)%Z) /\
         fx0 = F x0 /\ fx_1_0 = F (x0 - 1)) (Test1:x0 <> n0),
   ((1 <= x0 + 1)%Z /\ (x0 + 1 <= n0)%Z) /\
   (fx0 + fx_1_0)%Z = F (x0 + 1) /\ fx0 = F (x0 + 1 - 1).
Proof.
intuition.
subst fx0 fx_1_0; symmetry.
generalize H5.
 replace x0 with (x0 + 1 - 1)%Z.
 generalize (x0 + 1)%Z.
intros; ring (z - 1 + 1)%Z; replace (z - 1 - 1)%Z with (z - 2)%Z.
 auto with *.
omega.
omega.
ring (x0 + 1 - 1)%Z; trivial.
Qed.

(* Why obligation from file , characters 625-765 *)
Lemma fib2_aux_po_3 :
 forall (n x fx fx_1:Z)
   (Pre8:((1 <= x)%Z /\ (x <= n)%Z) /\ fx = F x /\ fx_1 = F (x - 1))
   (Variant1 n0 x0 fx0 fx_1_0:Z) (Pre7:Variant1 = (n0 - x0)%Z)
   (Pre6:((1 <= x0)%Z /\ (x0 <= n0)%Z) /\
         fx0 = F x0 /\ fx_1_0 = F (x0 - 1)) (Test1:x0 <> n0)
   (Pre5 Pre3
    Pre4:((1 <= x0 + 1)%Z /\ (x0 + 1 <= n0)%Z) /\
         (fx0 + fx_1_0)%Z = F (x0 + 1) /\ fx0 = F (x0 + 1 - 1)),
   Zwf 0 (n0 - (x0 + 1)) Variant1.
Proof.
intuition.
Qed.


(* Why obligation from file , characters 824-825 *)
Lemma fib2_po_1 :
 forall (n:Z) (Pre4:(n >= 0)%Z) (Test2:(n <= 1)%Z), 1%Z = F n.
Proof.
intuition.
assert h: n = 0%Z \/ n = 1%Z.
 omega.
intuition; rewrite H; auto with *.
Qed.

(* Why obligation from file , characters 831-849 *)
Lemma fib2_po_2 :
 forall (n:Z) (Pre4:(n >= 0)%Z) (Test1:(n > 1)%Z),
   ((1 <= 1)%Z /\ (1 <= n)%Z) /\ 1%Z = F 1 /\ 1%Z = F (1 - 1).
Proof.
intuition.
Qed.


(* Why obligation from file , characters 1126-1192 *)
Lemma fib3_po_1 :
 forall (n:Z) (Pre4:(n >= 0)%Z) (k:Z) (Post8:k = 1%Z) (x:Z)
   (Post7:x = 1%Z) (y:Z) (Post6:y = 1%Z) (Test4:(n > 0)%Z)
   (Variant1 k1 x1 y1:Z) (Pre3:Variant1 = (n - k1)%Z)
   (Pre2:((1 <= k1)%Z /\ (k1 <= n)%Z) /\ x1 = F k1 /\ y1 = F (k1 - 1))
   (Test3:(k1 < n)%Z) (t:Z) (Post4:t = y1) (y2:Z) (Post1:y2 = x1)
   (x2:Z) (Post2:x2 = (x1 + t)%Z) (k2:Z) (Post3:k2 = (k1 + 1)%Z),
   (((1 <= k2)%Z /\ (k2 <= n)%Z) /\ x2 = F k2 /\ y2 = F (k2 - 1)) /\
   Zwf 0 (n - k2) (n - k1).
Proof.
intuition.
subst k2; subst x2; subst t.
subst x1 y1.
symmetry.
generalize H1.
 replace k1 with (k1 + 1 - 1)%Z.
 generalize (k1 + 1)%Z.
intros; ring (z - 1 + 1)%Z; replace (z - 1 - 1)%Z with (z - 2)%Z.
 auto with *.
omega.
omega.
subst k2; ring (k1 + 1 - 1)%Z; trivial.
subst y2; assumption.
Qed.

(* Why obligation from file , characters 1043-1082 *)
Lemma fib3_po_2 :
 forall (n:Z) (Pre4:(n >= 0)%Z) (k:Z) (Post8:k = 1%Z) (x:Z)
   (Post7:x = 1%Z) (y:Z) (Post6:y = 1%Z) (Test4:(n > 0)%Z),
   ((1 <= k)%Z /\ (k <= n)%Z) /\ x = F k /\ y = F (k - 1).
Proof.
intuition; subst; auto with *.
Qed.

(* Why obligation from file , characters 1009-1201 *)
Lemma fib3_po_3 :
 forall (n:Z) (Pre4:(n >= 0)%Z) (k:Z) (Post8:k = 1%Z) (x:Z)
   (Post7:x = 1%Z) (y:Z) (Post6:y = 1%Z) (Test4:(n > 0)%Z) (k1 x1 y1:Z)
   (Post5:(((1 <= k1)%Z /\ (k1 <= n)%Z) /\ x1 = F k1 /\ y1 = F (k1 - 1)) /\
          (k1 >= n)%Z), x1 = F n.
Proof.
intuition.
replace n with k1.
 auto.
 omega.
Qed.

(* Why obligation from file , characters 1201-1201 *)
Lemma fib3_po_4 :
 forall (n:Z) (Pre4:(n >= 0)%Z) (k:Z) (Post8:k = 1%Z) (x:Z)
   (Post7:x = 1%Z) (y:Z) (Post6:y = 1%Z) (Test1:(n <= 0)%Z), x = F n.
Proof.
intuition.
subst x.
 replace n with 0%Z.
 auto.
omega.
Qed.



(* Why obligation from file , characters 1375-1376 *)
Lemma fib4_po_1 :
 forall (n:Z) (t:array Z) (Pre10:(0 <= n)%Z /\ (n < array_length t)%Z)
   (Test4:(n <= 1)%Z), 1%Z = F n.
Proof.
intros.
assert h: n = 0%Z \/ n = 1%Z.
 omega.
intuition; rewrite H1; auto.
Qed.

(* Why obligation from file , characters 1396-1405 *)
Lemma fib4_po_2 :
 forall (n:Z) (t:array Z) (Pre10:(0 <= n)%Z /\ (n < array_length t)%Z)
   (Test3:(n > 1)%Z), (0 <= 0)%Z /\ (0 < array_length t)%Z.
Proof.
intros; simpl; omega.
Qed.

(* Why obligation from file , characters 1412-1421 *)
Lemma fib4_po_3 :
 forall (n:Z) (t:array Z) (Pre10:(0 <= n)%Z /\ (n < array_length t)%Z)
   (Test3:(n > 1)%Z) (Pre9:(0 <= 0)%Z /\ (0 < array_length t)%Z)
   (t0:array Z) (Post1:t0 = store t 0 1%Z),
   (0 <= 1)%Z /\ (1 < array_length t0)%Z.
Proof.
intros; subst t0; simpl; omega.
Qed.

(* Why obligation from file , characters 1635-1665 *)
Lemma fib4_po_4 :
 forall (n:Z) (t:array Z) (Pre10:(0 <= n)%Z /\ (n < array_length t)%Z)
   (Test3:(n > 1)%Z) (Pre9:(0 <= 0)%Z /\ (0 < array_length t)%Z)
   (t0:array Z) (Post1:t0 = store t 0 1%Z)
   (Pre8:(0 <= 1)%Z /\ (1 < array_length t0)%Z) (t1:array Z)
   (Post2:t1 = store t0 1 1%Z) (k:Z) (Post6:k = 2%Z) (Variant1 k1:Z)
   (t2:array Z) (Pre6:Variant1 = (n + 1 - k1)%Z)
   (Pre5:((2 <= k1)%Z /\ (k1 <= n + 1)%Z) /\
         array_length t2 = array_length t /\
         (forall i:Z, (0 <= i)%Z /\ (i < k1)%Z -> access t2 i = F i))
   (Test2:(k1 <= n)%Z), (0 <= k1)%Z /\ (k1 < array_length t2)%Z.
Proof.
simpl; intuition.
Qed.

(* Why obligation from file , characters 1656-1665 *)
Lemma fib4_po_5 :
 forall (n:Z) (t:array Z) (Pre10:(0 <= n)%Z /\ (n < array_length t)%Z)
   (Test3:(n > 1)%Z) (Pre9:(0 <= 0)%Z /\ (0 < array_length t)%Z)
   (t0:array Z) (Post1:t0 = store t 0 1%Z)
   (Pre8:(0 <= 1)%Z /\ (1 < array_length t0)%Z) (t1:array Z)
   (Post2:t1 = store t0 1 1%Z) (k:Z) (Post6:k = 2%Z) (Variant1 k1:Z)
   (t2:array Z) (Pre6:Variant1 = (n + 1 - k1)%Z)
   (Pre5:((2 <= k1)%Z /\ (k1 <= n + 1)%Z) /\
         array_length t2 = array_length t /\
         (forall i:Z, (0 <= i)%Z /\ (i < k1)%Z -> access t2 i = F i))
   (Test2:(k1 <= n)%Z) (Pre2:(0 <= k1)%Z /\ (k1 < array_length t2)%Z),
   (0 <= k1 - 2)%Z /\ (k1 - 2 < array_length t2)%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 1644-1653 *)
Lemma fib4_po_6 :
 forall (n:Z) (t:array Z) (Pre10:(0 <= n)%Z /\ (n < array_length t)%Z)
   (Test3:(n > 1)%Z) (Pre9:(0 <= 0)%Z /\ (0 < array_length t)%Z)
   (t0:array Z) (Post1:t0 = store t 0 1%Z)
   (Pre8:(0 <= 1)%Z /\ (1 < array_length t0)%Z) (t1:array Z)
   (Post2:t1 = store t0 1 1%Z) (k:Z) (Post6:k = 2%Z) (Variant1 k1:Z)
   (t2:array Z) (Pre6:Variant1 = (n + 1 - k1)%Z)
   (Pre5:((2 <= k1)%Z /\ (k1 <= n + 1)%Z) /\
         array_length t2 = array_length t /\
         (forall i:Z, (0 <= i)%Z /\ (i < k1)%Z -> access t2 i = F i))
   (Test2:(k1 <= n)%Z) (Pre2:(0 <= k1)%Z /\ (k1 < array_length t2)%Z)
   (Pre3:(0 <= k1 - 2)%Z /\ (k1 - 2 < array_length t2)%Z),
   (0 <= k1 - 1)%Z /\ (k1 - 1 < array_length t2)%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 1635-1685 *)
Lemma fib4_po_7 :
 forall (n:Z) (t:array Z) (Pre10:(0 <= n)%Z /\ (n < array_length t)%Z)
   (Test3:(n > 1)%Z) (Pre9:(0 <= 0)%Z /\ (0 < array_length t)%Z)
   (t0:array Z) (Post1:t0 = store t 0 1%Z)
   (Pre8:(0 <= 1)%Z /\ (1 < array_length t0)%Z) (t1:array Z)
   (Post2:t1 = store t0 1 1%Z) (k:Z) (Post6:k = 2%Z) (Variant1 k1:Z)
   (t2:array Z) (Pre6:Variant1 = (n + 1 - k1)%Z)
   (Pre5:((2 <= k1)%Z /\ (k1 <= n + 1)%Z) /\
         array_length t2 = array_length t /\
         (forall i:Z, (0 <= i)%Z /\ (i < k1)%Z -> access t2 i = F i))
   (Test2:(k1 <= n)%Z) (Pre2:(0 <= k1)%Z /\ (k1 < array_length t2)%Z)
   (Pre3:(0 <= k1 - 2)%Z /\ (k1 - 2 < array_length t2)%Z)
   (Pre4:(0 <= k1 - 1)%Z /\ (k1 - 1 < array_length t2)%Z) (t3:array Z)
   (Post3:t3 = store t2 k1 (access t2 (k1 - 1) + access t2 (k1 - 2))%Z)
   (k2:Z) (Post4:k2 = (k1 + 1)%Z),
   (((2 <= k2)%Z /\ (k2 <= n + 1)%Z) /\
    array_length t3 = array_length t /\
    (forall i:Z, (0 <= i)%Z /\ (i < k2)%Z -> access t3 i = F i)) /\
   Zwf 0 (n + 1 - k2) (n + 1 - k1).
Proof.
intuition.
subst t3; auto.
subst t3.
assert hi: i = k1 \/ (i < k1)%Z.
 omega.
intuition.
subst i.
  AccessSame.
rewrite (H15 (k1 - 1)%Z).
 rewrite (H15 (k1 - 2)%Z).
 symmetry; auto with *.
omega.
omega.
AccessOther.
auto.
Qed.


(* Why obligation from file , characters 1486-1598 *)
Lemma fib4_po_8 :
 forall (n:Z) (t:array Z) (Pre10:(0 <= n)%Z /\ (n < array_length t)%Z)
   (Test3:(n > 1)%Z) (Pre9:(0 <= 0)%Z /\ (0 < array_length t)%Z)
   (t0:array Z) (Post1:t0 = store t 0 1%Z)
   (Pre8:(0 <= 1)%Z /\ (1 < array_length t0)%Z) (t1:array Z)
   (Post2:t1 = store t0 1 1%Z) (k:Z) (Post6:k = 2%Z),
   ((2 <= k)%Z /\ (k <= n + 1)%Z) /\
   array_length t1 = array_length t /\
   (forall i:Z, (0 <= i)%Z /\ (i < k)%Z -> access t1 i = F i).
Proof.
intuition.
subst t1 t0; auto.
assert hi: i = 0%Z \/ i = 1%Z.
 omega.
 intuition.
subst i t1; AccessOther.
subst t0; AccessSame.
 auto.
subst i t1; AccessSame.
 auto.
Qed.

(* Why obligation from file , characters 1428-1695 *)
Lemma fib4_po_9 :
 forall (n:Z) (t:array Z) (Pre10:(0 <= n)%Z /\ (n < array_length t)%Z)
   (Test3:(n > 1)%Z) (Pre9:(0 <= 0)%Z /\ (0 < array_length t)%Z)
   (t0:array Z) (Post1:t0 = store t 0 1%Z)
   (Pre8:(0 <= 1)%Z /\ (1 < array_length t0)%Z) (t1:array Z)
   (Post2:t1 = store t0 1 1%Z) (k:Z) (Post6:k = 2%Z) (k1:Z)
   (t2:array Z)
   (Post5:(((2 <= k1)%Z /\ (k1 <= n + 1)%Z) /\
           array_length t2 = array_length t /\
           (forall i:Z, (0 <= i)%Z /\ (i < k1)%Z -> access t2 i = F i)) /\
          (k1 > n)%Z),
   access t2 n = F n /\ (0 <= n)%Z /\ (n < array_length t2)%Z.
Proof.
intuition.
Qed.

