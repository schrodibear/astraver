(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.

Parameter F : Z -> Z.
Axiom F_0 : F 0 = 1%Z.
Axiom F_1 : F 1 = 1%Z.
Axiom F_n : forall n:Z, (n >= 2)%Z -> F n = (F (n - 1) + F (n - 2))%Z.
Hint Resolve F_0 F_1 F_n .

(* Why obligation from file "fib.mlw", characters 447-448 *)
Lemma fib1_po_1 : 
  forall (n: Z),
  forall (Pre12: n >= 0),
  forall (Variant1: Z),
  forall (n0: Z),
  forall (Pre11: Variant1 = n0),
  forall (Pre10: n0 >= 0),
  forall (Test2: n0 <= 1),
  forall (result0: Z),
  forall (Post4: result0 = 1),
  result0 = (F n0).
Proof.
intros.
assert (n0 = 0%Z \/ n0 = 1%Z); intuition try (subst; auto with *).
omega.
Qed.

(* Why obligation from file "fib.mlw", characters 480-494 *)
Lemma fib1_po_2 : 
  forall (n: Z),
  forall (Pre12: n >= 0),
  forall (Variant1: Z),
  forall (n0: Z),
  forall (Pre11: Variant1 = n0),
  forall (Pre10: n0 >= 0),
  forall (Test1: n0 > 1),
  (n0 - 2) >= 0.
Proof.
intros; omega.
Qed.

(* Why obligation from file "fib.mlw", characters 413-515 *)
Lemma fib1_po_3 : 
  forall (n: Z),
  forall (Pre12: n >= 0),
  forall (Variant1: Z),
  forall (n0: Z),
  forall (Pre11: Variant1 = n0),
  forall (Pre10: n0 >= 0),
  forall (Test1: n0 > 1),
  forall (Pre9: (n0 - 2) >= 0),
  forall (result0: Z),
  forall (Post3: result0 = (n0 - 2)),
  forall (Pre4: (n0 - 2) >= 0),
  (Zwf 0 result0 Variant1).
Proof.
intros; unfold Zwf; omega.
Qed.

(* Why obligation from file "fib.mlw", characters 463-477 *)
Lemma fib1_po_4 : 
  forall (n: Z),
  forall (Pre12: n >= 0),
  forall (Variant1: Z),
  forall (n0: Z),
  forall (Pre11: Variant1 = n0),
  forall (Pre10: n0 >= 0),
  forall (Test1: n0 > 1),
  forall (Pre9: (n0 - 2) >= 0),
  forall (aux_6: Z),
  forall (Post8: aux_6 = (F (n0 - 2))),
  (n0 - 1) >= 0.
Proof.
intuition.
Save.

(* Why obligation from file "fib.mlw", characters 413-515 *)
Lemma fib1_po_5 : 
  forall (n: Z),
  forall (Pre12: n >= 0),
  forall (Variant1: Z),
  forall (n0: Z),
  forall (Pre11: Variant1 = n0),
  forall (Pre10: n0 >= 0),
  forall (Test1: n0 > 1),
  forall (Pre9: (n0 - 2) >= 0),
  forall (aux_6: Z),
  forall (Post8: aux_6 = (F (n0 - 2))),
  forall (Pre8: (n0 - 1) >= 0),
  forall (result0: Z),
  forall (Post2: result0 = (n0 - 1)),
  forall (Pre7: (n0 - 1) >= 0),
  (Zwf 0 result0 Variant1).
Proof.
intuition.
Save.

(* Why obligation from file "fib.mlw", characters 463-494 *)
Lemma fib1_po_6 : 
  forall (n: Z),
  forall (Pre12: n >= 0),
  forall (Variant1: Z),
  forall (n0: Z),
  forall (Pre11: Variant1 = n0),
  forall (Pre10: n0 >= 0),
  forall (Test1: n0 > 1),
  forall (Pre9: (n0 - 2) >= 0),
  forall (aux_6: Z),
  forall (Post8: aux_6 = (F (n0 - 2))),
  forall (Pre8: (n0 - 1) >= 0),
  forall (aux_5: Z),
  forall (Post11: aux_5 = (F (n0 - 1))),
  forall (result0: Z),
  forall (Post1: result0 = (aux_5 + aux_6)),
  result0 = (F n0).
Proof.
intuition; subst; symmetry; auto with *.
Save.

(* Why obligation from file "fib.mlw", characters 713-715 *)
Lemma fib2_aux_po_1 : 
  forall (n: Z),
  forall (x: Z),
  forall (fx: Z),
  forall (fx_1: Z),
  forall (Pre5: (1 <= x /\ x <= n) /\ fx = (F x) /\ fx_1 = (F (x - 1))),
  forall (Variant1: Z),
  forall (n0: Z),
  forall (x0: Z),
  forall (fx0: Z),
  forall (fx_1_0: Z),
  forall (Pre4: Variant1 = (n0 - x0)),
  forall (Pre3: (1 <= x0 /\ x0 <= n0) /\ fx0 = (F x0) /\ fx_1_0 =
                (F (x0 - 1))),
  forall (Test2: x0 = n0),
  forall (result0: Z),
  forall (Post2: result0 = fx0),
  result0 = (F n0).
Proof.
intuition; subst; auto.
Qed.

(* Why obligation from file "fib.mlw", characters 731-762 *)
Lemma fib2_aux_po_2 : 
  forall (n: Z),
  forall (x: Z),
  forall (fx: Z),
  forall (fx_1: Z),
  forall (Pre5: (1 <= x /\ x <= n) /\ fx = (F x) /\ fx_1 = (F (x - 1))),
  forall (Variant1: Z),
  forall (n0: Z),
  forall (x0: Z),
  forall (fx0: Z),
  forall (fx_1_0: Z),
  forall (Pre4: Variant1 = (n0 - x0)),
  forall (Pre3: (1 <= x0 /\ x0 <= n0) /\ fx0 = (F x0) /\ fx_1_0 =
                (F (x0 - 1))),
  forall (Test1: x0 <> n0),
  (1 <= (x0 + 1) /\ (x0 + 1) <= n0) /\ (fx0 + fx_1_0) = (F (x0 + 1)) /\ fx0 =
  (F (x0 + 1 - 1)).
Proof.
intuition.
subst fx0 fx_1_0; symmetry.
generalize H5.
 replace x0 with (x0 + 1 - 1)%Z.
 generalize (x0 + 1)%Z.
intros; ring (z - 1 + 1)%Z; replace (z - 1 - 1)%Z with (z - 2)%Z.
 auto with *.
omega.
omega.
ring (x0 + 1 - 1)%Z; trivial.
Qed.

(* Why obligation from file "fib.mlw", characters 842-843 *)
Lemma fib2_po_1 : 
  forall (n: Z),
  forall (Pre2: n >= 0),
  forall (Test2: n <= 1),
  forall (result0: Z),
  forall (Post2: result0 = 1),
  result0 = (F n).
Proof.
intuition; subst.
assert (h : n = 0 \/ n = 1).
 omega.
intuition; rewrite H; auto with *.
Qed.

(* Why obligation from file "fib.mlw", characters 849-867 *)
Lemma fib2_po_2 : 
  forall (n: Z),
  forall (Pre2: n >= 0),
  forall (Test1: n > 1),
  (1 <= 1 /\ 1 <= n) /\ 1 = (F 1) /\ 1 = (F (1 - 1)).
Proof.
intuition.
Save.

(* Why obligation from file "fib.mlw", characters 1144-1210 *)
Lemma fib3_po_1 : 
  forall (n: Z),
  forall (Pre4: n >= 0),
  forall (k: Z),
  forall (Post11: k = 1),
  forall (x: Z),
  forall (Post10: x = 1),
  forall (y: Z),
  forall (Post9: y = 1),
  forall (Test4: n > 0),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (x1: Z),
  forall (y1: Z),
  forall (Pre3: Variant1 = (n - k1)),
  forall (Pre2: (1 <= k1 /\ k1 <= n) /\ x1 = (F k1) /\ y1 = (F (k1 - 1))),
  forall (Test3: k1 < n),
  forall (t: Z),
  forall (Post6: t = y1),
  forall (y2: Z),
  forall (Post3: y2 = x1),
  forall (x2: Z),
  forall (Post4: x2 = (x1 + t)),
  forall (k2: Z),
  forall (Post5: k2 = (k1 + 1)),
  ((1 <= k2 /\ k2 <= n) /\ x2 = (F k2) /\ y2 = (F (k2 - 1))) /\
  (Zwf 0 (n - k2) (n - k1)).
Proof.
intuition.
subst; symmetry.
generalize H1.
 replace k1 with (k1 + 1 - 1)%Z.
 generalize (k1 + 1)%Z.
intros; ring (z - 1 + 1)%Z; replace (z - 1 - 1)%Z with (z - 2)%Z.
 auto with *.
omega.
omega.
subst; ring (k1 + 1 - 1)%Z; trivial.
Qed.

(* Why obligation from file "fib.mlw", characters 1027-1219 *)
Lemma fib3_po_2 : 
  forall (n: Z),
  forall (Pre4: n >= 0),
  forall (k: Z),
  forall (Post11: k = 1),
  forall (x: Z),
  forall (Post10: x = 1),
  forall (y: Z),
  forall (Post9: y = 1),
  forall (Test4: n > 0),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (x1: Z),
  forall (y1: Z),
  forall (Pre3: Variant1 = (n - k1)),
  forall (Pre2: (1 <= k1 /\ k1 <= n) /\ x1 = (F k1) /\ y1 = (F (k1 - 1))),
  forall (Test2: k1 >= n),
  forall (result: Z),
  forall (HW_4: result = x1),
  result = (F n).
Proof.
intuition.
subst; replace n with k1.
 auto.
 omega.
Qed.

(* Why obligation from file "fib.mlw", characters 1061-1100 *)
Lemma fib3_po_3 : 
  forall (n: Z),
  forall (Pre4: n >= 0),
  forall (k: Z),
  forall (Post11: k = 1),
  forall (x: Z),
  forall (Post10: x = 1),
  forall (y: Z),
  forall (Post9: y = 1),
  forall (Test4: n > 0),
  (1 <= k /\ k <= n) /\ x = (F k) /\ y = (F (k - 1)).
Proof.
intuition; subst; auto with *.
Qed.

(* Why obligation from file "fib.mlw", characters 1219-1219 *)
Lemma fib3_po_4 : 
  forall (n: Z),
  forall (Pre4: n >= 0),
  forall (k: Z),
  forall (Post11: k = 1),
  forall (x: Z),
  forall (Post10: x = 1),
  forall (y: Z),
  forall (Post9: y = 1),
  forall (Test1: n <= 0),
  forall (result0: unit),
  forall (Post1: result0 = tt),
  forall (result: Z),
  forall (HW_10: result = x),
  result = (F n).
Proof.
intuition.
subst.
 replace n with 0%Z.
 auto.
omega.
Qed.



(* Why obligation from file "fib.mlw", characters 1393-1394 *)
Lemma fib4_po_1 : 
  forall (n: Z),
  forall (t: (array Z)),
  forall (Pre10: 0 <= n /\ n < (array_length t)),
  forall (Test4: n <= 1),
  forall (result0: Z),
  forall (Post20: result0 = 1),
  result0 = (F n).
Proof.
intros; subst.
assert (h: n = 0 \/ n = 1).
 omega.
intuition; rewrite H1; auto.
Qed.

(* Why obligation from file "fib.mlw", characters 1414-1423 *)
Lemma fib4_po_2 : 
  forall (n: Z),
  forall (t: (array Z)),
  forall (Pre10: 0 <= n /\ n < (array_length t)),
  forall (Test3: n > 1),
  forall (aux_2: Z),
  forall (Post5: aux_2 = 1),
  forall (aux_1: Z),
  forall (Post4: aux_1 = 0),
  0 <= aux_1 /\ aux_1 < (array_length t).
Proof.
intros; simpl; omega.
Qed.

(* Why obligation from file "fib.mlw", characters 1414-1423 *)
Lemma fib4_po_3 : 
  forall (n: Z),
  forall (t: (array Z)),
  forall (Pre10: 0 <= n /\ n < (array_length t)),
  forall (Test3: n > 1),
  forall (aux_2: Z),
  forall (Post5: aux_2 = 1),
  forall (aux_1: Z),
  forall (Post4: aux_1 = 0),
  forall (Pre1: 0 <= aux_1 /\ aux_1 < (array_length t)),
  forall (t0: (array Z)),
  forall (result0: unit),
  forall (Post3: t0 = (store t aux_1 aux_2)),
  forall (result: Z),
  forall (HW_3: result = 1),
  forall (result0: Z),
  forall (HW_4: result0 = 1),
  forall (t1: (array Z)),
  forall (HW_5: t1 = (store t0 result0 result)),
  forall (result: Z),
  forall (HW_6: result = 2),
  (2 <= result /\ result <= (n + 1)) /\ (array_length t1) =
  (array_length t) /\
  (forall (i:Z), (0 <= i /\ i < result -> (access t1 i) = (F i))).
Proof.
intuition.
subst t1 t0; auto.
assert (hi: i = 0 \/ i = 1).
 omega.
 intuition.
subst i t1; AccessOther.
subst; AccessSame.
 auto.
subst; simpl; omega.
subst; simpl; omega.
subst; AccessSame.
 auto.
Qed.

(* Why obligation from file "fib.mlw", characters 1414-1423 *)
Lemma fib4_po_4 : 
  forall (n: Z),
  forall (t: (array Z)),
  forall (Pre10: 0 <= n /\ n < (array_length t)),
  forall (Test3: n > 1),
  forall (aux_2: Z),
  forall (Post5: aux_2 = 1),
  forall (aux_1: Z),
  forall (Post4: aux_1 = 0),
  forall (Pre1: 0 <= aux_1 /\ aux_1 < (array_length t)),
  forall (t0: (array Z)),
  forall (result0: unit),
  forall (Post3: t0 = (store t aux_1 aux_2)),
  forall (result: Z),
  forall (HW_3: result = 1),
  forall (result0: Z),
  forall (HW_4: result0 = 1),
  forall (t1: (array Z)),
  forall (HW_5: t1 = (store t0 result0 result)),
  forall (result: Z),
  forall (HW_6: result = 2),
  forall (k: Z),
  forall (t0: (array Z)),
  forall (HW_7: (2 <= k /\ k <= (n + 1)) /\ (array_length t0) =
                (array_length t) /\
                (forall (i:Z), (0 <= i /\ i < k -> (access t0 i) = (F i)))),
  forall (HW_8: k <= n),
  forall (result: Z),
  forall (HW_9: result = ((access t0 (k - 1)) + (access t0 (k - 2)))),
  forall (result0: Z),
  forall (HW_10: result0 = k),
  forall (t1: (array Z)),
  forall (HW_11: t1 = (store t0 result0 result)),
  forall (k0: Z),
  forall (HW_12: k0 = (k + 1)),
  ((2 <= k0 /\ k0 <= (n + 1)) /\ (array_length t1) = (array_length t) /\
  (forall (i:Z), (0 <= i /\ i < k0 -> (access t1 i) = (F i)))) /\
  (Zwf 0 (n + 1 - k0) (n + 1 - k)).
Proof.
simpl; intuition.
subst t3; auto.
subst t3.
assert (hi: i = k \/ (i < k)). omega.
intuition.
subst.
  AccessSame.
rewrite (H7 (k - 1)%Z).
rewrite (H7 (k - 2)%Z).
 symmetry; auto with *.
omega.
omega.
AccessOther.
auto.
Qed.

(* Why obligation from file "fib.mlw", characters 1414-1423 *)
Lemma fib4_po_5 : 
  forall (n: Z),
  forall (t: (array Z)),
  forall (Pre10: 0 <= n /\ n < (array_length t)),
  forall (Test3: n > 1),
  forall (aux_2: Z),
  forall (Post5: aux_2 = 1),
  forall (aux_1: Z),
  forall (Post4: aux_1 = 0),
  forall (Pre1: 0 <= aux_1 /\ aux_1 < (array_length t)),
  forall (t0: (array Z)),
  forall (result0: unit),
  forall (Post3: t0 = (store t aux_1 aux_2)),
  forall (result: Z),
  forall (HW_3: result = 1),
  forall (result0: Z),
  forall (HW_4: result0 = 1),
  forall (t1: (array Z)),
  forall (HW_5: t1 = (store t0 result0 result)),
  forall (result: Z),
  forall (HW_6: result = 2),
  forall (k: Z),
  forall (t0: (array Z)),
  forall (HW_7: (2 <= k /\ k <= (n + 1)) /\ (array_length t0) =
                (array_length t) /\
                (forall (i:Z), (0 <= i /\ i < k -> (access t0 i) = (F i)))),
  forall (HW_8: k <= n),
  forall (result: Z),
  forall (HW_9: result = ((access t0 (k - 1)) + (access t0 (k - 2)))),
  forall (result0: Z),
  forall (HW_10: result0 = k),
  0 <= result0 /\ result0 < (array_length t0).
Proof.
intuition.
Qed.

(* Why obligation from file "fib.mlw", characters 1414-1423 *)
Lemma fib4_po_6 : 
  forall (n: Z),
  forall (t: (array Z)),
  forall (Pre10: 0 <= n /\ n < (array_length t)),
  forall (Test3: n > 1),
  forall (aux_2: Z),
  forall (Post5: aux_2 = 1),
  forall (aux_1: Z),
  forall (Post4: aux_1 = 0),
  forall (Pre1: 0 <= aux_1 /\ aux_1 < (array_length t)),
  forall (t0: (array Z)),
  forall (result0: unit),
  forall (Post3: t0 = (store t aux_1 aux_2)),
  forall (result: Z),
  forall (HW_3: result = 1),
  forall (result0: Z),
  forall (HW_4: result0 = 1),
  forall (t1: (array Z)),
  forall (HW_5: t1 = (store t0 result0 result)),
  forall (result: Z),
  forall (HW_6: result = 2),
  forall (k: Z),
  forall (t0: (array Z)),
  forall (HW_7: (2 <= k /\ k <= (n + 1)) /\ (array_length t0) =
                (array_length t) /\
                (forall (i:Z), (0 <= i /\ i < k -> (access t0 i) = (F i)))),
  forall (HW_8: k <= n),
  0 <= (k - 2) /\ (k - 2) < (array_length t0).
Proof.
intuition.
Save.

(* Why obligation from file "fib.mlw", characters 1414-1423 *)
Lemma fib4_po_7 : 
  forall (n: Z),
  forall (t: (array Z)),
  forall (Pre10: 0 <= n /\ n < (array_length t)),
  forall (Test3: n > 1),
  forall (aux_2: Z),
  forall (Post5: aux_2 = 1),
  forall (aux_1: Z),
  forall (Post4: aux_1 = 0),
  forall (Pre1: 0 <= aux_1 /\ aux_1 < (array_length t)),
  forall (t0: (array Z)),
  forall (result0: unit),
  forall (Post3: t0 = (store t aux_1 aux_2)),
  forall (result: Z),
  forall (HW_3: result = 1),
  forall (result0: Z),
  forall (HW_4: result0 = 1),
  forall (t1: (array Z)),
  forall (HW_5: t1 = (store t0 result0 result)),
  forall (result: Z),
  forall (HW_6: result = 2),
  forall (k: Z),
  forall (t0: (array Z)),
  forall (HW_7: (2 <= k /\ k <= (n + 1)) /\ (array_length t0) =
                (array_length t) /\
                (forall (i:Z), (0 <= i /\ i < k -> (access t0 i) = (F i)))),
  forall (HW_8: k <= n),
  0 <= (k - 1) /\ (k - 1) < (array_length t0).
Proof.
intuition.
Save.

(* Why obligation from file "fib.mlw", characters 1414-1423 *)
Lemma fib4_po_8 : 
  forall (n: Z),
  forall (t: (array Z)),
  forall (Pre10: 0 <= n /\ n < (array_length t)),
  forall (Test3: n > 1),
  forall (aux_2: Z),
  forall (Post5: aux_2 = 1),
  forall (aux_1: Z),
  forall (Post4: aux_1 = 0),
  forall (Pre1: 0 <= aux_1 /\ aux_1 < (array_length t)),
  forall (t0: (array Z)),
  forall (result0: unit),
  forall (Post3: t0 = (store t aux_1 aux_2)),
  forall (result: Z),
  forall (HW_3: result = 1),
  forall (result0: Z),
  forall (HW_4: result0 = 1),
  forall (t1: (array Z)),
  forall (HW_5: t1 = (store t0 result0 result)),
  forall (result: Z),
  forall (HW_6: result = 2),
  forall (k: Z),
  forall (t0: (array Z)),
  forall (HW_7: (2 <= k /\ k <= (n + 1)) /\ (array_length t0) =
                (array_length t) /\
                (forall (i:Z), (0 <= i /\ i < k -> (access t0 i) = (F i)))),
  forall (HW_13: k > n),
  forall (result: Z),
  forall (HW_14: result = (access t0 n)),
  result = (F n).
Proof.
intuition.
subst; auto.
rewrite (H7 n); auto with *.
Save.

(* Why obligation from file "fib.mlw", characters 1414-1423 *)
Lemma fib4_po_9 : 
  forall (n: Z),
  forall (t: (array Z)),
  forall (Pre10: 0 <= n /\ n < (array_length t)),
  forall (Test3: n > 1),
  forall (aux_2: Z),
  forall (Post5: aux_2 = 1),
  forall (aux_1: Z),
  forall (Post4: aux_1 = 0),
  forall (Pre1: 0 <= aux_1 /\ aux_1 < (array_length t)),
  forall (t0: (array Z)),
  forall (result0: unit),
  forall (Post3: t0 = (store t aux_1 aux_2)),
  forall (result: Z),
  forall (HW_3: result = 1),
  forall (result0: Z),
  forall (HW_4: result0 = 1),
  forall (t1: (array Z)),
  forall (HW_5: t1 = (store t0 result0 result)),
  forall (result: Z),
  forall (HW_6: result = 2),
  forall (k: Z),
  forall (t0: (array Z)),
  forall (HW_7: (2 <= k /\ k <= (n + 1)) /\ (array_length t0) =
                (array_length t) /\
                (forall (i:Z), (0 <= i /\ i < k -> (access t0 i) = (F i)))),
  forall (HW_13: k > n),
  0 <= n /\ n < (array_length t0).
Proof.
intuition.
Save.

(* Why obligation from file "fib.mlw", characters 1414-1423 *)
Lemma fib4_po_10 : 
  forall (n: Z),
  forall (t: (array Z)),
  forall (Pre10: 0 <= n /\ n < (array_length t)),
  forall (Test3: n > 1),
  forall (aux_2: Z),
  forall (Post5: aux_2 = 1),
  forall (aux_1: Z),
  forall (Post4: aux_1 = 0),
  forall (Pre1: 0 <= aux_1 /\ aux_1 < (array_length t)),
  forall (t0: (array Z)),
  forall (result0: unit),
  forall (Post3: t0 = (store t aux_1 aux_2)),
  forall (result: Z),
  forall (HW_3: result = 1),
  forall (result0: Z),
  forall (HW_4: result0 = 1),
  0 <= result0 /\ result0 < (array_length t0).
Proof.
intuition.
subst; simpl; omega.
Save.

