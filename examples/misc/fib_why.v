(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Why.

Parameter F : Z -> Z.
Axiom F_0 : (F `0`) = `1`.
Axiom F_1 : (F `1`) = `1`.
Axiom F_n : (n:Z) `n >= 2` -> `(F n) = (F (n-1)) + (F (n-2))`.
Hints Resolve F_0 F_1 F_n.

(* Why obligation from file "fib.mlw", characters 429-430 *)
Lemma fib1_po_1 : 
  (n: Z)
  (Pre12: `n >= 0`)
  (Variant1: Z)
  (n0: Z)
  (Pre11: Variant1 = n0)
  (Pre10: `n0 >= 0`)
  (Test2: `n0 <= 1`)
  `1 = (F n0)`.
Proof.
Intros.
Assert `n0 = 0` \/ `n0 = 1`; 
Intuition Try (Rewrite H0; Auto with *).
Omega.
Save.

(* Why obligation from file "fib.mlw", characters 462-476 *)
Lemma fib1_po_2 : 
  (n: Z)
  (Pre12: `n >= 0`)
  (Variant1: Z)
  (n0: Z)
  (Pre11: Variant1 = n0)
  (Pre10: `n0 >= 0`)
  (Test1: `n0 > 1`)
  `n0 - 2 >= 0`.
Proof.
Intros; Omega.
Save.

(* Why obligation from file "fib.mlw", characters 395-497 *)
Lemma fib1_po_3 : 
  (n: Z)
  (Pre12: `n >= 0`)
  (Variant1: Z)
  (n0: Z)
  (Pre11: Variant1 = n0)
  (Pre10: `n0 >= 0`)
  (Test1: `n0 > 1`)
  (Pre9: `n0 - 2 >= 0`)
  (Pre3: `n0 - 2 >= 0`)
  (Pre4: `n0 - 2 >= 0`)
  (Zwf `0` `n0 - 2` Variant1).
Proof.
Intros; Unfold Zwf; Omega.
Save.

(* Why obligation from file "fib.mlw", characters 445-459 *)
Lemma fib1_po_4 : 
  (n: Z)
  (Pre12: `n >= 0`)
  (Variant1: Z)
  (n0: Z)
  (Pre11: Variant1 = n0)
  (Pre10: `n0 >= 0`)
  (Test1: `n0 > 1`)
  (Pre9: `n0 - 2 >= 0`)
  (aux_6: Z)
  (Post4: `aux_6 = (F n0 - 2)`)
  `n0 - 1 >= 0`.
Proof.
Intros; Omega.
Save.

(* Why obligation from file "fib.mlw", characters 395-497 *)
Lemma fib1_po_5 : 
  (n: Z)
  (Pre12: `n >= 0`)
  (Variant1: Z)
  (n0: Z)
  (Pre11: Variant1 = n0)
  (Pre10: `n0 >= 0`)
  (Test1: `n0 > 1`)
  (Pre9: `n0 - 2 >= 0`)
  (aux_6: Z)
  (Post4: `aux_6 = (F n0 - 2)`)
  (Pre8: `n0 - 1 >= 0`)
  (Pre6: `n0 - 1 >= 0`)
  (Pre7: `n0 - 1 >= 0`)
  (Zwf `0` `n0 - 1` Variant1).
Proof.
Intros; Unfold Zwf; Omega.
Save.

(* Why obligation from file "fib.mlw", characters 445-476 *)
Lemma fib1_po_6 : 
  (n: Z)
  (Pre12: `n >= 0`)
  (Variant1: Z)
  (n0: Z)
  (Pre11: Variant1 = n0)
  (Pre10: `n0 >= 0`)
  (Test1: `n0 > 1`)
  (Pre9: `n0 - 2 >= 0`)
  (aux_6: Z)
  (Post4: `aux_6 = (F n0 - 2)`)
  (Pre8: `n0 - 1 >= 0`)
  (aux_5: Z)
  (Post7: `aux_5 = (F n0 - 1)`)
  `aux_5 + aux_6 = (F n0)`.
Proof.
Intros.
Subst aux_6 aux_5.
Symmetry; Auto with *.
Save.


(* Why obligation from file "fib.mlw", characters 695-697 *)
Lemma fib2_aux_po_1 : 
  (n: Z)
  (x: Z)
  (fx: Z)
  (fx_1: Z)
  (Pre8: (`1 <= x` /\ `x <= n`) /\ `fx = (F x)` /\ `fx_1 = (F x - 1)`)
  (Variant1: Z)
  (n0: Z)
  (x0: Z)
  (fx0: Z)
  (fx_1_0: Z)
  (Pre7: Variant1 = `n0 - x0`)
  (Pre6: (`1 <= x0` /\ `x0 <= n0`) /\ `fx0 = (F x0)` /\ `fx_1_0 = (F x0 - 1)`)
  (Test2: `x0 = n0`)
  `fx0 = (F n0)`.
Proof.
Intuition.
Rewrite <- Test2; Assumption.
Save.

(* Why obligation from file "fib.mlw", characters 713-744 *)
Lemma fib2_aux_po_2 : 
  (n: Z)
  (x: Z)
  (fx: Z)
  (fx_1: Z)
  (Pre8: (`1 <= x` /\ `x <= n`) /\ `fx = (F x)` /\ `fx_1 = (F x - 1)`)
  (Variant1: Z)
  (n0: Z)
  (x0: Z)
  (fx0: Z)
  (fx_1_0: Z)
  (Pre7: Variant1 = `n0 - x0`)
  (Pre6: (`1 <= x0` /\ `x0 <= n0`) /\ `fx0 = (F x0)` /\ `fx_1_0 = (F x0 - 1)`)
  (Test1: `x0 <> n0`)
  (`1 <= x0 + 1` /\ `x0 + 1 <= n0`) /\ `fx0 + fx_1_0 = (F x0 + 1)` /\
  `fx0 = (F x0 + 1 - 1)`.
Proof.
Intuition.
Subst fx0 fx_1_0; Symmetry.
Generalize H5. Replace x0 with `(x0+1)-1`. Generalize `x0+1`.
Intros; Ring `z-1+1`; Replace `z-1-1` with `z-2`. 
Auto with *.
Omega.
Omega.
Ring `x0+1-1`; Trivial.
Save.

(* Why obligation from file "fib.mlw", characters 625-765 *)
Lemma fib2_aux_po_3 : 
  (n: Z)
  (x: Z)
  (fx: Z)
  (fx_1: Z)
  (Pre8: (`1 <= x` /\ `x <= n`) /\ `fx = (F x)` /\ `fx_1 = (F x - 1)`)
  (Variant1: Z)
  (n0: Z)
  (x0: Z)
  (fx0: Z)
  (fx_1_0: Z)
  (Pre7: Variant1 = `n0 - x0`)
  (Pre6: (`1 <= x0` /\ `x0 <= n0`) /\ `fx0 = (F x0)` /\ `fx_1_0 = (F x0 - 1)`)
  (Test1: `x0 <> n0`)
  (Pre5: (`1 <= x0 + 1` /\ `x0 + 1 <= n0`) /\ `fx0 + fx_1_0 = (F x0 + 1)` /\
         `fx0 = (F x0 + 1 - 1)`)
  (Pre3: (`1 <= x0 + 1` /\ `x0 + 1 <= n0`) /\ `fx0 + fx_1_0 = (F x0 + 1)` /\
         `fx0 = (F x0 + 1 - 1)`)
  (Pre4: (`1 <= x0 + 1` /\ `x0 + 1 <= n0`) /\ `fx0 + fx_1_0 = (F x0 + 1)` /\
         `fx0 = (F x0 + 1 - 1)`)
  (Zwf `0` `n0 - (x0 + 1)` Variant1).
Proof.
Intuition.
Unfold Zwf; Omega.
Save.


(* Why obligation from file "fib.mlw", characters 824-825 *)
Lemma fib2_po_1 : 
  (n: Z)
  (Pre4: `n >= 0`)
  (Test2: `n <= 1`)
  `1 = (F n)`.
Proof.
Intuition.
Assert h: `n=0` \/ `n=1`. Omega.
Intuition; Rewrite H; Auto with *.
Save.

(* Why obligation from file "fib.mlw", characters 831-849 *)
Lemma fib2_po_2 : 
  (n: Z)
  (Pre4: `n >= 0`)
  (Test1: `n > 1`)
  (`1 <= 1` /\ `1 <= n`) /\ `1 = (F 1)` /\ `1 = (F 1 - 1)`.
Proof.
Intuition.
Save.


(* Why obligation from file "fib.mlw", characters 1126-1192 *)
Lemma fib3_po_1 : 
  (n: Z)
  (Pre4: `n >= 0`)
  (k: Z)
  (Post8: k = `1`)
  (x: Z)
  (Post7: x = `1`)
  (y: Z)
  (Post6: y = `1`)
  (Test4: `n > 0`)
  (Variant1: Z)
  (k1: Z)
  (x1: Z)
  (y1: Z)
  (Pre3: Variant1 = `n - k1`)
  (Pre2: (`1 <= k1` /\ `k1 <= n`) /\ `x1 = (F k1)` /\ `y1 = (F k1 - 1)`)
  (Test3: `k1 < n`)
  (t: Z)
  (Post4: t = y1)
  (y2: Z)
  (Post1: y2 = x1)
  (x2: Z)
  (Post2: x2 = `x1 + t`)
  (k2: Z)
  (Post3: k2 = `k1 + 1`)
  ((`1 <= k2` /\ `k2 <= n`) /\ `x2 = (F k2)` /\ `y2 = (F k2 - 1)`) /\
  (Zwf `0` `n - k2` `n - k1`).
Proof.
Intuition.
Subst k2; Subst x2; Subst t.
Subst x1 y1.
Symmetry.
Generalize H1. Replace k1 with `(k1+1)-1`. Generalize `k1+1`.
Intros; Ring `z-1+1`; Replace `z-1-1` with `z-2`. 
Auto with *.
Omega.
Omega.
Subst k2; Ring `k1+1-1`; Trivial.
Subst y2; Assumption.
Unfold Zwf; Omega.
Save.

(* Why obligation from file "fib.mlw", characters 1043-1082 *)
Lemma fib3_po_2 : 
  (n: Z)
  (Pre4: `n >= 0`)
  (k: Z)
  (Post8: k = `1`)
  (x: Z)
  (Post7: x = `1`)
  (y: Z)
  (Post6: y = `1`)
  (Test4: `n > 0`)
  (`1 <= k` /\ `k <= n`) /\ `x = (F k)` /\ `y = (F k - 1)`.
Proof.
Intuition; Subst; Auto with *.
Save.

(* Why obligation from file "fib.mlw", characters 1009-1201 *)
Lemma fib3_po_3 : 
  (n: Z)
  (Pre4: `n >= 0`)
  (k: Z)
  (Post8: k = `1`)
  (x: Z)
  (Post7: x = `1`)
  (y: Z)
  (Post6: y = `1`)
  (Test4: `n > 0`)
  (k1: Z)
  (x1: Z)
  (y1: Z)
  (Post5: ((`1 <= k1` /\ `k1 <= n`) /\ `x1 = (F k1)` /\ `y1 = (F k1 - 1)`) /\
          `k1 >= n`)
  `x1 = (F n)`.
Proof.
Intuition.
Replace n with k1. Auto. Omega.
Save.

(* Why obligation from file "fib.mlw", characters 991-1201 *)
Lemma fib3_po_4 : 
  (n: Z)
  (Pre4: `n >= 0`)
  (k: Z)
  (Post8: k = `1`)
  (x: Z)
  (Post7: x = `1`)
  (y: Z)
  (Post6: y = `1`)
  (Test1: `n <= 0`)
  `x = (F n)`.
Proof.
Intuition.
Subst x. Replace n  with `0`. Auto.
Omega.
Save.



(* Why obligation from file "fib.mlw", characters 1375-1376 *)
Lemma fib4_po_1 : 
  (n: Z)
  (t: (array Z))
  (Pre10: `0 <= n` /\ `n < (array_length t)`)
  (Test4: `n <= 1`)
  `1 = (F n)`.
Proof.
Intros.
Assert h: `n=0` \/ `n=1`. Omega.
Intuition; Rewrite H1; Auto.
Save.

(* Why obligation from file "fib.mlw", characters 1396-1405 *)
Lemma fib4_po_2 : 
  (n: Z)
  (t: (array Z))
  (Pre10: `0 <= n` /\ `n < (array_length t)`)
  (Test3: `n > 1`)
  `0 <= 0` /\ `0 < (array_length t)`.
Proof.
Intros; Simpl; Omega.
Save.

(* Why obligation from file "fib.mlw", characters 1412-1421 *)
Lemma fib4_po_3 : 
  (n: Z)
  (t: (array Z))
  (Pre10: `0 <= n` /\ `n < (array_length t)`)
  (Test3: `n > 1`)
  (Pre9: `0 <= 0` /\ `0 < (array_length t)`)
  (t0: (array Z))
  (Post1: t0 = (store t `0` `1`))
  `0 <= 1` /\ `1 < (array_length t0)`.
Proof.
Intros; Subst t0; Simpl; Omega.
Save.

(* Why obligation from file "fib.mlw", characters 1635-1665 *)
Lemma fib4_po_4 : 
  (n: Z)
  (t: (array Z))
  (Pre10: `0 <= n` /\ `n < (array_length t)`)
  (Test3: `n > 1`)
  (Pre9: `0 <= 0` /\ `0 < (array_length t)`)
  (t0: (array Z))
  (Post1: t0 = (store t `0` `1`))
  (Pre8: `0 <= 1` /\ `1 < (array_length t0)`)
  (t1: (array Z))
  (Post2: t1 = (store t0 `1` `1`))
  (k: Z)
  (Post6: k = `2`)
  (Variant1: Z)
  (k1: Z)
  (t2: (array Z))
  (Pre6: Variant1 = `n + 1 - k1`)
  (Pre5: (`2 <= k1` /\ `k1 <= n + 1`) /\
         `(array_length t2) = (array_length t)` /\
         ((i:Z) (`0 <= i` /\ `i < k1` -> `(access t2 i) = (F i)`)))
  (Test2: `k1 <= n`)
  `0 <= k1` /\ `k1 < (array_length t2)`.
Proof.
Simpl; Intuition.
Save.

(* Why obligation from file "fib.mlw", characters 1656-1665 *)
Lemma fib4_po_5 : 
  (n: Z)
  (t: (array Z))
  (Pre10: `0 <= n` /\ `n < (array_length t)`)
  (Test3: `n > 1`)
  (Pre9: `0 <= 0` /\ `0 < (array_length t)`)
  (t0: (array Z))
  (Post1: t0 = (store t `0` `1`))
  (Pre8: `0 <= 1` /\ `1 < (array_length t0)`)
  (t1: (array Z))
  (Post2: t1 = (store t0 `1` `1`))
  (k: Z)
  (Post6: k = `2`)
  (Variant1: Z)
  (k1: Z)
  (t2: (array Z))
  (Pre6: Variant1 = `n + 1 - k1`)
  (Pre5: (`2 <= k1` /\ `k1 <= n + 1`) /\
         `(array_length t2) = (array_length t)` /\
         ((i:Z) (`0 <= i` /\ `i < k1` -> `(access t2 i) = (F i)`)))
  (Test2: `k1 <= n`)
  (Pre2: `0 <= k1` /\ `k1 < (array_length t2)`)
  `0 <= k1 - 2` /\ `k1 - 2 < (array_length t2)`.
Proof.
Intuition.
Save.

(* Why obligation from file "fib.mlw", characters 1644-1653 *)
Lemma fib4_po_6 : 
  (n: Z)
  (t: (array Z))
  (Pre10: `0 <= n` /\ `n < (array_length t)`)
  (Test3: `n > 1`)
  (Pre9: `0 <= 0` /\ `0 < (array_length t)`)
  (t0: (array Z))
  (Post1: t0 = (store t `0` `1`))
  (Pre8: `0 <= 1` /\ `1 < (array_length t0)`)
  (t1: (array Z))
  (Post2: t1 = (store t0 `1` `1`))
  (k: Z)
  (Post6: k = `2`)
  (Variant1: Z)
  (k1: Z)
  (t2: (array Z))
  (Pre6: Variant1 = `n + 1 - k1`)
  (Pre5: (`2 <= k1` /\ `k1 <= n + 1`) /\
         `(array_length t2) = (array_length t)` /\
         ((i:Z) (`0 <= i` /\ `i < k1` -> `(access t2 i) = (F i)`)))
  (Test2: `k1 <= n`)
  (Pre2: `0 <= k1` /\ `k1 < (array_length t2)`)
  (Pre3: `0 <= k1 - 2` /\ `k1 - 2 < (array_length t2)`)
  `0 <= k1 - 1` /\ `k1 - 1 < (array_length t2)`.
Proof.
Intuition.
Save.

(* Why obligation from file "fib.mlw", characters 1450-1695 *)
Lemma fib4_po_7 : 
  (n: Z)
  (t: (array Z))
  (Pre10: `0 <= n` /\ `n < (array_length t)`)
  (Test3: `n > 1`)
  (Pre9: `0 <= 0` /\ `0 < (array_length t)`)
  (t0: (array Z))
  (Post1: t0 = (store t `0` `1`))
  (Pre8: `0 <= 1` /\ `1 < (array_length t0)`)
  (t1: (array Z))
  (Post2: t1 = (store t0 `1` `1`))
  (k: Z)
  (Post6: k = `2`)
  (Variant1: Z)
  (k1: Z)
  (t2: (array Z))
  (Pre6: Variant1 = `n + 1 - k1`)
  (Pre5: (`2 <= k1` /\ `k1 <= n + 1`) /\
         `(array_length t2) = (array_length t)` /\
         ((i:Z) (`0 <= i` /\ `i < k1` -> `(access t2 i) = (F i)`)))
  (Test2: `k1 <= n`)
  (Pre2: `0 <= k1` /\ `k1 < (array_length t2)`)
  (Pre3: `0 <= k1 - 2` /\ `k1 - 2 < (array_length t2)`)
  (Pre4: `0 <= k1 - 1` /\ `k1 - 1 < (array_length t2)`)
  (t3: (array Z))
  (Post3: t3 = (store t2 k1 `(access t2 k1 - 1) + (access t2 k1 - 2)`))
  (k2: Z)
  (Post4: k2 = `k1 + 1`)
  ((`2 <= k2` /\ `k2 <= n + 1`) /\ `(array_length t3) = (array_length t)` /\
  ((i:Z) (`0 <= i` /\ `i < k2` -> `(access t3 i) = (F i)`))) /\
  (Zwf `0` `n + 1 - k2` `n + 1 - k1`).
Proof.
Intuition.
Subst t3; Auto.
Subst t3.
Assert hi : `i=k1` \/ `i<k1`. Omega.
Intuition.
Subst i.  AccessSame.
Rewrite (H15 `k1-1`). 
Rewrite (H15 `k1-2`). 
Symmetry; Auto with *.
Omega.
Omega.
AccessOther.
Auto.
Unfold Zwf; Omega.
Save.


(* Why obligation from file "fib.mlw", characters 1486-1598 *)
Lemma fib4_po_8 : 
  (n: Z)
  (t: (array Z))
  (Pre10: `0 <= n` /\ `n < (array_length t)`)
  (Test3: `n > 1`)
  (Pre9: `0 <= 0` /\ `0 < (array_length t)`)
  (t0: (array Z))
  (Post1: t0 = (store t `0` `1`))
  (Pre8: `0 <= 1` /\ `1 < (array_length t0)`)
  (t1: (array Z))
  (Post2: t1 = (store t0 `1` `1`))
  (k: Z)
  (Post6: k = `2`)
  (`2 <= k` /\ `k <= n + 1`) /\ `(array_length t1) = (array_length t)` /\
  ((i:Z) (`0 <= i` /\ `i < k` -> `(access t1 i) = (F i)`)).
Proof.
Intuition.
Subst t1 t0; Auto.
Assert hi: `i=0` \/ `i=1`. Omega. Intuition.
Subst i t1; AccessOther.
Subst t0; AccessSame. Auto.
Subst i t1; AccessSame. Auto.
Save.

(* Why obligation from file "fib.mlw", characters 1428-1695 *)
Lemma fib4_po_9 : 
  (n: Z)
  (t: (array Z))
  (Pre10: `0 <= n` /\ `n < (array_length t)`)
  (Test3: `n > 1`)
  (Pre9: `0 <= 0` /\ `0 < (array_length t)`)
  (t0: (array Z))
  (Post1: t0 = (store t `0` `1`))
  (Pre8: `0 <= 1` /\ `1 < (array_length t0)`)
  (t1: (array Z))
  (Post2: t1 = (store t0 `1` `1`))
  (k: Z)
  (Post6: k = `2`)
  (k1: Z)
  (t2: (array Z))
  (Post5: ((`2 <= k1` /\ `k1 <= n + 1`) /\
          `(array_length t2) = (array_length t)` /\
          ((i:Z) (`0 <= i` /\ `i < k1` -> `(access t2 i) = (F i)`))) /\
          `k1 > n`)
  `(access t2 n) = (F n)` /\ `0 <= n` /\ `n < (array_length t2)`.
Proof.
Intuition.
Save.

