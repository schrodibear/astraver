
UNIT: TYPE;
tt: UNIT;
BOOL: TYPE;
true: BOOL;
false: BOOL;
ASSERT (FORALL (b:BOOL): (b=true OR b=false));
ASSERT (true /= false);

%%%% DO NOT EDIT BELOW THIS LINE

%% Why logic add_int
add_int: ((INT, INT) -> INT);

%% Why logic sub_int
sub_int: ((INT, INT) -> INT);

%% Why logic mul_int
mul_int: ((INT, INT) -> INT);

%% Why logic div_int
div_int: ((INT, INT) -> INT);

%% Why logic mod_int
mod_int: ((INT, INT) -> INT);

%% Why logic neg_int
neg_int: (INT -> INT);

%% Why logic lt_int
lt_int: ((INT, INT) -> BOOLEAN);

%% Why logic le_int
le_int: ((INT, INT) -> BOOLEAN);

%% Why logic gt_int
gt_int: ((INT, INT) -> BOOLEAN);

%% Why logic ge_int
ge_int: ((INT, INT) -> BOOLEAN);

%% Why logic eq_int
eq_int: ((INT, INT) -> BOOLEAN);

%% Why logic neq_int
neq_int: ((INT, INT) -> BOOLEAN);

%% Why logic lt_int_bool
lt_int_bool: ((INT, INT) -> BOOL);

%% Why logic le_int_bool
le_int_bool: ((INT, INT) -> BOOL);

%% Why logic gt_int_bool
gt_int_bool: ((INT, INT) -> BOOL);

%% Why logic ge_int_bool
ge_int_bool: ((INT, INT) -> BOOL);

%% Why logic eq_int_bool
eq_int_bool: ((INT, INT) -> BOOL);

%% Why logic neq_int_bool
neq_int_bool: ((INT, INT) -> BOOL);

%% Why axiom lt_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT): ((lt_int_bool(x, y) = true) <=> (x < y))));

%% Why axiom le_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT): ((le_int_bool(x, y) = true) <=> (x <= y))));

%% Why axiom gt_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT): ((gt_int_bool(x, y) = true) <=> (x > y))));

%% Why axiom ge_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT): ((ge_int_bool(x, y) = true) <=> (x >= y))));

%% Why axiom eq_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT): ((eq_int_bool(x, y) = true) <=> (x = y))));

%% Why axiom neq_int_bool_axiom
ASSERT (FORALL (x:INT):
       (FORALL (y:INT): ((neq_int_bool(x, y) = true) <=> (x /= y))));

%% Why logic add_real
add_real: ((REAL, REAL) -> REAL);

%% Why logic sub_real
sub_real: ((REAL, REAL) -> REAL);

%% Why logic mul_real
mul_real: ((REAL, REAL) -> REAL);

%% Why logic div_real
div_real: ((REAL, REAL) -> REAL);

%% Why logic pow_real
pow_real: ((REAL, REAL) -> REAL);

%% Why logic neg_real
neg_real: (REAL -> REAL);

%% Why logic abs_real
abs_real: (REAL -> REAL);

%% Why logic sqrt_real
sqrt_real: (REAL -> REAL);

%% Why logic real_of_int
real_of_int: (INT -> REAL);

%% Why logic int_of_real
int_of_real: (REAL -> INT);

%% Why logic lt_real
lt_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic le_real
le_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic gt_real
gt_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic ge_real
ge_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic eq_real
eq_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic neq_real
neq_real: ((REAL, REAL) -> BOOLEAN);

%% Why logic eq_bool
eq_bool: ((BOOL, BOOL) -> BOOLEAN);

%% Why logic neq_bool
neq_bool: ((BOOL, BOOL) -> BOOLEAN);

%% Why logic eq_unit
eq_unit: ((UNIT, UNIT) -> BOOLEAN);

%% Why logic neq_unit
neq_unit: ((UNIT, UNIT) -> BOOLEAN);

farray_int: TYPE;

%% Why logic sorted_array
sorted_array: (((ARRAY INT OF INT), INT, INT) -> BOOLEAN);

%% Why logic access_int
access_int: (((ARRAY INT OF INT), INT) -> INT);

%% Why axiom sorted_array_def
ASSERT (FORALL (t:(ARRAY INT OF INT)):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (sorted_array(t, i, j) <=>
       (FORALL (k:INT):
       (((i <= k) AND (k < j)) =>
       (access_int(t, k) <= access_int(t, (k + 1)))))))));

%% Why logic array_le
array_le: (((ARRAY INT OF INT), INT, INT, INT) -> BOOLEAN);

%% Why logic array_ge
array_ge: (((ARRAY INT OF INT), INT, INT, INT) -> BOOLEAN);

%% Why logic exchange
exchange: (((ARRAY INT OF INT), (ARRAY INT OF INT), INT, INT) -> BOOLEAN);

%% Why logic array_length_int
array_length_int: ((ARRAY INT OF INT) -> INT);

%% Why axiom exchange_def
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (exchange(t1, t2, i, j) <=>
       ((array_length_int(t1) = array_length_int(t2)) AND
       ((access_int(t1, i) = access_int(t2, j)) AND
       ((access_int(t2, i) = access_int(t1, j)) AND
       (FORALL (k:INT):
       (((k /= i) AND (k /= j)) => (access_int(t1, k) = access_int(t2, k))))))))))));

%% Why logic permut
permut: (((ARRAY INT OF INT), (ARRAY INT OF INT)) -> BOOLEAN);

%% Why axiom permut_refl
ASSERT (FORALL (t:(ARRAY INT OF INT)): permut(t, t));

%% Why axiom permut_sym
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)): (permut(t1, t2) => permut(t2, t1))));

%% Why axiom permut_trans
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (t3:(ARRAY INT OF INT)):
       ((permut(t1, t2) AND permut(t2, t3)) => permut(t1, t3)))));

%% Why logic update_int
update_int: (((ARRAY INT OF INT), INT, INT) -> (ARRAY INT OF INT));

%% Why axiom permut_exchange
ASSERT (FORALL (t:(ARRAY INT OF INT)):
       (FORALL (i:INT):
       (FORALL (j:INT):
       permut(t,
       update_int(update_int(t, i, access_int(t, j)), j, access_int(t, i))))));

%% Why logic sub_permut
sub_permut: ((INT, INT, (ARRAY INT OF INT), (ARRAY INT OF INT)) -> BOOLEAN);

%% Why axiom sub_permut_refl
ASSERT (FORALL (t:(ARRAY INT OF INT)):
       (FORALL (g:INT): (FORALL (d:INT): sub_permut(g, d, t, t))));

%% Why axiom sub_permut_sym
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) => sub_permut(g, d, t2, t1))))));

%% Why axiom sub_permut_trans
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (t3:(ARRAY INT OF INT)):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (sub_permut(g, d, t2, t3) => sub_permut(g, d, t1, t3))))))));

%% Why axiom sub_permut_exchange_1
ASSERT (FORALL (t:(ARRAY INT OF INT)):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND ((i <= d) AND ((g <= j) AND (j <= d)))) =>
       sub_permut(g, d, t,
       update_int(update_int(t, i, access_int(t, j)), j, access_int(t, i)))))))));

%% Why axiom sub_permut_exchange_2
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND
        ((i <= d) AND ((g <= j) AND ((j <= d) AND exchange(t1, t2, i, j))))) =>
       sub_permut(g, d, t1, t2))))))));

%% Why axiom sub_permut_permut
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (g:INT):
       (FORALL (d:INT): (sub_permut(g, d, t1, t2) => permut(t1, t2))))));

%% Why axiom array_length_update
ASSERT (FORALL (t:(ARRAY INT OF INT)):
       (FORALL (i:INT):
       (FORALL (v:INT):
       (array_length_int(update_int(t, i, v)) = array_length_int(t)))));

%% Why axiom sub_permut_array_length
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (array_length_int(t1) = array_length_int(t2)))))));

%% Why axiom permut_array_length
ASSERT (FORALL (t1:(ARRAY INT OF INT)):
       (FORALL (t2:(ARRAY INT OF INT)):
       (permut(t1, t2) => (array_length_int(t1) = array_length_int(t2)))));

%% Why logic F
F: (INT -> INT);

%% Why axiom F_0
ASSERT (F(0) = 1);

%% Why axiom F_1
ASSERT (F(1) = 1);

%% Why axiom F_n
ASSERT (FORALL (n:INT): ((n >= 2) => (F(n) = (F((n - 1)) + F((n - 2))))));

%% Why axiom access_update_neq_int
ASSERT (FORALL (t:(ARRAY INT OF INT)):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (FORALL (v:INT):
       ((i /= j) => (access_int(update_int(t, i, v), j) = access_int(t, j)))))));

%% Why axiom access_update_eq_int
ASSERT (FORALL (t:(ARRAY INT OF INT)):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (FORALL (v:INT):
       ((i = j) => (access_int(update_int(t, i, v), j) = v))))));

%% Why axiom access_update_int
ASSERT (FORALL (t:(ARRAY INT OF INT)):
       (FORALL (i:INT):
       (FORALL (v:INT): (access_int(update_int(t, i, v), i) = v))));

%% fib1_po_1, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT): ((n >= 0) => ((n <= 1) => (1 = F(n)))));
POP;

%% fib1_po_2, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      ((n >= 0) => ((n > 1) => ((0 <= n) AND ((n - 1) < n)))));
POP;

%% fib1_po_3, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      ((n >= 0) =>
      ((n > 1) => (((0 <= n) AND ((n - 1) < n)) => ((n - 1) >= 0)))));
POP;

%% fib1_po_4, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      ((n >= 0) =>
      ((n > 1) =>
      (((0 <= n) AND ((n - 1) < n)) =>
      (((n - 1) >= 0) =>
      (FORALL (result:INT):
      ((result = F((n - 1))) => ((0 <= n) AND ((n - 2) < n)))))))));
POP;

%% fib1_po_5, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      ((n >= 0) =>
      ((n > 1) =>
      (((0 <= n) AND ((n - 1) < n)) =>
      (((n - 1) >= 0) =>
      (FORALL (result:INT):
      ((result = F((n - 1))) =>
      (((0 <= n) AND ((n - 2) < n)) => ((n - 2) >= 0)))))))));
POP;

%% fib1_po_6, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      ((n >= 0) =>
      ((n > 1) =>
      (((0 <= n) AND ((n - 1) < n)) =>
      (((n - 1) >= 0) =>
      (FORALL (result:INT):
      ((result = F((n - 1))) =>
      (((0 <= n) AND ((n - 2) < n)) =>
      (((n - 2) >= 0) =>
      (FORALL (result0:INT):
      ((result0 = F((n - 2))) => ((result + result0) = F(n)))))))))))));
POP;

%% fib2_aux_po_1, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      (FORALL (x:INT):
      (FORALL (fx:INT):
      (FORALL (fx_1:INT):
      ((((1 <= x) AND (x <= n)) AND ((fx = F(x)) AND (fx_1 = F((x - 1))))) =>
      ((x = n) => (fx = F(n))))))));
POP;

%% fib2_aux_po_2, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      (FORALL (x:INT):
      (FORALL (fx:INT):
      (FORALL (fx_1:INT):
      ((((1 <= x) AND (x <= n)) AND ((fx = F(x)) AND (fx_1 = F((x - 1))))) =>
      ((x /= n) => ((0 <= (n - x)) AND ((n - (x + 1)) < (n - x)))))))));
POP;

%% fib2_aux_po_3, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      (FORALL (x:INT):
      (FORALL (fx:INT):
      (FORALL (fx_1:INT):
      ((((1 <= x) AND (x <= n)) AND ((fx = F(x)) AND (fx_1 = F((x - 1))))) =>
      ((x /= n) =>
      (((0 <= (n - x)) AND ((n - (x + 1)) < (n - x))) =>
      (((1 <= (x + 1)) AND ((x + 1) <= n)) AND
      (((fx + fx_1) = F((x + 1))) AND (fx = F(((x + 1) - 1))))))))))));
POP;

%% fib2_po_1, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT): ((n >= 0) => ((n <= 1) => (1 = F(n)))));
POP;

%% fib2_po_2, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      ((n >= 0) =>
      ((n > 1) =>
      (((1 <= 1) AND (1 <= n)) AND ((1 = F(1)) AND (1 = F((1 - 1))))))));
POP;

%% fib3_po_1, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      ((n >= 0) =>
      ((n > 0) =>
      (((1 <= 1) AND (1 <= n)) AND ((1 = F(1)) AND (1 = F((1 - 1))))))));
POP;

%% fib3_po_2, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      ((n >= 0) =>
      ((n > 0) =>
      ((((1 <= 1) AND (1 <= n)) AND ((1 = F(1)) AND (1 = F((1 - 1))))) =>
      (FORALL (k:INT):
      (FORALL (x:INT):
      (FORALL (y:INT):
      ((((1 <= k) AND (k <= n)) AND ((x = F(k)) AND (y = F((k - 1))))) =>
      ((k < n) =>
      (FORALL (y0:INT):
      ((y0 = x) =>
      (FORALL (x0:INT):
      ((x0 = (x + y)) =>
      (FORALL (k0:INT):
      ((k0 = (k + 1)) =>
      ((((1 <= k0) AND (k0 <= n)) AND ((x0 = F(k0)) AND (y0 = F((k0 - 1))))) AND
      ((0 <= (n - k)) AND ((n - k0) < (n - k)))))))))))))))))));
POP;

%% fib3_po_3, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      ((n >= 0) =>
      ((n > 0) =>
      ((((1 <= 1) AND (1 <= n)) AND ((1 = F(1)) AND (1 = F((1 - 1))))) =>
      (FORALL (k:INT):
      (FORALL (x:INT):
      (FORALL (y:INT):
      ((((1 <= k) AND (k <= n)) AND ((x = F(k)) AND (y = F((k - 1))))) =>
      ((k >= n) => (x = F(n)))))))))));
POP;

%% fib3_po_4, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT): ((n >= 0) => ((n <= 0) => (1 = F(n)))));
POP;

%% fib4_po_1, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      (((0 <= n) AND (n < array_length_int(t))) => ((n <= 1) => (1 = F(n))))));
POP;

%% fib4_po_2, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      (((0 <= n) AND (n < array_length_int(t))) =>
      ((n > 1) => ((0 <= 0) AND (0 < array_length_int(t)))))));
POP;

%% fib4_po_3, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      (((0 <= n) AND (n < array_length_int(t))) =>
      ((n > 1) =>
      (((0 <= 0) AND (0 < array_length_int(t))) =>
      (FORALL (t0:(ARRAY INT OF INT)):
      ((t0 = update_int(t, 0, 1)) =>
      ((0 <= 1) AND (1 < array_length_int(t0))))))))));
POP;

%% fib4_po_4, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      (((0 <= n) AND (n < array_length_int(t))) =>
      ((n > 1) =>
      (((0 <= 0) AND (0 < array_length_int(t))) =>
      (FORALL (t0:(ARRAY INT OF INT)):
      ((t0 = update_int(t, 0, 1)) =>
      (((0 <= 1) AND (1 < array_length_int(t0))) =>
      (FORALL (t1:(ARRAY INT OF INT)):
      ((t1 = update_int(t0, 1, 1)) =>
      (((2 <= 2) AND (2 <= (n + 1))) AND
      ((array_length_int(t1) = array_length_int(t)) AND
      (FORALL (i:INT):
      (((0 <= i) AND (i < 2)) => (access_int(t1, i) = F(i))))))))))))))));
POP;

%% fib4_po_5, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      (((0 <= n) AND (n < array_length_int(t))) =>
      ((n > 1) =>
      (((0 <= 0) AND (0 < array_length_int(t))) =>
      (FORALL (t0:(ARRAY INT OF INT)):
      ((t0 = update_int(t, 0, 1)) =>
      (((0 <= 1) AND (1 < array_length_int(t0))) =>
      (FORALL (t1:(ARRAY INT OF INT)):
      ((t1 = update_int(t0, 1, 1)) =>
      ((((2 <= 2) AND (2 <= (n + 1))) AND
       ((array_length_int(t1) = array_length_int(t)) AND
       (FORALL (i:INT):
       (((0 <= i) AND (i < 2)) => (access_int(t1, i) = F(i)))))) =>
      (FORALL (k:INT):
      (FORALL (t2:(ARRAY INT OF INT)):
      ((((2 <= k) AND (k <= (n + 1))) AND
       ((array_length_int(t2) = array_length_int(t)) AND
       (FORALL (i:INT):
       (((0 <= i) AND (i < k)) => (access_int(t2, i) = F(i)))))) =>
      ((k <= n) => ((0 <= (k - 1)) AND ((k - 1) < array_length_int(t2))))))))))))))))));
POP;

%% fib4_po_6, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      (((0 <= n) AND (n < array_length_int(t))) =>
      ((n > 1) =>
      (((0 <= 0) AND (0 < array_length_int(t))) =>
      (FORALL (t0:(ARRAY INT OF INT)):
      ((t0 = update_int(t, 0, 1)) =>
      (((0 <= 1) AND (1 < array_length_int(t0))) =>
      (FORALL (t1:(ARRAY INT OF INT)):
      ((t1 = update_int(t0, 1, 1)) =>
      ((((2 <= 2) AND (2 <= (n + 1))) AND
       ((array_length_int(t1) = array_length_int(t)) AND
       (FORALL (i:INT):
       (((0 <= i) AND (i < 2)) => (access_int(t1, i) = F(i)))))) =>
      (FORALL (k:INT):
      (FORALL (t2:(ARRAY INT OF INT)):
      ((((2 <= k) AND (k <= (n + 1))) AND
       ((array_length_int(t2) = array_length_int(t)) AND
       (FORALL (i:INT):
       (((0 <= i) AND (i < k)) => (access_int(t2, i) = F(i)))))) =>
      ((k <= n) =>
      (((0 <= (k - 1)) AND ((k - 1) < array_length_int(t2))) =>
      (FORALL (result:INT):
      ((result = access_int(t2, (k - 1))) =>
      ((0 <= (k - 2)) AND ((k - 2) < array_length_int(t2)))))))))))))))))))));
POP;

%% fib4_po_7, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      (((0 <= n) AND (n < array_length_int(t))) =>
      ((n > 1) =>
      (((0 <= 0) AND (0 < array_length_int(t))) =>
      (FORALL (t0:(ARRAY INT OF INT)):
      ((t0 = update_int(t, 0, 1)) =>
      (((0 <= 1) AND (1 < array_length_int(t0))) =>
      (FORALL (t1:(ARRAY INT OF INT)):
      ((t1 = update_int(t0, 1, 1)) =>
      ((((2 <= 2) AND (2 <= (n + 1))) AND
       ((array_length_int(t1) = array_length_int(t)) AND
       (FORALL (i:INT):
       (((0 <= i) AND (i < 2)) => (access_int(t1, i) = F(i)))))) =>
      (FORALL (k:INT):
      (FORALL (t2:(ARRAY INT OF INT)):
      ((((2 <= k) AND (k <= (n + 1))) AND
       ((array_length_int(t2) = array_length_int(t)) AND
       (FORALL (i:INT):
       (((0 <= i) AND (i < k)) => (access_int(t2, i) = F(i)))))) =>
      ((k <= n) =>
      (((0 <= (k - 1)) AND ((k - 1) < array_length_int(t2))) =>
      (FORALL (result:INT):
      ((result = access_int(t2, (k - 1))) =>
      (((0 <= (k - 2)) AND ((k - 2) < array_length_int(t2))) =>
      (FORALL (result0:INT):
      ((result0 = access_int(t2, (k - 2))) =>
      ((0 <= k) AND (k < array_length_int(t2))))))))))))))))))))))));
POP;

%% fib4_po_8, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      (((0 <= n) AND (n < array_length_int(t))) =>
      ((n > 1) =>
      (((0 <= 0) AND (0 < array_length_int(t))) =>
      (FORALL (t0:(ARRAY INT OF INT)):
      ((t0 = update_int(t, 0, 1)) =>
      (((0 <= 1) AND (1 < array_length_int(t0))) =>
      (FORALL (t1:(ARRAY INT OF INT)):
      ((t1 = update_int(t0, 1, 1)) =>
      ((((2 <= 2) AND (2 <= (n + 1))) AND
       ((array_length_int(t1) = array_length_int(t)) AND
       (FORALL (i:INT):
       (((0 <= i) AND (i < 2)) => (access_int(t1, i) = F(i)))))) =>
      (FORALL (k:INT):
      (FORALL (t2:(ARRAY INT OF INT)):
      ((((2 <= k) AND (k <= (n + 1))) AND
       ((array_length_int(t2) = array_length_int(t)) AND
       (FORALL (i:INT):
       (((0 <= i) AND (i < k)) => (access_int(t2, i) = F(i)))))) =>
      ((k <= n) =>
      (((0 <= (k - 1)) AND ((k - 1) < array_length_int(t2))) =>
      (FORALL (result:INT):
      ((result = access_int(t2, (k - 1))) =>
      (((0 <= (k - 2)) AND ((k - 2) < array_length_int(t2))) =>
      (FORALL (result0:INT):
      ((result0 = access_int(t2, (k - 2))) =>
      (((0 <= k) AND (k < array_length_int(t2))) =>
      (FORALL (t3:(ARRAY INT OF INT)):
      ((t3 = update_int(t2, k, (result + result0))) =>
      (FORALL (k0:INT):
      ((k0 = (k + 1)) =>
      ((((2 <= k0) AND (k0 <= (n + 1))) AND
       ((array_length_int(t3) = array_length_int(t)) AND
       (FORALL (i:INT):
       (((0 <= i) AND (i < k0)) => (access_int(t3, i) = F(i)))))) AND
      ((0 <= ((n + 1) - k)) AND (((n + 1) - k0) < ((n + 1) - k))))))))))))))))))))))))))))));
POP;

%% fib4_po_9, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      (((0 <= n) AND (n < array_length_int(t))) =>
      ((n > 1) =>
      (((0 <= 0) AND (0 < array_length_int(t))) =>
      (FORALL (t0:(ARRAY INT OF INT)):
      ((t0 = update_int(t, 0, 1)) =>
      (((0 <= 1) AND (1 < array_length_int(t0))) =>
      (FORALL (t1:(ARRAY INT OF INT)):
      ((t1 = update_int(t0, 1, 1)) =>
      ((((2 <= 2) AND (2 <= (n + 1))) AND
       ((array_length_int(t1) = array_length_int(t)) AND
       (FORALL (i:INT):
       (((0 <= i) AND (i < 2)) => (access_int(t1, i) = F(i)))))) =>
      (FORALL (k:INT):
      (FORALL (t2:(ARRAY INT OF INT)):
      ((((2 <= k) AND (k <= (n + 1))) AND
       ((array_length_int(t2) = array_length_int(t)) AND
       (FORALL (i:INT):
       (((0 <= i) AND (i < k)) => (access_int(t2, i) = F(i)))))) =>
      ((k > n) => ((0 <= n) AND (n < array_length_int(t2))))))))))))))))));
POP;

%% fib4_po_10, Why obligation from file "", line 0, characters 0-0:
PUSH;
QUERY (FORALL (n:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      (((0 <= n) AND (n < array_length_int(t))) =>
      ((n > 1) =>
      (((0 <= 0) AND (0 < array_length_int(t))) =>
      (FORALL (t0:(ARRAY INT OF INT)):
      ((t0 = update_int(t, 0, 1)) =>
      (((0 <= 1) AND (1 < array_length_int(t0))) =>
      (FORALL (t1:(ARRAY INT OF INT)):
      ((t1 = update_int(t0, 1, 1)) =>
      ((((2 <= 2) AND (2 <= (n + 1))) AND
       ((array_length_int(t1) = array_length_int(t)) AND
       (FORALL (i:INT):
       (((0 <= i) AND (i < 2)) => (access_int(t1, i) = F(i)))))) =>
      (FORALL (k:INT):
      (FORALL (t2:(ARRAY INT OF INT)):
      ((((2 <= k) AND (k <= (n + 1))) AND
       ((array_length_int(t2) = array_length_int(t)) AND
       (FORALL (i:INT):
       (((0 <= i) AND (i < k)) => (access_int(t2, i) = F(i)))))) =>
      ((k > n) =>
      (((0 <= n) AND (n < array_length_int(t2))) =>
      (FORALL (result:INT):
      ((result = access_int(t2, n)) => (result = F(n))))))))))))))))))));
POP;

