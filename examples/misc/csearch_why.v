(* Load Programs. *)(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.

(* Why obligation from file , characters 237-241 *)
Lemma index_po_1 :
 forall (n:Z) (t:array Z) (Pre5:array_length t = n) (i:Z)
   (Post4:i = 0%Z) (Variant1 i1:Z) (Pre4:Variant1 = (n - i1)%Z)
   (Pre3:(0 <= i1)%Z) (Test2:(i1 < n)%Z),
   (0 <= i1)%Z /\ (i1 < array_length t)%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 237-246 *)
Lemma index_po_2 :
 forall (n v:Z) (t:array Z) (Pre5:array_length t = n) (i:Z)
   (Post4:i = 0%Z) (Variant1 i1:Z) (Pre4:Variant1 = (n - i1)%Z)
   (Pre3:(0 <= i1)%Z) (Test2:(i1 < n)%Z)
   (Pre2:(0 <= i1)%Z /\ (i1 < array_length t)%Z) (c_aux_1:Z)
   (Post1:c_aux_1 = access t i1) (result0:bool)
   (Post14:if result0 then c_aux_1 = v else c_aux_1 <> v),
   if result0
   then (0 <= i1)%Z /\ (i1 < n)%Z -> access t i1 = v
   else
    forall i:Z, i = (i1 + 1)%Z -> (0 <= i)%Z /\ Zwf 0 (n - i) (n - i1).
Proof.
olddestruct result0; intuition.
Qed.

(* Why obligation from file , characters 150-156 *)
Lemma index_po_3 :
 forall (n:Z) (t:array Z) (Pre5:array_length t = n) (i:Z)
   (Post4:i = 0%Z), (0 <= i)%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 116-267 *)
Lemma index_po_4 :
 forall (n v:Z) (t:array Z) (Pre5:array_length t = n) (i:Z)
   (Post4:i = 0%Z) (i1:Z) (Post3:(0 <= i1)%Z /\ (i1 >= n)%Z),
   (0 <= i1)%Z /\ (i1 < n)%Z -> access t i1 = v.
Proof.
intuition.
Qed.


(* Why obligation from file , characters 570-574 *)
Lemma index2_po_1 :
 forall (n v:Z) (t:array Z) (Pre5:array_length t = n) (i:Z)
   (Post4:i = 0%Z) (Variant1 i1:Z) (Pre4:Variant1 = (n - i1)%Z)
   (Pre3:(0 <= i1)%Z /\
         (forall k:Z, (0 <= k)%Z /\ (k < i1)%Z -> access t k <> v))
   (Test2:(i1 < n)%Z), (0 <= i1)%Z /\ (i1 < array_length t)%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 570-579 *)
Lemma index2_po_2 :
 forall (n v:Z) (t:array Z) (Pre5:array_length t = n) (i:Z)
   (Post4:i = 0%Z) (Variant1 i1:Z) (Pre4:Variant1 = (n - i1)%Z)
   (Pre3:(0 <= i1)%Z /\
         (forall k:Z, (0 <= k)%Z /\ (k < i1)%Z -> access t k <> v))
   (Test2:(i1 < n)%Z) (Pre2:(0 <= i1)%Z /\ (i1 < array_length t)%Z)
   (c_aux_2:Z) (Post1:c_aux_2 = access t i1) (result0:bool)
   (Post15:if result0 then c_aux_2 = v else c_aux_2 <> v),
   if result0
   then (0 <= i1)%Z /\ (i1 < n)%Z -> access t i1 = v
   else
    forall i:Z,
      i = (i1 + 1)%Z ->
      ((0 <= i)%Z /\
       (forall k:Z, (0 <= k)%Z /\ (k < i)%Z -> access t k <> v)) /\
      Zwf 0 (n - i) (n - i1).
Proof.
olddestruct result0; intuition.
assert (k = i1 \/ (k < i1)%Z).
 omega.
 intuition.
subst k c_aux_2; auto.
apply (H0 k); auto with *.
Qed.

(* Why obligation from file , characters 487-535 *)
Lemma index2_po_3 :
 forall (n v:Z) (t:array Z) (Pre5:array_length t = n) (i:Z)
   (Post4:i = 0%Z),
   (0 <= i)%Z /\
   (forall k:Z, (0 <= k)%Z /\ (k < i)%Z -> access t k <> v).
Proof.
intuition.
Qed.

(* Why obligation from file , characters 613-614 *)
Lemma index2_po_4 :
 forall (n v:Z) (t:array Z) (Pre5:array_length t = n) (i:Z)
   (Post4:i = 0%Z) (i1:Z)
   (Post3:((0 <= i1)%Z /\
           (forall k:Z, (0 <= k)%Z /\ (k < i1)%Z -> access t k <> v)) /\
          (i1 >= n)%Z), (0 <= n)%Z /\ (n < n)%Z -> access t n = v.
Proof.
intuition.
Qed.

