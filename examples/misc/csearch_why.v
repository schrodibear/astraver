(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Why.

(* Why obligation from file "csearch.c", characters 233-237 *)
Lemma index_po_1 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre5: `(array_length t) = n`)
  (result: Z)
  (Post4: result = `0`)
  (Variant1: Z)
  (i0: Z)
  (Pre4: Variant1 = `n - i0`)
  (Pre3: `0 <= i0` /\ ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> v`)))
  (Test4: `i0 < n`)
  `0 <= i0` /\ `i0 < (array_length t)`.
Proof.
Intuition.
Save.

(* Why obligation from file "csearch.c", characters 244-250 *)
Lemma index_po_2 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre5: `(array_length t) = n`)
  (result: Z)
  (Post4: result = `0`)
  (Variant1: Z)
  (i0: Z)
  (Pre4: Variant1 = `n - i0`)
  (Pre3: `0 <= i0` /\ ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> v`)))
  (Test4: `i0 < n`)
  (Test3: `(access t i0) = v`)
  (`0 <= i0` /\ `i0 < n` -> `(access t i0) = v`).
Proof.
Intuition.
Save.

(* Why obligation from file "csearch.c", characters 229-250 *)
Lemma index_po_3 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre5: `(array_length t) = n`)
  (result: Z)
  (Post4: result = `0`)
  (Variant1: Z)
  (i0: Z)
  (Pre4: Variant1 = `n - i0`)
  (Pre3: `0 <= i0` /\ ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> v`)))
  (Test4: `i0 < n`)
  (Test2: `(access t i0) <> v`)
  ((i:Z)
   (i = `i0 + 1` -> (`0 <= i` /\
    ((k:Z) (`0 <= k` /\ `k < i` -> `(access t k) <> v`))) /\
    (Zwf `0` `n - i` `n - i0`))).
Proof.
Intuition.
Intuition.
Assert `k=i0` \/ `k<i0`. Omega. Intuition.
Apply Test2; Subst k; Auto.
Apply (H0 k); Auto with *.
Unfold Zwf; Omega.
Save.

(* Why obligation from file "csearch.c", characters 150-198 *)
Lemma index_po_4 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre5: `(array_length t) = n`)
  (result: Z)
  (Post4: result = `0`)
  `0 <= result` /\ ((k:Z) (`0 <= k` /\ `k < result` -> `(access t k) <> v`)).
Proof.
Intuition.
Save.

(* Why obligation from file "csearch.c", characters 116-263 *)
Lemma index_po_5 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre5: `(array_length t) = n`)
  (result: Z)
  (Post4: result = `0`)
  (i0: Z)
  (Post3: (`0 <= i0` /\
          ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> v`))) /\ `
          i0 >= n`)
  (`0 <= i0` /\ `i0 < n` -> `(access t i0) = v`).
Proof.
Intuition.
Save.

(* Why obligation from file "csearch.c", characters 566-570 *)
Lemma index2_po_1 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre5: `(array_length t) = n`)
  (result: Z)
  (Post4: result = `0`)
  (Variant1: Z)
  (i0: Z)
  (Pre4: Variant1 = `n - i0`)
  (Pre3: `0 <= i0` /\ ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> v`)))
  (Test4: `i0 < n`)
  `0 <= i0` /\ `i0 < (array_length t)`.
Proof.
Intuition.
Save.

(* Why obligation from file "csearch.c", characters 584-585 *)
Lemma index2_po_2 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre5: `(array_length t) = n`)
  (result: Z)
  (Post4: result = `0`)
  (Variant1: Z)
  (i0: Z)
  (Pre4: Variant1 = `n - i0`)
  (Pre3: `0 <= i0` /\ ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> v`)))
  (Test4: `i0 < n`)
  (Test3: `(access t i0) = v`)
  (`0 <= i0` /\ `i0 < n` -> `(access t i0) = v`).
Proof.
Intuition.
Save.

(* Why obligation from file "csearch.c", characters 562-586 *)
Lemma index2_po_3 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre5: `(array_length t) = n`)
  (result: Z)
  (Post4: result = `0`)
  (Variant1: Z)
  (i0: Z)
  (Pre4: Variant1 = `n - i0`)
  (Pre3: `0 <= i0` /\ ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> v`)))
  (Test4: `i0 < n`)
  (Test2: `(access t i0) <> v`)
  ((i:Z)
   (i = `i0 + 1` -> (`0 <= i` /\
    ((k:Z) (`0 <= k` /\ `k < i` -> `(access t k) <> v`))) /\
    (Zwf `0` `n - i` `n - i0`))).
Proof.
Intuition.
Assert `k=i0` \/ `k<i0`. Omega. Intuition.
Apply Test2; Subst k; Auto.
Apply (H0 k); Auto with *.
Unfold Zwf; Omega.
Save.

(* Why obligation from file "csearch.c", characters 483-531 *)
Lemma index2_po_4 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre5: `(array_length t) = n`)
  (result: Z)
  (Post4: result = `0`)
  `0 <= result` /\ ((k:Z) (`0 <= k` /\ `k < result` -> `(access t k) <> v`)).
Proof.
Intuition.
Save.

(* Why obligation from file "csearch.c", characters 609-610 *)
Lemma index2_po_5 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre5: `(array_length t) = n`)
  (result: Z)
  (Post4: result = `0`)
  (i0: Z)
  (Post3: (`0 <= i0` /\
          ((k:Z) (`0 <= k` /\ `k < i0` -> `(access t k) <> v`))) /\ `
          i0 >= n`)
  (`0 <= n` /\ `n < n` -> `(access t n) = v`).
Proof.
Intuition.
Save.

