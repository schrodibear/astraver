
UNIT: TYPE;
tt: UNIT;
array_length_INT: [ARRAY INT OF INT -> INT]; %% should be polymorphic
sqrt_real: [REAL -> REAL];
int_of_real: [REAL -> INT];
mod_int: [[INT, INT] -> INT];

max: [[INT, INT] -> INT];
ASSERT FORALL (x,y:INT): (x >= y AND max(x,y)=x) OR (x < y AND max(x,y)=y);

%%%% DO NOT EDIT BELOW THIS LINE

%% Why logic sorted_array
sorted_array: [[ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic exchange
exchange: [[ARRAY INT OF INT, ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic sub_permut
sub_permut: [[INT, INT, ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic permut
permut: [[ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic array_le
array_le: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_ge
array_ge: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_length
array_length_INT: [ARRAY INT OF INT -> INT];

%% Why logic store
store_INT: [[ARRAY INT OF INT, INT, INT] -> UNIT];

%% Why axiom array_length_store
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (v:INT):
       (array_length_INT((t WITH [i] := v)) = array_length_INT(t)))));

%% Why logic access
access_INT: [[ARRAY INT OF INT, INT] -> INT];

%% Why axiom exchange_def
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (exchange(t1, t2, i, j) <=>
       ((array_length_INT(t1) = array_length_INT(t2)) AND
       ((t1[i] = t2[j]) AND
       ((t2[i] = t1[j]) AND
       (FORALL (k:INT): (((k /= i) AND (k /= j)) => (t1[k] = t2[k])))))))))));

%% Why axiom permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT): permut(t, t));

%% Why axiom permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT): (permut(t1, t2) => permut(t2, t1))));

%% Why axiom permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       ((permut(t1, t2) AND permut(t2, t3)) => permut(t1, t3)))));

%% Why axiom permut_exchange
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT): permut(t, ((t WITH [i] := t[j]) WITH [j] := t[i])))));

%% Why axiom permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (permut(t1, t2) => (array_length_INT(t1) = array_length_INT(t2)))));

%% Why axiom sub_permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT): (FORALL (d:INT): sub_permut(g, d, t, t))));

%% Why axiom sub_permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) => sub_permut(g, d, t2, t1))))));

%% Why axiom sub_permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (sub_permut(g, d, t2, t3) => sub_permut(g, d, t1, t3))))))));

%% Why axiom sub_permut_exchange_1
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND ((i <= d) AND ((g <= j) AND (j <= d)))) =>
       sub_permut(g, d, t, ((t WITH [i] := t[j]) WITH [j] := t[i]))))))));

%% Why axiom sub_permut_exchange_2
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND
        ((i <= d) AND ((g <= j) AND ((j <= d) AND exchange(t1, t2, i, j))))) =>
       sub_permut(g, d, t1, t2))))))));

%% Why axiom sub_permut_permut
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT): (sub_permut(g, d, t1, t2) => permut(t1, t2))))));

%% Why axiom sub_permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (array_length_INT(t1) = array_length_INT(t2)))))));

%% Why axiom sorted_array_def
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (sorted_array(t, i, j) <=>
       (FORALL (k:INT): (((i <= k) AND (k < j)) => (t[k] <= t[(k + 1)])))))));

%% f91_po_1, Why obligation from file "mac_carthy.mlw", characters 131-263
QUERY (FORALL (Variant1:INT):
      (FORALL (n0:INT):
      ((Variant1 = max(0, (101 - n0))) =>
      ((n0 <= 100) =>
      (FORALL (result0:INT):
      ((result0 = (n0 + 11)) =>
      ((0 <= Variant1) AND (max(0, (101 - result0)) < Variant1))))))));

%% f91_po_2, Why obligation from file "mac_carthy.mlw", characters 131-263
QUERY (FORALL (Variant1:INT):
      (FORALL (n0:INT):
      ((Variant1 = max(0, (101 - n0))) =>
      ((n0 <= 100) =>
      (FORALL (aux_3:INT):
      (((((n0 + 11) <= 100) AND (aux_3 = 91)) OR
       (((n0 + 11) >= 101) AND (aux_3 = ((n0 + 11) - 10)))) =>
      (FORALL (result0:INT):
      ((result0 = aux_3) =>
      ((0 <= Variant1) AND (max(0, (101 - result0)) < Variant1))))))))));

%% f91_po_3, Why obligation from file "mac_carthy.mlw", characters 158-178
QUERY (FORALL (Variant1:INT):
      (FORALL (n0:INT):
      ((Variant1 = max(0, (101 - n0))) =>
      ((n0 <= 100) =>
      (FORALL (aux_3:INT):
      (((((n0 + 11) <= 100) AND (aux_3 = 91)) OR
       (((n0 + 11) >= 101) AND (aux_3 = ((n0 + 11) - 10)))) =>
      (FORALL (result0:INT):
      ((((aux_3 <= 100) AND (result0 = 91)) OR
       ((aux_3 >= 101) AND (result0 = (aux_3 - 10)))) =>
      (((n0 <= 100) AND (result0 = 91)) OR
      ((n0 >= 101) AND (result0 = (n0 - 10))))))))))));

%% f91_po_4, Why obligation from file "mac_carthy.mlw", characters 190-196
QUERY (FORALL (Variant1:INT):
      (FORALL (n0:INT):
      ((Variant1 = max(0, (101 - n0))) =>
      ((n0 > 100) =>
      (FORALL (result0:INT):
      ((result0 = (n0 - 10)) =>
      (((n0 <= 100) AND (result0 = 91)) OR
      ((n0 >= 101) AND (result0 = (n0 - 10))))))))));

