
UNIT: TYPE;
tt: UNIT;
array_length_INT: [ARRAY INT OF INT -> INT]; %% should be polymorphic
sqrt_real: [REAL -> REAL];
int_of_real: [REAL -> INT];
mod_int: [[INT, INT] -> INT];


%%%% DO NOT EDIT BELOW THIS LINE

%% Why logic sorted_array
sorted_array: [[ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic exchange
exchange: [[ARRAY INT OF INT, ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic sub_permut
sub_permut: [[INT, INT, ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic permut
permut: [[ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic array_le
array_le: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_ge
array_ge: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_length
array_length_INT: [ARRAY INT OF INT -> INT];

%% Why logic store
store_INT: [[ARRAY INT OF INT, INT, INT] -> UNIT];

%% Why axiom array_length_store
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (v:INT):
       (array_length_INT((t WITH [i] := v)) = array_length_INT(t)))));

%% Why logic access
access_INT: [[ARRAY INT OF INT, INT] -> INT];

%% Why axiom exchange_def
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (exchange(t1, t2, i, j) <=>
       ((array_length_INT(t1) = array_length_INT(t2)) AND
       ((t1[i] = t2[j]) AND
       ((t2[i] = t1[j]) AND
       (FORALL (k:INT): (((k /= i) AND (k /= j)) => (t1[k] = t2[k])))))))))));

%% Why axiom permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT): permut(t, t));

%% Why axiom permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT): (permut(t1, t2) => permut(t2, t1))));

%% Why axiom permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       ((permut(t1, t2) AND permut(t2, t3)) => permut(t1, t3)))));

%% Why axiom permut_exchange
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT): permut(t, ((t WITH [i] := t[j]) WITH [j] := t[i])))));

%% Why axiom permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (permut(t1, t2) => (array_length_INT(t1) = array_length_INT(t2)))));

%% Why axiom sub_permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT): (FORALL (d:INT): sub_permut(g, d, t, t))));

%% Why axiom sub_permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) => sub_permut(g, d, t2, t1))))));

%% Why axiom sub_permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (sub_permut(g, d, t2, t3) => sub_permut(g, d, t1, t3))))))));

%% Why axiom sub_permut_exchange_1
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND ((i <= d) AND ((g <= j) AND (j <= d)))) =>
       sub_permut(g, d, t, ((t WITH [i] := t[j]) WITH [j] := t[i]))))))));

%% Why axiom sub_permut_exchange_2
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND
        ((i <= d) AND ((g <= j) AND ((j <= d) AND exchange(t1, t2, i, j))))) =>
       sub_permut(g, d, t1, t2))))))));

%% Why axiom sub_permut_permut
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT): (sub_permut(g, d, t1, t2) => permut(t1, t2))))));

%% Why axiom sub_permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (array_length_INT(t1) = array_length_INT(t2)))))));

%% Why axiom sorted_array_def
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (sorted_array(t, i, j) <=>
       (FORALL (k:INT): (((i <= k) AND (k < j)) => (t[k] <= t[(k + 1)])))))));

%% sqrt_po_1, Why obligation from file "sqrt_dicho.mlw", characters 326-346
QUERY (FORALL (x:INT):
      ((x >= 0) =>
      (FORALL (inf:INT):
      ((inf = 0) =>
      (FORALL (sup:INT):
      ((sup = (x + 1)) =>
      (FORALL (mil:INT):
      ((mil = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (inf1:INT):
      (FORALL (sup1:INT):
      ((Variant1 = (sup1 - inf1)) =>
      ((((inf1 * inf1) <= x) AND ((x < (sup1 * sup1)) AND (inf1 < sup1))) =>
      (((inf1 + 1) /= sup1) => (2 /= 0)))))))))))))));

%% sqrt_po_2, Why obligation from file "sqrt_dicho.mlw", characters 375-386
QUERY (FORALL (x:INT):
      ((x >= 0) =>
      (FORALL (inf:INT):
      ((inf = 0) =>
      (FORALL (sup:INT):
      ((sup = (x + 1)) =>
      (FORALL (mil:INT):
      ((mil = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (inf1:INT):
      (FORALL (sup1:INT):
      ((Variant1 = (sup1 - inf1)) =>
      ((((inf1 * inf1) <= x) AND ((x < (sup1 * sup1)) AND (inf1 < sup1))) =>
      (((inf1 + 1) /= sup1) =>
      (FORALL (mil2:INT):
      ((mil2 = ((inf1 + (sup1 + 1)) / 2)) =>
      ((x < (mil2 * mil2)) =>
      (FORALL (sup2:INT):
      ((sup2 = mil2) =>
      ((((inf1 * inf1) <= x) AND ((x < (sup2 * sup2)) AND (inf1 < sup2))) AND
      ((0 <= (sup1 - inf1)) AND ((sup2 - inf1) < (sup1 - inf1)))))))))))))))))))))));

%% sqrt_po_3, Why obligation from file "sqrt_dicho.mlw", characters 392-403
QUERY (FORALL (x:INT):
      ((x >= 0) =>
      (FORALL (inf:INT):
      ((inf = 0) =>
      (FORALL (sup:INT):
      ((sup = (x + 1)) =>
      (FORALL (mil:INT):
      ((mil = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (inf1:INT):
      (FORALL (sup1:INT):
      ((Variant1 = (sup1 - inf1)) =>
      ((((inf1 * inf1) <= x) AND ((x < (sup1 * sup1)) AND (inf1 < sup1))) =>
      (((inf1 + 1) /= sup1) =>
      (FORALL (mil2:INT):
      ((mil2 = ((inf1 + (sup1 + 1)) / 2)) =>
      ((x >= (mil2 * mil2)) =>
      (FORALL (inf2:INT):
      ((inf2 = mil2) =>
      ((((inf2 * inf2) <= x) AND ((x < (sup1 * sup1)) AND (inf2 < sup1))) AND
      ((0 <= (sup1 - inf1)) AND ((sup1 - inf2) < (sup1 - inf1)))))))))))))))))))))));

%% sqrt_po_4, Why obligation from file "sqrt_dicho.mlw", characters 185-409
QUERY (FORALL (x:INT):
      ((x >= 0) =>
      (FORALL (inf:INT):
      ((inf = 0) =>
      (FORALL (sup:INT):
      ((sup = (x + 1)) =>
      (FORALL (mil:INT):
      ((mil = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (inf1:INT):
      (FORALL (sup1:INT):
      ((Variant1 = (sup1 - inf1)) =>
      ((((inf1 * inf1) <= x) AND ((x < (sup1 * sup1)) AND (inf1 < sup1))) =>
      (((inf1 + 1) = sup1) =>
      (FORALL (result:INT):
      ((result = inf1) =>
      (((result * result) <= x) AND (x < ((result + 1) * (result + 1))))))))))))))))))));

%% sqrt_po_5, Why obligation from file "sqrt_dicho.mlw", characters 235-287
QUERY (FORALL (x:INT):
      ((x >= 0) =>
      (FORALL (inf:INT):
      ((inf = 0) =>
      (FORALL (sup:INT):
      ((sup = (x + 1)) =>
      (FORALL (mil:INT):
      ((mil = 0) =>
      (((inf * inf) <= x) AND ((x < (sup * sup)) AND (inf < sup)))))))))));

