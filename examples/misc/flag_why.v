(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Why.
Require Sumbool.

(*Why*) Parameter N : Z.

Axiom N_non_negative : `0 <= N`.

Inductive color : Set := blue : color | white : color | red : color.

Lemma eq_color_dec : (c1,c2:color) { c1=c2 } + { ~c1=c2 }.
Proof. 
Intros; Decide Equality c1 c2.
Save.

Definition eq_blue :=  [c](bool_of_sumbool (eq_color_dec c blue)).
Definition eq_white := [c](bool_of_sumbool (eq_color_dec c white)).

Definition monochrome [t:(array color); i,j:Z; c:color] : Prop :=
  (k:Z)`i <= k < j` -> #t[k]=c.

(* Why obligation from file "flag.mlw", characters 721-726 *)
Lemma dutch_flag_po_1 : 
  (t: (array color))
  (Pre14: `(array_length t) = N`)
  (result: Z)
  (Post13: result = `0`)
  (result0: Z)
  (Post12: result0 = `0`)
  (result1: Z)
  (Post11: result1 = N)
  (Variant1: Z)
  (b0: Z)
  (i0: Z)
  (r0: Z)
  (t0: (array color))
  (Pre13: Variant1 = `r0 - i0`)
  (Pre12: (`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r0` /\ `r0 <= N`) /\
          (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 i0 white) /\
          (monochrome t0 r0 N red) /\ `(array_length t0) = N`)
  (Test6: `i0 < r0`)
  `0 <= i0` /\ `i0 < (array_length t0)`.
Proof.
Intuition.
Save.

(* Why obligation from file "flag.mlw", characters 754-759 *)
Lemma dutch_flag_po_2 : 
  (t: (array color))
  (Pre14: `(array_length t) = N`)
  (result: Z)
  (Post13: result = `0`)
  (result0: Z)
  (Post12: result0 = `0`)
  (result1: Z)
  (Post11: result1 = N)
  (Variant1: Z)
  (b0: Z)
  (i0: Z)
  (r0: Z)
  (t0: (array color))
  (Pre13: Variant1 = `r0 - i0`)
  (Pre12: (`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r0` /\ `r0 <= N`) /\
          (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 i0 white) /\
          (monochrome t0 r0 N red) /\ `(array_length t0) = N`)
  (Test6: `i0 < r0`)
  (Test5: (access t0 i0) = blue)
  `0 <= b0` /\ `b0 < (array_length t0)`.
Proof.
Intuition.
Save.

(* Why obligation from file "flag.mlw", characters 778-783 *)
Lemma dutch_flag_po_3 : 
  (t: (array color))
  (Pre14: `(array_length t) = N`)
  (result: Z)
  (Post13: result = `0`)
  (result0: Z)
  (Post12: result0 = `0`)
  (result1: Z)
  (Post11: result1 = N)
  (Variant1: Z)
  (b0: Z)
  (i0: Z)
  (r0: Z)
  (t0: (array color))
  (Pre13: Variant1 = `r0 - i0`)
  (Pre12: (`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r0` /\ `r0 <= N`) /\
          (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 i0 white) /\
          (monochrome t0 r0 N red) /\ `(array_length t0) = N`)
  (Test6: `i0 < r0`)
  (Test5: (access t0 i0) = blue)
  (Pre11: `0 <= b0` /\ `b0 < (array_length t0)`)
  (u: color)
  (Post3: u = (access t0 b0))
  (Pre9: `0 <= b0` /\ `b0 < (array_length t0)`)
  `0 <= i0` /\ `i0 < (array_length t0)`.
Proof.
Intuition.
Save.

(* Why obligation from file "flag.mlw", characters 785-795 *)
Lemma dutch_flag_po_4 : 
  (t: (array color))
  (Pre14: `(array_length t) = N`)
  (result: Z)
  (Post13: result = `0`)
  (result0: Z)
  (Post12: result0 = `0`)
  (result1: Z)
  (Post11: result1 = N)
  (Variant1: Z)
  (b0: Z)
  (i0: Z)
  (r0: Z)
  (t0: (array color))
  (Pre13: Variant1 = `r0 - i0`)
  (Pre12: (`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r0` /\ `r0 <= N`) /\
          (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 i0 white) /\
          (monochrome t0 r0 N red) /\ `(array_length t0) = N`)
  (Test6: `i0 < r0`)
  (Test5: (access t0 i0) = blue)
  (Pre11: `0 <= b0` /\ `b0 < (array_length t0)`)
  (u: color)
  (Post3: u = (access t0 b0))
  (Pre9: `0 <= b0` /\ `b0 < (array_length t0)`)
  (Pre10: `0 <= i0` /\ `i0 < (array_length t0)`)
  (t1: (array color))
  (Post1: t1 = (store t0 b0 (access t0 i0)))
  `0 <= i0` /\ `i0 < (array_length t1)`.
Proof.
Intuition.
ArraySubst t1.
Save.

(* Why obligation from file "flag.mlw", characters 763-799 *)
Lemma dutch_flag_po_5 : 
  (t: (array color))
  (Pre14: `(array_length t) = N`)
  (result: Z)
  (Post13: result = `0`)
  (result0: Z)
  (Post12: result0 = `0`)
  (result1: Z)
  (Post11: result1 = N)
  (Variant1: Z)
  (b0: Z)
  (i0: Z)
  (r0: Z)
  (t0: (array color))
  (Pre13: Variant1 = `r0 - i0`)
  (Pre12: (`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r0` /\ `r0 <= N`) /\
          (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 i0 white) /\
          (monochrome t0 r0 N red) /\ `(array_length t0) = N`)
  (Test6: `i0 < r0`)
  (Test5: (access t0 i0) = blue)
  (Pre11: `0 <= b0` /\ `b0 < (array_length t0)`)
  (u: color)
  (Post3: u = (access t0 b0))
  (Pre9: `0 <= b0` /\ `b0 < (array_length t0)`)
  (Pre10: `0 <= i0` /\ `i0 < (array_length t0)`)
  (t1: (array color))
  (Post1: t1 = (store t0 b0 (access t0 i0)))
  (Pre8: `0 <= i0` /\ `i0 < (array_length t1)`)
  (t2: (array color))
  (Post2: t2 = (store t1 i0 u))
  ((b:Z)
   (b = `b0 + 1` ->
    ((i:Z)
     (i = `i0 + 1` -> ((`0 <= b` /\ `b <= i`) /\ (`i <= r0` /\ `r0 <= N`) /\
      (monochrome t2 `0` b blue) /\ (monochrome t2 b i white) /\
      (monochrome t2 r0 N red) /\ `(array_length t2) = N`) /\
      (Zwf `0` `r0 - i` `r0 - i0`))))).
Proof.
Unfold monochrome Zwf; Intuition Try Omega.
Assert h:`k < b0` \/ k=b0. Omega. Intuition.
Subst t2; AccessOther.
Subst t1; AccessOther.
Auto.
Subst t1; Simpl; Auto.
Assert h:`b0 = i0` \/ `b0 < i0`. Omega. Intuition.
Subst k t2 b0.
AccessSame.
Subst u; Assumption.
Subst t2; AccessOther.
Subst k; AccessSame.
Assumption.
Subst t1; Simpl; Auto.
Assert h:`k = i0` \/ `k < i0`. Omega. Intuition.
Subst t2 k; AccessSame.
Subst u; Apply H5; Omega.
Subst t2; AccessOther.
AccessOther.
Apply H5; Omega.
Subst t1; Simpl; Auto.
Subst t2; AccessOther.
AccessOther.
Apply H7; Omega.
Subst t1; Simpl; Auto.
Subst t2; Simpl; Auto.
Save.

(* Why obligation from file "flag.mlw", characters 867-872 *)
Lemma dutch_flag_po_6 : 
  (t: (array color))
  (Pre14: `(array_length t) = N`)
  (result: Z)
  (Post13: result = `0`)
  (result0: Z)
  (Post12: result0 = `0`)
  (result1: Z)
  (Post11: result1 = N)
  (Variant1: Z)
  (b0: Z)
  (i0: Z)
  (r0: Z)
  (t0: (array color))
  (Pre13: Variant1 = `r0 - i0`)
  (Pre12: (`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r0` /\ `r0 <= N`) /\
          (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 i0 white) /\
          (monochrome t0 r0 N red) /\ `(array_length t0) = N`)
  (Test6: `i0 < r0`)
  (Test4: ~((access t0 i0) = blue))
  `0 <= i0` /\ `i0 < (array_length t0)`.
Proof.
Intuition.
Save.

(* Why obligation from file "flag.mlw", characters 886-897 *)
Lemma dutch_flag_po_7 : 
  (t: (array color))
  (Pre14: `(array_length t) = N`)
  (result: Z)
  (Post13: result = `0`)
  (result0: Z)
  (Post12: result0 = `0`)
  (result1: Z)
  (Post11: result1 = N)
  (Variant1: Z)
  (b0: Z)
  (i0: Z)
  (r0: Z)
  (t0: (array color))
  (Pre13: Variant1 = `r0 - i0`)
  (Pre12: (`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r0` /\ `r0 <= N`) /\
          (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 i0 white) /\
          (monochrome t0 r0 N red) /\ `(array_length t0) = N`)
  (Test6: `i0 < r0`)
  (Test4: ~((access t0 i0) = blue))
  (Test3: (access t0 i0) = white)
  (i1: Z)
  (Post6: i1 = `i0 + 1`)
  ((`0 <= b0` /\ `b0 <= i1`) /\ (`i1 <= r0` /\ `r0 <= N`) /\
  (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 i1 white) /\
  (monochrome t0 r0 N red) /\ `(array_length t0) = N`) /\
  (Zwf `0` `r0 - i1` `r0 - i0`).
Proof.
Unfold monochrome Zwf; Intuition Try Omega.
Assert h:`k<i0` \/ k=i0. Omega. Intuition.
Subst k; Assumption.
Save.

(* Why obligation from file "flag.mlw", characters 949-954 *)
Lemma dutch_flag_po_8 : 
  (t: (array color))
  (Pre14: `(array_length t) = N`)
  (result: Z)
  (Post13: result = `0`)
  (result0: Z)
  (Post12: result0 = `0`)
  (result1: Z)
  (Post11: result1 = N)
  (Variant1: Z)
  (b0: Z)
  (i0: Z)
  (r0: Z)
  (t0: (array color))
  (Pre13: Variant1 = `r0 - i0`)
  (Pre12: (`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r0` /\ `r0 <= N`) /\
          (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 i0 white) /\
          (monochrome t0 r0 N red) /\ `(array_length t0) = N`)
  (Test6: `i0 < r0`)
  (Test4: ~((access t0 i0) = blue))
  (Test2: ~((access t0 i0) = white))
  (r1: Z)
  (Post7: r1 = `r0 - 1`)
  `0 <= r1` /\ `r1 < (array_length t0)`.
Proof.
Intuition.
Save.

(* Why obligation from file "flag.mlw", characters 973-978 *)
Lemma dutch_flag_po_9 : 
  (t: (array color))
  (Pre14: `(array_length t) = N`)
  (result: Z)
  (Post13: result = `0`)
  (result0: Z)
  (Post12: result0 = `0`)
  (result1: Z)
  (Post11: result1 = N)
  (Variant1: Z)
  (b0: Z)
  (i0: Z)
  (r0: Z)
  (t0: (array color))
  (Pre13: Variant1 = `r0 - i0`)
  (Pre12: (`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r0` /\ `r0 <= N`) /\
          (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 i0 white) /\
          (monochrome t0 r0 N red) /\ `(array_length t0) = N`)
  (Test6: `i0 < r0`)
  (Test4: ~((access t0 i0) = blue))
  (Test2: ~((access t0 i0) = white))
  (r1: Z)
  (Post7: r1 = `r0 - 1`)
  (Pre7: `0 <= r1` /\ `r1 < (array_length t0)`)
  (u: color)
  (Post10: u = (access t0 r1))
  (Pre5: `0 <= r1` /\ `r1 < (array_length t0)`)
  `0 <= i0` /\ `i0 < (array_length t0)`.
Proof.
Unfold monochrome; Intuition.
Save.

(* Why obligation from file "flag.mlw", characters 980-990 *)
Lemma dutch_flag_po_10 : 
  (t: (array color))
  (Pre14: `(array_length t) = N`)
  (result: Z)
  (Post13: result = `0`)
  (result0: Z)
  (Post12: result0 = `0`)
  (result1: Z)
  (Post11: result1 = N)
  (Variant1: Z)
  (b0: Z)
  (i0: Z)
  (r0: Z)
  (t0: (array color))
  (Pre13: Variant1 = `r0 - i0`)
  (Pre12: (`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r0` /\ `r0 <= N`) /\
          (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 i0 white) /\
          (monochrome t0 r0 N red) /\ `(array_length t0) = N`)
  (Test6: `i0 < r0`)
  (Test4: ~((access t0 i0) = blue))
  (Test2: ~((access t0 i0) = white))
  (r1: Z)
  (Post7: r1 = `r0 - 1`)
  (Pre7: `0 <= r1` /\ `r1 < (array_length t0)`)
  (u: color)
  (Post10: u = (access t0 r1))
  (Pre5: `0 <= r1` /\ `r1 < (array_length t0)`)
  (Pre6: `0 <= i0` /\ `i0 < (array_length t0)`)
  (t1: (array color))
  (Post8: t1 = (store t0 r1 (access t0 i0)))
  `0 <= i0` /\ `i0 < (array_length t1)`.
Proof.
Intuition
  (Try Subst result; Try Subst result0; Try Subst result1;
  Try Omega).
ArraySubst t1.
Save.

(* Why obligation from file "flag.mlw", characters 958-994 *)
Lemma dutch_flag_po_11 : 
  (t: (array color))
  (Pre14: `(array_length t) = N`)
  (result: Z)
  (Post13: result = `0`)
  (result0: Z)
  (Post12: result0 = `0`)
  (result1: Z)
  (Post11: result1 = N)
  (Variant1: Z)
  (b0: Z)
  (i0: Z)
  (r0: Z)
  (t0: (array color))
  (Pre13: Variant1 = `r0 - i0`)
  (Pre12: (`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r0` /\ `r0 <= N`) /\
          (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 i0 white) /\
          (monochrome t0 r0 N red) /\ `(array_length t0) = N`)
  (Test6: `i0 < r0`)
  (Test4: ~((access t0 i0) = blue))
  (Test2: ~((access t0 i0) = white))
  (r1: Z)
  (Post7: r1 = `r0 - 1`)
  (Pre7: `0 <= r1` /\ `r1 < (array_length t0)`)
  (u: color)
  (Post10: u = (access t0 r1))
  (Pre5: `0 <= r1` /\ `r1 < (array_length t0)`)
  (Pre6: `0 <= i0` /\ `i0 < (array_length t0)`)
  (t1: (array color))
  (Post8: t1 = (store t0 r1 (access t0 i0)))
  (Pre4: `0 <= i0` /\ `i0 < (array_length t1)`)
  (t2: (array color))
  (Post9: t2 = (store t1 i0 u))
  ((`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r1` /\ `r1 <= N`) /\
  (monochrome t2 `0` b0 blue) /\ (monochrome t2 b0 i0 white) /\
  (monochrome t2 r1 N red) /\ `(array_length t2) = N`) /\
  (Zwf `0` `r1 - i0` `r0 - i0`).
Proof.
Unfold monochrome Zwf; Intuition Try Omega.
Subst t2 t1; Do 2 AccessOther.
Apply H; Omega.
Subst t2 t1; Do 2 AccessOther. 
Apply H3; Omega.
Assert h:`k = r1` \/ `r1 < k`. Omega. Intuition.
Assert h':`k = i0` \/ `i0 < k`. Omega. Intuition.
Generalize H15; Clear H15; 
  Subst t2 t1 k; AccessSame; Intro H15.
Subst u; Rewrite <- H15; Subst r1.
Generalize Test4; Generalize Test2 ; Case (access t0 i0); Tauto.
Subst t2 t1 k; AccessOther.
Generalize Test4; Generalize Test2 ; Case (access t0 i0); Tauto.
Subst t2 t1; Do 2 AccessOther.
Apply H5; Omega.
Subst t2 t1; Simpl; Trivial.
Save.

(* Why obligation from file "flag.mlw", characters 473-1103 *)
Lemma dutch_flag_po_12 : 
  (t: (array color))
  (Pre14: `(array_length t) = N`)
  (result: Z)
  (Post13: result = `0`)
  (result0: Z)
  (Post12: result0 = `0`)
  (result1: Z)
  (Post11: result1 = N)
  (Variant1: Z)
  (b0: Z)
  (i0: Z)
  (r0: Z)
  (t0: (array color))
  (Pre13: Variant1 = `r0 - i0`)
  (Pre12: (`0 <= b0` /\ `b0 <= i0`) /\ (`i0 <= r0` /\ `r0 <= N`) /\
          (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 i0 white) /\
          (monochrome t0 r0 N red) /\ `(array_length t0) = N`)
  (Test1: `i0 >= r0`)
  (monochrome t0 `0` b0 blue) /\ (monochrome t0 b0 r0 white) /\
  (monochrome t0 r0 N red).
Proof.
Intuition.
Replace r0 with i0. Trivial. Omega. 
Save.

(* Why obligation from file "flag.mlw", characters 513-680 *)
Lemma dutch_flag_po_13 : 
  (t: (array color))
  (Pre14: `(array_length t) = N`)
  (result: Z)
  (Post13: result = `0`)
  (result0: Z)
  (Post12: result0 = `0`)
  (result1: Z)
  (Post11: result1 = N)
  (`0 <= result` /\ `result <= result0`) /\ (`result0 <= result1` /\
  `result1 <= N`) /\ (monochrome t `0` result blue) /\
  (monochrome t result result0 white) /\ (monochrome t result1 N red) /\
  `(array_length t) = N`.
Proof.
Intuition.
Subst result0 result1; Exact N_non_negative.
Unfold monochrome; Intros; Absurd `0<0`; Omega.
Unfold monochrome; Intros; Absurd `0<0`; Omega.
Unfold monochrome; Intros; Absurd `N<N`; Omega.
Save.


