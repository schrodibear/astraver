
UNIT: TYPE;
tt: UNIT;
array_length_INT: [ARRAY INT OF INT -> INT]; %% should be polymorphic
sqrt_real: [REAL -> REAL];
int_of_real: [REAL -> INT];
mod_int: [[INT, INT] -> INT];

l: INT;
ASSERT 0<l;

%%%% DO NOT EDIT BELOW THIS LINE

%% Why logic sorted_array
sorted_array: [[ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic exchange
exchange: [[ARRAY INT OF INT, ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic sub_permut
sub_permut: [[INT, INT, ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic permut
permut: [[ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic array_le
array_le: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_ge
array_ge: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_length
array_length_INT: [ARRAY INT OF INT -> INT];

%% Why logic store
store_INT: [[ARRAY INT OF INT, INT, INT] -> UNIT];

%% Why axiom array_length_store
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (v:INT):
       (array_length_INT((t WITH [i] := v)) = array_length_INT(t)))));

%% Why logic access
access_INT: [[ARRAY INT OF INT, INT] -> INT];

%% Why axiom exchange_def
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (exchange(t1, t2, i, j) <=>
       ((array_length_INT(t1) = array_length_INT(t2)) AND
       ((t1[i] = t2[j]) AND
       ((t2[i] = t1[j]) AND
       (FORALL (k:INT): (((k /= i) AND (k /= j)) => (t1[k] = t2[k])))))))))));

%% Why axiom permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT): permut(t, t));

%% Why axiom permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT): (permut(t1, t2) => permut(t2, t1))));

%% Why axiom permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       ((permut(t1, t2) AND permut(t2, t3)) => permut(t1, t3)))));

%% Why axiom permut_exchange
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT): permut(t, ((t WITH [i] := t[j]) WITH [j] := t[i])))));

%% Why axiom permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (permut(t1, t2) => (array_length_INT(t1) = array_length_INT(t2)))));

%% Why axiom sub_permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT): (FORALL (d:INT): sub_permut(g, d, t, t))));

%% Why axiom sub_permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) => sub_permut(g, d, t2, t1))))));

%% Why axiom sub_permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (sub_permut(g, d, t2, t3) => sub_permut(g, d, t1, t3))))))));

%% Why axiom sub_permut_exchange_1
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND ((i <= d) AND ((g <= j) AND (j <= d)))) =>
       sub_permut(g, d, t, ((t WITH [i] := t[j]) WITH [j] := t[i]))))))));

%% Why axiom sub_permut_exchange_2
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND
        ((i <= d) AND ((g <= j) AND ((j <= d) AND exchange(t1, t2, i, j))))) =>
       sub_permut(g, d, t1, t2))))))));

%% Why axiom sub_permut_permut
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT): (sub_permut(g, d, t1, t2) => permut(t1, t2))))));

%% Why axiom sub_permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (array_length_INT(t1) = array_length_INT(t2)))))));

%% Why axiom sorted_array_def
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (sorted_array(t, i, j) <=>
       (FORALL (k:INT): (((i <= k) AND (k < j)) => (t[k] <= t[(k + 1)])))))));

%% pgm_max_end_po_1, Why obligation from file "max.mlw", characters 565-578
QUERY (FORALL (a:(ARRAY INT OF INT)):
      ((array_length_INT(a) = l) =>
      (FORALL (x0:INT):
      ((x0 = 0) =>
      (FORALL (y0:INT):
      ((y0 = 1) =>
      (FORALL (Variant1:INT):
      (FORALL (x1:INT):
      (FORALL (y1:INT):
      ((Variant1 = (l - y1)) =>
      ((((0 <= y1) AND (y1 <= l)) AND
       (((0 <= x1) AND (x1 < l)) AND
       (FORALL (k:INT): (((0 <= k) AND (k < y1)) => (a[k] <= a[x1]))))) =>
      ((y1 < l) => ((0 <= y1) AND (y1 < array_length_INT(a)))))))))))))));

%% pgm_max_end_po_2, Why obligation from file "max.mlw", characters 565-578
QUERY (FORALL (a:(ARRAY INT OF INT)):
      ((array_length_INT(a) = l) =>
      (FORALL (x0:INT):
      ((x0 = 0) =>
      (FORALL (y0:INT):
      ((y0 = 1) =>
      (FORALL (Variant1:INT):
      (FORALL (x1:INT):
      (FORALL (y1:INT):
      ((Variant1 = (l - y1)) =>
      ((((0 <= y1) AND (y1 <= l)) AND
       (((0 <= x1) AND (x1 < l)) AND
       (FORALL (k:INT): (((0 <= k) AND (k < y1)) => (a[k] <= a[x1]))))) =>
      ((y1 < l) =>
      (((0 <= y1) AND (y1 < array_length_INT(a))) =>
      ((0 <= x1) AND (x1 < array_length_INT(a))))))))))))))));

%% pgm_max_end_po_3, Why obligation from file "max.mlw", characters 584-591
QUERY (FORALL (a:(ARRAY INT OF INT)):
      ((array_length_INT(a) = l) =>
      (FORALL (x0:INT):
      ((x0 = 0) =>
      (FORALL (y0:INT):
      ((y0 = 1) =>
      (FORALL (Variant1:INT):
      (FORALL (x1:INT):
      (FORALL (y1:INT):
      ((Variant1 = (l - y1)) =>
      ((((0 <= y1) AND (y1 <= l)) AND
       (((0 <= x1) AND (x1 < l)) AND
       (FORALL (k:INT): (((0 <= k) AND (k < y1)) => (a[k] <= a[x1]))))) =>
      ((y1 < l) =>
      (((0 <= y1) AND (y1 < array_length_INT(a))) =>
      (((0 <= x1) AND (x1 < array_length_INT(a))) =>
      ((a[y1] > a[x1]) =>
      (FORALL (x2:INT):
      ((x2 = y1) =>
      (FORALL (y:INT):
      ((y = (y1 + 1)) =>
      ((((0 <= y) AND (y <= l)) AND
       (((0 <= x2) AND (x2 < l)) AND
       (FORALL (k:INT): (((0 <= k) AND (k < y)) => (a[k] <= a[x2]))))) AND
      ((0 <= (l - y1)) AND ((l - y) < (l - y1)))))))))))))))))))))));

%% pgm_max_end_po_4, Why obligation from file "max.mlw", characters 591-591
QUERY (FORALL (a:(ARRAY INT OF INT)):
      ((array_length_INT(a) = l) =>
      (FORALL (x0:INT):
      ((x0 = 0) =>
      (FORALL (y0:INT):
      ((y0 = 1) =>
      (FORALL (Variant1:INT):
      (FORALL (x1:INT):
      (FORALL (y1:INT):
      ((Variant1 = (l - y1)) =>
      ((((0 <= y1) AND (y1 <= l)) AND
       (((0 <= x1) AND (x1 < l)) AND
       (FORALL (k:INT): (((0 <= k) AND (k < y1)) => (a[k] <= a[x1]))))) =>
      ((y1 < l) =>
      (((0 <= y1) AND (y1 < array_length_INT(a))) =>
      (((0 <= x1) AND (x1 < array_length_INT(a))) =>
      ((a[y1] <= a[x1]) =>
      (FORALL (result3:UNIT):
      ((result3 = tt) =>
      (FORALL (y:INT):
      ((y = (y1 + 1)) =>
      ((((0 <= y) AND (y <= l)) AND
       (((0 <= x1) AND (x1 < l)) AND
       (FORALL (k:INT): (((0 <= k) AND (k < y)) => (a[k] <= a[x1]))))) AND
      ((0 <= (l - y1)) AND ((l - y) < (l - y1)))))))))))))))))))))));

%% pgm_max_end_po_5, Why obligation from file "max.mlw", characters 415-620
QUERY (FORALL (a:(ARRAY INT OF INT)):
      ((array_length_INT(a) = l) =>
      (FORALL (x0:INT):
      ((x0 = 0) =>
      (FORALL (y0:INT):
      ((y0 = 1) =>
      (FORALL (Variant1:INT):
      (FORALL (x1:INT):
      (FORALL (y1:INT):
      ((Variant1 = (l - y1)) =>
      ((((0 <= y1) AND (y1 <= l)) AND
       (((0 <= x1) AND (x1 < l)) AND
       (FORALL (k:INT): (((0 <= k) AND (k < y1)) => (a[k] <= a[x1]))))) =>
      ((y1 >= l) =>
      ((FORALL (a0:ARRAY INT OF INT):
       (((array_length_INT(a0) = l) AND
        ((a0[x1] = a[(l - 1)]) AND
        ((a0[(l - 1)] = a[x1]) AND
        (FORALL (k:INT):
        (((0 <= k) AND (k < l)) =>
        ((k /= x1) => ((k /= (l - 1)) => (a0[k] = a[k])))))))) =>
       ((FORALL (k:INT):
        (((0 <= k) AND (k < (l - 1))) => ((k /= x1) => (a0[k] = a[k])))) AND
       ((a0[x1] = a[(l - 1)]) AND
       ((a0[(l - 1)] = a[x1]) AND
       (FORALL (k:INT):
       (((0 <= k) AND (k < (l - 1))) => (a0[k] <= a0[(l - 1)])))))))) AND
      (array_length_INT(a) = l))))))))))))));

%% pgm_max_end_po_6, Why obligation from file "max.mlw", characters 449-533
QUERY (FORALL (a:(ARRAY INT OF INT)):
      ((array_length_INT(a) = l) =>
      (FORALL (x0:INT):
      ((x0 = 0) =>
      (FORALL (y0:INT):
      ((y0 = 1) =>
      (((0 <= y0) AND (y0 <= l)) AND
      (((0 <= x0) AND (x0 < l)) AND
      (FORALL (k:INT): (((0 <= k) AND (k < y0)) => (a[k] <= a[x0])))))))))));

