
UNIT: TYPE;
tt: UNIT;
array_length_INT: [ARRAY INT OF INT -> INT]; %% should be polymorphic
sqrt_real: [REAL -> REAL];
int_of_real: [REAL -> INT];
mod_int: [[INT, INT] -> INT];

Zpower: [[INT, INT] -> INT];
ASSERT FORALL (x,y,z:INT): Zpower(x,y+z) = Zpower(x,y) * Zpower(x,z);
ASSERT FORALL (x:INT): Zpower(x,0) = 1;

Zeven: [INT -> BOOLEAN];
ASSERT FORALL (x:INT): Zeven(x) <=> EXISTS (y:INT): x=2*y;
Zodd: [INT -> BOOLEAN];
ASSERT FORALL (x:INT): Zodd(x) <=> EXISTS (y:INT): x=2*y+1;

div2: [INT -> INT];
ASSERT FORALL (x:INT): x >= 0 => div2(x) >= 0;
ASSERT FORALL (x:INT): x > 0 => div2(x) < x;

%%%% DO NOT EDIT BELOW THIS LINE

%% Why logic sorted_array
sorted_array: [[ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic exchange
exchange: [[ARRAY INT OF INT, ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic sub_permut
sub_permut: [[INT, INT, ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic permut
permut: [[ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic array_le
array_le: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_ge
array_ge: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_length
array_length_INT: [ARRAY INT OF INT -> INT];

%% Why logic store
store_INT: [[ARRAY INT OF INT, INT, INT] -> UNIT];

%% Why axiom array_length_store
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (v:INT):
       (array_length_INT((t WITH [i] := v)) = array_length_INT(t)))));

%% Why logic access
access_INT: [[ARRAY INT OF INT, INT] -> INT];

%% Why axiom exchange_def
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (exchange(t1, t2, i, j) <=>
       ((array_length_INT(t1) = array_length_INT(t2)) AND
       ((t1[i] = t2[j]) AND
       ((t2[i] = t1[j]) AND
       (FORALL (k:INT): (((k /= i) AND (k /= j)) => (t1[k] = t2[k])))))))))));

%% Why axiom permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT): permut(t, t));

%% Why axiom permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT): (permut(t1, t2) => permut(t2, t1))));

%% Why axiom permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       ((permut(t1, t2) AND permut(t2, t3)) => permut(t1, t3)))));

%% Why axiom permut_exchange
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT): permut(t, ((t WITH [i] := t[j]) WITH [j] := t[i])))));

%% Why axiom permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (permut(t1, t2) => (array_length_INT(t1) = array_length_INT(t2)))));

%% Why axiom sub_permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT): (FORALL (d:INT): sub_permut(g, d, t, t))));

%% Why axiom sub_permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) => sub_permut(g, d, t2, t1))))));

%% Why axiom sub_permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (sub_permut(g, d, t2, t3) => sub_permut(g, d, t1, t3))))))));

%% Why axiom sub_permut_exchange_1
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND ((i <= d) AND ((g <= j) AND (j <= d)))) =>
       sub_permut(g, d, t, ((t WITH [i] := t[j]) WITH [j] := t[i]))))))));

%% Why axiom sub_permut_exchange_2
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND
        ((i <= d) AND ((g <= j) AND ((j <= d) AND exchange(t1, t2, i, j))))) =>
       sub_permut(g, d, t1, t2))))))));

%% Why axiom sub_permut_permut
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT): (sub_permut(g, d, t1, t2) => permut(t1, t2))))));

%% Why axiom sub_permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (array_length_INT(t1) = array_length_INT(t2)))))));

%% Why axiom sorted_array_def
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (sorted_array(t, i, j) <=>
       (FORALL (k:INT): (((i <= k) AND (k < j)) => (t[k] <= t[(k + 1)])))))));

%% Why parameter x
x: INT;

%% power1_po_1, Why obligation from file "power.mlw", characters 553-565
QUERY (FORALL (n:INT):
      ((n >= 0) =>
      (FORALL (m0:INT):
      ((m0 = x) =>
      (FORALL (y0:INT):
      ((y0 = 1) =>
      (FORALL (Variant1:INT):
      (FORALL (m1:INT):
      (FORALL (n0:INT):
      (FORALL (y1:INT):
      ((Variant1 = n0) =>
      (((Zpower(x, n) = (y1 * Zpower(m1, n0))) AND (n0 >= 0)) =>
      ((n0 > 0) =>
      (Zodd(n0) =>
      (FORALL (y2:INT):
      ((y2 = (y1 * m1)) =>
      (FORALL (m:INT):
      ((m = (m1 * m1)) =>
      (FORALL (n1:INT):
      ((n1 = div2(n0)) =>
      (((Zpower(x, n) = (y2 * Zpower(m, n1))) AND (n1 >= 0)) AND
      ((0 <= n0) AND (n1 < n0)))))))))))))))))))))));

%% power1_po_2, Why obligation from file "power.mlw", characters 565-565
QUERY (FORALL (n:INT):
      ((n >= 0) =>
      (FORALL (m0:INT):
      ((m0 = x) =>
      (FORALL (y0:INT):
      ((y0 = 1) =>
      (FORALL (Variant1:INT):
      (FORALL (m1:INT):
      (FORALL (n0:INT):
      (FORALL (y1:INT):
      ((Variant1 = n0) =>
      (((Zpower(x, n) = (y1 * Zpower(m1, n0))) AND (n0 >= 0)) =>
      ((n0 > 0) =>
      (Zeven(n0) =>
      (FORALL (result3:UNIT):
      ((result3 = tt) =>
      (FORALL (m:INT):
      ((m = (m1 * m1)) =>
      (FORALL (n1:INT):
      ((n1 = div2(n0)) =>
      (((Zpower(x, n) = (y1 * Zpower(m, n1))) AND (n1 >= 0)) AND
      ((0 <= n0) AND (n1 < n0)))))))))))))))))))))));

%% power1_po_3, Why obligation from file "power.mlw", characters 427-616
QUERY (FORALL (n:INT):
      ((n >= 0) =>
      (FORALL (m0:INT):
      ((m0 = x) =>
      (FORALL (y0:INT):
      ((y0 = 1) =>
      (FORALL (Variant1:INT):
      (FORALL (m1:INT):
      (FORALL (n0:INT):
      (FORALL (y1:INT):
      ((Variant1 = n0) =>
      (((Zpower(x, n) = (y1 * Zpower(m1, n0))) AND (n0 >= 0)) =>
      ((n0 <= 0) => (y1 = Zpower(x, n)))))))))))))));

%% power1_po_4, Why obligation from file "power.mlw", characters 461-506
QUERY (FORALL (n:INT):
      ((n >= 0) =>
      (FORALL (m0:INT):
      ((m0 = x) =>
      (FORALL (y0:INT):
      ((y0 = 1) => ((Zpower(x, n) = (y0 * Zpower(m0, n))) AND (n >= 0))))))));

