
;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom eq_to_eq_c
 (FORALL (x0)
 (FORALL (y0) (IFF (EQ (c_sort c_int x0) (c_sort c_int y0)) (EQ x0 y0)))))

(BG_PUSH
 ;; Why axiom add_int_to_add_int_c
 (FORALL (x1_0)
 (FORALL (x2_0) (PATS (add_int_c (c_sort c_int x1_0) (c_sort c_int x2_0)))
 (EQ (add_int_c (c_sort c_int x1_0) (c_sort c_int x2_0))
 (c_sort c_int (+ x1_0 x2_0))))))

(BG_PUSH
 ;; Why axiom sub_int_to_sub_int_c
 (FORALL (x1_0)
 (FORALL (x2_0) (PATS (sub_int_c (c_sort c_int x1_0) (c_sort c_int x2_0)))
 (EQ (sub_int_c (c_sort c_int x1_0) (c_sort c_int x2_0))
 (c_sort c_int (- x1_0 x2_0))))))

(BG_PUSH
 ;; Why axiom lt_int_to_lt_int_c
 (FORALL (x1_0)
 (FORALL (x2_0) (PATS (lt_int_c (c_sort c_int x1_0) (c_sort c_int x2_0)))
 (IFF (EQ (lt_int_c (c_sort c_int x1_0) (c_sort c_int x2_0)) |@true|)
 (< x1_0 x2_0)))))

(BG_PUSH
 ;; Why axiom le_int_to_le_int_c
 (FORALL (x1_0)
 (FORALL (x2_0) (PATS (le_int_c (c_sort c_int x1_0) (c_sort c_int x2_0)))
 (IFF (EQ (le_int_c (c_sort c_int x1_0) (c_sort c_int x2_0)) |@true|)
 (<= x1_0 x2_0)))))

(BG_PUSH
 ;; Why axiom ge_int_to_ge_int_c
 (FORALL (x1_0)
 (FORALL (x2_0) (PATS (ge_int_c (c_sort c_int x1_0) (c_sort c_int x2_0)))
 (IFF (EQ (ge_int_c (c_sort c_int x1_0) (c_sort c_int x2_0)) |@true|)
 (>= x1_0 x2_0)))))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x)
 (FORALL (y)
 (IFF
 (EQ (c_sort c_bool (lt_int_bool (c_sort c_int x) (c_sort c_int y)))
 (c_sort c_bool |@true|))
 (EQ (lt_int_c (c_sort c_int x) (c_sort c_int y)) |@true|)))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x)
 (FORALL (y)
 (IFF
 (EQ (c_sort c_bool (le_int_bool (c_sort c_int x) (c_sort c_int y)))
 (c_sort c_bool |@true|))
 (EQ (le_int_c (c_sort c_int x) (c_sort c_int y)) |@true|)))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x)
 (FORALL (y)
 (IFF
 (EQ (c_sort c_bool (ge_int_bool (c_sort c_int x) (c_sort c_int y)))
 (c_sort c_bool |@true|))
 (EQ (ge_int_c (c_sort c_int x) (c_sort c_int y)) |@true|)))))

(BG_PUSH
 ;; Why axiom access_update
 (FORALL (t)
 (FORALL (i)
 (FORALL (v)
 (EQ (c_sort c_int
     (access
     (c_sort (farray c_int)
     (update (c_sort (farray c_int) t) (c_sort c_int i) (c_sort c_int v)))
     (c_sort c_int i)))
 (c_sort c_int v))))))

(BG_PUSH
 ;; Why axiom access_update_eq
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (FORALL (v)
 (IMPLIES (EQ (c_sort c_int i) (c_sort c_int j))
 (EQ (c_sort c_int
     (access
     (c_sort (farray c_int)
     (update (c_sort (farray c_int) t) (c_sort c_int i) (c_sort c_int v)))
     (c_sort c_int j)))
 (c_sort c_int v)))))))

 (FORALL (i)
 (FORALL (j)
 (IMPLIES (EQ (c_sort c_int i) (c_sort c_int j))
 (FORALL (t)
 (FORALL (v)
 (EQ (c_sort c_int
     (access
     (c_sort (farray c_int)
     (update (c_sort (farray c_int) t) (c_sort c_int i) (c_sort c_int v)))
     (c_sort c_int j)))
 (c_sort c_int v))))))))

(BG_PUSH
 ;; Why axiom access_update_neq
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (FORALL (v)
 (IMPLIES (NEQ (c_sort c_int i) (c_sort c_int j))
 (EQ (c_sort c_int
     (access
     (c_sort (farray c_int)
     (update (c_sort (farray c_int) t) (c_sort c_int i) (c_sort c_int v)))
     (c_sort c_int j)))
 (c_sort c_int (access (c_sort (farray c_int) t) (c_sort c_int j)))))))))

 (FORALL (i)
 (FORALL (j)
 (IMPLIES (NEQ (c_sort c_int i) (c_sort c_int j))
 (FORALL (t)
 (FORALL (v)
 (EQ (c_sort c_int
     (access
     (c_sort (farray c_int)
     (update (c_sort (farray c_int) t) (c_sort c_int i) (c_sort c_int v)))
     (c_sort c_int j)))
 (c_sort c_int (access (c_sort (farray c_int) t) (c_sort c_int j))))))))))

(BG_PUSH
 ;; Why axiom access_update
 (FORALL (t) (FORALL (i) (FORALL (v) (EQ (access (update t i v) i) v)))))

(BG_PUSH
 ;; Why axiom access_update_eq
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (FORALL (v) (IMPLIES (EQ i j) (EQ (access (update t i v) j) v))))))

 (FORALL (i)
 (FORALL (j)
 (IMPLIES (EQ i j)
 (FORALL (t) (FORALL (v) (EQ (access (update t i v) j) v)))))))

(BG_PUSH
 ;; Why axiom access_update_neq
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (FORALL (v) (IMPLIES (NEQ i j) (EQ (access (update t i v) j) (access t j)))))))

 (FORALL (i)
 (FORALL (j)
 (IMPLIES (NEQ i j)
 (FORALL (t) (FORALL (v) (EQ (access (update t i v) j) (access t j))))))))

(BG_PUSH
 ;; Why axiom sorted_array_def
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (IFF
 (EQ (sorted_array (c_sort (farray c_int) t) (c_sort c_int i)
 (c_sort c_int j)) |@true|)
 (FORALL (k)
 (IMPLIES
 (AND (EQ (le_int_c (c_sort c_int i) (c_sort c_int k)) |@true|)
 (EQ (lt_int_c (c_sort c_int k) (c_sort c_int j)) |@true|))
 (EQ (le_int_c
 (c_sort c_int (access (c_sort (farray c_int) t) (c_sort c_int k)))
 (c_sort c_int
 (access (c_sort (farray c_int) t)
 (add_int_c (c_sort c_int k) (c_sort c_int 1))))) |@true|))))))))

(BG_PUSH
 ;; Why axiom exchange_def
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (i)
 (FORALL (j)
 (IFF
 (EQ (exchange (c_sort (farray c_int) t1) (c_sort (farray c_int) t2)
 (c_sort c_int i) (c_sort c_int j)) |@true|)
 (AND
 (EQ (c_sort c_int (array_length (c_sort (farray c_int) t1)))
 (c_sort c_int (array_length (c_sort (farray c_int) t2))))
 (AND
 (EQ (c_sort c_int (access (c_sort (farray c_int) t1) (c_sort c_int i)))
 (c_sort c_int (access (c_sort (farray c_int) t2) (c_sort c_int j))))
 (AND
 (EQ (c_sort c_int (access (c_sort (farray c_int) t2) (c_sort c_int i)))
 (c_sort c_int (access (c_sort (farray c_int) t1) (c_sort c_int j))))
 (FORALL (k)
 (IMPLIES
 (AND (NEQ (c_sort c_int k) (c_sort c_int i))
 (NEQ (c_sort c_int k) (c_sort c_int j)))
 (EQ (c_sort c_int (access (c_sort (farray c_int) t1) (c_sort c_int k)))
 (c_sort c_int (access (c_sort (farray c_int) t2) (c_sort c_int k)))))))))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t)
 (EQ (permut (c_sort (farray c_int) t) (c_sort (farray c_int) t)) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1)
 (FORALL (t2)
 (IMPLIES
 (EQ (permut (c_sort (farray c_int) t1) (c_sort (farray c_int) t2)) |@true|)
 (EQ (permut (c_sort (farray c_int) t2) (c_sort (farray c_int) t1)) |@true|)))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (t3)
 (IMPLIES
 (AND
 (EQ (permut (c_sort (farray c_int) t1) (c_sort (farray c_int) t2)) |@true|)
 (EQ (permut (c_sort (farray c_int) t2) (c_sort (farray c_int) t3)) |@true|))
 (EQ (permut (c_sort (farray c_int) t1) (c_sort (farray c_int) t3)) |@true|))))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (EQ (permut (c_sort (farray c_int) t)
 (c_sort (farray c_int)
 (update
 (c_sort (farray c_int)
 (update (c_sort (farray c_int) t) (c_sort c_int i)
 (c_sort c_int (access (c_sort (farray c_int) t) (c_sort c_int j)))))
 (c_sort c_int j)
 (c_sort c_int (access (c_sort (farray c_int) t) (c_sort c_int i)))))) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_refl
 (FORALL (t)
 (FORALL (g)
 (FORALL (d)
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t)
 (c_sort (farray c_int) t)) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_sym
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t1)
 (c_sort (farray c_int) t2)) |@true|)
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t2)
 (c_sort (farray c_int) t1)) |@true|)))))))

(BG_PUSH
 ;; Why axiom sub_permut_trans
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (t3)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t1)
 (c_sort (farray c_int) t2)) |@true|)
 (IMPLIES
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t2)
 (c_sort (farray c_int) t3)) |@true|)
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t1)
 (c_sort (farray c_int) t3)) |@true|))))))))

 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t1)
 (c_sort (farray c_int) t2)) |@true|)
 (FORALL (t3)
 (IMPLIES
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t2)
 (c_sort (farray c_int) t3)) |@true|)
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t1)
 (c_sort (farray c_int) t3)) |@true|)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_1
 (FORALL (t)
 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES
 (AND (EQ (le_int_c (c_sort c_int g) (c_sort c_int i)) |@true|)
 (AND (EQ (le_int_c (c_sort c_int i) (c_sort c_int d)) |@true|)
 (AND (EQ (le_int_c (c_sort c_int g) (c_sort c_int j)) |@true|)
 (EQ (le_int_c (c_sort c_int j) (c_sort c_int d)) |@true|))))
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t)
 (c_sort (farray c_int)
 (update
 (c_sort (farray c_int)
 (update (c_sort (farray c_int) t) (c_sort c_int i)
 (c_sort c_int (access (c_sort (farray c_int) t) (c_sort c_int j)))))
 (c_sort c_int j)
 (c_sort c_int (access (c_sort (farray c_int) t) (c_sort c_int i)))))) |@true|)))))))

 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES
 (AND (EQ (le_int_c (c_sort c_int g) (c_sort c_int i)) |@true|)
 (AND (EQ (le_int_c (c_sort c_int i) (c_sort c_int d)) |@true|)
 (AND (EQ (le_int_c (c_sort c_int g) (c_sort c_int j)) |@true|)
 (EQ (le_int_c (c_sort c_int j) (c_sort c_int d)) |@true|))))
 (FORALL (t)
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t)
 (c_sort (farray c_int)
 (update
 (c_sort (farray c_int)
 (update (c_sort (farray c_int) t) (c_sort c_int i)
 (c_sort c_int (access (c_sort (farray c_int) t) (c_sort c_int j)))))
 (c_sort c_int j)
 (c_sort c_int (access (c_sort (farray c_int) t) (c_sort c_int i)))))) |@true|))))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_2
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES
 (AND (EQ (le_int_c (c_sort c_int g) (c_sort c_int i)) |@true|)
 (AND (EQ (le_int_c (c_sort c_int i) (c_sort c_int d)) |@true|)
 (AND (EQ (le_int_c (c_sort c_int g) (c_sort c_int j)) |@true|)
 (AND (EQ (le_int_c (c_sort c_int j) (c_sort c_int d)) |@true|)
 (EQ (exchange (c_sort (farray c_int) t1) (c_sort (farray c_int) t2)
 (c_sort c_int i) (c_sort c_int j)) |@true|)))))
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t1)
 (c_sort (farray c_int) t2)) |@true|)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_permut
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t1)
 (c_sort (farray c_int) t2)) |@true|)
 (EQ (permut (c_sort (farray c_int) t1) (c_sort (farray c_int) t2)) |@true|)))))))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (t)
 (FORALL (i)
 (FORALL (v)
 (EQ (c_sort c_int
     (array_length
     (c_sort (farray c_int)
     (update (c_sort (farray c_int) t) (c_sort c_int i) (c_sort c_int v)))))
 (c_sort c_int (array_length (c_sort (farray c_int) t))))))))

(BG_PUSH
 ;; Why axiom sub_permut_array_length
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES
 (EQ (sub_permut (c_sort c_int g) (c_sort c_int d) (c_sort (farray c_int) t1)
 (c_sort (farray c_int) t2)) |@true|)
 (EQ (c_sort c_int (array_length (c_sort (farray c_int) t1)))
 (c_sort c_int (array_length (c_sort (farray c_int) t2))))))))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (t1)
 (FORALL (t2)
 (IMPLIES
 (EQ (permut (c_sort (farray c_int) t1) (c_sort (farray c_int) t2)) |@true|)
 (EQ (c_sort c_int (array_length (c_sort (farray c_int) t1)))
 (c_sort c_int (array_length (c_sort (farray c_int) t2))))))))

(BG_PUSH
 ;; Why axiom def_is_color
 (FORALL (c0) (PATS (is_color (c_sort color c0)))
 (IFF (EQ (is_color (c_sort color c0)) |@true|)
 (OR (EQ (c_sort color c0) (c_sort color blue))
 (OR (EQ (c_sort color c0) (c_sort color white))
 (EQ (c_sort color c0) (c_sort color red)))))))

(BG_PUSH
 ;; Why axiom acc_upd_eq
 (FORALL (a)
 (FORALL (i)
 (FORALL (c)
 (EQ (c_sort color
     (acc
     (c_sort color_array
     (upd (c_sort color_array a) (c_sort c_int i) (c_sort color c)))
     (c_sort c_int i)))
 (c_sort color c))))))

(BG_PUSH
 ;; Why axiom acc_upd_neq
 (FORALL (a)
 (FORALL (i)
 (FORALL (j)
 (FORALL (c)
 (IMPLIES (NEQ (c_sort c_int i) (c_sort c_int j))
 (EQ (c_sort color
     (acc
     (c_sort color_array
     (upd (c_sort color_array a) (c_sort c_int j) (c_sort color c)))
     (c_sort c_int i)))
 (c_sort color (acc (c_sort color_array a) (c_sort c_int i)))))))))

 (FORALL (i)
 (FORALL (j)
 (IMPLIES (NEQ (c_sort c_int i) (c_sort c_int j))
 (FORALL (a)
 (FORALL (c)
 (EQ (c_sort color
     (acc
     (c_sort color_array
     (upd (c_sort color_array a) (c_sort c_int j) (c_sort color c)))
     (c_sort c_int i)))
 (c_sort color (acc (c_sort color_array a) (c_sort c_int i))))))))))

(BG_PUSH
 ;; Why axiom length_update
 (FORALL (a)
 (FORALL (i)
 (FORALL (c)
 (EQ (c_sort c_int
     (length
     (c_sort color_array
     (upd (c_sort color_array a) (c_sort c_int i) (c_sort color c)))))
 (c_sort c_int (length (c_sort color_array a))))))))

(BG_PUSH
 ;; Why axiom def_monochrome
 (FORALL (t0)
 (FORALL (i0)
 (FORALL (j0)
 (FORALL (c0)
 (PATS (monochrome (c_sort color_array t0) (c_sort c_int i0)
       (c_sort c_int j0) (c_sort color c0)))
 (IFF
 (EQ (monochrome (c_sort color_array t0) (c_sort c_int i0) (c_sort c_int j0)
 (c_sort color c0)) |@true|)
 (FORALL (k)
 (IMPLIES
 (AND (EQ (le_int_c (c_sort c_int i0) (c_sort c_int k)) |@true|)
 (EQ (lt_int_c (c_sort c_int k) (c_sort c_int j0)) |@true|))
 (EQ (c_sort color (acc (c_sort color_array t0) (c_sort c_int k)))
 (c_sort color c0))))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t)
 (FORALL (l)
 (FORALL (r)
 (EQ (permutation (c_sort color_array t) (c_sort color_array t)
 (c_sort c_int l) (c_sort c_int r)) |@true|)))))

(BG_PUSH
 ;; Why axiom permut_swap
 (FORALL (t)
 (FORALL (l)
 (FORALL (r)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES
 (AND (EQ (le_int_c (c_sort c_int l) (c_sort c_int i)) |@true|)
 (EQ (le_int_c (c_sort c_int i) (c_sort c_int r)) |@true|))
 (IMPLIES
 (AND (EQ (le_int_c (c_sort c_int l) (c_sort c_int j)) |@true|)
 (EQ (le_int_c (c_sort c_int j) (c_sort c_int r)) |@true|))
 (EQ (permutation (c_sort color_array t)
 (c_sort color_array
 (upd
 (c_sort color_array
 (upd (c_sort color_array t) (c_sort c_int i)
 (c_sort color (acc (c_sort color_array t) (c_sort c_int j)))))
 (c_sort c_int j)
 (c_sort color (acc (c_sort color_array t) (c_sort c_int i)))))
 (c_sort c_int l) (c_sort c_int r)) |@true|))))))))

 (FORALL (l)
 (FORALL (r)
 (FORALL (i)
 (IMPLIES
 (AND (EQ (le_int_c (c_sort c_int l) (c_sort c_int i)) |@true|)
 (EQ (le_int_c (c_sort c_int i) (c_sort c_int r)) |@true|))
 (FORALL (j)
 (IMPLIES
 (AND (EQ (le_int_c (c_sort c_int l) (c_sort c_int j)) |@true|)
 (EQ (le_int_c (c_sort c_int j) (c_sort c_int r)) |@true|))
 (FORALL (t)
 (EQ (permutation (c_sort color_array t)
 (c_sort color_array
 (upd
 (c_sort color_array
 (upd (c_sort color_array t) (c_sort c_int i)
 (c_sort color (acc (c_sort color_array t) (c_sort c_int j)))))
 (c_sort c_int j)
 (c_sort color (acc (c_sort color_array t) (c_sort c_int i)))))
 (c_sort c_int l) (c_sort c_int r)) |@true|)))))))))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (l)
 (FORALL (r)
 (IMPLIES
 (EQ (permutation (c_sort color_array t1) (c_sort color_array t2)
 (c_sort c_int l) (c_sort c_int r)) |@true|)
 (EQ (permutation (c_sort color_array t2) (c_sort color_array t1)
 (c_sort c_int l) (c_sort c_int r)) |@true|)))))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (t3)
 (FORALL (l)
 (FORALL (r)
 (IMPLIES
 (EQ (permutation (c_sort color_array t1) (c_sort color_array t2)
 (c_sort c_int l) (c_sort c_int r)) |@true|)
 (IMPLIES
 (EQ (permutation (c_sort color_array t2) (c_sort color_array t3)
 (c_sort c_int l) (c_sort c_int r)) |@true|)
 (EQ (permutation (c_sort color_array t1) (c_sort color_array t3)
 (c_sort c_int l) (c_sort c_int r)) |@true|))))))))

 (FORALL (t1)
 (FORALL (t2)
 (FORALL (l)
 (FORALL (r)
 (IMPLIES
 (EQ (permutation (c_sort color_array t1) (c_sort color_array t2)
 (c_sort c_int l) (c_sort c_int r)) |@true|)
 (FORALL (t3)
 (IMPLIES
 (EQ (permutation (c_sort color_array t2) (c_sort color_array t3)
 (c_sort c_int l) (c_sort c_int r)) |@true|)
 (EQ (permutation (c_sort color_array t1) (c_sort color_array t3)
 (c_sort c_int l) (c_sort c_int r)) |@true|)))))))))

;; swap_po_1, Why obligation from file "", line 0, characters 0-0:
(FORALL (i)
(FORALL (j)
(FORALL (t)
(IMPLIES (AND
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int i)) |@true|)
         (EQ (lt_int_c (c_sort c_int i)
         (c_sort c_int (length (c_sort color_array t)))) |@true|))
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int j)) |@true|)
         (EQ (lt_int_c (c_sort c_int j)
         (c_sort c_int (length (c_sort color_array t)))) |@true|)))
(IMPLIES (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int i)) |@true|)
         (EQ (lt_int_c (c_sort c_int i)
         (c_sort c_int (length (c_sort color_array t)))) |@true|))
(FORALL (result)
(IMPLIES (EQ (c_sort color result)
         (c_sort color (acc (c_sort color_array t) (c_sort c_int i))))
(IMPLIES (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int j)) |@true|)
         (EQ (lt_int_c (c_sort c_int j)
         (c_sort c_int (length (c_sort color_array t)))) |@true|))
(FORALL (result0)
(IMPLIES (EQ (c_sort color result0)
         (c_sort color (acc (c_sort color_array t) (c_sort c_int j))))
(IMPLIES (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int i)) |@true|)
         (EQ (lt_int_c (c_sort c_int i)
         (c_sort c_int (length (c_sort color_array t)))) |@true|))
(FORALL (t0)
(IMPLIES (EQ (c_sort color_array t0)
         (c_sort color_array
         (upd (c_sort color_array t) (c_sort c_int i) (c_sort color result0))))
(AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int j)) |@true|)
(EQ (lt_int_c (c_sort c_int j)
(c_sort c_int (length (c_sort color_array t0)))) |@true|)))))))))))))))

;; swap_po_2, Why obligation from file "", line 0, characters 0-0:
(FORALL (i)
(FORALL (j)
(FORALL (t)
(IMPLIES (AND
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int i)) |@true|)
         (EQ (lt_int_c (c_sort c_int i)
         (c_sort c_int (length (c_sort color_array t)))) |@true|))
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int j)) |@true|)
         (EQ (lt_int_c (c_sort c_int j)
         (c_sort c_int (length (c_sort color_array t)))) |@true|)))
(IMPLIES (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int i)) |@true|)
         (EQ (lt_int_c (c_sort c_int i)
         (c_sort c_int (length (c_sort color_array t)))) |@true|))
(FORALL (result)
(IMPLIES (EQ (c_sort color result)
         (c_sort color (acc (c_sort color_array t) (c_sort c_int i))))
(IMPLIES (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int j)) |@true|)
         (EQ (lt_int_c (c_sort c_int j)
         (c_sort c_int (length (c_sort color_array t)))) |@true|))
(FORALL (result0)
(IMPLIES (EQ (c_sort color result0)
         (c_sort color (acc (c_sort color_array t) (c_sort c_int j))))
(IMPLIES (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int i)) |@true|)
         (EQ (lt_int_c (c_sort c_int i)
         (c_sort c_int (length (c_sort color_array t)))) |@true|))
(FORALL (t0)
(IMPLIES (EQ (c_sort color_array t0)
         (c_sort color_array
         (upd (c_sort color_array t) (c_sort c_int i) (c_sort color result0))))
(IMPLIES (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int j)) |@true|)
         (EQ (lt_int_c (c_sort c_int j)
         (c_sort c_int (length (c_sort color_array t0)))) |@true|))
(FORALL (t1)
(IMPLIES (EQ (c_sort color_array t1)
         (c_sort color_array
         (upd (c_sort color_array t0) (c_sort c_int j) (c_sort color result))))
(EQ (c_sort color_array t1)
(c_sort color_array
(upd
(c_sort color_array
(upd (c_sort color_array t) (c_sort c_int i)
(c_sort color (acc (c_sort color_array t) (c_sort c_int j)))))
(c_sort c_int j)
(c_sort color (acc (c_sort color_array t) (c_sort c_int i))))))))))))))))))))))



;; dutch_flag_po_3, Why obligation from file "", line 0, characters 0-0:
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int n)) |@true|)
         (AND
         (EQ (c_sort c_int (length (c_sort color_array t))) (c_sort c_int n))
         (FORALL (k)
         (IMPLIES
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int k)) |@true|)
         (EQ (lt_int_c (c_sort c_int k) (c_sort c_int n)) |@true|))
         (EQ (is_color
         (c_sort color (acc (c_sort color_array t) (c_sort c_int k)))) |@true|)))))
(IMPLIES (AND
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int 0)) |@true|)
         (EQ (le_int_c (c_sort c_int 0) (c_sort c_int 0)) |@true|))
         (AND
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int n)) |@true|)
         (EQ (le_int_c (c_sort c_int n) (c_sort c_int n)) |@true|))
         (AND
         (EQ (monochrome (c_sort color_array t) (c_sort c_int 0)
         (c_sort c_int 0) (c_sort color blue)) |@true|)
         (AND
         (EQ (monochrome (c_sort color_array t) (c_sort c_int 0)
         (c_sort c_int 0) (c_sort color white)) |@true|)
         (AND
         (EQ (monochrome (c_sort color_array t) (c_sort c_int n)
         (c_sort c_int n) (c_sort color red)) |@true|)
         (AND
         (EQ (c_sort c_int (length (c_sort color_array t))) (c_sort c_int n))
         (AND
         (FORALL (k)
         (IMPLIES
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int k)) |@true|)
         (EQ (lt_int_c (c_sort c_int k) (c_sort c_int n)) |@true|))
         (EQ (is_color
         (c_sort color (acc (c_sort color_array t) (c_sort c_int k)))) |@true|)))
         (EQ (permutation (c_sort color_array t) (c_sort color_array t)
         (c_sort c_int 0)
         (sub_int_c (c_sort c_int n) (c_sort c_int 1))) |@true|))))))))
(FORALL (b)
(FORALL (i)
(FORALL (r)
(FORALL (t0)
(IMPLIES (AND
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int b)) |@true|)
         (EQ (le_int_c (c_sort c_int b) (c_sort c_int i)) |@true|))
         (AND
         (AND (EQ (le_int_c (c_sort c_int i) (c_sort c_int r)) |@true|)
         (EQ (le_int_c (c_sort c_int r) (c_sort c_int n)) |@true|))
         (AND
         (EQ (monochrome (c_sort color_array t0) (c_sort c_int 0)
         (c_sort c_int b) (c_sort color blue)) |@true|)
         (AND
         (EQ (monochrome (c_sort color_array t0) (c_sort c_int b)
         (c_sort c_int i) (c_sort color white)) |@true|)
         (AND
         (EQ (monochrome (c_sort color_array t0) (c_sort c_int r)
         (c_sort c_int n) (c_sort color red)) |@true|)
         (AND
         (EQ (c_sort c_int (length (c_sort color_array t0)))
         (c_sort c_int n))
         (AND
         (FORALL (k)
         (IMPLIES
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int k)) |@true|)
         (EQ (lt_int_c (c_sort c_int k) (c_sort c_int n)) |@true|))
         (EQ (is_color
         (c_sort color (acc (c_sort color_array t0) (c_sort c_int k)))) |@true|)))
         (EQ (permutation (c_sort color_array t0) (c_sort color_array t)
         (c_sort c_int 0)
         (sub_int_c (c_sort c_int n) (c_sort c_int 1))) |@true|))))))))
(IMPLIES (EQ (lt_int_c (c_sort c_int i) (c_sort c_int r)) |@true|)
(IMPLIES (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int i)) |@true|)
         (EQ (lt_int_c (c_sort c_int i)
         (c_sort c_int (length (c_sort color_array t0)))) |@true|))
(FORALL (result)
(IMPLIES (EQ (c_sort color result)
         (c_sort color (acc (c_sort color_array t0) (c_sort c_int i))))
(IMPLIES (EQ (c_sort color result) (c_sort color blue))
(AND
(AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int b)) |@true|)
(EQ (lt_int_c (c_sort c_int b)
(c_sort c_int (length (c_sort color_array t0)))) |@true|))
(AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int i)) |@true|)
(EQ (lt_int_c (c_sort c_int i)
(c_sort c_int (length (c_sort color_array t0)))) |@true|)))))))))))))))))


;; dutch_flag_po_8, Why obligation from file "", line 0, characters 0-0:
(FORALL (n)
(FORALL (t)
(IMPLIES (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int n)) |@true|)
         (AND
         (EQ (c_sort c_int (length (c_sort color_array t))) (c_sort c_int n))
         (FORALL (k)
         (IMPLIES
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int k)) |@true|)
         (EQ (lt_int_c (c_sort c_int k) (c_sort c_int n)) |@true|))
         (EQ (is_color
         (c_sort color (acc (c_sort color_array t) (c_sort c_int k)))) |@true|)))))
(IMPLIES (AND
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int 0)) |@true|)
         (EQ (le_int_c (c_sort c_int 0) (c_sort c_int 0)) |@true|))
         (AND
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int n)) |@true|)
         (EQ (le_int_c (c_sort c_int n) (c_sort c_int n)) |@true|))
         (AND
         (EQ (monochrome (c_sort color_array t) (c_sort c_int 0)
         (c_sort c_int 0) (c_sort color blue)) |@true|)
         (AND
         (EQ (monochrome (c_sort color_array t) (c_sort c_int 0)
         (c_sort c_int 0) (c_sort color white)) |@true|)
         (AND
         (EQ (monochrome (c_sort color_array t) (c_sort c_int n)
         (c_sort c_int n) (c_sort color red)) |@true|)
         (AND
         (EQ (c_sort c_int (length (c_sort color_array t))) (c_sort c_int n))
         (AND
         (FORALL (k)
         (IMPLIES
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int k)) |@true|)
         (EQ (lt_int_c (c_sort c_int k) (c_sort c_int n)) |@true|))
         (EQ (is_color
         (c_sort color (acc (c_sort color_array t) (c_sort c_int k)))) |@true|)))
         (EQ (permutation (c_sort color_array t) (c_sort color_array t)
         (c_sort c_int 0)
         (sub_int_c (c_sort c_int n) (c_sort c_int 1))) |@true|))))))))
(FORALL (b)
(FORALL (i)
(FORALL (r)
(FORALL (t0)
(IMPLIES (AND
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int b)) |@true|)
         (EQ (le_int_c (c_sort c_int b) (c_sort c_int i)) |@true|))
         (AND
         (AND (EQ (le_int_c (c_sort c_int i) (c_sort c_int r)) |@true|)
         (EQ (le_int_c (c_sort c_int r) (c_sort c_int n)) |@true|))
         (AND
         (EQ (monochrome (c_sort color_array t0) (c_sort c_int 0)
         (c_sort c_int b) (c_sort color blue)) |@true|)
         (AND
         (EQ (monochrome (c_sort color_array t0) (c_sort c_int b)
         (c_sort c_int i) (c_sort color white)) |@true|)
         (AND
         (EQ (monochrome (c_sort color_array t0) (c_sort c_int r)
         (c_sort c_int n) (c_sort color red)) |@true|)
         (AND
         (EQ (c_sort c_int (length (c_sort color_array t0)))
         (c_sort c_int n))
         (AND
         (FORALL (k)
         (IMPLIES
         (AND (EQ (le_int_c (c_sort c_int 0) (c_sort c_int k)) |@true|)
         (EQ (lt_int_c (c_sort c_int k) (c_sort c_int n)) |@true|))
         (EQ (is_color
         (c_sort color (acc (c_sort color_array t0) (c_sort c_int k)))) |@true|)))
         (EQ (permutation (c_sort color_array t0) (c_sort color_array t)
         (c_sort c_int 0)
         (sub_int_c (c_sort c_int n) (c_sort c_int 1))) |@true|))))))))
(IMPLIES (EQ (ge_int_c (c_sort c_int i) (c_sort c_int r)) |@true|)
(AND
(EXISTS (b)
(EXISTS (r)
(AND
(EQ (monochrome (c_sort color_array t0) (c_sort c_int 0) (c_sort c_int b)
(c_sort color blue)) |@true|)
(AND
(EQ (monochrome (c_sort color_array t0) (c_sort c_int b) (c_sort c_int r)
(c_sort color white)) |@true|)
(EQ (monochrome (c_sort color_array t0) (c_sort c_int r) (c_sort c_int n)
(c_sort color red)) |@true|)))))
(EQ (permutation (c_sort color_array t0) (c_sort color_array t)
(c_sort c_int 0) (sub_int_c (c_sort c_int n) (c_sort c_int 1))) |@true|))))))))))))

