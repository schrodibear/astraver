(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Why.

(* Why obligation from file "bsearch.c", characters 441-452 *)
Lemma binary_search_po_1 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre8: `(array_length t) = n` /\ `n >= 0` /\ (sorted_array t `0` `n - 1`))
  (l1: Z)
  (Post1: l1 = `1`)
  (u1: Z)
  (Post2: u1 = `n - 1`)
  (p1: Z)
  (Post3: p1 = `(-1)`)
  (Variant1: Z)
  (l2: Z)
  (u2: Z)
  (Pre7: Variant1 = `2 + u2 - l2`)
  (Pre6: `0 <= l2` /\ `u2 <= (array_length t) - 1` /\ (`(-1) <= p1` /\
         `p1 <= (array_length t) - 1`) /\
         ((`p1 = (-1)` -> ((In t `0` `(array_length t) - 1`) -> (In t l2 u2)))) /\
         ((`p1 >= 0` -> `(access t p1) = v`)))
  (Test2: `l2 <= u2`)
  ~(`2` = `0`).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "bsearch.c", characters 470-487 *)
Lemma binary_search_po_2 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre8: `(array_length t) = n` /\ `n >= 0` /\ (sorted_array t `0` `n - 1`))
  (l1: Z)
  (Post1: l1 = `1`)
  (u1: Z)
  (Post2: u1 = `n - 1`)
  (p1: Z)
  (Post3: p1 = `(-1)`)
  (Variant1: Z)
  (l2: Z)
  (u2: Z)
  (Pre7: Variant1 = `2 + u2 - l2`)
  (Pre6: `0 <= l2` /\ `u2 <= (array_length t) - 1` /\ (`(-1) <= p1` /\
         `p1 <= (array_length t) - 1`) /\
         ((`p1 = (-1)` -> ((In t `0` `(array_length t) - 1`) -> (In t l2 u2)))) /\
         ((`p1 >= 0` -> `(access t p1) = v`)))
  (Test2: `l2 <= u2`)
  (Pre5: ~(`2` = `0`))
  (m2: Z)
  (Post4: m2 = (Zdiv (`l2 + u2`) `2`))
  `l2 <= m2` /\ `m2 <= u2`.
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "bsearch.c", characters 487-490 *)
Lemma binary_search_po_3 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre8: `(array_length t) = n` /\ `n >= 0` /\ (sorted_array t `0` `n - 1`))
  (l1: Z)
  (Post1: l1 = `1`)
  (u1: Z)
  (Post2: u1 = `n - 1`)
  (p1: Z)
  (Post3: p1 = `(-1)`)
  (Variant1: Z)
  (l2: Z)
  (u2: Z)
  (Pre7: Variant1 = `2 + u2 - l2`)
  (Pre6: `0 <= l2` /\ `u2 <= (array_length t) - 1` /\ (`(-1) <= p1` /\
         `p1 <= (array_length t) - 1`) /\
         ((`p1 = (-1)` -> ((In t `0` `(array_length t) - 1`) -> (In t l2 u2)))) /\
         ((`p1 >= 0` -> `(access t p1) = v`)))
  (Test2: `l2 <= u2`)
  (Pre5: ~(`2` = `0`))
  (m2: Z)
  (Post4: m2 = (Zdiv (`l2 + u2`) `2`))
  (Pre4: `l2 <= m2` /\ `m2 <= u2`)
  ((result:Z)
   (result = (access t m2) ->
    ((`result < v` ->
      ((l:Z)
       (l = `m2 + 1` -> (`0 <= l` /\ `u2 <= (array_length t) - 1` /\
        (`(-1) <= p1` /\ `p1 <= (array_length t) - 1`) /\
        ((`p1 = (-1)` -> ((In t `0` `(array_length t) - 1`) -> (In t l u2)))) /\
        ((`p1 >= 0` -> `(access t p1) = v`))) /\
        (Zwf `0` `2 + u2 - l` `2 + u2 - l2`))))) /\
    ((`result >= v` ->
      ((result:Z)
       (result = (access t m2) ->
        ((`result > v` ->
          ((u:Z)
           (u = `m2 - 1` -> (`0 <= l2` /\ `u <= (array_length t) - 1` /\
            (`(-1) <= p1` /\ `p1 <= (array_length t) - 1`) /\
            ((`p1 = (-1)` ->
              ((In t `0` `(array_length t) - 1`) -> (In t l2 u)))) /\
            ((`p1 >= 0` -> `(access t p1) = v`))) /\
            (Zwf `0` `2 + u - l2` `2 + u2 - l2`))))) /\
        ((`result <= v` -> (`0 <= m2` /\ `m2 <= (array_length t) - 1`) /\
          `(access t m2) = v` \/ `m2 = (-1)` /\
          ~(In t `1` `(array_length t) - 1`))))) /\
      `0 <= m2` /\ `m2 < (array_length t)`)))) /\
  `0 <= m2` /\ `m2 < (array_length t)`.
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "bsearch.c", characters 242-406 *)
Lemma binary_search_po_4 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre8: `(array_length t) = n` /\ `n >= 0` /\ (sorted_array t `0` `n - 1`))
  (l1: Z)
  (Post1: l1 = `1`)
  (u1: Z)
  (Post2: u1 = `n - 1`)
  (p1: Z)
  (Post3: p1 = `(-1)`)
  `0 <= l1` /\ `u1 <= (array_length t) - 1` /\ (`(-1) <= p1` /\
  `p1 <= (array_length t) - 1`) /\
  ((`p1 = (-1)` -> ((In t `0` `(array_length t) - 1`) -> (In t l1 u1)))) /\
  ((`p1 >= 0` -> `(access t p1) = v`)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "bsearch.c", characters 604-606 *)
Lemma binary_search_po_5 : 
  (n: Z)
  (v: Z)
  (t: (array Z))
  (Pre8: `(array_length t) = n` /\ `n >= 0` /\ (sorted_array t `0` `n - 1`))
  (l1: Z)
  (Post1: l1 = `1`)
  (u1: Z)
  (Post2: u1 = `n - 1`)
  (p1: Z)
  (Post3: p1 = `(-1)`)
  (l2: Z)
  (u2: Z)
  (Post9: (`0 <= l2` /\ `u2 <= (array_length t) - 1` /\ (`(-1) <= p1` /\
          `p1 <= (array_length t) - 1`) /\
          ((`p1 = (-1)` ->
            ((In t `0` `(array_length t) - 1`) -> (In t l2 u2)))) /\
          ((`p1 >= 0` -> `(access t p1) = v`))) /\ `l2 > u2`)
  (`0 <= (-1)` /\ `(-1) <= (array_length t) - 1`) /\ `(access t (-1)) = v` \/
  `(-1) = (-1)` /\ ~(In t `1` `(array_length t) - 1`).
Proof.
(* FILL PROOF HERE *)
Save.

