(BG_PUSH 
  ; array_length
  (FORALL (t i v) (EQ (array_length (store t i v)) (array_length t)))
  ; booleans
  (DISTINCT |@true| |@false|)
  ; exchange
  (FORALL (t1 t2 i j)
	  (IFF (EQ (exchange t1 t2 i j) |@true|)
	       (AND (EQ (array_length t1) (array_length t2))
		    (EQ (select t1 i) (select t2 j))
		    (EQ (select t1 j) (select t2 i))
		    (FORALL (k) (IMPLIES (AND (NEQ k i) (NEQ k j))
					 (EQ (select t1 k) (select t2 k)))))))
  (FORALL (t1 t2 i j)
	  (IMPLIES (EQ (exchange t1 t2 i j) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; permut
  (FORALL (t) (EQ (permut t t) |@true|))
  (FORALL (t1 t2) (IMPLIES (EQ (permut t1 t2) |@true|)
			   (EQ (permut t2 t1) |@true|)))
  (FORALL (t1 t2 t3) (IMPLIES (AND (EQ (permut t1 t2) |@true|)
				   (EQ (permut t2 t3) |@true|))
			      (EQ (permut t1 t3) |@true|)))
  (FORALL 
   (t i j) 
   (EQ (permut t (store (store t i (select t j)) j (select t i))) |@true|))
  (FORALL (t1 t2)
	  (IMPLIES (EQ (permut t1 t2) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; sub_permut
  (FORALL (t g d) (EQ (sub_permut g d t t) |@true|))
  (FORALL (t1 t2 g d) (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
			   (EQ (sub_permut g d t2 t1) |@true|)))
  (FORALL (t1 t2 t3 g d) (IMPLIES (AND (EQ (sub_permut g d t1 t2) |@true|)
				       (EQ (sub_permut g d t2 t3) |@true|))
				  (EQ (sub_permut g d t1 t3) |@true|)))
  (FORALL 
   (t g d i j) 
   (IMPLIES (AND (<= g i) (<= i d) (<= g j) (<= j d))
	    (EQ (sub_permut g d t 
			    (store (store t i (select t j)) j (select t i))) 
		|@true|)))
  (FORALL 
   (t1 t2 g d i j)
   (IMPLIES (AND (EQ (exchange t1 t2 i j) |@true|)
		 (<= g i) (<= i d) (<= g j) (<= j d))
	    (EQ (sub_permut g d t1 t2) |@true|)))
  (FORALL (t1 t2 i j) 
	  (IMPLIES (EQ (sub_permut i j t1 t2) |@true|)
		   (EQ (permut t1 t2) |@true|)))
  (FORALL (t1 t2 i j)
	  (IMPLIES (EQ (sub_permut i j t1 t2) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; sorted_array
  (FORALL 
   (t i j) 
   (IFF (EQ (sorted_array t i j) |@true|)
	(IMPLIES (<= i j)
		 (FORALL (k) (IMPLIES (AND (<= i k) (< k j))
				      (<= (select t k) (select t (+ k 1))))))))
)

;; DO NOT EDIT BELOW THIS LINE

;; sqrt_po_1, Why obligation from file "sqrt.mlw", characters 391-392
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (EQ x 0)
(FORALL (result0)
(IMPLIES (EQ result0 0)
(AND (<= (* result0 result0) x) (< x (* (+ result0 1) (+ result0 1)))))))))

;; sqrt_po_2, Why obligation from file "sqrt.mlw", characters 417-418
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (NEQ x 0)
(IMPLIES (<= x 3)
(FORALL (result1)
(IMPLIES (EQ result1 1)
(AND (<= (* result1 result1) x) (< x (* (+ result1 1) (+ result1 1))))))))))

;; sqrt_po_3, Why obligation from file "sqrt.mlw", characters 460-467
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (NEQ x 0)
(IMPLIES (> x 3) (FORALL (y) (IMPLIES (EQ y x) (NEQ 2 0)))))))

;; sqrt_po_4, Why obligation from file "sqrt.mlw", characters 654-660
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (NEQ x 0)
(IMPLIES (> x 3)
(FORALL (y)
(IMPLIES (EQ y x)
(IMPLIES (NEQ 2 0)
(FORALL (z)
(IMPLIES (EQ z (int_div (+ x 1) 2))
(FORALL (Variant1)
(FORALL (y1)
(FORALL (z1)
(IMPLIES (EQ Variant1 y1)
(IMPLIES (AND (> z1 0)
         (AND (> y1 0)
         (AND (EQ z1 (int_div (+ (int_div x y1) y1) 2))
         (AND (< x (* (+ y1 1) (+ y1 1))) (< x (* (+ z1 1) (+ z1 1)))))))
(IMPLIES (< z1 y1)
(FORALL (y2) (IMPLIES (EQ y2 z1) (IMPLIES (NEQ 2 0) (NEQ z1 0)))))))))))))))))))

;; sqrt_po_5, Why obligation from file "sqrt.mlw", characters 636-670
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (NEQ x 0)
(IMPLIES (> x 3)
(FORALL (y)
(IMPLIES (EQ y x)
(IMPLIES (NEQ 2 0)
(FORALL (z)
(IMPLIES (EQ z (int_div (+ x 1) 2))
(FORALL (Variant1)
(FORALL (y1)
(FORALL (z1)
(IMPLIES (EQ Variant1 y1)
(IMPLIES (AND (> z1 0)
         (AND (> y1 0)
         (AND (EQ z1 (int_div (+ (int_div x y1) y1) 2))
         (AND (< x (* (+ y1 1) (+ y1 1))) (< x (* (+ z1 1) (+ z1 1)))))))
(IMPLIES (< z1 y1)
(FORALL (y2)
(IMPLIES (EQ y2 z1)
(FORALL (z2)
(IMPLIES (EQ z2 (int_div (+ (int_div x z1) z1) 2))
(AND
(AND (> z2 0)
(AND (> y2 0)
(AND (EQ z2 (int_div (+ (int_div x y2) y2) 2))
(AND (< x (* (+ y2 1) (+ y2 1))) (< x (* (+ z2 1) (+ z2 1)))))))
(AND (<= 0 y1) (< y2 y1))))))))))))))))))))))

;; sqrt_po_6, Why obligation from file "sqrt.mlw", characters 484-676
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (NEQ x 0)
(IMPLIES (> x 3)
(FORALL (y)
(IMPLIES (EQ y x)
(IMPLIES (NEQ 2 0)
(FORALL (z)
(IMPLIES (EQ z (int_div (+ x 1) 2))
(FORALL (Variant1)
(FORALL (y1)
(FORALL (z1)
(IMPLIES (EQ Variant1 y1)
(IMPLIES (AND (> z1 0)
         (AND (> y1 0)
         (AND (EQ z1 (int_div (+ (int_div x y1) y1) 2))
         (AND (< x (* (+ y1 1) (+ y1 1))) (< x (* (+ z1 1) (+ z1 1)))))))
(IMPLIES (>= z1 y1)
(FORALL (result)
(IMPLIES (EQ result y1)
(AND (<= (* result result) x) (< x (* (+ result 1) (+ result 1)))))))))))))))))))))

;; sqrt_po_7, Why obligation from file "sqrt.mlw", characters 525-613
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (NEQ x 0)
(IMPLIES (> x 3)
(FORALL (y)
(IMPLIES (EQ y x)
(IMPLIES (NEQ 2 0)
(FORALL (z)
(IMPLIES (EQ z (int_div (+ x 1) 2))
(AND (> z 0)
(AND (> y 0)
(AND (EQ z (int_div (+ (int_div x y) y) 2))
(AND (< x (* (+ y 1) (+ y 1))) (< x (* (+ z 1) (+ z 1))))))))))))))))

