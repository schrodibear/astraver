(BG_PUSH 
  ; array_length
  (FORALL (t i v) (EQ (array_length (store t i v)) (array_length t)))
  ; booleans
  (DISTINCT |@true| |@false|)
  ; exchange
  (FORALL (t1 t2 i j)
	  (IFF (EQ (exchange t1 t2 i j) |@true|)
	       (AND (EQ (array_length t1) (array_length t2))
		    (EQ (select t1 i) (select t2 j))
		    (EQ (select t1 j) (select t2 i))
		    (FORALL (k) (IMPLIES (AND (NEQ k i) (NEQ k j))
					 (EQ (select t1 k) (select t2 k)))))))
  (FORALL (t1 t2 i j)
	  (IMPLIES (EQ (exchange t1 t2 i j) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; permut
  (FORALL (t) (EQ (permut t t) |@true|))
  (FORALL (t1 t2) (IMPLIES (EQ (permut t1 t2) |@true|)
			   (EQ (permut t2 t1) |@true|)))
  (FORALL (t1 t2 t3) (IMPLIES (AND (EQ (permut t1 t2) |@true|)
				   (EQ (permut t2 t3) |@true|))
			      (EQ (permut t1 t3) |@true|)))
  (FORALL 
   (t i j) 
   (EQ (permut t (store (store t i (select t j)) j (select t i))) |@true|))
  (FORALL (t1 t2)
	  (IMPLIES (EQ (permut t1 t2) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; sub_permut
  (FORALL (t g d) (EQ (sub_permut g d t t) |@true|))
  (FORALL (t1 t2 g d) (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
			   (EQ (sub_permut g d t2 t1) |@true|)))
  (FORALL (t1 t2 t3 g d) (IMPLIES (AND (EQ (sub_permut g d t1 t2) |@true|)
				       (EQ (sub_permut g d t2 t3) |@true|))
				  (EQ (sub_permut g d t1 t3) |@true|)))
  (FORALL 
   (t g d i j) 
   (IMPLIES (AND (<= g i) (<= i d) (<= g j) (<= j d))
	    (EQ (sub_permut g d t 
			    (store (store t i (select t j)) j (select t i))) 
		|@true|)))
  (FORALL 
   (t1 t2 g d i j)
   (IMPLIES (AND (EQ (exchange t1 t2 i j) |@true|)
		 (<= g i) (<= i d) (<= g j) (<= j d))
	    (EQ (sub_permut g d t1 t2) |@true|)))
  (FORALL (t1 t2 i j) 
	  (IMPLIES (EQ (sub_permut i j t1 t2) |@true|)
		   (EQ (permut t1 t2) |@true|)))
  (FORALL (t1 t2 i j)
	  (IMPLIES (EQ (sub_permut i j t1 t2) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; sorted_array
  (FORALL 
   (t i j) 
   (IFF (EQ (sorted_array t i j) |@true|)
	(IMPLIES (<= i j)
		 (FORALL (k) (IMPLIES (AND (<= i k) (< k j))
				      (<= (select t k) (select t (+ k 1))))))))
)

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y)))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y)))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y)))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y)))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y)))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y)))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x) (FORALL (y) (EQ (ite |@true| x y) x))))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x) (FORALL (y) (EQ (ite |@false| x y) y))))

(BG_PUSH
 ;; Why axiom sorted_array_def
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (IFF (EQ (sorted_array t i j) |@true|)
 (FORALL (k)
 (IMPLIES (AND (<= i k) (< k j)) (<= (access t k) (access t (+ k 1))))))))))

(BG_PUSH
 ;; Why axiom exchange_def
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (i)
 (FORALL (j)
 (IFF (EQ (exchange t1 t2 i j) |@true|)
 (AND (EQ (array_length t1) (array_length t2))
 (AND (EQ (access t1 i) (access t2 j))
 (AND (EQ (access t2 i) (access t1 j))
 (FORALL (k)
 (IMPLIES (AND (NEQ k i) (NEQ k j)) (EQ (access t1 k) (access t2 k)))))))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t) (EQ (permut t t) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1)
 (FORALL (t2)
 (IMPLIES (EQ (permut t1 t2) |@true|) (EQ (permut t2 t1) |@true|)))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (t3)
 (IMPLIES (AND (EQ (permut t1 t2) |@true|) (EQ (permut t2 t3) |@true|))
 (EQ (permut t1 t3) |@true|))))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (EQ (permut t (update (update t i (access t j)) j (access t i))) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_refl
 (FORALL (t) (FORALL (g) (FORALL (d) (EQ (sub_permut g d t t) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_sym
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (sub_permut g d t2 t1) |@true|)))))))

(BG_PUSH
 ;; Why axiom sub_permut_trans
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (t3)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))))))

 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_1
 (FORALL (t)
 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (EQ (sub_permut g d t
 (update (update t i (access t j)) j (access t i))) |@true|)))))))

 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (FORALL (t)
 (EQ (sub_permut g d t
 (update (update t i (access t j)) j (access t i))) |@true|))))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_2
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES
 (AND (<= g i)
 (AND (<= i d)
 (AND (<= g j) (AND (<= j d) (EQ (exchange t1 t2 i j) |@true|)))))
 (EQ (sub_permut g d t1 t2) |@true|)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_permut
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|) (EQ (permut t1 t2) |@true|)))))))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (t)
 (FORALL (i)
 (FORALL (v) (EQ (array_length (update t i v)) (array_length t))))))

(BG_PUSH
 ;; Why axiom sub_permut_array_length
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2))))))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (t1)
 (FORALL (t2)
 (IMPLIES (EQ (permut t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2))))))

;; sqrt_po_1, Why obligation from file "", line 0, characters 0-0:
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (EQ x 0) (AND (<= (* 0 0) x) (< x (* (+ 0 1) (+ 0 1)))))))

;; sqrt_po_2, Why obligation from file "", line 0, characters 0-0:
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (NEQ x 0)
(IMPLIES (<= x 3) (AND (<= (* 1 1) x) (< x (* (+ 1 1) (+ 1 1))))))))

;; sqrt_po_3, Why obligation from file "", line 0, characters 0-0:
(FORALL (x)
(IMPLIES (>= x 0) (IMPLIES (NEQ x 0) (IMPLIES (> x 3) (NEQ 2 0)))))

;; sqrt_po_4, Why obligation from file "", line 0, characters 0-0:
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (NEQ x 0)
(IMPLIES (> x 3)
(IMPLIES (NEQ 2 0)
(FORALL (result)
(IMPLIES (EQ result (int_div (+ x 1) 2))
(AND (> result 0)
(AND (> x 0)
(AND (EQ result (int_div (+ (int_div x x) x) 2))
(AND (< x (* (+ x 1) (+ x 1))) (< x (* (+ result 1) (+ result 1))))))))))))))

;; sqrt_po_5, Why obligation from file "", line 0, characters 0-0:
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (NEQ x 0)
(IMPLIES (> x 3)
(IMPLIES (NEQ 2 0)
(FORALL (result)
(IMPLIES (EQ result (int_div (+ x 1) 2))
(IMPLIES (AND (> result 0)
         (AND (> x 0)
         (AND (EQ result (int_div (+ (int_div x x) x) 2))
         (AND (< x (* (+ x 1) (+ x 1))) (< x (* (+ result 1) (+ result 1)))))))
(FORALL (y)
(FORALL (z)
(IMPLIES (AND (> z 0)
         (AND (> y 0)
         (AND (EQ z (int_div (+ (int_div x y) y) 2))
         (AND (< x (* (+ y 1) (+ y 1))) (< x (* (+ z 1) (+ z 1)))))))
(IMPLIES (< z y) (FORALL (y0) (IMPLIES (EQ y0 z) (NEQ z 0)))))))))))))))

;; sqrt_po_6, Why obligation from file "", line 0, characters 0-0:
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (NEQ x 0)
(IMPLIES (> x 3)
(IMPLIES (NEQ 2 0)
(FORALL (result)
(IMPLIES (EQ result (int_div (+ x 1) 2))
(IMPLIES (AND (> result 0)
         (AND (> x 0)
         (AND (EQ result (int_div (+ (int_div x x) x) 2))
         (AND (< x (* (+ x 1) (+ x 1))) (< x (* (+ result 1) (+ result 1)))))))
(FORALL (y)
(FORALL (z)
(IMPLIES (AND (> z 0)
         (AND (> y 0)
         (AND (EQ z (int_div (+ (int_div x y) y) 2))
         (AND (< x (* (+ y 1) (+ y 1))) (< x (* (+ z 1) (+ z 1)))))))
(IMPLIES (< z y)
(FORALL (y0)
(IMPLIES (EQ y0 z)
(IMPLIES (NEQ z 0)
(FORALL (result0)
(IMPLIES (EQ result0 (int_div x z))
(IMPLIES (NEQ 2 0)
(FORALL (result1)
(IMPLIES (EQ result1 (int_div (+ result0 z) 2))
(FORALL (z0)
(IMPLIES (EQ z0 result1)
(AND
(AND (> z0 0)
(AND (> y0 0)
(AND (EQ z0 (int_div (+ (int_div x y0) y0) 2))
(AND (< x (* (+ y0 1) (+ y0 1))) (< x (* (+ z0 1) (+ z0 1)))))))
(AND (<= 0 y) (< y0 y)))))))))))))))))))))))))

;; sqrt_po_7, Why obligation from file "", line 0, characters 0-0:
(FORALL (x)
(IMPLIES (>= x 0)
(IMPLIES (NEQ x 0)
(IMPLIES (> x 3)
(IMPLIES (NEQ 2 0)
(FORALL (result)
(IMPLIES (EQ result (int_div (+ x 1) 2))
(IMPLIES (AND (> result 0)
         (AND (> x 0)
         (AND (EQ result (int_div (+ (int_div x x) x) 2))
         (AND (< x (* (+ x 1) (+ x 1))) (< x (* (+ result 1) (+ result 1)))))))
(FORALL (y)
(FORALL (z)
(IMPLIES (AND (> z 0)
         (AND (> y 0)
         (AND (EQ z (int_div (+ (int_div x y) y) 2))
         (AND (< x (* (+ y 1) (+ y 1))) (< x (* (+ z 1) (+ z 1)))))))
(IMPLIES (>= z y) (AND (<= (* y y) x) (< x (* (+ y 1) (+ y 1))))))))))))))))

