(BG_PUSH 
  ; array_length
  (FORALL (t i v) (EQ (array_length (store t i v)) (array_length t)))
  ; booleans
  (DISTINCT |@true| |@false|)
  ; exchange
  (FORALL (t1 t2 i j)
	  (IFF (EQ (exchange t1 t2 i j) |@true|)
	       (AND (EQ (array_length t1) (array_length t2))
		    (EQ (select t1 i) (select t2 j))
		    (EQ (select t1 j) (select t2 i))
		    (FORALL (k) (IMPLIES (AND (NEQ k i) (NEQ k j))
					 (EQ (select t1 k) (select t2 k)))))))
  (FORALL (t1 t2 i j)
	  (IMPLIES (EQ (exchange t1 t2 i j) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; permut
  (FORALL (t) (EQ (permut t t) |@true|))
  (FORALL (t1 t2) (IMPLIES (EQ (permut t1 t2) |@true|)
			   (EQ (permut t2 t1) |@true|)))
  (FORALL (t1 t2 t3) (IMPLIES (AND (EQ (permut t1 t2) |@true|)
				   (EQ (permut t2 t3) |@true|))
			      (EQ (permut t1 t3) |@true|)))
  (FORALL 
   (t i j) 
   (EQ (permut t (store (store t i (select t j)) j (select t i))) |@true|))
  (FORALL (t1 t2)
	  (IMPLIES (EQ (permut t1 t2) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; sub_permut
  (FORALL (t g d) (EQ (sub_permut g d t t) |@true|))
  (FORALL (t1 t2 g d) (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
			   (EQ (sub_permut g d t2 t1) |@true|)))
  (FORALL (t1 t2 t3 g d) (IMPLIES (AND (EQ (sub_permut g d t1 t2) |@true|)
				       (EQ (sub_permut g d t2 t3) |@true|))
				  (EQ (sub_permut g d t1 t3) |@true|)))
  (FORALL 
   (t g d i j) 
   (IMPLIES (AND (<= g i) (<= i d) (<= g j) (<= j d))
	    (EQ (sub_permut g d t 
			    (store (store t i (select t j)) j (select t i))) 
		|@true|)))
  (FORALL 
   (t1 t2 g d i j)
   (IMPLIES (AND (EQ (exchange t1 t2 i j) |@true|)
		 (<= g i) (<= i d) (<= g j) (<= j d))
	    (EQ (sub_permut g d t1 t2) |@true|)))
  (FORALL (t1 t2 i j) 
	  (IMPLIES (EQ (sub_permut i j t1 t2) |@true|)
		   (EQ (permut t1 t2) |@true|)))
  (FORALL (t1 t2 i j)
	  (IMPLIES (EQ (sub_permut i j t1 t2) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; sorted_array
  (FORALL 
   (t i j) 
   (IFF (EQ (sorted_array t i j) |@true|)
	(IMPLIES (<= i j)
		 (FORALL (k) (IMPLIES (AND (<= i k) (< k j))
				      (<= (select t k) (select t (+ k 1))))))))
)

(BG_PUSH
  (FORALL (x y) (IMPLIES (<= x y) (<= x (mean x y))))
  (FORALL (x y) (IMPLIES (<= x y) (<= (mean x y) y)))
  (FORALL (t l u) 
	(IFF (EQ (In t l u) |@true|)
             (EXISTS (i) (AND (<= l i) (<= i u) (EQ (select t i) v)))))
)

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom access_update
 (FORALL (t i v) (EQ (access (update t i v) i) v)))

(BG_PUSH
 ;; Why axiom access_update_neq
 (FORALL (t i j v)
 (IMPLIES (NEQ i j) (EQ (access (update t i v) j) (access t j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j)
 (FORALL (t v) (EQ (access (update t i v) j) (access t j))))))

(DEFPRED (sorted_array t i j)
  (FORALL (k)
  (IMPLIES (AND (<= i k) (< k j)) (<= (access t k) (access t (+ k 1))))))

(DEFPRED (exchange t1 t2 i j)
  (AND (EQ (array_length t1) (array_length t2))
  (AND (EQ (access t1 i) (access t2 j))
  (AND (EQ (access t2 i) (access t1 j))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i) (NEQ k j)) (EQ (access t1 k) (access t2 k))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t) (EQ (permut t t) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1 t2)
 (IMPLIES (EQ (permut t1 t2) |@true|) (EQ (permut t2 t1) |@true|))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1 t2 t3)
 (IMPLIES (AND (EQ (permut t1 t2) |@true|) (EQ (permut t2 t3) |@true|))
 (EQ (permut t1 t3) |@true|))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (t i j)
 (EQ (permut t (update (update t i (access t j)) j (access t i))) |@true|)))

(BG_PUSH
 ;; Why axiom sub_permut_refl
 (FORALL (t g d) (EQ (sub_permut g d t t) |@true|)))

(BG_PUSH
 ;; Why axiom sub_permut_sym
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (sub_permut g d t2 t1) |@true|))))

(BG_PUSH
 ;; Why axiom sub_permut_trans
 (FORALL (t1 t2 t3 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))

 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_1
 (FORALL (t g d i j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (EQ (sub_permut
 g d t (update (update t i (access t j)) j (access t i))) |@true|)))

 (FORALL (g d i j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (FORALL (t)
 (EQ (sub_permut
 g d t (update (update t i (access t j)) j (access t i))) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_2
 (FORALL (t1 t2 g d i j)
 (IMPLIES
 (AND (<= g i)
 (AND (<= i d) (AND (<= g j) (AND (<= j d) (exchange t1 t2 i j)))))
 (EQ (sub_permut g d t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom sub_permut_weakening
 (FORALL (a1 a2 l1 r1 l2 r2)
 (IMPLIES (AND (<= l1 l2) (AND (<= l2 r2) (<= r2 r1)))
 (IMPLIES (EQ (sub_permut l2 r2 a1 a2) |@true|)
 (EQ (sub_permut l1 r1 a1 a2) |@true|))))

 (FORALL (l1 r1 l2 r2)
 (IMPLIES (AND (<= l1 l2) (AND (<= l2 r2) (<= r2 r1)))
 (FORALL (a2 a1)
 (IMPLIES (EQ (sub_permut l2 r2 a1 a2) |@true|)
 (EQ (sub_permut l1 r1 a1 a2) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_permut_eq
 (FORALL (a1 a2 l r)
 (IMPLIES (<= l r)
 (IMPLIES (EQ (sub_permut l r a1 a2) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< r i)) (EQ (access a2 i) (access a1 i)))))))

 (FORALL (l r)
 (IMPLIES (<= l r)
 (FORALL (a2 a1)
 (IMPLIES (EQ (sub_permut l r a1 a2) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< r i)) (EQ (access a2 i) (access a1 i)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_permut
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|) (EQ (permut t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (t i v) (EQ (array_length (update t i v)) (array_length t))))

(BG_PUSH
 ;; Why axiom sub_permut_array_length
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2)))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (t1 t2)
 (IMPLIES (EQ (permut t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2)))))

;; binary_search_po_1, File "bsearch.mlw", line 18, characters 3-164
(FORALL (t)
(IMPLIES (AND (>= (array_length t) 1)
         (sorted_array t 1 (- (array_length t) 1)))
(FORALL (l)
(IMPLIES (EQ l 1)
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (u)
(IMPLIES (EQ u (- result 1))
(FORALL (p)
(IMPLIES (EQ p 0)
(AND (<= 1 l)
(AND (<= u (- (array_length t) 1))
(AND (AND (<= 0 p) (<= p (- (array_length t) 1)))
(AND
(IMPLIES (EQ p 0)
(IMPLIES (EQ (In t 1 (- (array_length t) 1)) |@true|)
(EQ (In t l u) |@true|))) (IMPLIES (> p 0) (EQ (access t p) v))))))))))))))))

;; binary_search_po_2, File "bsearch.mlw", line 23, characters 15-32
(FORALL (t)
(IMPLIES (AND (>= (array_length t) 1)
         (sorted_array t 1 (- (array_length t) 1)))
(FORALL (l)
(IMPLIES (EQ l 1)
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (u)
(IMPLIES (EQ u (- result 1))
(FORALL (p)
(IMPLIES (EQ p 0)
(FORALL (l0)
(FORALL (p0)
(FORALL (u0)
(IMPLIES (AND (<= 1 l0)
         (AND (<= u0 (- (array_length t) 1))
         (AND (AND (<= 0 p0) (<= p0 (- (array_length t) 1)))
         (AND
         (IMPLIES (EQ p0 0)
         (IMPLIES (EQ (In t 1 (- (array_length t) 1)) |@true|)
         (EQ (In t l0 u0) |@true|))) (IMPLIES (> p0 0) (EQ (access t p0) v))))))
(IMPLIES (<= l0 u0)
(FORALL (m) (IMPLIES (EQ m (mean l0 u0)) (AND (<= l0 m) (<= m u0)))))))))))))))))))

;; binary_search_po_3, File "bsearch.mlw", line 24, characters 9-14
(FORALL (t)
(IMPLIES (AND (>= (array_length t) 1)
         (sorted_array t 1 (- (array_length t) 1)))
(FORALL (l)
(IMPLIES (EQ l 1)
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (u)
(IMPLIES (EQ u (- result 1))
(FORALL (p)
(IMPLIES (EQ p 0)
(FORALL (l0)
(FORALL (p0)
(FORALL (u0)
(IMPLIES (AND (<= 1 l0)
         (AND (<= u0 (- (array_length t) 1))
         (AND (AND (<= 0 p0) (<= p0 (- (array_length t) 1)))
         (AND
         (IMPLIES (EQ p0 0)
         (IMPLIES (EQ (In t 1 (- (array_length t) 1)) |@true|)
         (EQ (In t l0 u0) |@true|))) (IMPLIES (> p0 0) (EQ (access t p0) v))))))
(IMPLIES (<= l0 u0)
(FORALL (m)
(IMPLIES (EQ m (mean l0 u0))
(IMPLIES (AND (<= l0 m) (<= m u0)) (AND (<= 0 m) (< m (array_length t)))))))))))))))))))))

;; binary_search_po_4, File "bsearch.mlw", line 18, characters 3-164
(FORALL (t)
(IMPLIES (AND (>= (array_length t) 1)
         (sorted_array t 1 (- (array_length t) 1)))
(FORALL (l)
(IMPLIES (EQ l 1)
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (u)
(IMPLIES (EQ u (- result 1))
(FORALL (p)
(IMPLIES (EQ p 0)
(FORALL (l0)
(FORALL (p0)
(FORALL (u0)
(IMPLIES (AND (<= 1 l0)
         (AND (<= u0 (- (array_length t) 1))
         (AND (AND (<= 0 p0) (<= p0 (- (array_length t) 1)))
         (AND
         (IMPLIES (EQ p0 0)
         (IMPLIES (EQ (In t 1 (- (array_length t) 1)) |@true|)
         (EQ (In t l0 u0) |@true|))) (IMPLIES (> p0 0) (EQ (access t p0) v))))))
(IMPLIES (<= l0 u0)
(FORALL (m)
(IMPLIES (EQ m (mean l0 u0))
(IMPLIES (AND (<= l0 m) (<= m u0))
(IMPLIES (AND (<= 0 m) (< m (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t m))
(IMPLIES (< result0 v)
(FORALL (l1)
(IMPLIES (EQ l1 (+ m 1))
(AND (<= 1 l1)
(AND (<= u0 (- (array_length t) 1))
(AND (AND (<= 0 p0) (<= p0 (- (array_length t) 1)))
(AND
(IMPLIES (EQ p0 0)
(IMPLIES (EQ (In t 1 (- (array_length t) 1)) |@true|)
(EQ (In t l1 u0) |@true|))) (IMPLIES (> p0 0) (EQ (access t p0) v))))))))))))))))))))))))))))))

;; binary_search_po_5, File "bsearch.mlw", line 21, characters 16-21
(FORALL (t)
(IMPLIES (AND (>= (array_length t) 1)
         (sorted_array t 1 (- (array_length t) 1)))
(FORALL (l)
(IMPLIES (EQ l 1)
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (u)
(IMPLIES (EQ u (- result 1))
(FORALL (p)
(IMPLIES (EQ p 0)
(FORALL (l0)
(FORALL (p0)
(FORALL (u0)
(IMPLIES (AND (<= 1 l0)
         (AND (<= u0 (- (array_length t) 1))
         (AND (AND (<= 0 p0) (<= p0 (- (array_length t) 1)))
         (AND
         (IMPLIES (EQ p0 0)
         (IMPLIES (EQ (In t 1 (- (array_length t) 1)) |@true|)
         (EQ (In t l0 u0) |@true|))) (IMPLIES (> p0 0) (EQ (access t p0) v))))))
(IMPLIES (<= l0 u0)
(FORALL (m)
(IMPLIES (EQ m (mean l0 u0))
(IMPLIES (AND (<= l0 m) (<= m u0))
(IMPLIES (AND (<= 0 m) (< m (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t m))
(IMPLIES (< result0 v)
(FORALL (l1)
(IMPLIES (EQ l1 (+ m 1))
(AND (<= 0 (- (+ 2 u0) l0)) (< (- (+ 2 u0) l1) (- (+ 2 u0) l0)))))))))))))))))))))))))))

;; binary_search_po_6, File "bsearch.mlw", line 18, characters 3-164
(FORALL (t)
(IMPLIES (AND (>= (array_length t) 1)
         (sorted_array t 1 (- (array_length t) 1)))
(FORALL (l)
(IMPLIES (EQ l 1)
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (u)
(IMPLIES (EQ u (- result 1))
(FORALL (p)
(IMPLIES (EQ p 0)
(FORALL (l0)
(FORALL (p0)
(FORALL (u0)
(IMPLIES (AND (<= 1 l0)
         (AND (<= u0 (- (array_length t) 1))
         (AND (AND (<= 0 p0) (<= p0 (- (array_length t) 1)))
         (AND
         (IMPLIES (EQ p0 0)
         (IMPLIES (EQ (In t 1 (- (array_length t) 1)) |@true|)
         (EQ (In t l0 u0) |@true|))) (IMPLIES (> p0 0) (EQ (access t p0) v))))))
(IMPLIES (<= l0 u0)
(FORALL (m)
(IMPLIES (EQ m (mean l0 u0))
(IMPLIES (AND (<= l0 m) (<= m u0))
(IMPLIES (AND (<= 0 m) (< m (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t m))
(IMPLIES (>= result0 v)
(IMPLIES (AND (<= 0 m) (< m (array_length t)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t m))
(IMPLIES (> result1 v)
(FORALL (u1)
(IMPLIES (EQ u1 (- m 1))
(AND (<= 1 l0)
(AND (<= u1 (- (array_length t) 1))
(AND (AND (<= 0 p0) (<= p0 (- (array_length t) 1)))
(AND
(IMPLIES (EQ p0 0)
(IMPLIES (EQ (In t 1 (- (array_length t) 1)) |@true|)
(EQ (In t l0 u1) |@true|))) (IMPLIES (> p0 0) (EQ (access t p0) v))))))))))))))))))))))))))))))))))

;; binary_search_po_7, File "bsearch.mlw", line 21, characters 16-21
(FORALL (t)
(IMPLIES (AND (>= (array_length t) 1)
         (sorted_array t 1 (- (array_length t) 1)))
(FORALL (l)
(IMPLIES (EQ l 1)
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (u)
(IMPLIES (EQ u (- result 1))
(FORALL (p)
(IMPLIES (EQ p 0)
(FORALL (l0)
(FORALL (p0)
(FORALL (u0)
(IMPLIES (AND (<= 1 l0)
         (AND (<= u0 (- (array_length t) 1))
         (AND (AND (<= 0 p0) (<= p0 (- (array_length t) 1)))
         (AND
         (IMPLIES (EQ p0 0)
         (IMPLIES (EQ (In t 1 (- (array_length t) 1)) |@true|)
         (EQ (In t l0 u0) |@true|))) (IMPLIES (> p0 0) (EQ (access t p0) v))))))
(IMPLIES (<= l0 u0)
(FORALL (m)
(IMPLIES (EQ m (mean l0 u0))
(IMPLIES (AND (<= l0 m) (<= m u0))
(IMPLIES (AND (<= 0 m) (< m (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t m))
(IMPLIES (>= result0 v)
(IMPLIES (AND (<= 0 m) (< m (array_length t)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t m))
(IMPLIES (> result1 v)
(FORALL (u1)
(IMPLIES (EQ u1 (- m 1))
(AND (<= 0 (- (+ 2 u0) l0)) (< (- (+ 2 u1) l0) (- (+ 2 u0) l0)))))))))))))))))))))))))))))))

;; binary_search_po_8, File "bsearch.mlw", line 18, characters 3-164
(FORALL (t)
(IMPLIES (AND (>= (array_length t) 1)
         (sorted_array t 1 (- (array_length t) 1)))
(FORALL (l)
(IMPLIES (EQ l 1)
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (u)
(IMPLIES (EQ u (- result 1))
(FORALL (p)
(IMPLIES (EQ p 0)
(FORALL (l0)
(FORALL (p0)
(FORALL (u0)
(IMPLIES (AND (<= 1 l0)
         (AND (<= u0 (- (array_length t) 1))
         (AND (AND (<= 0 p0) (<= p0 (- (array_length t) 1)))
         (AND
         (IMPLIES (EQ p0 0)
         (IMPLIES (EQ (In t 1 (- (array_length t) 1)) |@true|)
         (EQ (In t l0 u0) |@true|))) (IMPLIES (> p0 0) (EQ (access t p0) v))))))
(IMPLIES (<= l0 u0)
(FORALL (m)
(IMPLIES (EQ m (mean l0 u0))
(IMPLIES (AND (<= l0 m) (<= m u0))
(IMPLIES (AND (<= 0 m) (< m (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t m))
(IMPLIES (>= result0 v)
(IMPLIES (AND (<= 0 m) (< m (array_length t)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t m))
(IMPLIES (<= result1 v)
(FORALL (p1)
(IMPLIES (EQ p1 m)
(FORALL (l1)
(IMPLIES (EQ l1 (+ u0 1))
(AND (<= 1 l1)
(AND (<= u0 (- (array_length t) 1))
(AND (AND (<= 0 p1) (<= p1 (- (array_length t) 1)))
(AND
(IMPLIES (EQ p1 0)
(IMPLIES (EQ (In t 1 (- (array_length t) 1)) |@true|)
(EQ (In t l1 u0) |@true|))) (IMPLIES (> p1 0) (EQ (access t p1) v))))))))))))))))))))))))))))))))))))

;; binary_search_po_9, File "bsearch.mlw", line 21, characters 16-21
(FORALL (t)
(IMPLIES (AND (>= (array_length t) 1)
         (sorted_array t 1 (- (array_length t) 1)))
(FORALL (l)
(IMPLIES (EQ l 1)
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (u)
(IMPLIES (EQ u (- result 1))
(FORALL (p)
(IMPLIES (EQ p 0)
(FORALL (l0)
(FORALL (p0)
(FORALL (u0)
(IMPLIES (AND (<= 1 l0)
         (AND (<= u0 (- (array_length t) 1))
         (AND (AND (<= 0 p0) (<= p0 (- (array_length t) 1)))
         (AND
         (IMPLIES (EQ p0 0)
         (IMPLIES (EQ (In t 1 (- (array_length t) 1)) |@true|)
         (EQ (In t l0 u0) |@true|))) (IMPLIES (> p0 0) (EQ (access t p0) v))))))
(IMPLIES (<= l0 u0)
(FORALL (m)
(IMPLIES (EQ m (mean l0 u0))
(IMPLIES (AND (<= l0 m) (<= m u0))
(IMPLIES (AND (<= 0 m) (< m (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t m))
(IMPLIES (>= result0 v)
(IMPLIES (AND (<= 0 m) (< m (array_length t)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t m))
(IMPLIES (<= result1 v)
(FORALL (p1)
(IMPLIES (EQ p1 m)
(FORALL (l1)
(IMPLIES (EQ l1 (+ u0 1))
(AND (<= 0 (- (+ 2 u0) l0)) (< (- (+ 2 u0) l1) (- (+ 2 u0) l0)))))))))))))))))))))))))))))))))

;; binary_search_po_10, File "bsearch.mlw", line 33, characters 4-94
(FORALL (t)
(IMPLIES (AND (>= (array_length t) 1)
         (sorted_array t 1 (- (array_length t) 1)))
(FORALL (l)
(IMPLIES (EQ l 1)
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (u)
(IMPLIES (EQ u (- result 1))
(FORALL (p)
(IMPLIES (EQ p 0)
(FORALL (l0)
(FORALL (p0)
(FORALL (u0)
(IMPLIES (AND (<= 1 l0)
         (AND (<= u0 (- (array_length t) 1))
         (AND (AND (<= 0 p0) (<= p0 (- (array_length t) 1)))
         (AND
         (IMPLIES (EQ p0 0)
         (IMPLIES (EQ (In t 1 (- (array_length t) 1)) |@true|)
         (EQ (In t l0 u0) |@true|))) (IMPLIES (> p0 0) (EQ (access t p0) v))))))
(IMPLIES (> l0 u0)
(OR (AND (AND (<= 1 p0) (<= p0 (- (array_length t) 1))) (EQ (access t p0) v))
(AND (EQ p0 0) (NOT (EQ (In t 1 (- (array_length t) 1)) |@true|)))))))))))))))))))

