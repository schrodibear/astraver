
> It is implicit that both Simplify and Ergo were needed and were used
> for different kinds of goals. Could the readers be given some clue
> about the differences?

There is at least one VC which was proved by Ergo and not by Simplify
and at least one proved by Simplify and not by Ergo. This is why I'm
mentioning both. I also used Yices but it didn't prove any VC which
was not proved by the two others, that's why I'm not mentioning it.

> Aren't "ghost" variables simply history variables that strengthen the
> invariant? 

Indeed they are history variables. Without these ghost variables, it
is possible to give the program a specification (with an adequate
definition of the number of solutions to the n-queens problem) but it
is not possible to establish it, because we cannot connect the number
being computed with the solutions seen so far. And this connection
is indeed the invariant of the program.

> This tool was already presented in previous papers and I believe the
> novelty in this paper relative to the previous ones is not big enough.  

It is true that Caduceus has already been presented (in a single paper
dated 2004). This paper is rather a case study in formal verification
than a presentation of Caduceus. And one of its main arguments is the
use of ghost code, which was not discussed at all in the 2004 paper.

> The paper doesn't give many details of this axiomatization.  Would
> the axioms be useful in other tools?  Could they be rephrased to
> work better with automatic SMT solvers?  

Some of the axioms are general enough to be part of a library and
others are indeed specific to this case study. The former could
definitely benefit from a SMT solver with a built-in decision
procedure for finite sets, for instance, but I do not have one at my
disposal, unfortunately.

> How does one know that the special functions are axiomatized
> correctly?

As I tried to say in the very last paragraph of the paper, all these
axioms could actually be proved using a suitable model of machine
arithmetic, with Coq for instance. So, as pointed out by the third
reviewer, I could for instance prove the properties of min_elt instead
of simply axiomatizing them.

> With such a high proportion of manual proofs, it might be that
> standard tactics in interactive theorem provers could have
> discharged the ones that Simplify did automatically in this case study.

The standard Coq tactics are *really* less efficient than Simplify or
Ergo, as soon as the goal mixes equality, arithmetic and instantiation
of universally quantified axioms. The use of automatic provers made a
huge difference in this case study.
