(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Axiom magic:False. Ltac admit := elim magic.

Require Export Why.

(*Why logic*) Definition N : Z.
Admitted.

(*Why type*) Definition iset: Set.
Admitted.

(*Why logic*) Definition in_ : Z -> iset -> Prop.
Admitted.

(*Why predicate*) Definition included  (a:iset) (b:iset)
  := (forall (i:Z), ((in_ i a) -> (in_ i b))).

(*Why logic*) Definition card : iset -> Z.
Admitted.

(*Why axiom*) Lemma card_nonneg : (forall (s:iset), (card s) >= 0).
Admitted.

(*Why logic*) Definition empty : iset.
Admitted.

(*Why axiom*) Lemma empty_def : (forall (i:Z), ~(in_ i empty)).
Admitted.

(*Why logic*) Definition diff : iset -> iset -> iset.
Admitted.

(*Why axiom*) Lemma diff_def :
  (forall (a:iset),
   (forall (b:iset),
    (forall (i:Z), ((in_ i (diff a b)) <-> (in_ i a) /\ ~(in_ i b))))).
Admitted.

(*Why logic*) Definition add : Z -> iset -> iset.
Admitted.

(*Why axiom*) Lemma add_def :
  (forall (s:iset),
   (forall (x:Z), (forall (i:Z), ((in_ i (add x s)) <-> i = x \/ (in_ i s))))).
Admitted.

(*Why logic*) Definition remove : Z -> iset -> iset.
Admitted.

(*Why axiom*) Lemma remove_def :
  (forall (s:iset),
   (forall (x:Z),
    (forall (i:Z), ((in_ i (remove x s)) <-> (in_ i s) /\ i <> x)))).
Admitted.

(*Why axiom*) Lemma remove_card :
  (forall (s:iset),
   (forall (i:Z), ((in_ i s) -> (card (remove i s)) = ((card s) - 1)))).
Admitted.

(*Why logic*) Definition min_elt : iset -> Z.
Admitted.

(*Why axiom*) Lemma min_elt_def :
  (forall (s:iset),
   ((card s) > 0 -> (in_ (min_elt s) s) /\
    (forall (i:Z), ((in_ i s) -> (min_elt s) <= i)))).
Admitted.

(*Why logic*) Definition succ : iset -> iset.
Admitted.

(*Why axiom*) Lemma succ_def :
  (forall (s:iset),
   (forall (i:Z), (0 <= i -> ((in_ (i + 1) (succ s)) <-> (in_ i s))))).
Admitted.

(*Why logic*) Definition pred : iset -> iset.
Admitted.

(*Why axiom*) Lemma pred_def :
  (forall (s:iset),
   (forall (i:Z), (0 <= i -> ((in_ i (pred s)) <-> (in_ (i + 1) s))))).
Admitted.

(*Why type*) Definition arr: Set ->Set.
Admitted.

(*Why logic*) Definition acc : forall (A1:Set), ((arr) A1) -> Z -> A1.
Admitted.
Implicit Arguments acc.

(*Why logic*) Definition upd :
  forall (A1:Set), ((arr) A1) -> Z -> A1 -> ((arr) A1).
Admitted.
Implicit Arguments upd.

(*Why axiom*) Lemma acc_upd_eq :
  forall (A1:Set),
  (forall (a:((arr) A1)),
   (forall (i:Z), (forall (v:A1), (acc (upd a i v) i) = v))).
Admitted.
Implicit Arguments acc_upd_eq.

(*Why axiom*) Lemma acc_upd_neq :
  forall (A1:Set),
  (forall (a:((arr) A1)),
   (forall (i:Z),
    (forall (j:Z),
     (forall (v:A1), (i <> j -> (acc (upd a i v) j) = (acc a j)))))).
Admitted.
Implicit Arguments acc_upd_neq.

(*Why predicate*) Definition assigns (A82:Set) (t:((arr) A82))
  (u:((arr) A82)) (i:Z) := (forall (k:Z), (k < i -> (acc t k) = (acc u k))).
Implicit Arguments assigns.

(*Why predicate*) Definition partial_solution  (k:Z) (s:((arr) Z))
  := (forall (i:Z),
      (0 <= i /\ i < k -> (0 <= (acc s i) /\ (acc s i) < N) /\
       (forall (j:Z),
        (0 <= j /\ j < i -> (acc s i) <> (acc s j) /\
         ((acc s i) - (acc s j)) <> (i - j) /\ ((acc s i) - (acc s j)) <>
         (j - i))))).

(*Why predicate*) Definition solution  (s:((arr) Z))
  := (partial_solution N s).

(*Why axiom*) Lemma partial_solution_assigns :
  (forall (t:((arr) Z)),
   (forall (u:((arr) Z)),
    (forall (k:Z),
     ((partial_solution k t) -> ((assigns t u k) -> (partial_solution k u)))))).
Admitted.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_1 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_2: (card a) = 0),
  (solution col).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_2 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_2: (card a) = 0),
  forall (HW_3: (solution col)),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_4: s0 = (s + 1) /\ (assigns sol sol0 s) /\ (acc sol0 s) = col),
  1 = (s0 - s).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_3 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_2: (card a) = 0),
  forall (HW_3: (solution col)),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_4: s0 = (s + 1) /\ (assigns sol sol0 s) /\ (acc sol0 s) = col),
  1 >= 0.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_4 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_2: (card a) = 0),
  forall (HW_3: (solution col)),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_4: s0 = (s + 1) /\ (assigns sol sol0 s) /\ (acc sol0 s) = col),
  (assigns col col k).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_5 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_2: (card a) = 0),
  forall (HW_3: (solution col)),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_4: s0 = (s + 1) /\ (assigns sol sol0 s) /\ (acc sol0 s) = col),
  (assigns sol sol0 s).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_6 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  (included (diff (diff a b) c) (diff (diff a b) c)).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_7 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  0 = (s - s).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_8 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  0 >= 0.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_9 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  (partial_solution k col).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_10 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  (assigns col col k).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_11 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  (assigns sol sol s).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_12 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  0 <= (card a).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_13 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  (card (remove (min_elt e) a)) < (card a).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_14 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  0 <= k1.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_15 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  (k1 + (card (remove (min_elt e) a))) = N.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_16 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (i: Z),
  forall (HW_13: (in_ i (remove (min_elt e) a))),
  (* pre_a *) 0 <= i.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_17 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (i: Z),
  forall (HW_13: (in_ i (remove (min_elt e) a))),
  (* pre_a *) i < N.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_18 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (i: Z),
  forall (HW_13: (in_ i (remove (min_elt e) a))),
  forall (j: Z),
  forall (HW_14: 0 <= j /\ j < k1),
  (* pre_a *) i <> (acc col1 j).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_19 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (i: Z),
  forall (HW_15: (0 <= i /\ i < N) /\
                 (forall (j:Z), (0 <= j /\ j < k1 -> i <> (acc col1 j)))),
  (* pre_a *) (in_ i (remove (min_elt e) a)).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_20 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (i: Z),
  forall (HW_16: 0 <= i),
  forall (HW_17: (in_ i (succ (add (min_elt e) b)))),
  (* pre_a *)
  (* pre_b *) (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) = (i + j - k1)).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_21 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (i: Z),
  forall (HW_16: 0 <= i),
  forall (HW_18: (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                  (i + j - k1))),
  (* pre_a *) (* pre_b *) (in_ i (succ (add (min_elt e) b))).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_22 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (i: Z),
  forall (HW_19: 0 <= i),
  forall (HW_20: (in_ i (pred (add (min_elt e) c)))),
  (* pre_a *)
  (* pre_b *)
  (* pre_c *) (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) = (i + k1 - j)).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_23 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (i: Z),
  forall (HW_19: 0 <= i),
  forall (HW_21: (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                  (i + k1 - j))),
  (* pre_a *) (* pre_b *) (* pre_c *) (in_ i (pred (add (min_elt e) c))).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_24 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  (* pre_a *) (* pre_b *) (* pre_c *) (partial_solution k1 col1).
Proof.
intros; unfold partial_solution.
intros.
assert (i<k0 \/ i=k0). omega.
destruct H0.
unfold partial_solution in HW_7.
subst col1.
rewrite (acc_upd_neq).
decompose [and] HW_7.
generalize (H5 i); clear H5.
intros; split.
intuition.
intros.
rewrite acc_upd_neq.
assert (0<=i<k0). omega.
generalize (H5 H9); clear H5; intros (_,h).
generalize (h j); intuition.
omega.
omega.
subst col1 i.
rewrite acc_upd_eq.
split.
admit.
intros; rewrite acc_upd_neq.
decompose [and] HW_7.
red in H5.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_25 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (HW_22: 0 <= k1 /\ (k1 + (card (remove (min_elt e) a))) = N /\
                 (* pre_a *)
                 ((forall (i:Z),
                   ((in_ i (remove (min_elt e) a)) <-> (0 <= i /\ i < N) /\
                    (forall (j:Z), (0 <= j /\ j < k1 -> i <> (acc col1 j))))) /\
                 (* pre_b *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (succ (add (min_elt e) b))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + j - k1))))) /\
                 (* pre_c *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (pred (add (min_elt e) c))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + k1 - j))))) /\
                 (partial_solution k1 col1))))),
  forall (result: Z),
  forall (col2: ((arr) Z)),
  forall (k2: Z),
  forall (s1: Z),
  forall (sol1: ((arr) ((arr) Z))),
  forall (HW_23: result = (s1 - s0) /\ result >= 0 /\ k2 = k1 /\
                 (assigns col1 col2 k2) /\ (assigns sol0 sol1 s0)),
  forall (f0: Z),
  forall (HW_24: f0 = (f + result)),
  forall (k3: Z),
  forall (HW_25: k3 = (k2 - 1)),
  (included e0 (diff (diff a b) c)).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_26 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (HW_22: 0 <= k1 /\ (k1 + (card (remove (min_elt e) a))) = N /\
                 (* pre_a *)
                 ((forall (i:Z),
                   ((in_ i (remove (min_elt e) a)) <-> (0 <= i /\ i < N) /\
                    (forall (j:Z), (0 <= j /\ j < k1 -> i <> (acc col1 j))))) /\
                 (* pre_b *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (succ (add (min_elt e) b))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + j - k1))))) /\
                 (* pre_c *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (pred (add (min_elt e) c))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + k1 - j))))) /\
                 (partial_solution k1 col1))))),
  forall (result: Z),
  forall (col2: ((arr) Z)),
  forall (k2: Z),
  forall (s1: Z),
  forall (sol1: ((arr) ((arr) Z))),
  forall (HW_23: result = (s1 - s0) /\ result >= 0 /\ k2 = k1 /\
                 (assigns col1 col2 k2) /\ (assigns sol0 sol1 s0)),
  forall (f0: Z),
  forall (HW_24: f0 = (f + result)),
  forall (k3: Z),
  forall (HW_25: k3 = (k2 - 1)),
  f0 = (s1 - s).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_27 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (HW_22: 0 <= k1 /\ (k1 + (card (remove (min_elt e) a))) = N /\
                 (* pre_a *)
                 ((forall (i:Z),
                   ((in_ i (remove (min_elt e) a)) <-> (0 <= i /\ i < N) /\
                    (forall (j:Z), (0 <= j /\ j < k1 -> i <> (acc col1 j))))) /\
                 (* pre_b *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (succ (add (min_elt e) b))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + j - k1))))) /\
                 (* pre_c *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (pred (add (min_elt e) c))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + k1 - j))))) /\
                 (partial_solution k1 col1))))),
  forall (result: Z),
  forall (col2: ((arr) Z)),
  forall (k2: Z),
  forall (s1: Z),
  forall (sol1: ((arr) ((arr) Z))),
  forall (HW_23: result = (s1 - s0) /\ result >= 0 /\ k2 = k1 /\
                 (assigns col1 col2 k2) /\ (assigns sol0 sol1 s0)),
  forall (f0: Z),
  forall (HW_24: f0 = (f + result)),
  forall (k3: Z),
  forall (HW_25: k3 = (k2 - 1)),
  f0 >= 0.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_28 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (HW_22: 0 <= k1 /\ (k1 + (card (remove (min_elt e) a))) = N /\
                 (* pre_a *)
                 ((forall (i:Z),
                   ((in_ i (remove (min_elt e) a)) <-> (0 <= i /\ i < N) /\
                    (forall (j:Z), (0 <= j /\ j < k1 -> i <> (acc col1 j))))) /\
                 (* pre_b *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (succ (add (min_elt e) b))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + j - k1))))) /\
                 (* pre_c *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (pred (add (min_elt e) c))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + k1 - j))))) /\
                 (partial_solution k1 col1))))),
  forall (result: Z),
  forall (col2: ((arr) Z)),
  forall (k2: Z),
  forall (s1: Z),
  forall (sol1: ((arr) ((arr) Z))),
  forall (HW_23: result = (s1 - s0) /\ result >= 0 /\ k2 = k1 /\
                 (assigns col1 col2 k2) /\ (assigns sol0 sol1 s0)),
  forall (f0: Z),
  forall (HW_24: f0 = (f + result)),
  forall (k3: Z),
  forall (HW_25: k3 = (k2 - 1)),
  k3 = k.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_29 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (HW_22: 0 <= k1 /\ (k1 + (card (remove (min_elt e) a))) = N /\
                 (* pre_a *)
                 ((forall (i:Z),
                   ((in_ i (remove (min_elt e) a)) <-> (0 <= i /\ i < N) /\
                    (forall (j:Z), (0 <= j /\ j < k1 -> i <> (acc col1 j))))) /\
                 (* pre_b *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (succ (add (min_elt e) b))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + j - k1))))) /\
                 (* pre_c *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (pred (add (min_elt e) c))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + k1 - j))))) /\
                 (partial_solution k1 col1))))),
  forall (result: Z),
  forall (col2: ((arr) Z)),
  forall (k2: Z),
  forall (s1: Z),
  forall (sol1: ((arr) ((arr) Z))),
  forall (HW_23: result = (s1 - s0) /\ result >= 0 /\ k2 = k1 /\
                 (assigns col1 col2 k2) /\ (assigns sol0 sol1 s0)),
  forall (f0: Z),
  forall (HW_24: f0 = (f + result)),
  forall (k3: Z),
  forall (HW_25: k3 = (k2 - 1)),
  (partial_solution k3 col2).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_30 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (HW_22: 0 <= k1 /\ (k1 + (card (remove (min_elt e) a))) = N /\
                 (* pre_a *)
                 ((forall (i:Z),
                   ((in_ i (remove (min_elt e) a)) <-> (0 <= i /\ i < N) /\
                    (forall (j:Z), (0 <= j /\ j < k1 -> i <> (acc col1 j))))) /\
                 (* pre_b *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (succ (add (min_elt e) b))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + j - k1))))) /\
                 (* pre_c *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (pred (add (min_elt e) c))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + k1 - j))))) /\
                 (partial_solution k1 col1))))),
  forall (result: Z),
  forall (col2: ((arr) Z)),
  forall (k2: Z),
  forall (s1: Z),
  forall (sol1: ((arr) ((arr) Z))),
  forall (HW_23: result = (s1 - s0) /\ result >= 0 /\ k2 = k1 /\
                 (assigns col1 col2 k2) /\ (assigns sol0 sol1 s0)),
  forall (f0: Z),
  forall (HW_24: f0 = (f + result)),
  forall (k3: Z),
  forall (HW_25: k3 = (k2 - 1)),
  (assigns col col2 k).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_31 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (HW_22: 0 <= k1 /\ (k1 + (card (remove (min_elt e) a))) = N /\
                 (* pre_a *)
                 ((forall (i:Z),
                   ((in_ i (remove (min_elt e) a)) <-> (0 <= i /\ i < N) /\
                    (forall (j:Z), (0 <= j /\ j < k1 -> i <> (acc col1 j))))) /\
                 (* pre_b *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (succ (add (min_elt e) b))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + j - k1))))) /\
                 (* pre_c *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (pred (add (min_elt e) c))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + k1 - j))))) /\
                 (partial_solution k1 col1))))),
  forall (result: Z),
  forall (col2: ((arr) Z)),
  forall (k2: Z),
  forall (s1: Z),
  forall (sol1: ((arr) ((arr) Z))),
  forall (HW_23: result = (s1 - s0) /\ result >= 0 /\ k2 = k1 /\
                 (assigns col1 col2 k2) /\ (assigns sol0 sol1 s0)),
  forall (f0: Z),
  forall (HW_24: f0 = (f + result)),
  forall (k3: Z),
  forall (HW_25: k3 = (k2 - 1)),
  (assigns sol sol1 s).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_32 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (HW_22: 0 <= k1 /\ (k1 + (card (remove (min_elt e) a))) = N /\
                 (* pre_a *)
                 ((forall (i:Z),
                   ((in_ i (remove (min_elt e) a)) <-> (0 <= i /\ i < N) /\
                    (forall (j:Z), (0 <= j /\ j < k1 -> i <> (acc col1 j))))) /\
                 (* pre_b *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (succ (add (min_elt e) b))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + j - k1))))) /\
                 (* pre_c *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (pred (add (min_elt e) c))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + k1 - j))))) /\
                 (partial_solution k1 col1))))),
  forall (result: Z),
  forall (col2: ((arr) Z)),
  forall (k2: Z),
  forall (s1: Z),
  forall (sol1: ((arr) ((arr) Z))),
  forall (HW_23: result = (s1 - s0) /\ result >= 0 /\ k2 = k1 /\
                 (assigns col1 col2 k2) /\ (assigns sol0 sol1 s0)),
  forall (f0: Z),
  forall (HW_24: f0 = (f + result)),
  forall (k3: Z),
  forall (HW_25: k3 = (k2 - 1)),
  0 <= (card e).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_33 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_8: (card e) > 0),
  forall (e0: iset),
  forall (HW_9: e0 = (remove (min_elt e) e)),
  forall (col1: ((arr) Z)),
  forall (HW_10: col1 = (upd col0 k0 (min_elt e))),
  forall (k1: Z),
  forall (HW_11: k1 = (k0 + 1)),
  forall (HW_12: (Zwf 0 (card (remove (min_elt e) a)) (card a))),
  forall (HW_22: 0 <= k1 /\ (k1 + (card (remove (min_elt e) a))) = N /\
                 (* pre_a *)
                 ((forall (i:Z),
                   ((in_ i (remove (min_elt e) a)) <-> (0 <= i /\ i < N) /\
                    (forall (j:Z), (0 <= j /\ j < k1 -> i <> (acc col1 j))))) /\
                 (* pre_b *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (succ (add (min_elt e) b))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + j - k1))))) /\
                 (* pre_c *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i (pred (add (min_elt e) c))) <->
                     (exists j:Z, (0 <= j /\ j < k1) /\ (acc col1 j) =
                      (i + k1 - j))))) /\
                 (partial_solution k1 col1))))),
  forall (result: Z),
  forall (col2: ((arr) Z)),
  forall (k2: Z),
  forall (s1: Z),
  forall (sol1: ((arr) ((arr) Z))),
  forall (HW_23: result = (s1 - s0) /\ result >= 0 /\ k2 = k1 /\
                 (assigns col1 col2 k2) /\ (assigns sol0 sol1 s0)),
  forall (f0: Z),
  forall (HW_24: f0 = (f + result)),
  forall (k3: Z),
  forall (HW_25: k3 = (k2 - 1)),
  (card e0) < (card e).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_34 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_26: (card e) <= 0),
  f = (s0 - s).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_35 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_26: (card e) <= 0),
  f >= 0.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_36 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_26: (card e) <= 0),
  k0 = k.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_37 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_26: (card e) <= 0),
  (assigns col col0 k0).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma count_po_38 : 
  forall (a: iset),
  forall (b: iset),
  forall (c: iset),
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: 0 <= k /\ (k + (card a)) = N /\
                (* pre_a *)
                ((forall (i:Z),
                  ((in_ i a) <-> (0 <= i /\ i < N) /\
                   (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                (* pre_b *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i b) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + j - k))))) /\
                (* pre_c *)
                ((forall (i:Z),
                  (0 <= i ->
                   ((in_ i c) <->
                    (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                     (i + k - j))))) /\
                (partial_solution k col))))),
  forall (HW_5: (card a) <> 0),
  forall (HW_6: (included (diff (diff a b) c) (diff (diff a b) c)) /\ 0 =
                (s - s) /\ 0 >= 0 /\ k = k /\ (partial_solution k col) /\
                (assigns col col k) /\ (assigns sol sol s)),
  forall (col0: ((arr) Z)),
  forall (e: iset),
  forall (f: Z),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_7: (included e (diff (diff a b) c)) /\ f = (s0 - s) /\ f >= 0 /\
                k0 = k /\ (partial_solution k0 col0) /\
                (assigns col col0 k) /\ (assigns sol sol0 s)),
  forall (HW_26: (card e) <= 0),
  (assigns sol sol0 s).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(*Why logic*) Definition below_N : iset.
Admitted.

(*Why axiom*) Lemma below_N_def :
  (forall (i:Z), ((in_ i below_N) <-> 0 <= i /\ i < N)).
Admitted.

(*Why axiom*) Lemma below_N_card : (card below_N) = N.
Admitted.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma queens_po_1 : 
  forall (k: Z),
  forall (s: Z),
  forall (HW_1: s = 0 /\ k = 0),
  0 <= k.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma queens_po_2 : 
  forall (k: Z),
  forall (s: Z),
  forall (HW_1: s = 0 /\ k = 0),
  (k + (card below_N)) = N.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma queens_po_3 : 
  forall (k: Z),
  forall (s: Z),
  forall (HW_1: s = 0 /\ k = 0),
  forall (i: Z),
  forall (HW_2: (in_ i below_N)),
  (* pre_a *) 0 <= i.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma queens_po_4 : 
  forall (k: Z),
  forall (s: Z),
  forall (HW_1: s = 0 /\ k = 0),
  forall (i: Z),
  forall (HW_2: (in_ i below_N)),
  (* pre_a *) i < N.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma queens_po_5 : 
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (HW_1: s = 0 /\ k = 0),
  forall (i: Z),
  forall (HW_2: (in_ i below_N)),
  forall (j: Z),
  forall (HW_3: 0 <= j /\ j < k),
  (* pre_a *) i <> (acc col j).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma queens_po_6 : 
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (HW_1: s = 0 /\ k = 0),
  forall (i: Z),
  forall (HW_4: (0 <= i /\ i < N) /\
                (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j)))),
  (* pre_a *) (in_ i below_N).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma queens_po_7 : 
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (HW_1: s = 0 /\ k = 0),
  forall (i: Z),
  forall (HW_5: 0 <= i),
  forall (HW_6: (in_ i empty)),
  (* pre_a *)
  (* pre_b *) (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) = (i + j - k)).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma queens_po_8 : 
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (HW_1: s = 0 /\ k = 0),
  forall (i: Z),
  forall (HW_5: 0 <= i),
  forall (HW_7: (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) = (i + j - k))),
  (* pre_a *) (* pre_b *) (in_ i empty).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma queens_po_9 : 
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (HW_1: s = 0 /\ k = 0),
  forall (i: Z),
  forall (HW_8: 0 <= i),
  forall (HW_9: (in_ i empty)),
  (* pre_a *)
  (* pre_b *)
  (* pre_c *) (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) = (i + k - j)).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma queens_po_10 : 
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (HW_1: s = 0 /\ k = 0),
  forall (i: Z),
  forall (HW_8: 0 <= i),
  forall (HW_10: (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) = (i + k - j))),
  (* pre_a *) (* pre_b *) (* pre_c *) (in_ i empty).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma queens_po_11 : 
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (HW_1: s = 0 /\ k = 0),
  (* pre_a *) (* pre_b *) (* pre_c *) (partial_solution k col).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma queens_po_12 : 
  forall (col: ((arr) Z)),
  forall (k: Z),
  forall (s: Z),
  forall (sol: ((arr) ((arr) Z))),
  forall (HW_1: s = 0 /\ k = 0),
  forall (HW_11: 0 <= k /\ (k + (card below_N)) = N /\
                 (* pre_a *)
                 ((forall (i:Z),
                   ((in_ i below_N) <-> (0 <= i /\ i < N) /\
                    (forall (j:Z), (0 <= j /\ j < k -> i <> (acc col j))))) /\
                 (* pre_b *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i empty) <->
                     (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                      (i + j - k))))) /\
                 (* pre_c *)
                 ((forall (i:Z),
                   (0 <= i ->
                    ((in_ i empty) <->
                     (exists j:Z, (0 <= j /\ j < k) /\ (acc col j) =
                      (i + k - j))))) /\
                 (partial_solution k col))))),
  forall (result: Z),
  forall (col0: ((arr) Z)),
  forall (k0: Z),
  forall (s0: Z),
  forall (sol0: ((arr) ((arr) Z))),
  forall (HW_12: result = (s0 - s) /\ result >= 0 /\ k0 = k /\
                 (assigns col col0 k0) /\ (assigns sol sol0 s)),
  result = s0.
Proof.
admit.
(* FILL PROOF HERE *)
Save.

