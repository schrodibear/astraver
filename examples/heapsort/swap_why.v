(* Load Programs. *)(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.
Require Import Omega.

(* Why obligation from file , characters 153-157 *)
Lemma swap_po_1 :
 forall (i j:Z) (t:array Z)
   (Pre5:((0 <= i)%Z /\ (i < array_length t)%Z) /\
         (0 <= j)%Z /\ (j < array_length t)%Z)
   (Pre4:(0 <= i)%Z /\ (i < array_length t)%Z) (v:Z)
   (Post3:v = access t i) (Pre2:(0 <= i)%Z /\ (i < array_length t)%Z),
   (0 <= j)%Z /\ (j < array_length t)%Z.
Proof.
tauto.
Qed.

(* Why obligation from file , characters 166-175 *)
Lemma swap_po_2 :
 forall (i j:Z) (t:array Z)
   (Pre5:((0 <= i)%Z /\ (i < array_length t)%Z) /\
         (0 <= j)%Z /\ (j < array_length t)%Z)
   (Pre4:(0 <= i)%Z /\ (i < array_length t)%Z) (v:Z)
   (Post3:v = access t i) (Pre2:(0 <= i)%Z /\ (i < array_length t)%Z)
   (Pre3:(0 <= j)%Z /\ (j < array_length t)%Z) (t0:array Z)
   (Post1:t0 = store t i (access t j)),
   (0 <= j)%Z /\ (j < array_length t0)%Z.
Proof.
intros; ArraySubst t0.
Qed.


(* Why obligation from file , characters 132-184 *)
Lemma swap_po_3 :
 forall (i j:Z) (t:array Z)
   (Pre5:((0 <= i)%Z /\ (i < array_length t)%Z) /\
         (0 <= j)%Z /\ (j < array_length t)%Z)
   (Pre4:(0 <= i)%Z /\ (i < array_length t)%Z) (v:Z)
   (Post3:v = access t i) (Pre2:(0 <= i)%Z /\ (i < array_length t)%Z)
   (Pre3:(0 <= j)%Z /\ (j < array_length t)%Z) (t0:array Z)
   (Post1:t0 = store t i (access t j))
   (Pre1:(0 <= j)%Z /\ (j < array_length t0)%Z) (t1:array Z)
   (Post2:t1 = store t0 j v), exchange t1 t i j.
Proof.
intros; subst t1 t0 v.
auto with datatypes.
Qed.


