
UNIT: TYPE;
tt: UNIT;
sqrt_real: [REAL -> REAL];
int_of_real: [REAL -> INT];
mod_int: [[INT, INT] -> INT];

Maximize : [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (n:INT):
       (FORALL (x:INT):
       (FORALL (k:INT):
       (Maximize(t, n, x, k) <=>
       (FORALL (i:INT): (((k <= i) AND (i <= n)) => (t[k] <= x))))))));

%%%% DO NOT EDIT BELOW THIS LINE

%% Why logic sorted_array
sorted_array: [[ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic exchange
exchange: [[ARRAY INT OF INT, ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic sub_permut
sub_permut: [[INT, INT, ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic permut
permut: [[ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic array_le
array_le: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_ge
array_ge: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_length
array_length_INT: [ARRAY INT OF INT -> INT];

%% Why logic store
store_INT: [[ARRAY INT OF INT, INT, INT] -> UNIT];

%% Why axiom array_length_store
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (v:INT):
       (array_length_INT((t WITH [i] := v)) = array_length_INT(t)))));

%% Why logic access
access_INT: [[ARRAY INT OF INT, INT] -> INT];

%% Why axiom exchange_def
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (exchange(t1, t2, i, j) <=>
       ((array_length_INT(t1) = array_length_INT(t2)) AND
       ((t1[i] = t2[j]) AND
       ((t2[i] = t1[j]) AND
       (FORALL (k:INT): (((k /= i) AND (k /= j)) => (t1[k] = t2[k])))))))))));

%% Why axiom permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT): permut(t, t));

%% Why axiom permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT): (permut(t1, t2) => permut(t2, t1))));

%% Why axiom permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       ((permut(t1, t2) AND permut(t2, t3)) => permut(t1, t3)))));

%% Why axiom permut_exchange
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT): permut(t, ((t WITH [i] := t[j]) WITH [j] := t[i])))));

%% Why axiom permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (permut(t1, t2) => (array_length_INT(t1) = array_length_INT(t2)))));

%% Why axiom sub_permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT): (FORALL (d:INT): sub_permut(g, d, t, t))));

%% Why axiom sub_permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) => sub_permut(g, d, t2, t1))))));

%% Why axiom sub_permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (sub_permut(g, d, t2, t3) => sub_permut(g, d, t1, t3))))))));

%% Why axiom sub_permut_exchange_1
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND ((i <= d) AND ((g <= j) AND (j <= d)))) =>
       sub_permut(g, d, t, ((t WITH [i] := t[j]) WITH [j] := t[i]))))))));

%% Why axiom sub_permut_exchange_2
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (((g <= i) AND
        ((i <= d) AND ((g <= j) AND ((j <= d) AND exchange(t1, t2, i, j))))) =>
       sub_permut(g, d, t1, t2))))))));

%% Why axiom sub_permut_permut
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT): (sub_permut(g, d, t1, t2) => permut(t1, t2))))));

%% Why axiom sub_permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (g:INT):
       (FORALL (d:INT):
       (sub_permut(g, d, t1, t2) =>
       (array_length_INT(t1) = array_length_INT(t2)))))));

%% Why axiom sorted_array_def
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (sorted_array(t, i, j) <=>
       (FORALL (k:INT): (((i <= k) AND (k < j)) => (t[k] <= t[(k + 1)])))))));

%% swap_po_1, Why obligation from file "maximumsort.mlw", characters 206-210
QUERY (FORALL (i:INT):
      (FORALL (j:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      ((((0 <= i) AND (i < array_length_INT(t))) AND
       ((0 <= j) AND (j < array_length_INT(t)))) =>
      (((0 <= i) AND (i < array_length_INT(t))) =>
      (FORALL (v:INT):
      ((v = t[i]) => ((0 <= j) AND (j < array_length_INT(t))))))))));

%% swap_po_2, Why obligation from file "maximumsort.mlw", characters 198-210
QUERY (FORALL (i:INT):
      (FORALL (j:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      ((((0 <= i) AND (i < array_length_INT(t))) AND
       ((0 <= j) AND (j < array_length_INT(t)))) =>
      (((0 <= i) AND (i < array_length_INT(t))) =>
      (FORALL (v:INT):
      ((v = t[i]) =>
      (((0 <= j) AND (j < array_length_INT(t))) =>
      (FORALL (aux_2:INT):
      ((aux_2 = t[j]) =>
      (FORALL (aux_1:INT):
      ((aux_1 = i) => ((0 <= aux_1) AND (aux_1 < array_length_INT(t)))))))))))))));

%% swap_po_3, Why obligation from file "maximumsort.mlw", characters 198-210
QUERY (FORALL (i:INT):
      (FORALL (j:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      ((((0 <= i) AND (i < array_length_INT(t))) AND
       ((0 <= j) AND (j < array_length_INT(t)))) =>
      (((0 <= i) AND (i < array_length_INT(t))) =>
      (FORALL (v:INT):
      ((v = t[i]) =>
      (((0 <= j) AND (j < array_length_INT(t))) =>
      (FORALL (aux_2:INT):
      ((aux_2 = t[j]) =>
      (FORALL (aux_1:INT):
      ((aux_1 = i) =>
      (((0 <= aux_1) AND (aux_1 < array_length_INT(t))) =>
      (FORALL (t0:(ARRAY INT OF INT)):
      ((t0 = (t WITH [aux_1] := aux_2)) =>
      (FORALL (result:INT):
      ((result = v) =>
      (FORALL (result0:INT):
      ((result0 = j) =>
      ((FORALL (t1:ARRAY INT OF INT):
       ((t1 = (t0 WITH [result0] := result)) => exchange(t1, t, i, j))) AND
      ((0 <= result0) AND (result0 < array_length_INT(t0)))))))))))))))))))))));

%% maximum_po_1, Why obligation from file "maximumsort.mlw", characters 761-762
QUERY (FORALL (n:INT):
      (FORALL (k:INT):
      (FORALL (i:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      ((((0 <= k) AND (k <= i)) AND
       ((i <= n) AND ((n < array_length_INT(t)) AND Maximize(t, n, t[i], k)))) =>
      (FORALL (Variant1:INT):
      (FORALL (n0:INT):
      (FORALL (k0:INT):
      (FORALL (i0:INT):
      ((Variant1 = k0) =>
      ((((0 <= k0) AND (k0 <= i0)) AND
       ((i0 <= n0) AND
       ((n0 < array_length_INT(t)) AND Maximize(t, n0, t[i0], k0)))) =>
      ((k0 = 0) =>
      (FORALL (result0:INT):
      ((result0 = i0) =>
      (((0 <= result0) AND (result0 <= n0)) AND
      Maximize(t, n0, t[result0], 0))))))))))))))));

%% maximum_po_2, Why obligation from file "maximumsort.mlw", characters 775-861
QUERY (FORALL (n:INT):
      (FORALL (k:INT):
      (FORALL (i:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      ((((0 <= k) AND (k <= i)) AND
       ((i <= n) AND ((n < array_length_INT(t)) AND Maximize(t, n, t[i], k)))) =>
      (FORALL (Variant1:INT):
      (FORALL (n0:INT):
      (FORALL (k0:INT):
      (FORALL (i0:INT):
      ((Variant1 = k0) =>
      ((((0 <= k0) AND (k0 <= i0)) AND
       ((i0 <= n0) AND
       ((n0 < array_length_INT(t)) AND Maximize(t, n0, t[i0], k0)))) =>
      ((k0 /= 0) => ((0 <= (k0 - 1)) AND ((k0 - 1) < array_length_INT(t)))))))))))))));

%% maximum_po_3, Why obligation from file "maximumsort.mlw", characters 775-861
QUERY (FORALL (n:INT):
      (FORALL (k:INT):
      (FORALL (i:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      ((((0 <= k) AND (k <= i)) AND
       ((i <= n) AND ((n < array_length_INT(t)) AND Maximize(t, n, t[i], k)))) =>
      (FORALL (Variant1:INT):
      (FORALL (n0:INT):
      (FORALL (k0:INT):
      (FORALL (i0:INT):
      ((Variant1 = k0) =>
      ((((0 <= k0) AND (k0 <= i0)) AND
       ((i0 <= n0) AND
       ((n0 < array_length_INT(t)) AND Maximize(t, n0, t[i0], k0)))) =>
      ((k0 /= 0) =>
      (((0 <= (k0 - 1)) AND ((k0 - 1) < array_length_INT(t))) =>
      ((0 <= i0) AND (i0 < array_length_INT(t))))))))))))))));

%% maximum_po_4, Why obligation from file "maximumsort.mlw", characters 775-861
QUERY (FORALL (n:INT):
      (FORALL (k:INT):
      (FORALL (i:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      ((((0 <= k) AND (k <= i)) AND
       ((i <= n) AND ((n < array_length_INT(t)) AND Maximize(t, n, t[i], k)))) =>
      (FORALL (Variant1:INT):
      (FORALL (n0:INT):
      (FORALL (k0:INT):
      (FORALL (i0:INT):
      ((Variant1 = k0) =>
      ((((0 <= k0) AND (k0 <= i0)) AND
       ((i0 <= n0) AND
       ((n0 < array_length_INT(t)) AND Maximize(t, n0, t[i0], k0)))) =>
      ((k0 /= 0) =>
      (((0 <= (k0 - 1)) AND ((k0 - 1) < array_length_INT(t))) =>
      (((0 <= i0) AND (i0 < array_length_INT(t))) =>
      ((t[(k0 - 1)] > t[i0]) =>
      (((0 <= (k0 - 1)) AND ((k0 - 1) <= (k0 - 1))) AND
      (((k0 - 1) <= n0) AND
      ((n0 < array_length_INT(t)) AND Maximize(t, n0, t[(k0 - 1)], (k0 - 1))))))))))))))))))));

%% maximum_po_5, Why obligation from file "maximumsort.mlw", characters 775-861
QUERY (FORALL (n:INT):
      (FORALL (k:INT):
      (FORALL (i:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      ((((0 <= k) AND (k <= i)) AND
       ((i <= n) AND ((n < array_length_INT(t)) AND Maximize(t, n, t[i], k)))) =>
      (FORALL (Variant1:INT):
      (FORALL (n0:INT):
      (FORALL (k0:INT):
      (FORALL (i0:INT):
      ((Variant1 = k0) =>
      ((((0 <= k0) AND (k0 <= i0)) AND
       ((i0 <= n0) AND
       ((n0 < array_length_INT(t)) AND Maximize(t, n0, t[i0], k0)))) =>
      ((k0 /= 0) =>
      (((0 <= (k0 - 1)) AND ((k0 - 1) < array_length_INT(t))) =>
      (((0 <= i0) AND (i0 < array_length_INT(t))) =>
      (((t[(k0 - 1)] > t[i0]) =>
       (((0 <= (k0 - 1)) AND ((k0 - 1) <= (k0 - 1))) AND
       (((k0 - 1) <= n0) AND
       ((n0 < array_length_INT(t)) AND
       Maximize(t, n0, t[(k0 - 1)], (k0 - 1)))))) =>
      ((t[(k0 - 1)] <= t[i0]) =>
      (((0 <= (k0 - 1)) AND ((k0 - 1) <= i0)) AND
      ((i0 <= n0) AND
      ((n0 < array_length_INT(t)) AND Maximize(t, n0, t[i0], (k0 - 1)))))))))))))))))))));

%% maximum_po_6, Why obligation from file "maximumsort.mlw", characters 775-861
QUERY (FORALL (n:INT):
      (FORALL (k:INT):
      (FORALL (i:INT):
      (FORALL (t:(ARRAY INT OF INT)):
      ((((0 <= k) AND (k <= i)) AND
       ((i <= n) AND ((n < array_length_INT(t)) AND Maximize(t, n, t[i], k)))) =>
      (FORALL (Variant1:INT):
      (FORALL (n0:INT):
      (FORALL (k0:INT):
      (FORALL (i0:INT):
      ((Variant1 = k0) =>
      ((((0 <= k0) AND (k0 <= i0)) AND
       ((i0 <= n0) AND
       ((n0 < array_length_INT(t)) AND Maximize(t, n0, t[i0], k0)))) =>
      ((k0 /= 0) =>
      (((0 <= (k0 - 1)) AND ((k0 - 1) < array_length_INT(t))) =>
      (((0 <= i0) AND (i0 < array_length_INT(t))) =>
      (((t[(k0 - 1)] > t[i0]) =>
       (((0 <= (k0 - 1)) AND ((k0 - 1) <= (k0 - 1))) AND
       (((k0 - 1) <= n0) AND
       ((n0 < array_length_INT(t)) AND
       Maximize(t, n0, t[(k0 - 1)], (k0 - 1)))))) =>
      (((t[(k0 - 1)] <= t[i0]) =>
       (((0 <= (k0 - 1)) AND ((k0 - 1) <= i0)) AND
       ((i0 <= n0) AND
       ((n0 < array_length_INT(t)) AND Maximize(t, n0, t[i0], (k0 - 1)))))) =>
      (FORALL (result0:INT):
      ((((t[(k0 - 1)] > t[i0]) AND
        (((0 <= result0) AND (result0 <= n0)) AND
        Maximize(t, n0, t[result0], 0))) OR
       ((t[(k0 - 1)] <= t[i0]) AND
       (((0 <= result0) AND (result0 <= n0)) AND
       Maximize(t, n0, t[result0], 0)))) =>
      (((0 <= result0) AND (result0 <= n0)) AND
      Maximize(t, n0, t[result0], 0))))))))))))))))))));

%% maxisort_po_1, Why obligation from file "maximumsort.mlw", characters 1290-1310
QUERY (FORALL (t:(ARRAY INT OF INT)):
      ((0 <= array_length_INT(t)) =>
      (FORALL (i:INT):
      ((i = (array_length_INT(t) - 1)) =>
      (FORALL (Variant1:INT):
      (FORALL (i1:INT):
      (FORALL (t0:(ARRAY INT OF INT)):
      ((Variant1 = (i1 + 1)) =>
      ((((0 <= (i1 + 1)) AND ((i1 + 1) <= array_length_INT(t0))) AND
       (sorted_array(t0, (i1 + 1), (array_length_INT(t0) - 1)) AND
       (permut(t0, t) AND
       (((i1 + 1) < array_length_INT(t0)) =>
       Maximize(t0, i1, t0[(i1 + 1)], 0))))) =>
      ((i1 >= 0) =>
      (((0 <= i1) AND (i1 <= i1)) AND
      ((i1 <= i1) AND
      ((i1 < array_length_INT(t0)) AND Maximize(t0, i1, t0[i1], i1))))))))))))));

%% maxisort_po_2, Why obligation from file "maximumsort.mlw", characters 1322-1335
QUERY (FORALL (t:(ARRAY INT OF INT)):
      ((0 <= array_length_INT(t)) =>
      (FORALL (i:INT):
      ((i = (array_length_INT(t) - 1)) =>
      (FORALL (Variant1:INT):
      (FORALL (i1:INT):
      (FORALL (t0:(ARRAY INT OF INT)):
      ((Variant1 = (i1 + 1)) =>
      ((((0 <= (i1 + 1)) AND ((i1 + 1) <= array_length_INT(t0))) AND
       (sorted_array(t0, (i1 + 1), (array_length_INT(t0) - 1)) AND
       (permut(t0, t) AND
       (((i1 + 1) < array_length_INT(t0)) =>
       Maximize(t0, i1, t0[(i1 + 1)], 0))))) =>
      ((i1 >= 0) =>
      ((((0 <= i1) AND (i1 <= i1)) AND
       ((i1 <= i1) AND
       ((i1 < array_length_INT(t0)) AND Maximize(t0, i1, t0[i1], i1)))) =>
      (FORALL (r:INT):
      ((((0 <= r) AND (r <= i1)) AND Maximize(t0, i1, t0[r], 0)) =>
      (((0 <= i1) AND (i1 < array_length_INT(t0))) AND
      ((0 <= r) AND (r < array_length_INT(t0)))))))))))))))));

%% maxisort_po_3, Why obligation from file "maximumsort.mlw", characters 1282-1335
QUERY (FORALL (t:(ARRAY INT OF INT)):
      ((0 <= array_length_INT(t)) =>
      (FORALL (i:INT):
      ((i = (array_length_INT(t) - 1)) =>
      (FORALL (Variant1:INT):
      (FORALL (i1:INT):
      (FORALL (t0:(ARRAY INT OF INT)):
      ((Variant1 = (i1 + 1)) =>
      ((((0 <= (i1 + 1)) AND ((i1 + 1) <= array_length_INT(t0))) AND
       (sorted_array(t0, (i1 + 1), (array_length_INT(t0) - 1)) AND
       (permut(t0, t) AND
       (((i1 + 1) < array_length_INT(t0)) =>
       Maximize(t0, i1, t0[(i1 + 1)], 0))))) =>
      ((i1 >= 0) =>
      ((((0 <= i1) AND (i1 <= i1)) AND
       ((i1 <= i1) AND
       ((i1 < array_length_INT(t0)) AND Maximize(t0, i1, t0[i1], i1)))) =>
      (FORALL (r:INT):
      ((((0 <= r) AND (r <= i1)) AND Maximize(t0, i1, t0[r], 0)) =>
      ((((0 <= i1) AND (i1 < array_length_INT(t0))) AND
       ((0 <= r) AND (r < array_length_INT(t0)))) =>
      (FORALL (t1:(ARRAY INT OF INT)):
      (exchange(t1, t0, i1, r) =>
      (FORALL (i:INT):
      ((i = (i1 - 1)) =>
      ((((0 <= (i + 1)) AND ((i + 1) <= array_length_INT(t1))) AND
       (sorted_array(t1, (i + 1), (array_length_INT(t1) - 1)) AND
       (permut(t1, t) AND
       (((i + 1) < array_length_INT(t1)) => Maximize(t1, i, t1[(i + 1)], 0))))) AND
      ((0 <= (i1 + 1)) AND ((i + 1) < (i1 + 1))))))))))))))))))))));

%% maxisort_po_4, Why obligation from file "maximumsort.mlw", characters 1042-1360
QUERY (FORALL (t:(ARRAY INT OF INT)):
      ((0 <= array_length_INT(t)) =>
      (FORALL (i:INT):
      ((i = (array_length_INT(t) - 1)) =>
      (FORALL (Variant1:INT):
      (FORALL (i1:INT):
      (FORALL (t0:(ARRAY INT OF INT)):
      ((Variant1 = (i1 + 1)) =>
      ((((0 <= (i1 + 1)) AND ((i1 + 1) <= array_length_INT(t0))) AND
       (sorted_array(t0, (i1 + 1), (array_length_INT(t0) - 1)) AND
       (permut(t0, t) AND
       (((i1 + 1) < array_length_INT(t0)) =>
       Maximize(t0, i1, t0[(i1 + 1)], 0))))) =>
      ((i1 < 0) =>
      (sorted_array(t0, 0, (array_length_INT(t0) - 1)) AND permut(t0, t))))))))))));

%% maxisort_po_5, Why obligation from file "maximumsort.mlw", characters 1077-1252
QUERY (FORALL (t:(ARRAY INT OF INT)):
      ((0 <= array_length_INT(t)) =>
      (FORALL (i:INT):
      ((i = (array_length_INT(t) - 1)) =>
      (((0 <= (i + 1)) AND ((i + 1) <= array_length_INT(t))) AND
      (sorted_array(t, (i + 1), (array_length_INT(t) - 1)) AND
      (permut(t, t) AND
      (((i + 1) < array_length_INT(t)) => Maximize(t, i, t[(i + 1)], 0)))))))));

