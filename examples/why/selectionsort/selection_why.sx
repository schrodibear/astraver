(BG_PUSH (FORALL (t i v) (EQ (array_length (store t i v)) (array_length t))))

(BG_PUSH
  ; permut
  (FORALL (t) (EQ (permut t t) |@true|))
  (FORALL (t1 t2) (IMPLIES (EQ (permut t1 t2) |@true|)
			   (EQ (permut t2 t1) |@true|)))
  (FORALL (t1 t2 t3) (IMPLIES (AND (EQ (permut t1 t2) |@true|)
				   (EQ (permut t2 t3) |@true|))
			      (EQ (permut t1 t3) |@true|)))
  (FORALL 
   (t i j) 
   (EQ (permut t (store (store t i (select t j)) j (select t i))) |@true|))
  ; sorted_array
  (FORALL 
   (t i j) 
   (IFF (EQ (sorted_array t i j) |@true|)
	(IMPLIES (<= i j)
		 (FORALL (k) (IMPLIES (AND (<= i k) (< k j))
				      (<= (select t k) (select t (+ k 1))))))))
)

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(BG_PUSH
 ;; Why axiom access_update
 (FORALL (a i v) (EQ (access (update a i v) i) v)))

(BG_PUSH
 ;; Why axiom access_update_neq
 (FORALL (a i j v)
 (IMPLIES (NEQ i j) (EQ (access (update a i v) j) (access a j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j)
 (FORALL (a v) (EQ (access (update a i v) j) (access a j))))))

(DEFPRED (sorted_array t i j)
  (FORALL (k1 k2)
  (IMPLIES (AND (AND (<= i k1) (<= k1 k2)) (<= k2 j))
  (<= (access t k1) (access t k2)))))

(DEFPRED (exchange a1 a2 i j)
  (AND (EQ (array_length a1) (array_length a2))
  (AND (EQ (access a1 i) (access a2 j))
  (AND (EQ (access a2 i) (access a1 j))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i) (NEQ k j)) (EQ (access a1 k) (access a2 k))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t l u) (EQ (permut t t l u) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1 t2 l u)
 (IMPLIES (EQ (permut t1 t2 l u) |@true|) (EQ (permut t2 t1 l u) |@true|))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1 t2 t3 l u)
 (IMPLIES (EQ (permut t1 t2 l u) |@true|)
 (IMPLIES (EQ (permut t2 t3 l u) |@true|) (EQ (permut t1 t3 l u) |@true|))))

 (FORALL (t1 t2 l u)
 (IMPLIES (EQ (permut t1 t2 l u) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (permut t2 t3 l u) |@true|) (EQ (permut t1 t3 l u) |@true|))))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (a1 a2 l u i j)
 (IMPLIES (AND (<= l i) (<= i u))
 (IMPLIES (AND (<= l j) (<= j u))
 (IMPLIES (exchange a1 a2 i j) (EQ (permut a1 a2 l u) |@true|)))))

 (FORALL (l u i)
 (IMPLIES (AND (<= l i) (<= i u))
 (FORALL (j)
 (IMPLIES (AND (<= l j) (<= j u))
 (FORALL (a1 a2)
 (IMPLIES (exchange a1 a2 i j) (EQ (permut a1 a2 l u) |@true|))))))))

(BG_PUSH
 ;; Why axiom exchange_upd
 (FORALL (a i j)
 (exchange a (update (update a i (access a j)) j (access a i)) i j)))

(BG_PUSH
 ;; Why axiom permut_weakening
 (FORALL (a1 a2 l1 r1 l2 r2)
 (IMPLIES (AND (AND (<= l1 l2) (<= l2 r2)) (<= r2 r1))
 (IMPLIES (EQ (permut a1 a2 l2 r2) |@true|)
 (EQ (permut a1 a2 l1 r1) |@true|))))

 (FORALL (l1 r1 l2 r2)
 (IMPLIES (AND (AND (<= l1 l2) (<= l2 r2)) (<= r2 r1))
 (FORALL (a2 a1)
 (IMPLIES (EQ (permut a1 a2 l2 r2) |@true|)
 (EQ (permut a1 a2 l1 r1) |@true|))))))

(BG_PUSH
 ;; Why axiom permut_eq
 (FORALL (a1 a2 l u)
 (IMPLIES (<= l u)
 (IMPLIES (EQ (permut a1 a2 l u) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< u i)) (EQ (access a2 i) (access a1 i)))))))

 (FORALL (l u)
 (IMPLIES (<= l u)
 (FORALL (a2 a1)
 (IMPLIES (EQ (permut a1 a2 l u) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< u i)) (EQ (access a2 i) (access a1 i)))))))))

(DEFPRED (permutation a1 a2)
  (EQ (permut a1 a2 0 (- (array_length a1) 1)) |@true|))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (a i v) (EQ (array_length (update a i v)) (array_length a))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (a1 a2 l u)
 (IMPLIES (EQ (permut a1 a2 l u) |@true|)
 (EQ (array_length a1) (array_length a2)))))

;; selection_po_1, File "selection.mlw", line 13, characters 18-203
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(AND (AND (<= 0 0) (<= 0 (- (array_length t) 1)))
(AND (sorted_array t 0 (- 0 1))
(AND (permutation t t)
(FORALL (k l)
(IMPLIES (AND (<= 0 k) (< k 0))
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(<= (access t k) (access t l))))))))))

;; selection_po_2, File "selection.mlw", line 23, characters 15-151
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 i) (<= i (- (array_length t0) 1)))
         (AND (sorted_array t0 0 (- i 1))
         (AND (permutation t0 t)
         (FORALL (k l)
         (IMPLIES (AND (<= 0 k) (< k i))
         (IMPLIES (AND (<= i l) (< l (array_length t0)))
         (<= (access t0 k) (access t0 l))))))))
(FORALL (result)
(IMPLIES (EQ result (array_length t0))
(IMPLIES (< i (- result 1))
(AND (AND (<= (+ i 1) (+ i 1)) (<= (+ i 1) (array_length t0)))
(AND (AND (<= i i) (< i (array_length t0)))
(FORALL (k)
(IMPLIES (AND (<= i k) (< k (+ i 1))) (<= (access t0 i) (access t0 k))))))))))))))

;; selection_po_3, File "selection.mlw", line 27, characters 6-11
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 i) (<= i (- (array_length t0) 1)))
         (AND (sorted_array t0 0 (- i 1))
         (AND (permutation t0 t)
         (FORALL (k l)
         (IMPLIES (AND (<= 0 k) (< k i))
         (IMPLIES (AND (<= i l) (< l (array_length t0)))
         (<= (access t0 k) (access t0 l))))))))
(FORALL (result)
(IMPLIES (EQ result (array_length t0))
(IMPLIES (< i (- result 1))
(FORALL (j)
(FORALL (min)
(IMPLIES (AND (AND (<= (+ i 1) j) (<= j (array_length t0)))
         (AND (AND (<= i min) (< min (array_length t0)))
         (FORALL (k)
         (IMPLIES (AND (<= i k) (< k j)) (<= (access t0 min) (access t0 k))))))
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (< j result0) (AND (<= 0 j) (< j (array_length t0)))))))))))))))))

;; selection_po_4, File "selection.mlw", line 27, characters 14-21
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 i) (<= i (- (array_length t0) 1)))
         (AND (sorted_array t0 0 (- i 1))
         (AND (permutation t0 t)
         (FORALL (k l)
         (IMPLIES (AND (<= 0 k) (< k i))
         (IMPLIES (AND (<= i l) (< l (array_length t0)))
         (<= (access t0 k) (access t0 l))))))))
(FORALL (result)
(IMPLIES (EQ result (array_length t0))
(IMPLIES (< i (- result 1))
(FORALL (j)
(FORALL (min)
(IMPLIES (AND (AND (<= (+ i 1) j) (<= j (array_length t0)))
         (AND (AND (<= i min) (< min (array_length t0)))
         (FORALL (k)
         (IMPLIES (AND (<= i k) (< k j)) (<= (access t0 min) (access t0 k))))))
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (< j result0)
(IMPLIES (AND (<= 0 j) (< j (array_length t0)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t0 j))
(AND (<= 0 min) (< min (array_length t0))))))))))))))))))))

;; selection_po_5, File "selection.mlw", line 23, characters 15-151
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 i) (<= i (- (array_length t0) 1)))
         (AND (sorted_array t0 0 (- i 1))
         (AND (permutation t0 t)
         (FORALL (k l)
         (IMPLIES (AND (<= 0 k) (< k i))
         (IMPLIES (AND (<= i l) (< l (array_length t0)))
         (<= (access t0 k) (access t0 l))))))))
(FORALL (result)
(IMPLIES (EQ result (array_length t0))
(IMPLIES (< i (- result 1))
(FORALL (j)
(FORALL (min)
(IMPLIES (AND (AND (<= (+ i 1) j) (<= j (array_length t0)))
         (AND (AND (<= i min) (< min (array_length t0)))
         (FORALL (k)
         (IMPLIES (AND (<= i k) (< k j)) (<= (access t0 min) (access t0 k))))))
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (< j result0)
(IMPLIES (AND (<= 0 j) (< j (array_length t0)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t0 j))
(IMPLIES (AND (<= 0 min) (< min (array_length t0)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t0 min))
(IMPLIES (< result1 result2)
(FORALL (min0)
(IMPLIES (EQ min0 j)
(FORALL (j0)
(IMPLIES (EQ j0 (+ j 1))
(AND (AND (<= (+ i 1) j0) (<= j0 (array_length t0)))
(AND (AND (<= i min0) (< min0 (array_length t0)))
(FORALL (k)
(IMPLIES (AND (<= i k) (< k j0)) (<= (access t0 min0) (access t0 k)))))))))))))))))))))))))))))))

;; selection_po_6, File "selection.mlw", line 26, characters 20-39
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 i) (<= i (- (array_length t0) 1)))
         (AND (sorted_array t0 0 (- i 1))
         (AND (permutation t0 t)
         (FORALL (k l)
         (IMPLIES (AND (<= 0 k) (< k i))
         (IMPLIES (AND (<= i l) (< l (array_length t0)))
         (<= (access t0 k) (access t0 l))))))))
(FORALL (result)
(IMPLIES (EQ result (array_length t0))
(IMPLIES (< i (- result 1))
(FORALL (j)
(FORALL (min)
(IMPLIES (AND (AND (<= (+ i 1) j) (<= j (array_length t0)))
         (AND (AND (<= i min) (< min (array_length t0)))
         (FORALL (k)
         (IMPLIES (AND (<= i k) (< k j)) (<= (access t0 min) (access t0 k))))))
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (< j result0)
(IMPLIES (AND (<= 0 j) (< j (array_length t0)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t0 j))
(IMPLIES (AND (<= 0 min) (< min (array_length t0)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t0 min))
(IMPLIES (< result1 result2)
(FORALL (min0)
(IMPLIES (EQ min0 j)
(FORALL (j0)
(IMPLIES (EQ j0 (+ j 1))
(AND (<= 0 (- (array_length t0) j))
(< (- (array_length t0) j0) (- (array_length t0) j))))))))))))))))))))))))))))

;; selection_po_7, File "selection.mlw", line 23, characters 15-151
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 i) (<= i (- (array_length t0) 1)))
         (AND (sorted_array t0 0 (- i 1))
         (AND (permutation t0 t)
         (FORALL (k l)
         (IMPLIES (AND (<= 0 k) (< k i))
         (IMPLIES (AND (<= i l) (< l (array_length t0)))
         (<= (access t0 k) (access t0 l))))))))
(FORALL (result)
(IMPLIES (EQ result (array_length t0))
(IMPLIES (< i (- result 1))
(FORALL (j)
(FORALL (min)
(IMPLIES (AND (AND (<= (+ i 1) j) (<= j (array_length t0)))
         (AND (AND (<= i min) (< min (array_length t0)))
         (FORALL (k)
         (IMPLIES (AND (<= i k) (< k j)) (<= (access t0 min) (access t0 k))))))
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (< j result0)
(IMPLIES (AND (<= 0 j) (< j (array_length t0)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t0 j))
(IMPLIES (AND (<= 0 min) (< min (array_length t0)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t0 min))
(IMPLIES (>= result1 result2)
(FORALL (j0)
(IMPLIES (EQ j0 (+ j 1))
(AND (AND (<= (+ i 1) j0) (<= j0 (array_length t0)))
(AND (AND (<= i min) (< min (array_length t0)))
(FORALL (k)
(IMPLIES (AND (<= i k) (< k j0)) (<= (access t0 min) (access t0 k)))))))))))))))))))))))))))))

;; selection_po_8, File "selection.mlw", line 26, characters 20-39
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 i) (<= i (- (array_length t0) 1)))
         (AND (sorted_array t0 0 (- i 1))
         (AND (permutation t0 t)
         (FORALL (k l)
         (IMPLIES (AND (<= 0 k) (< k i))
         (IMPLIES (AND (<= i l) (< l (array_length t0)))
         (<= (access t0 k) (access t0 l))))))))
(FORALL (result)
(IMPLIES (EQ result (array_length t0))
(IMPLIES (< i (- result 1))
(FORALL (j)
(FORALL (min)
(IMPLIES (AND (AND (<= (+ i 1) j) (<= j (array_length t0)))
         (AND (AND (<= i min) (< min (array_length t0)))
         (FORALL (k)
         (IMPLIES (AND (<= i k) (< k j)) (<= (access t0 min) (access t0 k))))))
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (< j result0)
(IMPLIES (AND (<= 0 j) (< j (array_length t0)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t0 j))
(IMPLIES (AND (<= 0 min) (< min (array_length t0)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t0 min))
(IMPLIES (>= result1 result2)
(FORALL (j0)
(IMPLIES (EQ j0 (+ j 1))
(AND (<= 0 (- (array_length t0) j))
(< (- (array_length t0) j0) (- (array_length t0) j))))))))))))))))))))))))))

;; selection_po_9, File "selection.mlw", line 31, characters 9-16
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 i) (<= i (- (array_length t0) 1)))
         (AND (sorted_array t0 0 (- i 1))
         (AND (permutation t0 t)
         (FORALL (k l)
         (IMPLIES (AND (<= 0 k) (< k i))
         (IMPLIES (AND (<= i l) (< l (array_length t0)))
         (<= (access t0 k) (access t0 l))))))))
(FORALL (result)
(IMPLIES (EQ result (array_length t0))
(IMPLIES (< i (- result 1))
(FORALL (j)
(FORALL (min)
(IMPLIES (AND (AND (<= (+ i 1) j) (<= j (array_length t0)))
         (AND (AND (<= i min) (< min (array_length t0)))
         (FORALL (k)
         (IMPLIES (AND (<= i k) (< k j)) (<= (access t0 min) (access t0 k))))))
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (>= j result0) (AND (<= 0 min) (< min (array_length t0)))))))))))))))))

;; selection_po_10, File "selection.mlw", line 31, characters 37-42
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 i) (<= i (- (array_length t0) 1)))
         (AND (sorted_array t0 0 (- i 1))
         (AND (permutation t0 t)
         (FORALL (k l)
         (IMPLIES (AND (<= 0 k) (< k i))
         (IMPLIES (AND (<= i l) (< l (array_length t0)))
         (<= (access t0 k) (access t0 l))))))))
(FORALL (result)
(IMPLIES (EQ result (array_length t0))
(IMPLIES (< i (- result 1))
(FORALL (j)
(FORALL (min)
(IMPLIES (AND (AND (<= (+ i 1) j) (<= j (array_length t0)))
         (AND (AND (<= i min) (< min (array_length t0)))
         (FORALL (k)
         (IMPLIES (AND (<= i k) (< k j)) (<= (access t0 min) (access t0 k))))))
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (>= j result0)
(IMPLIES (AND (<= 0 min) (< min (array_length t0)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t0 min)) (AND (<= 0 i) (< i (array_length t0))))))))))))))))))))

;; selection_po_11, File "selection.mlw", line 31, characters 44-54
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 i) (<= i (- (array_length t0) 1)))
         (AND (sorted_array t0 0 (- i 1))
         (AND (permutation t0 t)
         (FORALL (k l)
         (IMPLIES (AND (<= 0 k) (< k i))
         (IMPLIES (AND (<= i l) (< l (array_length t0)))
         (<= (access t0 k) (access t0 l))))))))
(FORALL (result)
(IMPLIES (EQ result (array_length t0))
(IMPLIES (< i (- result 1))
(FORALL (j)
(FORALL (min)
(IMPLIES (AND (AND (<= (+ i 1) j) (<= j (array_length t0)))
         (AND (AND (<= i min) (< min (array_length t0)))
         (FORALL (k)
         (IMPLIES (AND (<= i k) (< k j)) (<= (access t0 min) (access t0 k))))))
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (>= j result0)
(IMPLIES (AND (<= 0 min) (< min (array_length t0)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t0 min))
(IMPLIES (AND (<= 0 i) (< i (array_length t0)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t0 i))
(IMPLIES (AND (<= 0 min) (< min (array_length t0)))
(FORALL (t1)
(IMPLIES (EQ t1 (update t0 min result2))
(AND (<= 0 i) (< i (array_length t1))))))))))))))))))))))))))

;; selection_po_12, File "selection.mlw", line 13, characters 18-203
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 i) (<= i (- (array_length t0) 1)))
         (AND (sorted_array t0 0 (- i 1))
         (AND (permutation t0 t)
         (FORALL (k l)
         (IMPLIES (AND (<= 0 k) (< k i))
         (IMPLIES (AND (<= i l) (< l (array_length t0)))
         (<= (access t0 k) (access t0 l))))))))
(FORALL (result)
(IMPLIES (EQ result (array_length t0))
(IMPLIES (< i (- result 1))
(FORALL (j)
(FORALL (min)
(IMPLIES (AND (AND (<= (+ i 1) j) (<= j (array_length t0)))
         (AND (AND (<= i min) (< min (array_length t0)))
         (FORALL (k)
         (IMPLIES (AND (<= i k) (< k j)) (<= (access t0 min) (access t0 k))))))
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (>= j result0)
(IMPLIES (AND (<= 0 min) (< min (array_length t0)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t0 min))
(IMPLIES (AND (<= 0 i) (< i (array_length t0)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t0 i))
(IMPLIES (AND (<= 0 min) (< min (array_length t0)))
(FORALL (t1)
(IMPLIES (EQ t1 (update t0 min result2))
(IMPLIES (AND (<= 0 i) (< i (array_length t1)))
(FORALL (t2)
(IMPLIES (EQ t2 (update t1 i result1))
(FORALL (i0)
(IMPLIES (EQ i0 (+ i 1))
(AND (AND (<= 0 i0) (<= i0 (- (array_length t2) 1)))
(AND (sorted_array t2 0 (- i0 1))
(AND (permutation t2 t)
(FORALL (k l)
(IMPLIES (AND (<= 0 k) (< k i0))
(IMPLIES (AND (<= i0 l) (< l (array_length t2)))
(<= (access t2 k) (access t2 l))))))))))))))))))))))))))))))))))))

;; selection_po_13, File "selection.mlw", line 17, characters 9-28
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 i) (<= i (- (array_length t0) 1)))
         (AND (sorted_array t0 0 (- i 1))
         (AND (permutation t0 t)
         (FORALL (k l)
         (IMPLIES (AND (<= 0 k) (< k i))
         (IMPLIES (AND (<= i l) (< l (array_length t0)))
         (<= (access t0 k) (access t0 l))))))))
(FORALL (result)
(IMPLIES (EQ result (array_length t0))
(IMPLIES (< i (- result 1))
(FORALL (j)
(FORALL (min)
(IMPLIES (AND (AND (<= (+ i 1) j) (<= j (array_length t0)))
         (AND (AND (<= i min) (< min (array_length t0)))
         (FORALL (k)
         (IMPLIES (AND (<= i k) (< k j)) (<= (access t0 min) (access t0 k))))))
(FORALL (result0)
(IMPLIES (EQ result0 (array_length t0))
(IMPLIES (>= j result0)
(IMPLIES (AND (<= 0 min) (< min (array_length t0)))
(FORALL (result1)
(IMPLIES (EQ result1 (access t0 min))
(IMPLIES (AND (<= 0 i) (< i (array_length t0)))
(FORALL (result2)
(IMPLIES (EQ result2 (access t0 i))
(IMPLIES (AND (<= 0 min) (< min (array_length t0)))
(FORALL (t1)
(IMPLIES (EQ t1 (update t0 min result2))
(IMPLIES (AND (<= 0 i) (< i (array_length t1)))
(FORALL (t2)
(IMPLIES (EQ t2 (update t1 i result1))
(FORALL (i0)
(IMPLIES (EQ i0 (+ i 1))
(AND (<= 0 (- (array_length t0) i))
(< (- (array_length t2) i0) (- (array_length t0) i)))))))))))))))))))))))))))))))

;; selection_po_14, File "selection.mlw", line 36, characters 4-64
(FORALL (t)
(IMPLIES (>= (array_length t) 1)
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 i) (<= i (- (array_length t0) 1)))
         (AND (sorted_array t0 0 (- i 1))
         (AND (permutation t0 t)
         (FORALL (k l)
         (IMPLIES (AND (<= 0 k) (< k i))
         (IMPLIES (AND (<= i l) (< l (array_length t0)))
         (<= (access t0 k) (access t0 l))))))))
(FORALL (result)
(IMPLIES (EQ result (array_length t0))
(IMPLIES (>= i (- result 1))
(AND (sorted_array t0 0 (- (array_length t0) 1)) (permutation t0 t))))))))))

