
UNIT: TYPE;
tt: UNIT;
sqrt_real: [REAL -> REAL];
int_of_real: [REAL -> INT];
mod_int: [[INT, INT] -> INT];

%%%% DO NOT EDIT BELOW THIS LINE

%% Why logic sorted_array
sorted_array: [[ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic exchange
exchange: [[ARRAY INT OF INT, ARRAY INT OF INT, INT, INT] -> BOOLEAN];

%% Why logic sub_permut
sub_permut: [[INT, INT, ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic permut
permut: [[ARRAY INT OF INT, ARRAY INT OF INT] -> BOOLEAN];

%% Why logic array_le
array_le: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_ge
array_ge: [[ARRAY INT OF INT, INT, INT, INT] -> BOOLEAN];

%% Why logic array_length
array_length_INT: [ARRAY INT OF INT -> INT];

%% Why logic store
store_INT: [[ARRAY INT OF INT, INT, INT] -> UNIT];

%% Why axiom array_length_store
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (v:INT):
       (array_length_INT((t WITH [i] := v)) = array_length_INT(t)))));

%% Why logic access
access_INT: [[ARRAY INT OF INT, INT] -> INT];

%% Why axiom exchange_def
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (exchange(t1, t2, i, j) <=>
       ((array_length_INT(t1) = array_length_INT(t2)) AND
       ((t1[i] = t2[j]) AND
       ((t2[i] = t1[j]) AND
       (FORALL (k:INT): (((k /= i) AND (k /= j)) => (t1[k] = t2[k])))))))))));

%% Why axiom permut_refl
ASSERT (FORALL (t:ARRAY INT OF INT): permut(t, t));

%% Why axiom permut_sym
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT): (permut(t1, t2) => permut(t2, t1))));

%% Why axiom permut_trans
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (FORALL (t3:ARRAY INT OF INT):
       ((permut(t1, t2) AND permut(t2, t3)) => permut(t1, t3)))));

%% Why axiom permut_exchange
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT): permut(t, ((t WITH [i] := t[j]) WITH [j] := t[i])))));

%% Why axiom permut_array_length
ASSERT (FORALL (t1:ARRAY INT OF INT):
       (FORALL (t2:ARRAY INT OF INT):
       (permut(t1, t2) => (array_length_INT(t1) = array_length_INT(t2)))));

%% Why axiom sorted_array_def
ASSERT (FORALL (t:ARRAY INT OF INT):
       (FORALL (i:INT):
       (FORALL (j:INT):
       (sorted_array(t, i, j) <=>
       (FORALL (k:INT): (((i <= k) AND (k < j)) => (t[k] <= t[(k + 1)])))))));

%% Why parameter n1
n1: INT;

%% Why parameter n2
n2: INT;

A: TYPE;

%% Why logic array_length
array_length_A: [ARRAY INT OF A -> INT];

%% distance_po_1, Why obligation from file "distance.mlw", characters 1780-1796
QUERY (FORALL (t:(ARRAY INT OF INT)):
      (FORALL (w1:(ARRAY INT OF A)):
      (FORALL (w2:(ARRAY INT OF A)):
      (((array_length_A(w1) = n1) AND
       ((array_length_A(w2) = n2) AND (array_length_INT(t) = (n2 + 1)))) =>
      (FORALL (i0:INT):
      ((i0 = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (i1:INT):
      (FORALL (t0:(ARRAY INT OF INT)):
      ((Variant1 = ((n2 + 1) - i1)) =>
      ((((0 <= i1) AND (i1 <= (n2 + 1))) AND
       ((array_length_INT(t0) = (n2 + 1)) AND
       (FORALL (j:INT): (((0 <= j) AND (j < i1)) => (t0[j] = (n2 - j)))))) =>
      ((i1 <= n2) =>
      (FORALL (aux_2:INT):
      ((aux_2 = (n2 - i1)) =>
      (FORALL (aux_1:INT):
      ((aux_1 = i1) => ((0 <= aux_1) AND (aux_1 < array_length_INT(t0)))))))))))))))))));

%% distance_po_2, Why obligation from file "distance.mlw", characters 1780-1796
QUERY (FORALL (t:(ARRAY INT OF INT)):
      (FORALL (w1:(ARRAY INT OF A)):
      (FORALL (w2:(ARRAY INT OF A)):
      (((array_length_A(w1) = n1) AND
       ((array_length_A(w2) = n2) AND (array_length_INT(t) = (n2 + 1)))) =>
      (FORALL (i0:INT):
      ((i0 = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (i1:INT):
      (FORALL (t0:(ARRAY INT OF INT)):
      ((Variant1 = ((n2 + 1) - i1)) =>
      ((((0 <= i1) AND (i1 <= (n2 + 1))) AND
       ((array_length_INT(t0) = (n2 + 1)) AND
       (FORALL (j:INT): (((0 <= j) AND (j < i1)) => (t0[j] = (n2 - j)))))) =>
      ((i1 <= n2) =>
      (FORALL (aux_2:INT):
      ((aux_2 = (n2 - i1)) =>
      (FORALL (aux_1:INT):
      ((aux_1 = i1) =>
      (((0 <= aux_1) AND (aux_1 < array_length_INT(t0))) =>
      (FORALL (t1:(ARRAY INT OF INT)):
      ((t1 = (t0 WITH [aux_1] := aux_2)) =>
      (FORALL (i:INT):
      ((i = (i1 + 1)) =>
      ((((0 <= i) AND (i <= (n2 + 1))) AND
       ((array_length_INT(t1) = (n2 + 1)) AND
       (FORALL (j:INT): (((0 <= j) AND (j < i)) => (t1[j] = (n2 - j)))))) AND
      ((0 <= ((n2 + 1) - i1)) AND (((n2 + 1) - i) < ((n2 + 1) - i1)))))))))))))))))))))))));

%% Why logic access
access_A: [[ARRAY INT OF A, INT] -> A];

%% distance_po_3, Why obligation from file "distance.mlw", characters 1607-1828
QUERY (FORALL (t:(ARRAY INT OF INT)):
      (FORALL (w1:(ARRAY INT OF A)):
      (FORALL (w2:(ARRAY INT OF A)):
      (((array_length_A(w1) = n1) AND
       ((array_length_A(w2) = n2) AND (array_length_INT(t) = (n2 + 1)))) =>
      (FORALL (i0:INT):
      ((i0 = 0) =>
      (FORALL (Variant1:INT):
      (FORALL (i1:INT):
      (FORALL (t0:(ARRAY INT OF INT)):
      ((Variant1 = ((n2 + 1) - i1)) =>
      ((((0 <= i1) AND (i1 <= (n2 + 1))) AND
       ((array_length_INT(t0) = (n2 + 1)) AND
       (FORALL (j:INT): (((0 <= j) AND (j < i1)) => (t0[j] = (n2 - j)))))) =>
      ((i1 > n2) =>
      (FORALL (i:INT):
      ((i = (n1 - 1)) =>
      (((((-1) <= i) AND (i <= (n1 - 1))) AND
       ((array_length_INT(t0) = (n2 + 1)) AND
       (FORALL (j:INT):
       (((0 <= j) AND (j <= n2)) => min_suffix(w1, w2, (i + 1), j, t0[j]))))) AND
      (FORALL (i:INT):
      (FORALL (t:ARRAY INT OF INT):
      (((((-1) <= i) AND (i <= (n1 - 1))) AND
       ((array_length_INT(t) = (n2 + 1)) AND
       (FORALL (j:INT):
       (((0 <= j) AND (j <= n2)) => min_suffix(w1, w2, (i + 1), j, t[j]))))) =>
      (((i >= 0) =>
       (FORALL (old:INT):
       ((old = t[n2]) =>
       ((FORALL (result:INT):
        ((result = (t[n2] + 1)) =>
        (FORALL (result0:INT):
        ((result0 = n2) =>
        ((FORALL (t0:ARRAY INT OF INT):
         ((t0 = (t WITH [result0] := result)) =>
         (FORALL (j:INT):
         ((j = (n2 - 1)) =>
         (((((-1) <= j) AND (j <= (n2 - 1))) AND
          ((array_length_INT(t0) = (n2 + 1)) AND
          ((FORALL (k:INT):
           (((j < k) AND (k <= n2)) => min_suffix(w1, w2, i, k, t0[k]))) AND
          ((FORALL (k:INT):
           (((0 <= k) AND (k <= j)) => min_suffix(w1, w2, (i + 1), k, t0[k]))) AND
          min_suffix(w1, w2, (i + 1), (j + 1), old))))) AND
         (FORALL (j:INT):
         (FORALL (old:INT):
         (FORALL (t:ARRAY INT OF INT):
         (((((-1) <= j) AND (j <= (n2 - 1))) AND
          ((array_length_INT(t) = (n2 + 1)) AND
          ((FORALL (k:INT):
           (((j < k) AND (k <= n2)) => min_suffix(w1, w2, i, k, t[k]))) AND
          ((FORALL (k:INT):
           (((0 <= k) AND (k <= j)) => min_suffix(w1, w2, (i + 1), k, t[k]))) AND
          min_suffix(w1, w2, (i + 1), (j + 1), old))))) =>
         (((j >= 0) =>
          (FORALL (result:INT):
          ((result = old) =>
          (FORALL (old:INT):
          ((old = t[j]) =>
          (((((w1[i] = w2[j]) =>
             (FORALL (result0:INT):
             ((result0 = result) =>
             (FORALL (result:INT):
             ((result = j) =>
             ((FORALL (t0:ARRAY INT OF INT):
              ((t0 = (t WITH [result] := result0)) =>
              (FORALL (j0:INT):
              ((j0 = (j - 1)) =>
              (((((-1) <= j0) AND (j0 <= (n2 - 1))) AND
               ((array_length_INT(t0) = (n2 + 1)) AND
               ((FORALL (k:INT):
                (((j0 < k) AND (k <= n2)) => min_suffix(w1, w2, i, k, t0[k]))) AND
               ((FORALL (k:INT):
                (((0 <= k) AND (k <= j0)) =>
                min_suffix(w1, w2, (i + 1), k, t0[k]))) AND
               min_suffix(w1, w2, (i + 1), (j0 + 1), old))))) AND
              ((0 <= (j + 1)) AND ((j0 + 1) < (j + 1)))))))) AND
             ((0 <= result) AND (result < array_length_INT(t))))))))) AND
            ((NOT (w1[i] = w2[j])) =>
            (((FORALL (result:INT):
              ((result = (Zmin(t[j], t[(j + 1)]) + 1)) =>
              (FORALL (result0:INT):
              ((result0 = j) =>
              ((FORALL (t0:ARRAY INT OF INT):
               ((t0 = (t WITH [result0] := result)) =>
               (FORALL (j0:INT):
               ((j0 = (j - 1)) =>
               (((((-1) <= j0) AND (j0 <= (n2 - 1))) AND
                ((array_length_INT(t0) = (n2 + 1)) AND
                ((FORALL (k:INT):
                 (((j0 < k) AND (k <= n2)) =>
                 min_suffix(w1, w2, i, k, t0[k]))) AND
                ((FORALL (k:INT):
                 (((0 <= k) AND (k <= j0)) =>
                 min_suffix(w1, w2, (i + 1), k, t0[k]))) AND
                min_suffix(w1, w2, (i + 1), (j0 + 1), old))))) AND
               ((0 <= (j + 1)) AND ((j0 + 1) < (j + 1)))))))) AND
              ((0 <= result0) AND (result0 < array_length_INT(t)))))))) AND
             ((0 <= (j + 1)) AND ((j + 1) < array_length_INT(t)))) AND
            ((0 <= j) AND (j < array_length_INT(t)))))) AND
           ((0 <= i) AND (i < array_length_A(w1)))) AND
          ((0 <= j) AND (j < array_length_A(w2))))))))) AND
         ((j < 0) =>
         (FORALL (i0:INT):
         ((i0 = (i - 1)) =>
         (((((-1) <= i0) AND (i0 <= (n1 - 1))) AND
          ((array_length_INT(t) = (n2 + 1)) AND
          (FORALL (j:INT):
          (((0 <= j) AND (j <= n2)) => min_suffix(w1, w2, (i0 + 1), j, t[j]))))) AND
         ((0 <= (i + 1)) AND ((i0 + 1) < (i + 1))))))))))))))))) AND
        ((0 <= result0) AND (result0 < array_length_INT(t)))))))) AND
       ((0 <= n2) AND (n2 < array_length_INT(t))))))) AND
      ((i < 0) =>
      ((FORALL (result:INT):
       ((result = t[0]) =>
       min_dist(word_of_array(n1, w1), word_of_array(n2, w2), result))) AND
      ((0 <= 0) AND (0 < array_length_INT(t))))))))))))))))))))))));

%% distance_po_4, Why obligation from file "distance.mlw", characters 1645-1744
QUERY (FORALL (t:(ARRAY INT OF INT)):
      (FORALL (w1:(ARRAY INT OF A)):
      (FORALL (w2:(ARRAY INT OF A)):
      (((array_length_A(w1) = n1) AND
       ((array_length_A(w2) = n2) AND (array_length_INT(t) = (n2 + 1)))) =>
      (FORALL (i0:INT):
      ((i0 = 0) =>
      (((0 <= i0) AND (i0 <= (n2 + 1))) AND
      ((array_length_INT(t) = (n2 + 1)) AND
      (FORALL (j:INT): (((0 <= j) AND (j < i0)) => (t[j] = (n2 - j))))))))))));

%% distance_po_5, Why obligation from file "distance.mlw", characters 2074-2079
QUERY (FORALL (t:(ARRAY INT OF INT)):
      (FORALL (w1:(ARRAY INT OF A)):
      (FORALL (w2:(ARRAY INT OF A)):
      (((array_length_A(w1) = n1) AND
       ((array_length_A(w2) = n2) AND (array_length_INT(t) = (n2 + 1)))) =>
      (FORALL (i0:INT):
      ((i0 = 0) =>
      (FORALL (t0:(ARRAY INT OF INT)):
      (FORALL (i2:INT):
      ((i2 = (n1 - 1)) =>
      (FORALL (Variant3:INT):
      (FORALL (i3:INT):
      (FORALL (t1:(ARRAY INT OF INT)):
      ((Variant3 = (i3 + 1)) =>
      (((((-1) <= i3) AND (i3 <= (n1 - 1))) AND
       ((array_length_INT(t1) = (n2 + 1)) AND
       (FORALL (j:INT):
       (((0 <= j) AND (j <= n2)) => min_suffix(w1, w2, (i3 + 1), j, t1[j]))))) =>
      ((i3 >= 0) => ((0 <= n2) AND (n2 < array_length_INT(t1))))))))))))))))));

%% distance_po_6, Why obligation from file "distance.mlw", characters 2527-2532
QUERY (FORALL (t:(ARRAY INT OF INT)):
      (FORALL (w1:(ARRAY INT OF A)):
      (FORALL (w2:(ARRAY INT OF A)):
      (((array_length_A(w1) = n1) AND
       ((array_length_A(w2) = n2) AND (array_length_INT(t) = (n2 + 1)))) =>
      (FORALL (i0:INT):
      ((i0 = 0) =>
      (FORALL (t0:(ARRAY INT OF INT)):
      (FORALL (i2:INT):
      ((i2 = (n1 - 1)) =>
      (FORALL (Variant3:INT):
      (FORALL (i3:INT):
      (FORALL (t1:(ARRAY INT OF INT)):
      ((Variant3 = (i3 + 1)) =>
      (((((-1) <= i3) AND (i3 <= (n1 - 1))) AND
       ((array_length_INT(t1) = (n2 + 1)) AND
       (FORALL (j:INT):
       (((0 <= j) AND (j <= n2)) => min_suffix(w1, w2, (i3 + 1), j, t1[j]))))) =>
      ((i3 >= 0) =>
      (FORALL (old1:INT):
      ((old1 = t1[n2]) =>
      (FORALL (t2:(ARRAY INT OF INT)):
      (FORALL (j1:INT):
      ((j1 = (n2 - 1)) =>
      (FORALL (Variant5:INT):
      (FORALL (j2:INT):
      (FORALL (old2:INT):
      (FORALL (t3:(ARRAY INT OF INT)):
      ((Variant5 = (j2 + 1)) =>
      (((((-1) <= j2) AND (j2 <= (n2 - 1))) AND
       ((array_length_INT(t3) = (n2 + 1)) AND
       ((FORALL (k:INT):
        (((j2 < k) AND (k <= n2)) => min_suffix(w1, w2, i3, k, t3[k]))) AND
       ((FORALL (k:INT):
        (((0 <= k) AND (k <= j2)) => min_suffix(w1, w2, (i3 + 1), k, t3[k]))) AND
       min_suffix(w1, w2, (i3 + 1), (j2 + 1), old2))))) =>
      ((j2 >= 0) =>
      (FORALL (temp:INT):
      ((temp = old2) => ((0 <= j2) AND (j2 < array_length_INT(t3))))))))))))))))))))))))))))))));

