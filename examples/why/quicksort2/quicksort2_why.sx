
;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(BG_PUSH
 ;; Why axiom access_update
 (FORALL (a i v) (EQ (access (update a i v) i) v)))

(BG_PUSH
 ;; Why axiom access_update_neq
 (FORALL (a i j v)
 (IMPLIES (NEQ i j) (EQ (access (update a i v) j) (access a j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j)
 (FORALL (a v) (EQ (access (update a i v) j) (access a j))))))

(DEFPRED (sorted_array t i j)
  (FORALL (k1 k2)
  (IMPLIES (AND (AND (<= i k1) (<= k1 k2)) (<= k2 j))
  (<= (access t k1) (access t k2)))))

(DEFPRED (exchange a1 a2 i j)
  (AND (EQ (array_length a1) (array_length a2))
  (AND (EQ (access a1 i) (access a2 j))
  (AND (EQ (access a2 i) (access a1 j))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i) (NEQ k j)) (EQ (access a1 k) (access a2 k))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t l u) (EQ (permut t t l u) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1 t2 l u)
 (IMPLIES (EQ (permut t1 t2 l u) |@true|) (EQ (permut t2 t1 l u) |@true|))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1 t2 t3 l u)
 (IMPLIES (EQ (permut t1 t2 l u) |@true|)
 (IMPLIES (EQ (permut t2 t3 l u) |@true|) (EQ (permut t1 t3 l u) |@true|))))

 (FORALL (t1 t2 l u)
 (IMPLIES (EQ (permut t1 t2 l u) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (permut t2 t3 l u) |@true|) (EQ (permut t1 t3 l u) |@true|))))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (a1 a2 l u i j)
 (IMPLIES (AND (<= l i) (<= i u))
 (IMPLIES (AND (<= l j) (<= j u))
 (IMPLIES (exchange a1 a2 i j) (EQ (permut a1 a2 l u) |@true|)))))

 (FORALL (l u i)
 (IMPLIES (AND (<= l i) (<= i u))
 (FORALL (j)
 (IMPLIES (AND (<= l j) (<= j u))
 (FORALL (a1 a2)
 (IMPLIES (exchange a1 a2 i j) (EQ (permut a1 a2 l u) |@true|))))))))

(BG_PUSH
 ;; Why axiom exchange_upd
 (FORALL (a i j)
 (exchange a (update (update a i (access a j)) j (access a i)) i j)))

(BG_PUSH
 ;; Why axiom permut_weakening
 (FORALL (a1 a2 l1 r1 l2 r2)
 (IMPLIES (AND (AND (<= l1 l2) (<= l2 r2)) (<= r2 r1))
 (IMPLIES (EQ (permut a1 a2 l2 r2) |@true|)
 (EQ (permut a1 a2 l1 r1) |@true|))))

 (FORALL (l1 r1 l2 r2)
 (IMPLIES (AND (AND (<= l1 l2) (<= l2 r2)) (<= r2 r1))
 (FORALL (a2 a1)
 (IMPLIES (EQ (permut a1 a2 l2 r2) |@true|)
 (EQ (permut a1 a2 l1 r1) |@true|))))))

(BG_PUSH
 ;; Why axiom permut_eq
 (FORALL (a1 a2 l u)
 (IMPLIES (<= l u)
 (IMPLIES (EQ (permut a1 a2 l u) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< u i)) (EQ (access a2 i) (access a1 i)))))))

 (FORALL (l u)
 (IMPLIES (<= l u)
 (FORALL (a2 a1)
 (IMPLIES (EQ (permut a1 a2 l u) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< u i)) (EQ (access a2 i) (access a1 i)))))))))

(DEFPRED (permutation a1 a2)
  (EQ (permut a1 a2 0 (- (array_length a1) 1)) |@true|))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (a i v) (EQ (array_length (update a i v)) (array_length a))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (a1 a2 l u)
 (IMPLIES (EQ (permut a1 a2 l u) |@true|)
 (EQ (array_length a1) (array_length a2)))))

;; swap_po_1, File "quicksort2.mlw", line 11, characters 4-13
(FORALL (i)
(FORALL (j)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 i) (< i (array_length t)))
         (AND (<= 0 j) (< j (array_length t))))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t i))
(IMPLIES (AND (<= 0 j) (< j (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t j))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t i result0)) (AND (<= 0 j) (< j (array_length t0))))))))))))))))

;; swap_po_2, File "quicksort2.mlw", line 13, characters 4-25
(FORALL (i)
(FORALL (j)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 i) (< i (array_length t)))
         (AND (<= 0 j) (< j (array_length t))))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t i))
(IMPLIES (AND (<= 0 j) (< j (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t j))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t i result0))
(IMPLIES (AND (<= 0 j) (< j (array_length t0)))
(FORALL (t1) (IMPLIES (EQ t1 (update t0 j result)) (exchange t1 t i j)))))))))))))))))

;; quick_rec_po_1, File "quicksort2.mlw", line 21, characters 12-16
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r) (AND (<= 0 l) (< l (array_length t))))))))

;; quick_rec_po_2, File "quicksort2.mlw", line 27, characters 13-211
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r)
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t l))
(AND (FORALL (j) (IMPLIES (AND (< l j) (<= j l)) (< (access t j) result)))
(AND
(FORALL (j) (IMPLIES (AND (< l j) (< j (+ l 1))) (>= (access t j) result)))
(AND (EQ (permut t t l r) |@true|)
(AND (EQ (access t l) result)
(AND (AND (<= l l) (< l (+ l 1))) (<= (+ l 1) (+ r 1)))))))))))))))

;; quick_rec_po_3, File "quicksort2.mlw", line 32, characters 11-16
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r)
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t l))
(FORALL (i)
(FORALL (m)
(FORALL (t0)
(IMPLIES (AND
         (FORALL (j)
         (IMPLIES (AND (< l j) (<= j m)) (< (access t0 j) result)))
         (AND
         (FORALL (j)
         (IMPLIES (AND (< m j) (< j i)) (>= (access t0 j) result)))
         (AND (EQ (permut t0 t l r) |@true|)
         (AND (EQ (access t0 l) result)
         (AND (AND (<= l m) (< m i)) (<= i (+ r 1)))))))
(IMPLIES (<= i r) (AND (<= 0 i) (< i (array_length t0))))))))))))))))

;; quick_rec_po_4, File "quicksort2.mlw", line 32, characters 46-58
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r)
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t l))
(FORALL (i)
(FORALL (m)
(FORALL (t0)
(IMPLIES (AND
         (FORALL (j)
         (IMPLIES (AND (< l j) (<= j m)) (< (access t0 j) result)))
         (AND
         (FORALL (j)
         (IMPLIES (AND (< m j) (< j i)) (>= (access t0 j) result)))
         (AND (EQ (permut t0 t l r) |@true|)
         (AND (EQ (access t0 l) result)
         (AND (AND (<= l m) (< m i)) (<= i (+ r 1)))))))
(IMPLIES (<= i r)
(IMPLIES (AND (<= 0 i) (< i (array_length t0)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t0 i))
(IMPLIES (< result0 result)
(FORALL (m0)
(IMPLIES (EQ m0 (+ m 1))
(AND (AND (<= 0 i) (< i (array_length t0)))
(AND (<= 0 m0) (< m0 (array_length t0)))))))))))))))))))))))

;; quick_rec_po_5, File "quicksort2.mlw", line 27, characters 13-211
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r)
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t l))
(FORALL (i)
(FORALL (m)
(FORALL (t0)
(IMPLIES (AND
         (FORALL (j)
         (IMPLIES (AND (< l j) (<= j m)) (< (access t0 j) result)))
         (AND
         (FORALL (j)
         (IMPLIES (AND (< m j) (< j i)) (>= (access t0 j) result)))
         (AND (EQ (permut t0 t l r) |@true|)
         (AND (EQ (access t0 l) result)
         (AND (AND (<= l m) (< m i)) (<= i (+ r 1)))))))
(IMPLIES (<= i r)
(IMPLIES (AND (<= 0 i) (< i (array_length t0)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t0 i))
(IMPLIES (< result0 result)
(FORALL (m0)
(IMPLIES (EQ m0 (+ m 1))
(IMPLIES (AND (AND (<= 0 i) (< i (array_length t0)))
         (AND (<= 0 m0) (< m0 (array_length t0))))
(FORALL (t1)
(IMPLIES (exchange t1 t0 i m0)
(FORALL (i0)
(IMPLIES (EQ i0 (+ i 1))
(AND (FORALL (j) (IMPLIES (AND (< l j) (<= j m0)) (< (access t1 j) result)))
(AND (FORALL (j) (IMPLIES (AND (< m0 j) (< j i0)) (>= (access t1 j) result)))
(AND (EQ (permut t1 t l r) |@true|)
(AND (EQ (access t1 l) result)
(AND (AND (<= l m0) (< m0 i0)) (<= i0 (+ r 1)))))))))))))))))))))))))))))))

;; quick_rec_po_6, File "quicksort2.mlw", line 31, characters 18-27
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r)
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t l))
(FORALL (i)
(FORALL (m)
(FORALL (t0)
(IMPLIES (AND
         (FORALL (j)
         (IMPLIES (AND (< l j) (<= j m)) (< (access t0 j) result)))
         (AND
         (FORALL (j)
         (IMPLIES (AND (< m j) (< j i)) (>= (access t0 j) result)))
         (AND (EQ (permut t0 t l r) |@true|)
         (AND (EQ (access t0 l) result)
         (AND (AND (<= l m) (< m i)) (<= i (+ r 1)))))))
(IMPLIES (<= i r)
(IMPLIES (AND (<= 0 i) (< i (array_length t0)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t0 i))
(IMPLIES (< result0 result)
(FORALL (m0)
(IMPLIES (EQ m0 (+ m 1))
(IMPLIES (AND (AND (<= 0 i) (< i (array_length t0)))
         (AND (<= 0 m0) (< m0 (array_length t0))))
(FORALL (t1)
(IMPLIES (exchange t1 t0 i m0)
(FORALL (i0)
(IMPLIES (EQ i0 (+ i 1))
(AND (<= 0 (- (+ 1 r) i)) (< (- (+ 1 r) i0) (- (+ 1 r) i)))))))))))))))))))))))))))

;; quick_rec_po_7, File "quicksort2.mlw", line 27, characters 13-211
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r)
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t l))
(FORALL (i)
(FORALL (m)
(FORALL (t0)
(IMPLIES (AND
         (FORALL (j)
         (IMPLIES (AND (< l j) (<= j m)) (< (access t0 j) result)))
         (AND
         (FORALL (j)
         (IMPLIES (AND (< m j) (< j i)) (>= (access t0 j) result)))
         (AND (EQ (permut t0 t l r) |@true|)
         (AND (EQ (access t0 l) result)
         (AND (AND (<= l m) (< m i)) (<= i (+ r 1)))))))
(IMPLIES (<= i r)
(IMPLIES (AND (<= 0 i) (< i (array_length t0)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t0 i))
(IMPLIES (>= result0 result)
(FORALL (i0)
(IMPLIES (EQ i0 (+ i 1))
(AND (FORALL (j) (IMPLIES (AND (< l j) (<= j m)) (< (access t0 j) result)))
(AND (FORALL (j) (IMPLIES (AND (< m j) (< j i0)) (>= (access t0 j) result)))
(AND (EQ (permut t0 t l r) |@true|)
(AND (EQ (access t0 l) result) (AND (AND (<= l m) (< m i0)) (<= i0 (+ r 1))))))))))))))))))))))))))

;; quick_rec_po_8, File "quicksort2.mlw", line 31, characters 18-27
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r)
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t l))
(FORALL (i)
(FORALL (m)
(FORALL (t0)
(IMPLIES (AND
         (FORALL (j)
         (IMPLIES (AND (< l j) (<= j m)) (< (access t0 j) result)))
         (AND
         (FORALL (j)
         (IMPLIES (AND (< m j) (< j i)) (>= (access t0 j) result)))
         (AND (EQ (permut t0 t l r) |@true|)
         (AND (EQ (access t0 l) result)
         (AND (AND (<= l m) (< m i)) (<= i (+ r 1)))))))
(IMPLIES (<= i r)
(IMPLIES (AND (<= 0 i) (< i (array_length t0)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t0 i))
(IMPLIES (>= result0 result)
(FORALL (i0)
(IMPLIES (EQ i0 (+ i 1))
(AND (<= 0 (- (+ 1 r) i)) (< (- (+ 1 r) i0) (- (+ 1 r) i))))))))))))))))))))))

;; quick_rec_po_9, File "quicksort2.mlw", line 35, characters 7-18
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r)
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t l))
(FORALL (i)
(FORALL (m)
(FORALL (t0)
(IMPLIES (AND
         (FORALL (j)
         (IMPLIES (AND (< l j) (<= j m)) (< (access t0 j) result)))
         (AND
         (FORALL (j)
         (IMPLIES (AND (< m j) (< j i)) (>= (access t0 j) result)))
         (AND (EQ (permut t0 t l r) |@true|)
         (AND (EQ (access t0 l) result)
         (AND (AND (<= l m) (< m i)) (<= i (+ r 1)))))))
(IMPLIES (> i r)
(AND (AND (<= 0 l) (< l (array_length t0)))
(AND (<= 0 m) (< m (array_length t0)))))))))))))))))

;; quick_rec_po_10, File "quicksort2.mlw", line 36, characters 7-29
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r)
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t l))
(FORALL (i)
(FORALL (m)
(FORALL (t0)
(IMPLIES (AND
         (FORALL (j)
         (IMPLIES (AND (< l j) (<= j m)) (< (access t0 j) result)))
         (AND
         (FORALL (j)
         (IMPLIES (AND (< m j) (< j i)) (>= (access t0 j) result)))
         (AND (EQ (permut t0 t l r) |@true|)
         (AND (EQ (access t0 l) result)
         (AND (AND (<= l m) (< m i)) (<= i (+ r 1)))))))
(IMPLIES (> i r)
(IMPLIES (AND (AND (<= 0 l) (< l (array_length t0)))
         (AND (<= 0 m) (< m (array_length t0))))
(FORALL (t1)
(IMPLIES (exchange t1 t0 l m)
(AND (<= 0 (- (+ 1 r) l)) (< (- (+ 1 (- m 1)) l) (- (+ 1 r) l)))))))))))))))))))

;; quick_rec_po_11, File "quicksort2.mlw", line 36, characters 7-29
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r)
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t l))
(FORALL (i)
(FORALL (m)
(FORALL (t0)
(IMPLIES (AND
         (FORALL (j)
         (IMPLIES (AND (< l j) (<= j m)) (< (access t0 j) result)))
         (AND
         (FORALL (j)
         (IMPLIES (AND (< m j) (< j i)) (>= (access t0 j) result)))
         (AND (EQ (permut t0 t l r) |@true|)
         (AND (EQ (access t0 l) result)
         (AND (AND (<= l m) (< m i)) (<= i (+ r 1)))))))
(IMPLIES (> i r)
(IMPLIES (AND (AND (<= 0 l) (< l (array_length t0)))
         (AND (<= 0 m) (< m (array_length t0))))
(FORALL (t1)
(IMPLIES (exchange t1 t0 l m)
(IMPLIES (AND (<= 0 (- (+ 1 r) l)) (< (- (+ 1 (- m 1)) l) (- (+ 1 r) l)))
(AND (<= 0 l) (< (- m 1) (array_length t1))))))))))))))))))))

;; quick_rec_po_12, File "quicksort2.mlw", line 37, characters 7-29
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r)
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t l))
(FORALL (i)
(FORALL (m)
(FORALL (t0)
(IMPLIES (AND
         (FORALL (j)
         (IMPLIES (AND (< l j) (<= j m)) (< (access t0 j) result)))
         (AND
         (FORALL (j)
         (IMPLIES (AND (< m j) (< j i)) (>= (access t0 j) result)))
         (AND (EQ (permut t0 t l r) |@true|)
         (AND (EQ (access t0 l) result)
         (AND (AND (<= l m) (< m i)) (<= i (+ r 1)))))))
(IMPLIES (> i r)
(IMPLIES (AND (AND (<= 0 l) (< l (array_length t0)))
         (AND (<= 0 m) (< m (array_length t0))))
(FORALL (t1)
(IMPLIES (exchange t1 t0 l m)
(IMPLIES (AND (<= 0 (- (+ 1 r) l)) (< (- (+ 1 (- m 1)) l) (- (+ 1 r) l)))
(IMPLIES (AND (<= 0 l) (< (- m 1) (array_length t1)))
(FORALL (t2)
(IMPLIES (AND (sorted_array t2 l (- m 1))
         (EQ (permut t2 t1 l (- m 1)) |@true|))
(AND (<= 0 (- (+ 1 r) l)) (< (- (+ 1 r) (+ m 1)) (- (+ 1 r) l)))))))))))))))))))))))

;; quick_rec_po_13, File "quicksort2.mlw", line 37, characters 7-29
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r)
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t l))
(FORALL (i)
(FORALL (m)
(FORALL (t0)
(IMPLIES (AND
         (FORALL (j)
         (IMPLIES (AND (< l j) (<= j m)) (< (access t0 j) result)))
         (AND
         (FORALL (j)
         (IMPLIES (AND (< m j) (< j i)) (>= (access t0 j) result)))
         (AND (EQ (permut t0 t l r) |@true|)
         (AND (EQ (access t0 l) result)
         (AND (AND (<= l m) (< m i)) (<= i (+ r 1)))))))
(IMPLIES (> i r)
(IMPLIES (AND (AND (<= 0 l) (< l (array_length t0)))
         (AND (<= 0 m) (< m (array_length t0))))
(FORALL (t1)
(IMPLIES (exchange t1 t0 l m)
(IMPLIES (AND (<= 0 (- (+ 1 r) l)) (< (- (+ 1 (- m 1)) l) (- (+ 1 r) l)))
(IMPLIES (AND (<= 0 l) (< (- m 1) (array_length t1)))
(FORALL (t2)
(IMPLIES (AND (sorted_array t2 l (- m 1))
         (EQ (permut t2 t1 l (- m 1)) |@true|))
(IMPLIES (AND (<= 0 (- (+ 1 r) l)) (< (- (+ 1 r) (+ m 1)) (- (+ 1 r) l)))
(AND (<= 0 (+ m 1)) (< r (array_length t2))))))))))))))))))))))))

;; quick_rec_po_14, File "quicksort2.mlw", line 39, characters 4-49
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (< l r)
(IMPLIES (AND (<= 0 l) (< l (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t l))
(FORALL (i)
(FORALL (m)
(FORALL (t0)
(IMPLIES (AND
         (FORALL (j)
         (IMPLIES (AND (< l j) (<= j m)) (< (access t0 j) result)))
         (AND
         (FORALL (j)
         (IMPLIES (AND (< m j) (< j i)) (>= (access t0 j) result)))
         (AND (EQ (permut t0 t l r) |@true|)
         (AND (EQ (access t0 l) result)
         (AND (AND (<= l m) (< m i)) (<= i (+ r 1)))))))
(IMPLIES (> i r)
(IMPLIES (AND (AND (<= 0 l) (< l (array_length t0)))
         (AND (<= 0 m) (< m (array_length t0))))
(FORALL (t1)
(IMPLIES (exchange t1 t0 l m)
(IMPLIES (AND (<= 0 (- (+ 1 r) l)) (< (- (+ 1 (- m 1)) l) (- (+ 1 r) l)))
(IMPLIES (AND (<= 0 l) (< (- m 1) (array_length t1)))
(FORALL (t2)
(IMPLIES (AND (sorted_array t2 l (- m 1))
         (EQ (permut t2 t1 l (- m 1)) |@true|))
(IMPLIES (AND (<= 0 (- (+ 1 r) l)) (< (- (+ 1 r) (+ m 1)) (- (+ 1 r) l)))
(IMPLIES (AND (<= 0 (+ m 1)) (< r (array_length t2)))
(FORALL (t3)
(IMPLIES (AND (sorted_array t3 (+ m 1) r)
         (EQ (permut t3 t2 (+ m 1) r) |@true|))
(AND (sorted_array t3 l r) (EQ (permut t3 t l r) |@true|))))))))))))))))))))))))))

;; quick_rec_po_15, File "quicksort2.mlw", line 39, characters 4-49
(FORALL (l)
(FORALL (r)
(FORALL (t)
(IMPLIES (AND (<= 0 l) (< r (array_length t)))
(IMPLIES (>= l r) (AND (sorted_array t l r) (EQ (permut t t l r) |@true|)))))))

;; quicksort_po_1, File "quicksort2.mlw", line 45, characters 3-38
(FORALL (t)
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(AND (<= 0 0) (< (- result 1) (array_length t))))))

;; quicksort_po_2, File "quicksort2.mlw", line 46, characters 4-64
(FORALL (t)
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(IMPLIES (AND (<= 0 0) (< (- result 1) (array_length t)))
(FORALL (t0)
(IMPLIES (AND (sorted_array t0 0 (- result 1))
         (EQ (permut t0 t 0 (- result 1)) |@true|))
(AND (sorted_array t0 0 (- (array_length t0) 1)) (permutation t0 t))))))))

