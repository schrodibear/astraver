(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.


(* Why obligation from file "quicksort2.mlw", characters 227-231 *)
Lemma swap_po_1 : 
  forall (i: Z),
  forall (j: Z),
  forall (t: (array Z)),
  forall (Pre5: (0 <= i /\ i < (array_length t)) /\ 0 <= j /\ j <
                (array_length t)),
  forall (Pre4: 0 <= i /\ i < (array_length t)),
  forall (v: Z),
  forall (Post3: v = (access t i)),
  forall (Pre2: 0 <= i /\ i < (array_length t)),
  0 <= j /\ j < (array_length t).
Proof.
tauto.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 237-246 *)
Lemma swap_po_2 : 
  forall (i: Z),
  forall (j: Z),
  forall (t: (array Z)),
  forall (Pre5: (0 <= i /\ i < (array_length t)) /\ 0 <= j /\ j <
                (array_length t)),
  forall (Pre4: 0 <= i /\ i < (array_length t)),
  forall (v: Z),
  forall (Post3: v = (access t i)),
  forall (Pre2: 0 <= i /\ i < (array_length t)),
  forall (Pre3: 0 <= j /\ j < (array_length t)),
  forall (t0: (array Z)),
  forall (Post1: t0 = (store t i (access t j))),
  0 <= j /\ j < (array_length t0).
Proof.
intros; ArraySubst t0.
Qed.


(* Why obligation from file "quicksort2.mlw", characters 209-252 *)
Lemma swap_po_3 : 
  forall (i: Z),
  forall (j: Z),
  forall (t: (array Z)),
  forall (Pre5: (0 <= i /\ i < (array_length t)) /\ 0 <= j /\ j <
                (array_length t)),
  forall (Pre4: 0 <= i /\ i < (array_length t)),
  forall (v: Z),
  forall (Post3: v = (access t i)),
  forall (Pre2: 0 <= i /\ i < (array_length t)),
  forall (Pre3: 0 <= j /\ j < (array_length t)),
  forall (t0: (array Z)),
  forall (Post1: t0 = (store t i (access t j))),
  forall (Pre1: 0 <= j /\ j < (array_length t0)),
  forall (t1: (array Z)),
  forall (Post2: t1 = (store t0 j v)),
  (exchange t1 t i j).
Proof.
intros; subst t1; subst t0; subst v.
auto with datatypes.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 523-527 *)
Lemma quick_rec_po_1 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (Pre27: 0 <= l /\ r < (array_length t)),
  forall (Variant1: Z),
  forall (l0: Z),
  forall (r0: Z),
  forall (t0: (array Z)),
  forall (Pre26: Variant1 = (1 + r0 - l0)),
  forall (Pre25: 0 <= l0 /\ r0 < (array_length t0)),
  forall (Test6: l0 < r0),
  0 <= l0 /\ l0 < (array_length t0).
Proof.
auto with *.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 884-889 *)
Lemma quick_rec_po_2 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (Pre27: 0 <= l /\ r < (array_length t)),
  forall (Variant1: Z),
  forall (l0: Z),
  forall (r0: Z),
  forall (t0: (array Z)),
  forall (Pre26: Variant1 = (1 + r0 - l0)),
  forall (Pre25: 0 <= l0 /\ r0 < (array_length t0)),
  forall (Test6: l0 < r0),
  forall (Pre24: 0 <= l0 /\ l0 < (array_length t0)),
  forall (v: Z),
  forall (Post18: v = (access t0 l0)),
  forall (m: Z),
  forall (Post17: m = l0),
  forall (i: Z),
  forall (Post16: i = (l0 + 1)),
  forall (Variant3: Z),
  forall (i1: Z),
  forall (m1: Z),
  forall (t1: (array Z)),
  forall (Pre12: Variant3 = (1 + r0 - i1)),
  forall (Pre11: (forall (j:Z), (l0 < j /\ j <= m1 -> (access t1 j) < v)) /\
                 (forall (j:Z), (m1 < j /\ j < i1 -> (access t1 j) >= v)) /\
                 (sub_permut l0 r0 t1 t0) /\ (access t1 l0) = v /\ (l0 <=
                 m1 /\ m1 < i1) /\ i1 <= (r0 + 1)),
  forall (Test5: i1 <= r0),
  0 <= i1 /\ i1 < (array_length t1).
Proof.
intuition.
ArrayLength.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 918-932 *)
Lemma quick_rec_po_3 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (Pre27: 0 <= l /\ r < (array_length t)),
  forall (Variant1: Z),
  forall (l0: Z),
  forall (r0: Z),
  forall (t0: (array Z)),
  forall (Pre26: Variant1 = (1 + r0 - l0)),
  forall (Pre25: 0 <= l0 /\ r0 < (array_length t0)),
  forall (Test6: l0 < r0),
  forall (Pre24: 0 <= l0 /\ l0 < (array_length t0)),
  forall (v: Z),
  forall (Post18: v = (access t0 l0)),
  forall (m: Z),
  forall (Post17: m = l0),
  forall (i: Z),
  forall (Post16: i = (l0 + 1)),
  forall (Variant3: Z),
  forall (i1: Z),
  forall (m1: Z),
  forall (t1: (array Z)),
  forall (Pre12: Variant3 = (1 + r0 - i1)),
  forall (Pre11: (forall (j:Z), (l0 < j /\ j <= m1 -> (access t1 j) < v)) /\
                 (forall (j:Z), (m1 < j /\ j < i1 -> (access t1 j) >= v)) /\
                 (sub_permut l0 r0 t1 t0) /\ (access t1 l0) = v /\ (l0 <=
                 m1 /\ m1 < i1) /\ i1 <= (r0 + 1)),
  forall (Test5: i1 <= r0),
  forall (Pre10: 0 <= i1 /\ i1 < (array_length t1)),
  forall (Test4: (access t1 i1) < v),
  forall (m2: Z),
  forall (Post13: m2 = (m1 + 1)),
  (0 <= i1 /\ i1 < (array_length t1)) /\ 0 <= m2 /\ m2 < (array_length t1).
Proof.
intuition ArrayLength; omega.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 899-936 *)
Lemma quick_rec_po_4 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (Pre27: 0 <= l /\ r < (array_length t)),
  forall (Variant1: Z),
  forall (l0: Z),
  forall (r0: Z),
  forall (t0: (array Z)),
  forall (Pre26: Variant1 = (1 + r0 - l0)),
  forall (Pre25: 0 <= l0 /\ r0 < (array_length t0)),
  forall (Test6: l0 < r0),
  forall (Pre24: 0 <= l0 /\ l0 < (array_length t0)),
  forall (v: Z),
  forall (Post18: v = (access t0 l0)),
  forall (m: Z),
  forall (Post17: m = l0),
  forall (i: Z),
  forall (Post16: i = (l0 + 1)),
  forall (Variant3: Z),
  forall (i1: Z),
  forall (m1: Z),
  forall (t1: (array Z)),
  forall (Pre12: Variant3 = (1 + r0 - i1)),
  forall (Pre11: (forall (j:Z), (l0 < j /\ j <= m1 -> (access t1 j) < v)) /\
                 (forall (j:Z), (m1 < j /\ j < i1 -> (access t1 j) >= v)) /\
                 (sub_permut l0 r0 t1 t0) /\ (access t1 l0) = v /\ (l0 <=
                 m1 /\ m1 < i1) /\ i1 <= (r0 + 1)),
  forall (Test5: i1 <= r0),
  forall (Pre10: 0 <= i1 /\ i1 < (array_length t1)),
  forall (Test4: (access t1 i1) < v),
  forall (m2: Z),
  forall (Post13: m2 = (m1 + 1)),
  forall (Pre9: (0 <= i1 /\ i1 < (array_length t1)) /\ 0 <= m2 /\ m2 <
                (array_length t1)),
  forall (t2: (array Z)),
  forall (Post31: (exchange t2 t1 i1 m2)),
  (forall (i:Z),
   (i = (i1 + 1) ->
    ((forall (j:Z), (l0 < j /\ j <= m2 -> (access t2 j) < v)) /\
    (forall (j:Z), (m2 < j /\ j < i -> (access t2 j) >= v)) /\
    (sub_permut l0 r0 t2 t0) /\ (access t2 l0) = v /\ (l0 <= m2 /\ m2 < i) /\
    i <= (r0 + 1)) /\ (Zwf 0 (1 + r0 - i) (1 + r0 - i1)))).
Proof.
intuition.
assert (hj: (j < m2)%Z \/ j = m2).
 omega.
 decompose [exchange] Post30.
 intuition.
rewrite H26; try omega.
apply H5; omega.
subst j; rewrite H25; assumption.
assert (hj: (j < i1)%Z \/ j = i1).
 omega.
 decompose [exchange] Post30.
 intuition.
rewrite H26; try omega.
apply H9; omega.
subst j; rewrite H24.
 apply H9; omega.
apply sub_permut_trans with t1.
apply exchange_is_sub_permut with i1 m2; assumption || omega.
assumption.
decompose [exchange] Post30.
 intuition.
rewrite H24; omega.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 936-936 *)
Lemma quick_rec_po_5 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (Pre27: 0 <= l /\ r < (array_length t)),
  forall (Variant1: Z),
  forall (l0: Z),
  forall (r0: Z),
  forall (t0: (array Z)),
  forall (Pre26: Variant1 = (1 + r0 - l0)),
  forall (Pre25: 0 <= l0 /\ r0 < (array_length t0)),
  forall (Test6: l0 < r0),
  forall (Pre24: 0 <= l0 /\ l0 < (array_length t0)),
  forall (v: Z),
  forall (Post18: v = (access t0 l0)),
  forall (m: Z),
  forall (Post17: m = l0),
  forall (i: Z),
  forall (Post16: i = (l0 + 1)),
  forall (Variant3: Z),
  forall (i1: Z),
  forall (m1: Z),
  forall (t1: (array Z)),
  forall (Pre12: Variant3 = (1 + r0 - i1)),
  forall (Pre11: (forall (j:Z), (l0 < j /\ j <= m1 -> (access t1 j) < v)) /\
                 (forall (j:Z), (m1 < j /\ j < i1 -> (access t1 j) >= v)) /\
                 (sub_permut l0 r0 t1 t0) /\ (access t1 l0) = v /\ (l0 <=
                 m1 /\ m1 < i1) /\ i1 <= (r0 + 1)),
  forall (Test5: i1 <= r0),
  forall (Pre10: 0 <= i1 /\ i1 < (array_length t1)),
  forall (Test3: (access t1 i1) >= v),
  (forall (i:Z),
   (i = (i1 + 1) ->
    ((forall (j:Z), (l0 < j /\ j <= m1 -> (access t1 j) < v)) /\
    (forall (j:Z), (m1 < j /\ j < i -> (access t1 j) >= v)) /\
    (sub_permut l0 r0 t1 t0) /\ (access t1 l0) = v /\ (l0 <= m1 /\ m1 < i) /\
    i <= (r0 + 1)) /\ (Zwf 0 (1 + r0 - i) (1 + r0 - i1)))).
Proof.
intuition.
assert (hj: (j < i1)%Z \/ j = i1).
 omega.
 intuition.
rewrite H15; assumption.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 640-842 *)
Lemma quick_rec_po_6 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (Pre27: 0 <= l /\ r < (array_length t)),
  forall (Variant1: Z),
  forall (l0: Z),
  forall (r0: Z),
  forall (t0: (array Z)),
  forall (Pre26: Variant1 = (1 + r0 - l0)),
  forall (Pre25: 0 <= l0 /\ r0 < (array_length t0)),
  forall (Test6: l0 < r0),
  forall (Pre24: 0 <= l0 /\ l0 < (array_length t0)),
  forall (v: Z),
  forall (Post18: v = (access t0 l0)),
  forall (m: Z),
  forall (Post17: m = l0),
  forall (i: Z),
  forall (Post16: i = (l0 + 1)),
  (forall (j:Z), (l0 < j /\ j <= m -> (access t0 j) < v)) /\
  (forall (j:Z), (m < j /\ j < i -> (access t0 j) >= v)) /\
  (sub_permut l0 r0 t0 t0) /\ (access t0 l0) = v /\ (l0 <= m /\ m < i) /\
  i <= (r0 + 1).
Proof.
intuition.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 976-989 *)
Lemma quick_rec_po_7 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (Pre27: 0 <= l /\ r < (array_length t)),
  forall (Variant1: Z),
  forall (l0: Z),
  forall (r0: Z),
  forall (t0: (array Z)),
  forall (Pre26: Variant1 = (1 + r0 - l0)),
  forall (Pre25: 0 <= l0 /\ r0 < (array_length t0)),
  forall (Test6: l0 < r0),
  forall (Pre24: 0 <= l0 /\ l0 < (array_length t0)),
  forall (v: Z),
  forall (Post18: v = (access t0 l0)),
  forall (m: Z),
  forall (Post17: m = l0),
  forall (i: Z),
  forall (Post16: i = (l0 + 1)),
  forall (i1: Z),
  forall (m1: Z),
  forall (t1: (array Z)),
  forall (Post15: ((forall (j:Z), (l0 < j /\ j <= m1 -> (access t1 j) < v)) /\
                  (forall (j:Z), (m1 < j /\ j < i1 -> (access t1 j) >= v)) /\
                  (sub_permut l0 r0 t1 t0) /\ (access t1 l0) = v /\ (l0 <=
                  m1 /\ m1 < i1) /\ i1 <= (r0 + 1)) /\ i1 > r0),
  (0 <= l0 /\ l0 < (array_length t1)) /\ 0 <= m1 /\ m1 < (array_length t1).
Proof.
intuition ArrayLength; omega.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 997-1021 *)
Lemma quick_rec_po_8 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (Pre27: 0 <= l /\ r < (array_length t)),
  forall (Variant1: Z),
  forall (l0: Z),
  forall (r0: Z),
  forall (t0: (array Z)),
  forall (Pre26: Variant1 = (1 + r0 - l0)),
  forall (Pre25: 0 <= l0 /\ r0 < (array_length t0)),
  forall (Test6: l0 < r0),
  forall (Pre24: 0 <= l0 /\ l0 < (array_length t0)),
  forall (v: Z),
  forall (Post18: v = (access t0 l0)),
  forall (m: Z),
  forall (Post17: m = l0),
  forall (i: Z),
  forall (Post16: i = (l0 + 1)),
  forall (i1: Z),
  forall (m1: Z),
  forall (t1: (array Z)),
  forall (Post15: ((forall (j:Z), (l0 < j /\ j <= m1 -> (access t1 j) < v)) /\
                  (forall (j:Z), (m1 < j /\ j < i1 -> (access t1 j) >= v)) /\
                  (sub_permut l0 r0 t1 t0) /\ (access t1 l0) = v /\ (l0 <=
                  m1 /\ m1 < i1) /\ i1 <= (r0 + 1)) /\ i1 > r0),
  forall (Pre23: (0 <= l0 /\ l0 < (array_length t1)) /\ 0 <= m1 /\ m1 <
                 (array_length t1)),
  forall (t2: (array Z)),
  forall (Post33: (exchange t2 t1 l0 m1)),
  0 <= l0 /\ (m1 - 1) < (array_length t2).
Proof.
intuition ArrayLength.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 459-1117 *)
Lemma quick_rec_po_9 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (Pre27: 0 <= l /\ r < (array_length t)),
  forall (Variant1: Z),
  forall (l0: Z),
  forall (r0: Z),
  forall (t0: (array Z)),
  forall (Pre26: Variant1 = (1 + r0 - l0)),
  forall (Pre25: 0 <= l0 /\ r0 < (array_length t0)),
  forall (Test6: l0 < r0),
  forall (Pre24: 0 <= l0 /\ l0 < (array_length t0)),
  forall (v: Z),
  forall (Post18: v = (access t0 l0)),
  forall (m: Z),
  forall (Post17: m = l0),
  forall (i: Z),
  forall (Post16: i = (l0 + 1)),
  forall (i1: Z),
  forall (m1: Z),
  forall (t1: (array Z)),
  forall (Post15: ((forall (j:Z), (l0 < j /\ j <= m1 -> (access t1 j) < v)) /\
                  (forall (j:Z), (m1 < j /\ j < i1 -> (access t1 j) >= v)) /\
                  (sub_permut l0 r0 t1 t0) /\ (access t1 l0) = v /\ (l0 <=
                  m1 /\ m1 < i1) /\ i1 <= (r0 + 1)) /\ i1 > r0),
  forall (Pre23: (0 <= l0 /\ l0 < (array_length t1)) /\ 0 <= m1 /\ m1 <
                 (array_length t1)),
  forall (t2: (array Z)),
  forall (Post33: (exchange t2 t1 l0 m1)),
  forall (Pre22: 0 <= l0 /\ (m1 - 1) < (array_length t2)),
  forall (Pre16: 0 <= l0 /\ (m1 - 1) < (array_length t2)),
  forall (Pre17: 0 <= l0 /\ (m1 - 1) < (array_length t2)),
  (Zwf 0 (1 + (m1 - 1) - l0) Variant1).
Proof.
intuition.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 1029-1053 *)
Lemma quick_rec_po_10 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (Pre27: 0 <= l /\ r < (array_length t)),
  forall (Variant1: Z),
  forall (l0: Z),
  forall (r0: Z),
  forall (t0: (array Z)),
  forall (Pre26: Variant1 = (1 + r0 - l0)),
  forall (Pre25: 0 <= l0 /\ r0 < (array_length t0)),
  forall (Test6: l0 < r0),
  forall (Pre24: 0 <= l0 /\ l0 < (array_length t0)),
  forall (v: Z),
  forall (Post18: v = (access t0 l0)),
  forall (m: Z),
  forall (Post17: m = l0),
  forall (i: Z),
  forall (Post16: i = (l0 + 1)),
  forall (i1: Z),
  forall (m1: Z),
  forall (t1: (array Z)),
  forall (Post15: ((forall (j:Z), (l0 < j /\ j <= m1 -> (access t1 j) < v)) /\
                  (forall (j:Z), (m1 < j /\ j < i1 -> (access t1 j) >= v)) /\
                  (sub_permut l0 r0 t1 t0) /\ (access t1 l0) = v /\ (l0 <=
                  m1 /\ m1 < i1) /\ i1 <= (r0 + 1)) /\ i1 > r0),
  forall (Pre23: (0 <= l0 /\ l0 < (array_length t1)) /\ 0 <= m1 /\ m1 <
                 (array_length t1)),
  forall (t2: (array Z)),
  forall (Post33: (exchange t2 t1 l0 m1)),
  forall (Pre22: 0 <= l0 /\ (m1 - 1) < (array_length t2)),
  forall (t3: (array Z)),
  forall (Post35: (sorted_array t3 l0 (m1 - 1)) /\
                  (sub_permut l0 (m1 - 1) t3 t2)),
  0 <= (m1 + 1) /\ r0 < (array_length t3).
Proof.
intuition.
generalize (sub_permut_length H20); generalize (exchange_length Post32);
 generalize (sub_permut_length H10); intros; omega.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 459-1117 *)
Lemma quick_rec_po_11 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (Pre27: 0 <= l /\ r < (array_length t)),
  forall (Variant1: Z),
  forall (l0: Z),
  forall (r0: Z),
  forall (t0: (array Z)),
  forall (Pre26: Variant1 = (1 + r0 - l0)),
  forall (Pre25: 0 <= l0 /\ r0 < (array_length t0)),
  forall (Test6: l0 < r0),
  forall (Pre24: 0 <= l0 /\ l0 < (array_length t0)),
  forall (v: Z),
  forall (Post18: v = (access t0 l0)),
  forall (m: Z),
  forall (Post17: m = l0),
  forall (i: Z),
  forall (Post16: i = (l0 + 1)),
  forall (i1: Z),
  forall (m1: Z),
  forall (t1: (array Z)),
  forall (Post15: ((forall (j:Z), (l0 < j /\ j <= m1 -> (access t1 j) < v)) /\
                  (forall (j:Z), (m1 < j /\ j < i1 -> (access t1 j) >= v)) /\
                  (sub_permut l0 r0 t1 t0) /\ (access t1 l0) = v /\ (l0 <=
                  m1 /\ m1 < i1) /\ i1 <= (r0 + 1)) /\ i1 > r0),
  forall (Pre23: (0 <= l0 /\ l0 < (array_length t1)) /\ 0 <= m1 /\ m1 <
                 (array_length t1)),
  forall (t2: (array Z)),
  forall (Post33: (exchange t2 t1 l0 m1)),
  forall (Pre22: 0 <= l0 /\ (m1 - 1) < (array_length t2)),
  forall (t3: (array Z)),
  forall (Post35: (sorted_array t3 l0 (m1 - 1)) /\
                  (sub_permut l0 (m1 - 1) t3 t2)),
  forall (Pre21: 0 <= (m1 + 1) /\ r0 < (array_length t3)),
  forall (Pre19: 0 <= (m1 + 1) /\ r0 < (array_length t3)),
  forall (Pre20: 0 <= (m1 + 1) /\ r0 < (array_length t3)),
  (Zwf 0 (1 + r0 - (m1 + 1)) Variant1).
Proof.
intuition.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 583-1061 *)
Lemma quick_rec_po_12 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (Pre27: 0 <= l /\ r < (array_length t)),
  forall (Variant1: Z),
  forall (l0: Z),
  forall (r0: Z),
  forall (t0: (array Z)),
  forall (Pre26: Variant1 = (1 + r0 - l0)),
  forall (Pre25: 0 <= l0 /\ r0 < (array_length t0)),
  forall (Test6: l0 < r0),
  forall (Pre24: 0 <= l0 /\ l0 < (array_length t0)),
  forall (v: Z),
  forall (Post18: v = (access t0 l0)),
  forall (m: Z),
  forall (Post17: m = l0),
  forall (i: Z),
  forall (Post16: i = (l0 + 1)),
  forall (i1: Z),
  forall (m1: Z),
  forall (t1: (array Z)),
  forall (Post15: ((forall (j:Z), (l0 < j /\ j <= m1 -> (access t1 j) < v)) /\
                  (forall (j:Z), (m1 < j /\ j < i1 -> (access t1 j) >= v)) /\
                  (sub_permut l0 r0 t1 t0) /\ (access t1 l0) = v /\ (l0 <=
                  m1 /\ m1 < i1) /\ i1 <= (r0 + 1)) /\ i1 > r0),
  forall (Pre23: (0 <= l0 /\ l0 < (array_length t1)) /\ 0 <= m1 /\ m1 <
                 (array_length t1)),
  forall (t2: (array Z)),
  forall (Post33: (exchange t2 t1 l0 m1)),
  forall (Pre22: 0 <= l0 /\ (m1 - 1) < (array_length t2)),
  forall (t3: (array Z)),
  forall (Post35: (sorted_array t3 l0 (m1 - 1)) /\
                  (sub_permut l0 (m1 - 1) t3 t2)),
  forall (Pre21: 0 <= (m1 + 1) /\ r0 < (array_length t3)),
  forall (t4: (array Z)),
  forall (Post37: (sorted_array t4 (m1 + 1) r0) /\
                  (sub_permut (m1 + 1) r0 t4 t3)),
  (sorted_array t4 l0 r0) /\ (sub_permut l0 r0 t4 t0).
Proof.
intuition.
unfold sorted_array; intros.
assert (hx: (x < m1 - 1)%Z \/ x = (m1 - 1)%Z \/ x = m1 \/ (m1 < x)).
 omega.
 intuition.
(* x < m0-1 *)
elim (sub_permut_id H24); intros.
unfold array_id in H29.
rewrite (H29 x).
 rewrite (H29 (x + 1)%Z).
 apply H19; omega.
 omega.
 omega.
(* x = m0-1 *)
elim (sub_permut_id H24); intros.
unfold array_id in H28.
rewrite (H28 x).
 rewrite (H28 (x + 1)%Z).
 clear H28 H30.
 elim (sub_permut_id H20); intros.
unfold array_id in H30.
 replace (x + 1)%Z with m1.
rewrite (H30 m1).
 elim Post32; intros.
rewrite H35.
 rewrite H13.
 clear H34 H35 H36.
assert (hm0: (m1 - 1 < array_length t2)).
 omega.
rewrite <- (sub_permut_length H20) in hm0.
generalize (sub_permut_function H20 H1 hm0); intros.
elim (H34 x).
 clear H34.
 intuition.
elim H34; intros j [H1j H2j].
rewrite H2j.
assert (j = l0 \/ (l0 < j)%Z).
 omega.
 intuition.
elim Post32; intros.
subst j.
 rewrite H44.
assert (access t1 m1 < v)%Z.
apply H9; omega.
 omega.
elim Post32; intros.
rewrite H46; try omega.
assert (access t1 j < v)%Z.
apply H9; omega.
 omega.
omega.
 omega.
 omega.
 omega.
 omega.
(* x = m0 *)
subst x.
elim (sub_permut_id H24); intros.
unfold array_id in H28.
rewrite (H28 m1).
 clear H28 H29.
assert (hm0: (0 <= m1 + 1)).
 omega.
assert (hl: array_length t4 = array_length t0).
  ArrayLength; clear H24.
  ArrayLength; clear H20.
  ArrayLength; clear Post32.
  ArrayLength.
rewrite <- hl in H2.
generalize (sub_permut_function H24 hm0 H2); intros.
elim (H28 (m1 + 1)%Z).
 clear H28.
 intuition.
elim H28; intros j [H1j H2j].
 rewrite H2j.
clear H28 H29 H2j.
elim (sub_permut_id H20); intros.
unfold array_id in H29.
rewrite (H29 m1); try omega.
 rewrite (H29 j); try omega.
elim Post32; intros.
rewrite H34.
rewrite (H35 j); try omega.
rewrite H13.
apply Zge_le.
apply H8; omega.
 ArrayLength; clear Post32; ArrayLength.
 omega.
 omega.
(* sub_permut *)
apply sub_permut_trans with t3.
apply sub_permut_extension with (m1 + 1)%Z r0.
omega.
 omega.
 assumption.
apply sub_permut_trans with t2.
apply sub_permut_extension with l0 (m1 - 1)%Z.
omega.
 omega.
 assumption.
apply sub_permut_trans with t1.
apply exchange_is_sub_permut with l0 m1.
omega.
 omega.
 assumption.
assumption.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 1061-1061 *)
Lemma quick_rec_po_13 : 
  forall (l: Z),
  forall (r: Z),
  forall (t: (array Z)),
  forall (Pre27: 0 <= l /\ r < (array_length t)),
  forall (Variant1: Z),
  forall (l0: Z),
  forall (r0: Z),
  forall (t0: (array Z)),
  forall (Pre26: Variant1 = (1 + r0 - l0)),
  forall (Pre25: 0 <= l0 /\ r0 < (array_length t0)),
  forall (Test1: l0 >= r0),
  (sorted_array t0 l0 r0) /\ (sub_permut l0 r0 t0 t0).
Proof.
intuition.
unfold sorted_array; intros; omega.
Qed.


(* Why obligation from file "quicksort2.mlw", characters 1221-1325 *)
Lemma quicksort_po_1 : 
  forall (t: (array Z)),
  0 <= 0 /\ ((array_length t) - 1) < (array_length t).
Proof.
intuition omega.
Qed.

(* Why obligation from file "quicksort2.mlw", characters 1221-1325 *)
Lemma quicksort_po_2 : 
  forall (t: (array Z)),
  forall (Pre1: 0 <= 0 /\ ((array_length t) - 1) < (array_length t)),
  forall (t0: (array Z)),
  forall (Post1: (sorted_array t0 0 ((array_length t) - 1)) /\
                 (sub_permut 0 ((array_length t) - 1) t0 t)),
  (sorted_array t0 0 ((array_length t0) - 1)) /\ (permut t0 t).
Proof.
intuition.
ArrayLength; assumption.
eauto.
Qed.


