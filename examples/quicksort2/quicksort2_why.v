(* Load Programs. *)(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.


(* Why obligation from file , characters 230-234 *)
Lemma swap_po_1 :
 forall (i j:Z) (t:array Z)
   (Pre5:((0 <= i)%Z /\ (i < array_length t)%Z) /\
         (0 <= j)%Z /\ (j < array_length t)%Z)
   (Pre4:(0 <= i)%Z /\ (i < array_length t)%Z) (v:Z)
   (Post3:v = access t i) (Pre2:(0 <= i)%Z /\ (i < array_length t)%Z),
   (0 <= j)%Z /\ (j < array_length t)%Z.
Proof.
tauto.
Qed.

(* Why obligation from file , characters 241-250 *)
Lemma swap_po_2 :
 forall (i j:Z) (t:array Z)
   (Pre5:((0 <= i)%Z /\ (i < array_length t)%Z) /\
         (0 <= j)%Z /\ (j < array_length t)%Z)
   (Pre4:(0 <= i)%Z /\ (i < array_length t)%Z) (v:Z)
   (Post3:v = access t i) (Pre2:(0 <= i)%Z /\ (i < array_length t)%Z)
   (Pre3:(0 <= j)%Z /\ (j < array_length t)%Z) (t0:array Z)
   (Post1:t0 = store t i (access t j)),
   (0 <= j)%Z /\ (j < array_length t0)%Z.
Proof.
intros; ArraySubst t0.
Qed.


(* Why obligation from file , characters 211-257 *)
Lemma swap_po_3 :
 forall (i j:Z) (t:array Z)
   (Pre5:((0 <= i)%Z /\ (i < array_length t)%Z) /\
         (0 <= j)%Z /\ (j < array_length t)%Z)
   (Pre4:(0 <= i)%Z /\ (i < array_length t)%Z) (v:Z)
   (Post3:v = access t i) (Pre2:(0 <= i)%Z /\ (i < array_length t)%Z)
   (Pre3:(0 <= j)%Z /\ (j < array_length t)%Z) (t0:array Z)
   (Post1:t0 = store t i (access t j))
   (Pre1:(0 <= j)%Z /\ (j < array_length t0)%Z) (t1:array Z)
   (Post2:t1 = store t0 j v), exchange t1 t i j.
Proof.
intros; subst t1; subst t0; subst v.
auto with datatypes.
Qed.

(* Why obligation from file , characters 531-535 *)
Lemma quick_rec_po_1 :
 forall (l r:Z) (t:array Z)
   (Pre27:(0 <= l)%Z /\ (r < array_length t)%Z) (Variant1 l0 r0:Z)
   (t0:array Z) (Pre26:Variant1 = (1 + r0 - l0)%Z)
   (Pre25:(0 <= l0)%Z /\ (r0 < array_length t0)%Z) (Test6:(l0 < r0)%Z),
   (0 <= l0)%Z /\ (l0 < array_length t0)%Z.
Proof.
auto with *.
Qed.

(* Why obligation from file , characters 903-908 *)
Lemma quick_rec_po_2 :
 forall (l r:Z) (t:array Z)
   (Pre27:(0 <= l)%Z /\ (r < array_length t)%Z) (Variant1 l0 r0:Z)
   (t0:array Z) (Pre26:Variant1 = (1 + r0 - l0)%Z)
   (Pre25:(0 <= l0)%Z /\ (r0 < array_length t0)%Z) (Test6:(l0 < r0)%Z)
   (Pre24:(0 <= l0)%Z /\ (l0 < array_length t0)%Z) (v:Z)
   (Post18:v = access t0 l0) (m:Z) (Post17:m = l0) (i:Z)
   (Post16:i = (l0 + 1)%Z) (Variant3 i1 m1:Z) (t1:array Z)
   (Pre12:Variant3 = (1 + r0 - i1)%Z)
   (Pre11:(forall j:Z, (l0 < j)%Z /\ (j <= m1)%Z -> (access t1 j < v)%Z) /\
          (forall j:Z, (m1 < j)%Z /\ (j < i1)%Z -> (access t1 j >= v)%Z) /\
          sub_permut l0 r0 t1 t0 /\
          access t1 l0 = v /\
          ((l0 <= m1)%Z /\ (m1 < i1)%Z) /\ (i1 <= r0 + 1)%Z)
   (Test5:(i1 <= r0)%Z), (0 <= i1)%Z /\ (i1 < array_length t1)%Z.
Proof.
intuition.
ArrayLength.
Qed.

(* Why obligation from file , characters 937-951 *)
Lemma quick_rec_po_3 :
 forall (l r:Z) (t:array Z)
   (Pre27:(0 <= l)%Z /\ (r < array_length t)%Z) (Variant1 l0 r0:Z)
   (t0:array Z) (Pre26:Variant1 = (1 + r0 - l0)%Z)
   (Pre25:(0 <= l0)%Z /\ (r0 < array_length t0)%Z) (Test6:(l0 < r0)%Z)
   (Pre24:(0 <= l0)%Z /\ (l0 < array_length t0)%Z) (v:Z)
   (Post18:v = access t0 l0) (m:Z) (Post17:m = l0) (i:Z)
   (Post16:i = (l0 + 1)%Z) (Variant3 i1 m1:Z) (t1:array Z)
   (Pre12:Variant3 = (1 + r0 - i1)%Z)
   (Pre11:(forall j:Z, (l0 < j)%Z /\ (j <= m1)%Z -> (access t1 j < v)%Z) /\
          (forall j:Z, (m1 < j)%Z /\ (j < i1)%Z -> (access t1 j >= v)%Z) /\
          sub_permut l0 r0 t1 t0 /\
          access t1 l0 = v /\
          ((l0 <= m1)%Z /\ (m1 < i1)%Z) /\ (i1 <= r0 + 1)%Z)
   (Test5:(i1 <= r0)%Z) (Pre10:(0 <= i1)%Z /\ (i1 < array_length t1)%Z)
   (Test4:(access t1 i1 < v)%Z) (m2:Z) (Post13:m2 = (m1 + 1)%Z),
   ((0 <= i1)%Z /\ (i1 < array_length t1)%Z) /\
   (0 <= m2)%Z /\ (m2 < array_length t1)%Z.
Proof.
intuition ArrayLength; omega.
Qed.

(* Why obligation from file , characters 918-955 *)
Lemma quick_rec_po_4 :
 forall (l r:Z) (t:array Z)
   (Pre27:(0 <= l)%Z /\ (r < array_length t)%Z) (Variant1 l0 r0:Z)
   (t0:array Z) (Pre26:Variant1 = (1 + r0 - l0)%Z)
   (Pre25:(0 <= l0)%Z /\ (r0 < array_length t0)%Z) (Test6:(l0 < r0)%Z)
   (Pre24:(0 <= l0)%Z /\ (l0 < array_length t0)%Z) (v:Z)
   (Post18:v = access t0 l0) (m:Z) (Post17:m = l0) (i:Z)
   (Post16:i = (l0 + 1)%Z) (Variant3 i1 m1:Z) (t1:array Z)
   (Pre12:Variant3 = (1 + r0 - i1)%Z)
   (Pre11:(forall j:Z, (l0 < j)%Z /\ (j <= m1)%Z -> (access t1 j < v)%Z) /\
          (forall j:Z, (m1 < j)%Z /\ (j < i1)%Z -> (access t1 j >= v)%Z) /\
          sub_permut l0 r0 t1 t0 /\
          access t1 l0 = v /\
          ((l0 <= m1)%Z /\ (m1 < i1)%Z) /\ (i1 <= r0 + 1)%Z)
   (Test5:(i1 <= r0)%Z) (Pre10:(0 <= i1)%Z /\ (i1 < array_length t1)%Z)
   (Test4:(access t1 i1 < v)%Z) (m2:Z) (Post13:m2 = (m1 + 1)%Z)
   (Pre9:((0 <= i1)%Z /\ (i1 < array_length t1)%Z) /\
         (0 <= m2)%Z /\ (m2 < array_length t1)%Z) (t2:array Z)
   (Post30:exchange t2 t1 i1 m2) (i:Z),
   i = (i1 + 1)%Z ->
   ((forall j:Z, (l0 < j)%Z /\ (j <= m2)%Z -> (access t2 j < v)%Z) /\
    (forall j:Z, (m2 < j)%Z /\ (j < i)%Z -> (access t2 j >= v)%Z) /\
    sub_permut l0 r0 t2 t0 /\
    access t2 l0 = v /\ ((l0 <= m2)%Z /\ (m2 < i)%Z) /\ (i <= r0 + 1)%Z) /\
   Zwf 0 (1 + r0 - i) (1 + r0 - i1).
Proof.
intuition.
assert hj: (j < m2)%Z \/ j = m2.
 omega.
 decompose [exchange] Post30.
 intuition.
rewrite H26; try omega.
apply H5; omega.
subst j; rewrite H25; assumption.
assert hj: (j < i1)%Z \/ j = i1.
 omega.
 decompose [exchange] Post30.
 intuition.
rewrite H26; try omega.
apply H9; omega.
subst j; rewrite H24.
 apply H9; omega.
apply sub_permut_trans with t1.
apply exchange_is_sub_permut with i1 m2; assumption || omega.
assumption.
decompose [exchange] Post30.
 intuition.
rewrite H24; omega.
Qed.

(* Why obligation from file , characters 955-955 *)
Lemma quick_rec_po_5 :
 forall (l r:Z) (t:array Z)
   (Pre27:(0 <= l)%Z /\ (r < array_length t)%Z) (Variant1 l0 r0:Z)
   (t0:array Z) (Pre26:Variant1 = (1 + r0 - l0)%Z)
   (Pre25:(0 <= l0)%Z /\ (r0 < array_length t0)%Z) (Test6:(l0 < r0)%Z)
   (Pre24:(0 <= l0)%Z /\ (l0 < array_length t0)%Z) (v:Z)
   (Post18:v = access t0 l0) (m:Z) (Post17:m = l0) (i:Z)
   (Post16:i = (l0 + 1)%Z) (Variant3 i1 m1:Z) (t1:array Z)
   (Pre12:Variant3 = (1 + r0 - i1)%Z)
   (Pre11:(forall j:Z, (l0 < j)%Z /\ (j <= m1)%Z -> (access t1 j < v)%Z) /\
          (forall j:Z, (m1 < j)%Z /\ (j < i1)%Z -> (access t1 j >= v)%Z) /\
          sub_permut l0 r0 t1 t0 /\
          access t1 l0 = v /\
          ((l0 <= m1)%Z /\ (m1 < i1)%Z) /\ (i1 <= r0 + 1)%Z)
   (Test5:(i1 <= r0)%Z) (Pre10:(0 <= i1)%Z /\ (i1 < array_length t1)%Z)
   (Test3:(access t1 i1 >= v)%Z) (i:Z),
   i = (i1 + 1)%Z ->
   ((forall j:Z, (l0 < j)%Z /\ (j <= m1)%Z -> (access t1 j < v)%Z) /\
    (forall j:Z, (m1 < j)%Z /\ (j < i)%Z -> (access t1 j >= v)%Z) /\
    sub_permut l0 r0 t1 t0 /\
    access t1 l0 = v /\ ((l0 <= m1)%Z /\ (m1 < i)%Z) /\ (i <= r0 + 1)%Z) /\
   Zwf 0 (1 + r0 - i) (1 + r0 - i1).
Proof.
intuition.
assert hj: (j < i1)%Z \/ j = i1.
 omega.
 intuition.
rewrite H15; assumption.
Qed.

(* Why obligation from file , characters 654-859 *)
Lemma quick_rec_po_6 :
 forall (l r:Z) (t:array Z)
   (Pre27:(0 <= l)%Z /\ (r < array_length t)%Z) (Variant1 l0 r0:Z)
   (t0:array Z) (Pre26:Variant1 = (1 + r0 - l0)%Z)
   (Pre25:(0 <= l0)%Z /\ (r0 < array_length t0)%Z) (Test6:(l0 < r0)%Z)
   (Pre24:(0 <= l0)%Z /\ (l0 < array_length t0)%Z) (v:Z)
   (Post18:v = access t0 l0) (m:Z) (Post17:m = l0) (i:Z)
   (Post16:i = (l0 + 1)%Z),
   (forall j:Z, (l0 < j)%Z /\ (j <= m)%Z -> (access t0 j < v)%Z) /\
   (forall j:Z, (m < j)%Z /\ (j < i)%Z -> (access t0 j >= v)%Z) /\
   sub_permut l0 r0 t0 t0 /\
   access t0 l0 = v /\ ((l0 <= m)%Z /\ (m < i)%Z) /\ (i <= r0 + 1)%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 998-1011 *)
Lemma quick_rec_po_7 :
 forall (l r:Z) (t:array Z)
   (Pre27:(0 <= l)%Z /\ (r < array_length t)%Z) (Variant1 l0 r0:Z)
   (t0:array Z) (Pre26:Variant1 = (1 + r0 - l0)%Z)
   (Pre25:(0 <= l0)%Z /\ (r0 < array_length t0)%Z) (Test6:(l0 < r0)%Z)
   (Pre24:(0 <= l0)%Z /\ (l0 < array_length t0)%Z) (v:Z)
   (Post18:v = access t0 l0) (m:Z) (Post17:m = l0) (i:Z)
   (Post16:i = (l0 + 1)%Z) (i1 m1:Z) (t1:array Z)
   (Post15:((forall j:Z,
               (l0 < j)%Z /\ (j <= m1)%Z -> (access t1 j < v)%Z) /\
            (forall j:Z,
               (m1 < j)%Z /\ (j < i1)%Z -> (access t1 j >= v)%Z) /\
            sub_permut l0 r0 t1 t0 /\
            access t1 l0 = v /\
            ((l0 <= m1)%Z /\ (m1 < i1)%Z) /\ (i1 <= r0 + 1)%Z) /\
           (i1 > r0)%Z),
   ((0 <= l0)%Z /\ (l0 < array_length t1)%Z) /\
   (0 <= m1)%Z /\ (m1 < array_length t1)%Z.
Proof.
intuition ArrayLength; omega.
Qed.

(* Why obligation from file , characters 1020-1044 *)
Lemma quick_rec_po_8 :
 forall (l r:Z) (t:array Z)
   (Pre27:(0 <= l)%Z /\ (r < array_length t)%Z) (Variant1 l0 r0:Z)
   (t0:array Z) (Pre26:Variant1 = (1 + r0 - l0)%Z)
   (Pre25:(0 <= l0)%Z /\ (r0 < array_length t0)%Z) (Test6:(l0 < r0)%Z)
   (Pre24:(0 <= l0)%Z /\ (l0 < array_length t0)%Z) (v:Z)
   (Post18:v = access t0 l0) (m:Z) (Post17:m = l0) (i:Z)
   (Post16:i = (l0 + 1)%Z) (i1 m1:Z) (t1:array Z)
   (Post15:((forall j:Z,
               (l0 < j)%Z /\ (j <= m1)%Z -> (access t1 j < v)%Z) /\
            (forall j:Z,
               (m1 < j)%Z /\ (j < i1)%Z -> (access t1 j >= v)%Z) /\
            sub_permut l0 r0 t1 t0 /\
            access t1 l0 = v /\
            ((l0 <= m1)%Z /\ (m1 < i1)%Z) /\ (i1 <= r0 + 1)%Z) /\
           (i1 > r0)%Z)
   (Pre23:((0 <= l0)%Z /\ (l0 < array_length t1)%Z) /\
          (0 <= m1)%Z /\ (m1 < array_length t1)%Z) (t2:array Z)
   (Post32:exchange t2 t1 l0 m1),
   (0 <= l0)%Z /\ (m1 - 1 < array_length t2)%Z.
Proof.
intuition ArrayLength.
Qed.

(* Why obligation from file , characters 465-1143 *)
Lemma quick_rec_po_9 :
 forall (l r:Z) (t:array Z)
   (Pre27:(0 <= l)%Z /\ (r < array_length t)%Z) (Variant1 l0 r0:Z)
   (t0:array Z) (Pre26:Variant1 = (1 + r0 - l0)%Z)
   (Pre25:(0 <= l0)%Z /\ (r0 < array_length t0)%Z) (Test6:(l0 < r0)%Z)
   (Pre24:(0 <= l0)%Z /\ (l0 < array_length t0)%Z) (v:Z)
   (Post18:v = access t0 l0) (m:Z) (Post17:m = l0) (i:Z)
   (Post16:i = (l0 + 1)%Z) (i1 m1:Z) (t1:array Z)
   (Post15:((forall j:Z,
               (l0 < j)%Z /\ (j <= m1)%Z -> (access t1 j < v)%Z) /\
            (forall j:Z,
               (m1 < j)%Z /\ (j < i1)%Z -> (access t1 j >= v)%Z) /\
            sub_permut l0 r0 t1 t0 /\
            access t1 l0 = v /\
            ((l0 <= m1)%Z /\ (m1 < i1)%Z) /\ (i1 <= r0 + 1)%Z) /\
           (i1 > r0)%Z)
   (Pre23:((0 <= l0)%Z /\ (l0 < array_length t1)%Z) /\
          (0 <= m1)%Z /\ (m1 < array_length t1)%Z) (t2:array Z)
   (Post32:exchange t2 t1 l0 m1)
   (Pre22 Pre16 Pre17:(0 <= l0)%Z /\ (m1 - 1 < array_length t2)%Z),
   Zwf 0 (1 + (m1 - 1) - l0) Variant1.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 1053-1077 *)
Lemma quick_rec_po_10 :
 forall (l r:Z) (t:array Z)
   (Pre27:(0 <= l)%Z /\ (r < array_length t)%Z) (Variant1 l0 r0:Z)
   (t0:array Z) (Pre26:Variant1 = (1 + r0 - l0)%Z)
   (Pre25:(0 <= l0)%Z /\ (r0 < array_length t0)%Z) (Test6:(l0 < r0)%Z)
   (Pre24:(0 <= l0)%Z /\ (l0 < array_length t0)%Z) (v:Z)
   (Post18:v = access t0 l0) (m:Z) (Post17:m = l0) (i:Z)
   (Post16:i = (l0 + 1)%Z) (i1 m1:Z) (t1:array Z)
   (Post15:((forall j:Z,
               (l0 < j)%Z /\ (j <= m1)%Z -> (access t1 j < v)%Z) /\
            (forall j:Z,
               (m1 < j)%Z /\ (j < i1)%Z -> (access t1 j >= v)%Z) /\
            sub_permut l0 r0 t1 t0 /\
            access t1 l0 = v /\
            ((l0 <= m1)%Z /\ (m1 < i1)%Z) /\ (i1 <= r0 + 1)%Z) /\
           (i1 > r0)%Z)
   (Pre23:((0 <= l0)%Z /\ (l0 < array_length t1)%Z) /\
          (0 <= m1)%Z /\ (m1 < array_length t1)%Z) (t2:array Z)
   (Post32:exchange t2 t1 l0 m1)
   (Pre22:(0 <= l0)%Z /\ (m1 - 1 < array_length t2)%Z) (t3:array Z)
   (Post34:sorted_array t3 l0 (m1 - 1) /\ sub_permut l0 (m1 - 1) t3 t2),
   (0 <= m1 + 1)%Z /\ (r0 < array_length t3)%Z.
Proof.
intuition.
generalize (sub_permut_length H20); generalize (exchange_length Post32);
 generalize (sub_permut_length H10); intros; omega.
Qed.

(* Why obligation from file , characters 465-1143 *)
Lemma quick_rec_po_11 :
 forall (l r:Z) (t:array Z)
   (Pre27:(0 <= l)%Z /\ (r < array_length t)%Z) (Variant1 l0 r0:Z)
   (t0:array Z) (Pre26:Variant1 = (1 + r0 - l0)%Z)
   (Pre25:(0 <= l0)%Z /\ (r0 < array_length t0)%Z) (Test6:(l0 < r0)%Z)
   (Pre24:(0 <= l0)%Z /\ (l0 < array_length t0)%Z) (v:Z)
   (Post18:v = access t0 l0) (m:Z) (Post17:m = l0) (i:Z)
   (Post16:i = (l0 + 1)%Z) (i1 m1:Z) (t1:array Z)
   (Post15:((forall j:Z,
               (l0 < j)%Z /\ (j <= m1)%Z -> (access t1 j < v)%Z) /\
            (forall j:Z,
               (m1 < j)%Z /\ (j < i1)%Z -> (access t1 j >= v)%Z) /\
            sub_permut l0 r0 t1 t0 /\
            access t1 l0 = v /\
            ((l0 <= m1)%Z /\ (m1 < i1)%Z) /\ (i1 <= r0 + 1)%Z) /\
           (i1 > r0)%Z)
   (Pre23:((0 <= l0)%Z /\ (l0 < array_length t1)%Z) /\
          (0 <= m1)%Z /\ (m1 < array_length t1)%Z) (t2:array Z)
   (Post32:exchange t2 t1 l0 m1)
   (Pre22:(0 <= l0)%Z /\ (m1 - 1 < array_length t2)%Z) (t3:array Z)
   (Post34:sorted_array t3 l0 (m1 - 1) /\ sub_permut l0 (m1 - 1) t3 t2)
   (Pre21 Pre19 Pre20:(0 <= m1 + 1)%Z /\ (r0 < array_length t3)%Z),
   Zwf 0 (1 + r0 - (m1 + 1)) Variant1.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 594-1086 *)
Lemma quick_rec_po_12 :
 forall (l r:Z) (t:array Z)
   (Pre27:(0 <= l)%Z /\ (r < array_length t)%Z) (Variant1 l0 r0:Z)
   (t0:array Z) (Pre26:Variant1 = (1 + r0 - l0)%Z)
   (Pre25:(0 <= l0)%Z /\ (r0 < array_length t0)%Z) (Test6:(l0 < r0)%Z)
   (Pre24:(0 <= l0)%Z /\ (l0 < array_length t0)%Z) (v:Z)
   (Post18:v = access t0 l0) (m:Z) (Post17:m = l0) (i:Z)
   (Post16:i = (l0 + 1)%Z) (i1 m1:Z) (t1:array Z)
   (Post15:((forall j:Z,
               (l0 < j)%Z /\ (j <= m1)%Z -> (access t1 j < v)%Z) /\
            (forall j:Z,
               (m1 < j)%Z /\ (j < i1)%Z -> (access t1 j >= v)%Z) /\
            sub_permut l0 r0 t1 t0 /\
            access t1 l0 = v /\
            ((l0 <= m1)%Z /\ (m1 < i1)%Z) /\ (i1 <= r0 + 1)%Z) /\
           (i1 > r0)%Z)
   (Pre23:((0 <= l0)%Z /\ (l0 < array_length t1)%Z) /\
          (0 <= m1)%Z /\ (m1 < array_length t1)%Z) (t2:array Z)
   (Post32:exchange t2 t1 l0 m1)
   (Pre22:(0 <= l0)%Z /\ (m1 - 1 < array_length t2)%Z) (t3:array Z)
   (Post34:sorted_array t3 l0 (m1 - 1) /\ sub_permut l0 (m1 - 1) t3 t2)
   (Pre21:(0 <= m1 + 1)%Z /\ (r0 < array_length t3)%Z) (t4:array Z)
   (Post36:sorted_array t4 (m1 + 1) r0 /\ sub_permut (m1 + 1) r0 t4 t3),
   sorted_array t4 l0 r0 /\ sub_permut l0 r0 t4 t0.
Proof.
intuition.
unfold sorted_array; intros.
assert hx: (x < m1 - 1)%Z \/ x = (m1 - 1)%Z \/ x = m1 \/ (m1 < x)%Z.
 omega.
 intuition.
(* x < m0-1 *)
elim (sub_permut_id H24); intros.
unfold array_id in H29.
rewrite (H29 x).
 rewrite (H29 (x + 1)%Z).
 apply H19; omega.
 omega.
 omega.
(* x = m0-1 *)
elim (sub_permut_id H24); intros.
unfold array_id in H28.
rewrite (H28 x).
 rewrite (H28 (x + 1)%Z).
 clear H28 H30.
 elim (sub_permut_id H20); intros.
unfold array_id in H30.
 replace (x + 1)%Z with m1.
rewrite (H30 m1).
 elim Post32; intros.
rewrite H35.
 rewrite H13.
 clear H34 H35 H36.
assert hm0: (m1 - 1 < array_length t2)%Z.
 omega.
rewrite <- (sub_permut_length H20) in hm0.
generalize (sub_permut_function H20 H1 hm0); intros.
elim (H34 x).
 clear H34.
 intuition.
elim H34; intros j [H1j H2j].
rewrite H2j.
assert (j = l0 \/ (l0 < j)%Z).
 omega.
 intuition.
elim Post32; intros.
subst j.
 rewrite H44.
assert (access t1 m1 < v)%Z.
apply H9; omega.
 omega.
elim Post32; intros.
rewrite H46; try omega.
assert (access t1 j < v)%Z.
apply H9; omega.
 omega.
omega.
 omega.
 omega.
 omega.
 omega.
(* x = m0 *)
subst x.
elim (sub_permut_id H24); intros.
unfold array_id in H28.
rewrite (H28 m1).
 clear H28 H29.
assert hm0: (0 <= m1 + 1)%Z.
 omega.
assert hl: array_length t4 = array_length t0.
  ArrayLength; clear H24.
  ArrayLength; clear H20.
  ArrayLength; clear Post32.
  ArrayLength.
rewrite <- hl in H2.
generalize (sub_permut_function H24 hm0 H2); intros.
elim (H28 (m1 + 1)%Z).
 clear H28.
 intuition.
elim H28; intros j [H1j H2j].
 rewrite H2j.
clear H28 H29 H2j.
elim (sub_permut_id H20); intros.
unfold array_id in H29.
rewrite (H29 m1); try omega.
 rewrite (H29 j); try omega.
elim Post32; intros.
rewrite H34.
rewrite (H35 j); try omega.
rewrite H13.
apply Zge_le.
apply H8; omega.
 ArrayLength; clear Post32; ArrayLength.
 omega.
 omega.
(* sub_permut *)
apply sub_permut_trans with t3.
apply sub_permut_extension with (m1 + 1)%Z r0.
omega.
 omega.
 assumption.
apply sub_permut_trans with t2.
apply sub_permut_extension with l0 (m1 - 1)%Z.
omega.
 omega.
 assumption.
apply sub_permut_trans with t1.
apply exchange_is_sub_permut with l0 m1.
omega.
 omega.
 assumption.
assumption.
Qed.

(* Why obligation from file , characters 1086-1086 *)
Lemma quick_rec_po_13 :
 forall (l r:Z) (t:array Z)
   (Pre27:(0 <= l)%Z /\ (r < array_length t)%Z) (Variant1 l0 r0:Z)
   (t0:array Z) (Pre26:Variant1 = (1 + r0 - l0)%Z)
   (Pre25:(0 <= l0)%Z /\ (r0 < array_length t0)%Z)
   (Test1:(l0 >= r0)%Z),
   sorted_array t0 l0 r0 /\ sub_permut l0 r0 t0 t0.
Proof.
intuition.
unfold sorted_array; intros; omega.
Qed.


(* Why obligation from file , characters 1247-1351 *)
Lemma quicksort_po_1 :
 forall t:array Z,
   (0 <= 0)%Z /\ (array_length t - 1 < array_length t)%Z.
Proof.
intuition omega.
Qed.

(* Why obligation from file , characters 1247-1351 *)
Lemma quicksort_po_2 :
 forall (t:array Z)
   (Pre1:(0 <= 0)%Z /\ (array_length t - 1 < array_length t)%Z)
   (t0:array Z)
   (Post1:sorted_array t0 0 (array_length t - 1) /\
          sub_permut 0 (array_length t - 1) t0 t),
   sorted_array t0 0 (array_length t0 - 1) /\ permut t0 t.
Proof.
intuition.
ArrayLength; assumption.
eauto.
Qed.


