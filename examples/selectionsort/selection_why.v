(* Load Programs. *)(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.
Require Import Omega.


(* Why obligation from file , characters 804-809 *)
Lemma selection_po_1 :
 forall (t:array Z) (Pre19:(array_length t >= 1)%Z) (i:Z)
   (Post11:i = 0%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre18:Variant1 = (array_length t0 - i1)%Z)
   (Pre17:((0 <= i1)%Z /\ (i1 <= array_length t0 - 1)%Z) /\
          sorted_array t0 0 (i1 - 1) /\
          permut t0 t /\
          (forall k:Z,
             (0 <= k)%Z /\ (k < i1)%Z ->
             forall l:Z,
               (i1 <= l)%Z /\ (l < array_length t0)%Z ->
               (access t0 k <= access t0 l)%Z))
   (Test6:(i1 < array_length t0 - 1)%Z) (min:Z) (Post8:min = i1) 
   (j:Z) (Post7:j = (i1 + 1)%Z) (Variant3 j1 min1:Z)
   (Pre12:Variant3 = (array_length t0 - j1)%Z)
   (Pre11:((i1 + 1 <= j1)%Z /\ (j1 <= array_length t0)%Z) /\
          ((i1 <= min1)%Z /\ (min1 < array_length t0)%Z) /\
          (forall k:Z,
             (i1 <= k)%Z /\ (k < j1)%Z ->
             (access t0 min1 <= access t0 k)%Z))
   (Test5:(j1 < array_length t0)%Z),
   (0 <= j1)%Z /\ (j1 < array_length t0)%Z.
Proof.
auto with *.
Qed.

(* Why obligation from file , characters 812-819 *)
Lemma selection_po_2 :
 forall (t:array Z) (Pre19:(array_length t >= 1)%Z) (i:Z)
   (Post11:i = 0%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre18:Variant1 = (array_length t0 - i1)%Z)
   (Pre17:((0 <= i1)%Z /\ (i1 <= array_length t0 - 1)%Z) /\
          sorted_array t0 0 (i1 - 1) /\
          permut t0 t /\
          (forall k:Z,
             (0 <= k)%Z /\ (k < i1)%Z ->
             forall l:Z,
               (i1 <= l)%Z /\ (l < array_length t0)%Z ->
               (access t0 k <= access t0 l)%Z))
   (Test6:(i1 < array_length t0 - 1)%Z) (min:Z) (Post8:min = i1) 
   (j:Z) (Post7:j = (i1 + 1)%Z) (Variant3 j1 min1:Z)
   (Pre12:Variant3 = (array_length t0 - j1)%Z)
   (Pre11:((i1 + 1 <= j1)%Z /\ (j1 <= array_length t0)%Z) /\
          ((i1 <= min1)%Z /\ (min1 < array_length t0)%Z) /\
          (forall k:Z,
             (i1 <= k)%Z /\ (k < j1)%Z ->
             (access t0 min1 <= access t0 k)%Z))
   (Test5:(j1 < array_length t0)%Z)
   (Pre9:(0 <= j1)%Z /\ (j1 < array_length t0)%Z),
   (0 <= min1)%Z /\ (min1 < array_length t0)%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 825-834 *)
Lemma selection_po_3 :
 forall (t:array Z) (Pre19:(array_length t >= 1)%Z) (i:Z)
   (Post11:i = 0%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre18:Variant1 = (array_length t0 - i1)%Z)
   (Pre17:((0 <= i1)%Z /\ (i1 <= array_length t0 - 1)%Z) /\
          sorted_array t0 0 (i1 - 1) /\
          permut t0 t /\
          (forall k:Z,
             (0 <= k)%Z /\ (k < i1)%Z ->
             forall l:Z,
               (i1 <= l)%Z /\ (l < array_length t0)%Z ->
               (access t0 k <= access t0 l)%Z))
   (Test6:(i1 < array_length t0 - 1)%Z) (min:Z) (Post8:min = i1) 
   (j:Z) (Post7:j = (i1 + 1)%Z) (Variant3 j1 min1:Z)
   (Pre12:Variant3 = (array_length t0 - j1)%Z)
   (Pre11:((i1 + 1 <= j1)%Z /\ (j1 <= array_length t0)%Z) /\
          ((i1 <= min1)%Z /\ (min1 < array_length t0)%Z) /\
          (forall k:Z,
             (i1 <= k)%Z /\ (k < j1)%Z ->
             (access t0 min1 <= access t0 k)%Z))
   (Test5:(j1 < array_length t0)%Z)
   (Pre9:(0 <= j1)%Z /\ (j1 < array_length t0)%Z)
   (Pre10:(0 <= min1)%Z /\ (min1 < array_length t0)%Z)
   (Test4:(access t0 j1 < access t0 min1)%Z) (min2:Z) (Post1:min2 = j1)
   (j:Z),
   j = (j1 + 1)%Z ->
   (((i1 + 1 <= j)%Z /\ (j <= array_length t0)%Z) /\
    ((i1 <= min2)%Z /\ (min2 < array_length t0)%Z) /\
    (forall k:Z,
       (i1 <= k)%Z /\ (k < j)%Z -> (access t0 min2 <= access t0 k)%Z)) /\
   Zwf 0 (array_length t0 - j) (array_length t0 - j1).
Proof.
intuition.
assert h: (k < j1)%Z \/ k = j1.
 omega.
 intuition.
apply Zle_trans with (access t0 min1).
subst min2; omega.
apply H12; omega.
subst min2 k; omega.
Qed.

(* Why obligation from file , characters 834-834 *)
Lemma selection_po_4 :
 forall (t:array Z) (Pre19:(array_length t >= 1)%Z) (i:Z)
   (Post11:i = 0%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre18:Variant1 = (array_length t0 - i1)%Z)
   (Pre17:((0 <= i1)%Z /\ (i1 <= array_length t0 - 1)%Z) /\
          sorted_array t0 0 (i1 - 1) /\
          permut t0 t /\
          (forall k:Z,
             (0 <= k)%Z /\ (k < i1)%Z ->
             forall l:Z,
               (i1 <= l)%Z /\ (l < array_length t0)%Z ->
               (access t0 k <= access t0 l)%Z))
   (Test6:(i1 < array_length t0 - 1)%Z) (min:Z) (Post8:min = i1) 
   (j:Z) (Post7:j = (i1 + 1)%Z) (Variant3 j1 min1:Z)
   (Pre12:Variant3 = (array_length t0 - j1)%Z)
   (Pre11:((i1 + 1 <= j1)%Z /\ (j1 <= array_length t0)%Z) /\
          ((i1 <= min1)%Z /\ (min1 < array_length t0)%Z) /\
          (forall k:Z,
             (i1 <= k)%Z /\ (k < j1)%Z ->
             (access t0 min1 <= access t0 k)%Z))
   (Test5:(j1 < array_length t0)%Z)
   (Pre9:(0 <= j1)%Z /\ (j1 < array_length t0)%Z)
   (Pre10:(0 <= min1)%Z /\ (min1 < array_length t0)%Z)
   (Test3:(access t0 j1 >= access t0 min1)%Z) (j:Z),
   j = (j1 + 1)%Z ->
   (((i1 + 1 <= j)%Z /\ (j <= array_length t0)%Z) /\
    ((i1 <= min1)%Z /\ (min1 < array_length t0)%Z) /\
    (forall k:Z,
       (i1 <= k)%Z /\ (k < j)%Z -> (access t0 min1 <= access t0 k)%Z)) /\
   Zwf 0 (array_length t0 - j) (array_length t0 - j1).
Proof.
intuition.
assert h: (k < j1)%Z \/ k = j1.
 omega.
 intuition.
subst k; omega.
Qed.

(* Why obligation from file , characters 619-755 *)
Lemma selection_po_5 :
 forall (t:array Z) (Pre19:(array_length t >= 1)%Z) (i:Z)
   (Post11:i = 0%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre18:Variant1 = (array_length t0 - i1)%Z)
   (Pre17:((0 <= i1)%Z /\ (i1 <= array_length t0 - 1)%Z) /\
          sorted_array t0 0 (i1 - 1) /\
          permut t0 t /\
          (forall k:Z,
             (0 <= k)%Z /\ (k < i1)%Z ->
             forall l:Z,
               (i1 <= l)%Z /\ (l < array_length t0)%Z ->
               (access t0 k <= access t0 l)%Z))
   (Test6:(i1 < array_length t0 - 1)%Z) (min:Z) (Post8:min = i1) 
   (j:Z) (Post7:j = (i1 + 1)%Z),
   ((i1 + 1 <= j)%Z /\ (j <= array_length t0)%Z) /\
   ((i1 <= min)%Z /\ (min < array_length t0)%Z) /\
   (forall k:Z,
      (i1 <= k)%Z /\ (k < j)%Z -> (access t0 min <= access t0 k)%Z).
Proof.
intuition.
assert h: k = i1.
 omega.
subst min k; omega.
Qed.

(* Why obligation from file , characters 898-905 *)
Lemma selection_po_6 :
 forall (t:array Z) (Pre19:(array_length t >= 1)%Z) (i:Z)
   (Post11:i = 0%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre18:Variant1 = (array_length t0 - i1)%Z)
   (Pre17:((0 <= i1)%Z /\ (i1 <= array_length t0 - 1)%Z) /\
          sorted_array t0 0 (i1 - 1) /\
          permut t0 t /\
          (forall k:Z,
             (0 <= k)%Z /\ (k < i1)%Z ->
             forall l:Z,
               (i1 <= l)%Z /\ (l < array_length t0)%Z ->
               (access t0 k <= access t0 l)%Z))
   (Test6:(i1 < array_length t0 - 1)%Z) (min:Z) (Post8:min = i1) 
   (j:Z) (Post7:j = (i1 + 1)%Z) (j1 min1:Z)
   (Post3:(((i1 + 1 <= j1)%Z /\ (j1 <= array_length t0)%Z) /\
           ((i1 <= min1)%Z /\ (min1 < array_length t0)%Z) /\
           (forall k:Z,
              (i1 <= k)%Z /\ (k < j1)%Z ->
              (access t0 min1 <= access t0 k)%Z)) /\
          (j1 >= array_length t0)%Z),
   (0 <= min1)%Z /\ (min1 < array_length t0)%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 926-931 *)
Lemma selection_po_7 :
 forall (t:array Z) (Pre19:(array_length t >= 1)%Z) (i:Z)
   (Post11:i = 0%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre18:Variant1 = (array_length t0 - i1)%Z)
   (Pre17:((0 <= i1)%Z /\ (i1 <= array_length t0 - 1)%Z) /\
          sorted_array t0 0 (i1 - 1) /\
          permut t0 t /\
          (forall k:Z,
             (0 <= k)%Z /\ (k < i1)%Z ->
             forall l:Z,
               (i1 <= l)%Z /\ (l < array_length t0)%Z ->
               (access t0 k <= access t0 l)%Z))
   (Test6:(i1 < array_length t0 - 1)%Z) (min:Z) (Post8:min = i1) 
   (j:Z) (Post7:j = (i1 + 1)%Z) (j1 min1:Z)
   (Post3:(((i1 + 1 <= j1)%Z /\ (j1 <= array_length t0)%Z) /\
           ((i1 <= min1)%Z /\ (min1 < array_length t0)%Z) /\
           (forall k:Z,
              (i1 <= k)%Z /\ (k < j1)%Z ->
              (access t0 min1 <= access t0 k)%Z)) /\
          (j1 >= array_length t0)%Z)
   (Pre16:(0 <= min1)%Z /\ (min1 < array_length t0)%Z) (w:Z)
   (Post6:w = access t0 min1)
   (Pre14:(0 <= min1)%Z /\ (min1 < array_length t0)%Z),
   (0 <= i1)%Z /\ (i1 < array_length t0)%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 933-943 *)
Lemma selection_po_8 :
 forall (t:array Z) (Pre19:(array_length t >= 1)%Z) (i:Z)
   (Post11:i = 0%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre18:Variant1 = (array_length t0 - i1)%Z)
   (Pre17:((0 <= i1)%Z /\ (i1 <= array_length t0 - 1)%Z) /\
          sorted_array t0 0 (i1 - 1) /\
          permut t0 t /\
          (forall k:Z,
             (0 <= k)%Z /\ (k < i1)%Z ->
             forall l:Z,
               (i1 <= l)%Z /\ (l < array_length t0)%Z ->
               (access t0 k <= access t0 l)%Z))
   (Test6:(i1 < array_length t0 - 1)%Z) (min:Z) (Post8:min = i1) 
   (j:Z) (Post7:j = (i1 + 1)%Z) (j1 min1:Z)
   (Post3:(((i1 + 1 <= j1)%Z /\ (j1 <= array_length t0)%Z) /\
           ((i1 <= min1)%Z /\ (min1 < array_length t0)%Z) /\
           (forall k:Z,
              (i1 <= k)%Z /\ (k < j1)%Z ->
              (access t0 min1 <= access t0 k)%Z)) /\
          (j1 >= array_length t0)%Z)
   (Pre16:(0 <= min1)%Z /\ (min1 < array_length t0)%Z) (w:Z)
   (Post6:w = access t0 min1)
   (Pre14:(0 <= min1)%Z /\ (min1 < array_length t0)%Z)
   (Pre15:(0 <= i1)%Z /\ (i1 < array_length t0)%Z) (t1:array Z)
   (Post4:t1 = store t0 min1 (access t0 i1)),
   (0 <= i1)%Z /\ (i1 < array_length t1)%Z.
Proof.
intuition.
ArraySubst t1.
Qed.

(* Why obligation from file , characters 909-947 *)
Lemma selection_po_9 :
 forall (t:array Z) (Pre19:(array_length t >= 1)%Z) (i:Z)
   (Post11:i = 0%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre18:Variant1 = (array_length t0 - i1)%Z)
   (Pre17:((0 <= i1)%Z /\ (i1 <= array_length t0 - 1)%Z) /\
          sorted_array t0 0 (i1 - 1) /\
          permut t0 t /\
          (forall k:Z,
             (0 <= k)%Z /\ (k < i1)%Z ->
             forall l:Z,
               (i1 <= l)%Z /\ (l < array_length t0)%Z ->
               (access t0 k <= access t0 l)%Z))
   (Test6:(i1 < array_length t0 - 1)%Z) (min:Z) (Post8:min = i1) 
   (j:Z) (Post7:j = (i1 + 1)%Z) (j1 min1:Z)
   (Post3:(((i1 + 1 <= j1)%Z /\ (j1 <= array_length t0)%Z) /\
           ((i1 <= min1)%Z /\ (min1 < array_length t0)%Z) /\
           (forall k:Z,
              (i1 <= k)%Z /\ (k < j1)%Z ->
              (access t0 min1 <= access t0 k)%Z)) /\
          (j1 >= array_length t0)%Z)
   (Pre16:(0 <= min1)%Z /\ (min1 < array_length t0)%Z) (w:Z)
   (Post6:w = access t0 min1)
   (Pre14:(0 <= min1)%Z /\ (min1 < array_length t0)%Z)
   (Pre15:(0 <= i1)%Z /\ (i1 < array_length t0)%Z) (t1:array Z)
   (Post4:t1 = store t0 min1 (access t0 i1))
   (Pre13:(0 <= i1)%Z /\ (i1 < array_length t1)%Z) (t2:array Z)
   (Post5:t2 = store t1 i1 w) (i:Z),
   i = (i1 + 1)%Z ->
   (((0 <= i)%Z /\ (i <= array_length t2 - 1)%Z) /\
    sorted_array t2 0 (i - 1) /\
    permut t2 t /\
    (forall k:Z,
       (0 <= k)%Z /\ (k < i)%Z ->
       forall l:Z,
         (i <= l)%Z /\ (l < array_length t2)%Z ->
         (access t2 k <= access t2 l)%Z)) /\
   Zwf 0 (array_length t2 - i) (array_length t0 - i1).
Proof.
intuition.
ArraySubst t2.
ArraySubst t1.
assert h: i1 = 0%Z \/ (0 < i1)%Z.
 omega.
 intuition.
replace (i0 - 1)%Z with 0%Z.
unfold sorted_array; intros; omega.
omega.
replace (i0 - 1)%Z with (i1 - 1 + 1)%Z.
apply right_extension.
omega.
ArraySubst t2.
ArraySubst t1.
apply sorted_array_id with t0.
assumption.
unfold array_id; intros.
subst t2; do 2 AccessOther.
replace (i1 - 1 + 1)%Z with i1.
subst t2 t1; do 2 AccessOther.
subst w.
apply H4; omega.
omega.
omega.
apply permut_trans with t0.
subst t2; subst t1; subst w.
apply exchange_is_permut with min1 i1; auto with *.
assumption.
assert h: k = i1 \/ (k < i1)%Z.
 omega.
 intuition.
subst k.
subst t2; simpl in H23.
AccessSame.
AccessOther.
subst t1; simpl in H23.
assert h: l = min1 \/ min1 <> l.
 omega.
 intuition.
subst l; AccessSame.
subst w; apply H11; omega.
AccessOther.
subst w; apply H11; try omega.
subst t2; simpl in H23.
 AccessOther.
AccessOther.
subst t1; simpl in H23.
assert h: l = min1 \/ min1 <> l.
 omega.
 intuition.
subst l; AccessSame.
AccessOther.
apply H4; omega.
AccessOther.
AccessOther.
apply H4; omega.
subst t2 t1; simpl; unfold Zwf; omega.
Qed.

(* Why obligation from file , characters 232-424 *)
Lemma selection_po_10 :
 forall (t:array Z) (Pre19:(array_length t >= 1)%Z) (i:Z)
   (Post11:i = 0%Z),
   ((0 <= i)%Z /\ (i <= array_length t - 1)%Z) /\
   sorted_array t 0 (i - 1) /\
   permut t t /\
   (forall k:Z,
      (0 <= k)%Z /\ (k < i)%Z ->
      forall l:Z,
        (i <= l)%Z /\ (l < array_length t)%Z ->
        (access t k <= access t l)%Z).
Proof.
intuition.
unfold sorted_array; intros; omega.
Qed.

(* Why obligation from file , characters 120-985 *)
Lemma selection_po_11 :
 forall (t:array Z) (Pre19:(array_length t >= 1)%Z) (i:Z)
   (Post11:i = 0%Z) (i1:Z) (t0:array Z)
   (Post10:(((0 <= i1)%Z /\ (i1 <= array_length t0 - 1)%Z) /\
            sorted_array t0 0 (i1 - 1) /\
            permut t0 t /\
            (forall k:Z,
               (0 <= k)%Z /\ (k < i1)%Z ->
               forall l:Z,
                 (i1 <= l)%Z /\ (l < array_length t0)%Z ->
                 (access t0 k <= access t0 l)%Z)) /\
           (i1 >= array_length t0 - 1)%Z),
   sorted_array t0 0 (array_length t0 - 1) /\ permut t0 t.
Proof.
intuition.
assert h: i1 = 0%Z \/ (0 < i1)%Z.
 omega.
 intuition.
unfold sorted_array; intros; omega.
replace (array_length t0 - 1)%Z with (i1 - 1 + 1)%Z.
apply right_extension; try omega.
 assumption.
apply H5; omega.
omega.
Qed.


