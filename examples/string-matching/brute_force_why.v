(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Why.
Require Match.

(*Why*) Parameter OUTPUT :
  (j: Z)(x: (array Z))(y: (array Z))(_: (match x `0` y j (array_length x)))
  unit.

(* Why obligation from file "brute_force.c", characters 463-467 *)
Lemma BF_po_1 : 
  (m: Z)
  (n: Z)
  (x: (array Z))
  (y: (array Z))
  (Pre12: `0 <= n` /\ `0 <= m` /\ `(array_length x) = m` /\
          `(array_length y) = n`)
  (result: Z)
  (Post11: result = `0`)
  (result0: Z)
  (Post10: result0 = `0`)
  (j0: Z)
  (Post1: j0 = `0`)
  (Variant1: Z)
  (j1: Z)
  (Pre11: Variant1 = `n - m + 1 - j1`)
  (Pre10: `0 <= j1` /\ `j1 <= n - m + 1`)
  (Test8: `j1 <= n - m`)
  (i1: Z)
  (Post2: i1 = `0`)
  (Variant3: Z)
  (i2: Z)
  (Pre6: Variant3 = `m - i2`)
  (Pre5: (`0 <= i2` /\ `i2 <= m`) /\ (match x `0` y j1 i2))
  (Test5: true = true)
  (Test4: `i2 < m`)
  `0 <= i2` /\ `i2 < (array_length x)`.
Proof.
Auto with *.
Save.

(* Why obligation from file "brute_force.c", characters 471-479 *)
Lemma BF_po_2 : 
  (m: Z)
  (n: Z)
  (x: (array Z))
  (y: (array Z))
  (Pre12: `0 <= n` /\ `0 <= m` /\ `(array_length x) = m` /\
          `(array_length y) = n`)
  (result: Z)
  (Post11: result = `0`)
  (result0: Z)
  (Post10: result0 = `0`)
  (j0: Z)
  (Post1: j0 = `0`)
  (Variant1: Z)
  (j1: Z)
  (Pre11: Variant1 = `n - m + 1 - j1`)
  (Pre10: `0 <= j1` /\ `j1 <= n - m + 1`)
  (Test8: `j1 <= n - m`)
  (i1: Z)
  (Post2: i1 = `0`)
  (Variant3: Z)
  (i2: Z)
  (Pre6: Variant3 = `m - i2`)
  (Pre5: (`0 <= i2` /\ `i2 <= m`) /\ (match x `0` y j1 i2))
  (Test5: true = true)
  (Test4: `i2 < m`)
  (Pre4: `0 <= i2` /\ `i2 < (array_length x)`)
  (c_aux_1: Z)
  (Post4: c_aux_1 = (access x i2))
  `0 <= i2 + j1` /\ `i2 + j1 < (array_length y)`.
Proof.
Auto with *.
Save.

(* Why obligation from file "brute_force.c", characters 463-479 *)
Lemma BF_po_3 : 
  (m: Z)
  (n: Z)
  (x: (array Z))
  (y: (array Z))
  (Pre12: `0 <= n` /\ `0 <= m` /\ `(array_length x) = m` /\
          `(array_length y) = n`)
  (result: Z)
  (Post11: result = `0`)
  (result0: Z)
  (Post10: result0 = `0`)
  (j0: Z)
  (Post1: j0 = `0`)
  (Variant1: Z)
  (j1: Z)
  (Pre11: Variant1 = `n - m + 1 - j1`)
  (Pre10: `0 <= j1` /\ `j1 <= n - m + 1`)
  (Test8: `j1 <= n - m`)
  (i1: Z)
  (Post2: i1 = `0`)
  (Variant3: Z)
  (i2: Z)
  (Pre6: Variant3 = `m - i2`)
  (Pre5: (`0 <= i2` /\ `i2 <= m`) /\ (match x `0` y j1 i2))
  (Test5: true = true)
  (Test4: `i2 < m`)
  (Pre4: `0 <= i2` /\ `i2 < (array_length x)`)
  (c_aux_1: Z)
  (Post4: c_aux_1 = (access x i2))
  (Pre3: `0 <= i2 + j1` /\ `i2 + j1 < (array_length y)`)
  (c_aux_2: Z)
  (Post3: c_aux_2 = (access y `i2 + j1`))
  (result6: bool)
  (Post24: (if result6 then `c_aux_1 = c_aux_2` else `c_aux_1 <> c_aux_2`))
  (if result6
   then ((i:Z)
         (i = `i2 + 1` -> ((`0 <= i` /\ `i <= m`) /\ (match x `0` y j1 i)) /\
          (Zwf `0` `m - i` `m - i2`)))
   else ((`i2 >= m` -> j1 = j1)) /\
   ((`i2 < m` ->
     ((j:Z)
      (j = `j1 + 1` -> (`0 <= j` /\ `j <= n - m + 1`) /\
       (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`)))))).
Proof.
Destruct result6; Intuition.
Subst i.
Apply match_right_extension; Auto with *.
Subst c_aux_1 c_aux_2; Ring `0+i2`; Ring `j1+i2`; Assumption.
Unfold Zwf; Omega.
Unfold Zwf; Omega.
Save.

(* Why obligation from file "brute_force.c", characters 454-479 *)
Lemma BF_po_4 : 
  (m: Z)
  (n: Z)
  (x: (array Z))
  (y: (array Z))
  (Pre12: `0 <= n` /\ `0 <= m` /\ `(array_length x) = m` /\
          `(array_length y) = n`)
  (result: Z)
  (Post11: result = `0`)
  (result0: Z)
  (Post10: result0 = `0`)
  (j0: Z)
  (Post1: j0 = `0`)
  (Variant1: Z)
  (j1: Z)
  (Pre11: Variant1 = `n - m + 1 - j1`)
  (Pre10: `0 <= j1` /\ `j1 <= n - m + 1`)
  (Test8: `j1 <= n - m`)
  (i1: Z)
  (Post2: i1 = `0`)
  (Variant3: Z)
  (i2: Z)
  (Pre6: Variant3 = `m - i2`)
  (Pre5: (`0 <= i2` /\ `i2 <= m`) /\ (match x `0` y j1 i2))
  (Test5: true = true)
  (Test3: `i2 >= m`)
  ((`i2 >= m` -> j1 = j1)) /\
  ((`i2 < m` ->
    ((j:Z)
     (j = `j1 + 1` -> (`0 <= j` /\ `j <= n - m + 1`) /\
      (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))))).
Proof.
Intuition.
Unfold Zwf; Omega.
Save.

(* Why obligation from file "brute_force.c", characters 506-538 *)
Lemma BF_po_5 : 
  (m: Z)
  (n: Z)
  (x: (array Z))
  (y: (array Z))
  (Pre12: `0 <= n` /\ `0 <= m` /\ `(array_length x) = m` /\
          `(array_length y) = n`)
  (result: Z)
  (Post11: result = `0`)
  (result0: Z)
  (Post10: result0 = `0`)
  (j0: Z)
  (Post1: j0 = `0`)
  (Variant1: Z)
  (j1: Z)
  (Pre11: Variant1 = `n - m + 1 - j1`)
  (Pre10: `0 <= j1` /\ `j1 <= n - m + 1`)
  (Test8: `j1 <= n - m`)
  (i1: Z)
  (Post2: i1 = `0`)
  (`0 <= i1` /\ `i1 <= m`) /\ (match x `0` y j1 i1).
Proof.
Intuition.
Subst i1; Apply match_empty; Auto with *.
Save.

(* Why obligation from file "brute_force.c", characters 579-592 *)
Lemma BF_po_6 : 
  (m: Z)
  (n: Z)
  (x: (array Z))
  (y: (array Z))
  (Pre12: `0 <= n` /\ `0 <= m` /\ `(array_length x) = m` /\
          `(array_length y) = n`)
  (result: Z)
  (Post11: result = `0`)
  (result0: Z)
  (Post10: result0 = `0`)
  (j0: Z)
  (Post1: j0 = `0`)
  (Variant1: Z)
  (j1: Z)
  (Pre11: Variant1 = `n - m + 1 - j1`)
  (Pre10: `0 <= j1` /\ `j1 <= n - m + 1`)
  (Test8: `j1 <= n - m`)
  (i1: Z)
  (Post2: i1 = `0`)
  (i2: Z)
  (WP8: ((`i2 >= m` -> j1 = j1)) /\
        ((`i2 < m` ->
          ((j:Z)
           (j = `j1 + 1` -> (`0 <= j` /\ `j <= n - m + 1`) /\
            (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))))))
  (Test7: `i2 >= m`)
  (c_aux_3: Z)
  (Post7: c_aux_3 = j1)
  (match x `0` y c_aux_3 (array_length x)).
Proof.
Intuition.

Save.

(* Why obligation from file "brute_force.c", characters 579-592 *)
Lemma BF_po_7 : 
  (m: Z)
  (n: Z)
  (x: (array Z))
  (y: (array Z))
  (Pre12: `0 <= n` /\ `0 <= m` /\ `(array_length x) = m` /\
          `(array_length y) = n`)
  (result: Z)
  (Post11: result = `0`)
  (result0: Z)
  (Post10: result0 = `0`)
  (j0: Z)
  (Post1: j0 = `0`)
  (Variant1: Z)
  (j1: Z)
  (Pre11: Variant1 = `n - m + 1 - j1`)
  (Pre10: `0 <= j1` /\ `j1 <= n - m + 1`)
  (Test8: `j1 <= n - m`)
  (i1: Z)
  (Post2: i1 = `0`)
  (i2: Z)
  (WP8: ((`i2 >= m` -> j1 = j1)) /\
        ((`i2 < m` ->
          ((j:Z)
           (j = `j1 + 1` -> (`0 <= j` /\ `j <= n - m + 1`) /\
            (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))))))
  (Test7: `i2 >= m`)
  (c_aux_3: Z)
  (Post7: c_aux_3 = j1)
  (Pre9: (match x `0` y c_aux_3 (array_length x)))
  (Pre7: (match x `0` y c_aux_3 (array_length x)))
  (Pre8: (match x `0` y c_aux_3 (array_length x)))
  ((j:Z)
   (j = `j1 + 1` -> (`0 <= j` /\ `j <= n - m + 1`) /\
    (Zwf `0` `n - m + 1 - j` `n - m + 1 - j1`))).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "brute_force.c", characters 389-408 *)
Lemma BF_po_8 : 
  (m: Z)
  (n: Z)
  (x: (array Z))
  (y: (array Z))
  (Pre12: `0 <= n` /\ `0 <= m` /\ `(array_length x) = m` /\
          `(array_length y) = n`)
  (result: Z)
  (Post11: result = `0`)
  (result0: Z)
  (Post10: result0 = `0`)
  (j0: Z)
  (Post1: j0 = `0`)
  `0 <= j0` /\ `j0 <= n - m + 1`.
Proof.
(* FILL PROOF HERE *)
Save.

