(* Load Programs. *)(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.
Require Export Match.

(*Why*) Parameter OUTPUT : forall j:Z, unit.

(* Why obligation from file , characters 368-372 *)
Lemma BF_po_1 :
 forall (m n:Z) (x y:array Z)
   (Pre10:array_length x = m /\
          array_length y = n /\ (0 <= n)%Z /\ (0 <= m)%Z) (j1:Z)
   (Post1:j1 = 0%Z) (Variant1 j2:Z)
   (Pre9:Variant1 = (n - m + 1 - j2)%Z) (Pre8:(0 <= j2)%Z)
   (Test8:(j2 <= n - m)%Z) (i2:Z) (Post2:i2 = 0%Z) (Variant3 i3:Z)
   (Pre6:Variant3 = (m - i3)%Z)
   (Pre5:((0 <= i3)%Z /\ (i3 <= m)%Z) /\ match_ x 0 y j2 i3)
   (Test5:true = true) (Test4:(i3 < m)%Z),
   (0 <= i3)%Z /\ (i3 < array_length x)%Z.
Proof.
auto with *.
Qed.

(* Why obligation from file , characters 376-384 *)
Lemma BF_po_2 :
 forall (m n:Z) (x y:array Z)
   (Pre10:array_length x = m /\
          array_length y = n /\ (0 <= n)%Z /\ (0 <= m)%Z) (j1:Z)
   (Post1:j1 = 0%Z) (Variant1 j2:Z)
   (Pre9:Variant1 = (n - m + 1 - j2)%Z) (Pre8:(0 <= j2)%Z)
   (Test8:(j2 <= n - m)%Z) (i2:Z) (Post2:i2 = 0%Z) (Variant3 i3:Z)
   (Pre6:Variant3 = (m - i3)%Z)
   (Pre5:((0 <= i3)%Z /\ (i3 <= m)%Z) /\ match_ x 0 y j2 i3)
   (Test5:true = true) (Test4:(i3 < m)%Z)
   (Pre4:(0 <= i3)%Z /\ (i3 < array_length x)%Z) (c_aux_1:Z)
   (Post4:c_aux_1 = access x i3),
   (0 <= i3 + j2)%Z /\ (i3 + j2 < array_length y)%Z.
Proof.
auto with *.
Qed.

(* Why obligation from file , characters 368-384 *)
Lemma BF_po_3 :
 forall (m n:Z) (x y:array Z)
   (Pre10:array_length x = m /\
          array_length y = n /\ (0 <= n)%Z /\ (0 <= m)%Z) (j1:Z)
   (Post1:j1 = 0%Z) (Variant1 j2:Z)
   (Pre9:Variant1 = (n - m + 1 - j2)%Z) (Pre8:(0 <= j2)%Z)
   (Test8:(j2 <= n - m)%Z) (i2:Z) (Post2:i2 = 0%Z) (Variant3 i3:Z)
   (Pre6:Variant3 = (m - i3)%Z)
   (Pre5:((0 <= i3)%Z /\ (i3 <= m)%Z) /\ match_ x 0 y j2 i3)
   (Test5:true = true) (Test4:(i3 < m)%Z)
   (Pre4:(0 <= i3)%Z /\ (i3 < array_length x)%Z) (c_aux_1:Z)
   (Post4:c_aux_1 = access x i3)
   (Pre3:(0 <= i3 + j2)%Z /\ (i3 + j2 < array_length y)%Z) (c_aux_2:Z)
   (Post3:c_aux_2 = access y (i3 + j2)) (result4:bool)
   (Post25:if result4 then c_aux_1 = c_aux_2 else c_aux_1 <> c_aux_2),
   if result4
   then
    forall i:Z,
      i = (i3 + 1)%Z ->
      (((0 <= i)%Z /\ (i <= m)%Z) /\ match_ x 0 y j2 i) /\
      Zwf 0 (m - i) (m - i3)
   else
    ((i3 >= m)%Z ->
     (forall j:Z,
        j = (j2 + 1)%Z ->
        (0 <= j)%Z /\ Zwf 0 (n - m + 1 - j) (n - m + 1 - j2)) /\
     match_ x 0 y j2 (array_length x)) /\
    ((i3 < m)%Z ->
     forall j:Z,
       j = (j2 + 1)%Z ->
       (0 <= j)%Z /\ Zwf 0 (n - m + 1 - j) (n - m + 1 - j2)).
Proof.
olddestruct result4; intuition.
subst i.
apply match_right_extension; auto with *.
subst c_aux_1 c_aux_2; ring (0 + i3)%Z; ring (j2 + i3)%Z; assumption.
assert (i3 = array_length x).
 omega.
 subst i3; assumption.
Qed.

(* Why obligation from file , characters 359-384 *)
Lemma BF_po_4 :
 forall (m n:Z) (x y:array Z)
   (Pre10:array_length x = m /\
          array_length y = n /\ (0 <= n)%Z /\ (0 <= m)%Z) (j1:Z)
   (Post1:j1 = 0%Z) (Variant1 j2:Z)
   (Pre9:Variant1 = (n - m + 1 - j2)%Z) (Pre8:(0 <= j2)%Z)
   (Test8:(j2 <= n - m)%Z) (i2:Z) (Post2:i2 = 0%Z) (Variant3 i3:Z)
   (Pre6:Variant3 = (m - i3)%Z)
   (Pre5:((0 <= i3)%Z /\ (i3 <= m)%Z) /\ match_ x 0 y j2 i3)
   (Test5:true = true) (Test3:(i3 >= m)%Z),
   ((i3 >= m)%Z ->
    (forall j:Z,
       j = (j2 + 1)%Z ->
       (0 <= j)%Z /\ Zwf 0 (n - m + 1 - j) (n - m + 1 - j2)) /\
    match_ x 0 y j2 (array_length x)) /\
   ((i3 < m)%Z ->
    forall j:Z,
      j = (j2 + 1)%Z ->
      (0 <= j)%Z /\ Zwf 0 (n - m + 1 - j) (n - m + 1 - j2)).
Proof.
intuition.
assert (i3 = array_length x).
 omega.
 subst i3; assumption.
Qed.

(* Why obligation from file , characters 411-443 *)
Lemma BF_po_5 :
 forall (m n:Z) (x y:array Z)
   (Pre10:array_length x = m /\
          array_length y = n /\ (0 <= n)%Z /\ (0 <= m)%Z) (j1:Z)
   (Post1:j1 = 0%Z) (Variant1 j2:Z)
   (Pre9:Variant1 = (n - m + 1 - j2)%Z) (Pre8:(0 <= j2)%Z)
   (Test8:(j2 <= n - m)%Z) (i2:Z) (Post2:i2 = 0%Z),
   ((0 <= i2)%Z /\ (i2 <= m)%Z) /\ match_ x 0 y j2 i2.
Proof.
intuition.
subst i2; apply match_empty; auto with *.
Qed.

(* Why obligation from file , characters 307-313 *)
Lemma BF_po_6 :
 forall (m n:Z) (x y:array Z)
   (Pre10:array_length x = m /\
          array_length y = n /\ (0 <= n)%Z /\ (0 <= m)%Z) (j1:Z)
   (Post1:j1 = 0%Z), (0 <= j1)%Z.
Proof.
intuition.
Qed.

