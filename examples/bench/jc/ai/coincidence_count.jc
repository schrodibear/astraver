
# AnnotationPolicy = Invariants
# AbstractDomain = Box

/* example from Leino and Monahan "Automatic verification of textbook programs" */

type intM = { integer intP; }


integer coincidence_count(intM[0..] f, intM[0..] g) 
    requires \offset_max(f) >= -1 && \offset_max(g) >= -1;
{
    var integer ct = 0;
    var integer m = 0;
    var integer n = 0;
    	invariant true;
    /*	    0 <= m && m <= \offset_max(f) + 1 &&
	    0 <= n && n <= \offset_max(g) + 1;  */
    while (m < \offset_max(f) + 1 || n < \offset_max(g) + 1) 
    {
        if (n == \offset_max(g) + 1 || 
	    (m < \offset_max(f) + 1 && (f + m).intP < (g + n).intP)) then {
	    m++;
	} else if (m == \offset_max(f) + 1 || 
		   (n < \offset_max(g) + 1 && (g + n).intP < (f + m).intP)) then {
	    n++;
	} else {
	    ct++;
	    m++;
	    n++;
        }
    };
    return ct;
}
