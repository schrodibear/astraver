# InvariantPolicy = Ownership

tag Point = {
  integer x;
  integer y;
  boolean colored;
  invariant point_inv(this) = this.x >= 0 && this.y >= 0;
  invariant colored_inv(this) = 
       this.colored ==> this <: ColorPoint;
}

tag ColorPoint = Point with {
  integer c;
  invariant color_inv(this) = this.c >= 0 && this.c <= 255;
}

type Point = [Point]

unit break_color_inv(ColorPoint[0] p)
  requires \mutable(p);
  behavior ok:
    ensures true;
{
  p.c = 256;
}

unit move(Point[0] p)
  requires \mutable(p,Point) && p.committed == false;
  behavior ok:
    ensures \mutable(p,Point) && p.committed == false;
{
  unpack(p);
  p.x += 1;
  p.y += 1;
  if (p.colored) then break_color_inv(p :> ColorPoint[0]); // BAD! 
  pack(p);
}

/*
Local Variables: 
compile-command: "make color"
End: 
*/
