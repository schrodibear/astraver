(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.
Require Export words.
Require Import Omega.
Require Import Sumbool.

(*Why*) Parameter n1 : Z.
Axiom n1_non_negative : (0 <= n1)%Z.

(*Why*) Parameter n2 : Z.
Axiom n2_non_negative : (0 <= n2)%Z.

Ltac Omega' :=
  generalize n1_non_negative; generalize n2_non_negative;
   abstract omega.

Definition min_suffix (w1 w2:array A) (i j n:Z) :=
  min_dist (suffix n1 w1 i) (suffix n2 w2 j) n.

Definition test_char (a b:A) := bool_of_sumbool (A_eq_dec a b).

Proof.
simpl; intuition.
Qed.

Proof.
intuition.
ArraySubst t1.
subst t1.
 AccessStore i1 j Hij; try Omega'.
apply H8; Omega'.
Qed.

Proof.
intuition.
Omega'.
Qed.

Proof.
intuition.
Omega'.
Qed.

Proof.
intuition.
ArraySubst t4.
unfold min_suffix.
subst t4.
AccessStore j2 k Hj2k.
  (* j2=k *)
  rewrite (suffix_is_cons n1 w1 i3); [ idtac | Omega' ].
  rewrite (suffix_is_cons n2 w2 k); [ idtac | Omega' ].
  rewrite Test6.
 rewrite <- Hj2k.
  apply min_dist_equal.
  subst temp; assumption.
  Omega'.
  (* j2<>k *)
  unfold min_suffix in H16.
  apply H18; Omega'.
  Omega'.
  Omega'.
unfold min_suffix.
subst t4.
AccessOther.
unfold min_suffix in H21; apply H21; Omega'.
replace (j + 1)%Z with j2; [ idtac | Omega' ].
subst old3.
unfold min_suffix; unfold min_suffix in H21; apply H21; Omega'.
Qed.

Proof.
intuition.
Qed.

Proof.
intuition.
ArraySubst t4.
unfold min_suffix.
rewrite Post11; clear Post11.
AccessStore j2 k Hj2k.
  (* j2=k *)
  rewrite <- Hj2k.
    rewrite (suffix_is_cons n1 w1 i3); [ idtac | Omega' ].
  rewrite (suffix_is_cons n2 w2 j2); [ idtac | Omega' ].
  apply min_dist_diff.
   assumption.
  rewrite <- (suffix_is_cons n1 w1 i3); [ idtac | Omega' ].
  apply H18; Omega'.
  rewrite <- (suffix_is_cons n2 w2 j2); [ idtac | Omega' ].
  apply H21; Omega'.
  Omega'.
  (* j2<> k *)
  apply H18; Omega'.
  Omega'.
  Omega'.
rewrite Post11; clear Post11.
unfold min_suffix.
AccessOther.
apply H21; Omega'.
replace (j + 1)%Z with j2; [ idtac | Omega' ].
subst old3; apply H21; Omega'.
Qed.

Proof.
intuition.
ArraySubst t2.
rewrite Post7; clear Post7.
replace k with n2; [ idtac | Omega' ].
unfold min_suffix.
rewrite (suffix_is_cons n1 w1 i3).
rewrite suffix_n_is_eps.
AccessSame.
apply min_dist_eps.
rewrite <- suffix_n_is_eps with (n := n2) (t := w2).
apply H13; Omega'.
Omega'.
rewrite Post7.
AccessOther.
apply H13; Omega'.
rewrite Post6.
replace n2 with (j1 + 1)%Z; [ idtac | Omega' ].
apply H13; Omega'.
Qed.

Proof.
intuition.
replace (i4 + 1)%Z with i3; [ idtac | Omega' ].
apply H20; Omega'.
Qed.

Proof.
intuition.
Omega'.
replace (i2 + 1)%Z with n1; [ idtac | Omega' ].
unfold min_suffix.
rewrite suffix_n_is_eps.
replace (access t0 j) with (Zlength (suffix n2 w2 j)).
exact (min_dist_eps_length (suffix n2 w2 j)).
rewrite H7.
apply suffix_length; Omega'.
Omega'.
Qed.

Proof.
intuition.
Omega'.
Qed.


Proof.
intuition.
cut ((i3 + 1)%Z = 0%Z); [ intro Hi3 | Omega' ].
rewrite Hi3 in H14.
unfold word_of_array.
unfold min_suffix in H14.
apply (H14 0%Z); Omega'.
Qed.

