(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Why.
Require words.
Require Omega.

(*Why*) Parameter n1 : Z.
Axiom n1_non_negative : `0 <= n1`.

(*Why*) Parameter n2 : Z.
Axiom n2_non_negative : `0 <= n2`.

Tactic Definition Omega' := 
  Generalize n1_non_negative; 
  Generalize n2_non_negative; 
  Abstract Omega.

Definition min_suffix :=
  [w1:(array n1 A)][w2:(array n2 A)][i,j,n:Z]
  (min_dist (suffix w1 i) (suffix w2 j) n).

Definition test_char := [a,b:A](bool_of_sumbool ? ? (A_eq_dec a b)).

Lemma distance_po_1 : 
  (i0: Z)
  (Post1: i0 = `0`)
  (well_founded ? (Zwf ZERO)).
Proof.
Auto with *.
Save.

Lemma distance_po_2 : 
  (i0: Z)
  (Post1: i0 = `0`)
  (Variant1: Z)
  (t0: (array `n2 + 1` Z))
  (i1: Z)
  (Pre3: `0 <= i1` /\ `i1 <= n2 + 1` /\
         ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)))
  (Pre2: Variant1 = `n2 + 1 - i1`)
  (result0: bool)
  (Bool1: (if result0 then `i1 <= n2` else `i1 > n2`))
  (Test2: `i1 <= n2`)
  ((i:Z)
   (i = `i1 + 1` -> `0 <= i` /\ `i <= n2 + 1` /\
    ((j:Z)
     (`0 <= j` /\ `j < i` -> (access (store t0 i1 `n2 - i1`) j) = `n2 - j`)) /\
    (Zwf `0` `n2 + 1 - i` `n2 + 1 - i1`))).
Proof.
Intuition.
ArrayAccess i1 j Hij; Try Omega'.
Apply H2; Omega'.
Unfold Zwf; Omega'.
Save.

Lemma distance_po_3 : 
  (i0: Z)
  (Post1: i0 = `0`)
  (Variant1: Z)
  (t0: (array `n2 + 1` Z))
  (i1: Z)
  (Pre3: `0 <= i1` /\ `i1 <= n2 + 1` /\
         ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)))
  (Pre2: Variant1 = `n2 + 1 - i1`)
  (result0: bool)
  (Bool1: (if result0 then `i1 <= n2` else `i1 > n2`))
  (Test2: `i1 <= n2`)
  (t1: (array `n2 + 1` Z))
  (Post16: ((i:Z)
            (i = `i1 + 1` -> `0 <= i` /\ `i <= n2 + 1` /\
             ((j:Z) (`0 <= j` /\ `j < i` -> (access t1 j) = `n2 - j`)) /\
             (Zwf `0` `n2 + 1 - i` `n2 + 1 - i1`))))
  (i2: Z)
  (Post2: i2 = `i1 + 1`)
  `0 <= i2` /\ `i2 <= n2 + 1` /\
  ((j:Z) (`0 <= j` /\ `j < i2` -> (access t1 j) = `n2 - j`)) /\
  (Zwf `0` `n2 + 1 - i2` `n2 + 1 - i1`).
Proof.
Intuition.
Save.

Lemma distance_po_4 : 
  (i0: Z)
  (Post1: i0 = `0`)
  (Variant1: Z)
  (t0: (array `n2 + 1` Z))
  (i1: Z)
  (Pre3: `0 <= i1` /\ `i1 <= n2 + 1` /\
         ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)))
  (Pre2: Variant1 = `n2 + 1 - i1`)
  (result0: bool)
  (Bool1: (if result0 then `i1 <= n2` else `i1 > n2`))
  (Test2: `i1 <= n2`)
  (i2: Z)
  (t1: (array `n2 + 1` Z))
  (Post15: `0 <= i2` /\ `i2 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i2` -> (access t1 j) = `n2 - j`)) /\
           (Zwf `0` `n2 + 1 - i2` `n2 + 1 - i1`))
  (Zwf `0` `n2 + 1 - i2` Variant1).
Proof.
Intuition.
Rewrite Pre2; Assumption.
Save.

Lemma distance_po_5 : 
  (i0: Z)
  (Post1: i0 = `0`)
  (Variant1: Z)
  (t0: (array `n2 + 1` Z))
  (i1: Z)
  (Pre3: `0 <= i1` /\ `i1 <= n2 + 1` /\
         ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)))
  (Pre2: Variant1 = `n2 + 1 - i1`)
  (result0: bool)
  (Bool1: (if result0 then `i1 <= n2` else `i1 > n2`))
  (Test2: `i1 <= n2`)
  (i2: Z)
  (t1: (array `n2 + 1` Z))
  (Post15: `0 <= i2` /\ `i2 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i2` -> (access t1 j) = `n2 - j`)) /\
           (Zwf `0` `n2 + 1 - i2` `n2 + 1 - i1`))
  `0 <= i2` /\ `i2 <= n2 + 1` /\
  ((j:Z) (`0 <= j` /\ `j < i2` -> (access t1 j) = `n2 - j`)).
Proof.
Intuition.
Save.

Lemma distance_po_6 : 
  (i0: Z)
  (Post1: i0 = `0`)
  (Variant1: Z)
  (t0: (array `n2 + 1` Z))
  (i1: Z)
  (Pre3: `0 <= i1` /\ `i1 <= n2 + 1` /\
         ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)))
  (Pre2: Variant1 = `n2 + 1 - i1`)
  (result0: bool)
  (Bool1: (if result0 then `i1 <= n2` else `i1 > n2`))
  (Test1: `i1 > n2`)
  `0 <= i1` /\ `i1 <= n2 + 1` /\
  ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\ `i1 > n2`.
Proof.
Intuition.
Save.

Lemma distance_po_7 : 
  (t: (array `n2 + 1` Z))
  (i0: Z)
  (Post1: i0 = `0`)
  `0 <= i0` /\ `i0 <= n2 + 1` /\
  ((j:Z) (`0 <= j` /\ `j < i0` -> (access t j) = `n2 - j`)).
Proof.
Intuition.
Omega'.
Save.

Lemma distance_po_8 : 
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (well_founded ? (Zwf ZERO)).
Proof.
Intuition.
Save.

Lemma distance_po_9 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  `0 <= n2` /\ `n2 < n2 + 1`.
Proof.
Intuition.
Omega'.
Save.

Lemma distance_po_10 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  ((j:Z)
   (j = `n2 - 1` ->
    ((j:Z)
     ((old:Z)
      ((t:(array `n2 + 1` Z))
       (`(-1) <= j` /\ `j <= n2 - 1` /\
        ((k:Z) (`j < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t k)))) /\
        ((k:Z)
         (`0 <= k` /\ `k <= j` -> (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
        (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
        ((i:Z)
         (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i + 1` j (access t j)))) /\
          (Zwf `0` `i + 1` `i3 + 1`))))))))).
Proof.
Intuition.
Replace `i+1` with i3; [ Idtac | Omega' ].
Apply H13; Omega'.
Unfold Zwf; Omega'.
Save.

Lemma distance_po_11 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  (Post23: ((j:Z)
            (j = `n2 - 1` ->
             ((j:Z)
              ((old:Z)
               ((t:(array `n2 + 1` Z))
                (`(-1) <= j` /\ `j <= n2 - 1` /\
                 ((k:Z)
                  (`j < k` /\ `k <= n2` ->
                   (min_suffix w1 w2 i3 k (access t k)))) /\
                 ((k:Z)
                  (`0 <= k` /\ `k <= j` ->
                   (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
                 (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
                 ((i:Z)
                  (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
                   ((j:Z)
                    (`0 <= j` /\ `j <= n2` ->
                     (min_suffix w1 w2 `i + 1` j (access t j)))) /\
                   (Zwf `0` `i + 1` `i3 + 1`))))))))))
  (j1: Z)
  (Post5: j1 = `n2 - 1`)
  (well_founded ? (Zwf ZERO)).
Proof.
Auto with *.
Save.

Lemma distance_po_12 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  (Post23: ((j:Z)
            (j = `n2 - 1` ->
             ((j:Z)
              ((old:Z)
               ((t:(array `n2 + 1` Z))
                (`(-1) <= j` /\ `j <= n2 - 1` /\
                 ((k:Z)
                  (`j < k` /\ `k <= n2` ->
                   (min_suffix w1 w2 i3 k (access t k)))) /\
                 ((k:Z)
                  (`0 <= k` /\ `k <= j` ->
                   (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
                 (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
                 ((i:Z)
                  (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
                   ((j:Z)
                    (`0 <= j` /\ `j <= n2` ->
                     (min_suffix w1 w2 `i + 1` j (access t j)))) /\
                   (Zwf `0` `i + 1` `i3 + 1`))))))))))
  (j1: Z)
  (Post5: j1 = `n2 - 1`)
  (Variant5: Z)
  (t3: (array `n2 + 1` Z))
  (old2: Z)
  (j2: Z)
  (Pre14: `(-1) <= j2` /\ `j2 <= n2 - 1` /\
          ((k:Z)
           (`j2 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t3 k)))) /\
          ((k:Z)
           (`0 <= k` /\ `k <= j2` ->
            (min_suffix w1 w2 `i3 + 1` k (access t3 k)))) /\
          (min_suffix w1 w2 `i3 + 1` `j2 + 1` old2))
  (Pre13: Variant5 = `j2 + 1`)
  (result6: bool)
  (Bool3: (if result6 then `j2 >= 0` else `j2 < 0`))
  (Test7: `j2 >= 0`)
  (result7: Z)
  (Post6: result7 = old2)
  `0 <= j2` /\ `j2 < n2 + 1`.
Proof.
Intuition.
Save.

Lemma distance_po_13 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  (Post23: ((j:Z)
            (j = `n2 - 1` ->
             ((j:Z)
              ((old:Z)
               ((t:(array `n2 + 1` Z))
                (`(-1) <= j` /\ `j <= n2 - 1` /\
                 ((k:Z)
                  (`j < k` /\ `k <= n2` ->
                   (min_suffix w1 w2 i3 k (access t k)))) /\
                 ((k:Z)
                  (`0 <= k` /\ `k <= j` ->
                   (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
                 (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
                 ((i:Z)
                  (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
                   ((j:Z)
                    (`0 <= j` /\ `j <= n2` ->
                     (min_suffix w1 w2 `i + 1` j (access t j)))) /\
                   (Zwf `0` `i + 1` `i3 + 1`))))))))))
  (j1: Z)
  (Post5: j1 = `n2 - 1`)
  (Variant5: Z)
  (t3: (array `n2 + 1` Z))
  (old2: Z)
  (j2: Z)
  (Pre14: `(-1) <= j2` /\ `j2 <= n2 - 1` /\
          ((k:Z)
           (`j2 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t3 k)))) /\
          ((k:Z)
           (`0 <= k` /\ `k <= j2` ->
            (min_suffix w1 w2 `i3 + 1` k (access t3 k)))) /\
          (min_suffix w1 w2 `i3 + 1` `j2 + 1` old2))
  (Pre13: Variant5 = `j2 + 1`)
  (result6: bool)
  (Bool3: (if result6 then `j2 >= 0` else `j2 < 0`))
  (Test7: `j2 >= 0`)
  (result7: Z)
  (Post6: result7 = old2)
  (Pre8: `0 <= j2` /\ `j2 < n2 + 1`)
  (old3: Z)
  (Post7: old3 = (access t3 j2))
  `0 <= j2` /\ `j2 < n2`.
Proof.
Intuition.
Save.

Lemma distance_po_14 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  (Post23: ((j:Z)
            (j = `n2 - 1` ->
             ((j:Z)
              ((old:Z)
               ((t:(array `n2 + 1` Z))
                (`(-1) <= j` /\ `j <= n2 - 1` /\
                 ((k:Z)
                  (`j < k` /\ `k <= n2` ->
                   (min_suffix w1 w2 i3 k (access t k)))) /\
                 ((k:Z)
                  (`0 <= k` /\ `k <= j` ->
                   (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
                 (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
                 ((i:Z)
                  (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
                   ((j:Z)
                    (`0 <= j` /\ `j <= n2` ->
                     (min_suffix w1 w2 `i + 1` j (access t j)))) /\
                   (Zwf `0` `i + 1` `i3 + 1`))))))))))
  (j1: Z)
  (Post5: j1 = `n2 - 1`)
  (Variant5: Z)
  (t3: (array `n2 + 1` Z))
  (old2: Z)
  (j2: Z)
  (Pre14: `(-1) <= j2` /\ `j2 <= n2 - 1` /\
          ((k:Z)
           (`j2 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t3 k)))) /\
          ((k:Z)
           (`0 <= k` /\ `k <= j2` ->
            (min_suffix w1 w2 `i3 + 1` k (access t3 k)))) /\
          (min_suffix w1 w2 `i3 + 1` `j2 + 1` old2))
  (Pre13: Variant5 = `j2 + 1`)
  (result6: bool)
  (Bool3: (if result6 then `j2 >= 0` else `j2 < 0`))
  (Test7: `j2 >= 0`)
  (result7: Z)
  (Post6: result7 = old2)
  (Pre8: `0 <= j2` /\ `j2 < n2 + 1`)
  (old3: Z)
  (Post7: old3 = (access t3 j2))
  (Pre9: `0 <= j2` /\ `j2 < n2`)
  `0 <= i3` /\ `i3 < n1`.
Proof.
Intuition.
Save.

Lemma distance_po_15 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  (Post23: ((j:Z)
            (j = `n2 - 1` ->
             ((j:Z)
              ((old:Z)
               ((t:(array `n2 + 1` Z))
                (`(-1) <= j` /\ `j <= n2 - 1` /\
                 ((k:Z)
                  (`j < k` /\ `k <= n2` ->
                   (min_suffix w1 w2 i3 k (access t k)))) /\
                 ((k:Z)
                  (`0 <= k` /\ `k <= j` ->
                   (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
                 (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
                 ((i:Z)
                  (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
                   ((j:Z)
                    (`0 <= j` /\ `j <= n2` ->
                     (min_suffix w1 w2 `i + 1` j (access t j)))) /\
                   (Zwf `0` `i + 1` `i3 + 1`))))))))))
  (j1: Z)
  (Post5: j1 = `n2 - 1`)
  (Variant5: Z)
  (t3: (array `n2 + 1` Z))
  (old2: Z)
  (j2: Z)
  (Pre14: `(-1) <= j2` /\ `j2 <= n2 - 1` /\
          ((k:Z)
           (`j2 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t3 k)))) /\
          ((k:Z)
           (`0 <= k` /\ `k <= j2` ->
            (min_suffix w1 w2 `i3 + 1` k (access t3 k)))) /\
          (min_suffix w1 w2 `i3 + 1` `j2 + 1` old2))
  (Pre13: Variant5 = `j2 + 1`)
  (result6: bool)
  (Bool3: (if result6 then `j2 >= 0` else `j2 < 0`))
  (Test7: `j2 >= 0`)
  (result7: Z)
  (Post6: result7 = old2)
  (Pre8: `0 <= j2` /\ `j2 < n2 + 1`)
  (old3: Z)
  (Post7: old3 = (access t3 j2))
  (result9: bool)
  (Bool4: (if result9 then (access w1 i3) = (access w2 j2)
           else ~(access w1 i3) = (access w2 j2)))
  (Test6: (access w1 i3) = (access w2 j2))
  ((j:Z)
   (j = `j2 - 1` -> `(-1) <= j` /\ `j <= n2 - 1` /\
    ((k:Z)
     (`j < k` /\ `k <= n2` ->
      (min_suffix w1 w2 i3 k (access (store t3 j2 result7) k)))) /\
    ((k:Z)
     (`0 <= k` /\ `k <= j` ->
      (min_suffix w1 w2 `i3 + 1` k (access (store t3 j2 result7) k)))) /\
    (min_suffix w1 w2 `i3 + 1` `j + 1` old3) /\ (Zwf `0` `j + 1` `j2 + 1`))).
Proof.
Intuition.
Unfold min_suffix.
ArrayAccess j2 k Hj2k.
  (* j2=k *)
  Rewrite (suffix_is_cons ? w1 i3); [ Idtac | Omega' ].
  Rewrite (suffix_is_cons ? w2 k); [ Idtac | Omega' ].
  Rewrite Test6. Rewrite <- Hj2k.
  Apply min_dist_equal.
  Rewrite Post6; Assumption.
  Omega'.
  (* j2<>k *)
  Unfold min_suffix in H11.
  Apply H11; Omega'.
  Omega'.
  Omega'.
Unfold min_suffix.
Rewrite store_def_2.
Unfold min_suffix in H13; Apply H13; Omega'.
Omega'.
Omega'.
Omega'.
Replace `j+1` with j2; [ Idtac | Omega' ].
Rewrite Post7.
Unfold min_suffix; Unfold min_suffix in H13; Apply H13; Omega'.
Unfold Zwf; Omega'.
Save.

Lemma distance_po_16 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  (Post23: ((j:Z)
            (j = `n2 - 1` ->
             ((j:Z)
              ((old:Z)
               ((t:(array `n2 + 1` Z))
                (`(-1) <= j` /\ `j <= n2 - 1` /\
                 ((k:Z)
                  (`j < k` /\ `k <= n2` ->
                   (min_suffix w1 w2 i3 k (access t k)))) /\
                 ((k:Z)
                  (`0 <= k` /\ `k <= j` ->
                   (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
                 (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
                 ((i:Z)
                  (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
                   ((j:Z)
                    (`0 <= j` /\ `j <= n2` ->
                     (min_suffix w1 w2 `i + 1` j (access t j)))) /\
                   (Zwf `0` `i + 1` `i3 + 1`))))))))))
  (j1: Z)
  (Post5: j1 = `n2 - 1`)
  (Variant5: Z)
  (t3: (array `n2 + 1` Z))
  (old2: Z)
  (j2: Z)
  (Pre14: `(-1) <= j2` /\ `j2 <= n2 - 1` /\
          ((k:Z)
           (`j2 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t3 k)))) /\
          ((k:Z)
           (`0 <= k` /\ `k <= j2` ->
            (min_suffix w1 w2 `i3 + 1` k (access t3 k)))) /\
          (min_suffix w1 w2 `i3 + 1` `j2 + 1` old2))
  (Pre13: Variant5 = `j2 + 1`)
  (result6: bool)
  (Bool3: (if result6 then `j2 >= 0` else `j2 < 0`))
  (Test7: `j2 >= 0`)
  (result7: Z)
  (Post6: result7 = old2)
  (Pre8: `0 <= j2` /\ `j2 < n2 + 1`)
  (old3: Z)
  (Post7: old3 = (access t3 j2))
  (result9: bool)
  (Bool4: (if result9 then (access w1 i3) = (access w2 j2)
           else ~(access w1 i3) = (access w2 j2)))
  (Test5: ~(access w1 i3) = (access w2 j2))
  `0 <= j2 + 1` /\ `j2 + 1 < n2 + 1`.
Proof.
Intuition.
Save.

Lemma distance_po_17 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  (Post23: ((j:Z)
            (j = `n2 - 1` ->
             ((j:Z)
              ((old:Z)
               ((t:(array `n2 + 1` Z))
                (`(-1) <= j` /\ `j <= n2 - 1` /\
                 ((k:Z)
                  (`j < k` /\ `k <= n2` ->
                   (min_suffix w1 w2 i3 k (access t k)))) /\
                 ((k:Z)
                  (`0 <= k` /\ `k <= j` ->
                   (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
                 (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
                 ((i:Z)
                  (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
                   ((j:Z)
                    (`0 <= j` /\ `j <= n2` ->
                     (min_suffix w1 w2 `i + 1` j (access t j)))) /\
                   (Zwf `0` `i + 1` `i3 + 1`))))))))))
  (j1: Z)
  (Post5: j1 = `n2 - 1`)
  (Variant5: Z)
  (t3: (array `n2 + 1` Z))
  (old2: Z)
  (j2: Z)
  (Pre14: `(-1) <= j2` /\ `j2 <= n2 - 1` /\
          ((k:Z)
           (`j2 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t3 k)))) /\
          ((k:Z)
           (`0 <= k` /\ `k <= j2` ->
            (min_suffix w1 w2 `i3 + 1` k (access t3 k)))) /\
          (min_suffix w1 w2 `i3 + 1` `j2 + 1` old2))
  (Pre13: Variant5 = `j2 + 1`)
  (result6: bool)
  (Bool3: (if result6 then `j2 >= 0` else `j2 < 0`))
  (Test7: `j2 >= 0`)
  (result7: Z)
  (Post6: result7 = old2)
  (Pre8: `0 <= j2` /\ `j2 < n2 + 1`)
  (old3: Z)
  (Post7: old3 = (access t3 j2))
  (result9: bool)
  (Bool4: (if result9 then (access w1 i3) = (access w2 j2)
           else ~(access w1 i3) = (access w2 j2)))
  (Test5: ~(access w1 i3) = (access w2 j2))
  (Pre11: `0 <= j2 + 1` /\ `j2 + 1 < n2 + 1`)
  (Pre12: `0 <= j2` /\ `j2 < n2 + 1`)
  ((j:Z)
   (j = `j2 - 1` -> `(-1) <= j` /\ `j <= n2 - 1` /\
    ((k:Z)
     (`j < k` /\ `k <= n2` ->
      (min_suffix w1 w2 i3 k
       (access (store t3 j2 `(Zmin (access t3 j2) (access t3 j2 + 1)) + 1`) k)))) /\
    ((k:Z)
     (`0 <= k` /\ `k <= j` ->
      (min_suffix w1 w2 `i3 + 1` k
       (access (store t3 j2 `(Zmin (access t3 j2) (access t3 j2 + 1)) + 1`) k)))) /\
    (min_suffix w1 w2 `i3 + 1` `j + 1` old3) /\ (Zwf `0` `j + 1` `j2 + 1`))).
Proof. 
Intuition.
Unfold min_suffix.
ArrayAccess j2 k Hj2k.
  (* j2=k *)
  Rewrite <- Hj2k.  
  Rewrite (suffix_is_cons ? w1 i3); [ Idtac | Omega' ].
  Rewrite (suffix_is_cons ? w2 j2); [ Idtac | Omega' ].
  Apply min_dist_diff. 
  Assumption.
  Rewrite <- (suffix_is_cons ? w1 i3); [ Idtac | Omega' ].
  Apply H11; Omega'.
  Rewrite <- (suffix_is_cons ? w2 j2); [ Idtac | Omega' ].
  Apply H13; Omega'.
  Omega'.
  (* j2<> k *)
  Apply H11; Omega'.
  Omega'.
  Omega'.
Unfold min_suffix.
Rewrite store_def_2.
Apply H13; Omega'.
Omega'.
Omega'.
Omega'.
Replace `j+1` with j2; [ Idtac | Omega' ].
Rewrite Post7; Apply H13; Omega'.
Unfold Zwf; Omega'.
Save.

Lemma distance_po_18 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  (Post23: ((j:Z)
            (j = `n2 - 1` ->
             ((j:Z)
              ((old:Z)
               ((t:(array `n2 + 1` Z))
                (`(-1) <= j` /\ `j <= n2 - 1` /\
                 ((k:Z)
                  (`j < k` /\ `k <= n2` ->
                   (min_suffix w1 w2 i3 k (access t k)))) /\
                 ((k:Z)
                  (`0 <= k` /\ `k <= j` ->
                   (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
                 (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
                 ((i:Z)
                  (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
                   ((j:Z)
                    (`0 <= j` /\ `j <= n2` ->
                     (min_suffix w1 w2 `i + 1` j (access t j)))) /\
                   (Zwf `0` `i + 1` `i3 + 1`))))))))))
  (j1: Z)
  (Post5: j1 = `n2 - 1`)
  (Variant5: Z)
  (t3: (array `n2 + 1` Z))
  (old2: Z)
  (j2: Z)
  (Pre14: `(-1) <= j2` /\ `j2 <= n2 - 1` /\
          ((k:Z)
           (`j2 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t3 k)))) /\
          ((k:Z)
           (`0 <= k` /\ `k <= j2` ->
            (min_suffix w1 w2 `i3 + 1` k (access t3 k)))) /\
          (min_suffix w1 w2 `i3 + 1` `j2 + 1` old2))
  (Pre13: Variant5 = `j2 + 1`)
  (result6: bool)
  (Bool3: (if result6 then `j2 >= 0` else `j2 < 0`))
  (Test7: `j2 >= 0`)
  (old3: Z)
  (t4: (array `n2 + 1` Z))
  (Post30: ((j:Z)
            (j = `j2 - 1` -> `(-1) <= j` /\ `j <= n2 - 1` /\
             ((k:Z)
              (`j < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t4 k)))) /\
             ((k:Z)
              (`0 <= k` /\ `k <= j` ->
               (min_suffix w1 w2 `i3 + 1` k (access t4 k)))) /\
             (min_suffix w1 w2 `i3 + 1` `j + 1` old3) /\
             (Zwf `0` `j + 1` `j2 + 1`))))
  (j3: Z)
  (Post8: j3 = `j2 - 1`)
  `(-1) <= j3` /\ `j3 <= n2 - 1` /\
  ((k:Z) (`j3 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t4 k)))) /\
  ((k:Z)
   (`0 <= k` /\ `k <= j3` -> (min_suffix w1 w2 `i3 + 1` k (access t4 k)))) /\
  (min_suffix w1 w2 `i3 + 1` `j3 + 1` old3) /\ (Zwf `0` `j3 + 1` `j2 + 1`).
Proof.
Intuition.
Save.

Lemma distance_po_19 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  (Post23: ((j:Z)
            (j = `n2 - 1` ->
             ((j:Z)
              ((old:Z)
               ((t:(array `n2 + 1` Z))
                (`(-1) <= j` /\ `j <= n2 - 1` /\
                 ((k:Z)
                  (`j < k` /\ `k <= n2` ->
                   (min_suffix w1 w2 i3 k (access t k)))) /\
                 ((k:Z)
                  (`0 <= k` /\ `k <= j` ->
                   (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
                 (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
                 ((i:Z)
                  (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
                   ((j:Z)
                    (`0 <= j` /\ `j <= n2` ->
                     (min_suffix w1 w2 `i + 1` j (access t j)))) /\
                   (Zwf `0` `i + 1` `i3 + 1`))))))))))
  (j1: Z)
  (Post5: j1 = `n2 - 1`)
  (Variant5: Z)
  (t3: (array `n2 + 1` Z))
  (old2: Z)
  (j2: Z)
  (Pre14: `(-1) <= j2` /\ `j2 <= n2 - 1` /\
          ((k:Z)
           (`j2 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t3 k)))) /\
          ((k:Z)
           (`0 <= k` /\ `k <= j2` ->
            (min_suffix w1 w2 `i3 + 1` k (access t3 k)))) /\
          (min_suffix w1 w2 `i3 + 1` `j2 + 1` old2))
  (Pre13: Variant5 = `j2 + 1`)
  (result6: bool)
  (Bool3: (if result6 then `j2 >= 0` else `j2 < 0`))
  (Test7: `j2 >= 0`)
  (j3: Z)
  (old3: Z)
  (t4: (array `n2 + 1` Z))
  (Post29: `(-1) <= j3` /\ `j3 <= n2 - 1` /\
           ((k:Z)
            (`j3 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t4 k)))) /\
           ((k:Z)
            (`0 <= k` /\ `k <= j3` ->
             (min_suffix w1 w2 `i3 + 1` k (access t4 k)))) /\
           (min_suffix w1 w2 `i3 + 1` `j3 + 1` old3) /\
           (Zwf `0` `j3 + 1` `j2 + 1`))
  (Zwf `0` `j3 + 1` Variant5).
Proof.
Intuition.
Rewrite Pre13; Assumption.
Save.

Lemma distance_po_20 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  (Post23: ((j:Z)
            (j = `n2 - 1` ->
             ((j:Z)
              ((old:Z)
               ((t:(array `n2 + 1` Z))
                (`(-1) <= j` /\ `j <= n2 - 1` /\
                 ((k:Z)
                  (`j < k` /\ `k <= n2` ->
                   (min_suffix w1 w2 i3 k (access t k)))) /\
                 ((k:Z)
                  (`0 <= k` /\ `k <= j` ->
                   (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
                 (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
                 ((i:Z)
                  (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
                   ((j:Z)
                    (`0 <= j` /\ `j <= n2` ->
                     (min_suffix w1 w2 `i + 1` j (access t j)))) /\
                   (Zwf `0` `i + 1` `i3 + 1`))))))))))
  (j1: Z)
  (Post5: j1 = `n2 - 1`)
  (Variant5: Z)
  (t3: (array `n2 + 1` Z))
  (old2: Z)
  (j2: Z)
  (Pre14: `(-1) <= j2` /\ `j2 <= n2 - 1` /\
          ((k:Z)
           (`j2 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t3 k)))) /\
          ((k:Z)
           (`0 <= k` /\ `k <= j2` ->
            (min_suffix w1 w2 `i3 + 1` k (access t3 k)))) /\
          (min_suffix w1 w2 `i3 + 1` `j2 + 1` old2))
  (Pre13: Variant5 = `j2 + 1`)
  (result6: bool)
  (Bool3: (if result6 then `j2 >= 0` else `j2 < 0`))
  (Test7: `j2 >= 0`)
  (j3: Z)
  (old3: Z)
  (t4: (array `n2 + 1` Z))
  (Post29: `(-1) <= j3` /\ `j3 <= n2 - 1` /\
           ((k:Z)
            (`j3 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t4 k)))) /\
           ((k:Z)
            (`0 <= k` /\ `k <= j3` ->
             (min_suffix w1 w2 `i3 + 1` k (access t4 k)))) /\
           (min_suffix w1 w2 `i3 + 1` `j3 + 1` old3) /\
           (Zwf `0` `j3 + 1` `j2 + 1`))
  `(-1) <= j3` /\ `j3 <= n2 - 1` /\
  ((k:Z) (`j3 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t4 k)))) /\
  ((k:Z)
   (`0 <= k` /\ `k <= j3` -> (min_suffix w1 w2 `i3 + 1` k (access t4 k)))) /\
  (min_suffix w1 w2 `i3 + 1` `j3 + 1` old3).
Proof.
Intuition.
Save.

Lemma distance_po_21 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  (Post23: ((j:Z)
            (j = `n2 - 1` ->
             ((j:Z)
              ((old:Z)
               ((t:(array `n2 + 1` Z))
                (`(-1) <= j` /\ `j <= n2 - 1` /\
                 ((k:Z)
                  (`j < k` /\ `k <= n2` ->
                   (min_suffix w1 w2 i3 k (access t k)))) /\
                 ((k:Z)
                  (`0 <= k` /\ `k <= j` ->
                   (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
                 (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
                 ((i:Z)
                  (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
                   ((j:Z)
                    (`0 <= j` /\ `j <= n2` ->
                     (min_suffix w1 w2 `i + 1` j (access t j)))) /\
                   (Zwf `0` `i + 1` `i3 + 1`))))))))))
  (j1: Z)
  (Post5: j1 = `n2 - 1`)
  (Variant5: Z)
  (t3: (array `n2 + 1` Z))
  (old2: Z)
  (j2: Z)
  (Pre14: `(-1) <= j2` /\ `j2 <= n2 - 1` /\
          ((k:Z)
           (`j2 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t3 k)))) /\
          ((k:Z)
           (`0 <= k` /\ `k <= j2` ->
            (min_suffix w1 w2 `i3 + 1` k (access t3 k)))) /\
          (min_suffix w1 w2 `i3 + 1` `j2 + 1` old2))
  (Pre13: Variant5 = `j2 + 1`)
  (result6: bool)
  (Bool3: (if result6 then `j2 >= 0` else `j2 < 0`))
  (Test4: `j2 < 0`)
  `(-1) <= j2` /\ `j2 <= n2 - 1` /\
  ((k:Z) (`j2 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t3 k)))) /\
  ((k:Z)
   (`0 <= k` /\ `k <= j2` -> (min_suffix w1 w2 `i3 + 1` k (access t3 k)))) /\
  (min_suffix w1 w2 `i3 + 1` `j2 + 1` old2) /\ `j2 < 0`.
Proof.
Intuition.
Save.

Lemma distance_po_22 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  (t2: (array `n2 + 1` Z))
  (Post23: ((j:Z)
            (j = `n2 - 1` ->
             ((j:Z)
              ((old:Z)
               ((t:(array `n2 + 1` Z))
                (`(-1) <= j` /\ `j <= n2 - 1` /\
                 ((k:Z)
                  (`j < k` /\ `k <= n2` ->
                   (min_suffix w1 w2 i3 k (access t k)))) /\
                 ((k:Z)
                  (`0 <= k` /\ `k <= j` ->
                   (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
                 (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
                 ((i:Z)
                  (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
                   ((j:Z)
                    (`0 <= j` /\ `j <= n2` ->
                     (min_suffix w1 w2 `i + 1` j (access t j)))) /\
                   (Zwf `0` `i + 1` `i3 + 1`))))))))))
  (j1: Z)
  (Post5: j1 = `n2 - 1`)
  `(-1) <= j1` /\ `j1 <= n2 - 1` /\
  ((k:Z) (`j1 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t2 k)))) /\
  ((k:Z)
   (`0 <= k` /\ `k <= j1` -> (min_suffix w1 w2 `i3 + 1` k (access t2 k)))) /\
  (min_suffix w1 w2 `i3 + 1` `j1 + 1` old1).
Proof.
Intuition.
Replace k with n2; [ Idtac | Omega' ].
Unfold min_suffix.
Rewrite (suffix_is_cons ? w1 i3).
Rewrite suffix_n_is_eps.
Apply min_dist_eps.
Decompose [and] Pre17.
Unfold min_suffix in H0.
Rewrite <- suffix_n_is_eps with t:=w2.
Apply H0; Omega'.
Omega'.
Omega'.
Split.
Intros k Hk.
Rewrite store_def_2.
Decompose [and] Pre17.
Apply H0; Omega'.
Omega'.
Omega'.
Omega'.
Replace `n2-1+1` with n2; [ Idtac | Omega' ].
Decompose [and] Pre17.
Apply H0; Omega'.
Split.


Apply Post23.
Intuition.
Generalize (Post23 j1 Post5 j1 old1 t2); Clear Post23.
Save.

Lemma distance_po_23 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (Pre5: `0 <= n2` /\ `n2 < n2 + 1`)
  (old1: Z)
  (Post4: old1 = (access t1 n2))
  (Pre6: `0 <= n2` /\ `n2 < n2 + 1`)
  (Post23: ((j:Z)
            (j = `n2 - 1` ->
             ((j:Z)
              ((old:Z)
               ((t:(array `n2 + 1` Z))
                (`(-1) <= j` /\ `j <= n2 - 1` /\
                 ((k:Z)
                  (`j < k` /\ `k <= n2` ->
                   (min_suffix w1 w2 i3 k (access t k)))) /\
                 ((k:Z)
                  (`0 <= k` /\ `k <= j` ->
                   (min_suffix w1 w2 `i3 + 1` k (access t k)))) /\
                 (min_suffix w1 w2 `i3 + 1` `j + 1` old) /\ `j < 0` ->
                 ((i:Z)
                  (i = `i3 - 1` -> `(-1) <= i` /\ `i <= n1 - 1` /\
                   ((j:Z)
                    (`0 <= j` /\ `j <= n2` ->
                     (min_suffix w1 w2 `i + 1` j (access t j)))) /\
                   (Zwf `0` `i + 1` `i3 + 1`))))))))))
  (j1: Z)
  (Post5: j1 = `n2 - 1`)
  (j2: Z)
  (old2: Z)
  (t3: (array `n2 + 1` Z))
  (Post25: `(-1) <= j2` /\ `j2 <= n2 - 1` /\
           ((k:Z)
            (`j2 < k` /\ `k <= n2` -> (min_suffix w1 w2 i3 k (access t3 k)))) /\
           ((k:Z)
            (`0 <= k` /\ `k <= j2` ->
             (min_suffix w1 w2 `i3 + 1` k (access t3 k)))) /\
           (min_suffix w1 w2 `i3 + 1` `j2 + 1` old2) /\ `j2 < 0`)
  (i4: Z)
  (Post9: i4 = `i3 - 1`)
  `(-1) <= i4` /\ `i4 <= n1 - 1` /\
  ((j:Z)
   (`0 <= j` /\ `j <= n2` -> (min_suffix w1 w2 `i4 + 1` j (access t3 j)))) /\
  (Zwf `0` `i4 + 1` `i3 + 1`).
Proof. (* distance_po_23 *)
(* FILL PROOF HERE *)
Save.

Lemma distance_po_24 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (i4: Z)
  (t2: (array `n2 + 1` Z))
  (Post22: `(-1) <= i4` /\ `i4 <= n1 - 1` /\
           ((j:Z)
            (`0 <= j` /\ `j <= n2` ->
             (min_suffix w1 w2 `i4 + 1` j (access t2 j)))) /\
           (Zwf `0` `i4 + 1` `i3 + 1`))
  (Zwf `0` `i4 + 1` Variant3).
Proof. (* distance_po_24 *)
(* FILL PROOF HERE *)
Save.

Lemma distance_po_25 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test8: `i3 >= 0`)
  (i4: Z)
  (t2: (array `n2 + 1` Z))
  (Post22: `(-1) <= i4` /\ `i4 <= n1 - 1` /\
           ((j:Z)
            (`0 <= j` /\ `j <= n2` ->
             (min_suffix w1 w2 `i4 + 1` j (access t2 j)))) /\
           (Zwf `0` `i4 + 1` `i3 + 1`))
  `(-1) <= i4` /\ `i4 <= n1 - 1` /\
  ((j:Z)
   (`0 <= j` /\ `j <= n2` -> (min_suffix w1 w2 `i4 + 1` j (access t2 j)))).
Proof. (* distance_po_25 *)
(* FILL PROOF HERE *)
Save.

Lemma distance_po_26 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (Variant3: Z)
  (t1: (array `n2 + 1` Z))
  (i3: Z)
  (Pre16: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
          ((j:Z)
           (`0 <= j` /\ `j <= n2` ->
            (min_suffix w1 w2 `i3 + 1` j (access t1 j)))))
  (Pre15: Variant3 = `i3 + 1`)
  (result2: bool)
  (Bool2: (if result2 then `i3 >= 0` else `i3 < 0`))
  (Test3: `i3 < 0`)
  `(-1) <= i3` /\ `i3 <= n1 - 1` /\
  ((j:Z)
   (`0 <= j` /\ `j <= n2` -> (min_suffix w1 w2 `i3 + 1` j (access t1 j)))) /\
  `i3 < 0`.
Proof. (* distance_po_26 *)
(* FILL PROOF HERE *)
Save.

Lemma distance_po_27 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  `(-1) <= i2` /\ `i2 <= n1 - 1` /\
  ((j:Z)
   (`0 <= j` /\ `j <= n2` -> (min_suffix w1 w2 `i2 + 1` j (access t0 j)))).
Proof. (* distance_po_27 *)
(* FILL PROOF HERE *)
Save.

Lemma distance_po_28 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (i3: Z)
  (t1: (array `n2 + 1` Z))
  (Post18: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
           ((j:Z)
            (`0 <= j` /\ `j <= n2` ->
             (min_suffix w1 w2 `i3 + 1` j (access t1 j)))) /\
           `i3 < 0`)
  `0 <= 0` /\ `0 < n2 + 1`.
Proof. (* distance_po_28 *)
(* FILL PROOF HERE *)
Save.

Lemma distance_po_29 : 
  (w1: (array n1 A))
  (w2: (array n2 A))
  (i0: Z)
  (Post1: i0 = `0`)
  (i1: Z)
  (t0: (array `n2 + 1` Z))
  (Post11: `0 <= i1` /\ `i1 <= n2 + 1` /\
           ((j:Z) (`0 <= j` /\ `j < i1` -> (access t0 j) = `n2 - j`)) /\
           `i1 > n2`)
  (i2: Z)
  (Post3: i2 = `n1 - 1`)
  (i3: Z)
  (t1: (array `n2 + 1` Z))
  (Post18: `(-1) <= i3` /\ `i3 <= n1 - 1` /\
           ((j:Z)
            (`0 <= j` /\ `j <= n2` ->
             (min_suffix w1 w2 `i3 + 1` j (access t1 j)))) /\
           `i3 < 0`)
  (Pre17: `0 <= 0` /\ `0 < n2 + 1`)
  (min_dist (word_of_array w1) (word_of_array w2) (access t1 `0`)).
Proof. (* distance_po_29 *)
(* FILL PROOF HERE *)
Save.

