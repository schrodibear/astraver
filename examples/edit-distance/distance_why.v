(* Load Programs. *)(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.
Require Export words.
Require Import Omega.
Require Import Sumbool.

(*Why*) Parameter n1 : Z.
Axiom n1_non_negative : (0 <= n1)%Z.

(*Why*) Parameter n2 : Z.
Axiom n2_non_negative : (0 <= n2)%Z.

Ltac Omega' :=
  generalize n1_non_negative; generalize n2_non_negative;
   abstract omega.

Definition min_suffix (w1 w2:array A) (i j n:Z) :=
  min_dist (suffix n1 w1 i) (suffix n2 w2 j) n.

Definition test_char (a b:A) := bool_of_sumbool (A_eq_dec a b).

(* Why obligation from file , characters 1733-1749 *)
Lemma distance_po_1 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre4:Variant1 = (n2 + 1 - i1)%Z)
   (Pre3:((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
         array_length t0 = (n2 + 1)%Z /\
         (forall j:Z,
            (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z))
   (Test2:(i1 <= n2)%Z), (0 <= i1)%Z /\ (i1 < array_length t0)%Z.
Proof.
simpl; intuition.
Qed.

(* Why obligation from file , characters 1733-1770 *)
Lemma distance_po_2 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre4:Variant1 = (n2 + 1 - i1)%Z)
   (Pre3:((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
         array_length t0 = (n2 + 1)%Z /\
         (forall j:Z,
            (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z))
   (Test2:(i1 <= n2)%Z) (Pre2:(0 <= i1)%Z /\ (i1 < array_length t0)%Z)
   (t1:array Z) (Post2:t1 = store t0 i1 (n2 - i1)%Z) (i2:Z)
   (Post3:i2 = (i1 + 1)%Z),
   (((0 <= i2)%Z /\ (i2 <= n2 + 1)%Z) /\
    array_length t1 = (n2 + 1)%Z /\
    (forall j:Z, (0 <= j)%Z /\ (j < i2)%Z -> access t1 j = (n2 - j)%Z)) /\
   Zwf 0 (n2 + 1 - i2) (n2 + 1 - i1).
Proof.
intuition.
ArraySubst t1.
subst t1.
 AccessStore i1 j Hij; try Omega'.
apply H8; Omega'.
Qed.

(* Why obligation from file , characters 1598-1697 *)
Lemma distance_po_3 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z),
   ((0 <= i0)%Z /\ (i0 <= n2 + 1)%Z) /\
   array_length t = (n2 + 1)%Z /\
   (forall j:Z, (0 <= j)%Z /\ (j < i0)%Z -> access t j = (n2 - j)%Z).
Proof.
intuition.
Omega'.
Qed.

(* Why obligation from file , characters 2027-2032 *)
Lemma distance_po_4 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (i1:Z) (t0:array Z)
   (Post4:(((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
           array_length t0 = (n2 + 1)%Z /\
           (forall j:Z,
              (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z)) /\
          (i1 > n2)%Z) (i2:Z) (Post5:i2 = (n1 - 1)%Z) (Variant3 i3:Z)
   (t1:array Z) (Pre26:Variant3 = (i3 + 1)%Z)
   (Pre25:((-1 <= i3)%Z /\ (i3 <= n1 - 1)%Z) /\
          array_length t1 = (n2 + 1)%Z /\
          (forall j:Z,
             (0 <= j)%Z /\ (j <= n2)%Z ->
             min_suffix w1 w2 (i3 + 1) j (access t1 j)))
   (Test8:(i3 >= 0)%Z), (0 <= n2)%Z /\ (n2 < array_length t1)%Z.
Proof.
intuition.
Omega'.
Qed.

(* Why obligation from file , characters 2480-2485 *)
Lemma distance_po_5 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (i1:Z) (t0:array Z)
   (Post4:(((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
           array_length t0 = (n2 + 1)%Z /\
           (forall j:Z,
              (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z)) /\
          (i1 > n2)%Z) (i2:Z) (Post5:i2 = (n1 - 1)%Z) (Variant3 i3:Z)
   (t1:array Z) (Pre26:Variant3 = (i3 + 1)%Z)
   (Pre25:((-1 <= i3)%Z /\ (i3 <= n1 - 1)%Z) /\
          array_length t1 = (n2 + 1)%Z /\
          (forall j:Z,
             (0 <= j)%Z /\ (j <= n2)%Z ->
             min_suffix w1 w2 (i3 + 1) j (access t1 j)))
   (Test8:(i3 >= 0)%Z) (Pre24:(0 <= n2)%Z /\ (n2 < array_length t1)%Z)
   (old1:Z) (Post6:old1 = access t1 n2)
   (Pre22 Pre23:(0 <= n2)%Z /\ (n2 < array_length t1)%Z) (t2:array Z)
   (Post7:t2 = store t1 n2 (access t1 n2 + 1)%Z) (j1:Z)
   (Post8:j1 = (n2 - 1)%Z) (Variant5 j2 old2:Z) (t3:array Z)
   (Pre21:Variant5 = (j2 + 1)%Z)
   (Pre20:((-1 <= j2)%Z /\ (j2 <= n2 - 1)%Z) /\
          array_length t3 = (n2 + 1)%Z /\
          (forall k:Z,
             (j2 < k)%Z /\ (k <= n2)%Z ->
             min_suffix w1 w2 i3 k (access t3 k)) /\
          (forall k:Z,
             (0 <= k)%Z /\ (k <= j2)%Z ->
             min_suffix w1 w2 (i3 + 1) k (access t3 k)) /\
          min_suffix w1 w2 (i3 + 1) (j2 + 1) old2) (Test7:(j2 >= 0)%Z)
   (temp:Z) (Post12:temp = old2),
   (0 <= j2)%Z /\ (j2 < array_length t3)%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 2506-2512 *)
Lemma distance_po_6 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (i1:Z) (t0:array Z)
   (Post4:(((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
           array_length t0 = (n2 + 1)%Z /\
           (forall j:Z,
              (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z)) /\
          (i1 > n2)%Z) (i2:Z) (Post5:i2 = (n1 - 1)%Z) (Variant3 i3:Z)
   (t1:array Z) (Pre26:Variant3 = (i3 + 1)%Z)
   (Pre25:((-1 <= i3)%Z /\ (i3 <= n1 - 1)%Z) /\
          array_length t1 = (n2 + 1)%Z /\
          (forall j:Z,
             (0 <= j)%Z /\ (j <= n2)%Z ->
             min_suffix w1 w2 (i3 + 1) j (access t1 j)))
   (Test8:(i3 >= 0)%Z) (Pre24:(0 <= n2)%Z /\ (n2 < array_length t1)%Z)
   (old1:Z) (Post6:old1 = access t1 n2)
   (Pre22 Pre23:(0 <= n2)%Z /\ (n2 < array_length t1)%Z) (t2:array Z)
   (Post7:t2 = store t1 n2 (access t1 n2 + 1)%Z) (j1:Z)
   (Post8:j1 = (n2 - 1)%Z) (Variant5 j2 old2:Z) (t3:array Z)
   (Pre21:Variant5 = (j2 + 1)%Z)
   (Pre20:((-1 <= j2)%Z /\ (j2 <= n2 - 1)%Z) /\
          array_length t3 = (n2 + 1)%Z /\
          (forall k:Z,
             (j2 < k)%Z /\ (k <= n2)%Z ->
             min_suffix w1 w2 i3 k (access t3 k)) /\
          (forall k:Z,
             (0 <= k)%Z /\ (k <= j2)%Z ->
             min_suffix w1 w2 (i3 + 1) k (access t3 k)) /\
          min_suffix w1 w2 (i3 + 1) (j2 + 1) old2) (Test7:(j2 >= 0)%Z)
   (temp:Z) (Post12:temp = old2)
   (Pre19:(0 <= j2)%Z /\ (j2 < array_length t3)%Z) (old3:Z)
   (Post9:old3 = access t3 j2), (0 <= i3)%Z /\ (i3 < array_length w1)%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 2513-2519 *)
Lemma distance_po_7 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (i1:Z) (t0:array Z)
   (Post4:(((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
           array_length t0 = (n2 + 1)%Z /\
           (forall j:Z,
              (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z)) /\
          (i1 > n2)%Z) (i2:Z) (Post5:i2 = (n1 - 1)%Z) (Variant3 i3:Z)
   (t1:array Z) (Pre26:Variant3 = (i3 + 1)%Z)
   (Pre25:((-1 <= i3)%Z /\ (i3 <= n1 - 1)%Z) /\
          array_length t1 = (n2 + 1)%Z /\
          (forall j:Z,
             (0 <= j)%Z /\ (j <= n2)%Z ->
             min_suffix w1 w2 (i3 + 1) j (access t1 j)))
   (Test8:(i3 >= 0)%Z) (Pre24:(0 <= n2)%Z /\ (n2 < array_length t1)%Z)
   (old1:Z) (Post6:old1 = access t1 n2)
   (Pre22 Pre23:(0 <= n2)%Z /\ (n2 < array_length t1)%Z) (t2:array Z)
   (Post7:t2 = store t1 n2 (access t1 n2 + 1)%Z) (j1:Z)
   (Post8:j1 = (n2 - 1)%Z) (Variant5 j2 old2:Z) (t3:array Z)
   (Pre21:Variant5 = (j2 + 1)%Z)
   (Pre20:((-1 <= j2)%Z /\ (j2 <= n2 - 1)%Z) /\
          array_length t3 = (n2 + 1)%Z /\
          (forall k:Z,
             (j2 < k)%Z /\ (k <= n2)%Z ->
             min_suffix w1 w2 i3 k (access t3 k)) /\
          (forall k:Z,
             (0 <= k)%Z /\ (k <= j2)%Z ->
             min_suffix w1 w2 (i3 + 1) k (access t3 k)) /\
          min_suffix w1 w2 (i3 + 1) (j2 + 1) old2) (Test7:(j2 >= 0)%Z)
   (temp:Z) (Post12:temp = old2)
   (Pre19:(0 <= j2)%Z /\ (j2 < array_length t3)%Z) (old3:Z)
   (Post9:old3 = access t3 j2)
   (Pre17:(0 <= i3)%Z /\ (i3 < array_length w1)%Z),
   (0 <= j2)%Z /\ (j2 < array_length w2)%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 2533-2546 *)
Lemma distance_po_8 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (i1:Z) (t0:array Z)
   (Post4:(((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
           array_length t0 = (n2 + 1)%Z /\
           (forall j:Z,
              (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z)) /\
          (i1 > n2)%Z) (i2:Z) (Post5:i2 = (n1 - 1)%Z) (Variant3 i3:Z)
   (t1:array Z) (Pre26:Variant3 = (i3 + 1)%Z)
   (Pre25:((-1 <= i3)%Z /\ (i3 <= n1 - 1)%Z) /\
          array_length t1 = (n2 + 1)%Z /\
          (forall j:Z,
             (0 <= j)%Z /\ (j <= n2)%Z ->
             min_suffix w1 w2 (i3 + 1) j (access t1 j)))
   (Test8:(i3 >= 0)%Z) (Pre24:(0 <= n2)%Z /\ (n2 < array_length t1)%Z)
   (old1:Z) (Post6:old1 = access t1 n2)
   (Pre22 Pre23:(0 <= n2)%Z /\ (n2 < array_length t1)%Z) (t2:array Z)
   (Post7:t2 = store t1 n2 (access t1 n2 + 1)%Z) (j1:Z)
   (Post8:j1 = (n2 - 1)%Z) (Variant5 j2 old2:Z) (t3:array Z)
   (Pre21:Variant5 = (j2 + 1)%Z)
   (Pre20:((-1 <= j2)%Z /\ (j2 <= n2 - 1)%Z) /\
          array_length t3 = (n2 + 1)%Z /\
          (forall k:Z,
             (j2 < k)%Z /\ (k <= n2)%Z ->
             min_suffix w1 w2 i3 k (access t3 k)) /\
          (forall k:Z,
             (0 <= k)%Z /\ (k <= j2)%Z ->
             min_suffix w1 w2 (i3 + 1) k (access t3 k)) /\
          min_suffix w1 w2 (i3 + 1) (j2 + 1) old2) (Test7:(j2 >= 0)%Z)
   (temp:Z) (Post12:temp = old2)
   (Pre19:(0 <= j2)%Z /\ (j2 < array_length t3)%Z) (old3:Z)
   (Post9:old3 = access t3 j2)
   (Pre17:(0 <= i3)%Z /\ (i3 < array_length w1)%Z)
   (Pre18:(0 <= j2)%Z /\ (j2 < array_length w2)%Z)
   (Test6:access w1 i3 = access w2 j2)
   (Pre16:(0 <= j2)%Z /\ (j2 < array_length t3)%Z) (t4:array Z)
   (Post10:t4 = store t3 j2 temp) (j:Z),
   j = (j2 - 1)%Z ->
   (((-1 <= j)%Z /\ (j <= n2 - 1)%Z) /\
    array_length t4 = (n2 + 1)%Z /\
    (forall k:Z,
       (j < k)%Z /\ (k <= n2)%Z -> min_suffix w1 w2 i3 k (access t4 k)) /\
    (forall k:Z,
       (0 <= k)%Z /\ (k <= j)%Z ->
       min_suffix w1 w2 (i3 + 1) k (access t4 k)) /\
    min_suffix w1 w2 (i3 + 1) (j + 1) old3) /\ Zwf 0 (j + 1) (j2 + 1).
Proof.
intuition.
ArraySubst t4.
unfold min_suffix.
subst t4.
AccessStore j2 k Hj2k.
  (* j2=k *)
  rewrite (suffix_is_cons n1 w1 i3); [ idtac | Omega' ].
  rewrite (suffix_is_cons n2 w2 k); [ idtac | Omega' ].
  rewrite Test6.
 rewrite <- Hj2k.
  apply min_dist_equal.
  subst temp; assumption.
  Omega'.
  (* j2<>k *)
  unfold min_suffix in H16.
  apply H18; Omega'.
  Omega'.
  Omega'.
unfold min_suffix.
subst t4.
AccessOther.
unfold min_suffix in H21; apply H21; Omega'.
replace (j + 1)%Z with j2; [ idtac | Omega' ].
subst old3.
unfold min_suffix; unfold min_suffix in H21; apply H21; Omega'.
Qed.

(* Why obligation from file , characters 2585-2592 *)
Lemma distance_po_9 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (i1:Z) (t0:array Z)
   (Post4:(((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
           array_length t0 = (n2 + 1)%Z /\
           (forall j:Z,
              (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z)) /\
          (i1 > n2)%Z) (i2:Z) (Post5:i2 = (n1 - 1)%Z) (Variant3 i3:Z)
   (t1:array Z) (Pre26:Variant3 = (i3 + 1)%Z)
   (Pre25:((-1 <= i3)%Z /\ (i3 <= n1 - 1)%Z) /\
          array_length t1 = (n2 + 1)%Z /\
          (forall j:Z,
             (0 <= j)%Z /\ (j <= n2)%Z ->
             min_suffix w1 w2 (i3 + 1) j (access t1 j)))
   (Test8:(i3 >= 0)%Z) (Pre24:(0 <= n2)%Z /\ (n2 < array_length t1)%Z)
   (old1:Z) (Post6:old1 = access t1 n2)
   (Pre22 Pre23:(0 <= n2)%Z /\ (n2 < array_length t1)%Z) (t2:array Z)
   (Post7:t2 = store t1 n2 (access t1 n2 + 1)%Z) (j1:Z)
   (Post8:j1 = (n2 - 1)%Z) (Variant5 j2 old2:Z) (t3:array Z)
   (Pre21:Variant5 = (j2 + 1)%Z)
   (Pre20:((-1 <= j2)%Z /\ (j2 <= n2 - 1)%Z) /\
          array_length t3 = (n2 + 1)%Z /\
          (forall k:Z,
             (j2 < k)%Z /\ (k <= n2)%Z ->
             min_suffix w1 w2 i3 k (access t3 k)) /\
          (forall k:Z,
             (0 <= k)%Z /\ (k <= j2)%Z ->
             min_suffix w1 w2 (i3 + 1) k (access t3 k)) /\
          min_suffix w1 w2 (i3 + 1) (j2 + 1) old2) (Test7:(j2 >= 0)%Z)
   (temp:Z) (Post12:temp = old2)
   (Pre19:(0 <= j2)%Z /\ (j2 < array_length t3)%Z) (old3:Z)
   (Post9:old3 = access t3 j2)
   (Pre17:(0 <= i3)%Z /\ (i3 < array_length w1)%Z)
   (Pre18:(0 <= j2)%Z /\ (j2 < array_length w2)%Z)
   (Test5:access w1 i3 <> access w2 j2)
   (Pre13:(0 <= j2)%Z /\ (j2 < array_length t3)%Z),
   (0 <= j2 + 1)%Z /\ (j2 + 1 < array_length t3)%Z.
Proof.
intuition.
Qed.

(* Why obligation from file , characters 2564-2597 *)
Lemma distance_po_10 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (i1:Z) (t0:array Z)
   (Post4:(((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
           array_length t0 = (n2 + 1)%Z /\
           (forall j:Z,
              (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z)) /\
          (i1 > n2)%Z) (i2:Z) (Post5:i2 = (n1 - 1)%Z) (Variant3 i3:Z)
   (t1:array Z) (Pre26:Variant3 = (i3 + 1)%Z)
   (Pre25:((-1 <= i3)%Z /\ (i3 <= n1 - 1)%Z) /\
          array_length t1 = (n2 + 1)%Z /\
          (forall j:Z,
             (0 <= j)%Z /\ (j <= n2)%Z ->
             min_suffix w1 w2 (i3 + 1) j (access t1 j)))
   (Test8:(i3 >= 0)%Z) (Pre24:(0 <= n2)%Z /\ (n2 < array_length t1)%Z)
   (old1:Z) (Post6:old1 = access t1 n2)
   (Pre22 Pre23:(0 <= n2)%Z /\ (n2 < array_length t1)%Z) (t2:array Z)
   (Post7:t2 = store t1 n2 (access t1 n2 + 1)%Z) (j1:Z)
   (Post8:j1 = (n2 - 1)%Z) (Variant5 j2 old2:Z) (t3:array Z)
   (Pre21:Variant5 = (j2 + 1)%Z)
   (Pre20:((-1 <= j2)%Z /\ (j2 <= n2 - 1)%Z) /\
          array_length t3 = (n2 + 1)%Z /\
          (forall k:Z,
             (j2 < k)%Z /\ (k <= n2)%Z ->
             min_suffix w1 w2 i3 k (access t3 k)) /\
          (forall k:Z,
             (0 <= k)%Z /\ (k <= j2)%Z ->
             min_suffix w1 w2 (i3 + 1) k (access t3 k)) /\
          min_suffix w1 w2 (i3 + 1) (j2 + 1) old2) (Test7:(j2 >= 0)%Z)
   (temp:Z) (Post12:temp = old2)
   (Pre19:(0 <= j2)%Z /\ (j2 < array_length t3)%Z) (old3:Z)
   (Post9:old3 = access t3 j2)
   (Pre17:(0 <= i3)%Z /\ (i3 < array_length w1)%Z)
   (Pre18:(0 <= j2)%Z /\ (j2 < array_length w2)%Z)
   (Test5:access w1 i3 <> access w2 j2)
   (Pre13:(0 <= j2)%Z /\ (j2 < array_length t3)%Z)
   (Pre14:(0 <= j2 + 1)%Z /\ (j2 + 1 < array_length t3)%Z)
   (Pre15:(0 <= j2)%Z /\ (j2 < array_length t3)%Z) (t4:array Z)
   (Post11:t4 =
           store t3 j2 (Zmin (access t3 j2) (access t3 (j2 + 1)) + 1)%Z)
   (j:Z),
   j = (j2 - 1)%Z ->
   (((-1 <= j)%Z /\ (j <= n2 - 1)%Z) /\
    array_length t4 = (n2 + 1)%Z /\
    (forall k:Z,
       (j < k)%Z /\ (k <= n2)%Z -> min_suffix w1 w2 i3 k (access t4 k)) /\
    (forall k:Z,
       (0 <= k)%Z /\ (k <= j)%Z ->
       min_suffix w1 w2 (i3 + 1) k (access t4 k)) /\
    min_suffix w1 w2 (i3 + 1) (j + 1) old3) /\ Zwf 0 (j + 1) (j2 + 1).
Proof.
intuition.
ArraySubst t4.
unfold min_suffix.
rewrite Post11; clear Post11.
AccessStore j2 k Hj2k.
  (* j2=k *)
  rewrite <- Hj2k.
    rewrite (suffix_is_cons n1 w1 i3); [ idtac | Omega' ].
  rewrite (suffix_is_cons n2 w2 j2); [ idtac | Omega' ].
  apply min_dist_diff.
   assumption.
  rewrite <- (suffix_is_cons n1 w1 i3); [ idtac | Omega' ].
  apply H18; Omega'.
  rewrite <- (suffix_is_cons n2 w2 j2); [ idtac | Omega' ].
  apply H21; Omega'.
  Omega'.
  (* j2<> k *)
  apply H18; Omega'.
  Omega'.
  Omega'.
rewrite Post11; clear Post11.
unfold min_suffix.
AccessOther.
apply H21; Omega'.
replace (j + 1)%Z with j2; [ idtac | Omega' ].
subst old3; apply H21; Omega'.
Qed.

(* Why obligation from file , characters 2155-2403 *)
Lemma distance_po_11 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (i1:Z) (t0:array Z)
   (Post4:(((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
           array_length t0 = (n2 + 1)%Z /\
           (forall j:Z,
              (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z)) /\
          (i1 > n2)%Z) (i2:Z) (Post5:i2 = (n1 - 1)%Z) (Variant3 i3:Z)
   (t1:array Z) (Pre26:Variant3 = (i3 + 1)%Z)
   (Pre25:((-1 <= i3)%Z /\ (i3 <= n1 - 1)%Z) /\
          array_length t1 = (n2 + 1)%Z /\
          (forall j:Z,
             (0 <= j)%Z /\ (j <= n2)%Z ->
             min_suffix w1 w2 (i3 + 1) j (access t1 j)))
   (Test8:(i3 >= 0)%Z) (Pre24:(0 <= n2)%Z /\ (n2 < array_length t1)%Z)
   (old1:Z) (Post6:old1 = access t1 n2)
   (Pre22 Pre23:(0 <= n2)%Z /\ (n2 < array_length t1)%Z) (t2:array Z)
   (Post7:t2 = store t1 n2 (access t1 n2 + 1)%Z) (j1:Z)
   (Post8:j1 = (n2 - 1)%Z),
   ((-1 <= j1)%Z /\ (j1 <= n2 - 1)%Z) /\
   array_length t2 = (n2 + 1)%Z /\
   (forall k:Z,
      (j1 < k)%Z /\ (k <= n2)%Z -> min_suffix w1 w2 i3 k (access t2 k)) /\
   (forall k:Z,
      (0 <= k)%Z /\ (k <= j1)%Z ->
      min_suffix w1 w2 (i3 + 1) k (access t2 k)) /\
   min_suffix w1 w2 (i3 + 1) (j1 + 1) old1.
Proof.
intuition.
ArraySubst t2.
rewrite Post7; clear Post7.
replace k with n2; [ idtac | Omega' ].
unfold min_suffix.
rewrite (suffix_is_cons n1 w1 i3).
rewrite suffix_n_is_eps.
AccessSame.
apply min_dist_eps.
rewrite <- suffix_n_is_eps with (n := n2) (t := w2).
apply H13; Omega'.
Omega'.
rewrite Post7.
AccessOther.
apply H13; Omega'.
rewrite Post6.
replace n2 with (j1 + 1)%Z; [ idtac | Omega' ].
apply H13; Omega'.
Qed.

(* Why obligation from file , characters 2020-2662 *)
Lemma distance_po_12 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (i1:Z) (t0:array Z)
   (Post4:(((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
           array_length t0 = (n2 + 1)%Z /\
           (forall j:Z,
              (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z)) /\
          (i1 > n2)%Z) (i2:Z) (Post5:i2 = (n1 - 1)%Z) (Variant3 i3:Z)
   (t1:array Z) (Pre26:Variant3 = (i3 + 1)%Z)
   (Pre25:((-1 <= i3)%Z /\ (i3 <= n1 - 1)%Z) /\
          array_length t1 = (n2 + 1)%Z /\
          (forall j:Z,
             (0 <= j)%Z /\ (j <= n2)%Z ->
             min_suffix w1 w2 (i3 + 1) j (access t1 j)))
   (Test8:(i3 >= 0)%Z) (Pre24:(0 <= n2)%Z /\ (n2 < array_length t1)%Z)
   (old1:Z) (Post6:old1 = access t1 n2)
   (Pre22 Pre23:(0 <= n2)%Z /\ (n2 < array_length t1)%Z) (t2:array Z)
   (Post7:t2 = store t1 n2 (access t1 n2 + 1)%Z) (j1:Z)
   (Post8:j1 = (n2 - 1)%Z) (j2 old2:Z) (t3:array Z)
   (Post14:(((-1 <= j2)%Z /\ (j2 <= n2 - 1)%Z) /\
            array_length t3 = (n2 + 1)%Z /\
            (forall k:Z,
               (j2 < k)%Z /\ (k <= n2)%Z ->
               min_suffix w1 w2 i3 k (access t3 k)) /\
            (forall k:Z,
               (0 <= k)%Z /\ (k <= j2)%Z ->
               min_suffix w1 w2 (i3 + 1) k (access t3 k)) /\
            min_suffix w1 w2 (i3 + 1) (j2 + 1) old2) /\ (j2 < 0)%Z)
   (i4:Z) (Post15:i4 = (i3 - 1)%Z),
   (((-1 <= i4)%Z /\ (i4 <= n1 - 1)%Z) /\
    array_length t3 = (n2 + 1)%Z /\
    (forall j:Z,
       (0 <= j)%Z /\ (j <= n2)%Z ->
       min_suffix w1 w2 (i4 + 1) j (access t3 j))) /\
   Zwf 0 (i4 + 1) (i3 + 1).
Proof.
intuition.
replace (i4 + 1)%Z with i3; [ idtac | Omega' ].
apply H20; Omega'.
Qed.

(* Why obligation from file , characters 1868-1987 *)
Lemma distance_po_13 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (i1:Z) (t0:array Z)
   (Post4:(((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
           array_length t0 = (n2 + 1)%Z /\
           (forall j:Z,
              (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z)) /\
          (i1 > n2)%Z) (i2:Z) (Post5:i2 = (n1 - 1)%Z),
   ((-1 <= i2)%Z /\ (i2 <= n1 - 1)%Z) /\
   array_length t0 = (n2 + 1)%Z /\
   (forall j:Z,
      (0 <= j)%Z /\ (j <= n2)%Z ->
      min_suffix w1 w2 (i2 + 1) j (access t0 j)).
Proof.
intuition.
Omega'.
replace (i2 + 1)%Z with n1; [ idtac | Omega' ].
unfold min_suffix.
rewrite suffix_n_is_eps.
replace (access t0 j) with (Zlength (suffix n2 w2 j)).
exact (min_dist_eps_length (suffix n2 w2 j)).
rewrite H7.
apply suffix_length; Omega'.
Omega'.
Qed.

(* Why obligation from file , characters 2681-2685 *)
Lemma distance_po_14 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (i1:Z) (t0:array Z)
   (Post4:(((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
           array_length t0 = (n2 + 1)%Z /\
           (forall j:Z,
              (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z)) /\
          (i1 > n2)%Z) (i2:Z) (Post5:i2 = (n1 - 1)%Z) (i3:Z)
   (t1:array Z)
   (Post16:(((-1 <= i3)%Z /\ (i3 <= n1 - 1)%Z) /\
            array_length t1 = (n2 + 1)%Z /\
            (forall j:Z,
               (0 <= j)%Z /\ (j <= n2)%Z ->
               min_suffix w1 w2 (i3 + 1) j (access t1 j))) /\
           (i3 < 0)%Z), (0 <= 0)%Z /\ (0 < array_length t1)%Z.
Proof.
intuition.
Omega'.
Qed.


(* Why obligation from file , characters 2681-2685 *)
Lemma distance_po_15 :
 forall (t:array Z) (w1 w2:array A)
   (Pre28:array_length w1 = n1 /\
          array_length w2 = n2 /\ array_length t = (n2 + 1)%Z) 
   (i0:Z) (Post1:i0 = 0%Z) (i1:Z) (t0:array Z)
   (Post4:(((0 <= i1)%Z /\ (i1 <= n2 + 1)%Z) /\
           array_length t0 = (n2 + 1)%Z /\
           (forall j:Z,
              (0 <= j)%Z /\ (j < i1)%Z -> access t0 j = (n2 - j)%Z)) /\
          (i1 > n2)%Z) (i2:Z) (Post5:i2 = (n1 - 1)%Z) (i3:Z)
   (t1:array Z)
   (Post16:(((-1 <= i3)%Z /\ (i3 <= n1 - 1)%Z) /\
            array_length t1 = (n2 + 1)%Z /\
            (forall j:Z,
               (0 <= j)%Z /\ (j <= n2)%Z ->
               min_suffix w1 w2 (i3 + 1) j (access t1 j))) /\
           (i3 < 0)%Z) (Pre27:(0 <= 0)%Z /\ (0 < array_length t1)%Z),
   min_dist (word_of_array n1 w1) (word_of_array n2 w2) (access t1 0).
Proof.
intuition.
cut ((i3 + 1)%Z = 0%Z); [ intro Hi3 | Omega' ].
rewrite Hi3 in H14.
unfold word_of_array.
unfold min_suffix in H14.
apply (H14 0%Z); Omega'.
Qed.

