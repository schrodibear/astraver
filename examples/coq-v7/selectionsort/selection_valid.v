(* This file is generated by Why; do not edit *)

Require Why.
Require Export selection_why.

Definition selection (* validation *)
  : (t: (array Z))(_: `(array_length t) >= 1`)
    (sig_2 (array Z) unit [t0: (array Z)][result: unit]
     ((sorted_array t0 `0` `(array_length t0) - 1`) /\ (permut t0 t)))
  := [t: (array Z); Pre13: `(array_length t) >= 1`]
       let (t0, result, Post15) =
         let (result, Post11) = (exist_1 [result: Z]result = `0` `0`
           (refl_equal ? `0`)) in
         let (i0, t0, result0, Post10) =
           (well_founded_induction Z (Zwf ZERO) (Zwf_well_founded `0`)
             [Variant1: Z](i0: Z)(t0: (array Z))
             (_: Variant1 = `(array_length t0) - i0`)(_0: (`0 <= i0` /\
             `i0 <= (array_length t0) - 1`) /\
             (sorted_array t0 `0` `i0 - 1`) /\ (permut t0 t) /\
             ((k:Z)
              (`0 <= k` /\ `k < i0` ->
               ((l:Z)
                (`i0 <= l` /\ `l < (array_length t0)` ->
                 `(access t0 k) <= (access t0 l)`)))))
             (sig_3 Z (array Z) unit [i1: Z][t1: (array Z)][result0: unit]
              (((`0 <= i1` /\ `i1 <= (array_length t1) - 1`) /\
              (sorted_array t1 `0` `i1 - 1`) /\ (permut t1 t) /\
              ((k:Z)
               (`0 <= k` /\ `k < i1` ->
                ((l:Z)
                 (`i1 <= l` /\ `l < (array_length t1)` ->
                  `(access t1 k) <= (access t1 l)`))))) /\
              `i1 >= (array_length t1) - 1`))
             [Variant1: Z; wf1: (Variant2: Z)
              (Pre1: (Zwf `0` Variant2 Variant1))(i0: Z)(t0: (array Z))
              (_: Variant2 = `(array_length t0) - i0`)(_0: (`0 <= i0` /\
              `i0 <= (array_length t0) - 1`) /\
              (sorted_array t0 `0` `i0 - 1`) /\ (permut t0 t) /\
              ((k:Z)
               (`0 <= k` /\ `k < i0` ->
                ((l:Z)
                 (`i0 <= l` /\ `l < (array_length t0)` ->
                  `(access t0 k) <= (access t0 l)`)))))
              (sig_3 Z (array Z) unit [i1: Z][t1: (array Z)][result0: unit]
               (((`0 <= i1` /\ `i1 <= (array_length t1) - 1`) /\
               (sorted_array t1 `0` `i1 - 1`) /\ (permut t1 t) /\
               ((k:Z)
                (`0 <= k` /\ `k < i1` ->
                 ((l:Z)
                  (`i1 <= l` /\ `l < (array_length t1)` ->
                   `(access t1 k) <= (access t1 l)`))))) /\
               `i1 >= (array_length t1) - 1`));
              i0: Z; t0: (array Z);
              Pre12: Variant1 = `(array_length t0) - i0`;
              Pre11: (`0 <= i0` /\ `i0 <= (array_length t0) - 1`) /\
              (sorted_array t0 `0` `i0 - 1`) /\ (permut t0 t) /\
              ((k:Z)
               (`0 <= k` /\ `k < i0` ->
                ((l:Z)
                 (`i0 <= l` /\ `l < (array_length t0)` ->
                  `(access t0 k) <= (access t0 l)`))))]
               let (result0, Bool3) =
                 let (result2, Post16) =
                   (Z_lt_ge_bool i0 `(array_length t0) - 1`) in
                 (exist_1 [result3: bool]
                 (if result3 then `i0 < (array_length t0) - 1`
                  else `i0 >= (array_length t0) - 1`) result2
                 Post16) in
               Cases
                 (btest
                  [result0:bool]
                  (if result0 then `i0 < (array_length t0) - 1`
                   else `i0 >= (array_length t0) - 1`) result0
                  Bool3) of
               | (left Test6) =>
                   let (i1, t1, result1, Post10) =
                     let (i1, t1, result1, Post12) =
                       let (t1, result1, WP2) =
                         let (result1, Post8) = (exist_1 [result1: Z]
                           result1 = i0 i0 (refl_equal ? i0)) in
                         let (min0, t1, result2, WP2) =
                           let (result2, Post7) = (exist_1 [result2: Z]
                             result2 = `i0 + 1` `i0 + 1`
                             (refl_equal ? `i0 + 1`)) in
                           let (j0, min0, t1, result3, WP2) =
                             let (j0, min0, result3, Post3) =
                               (well_founded_induction Z (Zwf ZERO)
                                 (Zwf_well_founded `0`) [Variant3: Z](j0: Z)
                                 (min0: Z)
                                 (_: Variant3 = `(array_length t0) - j0`)
                                 (_0: (`i0 + 1 <= j0` /\
                                 `j0 <= (array_length t0)`) /\
                                 (`i0 <= min0` /\
                                 `min0 < (array_length t0)`) /\
                                 ((k:Z)
                                  (`i0 <= k` /\ `k < j0` ->
                                   `(access t0 min0) <= (access t0 k)`)))
                                 (sig_3 Z Z unit [j1: Z][min1: Z]
                                  [result3: unit](((`i0 + 1 <= j1` /\
                                  `j1 <= (array_length t0)`) /\
                                  (`i0 <= min1` /\
                                  `min1 < (array_length t0)`) /\
                                  ((k:Z)
                                   (`i0 <= k` /\ `k < j1` ->
                                    `(access t0 min1) <= (access t0 k)`))) /\
                                  `j1 >= (array_length t0)`))
                                 [Variant3: Z; wf2: (Variant4: Z)
                                  (Pre2: (Zwf `0` Variant4 Variant3))(j0: Z)
                                  (min0: Z)
                                  (_: Variant4 = `(array_length t0) - j0`)
                                  (_0: (`i0 + 1 <= j0` /\
                                  `j0 <= (array_length t0)`) /\
                                  (`i0 <= min0` /\
                                  `min0 < (array_length t0)`) /\
                                  ((k:Z)
                                   (`i0 <= k` /\ `k < j0` ->
                                    `(access t0 min0) <= (access t0 k)`)))
                                  (sig_3 Z Z unit [j1: Z][min1: Z]
                                   [result3: unit](((`i0 + 1 <= j1` /\
                                   `j1 <= (array_length t0)`) /\
                                   (`i0 <= min1` /\
                                   `min1 < (array_length t0)`) /\
                                   ((k:Z)
                                    (`i0 <= k` /\ `k < j1` ->
                                     `(access t0 min1) <= (access t0 k)`))) /\
                                   `j1 >= (array_length t0)`));
                                  j0: Z; min0: Z;
                                  Pre6: Variant3 = `(array_length t0) - j0`;
                                  Pre5: (`i0 + 1 <= j0` /\
                                  `j0 <= (array_length t0)`) /\
                                  (`i0 <= min0` /\
                                  `min0 < (array_length t0)`) /\
                                  ((k:Z)
                                   (`i0 <= k` /\ `k < j0` ->
                                    `(access t0 min0) <= (access t0 k)`))]
                                   let (result3, Bool2) =
                                     let (result5, Post17) =
                                       (Z_lt_ge_bool j0 (array_length t0)) in
                                     (exist_1 [result6: bool]
                                     (if result6
                                      then `j0 < (array_length t0)`
                                      else `j0 >= (array_length t0)`) 
                                     result5 Post17) in
                                   Cases
                                     (btest
                                      [result3:bool]
                                      (if result3
                                       then `j0 < (array_length t0)`
                                       else `j0 >= (array_length t0)`) result3
                                      Bool2) of
                                   | (left Test5) =>
                                       let (j1, min1, result4, Post3) =
                                         let (j1, min1, result4, Post13) =
                                           let (min1, result4, WP9) =
                                             let (result4, Bool1) =
                                               let Pre4 =
                                                 (selection_po_1 t Pre13
                                                 result Post11 Variant1 i0 t0
                                                 Pre12 Pre11 Test6 result1
                                                 Post8 result2 Post7 Variant3
                                                 j0 min0 Pre6 Pre5 Test5) in
                                               let result5 =
                                                 let Pre3 =
                                                   (selection_po_2 t Pre13
                                                   result Post11 Variant1 i0
                                                   t0 Pre12 Pre11 Test6
                                                   result1 Post8 result2
                                                   Post7 Variant3 j0 min0
                                                   Pre6 Pre5 Test5 Pre4) in
                                                 (Z_lt_ge_bool (access t0 j0)) in
                                               let (result6, Post18) =
                                                 (result5 (access t0 min0)) in
                                               (exist_1 [result7: bool]
                                               (if result7
                                                then `(access t0 j0) <
                                                      (access t0 min0)`
                                                else `(access t0 j0) >=
                                                      (access t0 min0)`) 
                                               result6 Post18) in
                                             Cases
                                               (btest
                                                [result4:bool]
                                                (if result4
                                                 then `(access t0 j0) <
                                                       (access t0 min0)`
                                                 else `(access t0 j0) >=
                                                       (access t0 min0)`) result4
                                                Bool1) of
                                             | (left Test4) =>
                                                 let (min1, result5, Post1) =
                                                   let (result5, Post1) =
                                                     (exist_1 [result5: Z]
                                                     result5 = j0 j0
                                                     (refl_equal ? j0)) in
                                                   (exist_2 [min2: Z]
                                                   [result6: unit]
                                                   min2 = j0 result5 
                                                   tt Post1) in
                                                 (exist_2 [min2: Z]
                                                 [result6: unit]
                                                 ((j:Z)
                                                  (j = `j0 + 1` ->
                                                   ((`i0 + 1 <= j` /\
                                                   `j <= (array_length t0)`) /\
                                                   (`i0 <= min2` /\
                                                   `min2 < (array_length t0)`) /\
                                                   ((k:Z)
                                                    (`i0 <= k` /\ `k < j` ->
                                                     `(access t0 min2) <=
                                                      (access t0 k)`))) /\
                                                   (Zwf `0` `(array_length t0) -
                                                             j` `(array_length t0) -
                                                                 j0`))) 
                                                 min1 result5
                                                 (selection_po_3 t Pre13
                                                 result Post11 Variant1 i0 t0
                                                 Pre12 Pre11 Test6 result1
                                                 Post8 result2 Post7 Variant3
                                                 j0 min0 Pre6 Pre5 Test5
                                                 Test4 min1 Post1))
                                             | (right Test3) =>
                                                 let (result5, WP9) =
                                                   (exist_1 [result5: unit]
                                                   ((j:Z)
                                                    (j = `j0 + 1` ->
                                                     ((`i0 + 1 <= j` /\
                                                     `j <= (array_length t0)`) /\
                                                     (`i0 <= min0` /\
                                                     `min0 <
                                                      (array_length t0)`) /\
                                                     ((k:Z)
                                                      (`i0 <= k` /\
                                                       `k < j` ->
                                                       `(access t0 min0) <=
                                                        (access t0 k)`))) /\
                                                     (Zwf `0` `(array_length t0) -
                                                               j` `(array_length t0) -
                                                                   j0`))) 
                                                   tt
                                                   (selection_po_4 t Pre13
                                                   result Post11 Variant1 i0
                                                   t0 Pre12 Pre11 Test6
                                                   result1 Post8 result2
                                                   Post7 Variant3 j0 min0
                                                   Pre6 Pre5 Test5 Test3)) in
                                                 (exist_2 [min1: Z]
                                                 [result6: unit]
                                                 ((j:Z)
                                                  (j = `j0 + 1` ->
                                                   ((`i0 + 1 <= j` /\
                                                   `j <= (array_length t0)`) /\
                                                   (`i0 <= min1` /\
                                                   `min1 < (array_length t0)`) /\
                                                   ((k:Z)
                                                    (`i0 <= k` /\ `k < j` ->
                                                     `(access t0 min1) <=
                                                      (access t0 k)`))) /\
                                                   (Zwf `0` `(array_length t0) -
                                                             j` `(array_length t0) -
                                                                 j0`))) 
                                                 min0 result5 WP9) end in
                                           let (j1, result5, Post2) =
                                             let (result5, Post2) =
                                               (exist_1 [result5: Z]
                                               result5 = `j0 + 1` `j0 + 1`
                                               (refl_equal ? `j0 + 1`)) in
                                             (exist_2 [j2: Z][result6: unit]
                                             j2 = `j0 + 1` result5 tt Post2) in
                                           (exist_3 [j2: Z][min2: Z]
                                           [result6: unit]((`i0 + 1 <= j2` /\
                                           `j2 <= (array_length t0)`) /\
                                           (`i0 <= min2` /\
                                           `min2 < (array_length t0)`) /\
                                           ((k:Z)
                                            (`i0 <= k` /\ `k < j2` ->
                                             `(access t0 min2) <=
                                              (access t0 k)`))) /\
                                           (Zwf `0` `(array_length t0) - j2` `
                                           (array_length t0) - j0`) j1 
                                           min1 result5
                                           let HW_3 = (WP9 j1 Post2) in
                                           HW_3) in
                                         ((wf2 `(array_length t0) - j1`)
                                           (loop_variant_1 Pre6 Post13) 
                                           j1 min1
                                           (refl_equal ? `(array_length t0) -
                                                          j1`)
                                           (proj1 ? ? Post13)) in
                                       (exist_3 [j2: Z][min2: Z]
                                       [result5: unit]((`i0 + 1 <= j2` /\
                                       `j2 <= (array_length t0)`) /\
                                       (`i0 <= min2` /\
                                       `min2 < (array_length t0)`) /\
                                       ((k:Z)
                                        (`i0 <= k` /\ `k < j2` ->
                                         `(access t0 min2) <= (access t0 k)`))) /\
                                       `j2 >= (array_length t0)` j1 min1
                                       result4 Post3)
                                   | (right Test2) =>
                                       let (j1, min1, result4, Post3) =
                                         (exist_3 [j1: Z][min1: Z]
                                         [result4: unit]((`i0 + 1 <= j1` /\
                                         `j1 <= (array_length t0)`) /\
                                         (`i0 <= min1` /\
                                         `min1 < (array_length t0)`) /\
                                         ((k:Z)
                                          (`i0 <= k` /\ `k < j1` ->
                                           `(access t0 min1) <= (access t0 k)`))) /\
                                         `j1 >= (array_length t0)` j0 
                                         min0 tt (conj ? ? Pre5 Test2)) in
                                       (exist_3 [j2: Z][min2: Z]
                                       [result5: unit]((`i0 + 1 <= j2` /\
                                       `j2 <= (array_length t0)`) /\
                                       (`i0 <= min2` /\
                                       `min2 < (array_length t0)`) /\
                                       ((k:Z)
                                        (`i0 <= k` /\ `k < j2` ->
                                         `(access t0 min2) <= (access t0 k)`))) /\
                                       `j2 >= (array_length t0)` j1 min1
                                       result4 Post3) end
                                 `(array_length t0) - result2` result2
                                 result1
                                 (refl_equal ? `(array_length t0) - result2`)
                                 (selection_po_5 t Pre13 result Post11
                                 Variant1 i0 t0 Pre12 Pre11 Test6 result1
                                 Post8 result2 Post7)) in
                             let (t1, result4, WP2) =
                               let Pre10 =
                                 (selection_po_6 t Pre13 result Post11
                                 Variant1 i0 t0 Pre12 Pre11 Test6 result1
                                 Post8 result2 Post7 j0 min0 Post3) in
                               let (w, Post6) = (exist_1 [result4: Z]
                                 result4 = (access t0 min0) (access t0 min0)
                                 (refl_equal ? (access t0 min0))) in
                               let (t1, result4, WP2) =
                                 let Pre8 = Pre10 in
                                 let Pre9 =
                                   (selection_po_7 t Pre13 result Post11
                                   Variant1 i0 t0 Pre12 Pre11 Test6 result1
                                   Post8 result2 Post7 j0 min0 Post3 Pre10 w
                                   Post6 Pre8) in
                                 let (t1, result4, Post4) =
                                   (exist_2 [t2: (array Z)][result6: unit]
                                   t2 = (store t0 min0 (access t0 i0)) 
                                   (store t0 min0 (access t0 i0)) tt
                                   (refl_equal ? (store t0 min0
                                                  (access t0 i0)))) in
                                 let Pre7 =
                                   (selection_po_8 t Pre13 result Post11
                                   Variant1 i0 t0 Pre12 Pre11 Test6 result1
                                   Post8 result2 Post7 j0 min0 Post3 Pre10 w
                                   Post6 Pre8 Pre9 t1 Post4) in
                                 let (t2, result5, Post5) =
                                   (exist_2 [t3: (array Z)][result7: unit]
                                   t3 = (store t1 i0 w) (store t1 i0 w) 
                                   tt (refl_equal ? (store t1 i0 w))) in
                                 (exist_2 [t3: (array Z)][result6: unit]
                                 ((i:Z)
                                  (i = `i0 + 1` -> ((`0 <= i` /\
                                   `i <= (array_length t3) - 1`) /\
                                   (sorted_array t3 `0` `i - 1`) /\
                                   (permut t3 t) /\
                                   ((k:Z)
                                    (`0 <= k` /\ `k < i` ->
                                     ((l:Z)
                                      (`i <= l` /\ `l < (array_length t3)` ->
                                       `(access t3 k) <= (access t3 l)`))))) /\
                                   (Zwf `0` `(array_length t3) - i` `
                                   (array_length t0) - i0`))) t2
                                 result5
                                 (selection_po_9 t Pre13 result Post11
                                 Variant1 i0 t0 Pre12 Pre11 Test6 result1
                                 Post8 result2 Post7 j0 min0 Post3 Pre10 w
                                 Post6 Pre8 Pre9 t1 Post4 Pre7 t2 Post5)) in
                               (exist_2 [t2: (array Z)][result5: unit]
                               ((i:Z)
                                (i = `i0 + 1` -> ((`0 <= i` /\
                                 `i <= (array_length t2) - 1`) /\
                                 (sorted_array t2 `0` `i - 1`) /\
                                 (permut t2 t) /\
                                 ((k:Z)
                                  (`0 <= k` /\ `k < i` ->
                                   ((l:Z)
                                    (`i <= l` /\ `l < (array_length t2)` ->
                                     `(access t2 k) <= (access t2 l)`))))) /\
                                 (Zwf `0` `(array_length t2) - i` `(array_length t0) -
                                                                   i0`))) 
                               t1 result4 WP2) in
                             (exist_4 [j1: Z][min1: Z][t2: (array Z)]
                             [result5: unit]
                             ((i:Z)
                              (i = `i0 + 1` -> ((`0 <= i` /\
                               `i <= (array_length t2) - 1`) /\
                               (sorted_array t2 `0` `i - 1`) /\
                               (permut t2 t) /\
                               ((k:Z)
                                (`0 <= k` /\ `k < i` ->
                                 ((l:Z)
                                  (`i <= l` /\ `l < (array_length t2)` ->
                                   `(access t2 k) <= (access t2 l)`))))) /\
                               (Zwf `0` `(array_length t2) - i` `(array_length t0) -
                                                                 i0`))) 
                             j0 min0 t1 result4 WP2) in
                           (exist_3 [min1: Z][t2: (array Z)][result4: unit]
                           ((i:Z)
                            (i = `i0 + 1` -> ((`0 <= i` /\
                             `i <= (array_length t2) - 1`) /\
                             (sorted_array t2 `0` `i - 1`) /\
                             (permut t2 t) /\
                             ((k:Z)
                              (`0 <= k` /\ `k < i` ->
                               ((l:Z)
                                (`i <= l` /\ `l < (array_length t2)` ->
                                 `(access t2 k) <= (access t2 l)`))))) /\
                             (Zwf `0` `(array_length t2) - i` `(array_length t0) -
                                                               i0`))) 
                           min0 t1 result3 WP2) in
                         (exist_2 [t2: (array Z)][result3: unit]
                         ((i:Z)
                          (i = `i0 + 1` -> ((`0 <= i` /\
                           `i <= (array_length t2) - 1`) /\
                           (sorted_array t2 `0` `i - 1`) /\ (permut t2 t) /\
                           ((k:Z)
                            (`0 <= k` /\ `k < i` ->
                             ((l:Z)
                              (`i <= l` /\ `l < (array_length t2)` ->
                               `(access t2 k) <= (access t2 l)`))))) /\
                           (Zwf `0` `(array_length t2) - i` `(array_length t0) -
                                                             i0`))) t1
                         result2 WP2) in
                       let (i1, result2, Post9) =
                         let (result2, Post9) = (exist_1 [result2: Z]
                           result2 = `i0 + 1` `i0 + 1`
                           (refl_equal ? `i0 + 1`)) in
                         (exist_2 [i2: Z][result3: unit]i2 = `i0 + 1` 
                         result2 tt Post9) in
                       (exist_3 [i2: Z][t2: (array Z)][result3: unit]
                       ((`0 <= i2` /\ `i2 <= (array_length t2) - 1`) /\
                       (sorted_array t2 `0` `i2 - 1`) /\ (permut t2 t) /\
                       ((k:Z)
                        (`0 <= k` /\ `k < i2` ->
                         ((l:Z)
                          (`i2 <= l` /\ `l < (array_length t2)` ->
                           `(access t2 k) <= (access t2 l)`))))) /\
                       (Zwf `0` `(array_length t2) - i2` `(array_length t0) -
                                                          i0`) i1
                       t1 result2 let HW_5 = (WP2 i1 Post9) in
                                  HW_5) in
                     ((wf1 `(array_length t1) - i1`)
                       (loop_variant_1 Pre12 Post12) i1 t1
                       (refl_equal ? `(array_length t1) - i1`)
                       (proj1 ? ? Post12)) in
                   (exist_3 [i2: Z][t2: (array Z)][result2: unit]
                   ((`0 <= i2` /\ `i2 <= (array_length t2) - 1`) /\
                   (sorted_array t2 `0` `i2 - 1`) /\ (permut t2 t) /\
                   ((k:Z)
                    (`0 <= k` /\ `k < i2` ->
                     ((l:Z)
                      (`i2 <= l` /\ `l < (array_length t2)` ->
                       `(access t2 k) <= (access t2 l)`))))) /\
                   `i2 >= (array_length t2) - 1` i1 t1 result1 Post10)
               | (right Test1) =>
                   let (i1, t1, result1, Post10) = (exist_3 [i1: Z]
                     [t1: (array Z)][result1: unit]((`0 <= i1` /\
                     `i1 <= (array_length t1) - 1`) /\
                     (sorted_array t1 `0` `i1 - 1`) /\ (permut t1 t) /\
                     ((k:Z)
                      (`0 <= k` /\ `k < i1` ->
                       ((l:Z)
                        (`i1 <= l` /\ `l < (array_length t1)` ->
                         `(access t1 k) <= (access t1 l)`))))) /\
                     `i1 >= (array_length t1) - 1` i0 t0 tt
                     (conj ? ? Pre11 Test1)) in
                   (exist_3 [i2: Z][t2: (array Z)][result2: unit]
                   ((`0 <= i2` /\ `i2 <= (array_length t2) - 1`) /\
                   (sorted_array t2 `0` `i2 - 1`) /\ (permut t2 t) /\
                   ((k:Z)
                    (`0 <= k` /\ `k < i2` ->
                     ((l:Z)
                      (`i2 <= l` /\ `l < (array_length t2)` ->
                       `(access t2 k) <= (access t2 l)`))))) /\
                   `i2 >= (array_length t2) - 1` i1 t1 result1 Post10) end
             `(array_length t) - result` result t
             (refl_equal ? `(array_length t) - result`)
             (selection_po_10 t Pre13 result Post11)) in
         (exist_2 [t1: (array Z)][result1: unit]
         (sorted_array t1 `0` `(array_length t1) - 1`) /\ (permut t1 t) 
         t0 result0 (selection_po_11 t Pre13 result Post11 i0 t0 Post10)) in
       (exist_2 [t1: (array Z)][result0: unit]
       (sorted_array t1 `0` `(array_length t1) - 1`) /\ (permut t1 t) 
       t0 result Post15).

