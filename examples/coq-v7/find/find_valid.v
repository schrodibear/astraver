(* This file is generated by Why; do not edit *)

Require Why.
Require Export find_why.

Definition find (* validation *)
  : (A: (array Z))(_: `(array_length A) = N + 1`)
    (sig_2 (array Z) unit [A0: (array Z)][result: unit]((found A0) /\
     (permut A0 A)))
  := [A: (array Z); Pre21: `(array_length A) = N + 1`]
       let (A0, result, Post20) =
         let (result, Post16) = (exist_1 [result: Z]result = `1` `1`
           (refl_equal ? `1`)) in
         let (A0, m0, result0, Post21) =
           let (result0, Post15) = (exist_1 [result0: Z]result0 = N N
             (refl_equal ? N)) in
           let (A0, m0, n0, result1, Inv_mn) =
             (well_founded_induction Z (Zwf ZERO) (Zwf_well_founded `
               0`) [Variant1: Z](A0: (array Z))(m0: Z)(n0: Z)
               (_: Variant1 = `n0 - m0`)(Inv_mn: (m_invariant m0 A0) /\
               (n_invariant n0 A0) /\ (permut A0 A) /\ `1 <= m0` /\
               `n0 <= N`)
               (sig_4 (array Z) Z Z unit [A1: (array Z)][m1: Z][n1: Z]
                [result1: unit](((m_invariant m1 A1) /\
                (n_invariant n1 A1) /\ (permut A1 A) /\ `1 <= m1` /\
                `n1 <= N`) /\ `m1 >= n1`))
               [Variant1: Z; wf1: (Variant2: Z)
                (Pre1: (Zwf `0` Variant2 Variant1))(A0: (array Z))(m0: Z)
                (n0: Z)(_: Variant2 = `n0 - m0`)
                (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\
                (permut A0 A) /\ `1 <= m0` /\ `n0 <= N`)
                (sig_4 (array Z) Z Z unit [A1: (array Z)][m1: Z][n1: Z]
                 [result1: unit](((m_invariant m1 A1) /\
                 (n_invariant n1 A1) /\ (permut A1 A) /\ `1 <= m1` /\
                 `n1 <= N`) /\ `m1 >= n1`));
                A0: (array Z); m0: Z; n0: Z; Pre20: Variant1 = `n0 - m0`;
                Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\
                (permut A0 A) /\ `1 <= m0` /\ `n0 <= N`]
                 let (result1, Bool7) =
                   let (result3, Post22) = (Z_lt_ge_bool m0 n0) in
                   (exist_1 [result4: bool]
                   (if result4 then `m0 < n0` else `m0 >= n0`) result3
                   Post22) in
                 Cases
                   (btest
                    [result1:bool](if result1 then `m0 < n0` else `m0 >= n0`) result1
                    Bool7) of
                 | (left Test14) =>
                     let (A1, m1, n1, result2, Inv_mn0) =
                       let (A1, m1, n1, result2, Inv_mn0) =
                         let (A1, m1, n1, result2, Inv_mn0) =
                           let Pre19 =
                             (find_po_1 A Pre21 result Post16 result0 Post15
                             Variant1 A0 m0 n0 Pre20 Inv_mn Test14) in
                           let (r, Post14) = (exist_1 [result2: Z]
                             result2 = (access A0 f) (access A0 f)
                             (refl_equal ? (access A0 f))) in
                           let (A1, m1, n1, result2, Inv_mn0) =
                             let (result2, Post13) = (exist_1 [result2: Z]
                               result2 = m0 m0 (refl_equal ? m0)) in
                             let (A1, i0, m1, n1, result3, Inv_mn0) =
                               let (result3, Post12) = (exist_1 [result3: Z]
                                 result3 = n0 n0 (refl_equal ? n0)) in
                               let (A1, i0, j0, m1, n1, result4, Inv_mn0) =
                                 let (A1, i0, j0, result4, Inv_ij) =
                                   (well_founded_induction Z (Zwf ZERO)
                                     (Zwf_well_founded `0`) [Variant3: Z]
                                     (A1: (array Z))(i0: Z)(j0: Z)
                                     (_: Variant3 = `N + 2 + j0 - i0`)
                                     (Inv_ij: (i_invariant m0 n0 i0 r A1) /\
                                     (j_invariant m0 n0 j0 r A1) /\
                                     (m_invariant m0 A1) /\
                                     (n_invariant n0 A1) /\ `0 <= j0` /\
                                     `i0 <= N + 1` /\
                                     (termination i0 j0 m0 n0 r A1) /\
                                     (permut A1 A))
                                     (sig_4 (array Z) Z Z unit
                                      [A2: (array Z)][i1: Z][j1: Z]
                                      [result4: unit]
                                      (((i_invariant m0 n0 i1 r A2) /\
                                      (j_invariant m0 n0 j1 r A2) /\
                                      (m_invariant m0 A2) /\
                                      (n_invariant n0 A2) /\ `0 <= j1` /\
                                      `i1 <= N + 1` /\
                                      (termination i1 j1 m0 n0 r A2) /\
                                      (permut A2 A)) /\ `i1 > j1`))
                                     [Variant3: Z; wf2: (Variant4: Z)
                                      (Pre2: (Zwf `0` Variant4 Variant3))
                                      (A1: (array Z))(i0: Z)(j0: Z)
                                      (_: Variant4 = `N + 2 + j0 - i0`)
                                      (Inv_ij: (i_invariant m0 n0 i0 r A1) /\
                                      (j_invariant m0 n0 j0 r A1) /\
                                      (m_invariant m0 A1) /\
                                      (n_invariant n0 A1) /\ `0 <= j0` /\
                                      `i0 <= N + 1` /\
                                      (termination i0 j0 m0 n0 r A1) /\
                                      (permut A1 A))
                                      (sig_4 (array Z) Z Z unit
                                       [A2: (array Z)][i1: Z][j1: Z]
                                       [result4: unit]
                                       (((i_invariant m0 n0 i1 r A2) /\
                                       (j_invariant m0 n0 j1 r A2) /\
                                       (m_invariant m0 A2) /\
                                       (n_invariant n0 A2) /\ `0 <= j1` /\
                                       `i1 <= N + 1` /\
                                       (termination i1 j1 m0 n0 r A2) /\
                                       (permut A2 A)) /\ `i1 > j1`));
                                      A1: (array Z); i0: Z; j0: Z;
                                      Pre17: Variant3 = `N + 2 + j0 - i0`;
                                      Inv_ij: (i_invariant m0 n0 i0 r A1) /\
                                      (j_invariant m0 n0 j0 r A1) /\
                                      (m_invariant m0 A1) /\
                                      (n_invariant n0 A1) /\ `0 <= j0` /\
                                      `i0 <= N + 1` /\
                                      (termination i0 j0 m0 n0 r A1) /\
                                      (permut A1 A)]
                                       let (result4, Bool4) =
                                         let (result6, Post23) =
                                           (Z_le_gt_bool i0 j0) in
                                         (exist_1 [result7: bool]
                                         (if result7 then `i0 <= j0`
                                          else `i0 > j0`) result6
                                         Post23) in
                                       Cases
                                         (btest
                                          [result4:bool]
                                          (if result4 then `i0 <= j0`
                                           else `i0 > j0`) result4
                                          Bool4) of
                                       | (left Test9) =>
                                           let (A2, i1, j1, result5,
                                             Inv_ij0) =
                                             let (A2, i1, j1, result5,
                                               Inv_ij0) =
                                               let (i1, result5, Inv_i) =
                                                 (well_founded_induction Z
                                                   (Zwf ZERO)
                                                   (Zwf_well_founded `
                                                   0`) [Variant5: Z](i1: Z)
                                                   (_: Variant5 = `N + 1 - i1`)
                                                   (Inv_i: (i_invariant m0 n0
                                                            i1 r A1) /\
                                                   `i0 <= i1` /\
                                                   `i1 <= n0` /\
                                                   (termination i1 j0 m0 n0 r
                                                    A1))
                                                   (sig_2 Z unit [i2: Z]
                                                    [result5: unit]
                                                    (((i_invariant m0 n0 i2 r
                                                       A1) /\
                                                    `i0 <= i2` /\
                                                    `i2 <= n0` /\
                                                    (termination i2 j0 m0 n0
                                                     r A1)) /\
                                                    `(access A1 i2) >= r`))
                                                   [Variant5: Z;
                                                    wf3: (Variant6: Z)
                                                    (Pre3: (Zwf `0` Variant6 Variant5))
                                                    (i1: Z)
                                                    (_: Variant6 = `N + 1 -
                                                                    i1`)
                                                    (Inv_i: (i_invariant m0
                                                             n0 i1 r A1) /\
                                                    `i0 <= i1` /\
                                                    `i1 <= n0` /\
                                                    (termination i1 j0 m0 n0
                                                     r A1))
                                                    (sig_2 Z unit [i2: Z]
                                                     [result5: unit]
                                                     (((i_invariant m0 n0 i2
                                                        r A1) /\
                                                     `i0 <= i2` /\
                                                     `i2 <= n0` /\
                                                     (termination i2 j0 m0 n0
                                                      r A1)) /\
                                                     `(access A1 i2) >= r`));
                                                    i1: Z;
                                                    Pre5: Variant5 = `
                                                          N + 1 - i1`;
                                                    Inv_i: (i_invariant m0 n0
                                                            i1 r A1) /\
                                                    `i0 <= i1` /\
                                                    `i1 <= n0` /\
                                                    (termination i1 j0 m0 n0
                                                     r A1)]
                                                     let (result5, Bool1) =
                                                       let result6 =
                                                         let Pre4 =
                                                           (find_po_2 A Pre21
                                                           result Post16
                                                           result0 Post15
                                                           Variant1 A0 m0 n0
                                                           Pre20 Inv_mn
                                                           Test14 Pre19 r
                                                           Post14 result2
                                                           Post13 result3
                                                           Post12 Variant3 A1
                                                           i0 j0 Pre17 Inv_ij
                                                           Test9 Variant5 i1
                                                           Pre5 Inv_i) in
                                                         (Z_lt_ge_bool (
                                                          access A1 i1)) in
                                                       let (result7,
                                                         Post24) =
                                                         (result6 r) in
                                                       (exist_1 [result8: bool]
                                                       (if result8
                                                        then `(access A1 i1) <
                                                              r`
                                                        else `(access A1 i1) >=
                                                              r`) result7
                                                       Post24) in
                                                     Cases
                                                       (btest
                                                        [result5:bool]
                                                        (if result5
                                                         then `(access A1 i1) <
                                                               r`
                                                         else `(access A1 i1) >=
                                                               r`) result5
                                                        Bool1) of
                                                     | (left Test4) =>
                                                         let (i2, result6,
                                                           Inv_i0) =
                                                           let (i2, result6,
                                                             Inv_i0) =
                                                             let (i2,
                                                               result6,
                                                               Post1) =
                                                               let (result6,
                                                                 Post1) =
                                                                 (exist_1 [result6: Z]
                                                                 result6 = `
                                                                 i1 + 1` 
                                                                 `i1 + 1`
                                                                 (refl_equal ? `
                                                                 i1 + 1`)) in
                                                               (exist_2 [i3: Z]
                                                               [result7: unit]
                                                               i3 = `i1 + 1` 
                                                               result6 
                                                               tt Post1) in
                                                             (exist_2 [i3: Z]
                                                             [result7: unit]
                                                             ((i_invariant m0
                                                               n0 i3 r A1) /\
                                                             `i0 <= i3` /\
                                                             `i3 <= n0` /\
                                                             (termination i3
                                                              j0 m0 n0 r A1)) /\
                                                             (Zwf `0` `
                                                             N + 1 - i3` `
                                                             N + 1 - i1`) 
                                                             i2 result6
                                                             (find_po_3 A
                                                             Pre21 result
                                                             Post16 result0
                                                             Post15 Variant1
                                                             A0 m0 n0 Pre20
                                                             Inv_mn Test14
                                                             Pre19 r Post14
                                                             result2 Post13
                                                             result3 Post12
                                                             Variant3 A1 i0
                                                             j0 Pre17 Inv_ij
                                                             Test9 Variant5
                                                             i1 Pre5 Inv_i
                                                             Test4 i2 Post1)) in
                                                           ((wf3 `N + 1 - i2`)
                                                             (loop_variant_1 Pre5 Inv_i0)
                                                             i2
                                                             (refl_equal ? `
                                                             N + 1 - i2`)
                                                             (proj1 ? ? Inv_i0)) in
                                                         (exist_2 [i3: Z]
                                                         [result7: unit]
                                                         ((i_invariant m0 n0
                                                           i3 r A1) /\
                                                         `i0 <= i3` /\
                                                         `i3 <= n0` /\
                                                         (termination i3 j0
                                                          m0 n0 r A1)) /\
                                                         `(access A1 i3) >= r` 
                                                         i2 result6 Inv_i0)
                                                     | (right Test3) =>
                                                         let (i2, result6,
                                                           Inv_i0) =
                                                           (exist_2 [i2: Z]
                                                           [result6: unit]
                                                           ((i_invariant m0
                                                             n0 i2 r A1) /\
                                                           `i0 <= i2` /\
                                                           `i2 <= n0` /\
                                                           (termination i2 j0
                                                            m0 n0 r A1)) /\
                                                           `(access A1 i2) >=
                                                            r` i1 tt
                                                           (conj ? ? Inv_i Test3)) in
                                                         (exist_2 [i3: Z]
                                                         [result7: unit]
                                                         ((i_invariant m0 n0
                                                           i3 r A1) /\
                                                         `i0 <= i3` /\
                                                         `i3 <= n0` /\
                                                         (termination i3 j0
                                                          m0 n0 r A1)) /\
                                                         `(access A1 i3) >= r` 
                                                         i2 result6 Inv_i0) end
                                                   `N + 1 - i0` i0
                                                   (refl_equal ? `N + 1 - i0`)
                                                   (find_po_4 A Pre21 result
                                                   Post16 result0 Post15
                                                   Variant1 A0 m0 n0 Pre20
                                                   Inv_mn Test14 Pre19 r
                                                   Post14 result2 Post13
                                                   result3 Post12 Variant3 A1
                                                   i0 j0 Pre17 Inv_ij Test9)) in
                                               let (j1, result6, Inv_j) =
                                                 (well_founded_induction Z
                                                   (Zwf ZERO)
                                                   (Zwf_well_founded `
                                                   0`) [Variant7: Z](j1: Z)
                                                   (_: Variant7 = j1)
                                                   (Inv_j: (j_invariant m0 n0
                                                            j1 r A1) /\
                                                   `j1 <= j0` /\
                                                   `m0 <= j1` /\
                                                   (termination i1 j1 m0 n0 r
                                                    A1))
                                                   (sig_2 Z unit [j2: Z]
                                                    [result6: unit]
                                                    (((j_invariant m0 n0 j2 r
                                                       A1) /\
                                                    `j2 <= j0` /\
                                                    `m0 <= j2` /\
                                                    (termination i1 j2 m0 n0
                                                     r A1)) /\
                                                    `r >= (access A1 j2)`))
                                                   [Variant7: Z;
                                                    wf4: (Variant8: Z)
                                                    (Pre6: (Zwf `0` Variant8 Variant7))
                                                    (j1: Z)(_: Variant8 = j1)
                                                    (Inv_j: (j_invariant m0
                                                             n0 j1 r A1) /\
                                                    `j1 <= j0` /\
                                                    `m0 <= j1` /\
                                                    (termination i1 j1 m0 n0
                                                     r A1))
                                                    (sig_2 Z unit [j2: Z]
                                                     [result6: unit]
                                                     (((j_invariant m0 n0 j2
                                                        r A1) /\
                                                     `j2 <= j0` /\
                                                     `m0 <= j2` /\
                                                     (termination i1 j2 m0 n0
                                                      r A1)) /\
                                                     `r >= (access A1 j2)`));
                                                    j1: Z;
                                                    Pre8: Variant7 = j1;
                                                    Inv_j: (j_invariant m0 n0
                                                            j1 r A1) /\
                                                    `j1 <= j0` /\
                                                    `m0 <= j1` /\
                                                    (termination i1 j1 m0 n0
                                                     r A1)]
                                                     let (result6, Bool2) =
                                                       let Pre7 =
                                                         (find_po_5 A Pre21
                                                         result Post16
                                                         result0 Post15
                                                         Variant1 A0 m0 n0
                                                         Pre20 Inv_mn Test14
                                                         Pre19 r Post14
                                                         result2 Post13
                                                         result3 Post12
                                                         Variant3 A1 i0 j0
                                                         Pre17 Inv_ij Test9
                                                         i1 Inv_i Variant7 j1
                                                         Pre8 Inv_j) in
                                                       let (result8,
                                                         Post25) =
                                                         (Z_lt_ge_bool r
                                                            (access A1 j1)) in
                                                       (exist_1 [result9: bool]
                                                       (if result9
                                                        then `r <
                                                              (access A1 j1)`
                                                        else `r >=
                                                              (access A1 j1)`) 
                                                       result8 Post25) in
                                                     Cases
                                                       (btest
                                                        [result6:bool]
                                                        (if result6
                                                         then `r <
                                                               (access A1 j1)`
                                                         else `r >=
                                                               (access A1 j1)`) result6
                                                        Bool2) of
                                                     | (left Test6) =>
                                                         let (j2, result7,
                                                           Inv_j0) =
                                                           let (j2, result7,
                                                             Inv_j0) =
                                                             let (j2,
                                                               result7,
                                                               Post2) =
                                                               let (result7,
                                                                 Post2) =
                                                                 (exist_1 [result7: Z]
                                                                 result7 = `
                                                                 j1 - 1` 
                                                                 `j1 - 1`
                                                                 (refl_equal ? `
                                                                 j1 - 1`)) in
                                                               (exist_2 [j3: Z]
                                                               [result8: unit]
                                                               j3 = `j1 - 1` 
                                                               result7 
                                                               tt Post2) in
                                                             (exist_2 [j3: Z]
                                                             [result8: unit]
                                                             ((j_invariant m0
                                                               n0 j3 r A1) /\
                                                             `j3 <= j0` /\
                                                             `m0 <= j3` /\
                                                             (termination i1
                                                              j3 m0 n0 r A1)) /\
                                                             (Zwf `0` j3 j1) 
                                                             j2 result7
                                                             (find_po_6 A
                                                             Pre21 result
                                                             Post16 result0
                                                             Post15 Variant1
                                                             A0 m0 n0 Pre20
                                                             Inv_mn Test14
                                                             Pre19 r Post14
                                                             result2 Post13
                                                             result3 Post12
                                                             Variant3 A1 i0
                                                             j0 Pre17 Inv_ij
                                                             Test9 i1 Inv_i
                                                             Variant7 j1 Pre8
                                                             Inv_j Test6 j2
                                                             Post2)) in
                                                           ((wf4 j2)
                                                             (loop_variant_1 Pre8 Inv_j0)
                                                             j2
                                                             (refl_equal ? j2)
                                                             (proj1 ? ? Inv_j0)) in
                                                         (exist_2 [j3: Z]
                                                         [result8: unit]
                                                         ((j_invariant m0 n0
                                                           j3 r A1) /\
                                                         `j3 <= j0` /\
                                                         `m0 <= j3` /\
                                                         (termination i1 j3
                                                          m0 n0 r A1)) /\
                                                         `r >= (access A1 j3)` 
                                                         j2 result7 Inv_j0)
                                                     | (right Test5) =>
                                                         let (j2, result7,
                                                           Inv_j0) =
                                                           (exist_2 [j2: Z]
                                                           [result7: unit]
                                                           ((j_invariant m0
                                                             n0 j2 r A1) /\
                                                           `j2 <= j0` /\
                                                           `m0 <= j2` /\
                                                           (termination i1 j2
                                                            m0 n0 r A1)) /\
                                                           `r >=
                                                            (access A1 j2)` 
                                                           j1 tt
                                                           (conj ? ? Inv_j Test5)) in
                                                         (exist_2 [j3: Z]
                                                         [result8: unit]
                                                         ((j_invariant m0 n0
                                                           j3 r A1) /\
                                                         `j3 <= j0` /\
                                                         `m0 <= j3` /\
                                                         (termination i1 j3
                                                          m0 n0 r A1)) /\
                                                         `r >= (access A1 j3)` 
                                                         j2 result7 Inv_j0) end
                                                   j0 j0 (refl_equal ? j0)
                                                   (find_po_7 A Pre21 result
                                                   Post16 result0 Post15
                                                   Variant1 A0 m0 n0 Pre20
                                                   Inv_mn Test14 Pre19 r
                                                   Post14 result2 Post13
                                                   result3 Post12 Variant3 A1
                                                   i0 j0 Pre17 Inv_ij Test9
                                                   i1 Inv_i)) in
                                               let Pre16 =
                                                 (find_po_8 A Pre21 result
                                                 Post16 result0 Post15
                                                 Variant1 A0 m0 n0 Pre20
                                                 Inv_mn Test14 Pre19 r Post14
                                                 result2 Post13 result3
                                                 Post12 Variant3 A1 i0 j0
                                                 Pre17 Inv_ij Test9 i1 Inv_i
                                                 j1 Inv_j) in
                                               let (A2, i2, j2, result7,
                                                 Inv_ij0) =
                                                 let (result7, Bool3) =
                                                   let (result9, Post26) =
                                                     (Z_le_gt_bool i1 j1) in
                                                   (exist_1 [result10: bool]
                                                   (if result10
                                                    then `i1 <= j1`
                                                    else `i1 > j1`) result9
                                                   Post26) in
                                                 Cases
                                                   (btest
                                                    [result7:bool]
                                                    (if result7
                                                     then `i1 <= j1`
                                                     else `i1 > j1`) result7
                                                    Bool3) of
                                                 | (left Test8) =>
                                                     let (A2, i2, j2,
                                                       result8, Inv_ij0) =
                                                       let (A2, result8,
                                                         WP19) =
                                                         let Pre12 =
                                                           (find_po_9 A Pre21
                                                           result Post16
                                                           result0 Post15
                                                           Variant1 A0 m0 n0
                                                           Pre20 Inv_mn
                                                           Test14 Pre19 r
                                                           Post14 result2
                                                           Post13 result3
                                                           Post12 Variant3 A1
                                                           i0 j0 Pre17 Inv_ij
                                                           Test9 i1 Inv_i j1
                                                           Inv_j Pre16 Test8) in
                                                         let (w, Post5) =
                                                           (exist_1 [result8: Z]
                                                           result8 = (
                                                           access A1 i1) 
                                                           (access A1 i1)
                                                           (refl_equal ? (
                                                           access A1 i1))) in
                                                         let (A2, result8,
                                                           WP19) =
                                                           let Pre10 =
                                                             Pre12 in
                                                           let Pre11 =
                                                             (find_po_10 A
                                                             Pre21 result
                                                             Post16 result0
                                                             Post15 Variant1
                                                             A0 m0 n0 Pre20
                                                             Inv_mn Test14
                                                             Pre19 r Post14
                                                             result2 Post13
                                                             result3 Post12
                                                             Variant3 A1 i0
                                                             j0 Pre17 Inv_ij
                                                             Test9 i1 Inv_i
                                                             j1 Inv_j Pre16
                                                             Test8 Pre12 w
                                                             Post5 Pre10) in
                                                           let (A2, result8,
                                                             Post3) =
                                                             (exist_2 [A3: (
                                                             array Z)]
                                                             [result10: unit]
                                                             A3 = (store A1
                                                                   i1
                                                                   (access A1
                                                                    j1)) 
                                                             (store A1 i1
                                                              (access A1 j1))
                                                             tt
                                                             (refl_equal ? (
                                                             store A1 i1
                                                             (access A1 j1)))) in
                                                           let Pre9 =
                                                             (find_po_11 A
                                                             Pre21 result
                                                             Post16 result0
                                                             Post15 Variant1
                                                             A0 m0 n0 Pre20
                                                             Inv_mn Test14
                                                             Pre19 r Post14
                                                             result2 Post13
                                                             result3 Post12
                                                             Variant3 A1 i0
                                                             j0 Pre17 Inv_ij
                                                             Test9 i1 Inv_i
                                                             j1 Inv_j Pre16
                                                             Test8 Pre12 w
                                                             Post5 Pre10
                                                             Pre11 A2 Post3) in
                                                           let (A3, result9,
                                                             Post4) =
                                                             (exist_2 [A4: (
                                                             array Z)]
                                                             [result11: unit]
                                                             A4 = (store A2
                                                                   j1 w) 
                                                             (store A2 j1 w)
                                                             tt
                                                             (refl_equal ? (
                                                             store A2 j1 w))) in
                                                           (exist_2 [A4: (
                                                           array Z)]
                                                           [result10: unit]
                                                           ((((i:Z)
                                                              (i = `i1 + 1` ->
                                                               ((j:Z)
                                                                (j = `j1 - 1` ->
                                                                 ((i_invariant m0
                                                                   n0 i r A4) /\
                                                                 (j_invariant m0
                                                                  n0 j r A4) /\
                                                                 (m_invariant m0
                                                                  A4) /\
                                                                 (n_invariant n0
                                                                  A4) /\
                                                                 `0 <= j` /\
                                                                 `i <= N + 1` /\
                                                                 (termination i
                                                                  j m0 n0 r
                                                                  A4) /\
                                                                 (permut A4 A)) /\
                                                                 (Zwf `0` `
                                                                 N + 2 + j -
                                                                 i` `
                                                                 N + 2 + j0 -
                                                                 i0`))))) /\
                                                           `r <=
                                                            (access A4 j1)`) /\
                                                           `(access A4 i1) <=
                                                            r`) /\
                                                           (exchange A4 A1 i1
                                                            j1) A3
                                                           result9
                                                           (find_po_12 A
                                                           Pre21 result
                                                           Post16 result0
                                                           Post15 Variant1 A0
                                                           m0 n0 Pre20 Inv_mn
                                                           Test14 Pre19 r
                                                           Post14 result2
                                                           Post13 result3
                                                           Post12 Variant3 A1
                                                           i0 j0 Pre17 Inv_ij
                                                           Test9 i1 Inv_i j1
                                                           Inv_j Pre16 Test8
                                                           Pre12 w Post5
                                                           Pre10 Pre11 A2
                                                           Post3 Pre9 A3
                                                           Post4)) in
                                                         (exist_2 [A3: (
                                                         array Z)]
                                                         [result9: unit]
                                                         ((((i:Z)
                                                            (i = `i1 + 1` ->
                                                             ((j:Z)
                                                              (j = `j1 - 1` ->
                                                               ((i_invariant m0
                                                                 n0 i r A3) /\
                                                               (j_invariant m0
                                                                n0 j r A3) /\
                                                               (m_invariant m0
                                                                A3) /\
                                                               (n_invariant n0
                                                                A3) /\
                                                               `0 <= j` /\
                                                               `i <= N + 1` /\
                                                               (termination i
                                                                j m0 n0 r A3) /\
                                                               (permut A3 A)) /\
                                                               (Zwf `0` `
                                                               N + 2 + j - i` `
                                                               N + 2 + j0 -
                                                               i0`))))) /\
                                                         `r <= (access A3 j1)`) /\
                                                         `(access A3 i1) <= r`) /\
                                                         (exchange A3 A1 i1
                                                          j1) A2
                                                         result8 WP19) in
                                                       let Pre15 =
                                                         let (HW_1, HW_2) =
                                                           WP19 in
                                                         HW_2 in
                                                       let Pre14 =
                                                         let (HW_3, HW_4) =
                                                           WP19 in
                                                         let (HW_5, HW_6) =
                                                           HW_3 in
                                                         HW_6 in
                                                       let Pre13 =
                                                         let (HW_7, HW_8) =
                                                           WP19 in
                                                         let (HW_9, HW_10) =
                                                           HW_7 in
                                                         let (HW_11, HW_12) =
                                                           HW_9 in
                                                         HW_12 in
                                                       let (i2, result9,
                                                         Post6) =
                                                         let (result9,
                                                           Post6) =
                                                           (exist_1 [result9: Z]
                                                           result9 = `i1 + 1` 
                                                           `i1 + 1`
                                                           (refl_equal ? `
                                                           i1 + 1`)) in
                                                         (exist_2 [i3: Z]
                                                         [result10: unit]
                                                         i3 = `i1 + 1` 
                                                         result9 tt Post6) in
                                                       let (j2, result10,
                                                         Post7) =
                                                         let (result10,
                                                           Post7) =
                                                           (exist_1 [result10: Z]
                                                           result10 = `
                                                           j1 - 1` `j1 - 1`
                                                           (refl_equal ? `
                                                           j1 - 1`)) in
                                                         (exist_2 [j3: Z]
                                                         [result11: unit]
                                                         j3 = `j1 - 1` 
                                                         result10 tt Post7) in
                                                       (exist_4 [A3: (
                                                       array Z)][i3: Z]
                                                       [j3: Z]
                                                       [result11: unit]
                                                       ((i_invariant m0 n0 i3
                                                         r A3) /\
                                                       (j_invariant m0 n0 j3
                                                        r A3) /\
                                                       (m_invariant m0 A3) /\
                                                       (n_invariant n0 A3) /\
                                                       `0 <= j3` /\
                                                       `i3 <= N + 1` /\
                                                       (termination i3 j3 m0
                                                        n0 r A3) /\
                                                       (permut A3 A)) /\
                                                       (Zwf `0` `N + 2 + j3 -
                                                                 i3` `
                                                       N + 2 + j0 - i0`) 
                                                       A2 i2 j2 result10
                                                       let (HW_13, HW_14) =
                                                         WP19 in
                                                       let (HW_15, HW_16) =
                                                         HW_13 in
                                                       let (HW_17, HW_18) =
                                                         HW_15 in
                                                       let HW_19 =
                                                         (HW_17 i2 Post6) in
                                                       let HW_20 =
                                                         (HW_19 j2 Post7) in
                                                       HW_20) in
                                                     (exist_4 [A3: (array Z)]
                                                     [i3: Z][j3: Z]
                                                     [result9: unit]
                                                     ((i_invariant m0 n0 i3 r
                                                       A3) /\
                                                     (j_invariant m0 n0 j3 r
                                                      A3) /\
                                                     (m_invariant m0 A3) /\
                                                     (n_invariant n0 A3) /\
                                                     `0 <= j3` /\
                                                     `i3 <= N + 1` /\
                                                     (termination i3 j3 m0 n0
                                                      r A3) /\
                                                     (permut A3 A)) /\
                                                     (Zwf `0` `N + 2 + j3 -
                                                               i3` `N + 2 +
                                                                    j0 - i0`) 
                                                     A2 i2 j2 result8
                                                     Inv_ij0)
                                                 | (right Test7) =>
                                                     let (result8, Inv_ij0) =
                                                       (exist_1 [result8: unit]
                                                       ((i_invariant m0 n0 i1
                                                         r A1) /\
                                                       (j_invariant m0 n0 j1
                                                        r A1) /\
                                                       (m_invariant m0 A1) /\
                                                       (n_invariant n0 A1) /\
                                                       `0 <= j1` /\
                                                       `i1 <= N + 1` /\
                                                       (termination i1 j1 m0
                                                        n0 r A1) /\
                                                       (permut A1 A)) /\
                                                       (Zwf `0` `N + 2 + j1 -
                                                                 i1` `
                                                       N + 2 + j0 - i0`) 
                                                       tt
                                                       (find_po_13 A Pre21
                                                       result Post16 result0
                                                       Post15 Variant1 A0 m0
                                                       n0 Pre20 Inv_mn Test14
                                                       Pre19 r Post14 result2
                                                       Post13 result3 Post12
                                                       Variant3 A1 i0 j0
                                                       Pre17 Inv_ij Test9 i1
                                                       Inv_i j1 Inv_j Pre16
                                                       Test7)) in
                                                     (exist_4 [A2: (array Z)]
                                                     [i2: Z][j2: Z]
                                                     [result9: unit]
                                                     ((i_invariant m0 n0 i2 r
                                                       A2) /\
                                                     (j_invariant m0 n0 j2 r
                                                      A2) /\
                                                     (m_invariant m0 A2) /\
                                                     (n_invariant n0 A2) /\
                                                     `0 <= j2` /\
                                                     `i2 <= N + 1` /\
                                                     (termination i2 j2 m0 n0
                                                      r A2) /\
                                                     (permut A2 A)) /\
                                                     (Zwf `0` `N + 2 + j2 -
                                                               i2` `N + 2 +
                                                                    j0 - i0`) 
                                                     A1 i1 j1 result8
                                                     Inv_ij0) end in
                                               (exist_4 [A3: (array Z)]
                                               [i3: Z][j3: Z][result8: unit]
                                               ((i_invariant m0 n0 i3 r A3) /\
                                               (j_invariant m0 n0 j3 r A3) /\
                                               (m_invariant m0 A3) /\
                                               (n_invariant n0 A3) /\
                                               `0 <= j3` /\ `i3 <= N + 1` /\
                                               (termination i3 j3 m0 n0 r A3) /\
                                               (permut A3 A)) /\
                                               (Zwf `0` `N + 2 + j3 - i3` `
                                               N + 2 + j0 - i0`) A2 i2 
                                               j2 result7 Inv_ij0) in
                                             ((wf2 `N + 2 + j1 - i1`)
                                               (loop_variant_1 Pre17 Inv_ij0)
                                               A2 i1 j1
                                               (refl_equal ? `N + 2 + j1 - i1`)
                                               (proj1 ? ? Inv_ij0)) in
                                           (exist_4 [A3: (array Z)][i2: Z]
                                           [j2: Z][result6: unit]
                                           ((i_invariant m0 n0 i2 r A3) /\
                                           (j_invariant m0 n0 j2 r A3) /\
                                           (m_invariant m0 A3) /\
                                           (n_invariant n0 A3) /\
                                           `0 <= j2` /\ `i2 <= N + 1` /\
                                           (termination i2 j2 m0 n0 r A3) /\
                                           (permut A3 A)) /\ `i2 > j2` 
                                           A2 i1 j1 result5 Inv_ij0)
                                       | (right Test2) =>
                                           let (A2, i1, j1, result5,
                                             Inv_ij0) =
                                             (exist_4 [A2: (array Z)][i1: Z]
                                             [j1: Z][result5: unit]
                                             ((i_invariant m0 n0 i1 r A2) /\
                                             (j_invariant m0 n0 j1 r A2) /\
                                             (m_invariant m0 A2) /\
                                             (n_invariant n0 A2) /\
                                             `0 <= j1` /\ `i1 <= N + 1` /\
                                             (termination i1 j1 m0 n0 r A2) /\
                                             (permut A2 A)) /\ `i1 > j1` 
                                             A1 i0 j0 tt
                                             (conj ? ? Inv_ij Test2)) in
                                           (exist_4 [A3: (array Z)][i2: Z]
                                           [j2: Z][result6: unit]
                                           ((i_invariant m0 n0 i2 r A3) /\
                                           (j_invariant m0 n0 j2 r A3) /\
                                           (m_invariant m0 A3) /\
                                           (n_invariant n0 A3) /\
                                           `0 <= j2` /\ `i2 <= N + 1` /\
                                           (termination i2 j2 m0 n0 r A3) /\
                                           (permut A3 A)) /\ `i2 > j2` 
                                           A2 i1 j1 result5 Inv_ij0) end
                                     `N + 2 + result3 - result2` A0 result2
                                     result3
                                     (refl_equal ? `N + 2 + result3 - result2`)
                                     (find_po_14 A Pre21 result Post16
                                     result0 Post15 Variant1 A0 m0 n0 Pre20
                                     Inv_mn Test14 Pre19 r Post14 result2
                                     Post13 result3 Post12)) in
                                 let Pre18 =
                                   (find_po_15 A Pre21 result Post16 result0
                                   Post15 Variant1 A0 m0 n0 Pre20 Inv_mn
                                   Test14 Pre19 r Post14 result2 Post13
                                   result3 Post12 A1 i0 j0 Inv_ij) in
                                 let (m1, n1, result5, Inv_mn0) =
                                   let (result5, Bool6) =
                                     let (result7, Post27) =
                                       (Z_le_gt_bool f j0) in
                                     (exist_1 [result8: bool]
                                     (if result8 then `f <= j0` else `f > j0`) 
                                     result7 Post27) in
                                   Cases
                                     (btest
                                      [result5:bool]
                                      (if result5 then `f <= j0`
                                       else `f > j0`) result5
                                      Bool6) of
                                   | (left Test13) =>
                                       let (n1, result6, Post8) =
                                         let (result6, Post8) =
                                           (exist_1 [result6: Z]
                                           result6 = j0 j0
                                           (refl_equal ? j0)) in
                                         (exist_2 [n2: Z][result7: unit]
                                         n2 = j0 result6 tt Post8) in
                                       (exist_3 [m1: Z][n2: Z][result7: unit]
                                       ((m_invariant m1 A1) /\
                                       (n_invariant n2 A1) /\
                                       (permut A1 A) /\ `1 <= m1` /\
                                       `n2 <= N`) /\
                                       (Zwf `0` `n2 - m1` `n0 - m0`) 
                                       m0 n1 result6
                                       (find_po_16 A Pre21 result Post16
                                       result0 Post15 Variant1 A0 m0 n0 Pre20
                                       Inv_mn Test14 Pre19 r Post14 result2
                                       Post13 result3 Post12 A1 i0 j0 Inv_ij
                                       Pre18 Test13 n1 Post8))
                                   | (right Test12) =>
                                       let (m1, n1, result6, Inv_mn0) =
                                         let (result6, Bool5) =
                                           let (result8, Post28) =
                                             (Z_le_gt_bool i0 f) in
                                           (exist_1 [result9: bool]
                                           (if result9 then `i0 <= f`
                                            else `i0 > f`) result8
                                           Post28) in
                                         Cases
                                           (btest
                                            [result6:bool]
                                            (if result6 then `i0 <= f`
                                             else `i0 > f`) result6
                                            Bool5) of
                                         | (left Test11) =>
                                             let (m1, result7, Post9) =
                                               let (result7, Post9) =
                                                 (exist_1 [result7: Z]
                                                 result7 = i0 i0
                                                 (refl_equal ? i0)) in
                                               (exist_2 [m2: Z]
                                               [result8: unit]m2 = i0 
                                               result7 tt Post9) in
                                             (exist_3 [m2: Z][n1: Z]
                                             [result8: unit]
                                             ((m_invariant m2 A1) /\
                                             (n_invariant n1 A1) /\
                                             (permut A1 A) /\ `1 <= m2` /\
                                             `n1 <= N`) /\
                                             (Zwf `0` `n1 - m2` `n0 - m0`) 
                                             m1 n0 result7
                                             (find_po_17 A Pre21 result
                                             Post16 result0 Post15 Variant1
                                             A0 m0 n0 Pre20 Inv_mn Test14
                                             Pre19 r Post14 result2 Post13
                                             result3 Post12 A1 i0 j0 Inv_ij
                                             Pre18 Test12 Test11 m1 Post9))
                                         | (right Test10) =>
                                             let (m1, n1, result7, Inv_mn0) =
                                               let (n1, result7, Post10) =
                                                 let (result7, Post10) =
                                                   (exist_1 [result7: Z]
                                                   result7 = f f
                                                   (refl_equal ? f)) in
                                                 (exist_2 [n2: Z]
                                                 [result8: unit]
                                                 n2 = f result7 tt Post10) in
                                               let (m1, result8, Post11) =
                                                 let (result8, Post11) =
                                                   (exist_1 [result8: Z]
                                                   result8 = f f
                                                   (refl_equal ? f)) in
                                                 (exist_2 [m2: Z]
                                                 [result9: unit]
                                                 m2 = f result8 tt Post11) in
                                               (exist_3 [m2: Z][n2: Z]
                                               [result9: unit]
                                               ((m_invariant m2 A1) /\
                                               (n_invariant n2 A1) /\
                                               (permut A1 A) /\ `1 <= m2` /\
                                               `n2 <= N`) /\
                                               (Zwf `0` `n2 - m2` `n0 - m0`) 
                                               m1 n1 result8
                                               (find_po_18 A Pre21 result
                                               Post16 result0 Post15 Variant1
                                               A0 m0 n0 Pre20 Inv_mn Test14
                                               Pre19 r Post14 result2 Post13
                                               result3 Post12 A1 i0 j0 Inv_ij
                                               Pre18 Test12 Test10 n1 Post10
                                               m1 Post11)) in
                                             (exist_3 [m2: Z][n2: Z]
                                             [result8: unit]
                                             ((m_invariant m2 A1) /\
                                             (n_invariant n2 A1) /\
                                             (permut A1 A) /\ `1 <= m2` /\
                                             `n2 <= N`) /\
                                             (Zwf `0` `n2 - m2` `n0 - m0`) 
                                             m1 n1 result7 Inv_mn0) end in
                                       (exist_3 [m2: Z][n2: Z][result7: unit]
                                       ((m_invariant m2 A1) /\
                                       (n_invariant n2 A1) /\
                                       (permut A1 A) /\ `1 <= m2` /\
                                       `n2 <= N`) /\
                                       (Zwf `0` `n2 - m2` `n0 - m0`) 
                                       m1 n1 result6 Inv_mn0) end in
                                 (exist_6 [A2: (array Z)][i1: Z][j1: Z]
                                 [m2: Z][n2: Z][result6: unit]
                                 ((m_invariant m2 A2) /\
                                 (n_invariant n2 A2) /\ (permut A2 A) /\
                                 `1 <= m2` /\ `n2 <= N`) /\
                                 (Zwf `0` `n2 - m2` `n0 - m0`) A1 i0 
                                 j0 m1 n1 result5 Inv_mn0) in
                               (exist_5 [A2: (array Z)][i1: Z][m2: Z][n2: Z]
                               [result5: unit]((m_invariant m2 A2) /\
                               (n_invariant n2 A2) /\ (permut A2 A) /\
                               `1 <= m2` /\ `n2 <= N`) /\
                               (Zwf `0` `n2 - m2` `n0 - m0`) A1 i0 m1 
                               n1 result4 Inv_mn0) in
                             (exist_4 [A2: (array Z)][m2: Z][n2: Z]
                             [result4: unit]((m_invariant m2 A2) /\
                             (n_invariant n2 A2) /\ (permut A2 A) /\
                             `1 <= m2` /\ `n2 <= N`) /\
                             (Zwf `0` `n2 - m2` `n0 - m0`) A1 m1 n1 result3
                             Inv_mn0) in
                           (exist_4 [A2: (array Z)][m2: Z][n2: Z]
                           [result3: unit]((m_invariant m2 A2) /\
                           (n_invariant n2 A2) /\ (permut A2 A) /\
                           `1 <= m2` /\ `n2 <= N`) /\
                           (Zwf `0` `n2 - m2` `n0 - m0`) A1 m1 n1 result2
                           Inv_mn0) in
                         (exist_4 [A2: (array Z)][m2: Z][n2: Z]
                         [result3: unit]((m_invariant m2 A2) /\
                         (n_invariant n2 A2) /\ (permut A2 A) /\ `1 <= m2` /\
                         `n2 <= N`) /\ (Zwf `0` `n2 - m2` `n0 - m0`) 
                         A1 m1 n1 result2 Inv_mn0) in
                       ((wf1 `n1 - m1`) (loop_variant_1 Pre20 Inv_mn0) 
                         A1 m1 n1 (refl_equal ? `n1 - m1`)
                         (proj1 ? ? Inv_mn0)) in
                     (exist_4 [A2: (array Z)][m2: Z][n2: Z][result3: unit]
                     ((m_invariant m2 A2) /\ (n_invariant n2 A2) /\
                     (permut A2 A) /\ `1 <= m2` /\ `n2 <= N`) /\
                     `m2 >= n2` A1 m1 n1 result2 Inv_mn0)
                 | (right Test1) =>
                     let (A1, m1, n1, result2, Inv_mn0) =
                       (exist_4 [A1: (array Z)][m1: Z][n1: Z][result2: unit]
                       ((m_invariant m1 A1) /\ (n_invariant n1 A1) /\
                       (permut A1 A) /\ `1 <= m1` /\ `n1 <= N`) /\
                       `m1 >= n1` A0 m0 n0 tt (conj ? ? Inv_mn Test1)) in
                     (exist_4 [A2: (array Z)][m2: Z][n2: Z][result3: unit]
                     ((m_invariant m2 A2) /\ (n_invariant n2 A2) /\
                     (permut A2 A) /\ `1 <= m2` /\ `n2 <= N`) /\
                     `m2 >= n2` A1 m1 n1 result2 Inv_mn0) end
               `result0 - result` A result result0
               (refl_equal ? `result0 - result`)
               (find_po_19 A Pre21 result Post16 result0 Post15)) in
           (exist_3 [A1: (array Z)][m1: Z][result2: unit](found A1) /\
           (permut A1 A) A0 m0 result1
           (find_po_20 A Pre21 result Post16 result0 Post15 A0 m0 n0 Inv_mn)) in
         (exist_2 [A1: (array Z)][result1: unit](found A1) /\
         (permut A1 A) A0 result0 Post21) in
       (exist_2 [A1: (array Z)][result0: unit](found A1) /\ (permut A1 A) 
       A0 result Post20).

