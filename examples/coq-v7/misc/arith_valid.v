(* This file is generated by Why; do not edit *)

Require Why.
Require Export arith_why.

Definition mult (* validation *)
  : (x: Z)(y: Z)(_: `x >= 0` /\ `y >= 0`)
    (sig_1 Z [result: Z](`result = x * y`))
  := [x: Z; y: Z; Pre9: `x >= 0` /\ `y >= 0`]
       let (a, Post6) = (exist_1 [result: Z]result = x x (refl_equal ? x)) in
       let (a1, result, Post8) =
         let (b, Post5) = (exist_1 [result: Z]result = y y
           (refl_equal ? y)) in
         let (a1, b1, result, Post9) =
           let (p, Post4) = (exist_1 [result: Z]result = `0` `0`
             (refl_equal ? `0`)) in
           let (a1, b1, p1, result, Post10) =
             let (a1, b1, p1, result, Inv) =
               (well_founded_induction Z (Zwf ZERO) (Zwf_well_founded `
                 0`) [Variant1: Z](a1: Z)(b1: Z)(p1: Z)(_: Variant1 = a1)
                 (Inv: `a1 >= 0` /\ `p1 + a1 * b1 = x * y`)
                 (sig_4 Z Z Z unit [a2: Z][b2: Z][p2: Z][result: unit]
                  ((`a2 >= 0` /\ `p2 + a2 * b2 = x * y`) /\ `a2 = 0`))
                 [Variant1: Z; wf1: (Variant2: Z)
                  (Pre1: (Zwf `0` Variant2 Variant1))(a1: Z)(b1: Z)(p1: Z)
                  (_: Variant2 = a1)(Inv: `a1 >= 0` /\
                  `p1 + a1 * b1 = x * y`)
                  (sig_4 Z Z Z unit [a2: Z][b2: Z][p2: Z][result: unit]
                   ((`a2 >= 0` /\ `p2 + a2 * b2 = x * y`) /\ `a2 = 0`));
                  a1: Z; b1: Z; p1: Z; Pre8: Variant1 = a1; Inv: `a1 >= 0` /\
                  `p1 + a1 * b1 = x * y`]
                   let (result, Bool2) =
                     let (result1, Post11) = (Z_noteq_bool a1 `0`) in
                     (exist_1 [result2: bool]
                     (if result2 then `a1 <> 0` else `a1 = 0`) result1
                     Post11) in
                   Cases
                     (btest
                      [result:bool](if result then `a1 <> 0` else `a1 = 0`) result
                      Bool2) of
                   | (left Test4) =>
                       let (a2, b2, p2, result0, Inv0) =
                         let (a2, b2, p2, result0, Inv0) =
                           let (p2, result0, WP5) =
                             let Pre6 =
                               (mult_po_1 x y Pre9 a Post6 b Post5 p Post4
                               Variant1 a1 b1 p1 Pre8 Inv Test4) in
                             let (result0, Bool1) =
                               let Pre5 = Pre6 in
                               let result1 =
                                 let Pre3 = Pre5 in
                                 let Pre2 = Pre3 in
                                 (Z_eq_bool (Zmod a1 `2`)) in
                               let Pre4 = Pre5 in
                               let (result2, Post12) = (result1 `1`) in
                               (exist_1 [result3: bool]
                               (if result3 then `(Zmod a1 2) = 1`
                                else `(Zmod a1 2) <> 1`) result2
                               Post12) in
                             Cases
                               (btest
                                [result0:bool]
                                (if result0 then `(Zmod a1 2) = 1`
                                 else `(Zmod a1 2) <> 1`) result0
                                Bool1) of
                             | (left Test3) =>
                                 let (p2, result1, Post1) =
                                   let (result1, Post1) =
                                     (exist_1 [result1: Z]
                                     result1 = `p1 + b1` `p1 + b1`
                                     (refl_equal ? `p1 + b1`)) in
                                   (exist_2 [p3: Z][result2: unit]
                                   p3 = `p1 + b1` result1 tt Post1) in
                                 (exist_2 [p3: Z][result2: unit]
                                 ((a:Z)
                                  (a = (Zdiv a1 `2`) ->
                                   ((b:Z)
                                    (b = `2 * b1` -> (`a >= 0` /\
                                     `p3 + a * b = x * y`) /\ (Zwf `0` a a1))))) /\
                                 ~(`2` = `0`) p2 result1
                                 (mult_po_2 x y Pre9 a Post6 b Post5 p Post4
                                 Variant1 a1 b1 p1 Pre8 Inv Test4 Pre6 Test3
                                 p2 Post1))
                             | (right Test2) =>
                                 let (result1, WP5) =
                                   (exist_1 [result1: unit]
                                   ((a:Z)
                                    (a = (Zdiv a1 `2`) ->
                                     ((b:Z)
                                      (b = `2 * b1` -> (`a >= 0` /\
                                       `p1 + a * b = x * y`) /\
                                       (Zwf `0` a a1))))) /\ ~(`2` = `0`) 
                                   tt
                                   (mult_po_3 x y Pre9 a Post6 b Post5 p
                                   Post4 Variant1 a1 b1 p1 Pre8 Inv Test4
                                   Pre6 Test2)) in
                                 (exist_2 [p2: Z][result2: unit]
                                 ((a:Z)
                                  (a = (Zdiv a1 `2`) ->
                                   ((b:Z)
                                    (b = `2 * b1` -> (`a >= 0` /\
                                     `p2 + a * b = x * y`) /\ (Zwf `0` a a1))))) /\
                                 ~(`2` = `0`) p1 result1 WP5) end in
                           let Pre7 = let (HW_1, HW_2) = WP5 in
                                      HW_2 in
                           let (a2, result1, Post2) =
                             let (result1, Post2) = (exist_1 [result1: Z]
                               result1 = (Zdiv a1 `2`) (Zdiv a1 `2`)
                               (refl_equal ? (Zdiv a1 `2`))) in
                             (exist_2 [a3: Z][result2: unit]
                             a3 = (Zdiv a1 `2`) result1 tt Post2) in
                           let (b2, result2, Post3) =
                             let (result2, Post3) = (exist_1 [result2: Z]
                               result2 = `2 * b1` `2 * b1`
                               (refl_equal ? `2 * b1`)) in
                             (exist_2 [b3: Z][result3: unit]
                             b3 = `2 * b1` result2 tt Post3) in
                           (exist_4 [a3: Z][b3: Z][p3: Z][result3: unit]
                           (`a3 >= 0` /\ `p3 + a3 * b3 = x * y`) /\
                           (Zwf `0` a3 a1) a2 b2 p2 result2
                           let (HW_3, HW_4) = WP5 in
                           let HW_5 = (HW_3 a2 Post2) in
                           let HW_6 = (HW_5 b2 Post3) in
                           HW_6) in
                         ((wf1 a2) (loop_variant_1 Pre8 Inv0) a2 b2 p2
                           (refl_equal ? a2) (proj1 ? ? Inv0)) in
                       (exist_4 [a3: Z][b3: Z][p3: Z][result1: unit]
                       (`a3 >= 0` /\ `p3 + a3 * b3 = x * y`) /\ `a3 = 0` 
                       a2 b2 p2 result0 Inv0)
                   | (right Test1) =>
                       let (a2, b2, p2, result0, Inv0) = (exist_4 [a2: Z]
                         [b2: Z][p2: Z][result0: unit](`a2 >= 0` /\
                         `p2 + a2 * b2 = x * y`) /\ `a2 = 0` a1 b1 p1 
                         tt (conj ? ? Inv Test1)) in
                       (exist_4 [a3: Z][b3: Z][p3: Z][result1: unit]
                       (`a3 >= 0` /\ `p3 + a3 * b3 = x * y`) /\ `a3 = 0` 
                       a2 b2 p2 result0 Inv0) end a a b p (refl_equal ? a)
                 (mult_po_4 x y Pre9 a Post6 b Post5 p Post4)) in
             let (result0, Post13) = (exist_1 [result0: Z]
               `result0 = x * y` p1
               (mult_po_5 x y Pre9 a Post6 b Post5 p Post4 a1 b1 p1 Inv)) in
             (exist_4 [a2: Z][b2: Z][p2: Z][result1: Z]`result1 = x * y` 
             a1 b1 p1 result0 Post13) in
           (exist_3 [a2: Z][b2: Z][result0: Z]`result0 = x * y` a1 b1 
           result Post10) in
         (exist_2 [a2: Z][result0: Z]`result0 = x * y` a1 result Post9) in
       (exist_1 [result0: Z]`result0 = x * y` result Post8).

