(BG_PUSH 
  ; array_length
  (FORALL (t i v) (EQ (array_length (store t i v)) (array_length t)))
  ; booleans
  (DISTINCT |@true| |@false|)
  ; exchange
  (FORALL (t1 t2 i j)
	  (IFF (EQ (exchange t1 t2 i j) |@true|)
	       (AND (EQ (array_length t1) (array_length t2))
		    (EQ (select t1 i) (select t2 j))
		    (EQ (select t1 j) (select t2 i))
		    (FORALL (k) (IMPLIES (AND (NEQ k i) (NEQ k j))
					 (EQ (select t1 k) (select t2 k)))))))
  (FORALL (t1 t2 i j)
	  (IMPLIES (EQ (exchange t1 t2 i j) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; permut
  (FORALL (t) (EQ (permut t t) |@true|))
  (FORALL (t1 t2) (IMPLIES (EQ (permut t1 t2) |@true|)
			   (EQ (permut t2 t1) |@true|)))
  (FORALL (t1 t2 t3) (IMPLIES (AND (EQ (permut t1 t2) |@true|)
				   (EQ (permut t2 t3) |@true|))
			      (EQ (permut t1 t3) |@true|)))
  (FORALL 
   (t i j) 
   (EQ (permut t (store (store t i (select t j)) j (select t i))) |@true|))
  (FORALL (t1 t2)
	  (IMPLIES (EQ (permut t1 t2) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; sub_permut
  (FORALL (t g d) (EQ (sub_permut g d t t) |@true|))
  (FORALL (t1 t2 g d) (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
			   (EQ (sub_permut g d t2 t1) |@true|)))
  (FORALL (t1 t2 t3 g d) (IMPLIES (AND (EQ (sub_permut g d t1 t2) |@true|)
				       (EQ (sub_permut g d t2 t3) |@true|))
				  (EQ (sub_permut g d t1 t3) |@true|)))
  (FORALL 
   (t g d i j) 
   (IMPLIES (AND (<= g i) (<= i d) (<= g j) (<= j d))
	    (EQ (sub_permut g d t 
			    (store (store t i (select t j)) j (select t i))) 
		|@true|)))
  (FORALL 
   (t1 t2 g d i j)
   (IMPLIES (AND (EQ (exchange t1 t2 i j) |@true|)
		 (<= g i) (<= i d) (<= g j) (<= j d))
	    (EQ (sub_permut g d t1 t2) |@true|)))
  (FORALL (t1 t2 i j) 
	  (IMPLIES (EQ (sub_permut i j t1 t2) |@true|)
		   (EQ (permut t1 t2) |@true|)))
  (FORALL (t1 t2 i j)
	  (IMPLIES (EQ (sub_permut i j t1 t2) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; sorted_array
  (FORALL 
   (t i j) 
   (IFF (EQ (sorted_array t i j) |@true|)
	(IMPLIES (<= i j)
		 (FORALL (k) (IMPLIES (AND (<= i k) (< k j))
				      (<= (select t k) (select t (+ k 1))))))))
)

(BG_PUSH
 ;; Why axiom Maximize_def
 (FORALL (t)
 (FORALL (n)
 (FORALL (x)
 (FORALL (k)
 (IFF (EQ (Maximize t n x k) |@true|)
 (FORALL (i) (IMPLIES (AND (<= k i) (<= i n)) (<= (select t k) x)))))))))

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom access_update
 (FORALL (t i v) (EQ (access (update t i v) i) v)))

(BG_PUSH
 ;; Why axiom access_update_neq
 (FORALL (t i j v)
 (IMPLIES (NEQ i j) (EQ (access (update t i v) j) (access t j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j)
 (FORALL (t v) (EQ (access (update t i v) j) (access t j))))))

(DEFPRED (sorted_array t i j)
  (FORALL (k)
  (IMPLIES (AND (<= i k) (< k j)) (<= (access t k) (access t (+ k 1))))))

(DEFPRED (exchange t1 t2 i j)
  (AND (EQ (array_length t1) (array_length t2))
  (AND (EQ (access t1 i) (access t2 j))
  (AND (EQ (access t2 i) (access t1 j))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i) (NEQ k j)) (EQ (access t1 k) (access t2 k))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t) (EQ (permut t t) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1 t2)
 (IMPLIES (EQ (permut t1 t2) |@true|) (EQ (permut t2 t1) |@true|))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1 t2 t3)
 (IMPLIES (AND (EQ (permut t1 t2) |@true|) (EQ (permut t2 t3) |@true|))
 (EQ (permut t1 t3) |@true|))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (t i j)
 (EQ (permut t (update (update t i (access t j)) j (access t i))) |@true|)))

(BG_PUSH
 ;; Why axiom sub_permut_refl
 (FORALL (t g d) (EQ (sub_permut g d t t) |@true|)))

(BG_PUSH
 ;; Why axiom sub_permut_sym
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (sub_permut g d t2 t1) |@true|))))

(BG_PUSH
 ;; Why axiom sub_permut_trans
 (FORALL (t1 t2 t3 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))

 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_1
 (FORALL (t g d i j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (EQ (sub_permut
 g d t (update (update t i (access t j)) j (access t i))) |@true|)))

 (FORALL (g d i j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (FORALL (t)
 (EQ (sub_permut
 g d t (update (update t i (access t j)) j (access t i))) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_2
 (FORALL (t1 t2 g d i j)
 (IMPLIES
 (AND (<= g i)
 (AND (<= i d) (AND (<= g j) (AND (<= j d) (exchange t1 t2 i j)))))
 (EQ (sub_permut g d t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom sub_permut_weakening
 (FORALL (a1 a2 l1 r1 l2 r2)
 (IMPLIES (AND (<= l1 l2) (AND (<= l2 r2) (<= r2 r1)))
 (IMPLIES (EQ (sub_permut l2 r2 a1 a2) |@true|)
 (EQ (sub_permut l1 r1 a1 a2) |@true|))))

 (FORALL (l1 r1 l2 r2)
 (IMPLIES (AND (<= l1 l2) (AND (<= l2 r2) (<= r2 r1)))
 (FORALL (a2 a1)
 (IMPLIES (EQ (sub_permut l2 r2 a1 a2) |@true|)
 (EQ (sub_permut l1 r1 a1 a2) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_permut_eq
 (FORALL (a1 a2 l r)
 (IMPLIES (<= l r)
 (IMPLIES (EQ (sub_permut l r a1 a2) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< r i)) (EQ (access a2 i) (access a1 i)))))))

 (FORALL (l r)
 (IMPLIES (<= l r)
 (FORALL (a2 a1)
 (IMPLIES (EQ (sub_permut l r a1 a2) |@true|)
 (FORALL (i) (IMPLIES (OR (< i l) (< r i)) (EQ (access a2 i) (access a1 i)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_permut
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|) (EQ (permut t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (t i v) (EQ (array_length (update t i v)) (array_length t))))

(BG_PUSH
 ;; Why axiom sub_permut_array_length
 (FORALL (t1 t2 g d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2)))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (t1 t2)
 (IMPLIES (EQ (permut t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2)))))

;; swap_po_1, File "maximumsort.mlw", line 10, characters 5-14
(FORALL (i)
(FORALL (j)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 i) (< i (array_length t)))
         (AND (<= 0 j) (< j (array_length t))))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t i))
(IMPLIES (AND (<= 0 j) (< j (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t j))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t i result0)) (AND (<= 0 j) (< j (array_length t0))))))))))))))))

;; swap_po_2, File "maximumsort.mlw", line 12, characters 4-22
(FORALL (i)
(FORALL (j)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 i) (< i (array_length t)))
         (AND (<= 0 j) (< j (array_length t))))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t i))
(IMPLIES (AND (<= 0 j) (< j (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t j))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t i result0))
(IMPLIES (AND (<= 0 j) (< j (array_length t0)))
(FORALL (t1) (IMPLIES (EQ t1 (update t0 j result)) (exchange t1 t i j)))))))))))))))))

(DEFPRED (Maximize t n x k)
  (FORALL (i) (IMPLIES (AND (<= k i) (<= i n)) (<= (access t k) x))))

;; maximum_po_1, File "maximumsort.mlw", line 31, characters 4-50
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t)) (Maximize t n (access t i) k))))
(IMPLIES (EQ k 0)
(AND (AND (<= 0 i) (<= i n)) (Maximize t n (access t i) 0))))))))

;; maximum_po_2, File "maximumsort.mlw", line 28, characters 10-15
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t)) (Maximize t n (access t i) k))))
(IMPLIES (NEQ k 0) (AND (<= 0 (- k 1)) (< (- k 1) (array_length t)))))))))

;; maximum_po_3, File "maximumsort.mlw", line 28, characters 16-20
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t)) (Maximize t n (access t i) k))))
(IMPLIES (NEQ k 0)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (- k 1)))
(AND (<= 0 i) (< i (array_length t))))))))))))

;; maximum_po_4, File "maximumsort.mlw", line 29, characters 9-26
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t)) (Maximize t n (access t i) k))))
(IMPLIES (NEQ k 0)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (- k 1)))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t i))
(IMPLIES (> result result0) (AND (<= 0 k) (< (- k 1) k)))))))))))))))

;; maximum_po_5, File "maximumsort.mlw", line 29, characters 9-26
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t)) (Maximize t n (access t i) k))))
(IMPLIES (NEQ k 0)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (- k 1)))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t i))
(IMPLIES (> result result0)
(IMPLIES (AND (<= 0 k) (< (- k 1) k))
(AND (AND (<= 0 (- k 1)) (<= (- k 1) (- k 1)))
(AND (<= (- k 1) n)
(AND (< n (array_length t)) (Maximize t n (access t (- k 1)) (- k 1)))))))))))))))))))

;; maximum_po_6, File "maximumsort.mlw", line 30, characters 9-25
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t)) (Maximize t n (access t i) k))))
(IMPLIES (NEQ k 0)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (- k 1)))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t i))
(IMPLIES (<= result result0) (AND (<= 0 k) (< (- k 1) k)))))))))))))))

;; maximum_po_7, File "maximumsort.mlw", line 30, characters 9-25
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t)) (Maximize t n (access t i) k))))
(IMPLIES (NEQ k 0)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (access t (- k 1)))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (access t i))
(IMPLIES (<= result result0)
(IMPLIES (AND (<= 0 k) (< (- k 1) k))
(AND (AND (<= 0 (- k 1)) (<= (- k 1) i))
(AND (<= i n)
(AND (< n (array_length t)) (Maximize t n (access t i) (- k 1)))))))))))))))))))

;; maxisort_po_1, File "maximumsort.mlw", line 39, characters 18-193
(FORALL (t)
(IMPLIES (<= 0 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(AND (AND (<= 0 (+ (- result 1) 1)) (<= (+ (- result 1) 1) (array_length t)))
(AND (sorted_array t (+ (- result 1) 1) (- (array_length t) 1))
(AND (EQ (permut t t) |@true|)
(IMPLIES (< (+ (- result 1) 1) (array_length t))
(Maximize t (- result 1) (access t (+ (- result 1) 1)) 0)))))))))

;; maxisort_po_2, File "maximumsort.mlw", line 44, characters 16-34
(FORALL (t)
(IMPLIES (<= 0 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 (+ i 1)) (<= (+ i 1) (array_length t0)))
         (AND (sorted_array t0 (+ i 1) (- (array_length t0) 1))
         (AND (EQ (permut t0 t) |@true|)
         (IMPLIES (< (+ i 1) (array_length t0))
         (Maximize t0 i (access t0 (+ i 1)) 0)))))
(IMPLIES (>= i 0)
(AND (AND (<= 0 i) (<= i i))
(AND (<= i i) (AND (< i (array_length t0)) (Maximize t0 i (access t0 i) i))))))))))))

;; maxisort_po_3, File "maximumsort.mlw", line 45, characters 8-19
(FORALL (t)
(IMPLIES (<= 0 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 (+ i 1)) (<= (+ i 1) (array_length t0)))
         (AND (sorted_array t0 (+ i 1) (- (array_length t0) 1))
         (AND (EQ (permut t0 t) |@true|)
         (IMPLIES (< (+ i 1) (array_length t0))
         (Maximize t0 i (access t0 (+ i 1)) 0)))))
(IMPLIES (>= i 0)
(IMPLIES (AND (AND (<= 0 i) (<= i i))
         (AND (<= i i)
         (AND (< i (array_length t0)) (Maximize t0 i (access t0 i) i))))
(FORALL (result0)
(IMPLIES (AND (AND (<= 0 result0) (<= result0 i))
         (Maximize t0 i (access t0 result0) 0))
(AND (AND (<= 0 i) (< i (array_length t0)))
(AND (<= 0 result0) (< result0 (array_length t0)))))))))))))))

;; maxisort_po_4, File "maximumsort.mlw", line 39, characters 18-193
(FORALL (t)
(IMPLIES (<= 0 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 (+ i 1)) (<= (+ i 1) (array_length t0)))
         (AND (sorted_array t0 (+ i 1) (- (array_length t0) 1))
         (AND (EQ (permut t0 t) |@true|)
         (IMPLIES (< (+ i 1) (array_length t0))
         (Maximize t0 i (access t0 (+ i 1)) 0)))))
(IMPLIES (>= i 0)
(IMPLIES (AND (AND (<= 0 i) (<= i i))
         (AND (<= i i)
         (AND (< i (array_length t0)) (Maximize t0 i (access t0 i) i))))
(FORALL (result0)
(IMPLIES (AND (AND (<= 0 result0) (<= result0 i))
         (Maximize t0 i (access t0 result0) 0))
(IMPLIES (AND (AND (<= 0 i) (< i (array_length t0)))
         (AND (<= 0 result0) (< result0 (array_length t0))))
(FORALL (t1)
(IMPLIES (exchange t1 t0 i result0)
(FORALL (i0)
(IMPLIES (EQ i0 (- i 1))
(AND (AND (<= 0 (+ i0 1)) (<= (+ i0 1) (array_length t1)))
(AND (sorted_array t1 (+ i0 1) (- (array_length t1) 1))
(AND (EQ (permut t1 t) |@true|)
(IMPLIES (< (+ i0 1) (array_length t1))
(Maximize t1 i0 (access t1 (+ i0 1)) 0)))))))))))))))))))))

;; maxisort_po_5, File "maximumsort.mlw", line 43, characters 16-19
(FORALL (t)
(IMPLIES (<= 0 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 (+ i 1)) (<= (+ i 1) (array_length t0)))
         (AND (sorted_array t0 (+ i 1) (- (array_length t0) 1))
         (AND (EQ (permut t0 t) |@true|)
         (IMPLIES (< (+ i 1) (array_length t0))
         (Maximize t0 i (access t0 (+ i 1)) 0)))))
(IMPLIES (>= i 0)
(IMPLIES (AND (AND (<= 0 i) (<= i i))
         (AND (<= i i)
         (AND (< i (array_length t0)) (Maximize t0 i (access t0 i) i))))
(FORALL (result0)
(IMPLIES (AND (AND (<= 0 result0) (<= result0 i))
         (Maximize t0 i (access t0 result0) 0))
(IMPLIES (AND (AND (<= 0 i) (< i (array_length t0)))
         (AND (<= 0 result0) (< result0 (array_length t0))))
(FORALL (t1)
(IMPLIES (exchange t1 t0 i result0)
(FORALL (i0)
(IMPLIES (EQ i0 (- i 1)) (AND (<= 0 (+ i 1)) (< (+ i0 1) (+ i 1)))))))))))))))))))

;; maxisort_po_6, File "maximumsort.mlw", line 48, characters 4-56
(FORALL (t)
(IMPLIES (<= 0 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 (+ i 1)) (<= (+ i 1) (array_length t0)))
         (AND (sorted_array t0 (+ i 1) (- (array_length t0) 1))
         (AND (EQ (permut t0 t) |@true|)
         (IMPLIES (< (+ i 1) (array_length t0))
         (Maximize t0 i (access t0 (+ i 1)) 0)))))
(IMPLIES (< i 0)
(AND (sorted_array t0 0 (- (array_length t0) 1)) (EQ (permut t0 t) |@true|))))))))))

