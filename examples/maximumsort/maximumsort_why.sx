(BG_PUSH 
  ; array_length
  (FORALL (t i v) (EQ (array_length (store t i v)) (array_length t)))
  ; booleans
  (DISTINCT |@true| |@false|)
  ; exchange
  (FORALL (t1 t2 i j)
	  (IFF (EQ (exchange t1 t2 i j) |@true|)
	       (AND (EQ (array_length t1) (array_length t2))
		    (EQ (select t1 i) (select t2 j))
		    (EQ (select t1 j) (select t2 i))
		    (FORALL (k) (IMPLIES (AND (NEQ k i) (NEQ k j))
					 (EQ (select t1 k) (select t2 k)))))))
  (FORALL (t1 t2 i j)
	  (IMPLIES (EQ (exchange t1 t2 i j) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; permut
  (FORALL (t) (EQ (permut t t) |@true|))
  (FORALL (t1 t2) (IMPLIES (EQ (permut t1 t2) |@true|)
			   (EQ (permut t2 t1) |@true|)))
  (FORALL (t1 t2 t3) (IMPLIES (AND (EQ (permut t1 t2) |@true|)
				   (EQ (permut t2 t3) |@true|))
			      (EQ (permut t1 t3) |@true|)))
  (FORALL 
   (t i j) 
   (EQ (permut t (store (store t i (select t j)) j (select t i))) |@true|))
  (FORALL (t1 t2)
	  (IMPLIES (EQ (permut t1 t2) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; sub_permut
  (FORALL (t g d) (EQ (sub_permut g d t t) |@true|))
  (FORALL (t1 t2 g d) (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
			   (EQ (sub_permut g d t2 t1) |@true|)))
  (FORALL (t1 t2 t3 g d) (IMPLIES (AND (EQ (sub_permut g d t1 t2) |@true|)
				       (EQ (sub_permut g d t2 t3) |@true|))
				  (EQ (sub_permut g d t1 t3) |@true|)))
  (FORALL 
   (t g d i j) 
   (IMPLIES (AND (<= g i) (<= i d) (<= g j) (<= j d))
	    (EQ (sub_permut g d t 
			    (store (store t i (select t j)) j (select t i))) 
		|@true|)))
  (FORALL 
   (t1 t2 g d i j)
   (IMPLIES (AND (EQ (exchange t1 t2 i j) |@true|)
		 (<= g i) (<= i d) (<= g j) (<= j d))
	    (EQ (sub_permut g d t1 t2) |@true|)))
  (FORALL (t1 t2 i j) 
	  (IMPLIES (EQ (sub_permut i j t1 t2) |@true|)
		   (EQ (permut t1 t2) |@true|)))
  (FORALL (t1 t2 i j)
	  (IMPLIES (EQ (sub_permut i j t1 t2) |@true|)
		   (EQ (array_length t1) (array_length t2))))
  ; sorted_array
  (FORALL 
   (t i j) 
   (IFF (EQ (sorted_array t i j) |@true|)
	(IMPLIES (<= i j)
		 (FORALL (k) (IMPLIES (AND (<= i k) (< k j))
				      (<= (select t k) (select t (+ k 1))))))))
)

(BG_PUSH
 ;; Why axiom Maximize_def
 (FORALL (t)
 (FORALL (n)
 (FORALL (x)
 (FORALL (k)
 (IFF (EQ (Maximize t n x k) |@true|)
 (FORALL (i) (IMPLIES (AND (<= k i) (<= i n)) (<= (select t k) x)))))))))

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y)))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y)))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y)))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y)))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y)))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x) (FORALL (y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y)))))

(BG_PUSH
 ;; Why axiom sorted_array_def
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (IFF (EQ (sorted_array t i j) |@true|)
 (FORALL (k)
 (IMPLIES (AND (<= i k) (< k j)) (<= (select t k) (select t (+ k 1))))))))))

(BG_PUSH
 ;; Why axiom exchange_def
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (i)
 (FORALL (j)
 (IFF (EQ (exchange t1 t2 i j) |@true|)
 (AND (EQ (array_length t1) (array_length t2))
 (AND (EQ (select t1 i) (select t2 j))
 (AND (EQ (select t2 i) (select t1 j))
 (FORALL (k)
 (IMPLIES (AND (NEQ k i) (NEQ k j)) (EQ (select t1 k) (select t2 k)))))))))))))

(BG_PUSH
 ;; Why axiom permut_refl
 (FORALL (t) (EQ (permut t t) |@true|)))

(BG_PUSH
 ;; Why axiom permut_sym
 (FORALL (t1)
 (FORALL (t2)
 (IMPLIES (EQ (permut t1 t2) |@true|) (EQ (permut t2 t1) |@true|)))))

(BG_PUSH
 ;; Why axiom permut_trans
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (t3)
 (IMPLIES (AND (EQ (permut t1 t2) |@true|) (EQ (permut t2 t3) |@true|))
 (EQ (permut t1 t3) |@true|))))))

(BG_PUSH
 ;; Why axiom permut_exchange
 (FORALL (t)
 (FORALL (i)
 (FORALL (j)
 (EQ (permut t (update (update t i (select t j)) j (select t i))) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_refl
 (FORALL (t) (FORALL (g) (FORALL (d) (EQ (sub_permut g d t t) |@true|)))))

(BG_PUSH
 ;; Why axiom sub_permut_sym
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (sub_permut g d t2 t1) |@true|)))))))

(BG_PUSH
 ;; Why axiom sub_permut_trans
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (t3)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|))))))))

 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (sub_permut g d t2 t3) |@true|)
 (EQ (sub_permut g d t1 t3) |@true|)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_1
 (FORALL (t)
 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (EQ (sub_permut g d t
 (update (update t i (select t j)) j (select t i))) |@true|)))))))

 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES (AND (<= g i) (AND (<= i d) (AND (<= g j) (<= j d))))
 (FORALL (t)
 (EQ (sub_permut g d t
 (update (update t i (select t j)) j (select t i))) |@true|))))))))

(BG_PUSH
 ;; Why axiom sub_permut_exchange_2
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (FORALL (i)
 (FORALL (j)
 (IMPLIES
 (AND (<= g i)
 (AND (<= i d)
 (AND (<= g j) (AND (<= j d) (EQ (exchange t1 t2 i j) |@true|)))))
 (EQ (sub_permut g d t1 t2) |@true|)))))))))

(BG_PUSH
 ;; Why axiom sub_permut_permut
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|) (EQ (permut t1 t2) |@true|)))))))

(BG_PUSH
 ;; Why axiom array_length_update
 (FORALL (t)
 (FORALL (i)
 (FORALL (v) (EQ (array_length (update t i v)) (array_length t))))))

(BG_PUSH
 ;; Why axiom sub_permut_array_length
 (FORALL (t1)
 (FORALL (t2)
 (FORALL (g)
 (FORALL (d)
 (IMPLIES (EQ (sub_permut g d t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2))))))))

(BG_PUSH
 ;; Why axiom permut_array_length
 (FORALL (t1)
 (FORALL (t2)
 (IMPLIES (EQ (permut t1 t2) |@true|)
 (EQ (array_length t1) (array_length t2))))))

;; swap_po_1, Why obligation from file "", line 0, characters 0-0:
(FORALL (i)
(FORALL (j)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 i) (< i (array_length t)))
         (AND (<= 0 j) (< j (array_length t))))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (select t i))
(IMPLIES (AND (<= 0 j) (< j (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select t j))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t i result0)) (AND (<= 0 j) (< j (array_length t0))))))))))))))))

;; swap_po_2, Why obligation from file "", line 0, characters 0-0:
(FORALL (i)
(FORALL (j)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 i) (< i (array_length t)))
         (AND (<= 0 j) (< j (array_length t))))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (select t i))
(IMPLIES (AND (<= 0 j) (< j (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select t j))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (t0)
(IMPLIES (EQ t0 (update t i result0))
(IMPLIES (AND (<= 0 j) (< j (array_length t0)))
(FORALL (t1)
(IMPLIES (EQ t1 (update t0 j result)) (EQ (exchange t1 t i j) |@true|)))))))))))))))))

;; maximum_po_1, Why obligation from file "", line 0, characters 0-0:
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t))
         (EQ (Maximize t n (select t i) k) |@true|))))
(IMPLIES (EQ k 0)
(AND (AND (<= 0 i) (<= i n)) (EQ (Maximize t n (select t i) 0) |@true|))))))))

;; maximum_po_2, Why obligation from file "", line 0, characters 0-0:
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t))
         (EQ (Maximize t n (select t i) k) |@true|))))
(IMPLIES (NEQ k 0) (AND (<= 0 (- k 1)) (< (- k 1) (array_length t)))))))))

;; maximum_po_3, Why obligation from file "", line 0, characters 0-0:
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t))
         (EQ (Maximize t n (select t i) k) |@true|))))
(IMPLIES (NEQ k 0)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (select t (- k 1)))
(AND (<= 0 i) (< i (array_length t))))))))))))

;; maximum_po_4, Why obligation from file "", line 0, characters 0-0:
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t))
         (EQ (Maximize t n (select t i) k) |@true|))))
(IMPLIES (NEQ k 0)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (select t (- k 1)))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select t i))
(IMPLIES (> result result0) (AND (<= 0 k) (< (- k 1) k)))))))))))))))

;; maximum_po_5, Why obligation from file "", line 0, characters 0-0:
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t))
         (EQ (Maximize t n (select t i) k) |@true|))))
(IMPLIES (NEQ k 0)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (select t (- k 1)))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select t i))
(IMPLIES (> result result0)
(IMPLIES (AND (<= 0 k) (< (- k 1) k))
(AND (AND (<= 0 (- k 1)) (<= (- k 1) (- k 1)))
(AND (<= (- k 1) n)
(AND (< n (array_length t))
(EQ (Maximize t n (select t (- k 1)) (- k 1)) |@true|))))))))))))))))))

;; maximum_po_6, Why obligation from file "", line 0, characters 0-0:
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t))
         (EQ (Maximize t n (select t i) k) |@true|))))
(IMPLIES (NEQ k 0)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (select t (- k 1)))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select t i))
(IMPLIES (<= result result0) (AND (<= 0 k) (< (- k 1) k)))))))))))))))

;; maximum_po_7, Why obligation from file "", line 0, characters 0-0:
(FORALL (n)
(FORALL (k)
(FORALL (i)
(FORALL (t)
(IMPLIES (AND (AND (<= 0 k) (<= k i))
         (AND (<= i n)
         (AND (< n (array_length t))
         (EQ (Maximize t n (select t i) k) |@true|))))
(IMPLIES (NEQ k 0)
(IMPLIES (AND (<= 0 (- k 1)) (< (- k 1) (array_length t)))
(FORALL (result)
(IMPLIES (EQ result (select t (- k 1)))
(IMPLIES (AND (<= 0 i) (< i (array_length t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select t i))
(IMPLIES (<= result result0)
(IMPLIES (AND (<= 0 k) (< (- k 1) k))
(AND (AND (<= 0 (- k 1)) (<= (- k 1) i))
(AND (<= i n)
(AND (< n (array_length t)) (EQ (Maximize t n (select t i) (- k 1)) |@true|))))))))))))))))))

;; maxisort_po_1, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 0 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(AND (AND (<= 0 (+ (- result 1) 1)) (<= (+ (- result 1) 1) (array_length t)))
(AND (EQ (sorted_array t (+ (- result 1) 1) (- (array_length t) 1)) |@true|)
(AND (EQ (permut t t) |@true|)
(IMPLIES (< (+ (- result 1) 1) (array_length t))
(EQ (Maximize t (- result 1) (select t (+ (- result 1) 1)) 0) |@true|)))))))))

;; maxisort_po_2, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 0 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(IMPLIES (AND
         (AND (<= 0 (+ (- result 1) 1))
         (<= (+ (- result 1) 1) (array_length t)))
         (AND
         (EQ (sorted_array t (+ (- result 1) 1)
         (- (array_length t) 1)) |@true|)
         (AND (EQ (permut t t) |@true|)
         (IMPLIES (< (+ (- result 1) 1) (array_length t))
         (EQ (Maximize t (- result 1) (select t (+ (- result 1) 1))
         0) |@true|)))))
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 (+ i 1)) (<= (+ i 1) (array_length t0)))
         (AND (EQ (sorted_array t0 (+ i 1) (- (array_length t0) 1)) |@true|)
         (AND (EQ (permut t0 t) |@true|)
         (IMPLIES (< (+ i 1) (array_length t0))
         (EQ (Maximize t0 i (select t0 (+ i 1)) 0) |@true|)))))
(IMPLIES (>= i 0)
(AND (AND (<= 0 i) (<= i i))
(AND (<= i i)
(AND (< i (array_length t0)) (EQ (Maximize t0 i (select t0 i) i) |@true|)))))))))))))

;; maxisort_po_3, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 0 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(IMPLIES (AND
         (AND (<= 0 (+ (- result 1) 1))
         (<= (+ (- result 1) 1) (array_length t)))
         (AND
         (EQ (sorted_array t (+ (- result 1) 1)
         (- (array_length t) 1)) |@true|)
         (AND (EQ (permut t t) |@true|)
         (IMPLIES (< (+ (- result 1) 1) (array_length t))
         (EQ (Maximize t (- result 1) (select t (+ (- result 1) 1))
         0) |@true|)))))
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 (+ i 1)) (<= (+ i 1) (array_length t0)))
         (AND (EQ (sorted_array t0 (+ i 1) (- (array_length t0) 1)) |@true|)
         (AND (EQ (permut t0 t) |@true|)
         (IMPLIES (< (+ i 1) (array_length t0))
         (EQ (Maximize t0 i (select t0 (+ i 1)) 0) |@true|)))))
(IMPLIES (>= i 0)
(IMPLIES (AND (AND (<= 0 i) (<= i i))
         (AND (<= i i)
         (AND (< i (array_length t0))
         (EQ (Maximize t0 i (select t0 i) i) |@true|))))
(FORALL (result0)
(IMPLIES (AND (AND (<= 0 result0) (<= result0 i))
         (EQ (Maximize t0 i (select t0 result0) 0) |@true|))
(AND (AND (<= 0 i) (< i (array_length t0)))
(AND (<= 0 result0) (< result0 (array_length t0))))))))))))))))

;; maxisort_po_4, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 0 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(IMPLIES (AND
         (AND (<= 0 (+ (- result 1) 1))
         (<= (+ (- result 1) 1) (array_length t)))
         (AND
         (EQ (sorted_array t (+ (- result 1) 1)
         (- (array_length t) 1)) |@true|)
         (AND (EQ (permut t t) |@true|)
         (IMPLIES (< (+ (- result 1) 1) (array_length t))
         (EQ (Maximize t (- result 1) (select t (+ (- result 1) 1))
         0) |@true|)))))
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 (+ i 1)) (<= (+ i 1) (array_length t0)))
         (AND (EQ (sorted_array t0 (+ i 1) (- (array_length t0) 1)) |@true|)
         (AND (EQ (permut t0 t) |@true|)
         (IMPLIES (< (+ i 1) (array_length t0))
         (EQ (Maximize t0 i (select t0 (+ i 1)) 0) |@true|)))))
(IMPLIES (>= i 0)
(IMPLIES (AND (AND (<= 0 i) (<= i i))
         (AND (<= i i)
         (AND (< i (array_length t0))
         (EQ (Maximize t0 i (select t0 i) i) |@true|))))
(FORALL (result0)
(IMPLIES (AND (AND (<= 0 result0) (<= result0 i))
         (EQ (Maximize t0 i (select t0 result0) 0) |@true|))
(IMPLIES (AND (AND (<= 0 i) (< i (array_length t0)))
         (AND (<= 0 result0) (< result0 (array_length t0))))
(FORALL (t1)
(IMPLIES (EQ (exchange t1 t0 i result0) |@true|)
(FORALL (i0)
(IMPLIES (EQ i0 (- i 1))
(AND
(AND (AND (<= 0 (+ i0 1)) (<= (+ i0 1) (array_length t1)))
(AND (EQ (sorted_array t1 (+ i0 1) (- (array_length t1) 1)) |@true|)
(AND (EQ (permut t1 t) |@true|)
(IMPLIES (< (+ i0 1) (array_length t1))
(EQ (Maximize t1 i0 (select t1 (+ i0 1)) 0) |@true|)))))
(AND (<= 0 (+ i 1)) (< (+ i0 1) (+ i 1)))))))))))))))))))))

;; maxisort_po_5, Why obligation from file "", line 0, characters 0-0:
(FORALL (t)
(IMPLIES (<= 0 (array_length t))
(FORALL (result)
(IMPLIES (EQ result (array_length t))
(IMPLIES (AND
         (AND (<= 0 (+ (- result 1) 1))
         (<= (+ (- result 1) 1) (array_length t)))
         (AND
         (EQ (sorted_array t (+ (- result 1) 1)
         (- (array_length t) 1)) |@true|)
         (AND (EQ (permut t t) |@true|)
         (IMPLIES (< (+ (- result 1) 1) (array_length t))
         (EQ (Maximize t (- result 1) (select t (+ (- result 1) 1))
         0) |@true|)))))
(FORALL (i)
(FORALL (t0)
(IMPLIES (AND (AND (<= 0 (+ i 1)) (<= (+ i 1) (array_length t0)))
         (AND (EQ (sorted_array t0 (+ i 1) (- (array_length t0) 1)) |@true|)
         (AND (EQ (permut t0 t) |@true|)
         (IMPLIES (< (+ i 1) (array_length t0))
         (EQ (Maximize t0 i (select t0 (+ i 1)) 0) |@true|)))))
(IMPLIES (< i 0)
(AND (EQ (sorted_array t0 0 (- (array_length t0) 1)) |@true|)
(EQ (permut t0 t) |@true|)))))))))))

