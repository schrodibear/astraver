(* Load Programs. *)(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.


(* ----------- PRELIMINAIRES ------------- *)
(* dÃ©finition et propriÃ©tÃ©s de    *)
Require Import Omega.
Require Import ZArithRing.

Ltac Omega' := abstract omega.

Set Implicit Arguments.
Unset Strict Implicit.

(* Induction pour vÃ©rifier qu'on est le maximum *)
Inductive Maximize (t:array Z) (n m:Z) : Z -> Prop :=
    Maxim_cons :
      forall k:Z,
        ((k <= n)%Z -> (access t k <= m)%Z) ->
        ((k < n)%Z -> Maximize t n m (k + 1)%Z) -> Maximize t n m k.

(* Signification  de ce prÃ©dicat: *)
Lemma Maximize_ext1 :
 forall (t:array Z) (n m k i:Z),
   Maximize t n m k -> (k <= i <= n)%Z -> (access t i <= m)%Z.
  Proof.
  intros t n m k i H1; elim H1; auto.
  intros k0 H2 H3 HR H4; case (Z_eq_dec k0 i).
   intros H; rewrite <- H; apply H2; Omega'.
   intros; apply HR; Omega'.
Qed.

Lemma Maximize_ext2 :
 forall (t:array Z) (n m k:Z),
   (forall i:Z, (k <= i <= n)%Z -> (access t i <= m)%Z) ->
   Maximize t n m k.
  Proof.
  intros t n m k.
     refine
      (well_founded_ind _
         (fun k:Z =>
            (forall i:Z, (k <= i <= n)%Z -> (access t i <= m)%Z) ->
            Maximize t n m k) _ _).
     apply Zwf_up_well_founded.
     clear k; intros k HR H.
     constructor 1.
       intros; apply H; Omega'.
       intros; apply HR.
         unfold Zwf_up; Omega'.
         intros; apply H; Omega'.
Qed.

(* compatibilitÃ© de  avec  *)
Lemma Maximize_Zle :
 forall (t:array Z) (n m1 m2 k:Z),
   Maximize t n m1 k -> (k <= n)%Z -> (m1 <= m2)%Z -> Maximize t n m2 k.
  Proof.
  intros t n m1 m2 k H0; elim H0.
  intros k0 H1 H2 H3 H4 H5; constructor 1.
  Omega'.
 intros; apply H3; Omega'.
Qed.

Set Strict Implicit.
Unset Implicit Arguments.
(* ----------- FIN PRELIMINAIRES ----------- *)


(* DÃ©but: preuve de  *)
(* Why obligation from file , characters 206-210 *)
Lemma swap_po_1 :
 forall (i j:Z) (t:array Z)
   (Pre5:((0 <= i)%Z /\ (i < array_length t)%Z) /\
         (0 <= j)%Z /\ (j < array_length t)%Z)
   (Pre4:(0 <= i)%Z /\ (i < array_length t)%Z) (v:Z)
   (Post3:v = access t i) (Pre2:(0 <= i)%Z /\ (i < array_length t)%Z),
   (0 <= j)%Z /\ (j < array_length t)%Z.
Proof.
intuition ArraySubst t0.
Qed.

(* Why obligation from file , characters 217-226 *)
Lemma swap_po_2 :
 forall (i j:Z) (t:array Z)
   (Pre5:((0 <= i)%Z /\ (i < array_length t)%Z) /\
         (0 <= j)%Z /\ (j < array_length t)%Z)
   (Pre4:(0 <= i)%Z /\ (i < array_length t)%Z) (v:Z)
   (Post3:v = access t i) (Pre2:(0 <= i)%Z /\ (i < array_length t)%Z)
   (Pre3:(0 <= j)%Z /\ (j < array_length t)%Z) (t0:array Z)
   (Post1:t0 = store t i (access t j)),
   (0 <= j)%Z /\ (j < array_length t0)%Z.
Proof.
intros; ArraySubst t0; intuition.
Qed.

(* Why obligation from file , characters 187-233 *)
Lemma swap_po_3 :
 forall (i j:Z) (t:array Z)
   (Pre5:((0 <= i)%Z /\ (i < array_length t)%Z) /\
         (0 <= j)%Z /\ (j < array_length t)%Z)
   (Pre4:(0 <= i)%Z /\ (i < array_length t)%Z) (v:Z)
   (Post3:v = access t i) (Pre2:(0 <= i)%Z /\ (i < array_length t)%Z)
   (Pre3:(0 <= j)%Z /\ (j < array_length t)%Z) (t0:array Z)
   (Post1:t0 = store t i (access t j))
   (Pre1:(0 <= j)%Z /\ (j < array_length t0)%Z) (t1:array Z)
   (Post2:t1 = store t0 j v), exchange t1 t i j.
 Proof.
 intros; subst t1 t0 v; auto with datatypes.
Qed.

(* Fin: preuve de  *)


(* DÃ©but: preuve de  *)

(* Why obligation from file , characters 602-603 *)
Lemma maximum_po_1 :
 forall (n k i:Z) (t:array Z)
   (Pre20:((0 <= k)%Z /\ (k <= i)%Z) /\
          (i <= n)%Z /\
          (n < array_length t)%Z /\ Maximize t n (access t i) k)
   (Variant1 n0 k0 i0:Z) (Pre19:Variant1 = k0)
   (Pre18:((0 <= k0)%Z /\ (k0 <= i0)%Z) /\
          (i0 <= n0)%Z /\
          (n0 < array_length t)%Z /\ Maximize t n0 (access t i0) k0)
   (Test4:k0 = 0%Z),
   ((0 <= i0)%Z /\ (i0 <= n0)%Z) /\ Maximize t n0 (access t i0) 0.
  Proof.
  intros; split.
  Omega'.
  rewrite Test4 in Pre18; tauto.
Qed.

(* Why obligation from file , characters 637-642 *)
Lemma maximum_po_2 :
 forall (n k i:Z) (t:array Z)
   (Pre20:((0 <= k)%Z /\ (k <= i)%Z) /\
          (i <= n)%Z /\
          (n < array_length t)%Z /\ Maximize t n (access t i) k)
   (Variant1 n0 k0 i0:Z) (Pre19:Variant1 = k0)
   (Pre18:((0 <= k0)%Z /\ (k0 <= i0)%Z) /\
          (i0 <= n0)%Z /\
          (n0 < array_length t)%Z /\ Maximize t n0 (access t i0) k0)
   (Test3:k0 <> 0%Z) (nk:Z) (Post3:nk = (k0 - 1)%Z),
   (0 <= nk)%Z /\ (nk < array_length t)%Z.
   Proof.
   intros; Omega'.
Qed.

(* Why obligation from file , characters 643-647 *)
Lemma maximum_po_3 :
 forall (n k i:Z) (t:array Z)
   (Pre20:((0 <= k)%Z /\ (k <= i)%Z) /\
          (i <= n)%Z /\
          (n < array_length t)%Z /\ Maximize t n (access t i) k)
   (Variant1 n0 k0 i0:Z) (Pre19:Variant1 = k0)
   (Pre18:((0 <= k0)%Z /\ (k0 <= i0)%Z) /\
          (i0 <= n0)%Z /\
          (n0 < array_length t)%Z /\ Maximize t n0 (access t i0) k0)
   (Test3:k0 <> 0%Z) (nk:Z) (Post3:nk = (k0 - 1)%Z)
   (Pre16:(0 <= nk)%Z /\ (nk < array_length t)%Z),
   (0 <= i0)%Z /\ (i0 < array_length t)%Z.
  Proof.
  intros; Omega'.
Qed.

(* Why obligation from file , characters 656-675 *)
Lemma maximum_po_4 :
 forall (n k i:Z) (t:array Z)
   (Pre20:((0 <= k)%Z /\ (k <= i)%Z) /\
          (i <= n)%Z /\
          (n < array_length t)%Z /\ Maximize t n (access t i) k)
   (Variant1 n0 k0 i0:Z) (Pre19:Variant1 = k0)
   (Pre18:((0 <= k0)%Z /\ (k0 <= i0)%Z) /\
          (i0 <= n0)%Z /\
          (n0 < array_length t)%Z /\ Maximize t n0 (access t i0) k0)
   (Test3:k0 <> 0%Z) (nk:Z) (Post3:nk = (k0 - 1)%Z)
   (Pre16:(0 <= nk)%Z /\ (nk < array_length t)%Z)
   (Pre17:(0 <= i0)%Z /\ (i0 < array_length t)%Z)
   (Test2:(access t nk > access t i0)%Z),
   ((0 <= nk)%Z /\ (nk <= nk)%Z) /\
   (nk <= n0)%Z /\
   (n0 < array_length t)%Z /\ Maximize t n0 (access t nk) nk.
Proof.
repeat (split; [ Omega' | auto ]).
subst nk.
ring (k0 - 1 + 1)%Z; intros;
 apply Maximize_Zle with (m1 := access t i0); Omega' || tauto.
Qed.

(* Why obligation from file , characters 503-756 *)
Lemma maximum_po_5 :
 forall (n k i:Z) (t:array Z)
   (Pre20:((0 <= k)%Z /\ (k <= i)%Z) /\
          (i <= n)%Z /\
          (n < array_length t)%Z /\ Maximize t n (access t i) k)
   (Variant1 n0 k0 i0:Z) (Pre19:Variant1 = k0)
   (Pre18:((0 <= k0)%Z /\ (k0 <= i0)%Z) /\
          (i0 <= n0)%Z /\
          (n0 < array_length t)%Z /\ Maximize t n0 (access t i0) k0)
   (Test3:k0 <> 0%Z) (nk:Z) (Post3:nk = (k0 - 1)%Z)
   (Pre16:(0 <= nk)%Z /\ (nk < array_length t)%Z)
   (Pre17:(0 <= i0)%Z /\ (i0 < array_length t)%Z)
   (Test2:(access t nk > access t i0)%Z)
   (Pre15 Pre13
    Pre14:((0 <= nk)%Z /\ (nk <= nk)%Z) /\
          (nk <= n0)%Z /\
          (n0 < array_length t)%Z /\ Maximize t n0 (access t nk) nk),
   Zwf 0 nk Variant1.
  Proof.
  intros; subst nk; unfold Zwf; Omega'.
  Qed.

(* Why obligation from file , characters 684-702 *)
Lemma maximum_po_6 :
 forall (n k i:Z) (t:array Z)
   (Pre20:((0 <= k)%Z /\ (k <= i)%Z) /\
          (i <= n)%Z /\
          (n < array_length t)%Z /\ Maximize t n (access t i) k)
   (Variant1 n0 k0 i0:Z) (Pre19:Variant1 = k0)
   (Pre18:((0 <= k0)%Z /\ (k0 <= i0)%Z) /\
          (i0 <= n0)%Z /\
          (n0 < array_length t)%Z /\ Maximize t n0 (access t i0) k0)
   (Test3:k0 <> 0%Z) (nk:Z) (Post3:nk = (k0 - 1)%Z)
   (Pre16:(0 <= nk)%Z /\ (nk < array_length t)%Z)
   (Pre17:(0 <= i0)%Z /\ (i0 < array_length t)%Z)
   (Test1:(access t nk <= access t i0)%Z),
   ((0 <= nk)%Z /\ (nk <= i0)%Z) /\
   (i0 <= n0)%Z /\
   (n0 < array_length t)%Z /\ Maximize t n0 (access t i0) nk.
  Proof.
  intros; subst nk.
  repeat (split; [ Omega' | auto ]); ring (k0 - 1 + 1)%Z; tauto.
Qed.

(* Why obligation from file , characters 503-756 *)
Lemma maximum_po_7 :
 forall (n k i:Z) (t:array Z)
   (Pre20:((0 <= k)%Z /\ (k <= i)%Z) /\
          (i <= n)%Z /\
          (n < array_length t)%Z /\ Maximize t n (access t i) k)
   (Variant1 n0 k0 i0:Z) (Pre19:Variant1 = k0)
   (Pre18:((0 <= k0)%Z /\ (k0 <= i0)%Z) /\
          (i0 <= n0)%Z /\
          (n0 < array_length t)%Z /\ Maximize t n0 (access t i0) k0)
   (Test3:k0 <> 0%Z) (nk:Z) (Post3:nk = (k0 - 1)%Z)
   (Pre16:(0 <= nk)%Z /\ (nk < array_length t)%Z)
   (Pre17:(0 <= i0)%Z /\ (i0 < array_length t)%Z)
   (Test1:(access t nk <= access t i0)%Z)
   (Pre11 Pre9
    Pre10:((0 <= nk)%Z /\ (nk <= i0)%Z) /\
          (i0 <= n0)%Z /\
          (n0 < array_length t)%Z /\ Maximize t n0 (access t i0) nk),
   Zwf 0 nk Variant1.
  Proof.
  intros; subst nk.
  unfold Zwf; Omega'.
  Qed.


(* fin preuve de maximum *)

(* Why obligation from file , characters 1131-1151 *)
Lemma maxisort_po_1 :
 forall (t:array Z) (Pre10:(0 <= array_length t)%Z) (i:Z)
   (Post3:i = (array_length t - 1)%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre9:Variant1 = (i1 + 1)%Z)
   (Pre8:((0 <= i1 + 1)%Z /\ (i1 + 1 <= array_length t0)%Z) /\
         sorted_array t0 (i1 + 1) (array_length t0 - 1) /\
         permut t0 t /\
         ((i1 + 1 < array_length t0)%Z ->
          Maximize t0 i1 (access t0 (i1 + 1)) 0)) (Test2:(i1 >= 0)%Z),
   ((0 <= i1)%Z /\ (i1 <= i1)%Z) /\
   (i1 <= i1)%Z /\
   (i1 < array_length t0)%Z /\ Maximize t0 i1 (access t0 i1) i1.
  Proof.
  intros; split.
 Omega'.
 split.
 Omega'.
 split.
 Omega'.
  constructor 1.
 Omega'.
  intros H; absurd (i1 < i1)%Z; Omega'.
Qed.

(* Why obligation from file , characters 1163-1176 *)
Lemma maxisort_po_2 :
 forall (t:array Z) (Pre10:(0 <= array_length t)%Z) (i:Z)
   (Post3:i = (array_length t - 1)%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre9:Variant1 = (i1 + 1)%Z)
   (Pre8:((0 <= i1 + 1)%Z /\ (i1 + 1 <= array_length t0)%Z) /\
         sorted_array t0 (i1 + 1) (array_length t0 - 1) /\
         permut t0 t /\
         ((i1 + 1 < array_length t0)%Z ->
          Maximize t0 i1 (access t0 (i1 + 1)) 0)) (Test2:(i1 >= 0)%Z)
   (Pre7:((0 <= i1)%Z /\ (i1 <= i1)%Z) /\
         (i1 <= i1)%Z /\
         (i1 < array_length t0)%Z /\ Maximize t0 i1 (access t0 i1) i1)
   (r:Z)
   (Post7:((0 <= r)%Z /\ (r <= i1)%Z) /\ Maximize t0 i1 (access t0 r) 0),
   ((0 <= i1)%Z /\ (i1 < array_length t0)%Z) /\
   (0 <= r)%Z /\ (r < array_length t0)%Z.
  Proof.
  intros; Omega'.
Qed.

(* Why obligation from file , characters 1123-1176 *)
Lemma maxisort_po_3 :
 forall (t:array Z) (Pre10:(0 <= array_length t)%Z) (i:Z)
   (Post3:i = (array_length t - 1)%Z) (Variant1 i1:Z) (t0:array Z)
   (Pre9:Variant1 = (i1 + 1)%Z)
   (Pre8:((0 <= i1 + 1)%Z /\ (i1 + 1 <= array_length t0)%Z) /\
         sorted_array t0 (i1 + 1) (array_length t0 - 1) /\
         permut t0 t /\
         ((i1 + 1 < array_length t0)%Z ->
          Maximize t0 i1 (access t0 (i1 + 1)) 0)) (Test2:(i1 >= 0)%Z)
   (Pre7:((0 <= i1)%Z /\ (i1 <= i1)%Z) /\
         (i1 <= i1)%Z /\
         (i1 < array_length t0)%Z /\ Maximize t0 i1 (access t0 i1) i1)
   (r:Z)
   (Post7:((0 <= r)%Z /\ (r <= i1)%Z) /\ Maximize t0 i1 (access t0 r) 0)
   (Pre6:((0 <= i1)%Z /\ (i1 < array_length t0)%Z) /\
         (0 <= r)%Z /\ (r < array_length t0)%Z) (t1:array Z)
   (Post9:exchange t1 t0 i1 r) (i:Z),
   i = (i1 - 1)%Z ->
   (((0 <= i + 1)%Z /\ (i + 1 <= array_length t1)%Z) /\
    sorted_array t1 (i + 1) (array_length t1 - 1) /\
    permut t1 t /\
    ((i + 1 < array_length t1)%Z -> Maximize t1 i (access t1 (i + 1)) 0)) /\
   Zwf 0 (i + 1) (i1 + 1).
 Proof.
 intros; decompose [and] Pre8; clear Pre8; split.
   ArrayLength.
   split.
   omega.
   split.
   (* post-condition 1 *)
   unfold sorted_array in H0; unfold sorted_array.
   intros C1 k C2 C3; case Post9.
    intros Clength C4 C5 C6 C7 C8.
     case (Z_eq_dec k i1).
       intros C9; rewrite C9; rewrite C6; rewrite C8; try Omega'.
       apply Maximize_ext1 with (n := i1) (k := 0%Z); try Omega'.
         apply H5; Omega'.
       intros C9; rewrite C8; try Omega'.
 rewrite C8; try Omega'.
       apply H0; try Omega'.
   (* post-condition 2 *)
   split.
 apply permut_trans with (t' := t0); auto.
   eapply exchange_is_permut; eauto.
   (* post-condition 3 *)
   decompose [and] Post7; clear Post7.
 case Post9; clear Post9.
   intros Clength C1 C2 C3 C4 C5 C5a; replace (i0 + 1)%Z with i1.
 rewrite C3.
     apply Maximize_ext2; intros i' C6.
     case (Z_eq_dec i' r).
       intros C7; rewrite C7; rewrite C4.
         apply Maximize_ext1 with (n := i1) (k := 0%Z); try Omega';
          auto.
       intros; rewrite C5; try Omega'.
         apply Maximize_ext1 with (n := i1) (k := 0%Z); try Omega';
          auto.
   omega.
   unfold Zwf; omega.
Qed.

(* Why obligation from file , characters 918-1093 *)
Lemma maxisort_po_4 :
 forall (t:array Z) (Pre10:(0 <= array_length t)%Z) (i:Z)
   (Post3:i = (array_length t - 1)%Z),
   ((0 <= i + 1)%Z /\ (i + 1 <= array_length t)%Z) /\
   sorted_array t (i + 1) (array_length t - 1) /\
   permut t t /\
   ((i + 1 < array_length t)%Z -> Maximize t i (access t (i + 1)) 0).
  Proof.
  intros; subst i; ring (array_length t - 1 + 1)%Z; split.
   Omega'.
  split.
 unfold sorted_array; intros H;
  absurd (array_length t <= array_length t - 1)%Z; [ Omega' | auto ].
  split.
 apply permut_refl.
  intros H; absurd (array_length t < array_length t)%Z;
   [ Omega' | auto ].
Qed.

(* Why obligation from file , characters 844-1201 *)
Lemma maxisort_po_5 :
 forall (t:array Z) (Pre10:(0 <= array_length t)%Z) (i:Z)
   (Post3:i = (array_length t - 1)%Z) (i1:Z) (t0:array Z)
   (Post2:(((0 <= i1 + 1)%Z /\ (i1 + 1 <= array_length t0)%Z) /\
           sorted_array t0 (i1 + 1) (array_length t0 - 1) /\
           permut t0 t /\
           ((i1 + 1 < array_length t0)%Z ->
            Maximize t0 i1 (access t0 (i1 + 1)) 0)) /\ (i1 < 0)%Z),
   sorted_array t0 0 (array_length t0 - 1) /\ permut t0 t.
  Proof.
  intros; cut ((i1 + 1)%Z = 0%Z);
   [ intros H; rewrite H in Post2; split; tauto | Omega' ].
Qed.


