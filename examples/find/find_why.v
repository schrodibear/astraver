(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require find_spec.
Require find_lemmas.
Require find_proofs.

Require Why.
Require Omega.

Lemma find_po_1 : 
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (well_founded ? (Zwf ZERO)).
Proof.
Auto with *.
Save.

Lemma find_po_2 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  `0 <= f` /\ `f < N + 1`.
Proof.
Intros; Generalize le_f_N; Generalize le_1_f; Omega.
Save.

Lemma find_po_3 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (well_founded ? (Zwf ZERO)).
Proof.
Auto with *.
Save.

Lemma find_po_4 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (well_founded ? (Zwf ZERO)).
Proof.
Auto with *.
Save.

Lemma find_po_5 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (Variant5: Z)
  (i1: Z)
  (Pre6: Variant5 = `N + 1 - i1`)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1))
  `0 <= i1` /\ `i1 < N + 1`.
Proof.
Intuition.
Unfold i_invariant in H13; Omega.
Save.

Lemma find_po_6 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (Variant5: Z)
  (i1: Z)
  (Pre6: Variant5 = `N + 1 - i1`)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1))
  (Test4: `(access A1 i1) < r`)
  (i2: Z)
  (Post6: i2 = `i1 + 1`)
  (i_invariant m0 n0 i2 r A1) /\ `i0 <= i2` /\ `i2 <= n0` /\
  (termination i2 j0 m0 n0 r A1) /\ (Zwf `0` `N + 1 - i2` `N + 1 - i1`).
Proof.
Intros. 
Subst r.
Subst i2.
Generalize (subgoal_1 m0 n0 i0 j0 i1 A A0 A1 
              Inv_mn Test14 zero_f_SN Inv_ij Test9 Inv_i Test4).
Intuition.
Unfold Zwf; Omega.
Save.

Lemma find_po_7 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (Variant5: Z)
  (i1: Z)
  (Pre6: Variant5 = `N + 1 - i1`)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1))
  (Test4: `(access A1 i1) < r`)
  (i2: Z)
  (Inv_i0: (i_invariant m0 n0 i2 r A1) /\ `i0 <= i2` /\ `i2 <= n0` /\
           (termination i2 j0 m0 n0 r A1) /\
           (Zwf `0` `N + 1 - i2` `N + 1 - i1`))
  (Zwf `0` `N + 1 - i2` Variant5).
Proof.
Intros; Rewrite Pre6; Tauto.
Save.

Lemma find_po_8 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (Variant5: Z)
  (i1: Z)
  (Pre6: Variant5 = `N + 1 - i1`)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1))
  (Test4: `(access A1 i1) < r`)
  (i2: Z)
  (Inv_i0: (i_invariant m0 n0 i2 r A1) /\ `i0 <= i2` /\ `i2 <= n0` /\
           (termination i2 j0 m0 n0 r A1) /\
           (Zwf `0` `N + 1 - i2` `N + 1 - i1`))
  (i_invariant m0 n0 i2 r A1) /\ `i0 <= i2` /\ `i2 <= n0` /\
  (termination i2 j0 m0 n0 r A1).
Proof.
Intuition.
Save.

Lemma find_po_9 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (Variant5: Z)
  (i1: Z)
  (Pre6: Variant5 = `N + 1 - i1`)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1))
  (Test3: `(access A1 i1) >= r`)
  (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
  (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`.
Proof.
Intuition.
Save.

Lemma find_po_10 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i_invariant m0 n0 i0 r A1) /\ `i0 <= i0` /\ `i0 <= n0` /\
  (termination i0 j0 m0 n0 r A1).
Proof.
Intuition.
Unfold j_invariant in H8; Unfold termination in H12; Omega.
Save.

Lemma find_po_11 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (well_founded ? (Zwf ZERO)).
Proof.
Auto with *.
Save.

Lemma find_po_12 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (Variant7: Z)
  (j1: Z)
  (Pre9: Variant7 = j1)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1))
  `0 <= j1` /\ `j1 < N + 1`.
Proof.
Intuition.
Unfold termination in H23; Unfold j_invariant in H18; Omega.
Save.

Lemma find_po_13 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (Variant7: Z)
  (j1: Z)
  (Pre9: Variant7 = j1)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1))
  (Test6: `r < (access A1 j1)`)
  (j2: Z)
  (Post7: j2 = `j1 - 1`)
  (j_invariant m0 n0 j2 r A1) /\ `j2 <= j0` /\ `m0 <= j2` /\
  (termination i1 j2 m0 n0 r A1) /\ (Zwf `0` j2 j1).
Proof.
Intros. 
Subst r.
Subst j2.
Generalize (subgoal_2 m0 n0 i0 j0 i1 j1 A A0 A1
                  Inv_mn Test14 zero_f_SN Inv_ij Test9 Inv_i 
                  Inv_j Test6).
Intuition.
Unfold Zwf; Omega.
Save.

Lemma find_po_14 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (Variant7: Z)
  (j1: Z)
  (Pre9: Variant7 = j1)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1))
  (Test6: `r < (access A1 j1)`)
  (j2: Z)
  (Inv_j0: (j_invariant m0 n0 j2 r A1) /\ `j2 <= j0` /\ `m0 <= j2` /\
           (termination i1 j2 m0 n0 r A1) /\ (Zwf `0` j2 j1))
  (Zwf `0` j2 Variant7).
Proof.
Intros; Rewrite Pre9; Tauto.
Save.

Lemma find_po_15 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (Variant7: Z)
  (j1: Z)
  (Pre9: Variant7 = j1)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1))
  (Test6: `r < (access A1 j1)`)
  (j2: Z)
  (Inv_j0: (j_invariant m0 n0 j2 r A1) /\ `j2 <= j0` /\ `m0 <= j2` /\
           (termination i1 j2 m0 n0 r A1) /\ (Zwf `0` j2 j1))
  (j_invariant m0 n0 j2 r A1) /\ `j2 <= j0` /\ `m0 <= j2` /\
  (termination i1 j2 m0 n0 r A1).
Proof.
Intuition.
Save.

Lemma find_po_16 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (Variant7: Z)
  (j1: Z)
  (Pre9: Variant7 = j1)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1))
  (Test5: `r >= (access A1 j1)`)
  (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
  (termination i1 j1 m0 n0 r A1) /\ `r >= (access A1 j1)`.
Proof.
Intuition.
Save.

Lemma find_po_17 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (j_invariant m0 n0 j0 r A1) /\ `j0 <= j0` /\ `m0 <= j0` /\
  (termination i1 j0 m0 n0 r A1).
Proof.
Intuition.
Unfold m_invariant in H7.
Unfold termination in H12.
Omega.
Save.

Lemma find_po_18 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (j1: Z)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1) /\ `r >= (access A1 j1)`)
  `(access A1 j1) <= r` /\ `r <= (access A1 i1)`.
Proof.
Intuition.
Save.

Lemma find_po_19 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (j1: Z)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1) /\ `r >= (access A1 j1)`)
  (Pre17: `(access A1 j1) <= r` /\ `r <= (access A1 i1)`)
  (Test8: `i1 <= j1`)
  `0 <= i1` /\ `i1 < N + 1`.
Proof.
Intuition.
Unfold i_invariant in H13; Omega.
Save.

Lemma find_po_20 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (j1: Z)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1) /\ `r >= (access A1 j1)`)
  (Pre17: `(access A1 j1) <= r` /\ `r <= (access A1 i1)`)
  (Test8: `i1 <= j1`)
  (Pre10: `0 <= i1` /\ `i1 < N + 1`)
  (w: Z)
  (Post8: w = (access A1 i1))
  `0 <= j1` /\ `j1 < N + 1`.
Proof.
Intuition.
Unfold termination in H26.
Unfold j_invariant in H18.
Omega.
Save.

Lemma find_po_21 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (j1: Z)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1) /\ `r >= (access A1 j1)`)
  (Pre17: `(access A1 j1) <= r` /\ `r <= (access A1 i1)`)
  (Test8: `i1 <= j1`)
  (Pre10: `0 <= i1` /\ `i1 < N + 1`)
  (w: Z)
  (Post8: w = (access A1 i1))
  (Pre11: `0 <= j1` /\ `j1 < N + 1`)
  (A2: (array `N + 1` Z))
  (Post9: A2 = (store A1 i1 (access A1 j1)))
  (A3: (array `N + 1` Z))
  (Post10: A3 = (store A2 j1 w))
  (exchange A3 A1 i1 j1) /\ (`(access A3 i1) <= r` /\
  (`r <= (access A3 j1)` /\
  ((i:Z)
   (i = `i1 + 1` ->
    ((j:Z)
     (j = `j1 - 1` -> (i_invariant m0 n0 i r A3) /\
      (j_invariant m0 n0 j r A3) /\ (m_invariant m0 A3) /\
      (n_invariant n0 A3) /\ `0 <= j` /\ `i <= N + 1` /\
      (termination i j m0 n0 r A3) /\ (permut A3 A) /\
      (Zwf `0` `N + 2 + j - i` `N + 2 + j0 - i0`))))))).
Proof.
Intros.
Subst r.
Assert H:(exchange A3 A1 i1 j1).
Subst A3. Subst A2. Subst w.
Auto with datatypes.
Split. Assumption.
Assert H0:`(access A3 i1) <= (access A0 f)`.
Elim H; Intros; Rewrite H2; Omega.
Split. Assumption.
Assert H1:`(access A0 f) <= (access A3 j1)`.
Elim H; Intros; Rewrite H4; Omega.
Split. Assumption.
Intros.
Subst i.
Subst j.
Generalize (subgoal_3 m0 n0 i0 j0 i1 j1 A A0 A1 A3 Inv_mn Test14 
  zero_f_SN Inv_ij 
  Test9 Inv_i Inv_j Pre17 Test8 H H0 H1).
Intuition.
Save.

Lemma find_po_22 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (j1: Z)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1) /\ `r >= (access A1 j1)`)
  (Pre17: `(access A1 j1) <= r` /\ `r <= (access A1 i1)`)
  (Test8: `i1 <= j1`)
  (A2: (array `N + 1` Z))
  (Post28: (exchange A2 A1 i1 j1) /\ (`(access A2 i1) <= r` /\
           (`r <= (access A2 j1)` /\
           ((i:Z)
            (i = `i1 + 1` ->
             ((j:Z)
              (j = `j1 - 1` -> (i_invariant m0 n0 i r A2) /\
               (j_invariant m0 n0 j r A2) /\ (m_invariant m0 A2) /\
               (n_invariant n0 A2) /\ `0 <= j` /\ `i <= N + 1` /\
               (termination i j m0 n0 r A2) /\ (permut A2 A) /\
               (Zwf `0` `N + 2 + j - i` `N + 2 + j0 - i0`))))))))
  (exchange A2 A1 i1 j1).
Proof.
Intuition.
Save.

Lemma find_po_23 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (j1: Z)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1) /\ `r >= (access A1 j1)`)
  (Pre17: `(access A1 j1) <= r` /\ `r <= (access A1 i1)`)
  (Test8: `i1 <= j1`)
  (A2: (array `N + 1` Z))
  (Post28: (exchange A2 A1 i1 j1) /\ (`(access A2 i1) <= r` /\
           (`r <= (access A2 j1)` /\
           ((i:Z)
            (i = `i1 + 1` ->
             ((j:Z)
              (j = `j1 - 1` -> (i_invariant m0 n0 i r A2) /\
               (j_invariant m0 n0 j r A2) /\ (m_invariant m0 A2) /\
               (n_invariant n0 A2) /\ `0 <= j` /\ `i <= N + 1` /\
               (termination i j m0 n0 r A2) /\ (permut A2 A) /\
               (Zwf `0` `N + 2 + j - i` `N + 2 + j0 - i0`))))))))
  (Pre16: (exchange A2 A1 i1 j1))
  `(access A2 i1) <= r`.
Proof.
Intuition.
Save.

Lemma find_po_24 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (j1: Z)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1) /\ `r >= (access A1 j1)`)
  (Pre17: `(access A1 j1) <= r` /\ `r <= (access A1 i1)`)
  (Test8: `i1 <= j1`)
  (A2: (array `N + 1` Z))
  (Post28: (exchange A2 A1 i1 j1) /\ (`(access A2 i1) <= r` /\
           (`r <= (access A2 j1)` /\
           ((i:Z)
            (i = `i1 + 1` ->
             ((j:Z)
              (j = `j1 - 1` -> (i_invariant m0 n0 i r A2) /\
               (j_invariant m0 n0 j r A2) /\ (m_invariant m0 A2) /\
               (n_invariant n0 A2) /\ `0 <= j` /\ `i <= N + 1` /\
               (termination i j m0 n0 r A2) /\ (permut A2 A) /\
               (Zwf `0` `N + 2 + j - i` `N + 2 + j0 - i0`))))))))
  (Pre16: (exchange A2 A1 i1 j1))
  (Pre15: `(access A2 i1) <= r`)
  `r <= (access A2 j1)`.
Proof.
Intuition.
Save.

Lemma find_po_25 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (j1: Z)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1) /\ `r >= (access A1 j1)`)
  (Pre17: `(access A1 j1) <= r` /\ `r <= (access A1 i1)`)
  (Test8: `i1 <= j1`)
  (A2: (array `N + 1` Z))
  (Post28: (exchange A2 A1 i1 j1) /\ (`(access A2 i1) <= r` /\
           (`r <= (access A2 j1)` /\
           ((i:Z)
            (i = `i1 + 1` ->
             ((j:Z)
              (j = `j1 - 1` -> (i_invariant m0 n0 i r A2) /\
               (j_invariant m0 n0 j r A2) /\ (m_invariant m0 A2) /\
               (n_invariant n0 A2) /\ `0 <= j` /\ `i <= N + 1` /\
               (termination i j m0 n0 r A2) /\ (permut A2 A) /\
               (Zwf `0` `N + 2 + j - i` `N + 2 + j0 - i0`))))))))
  (Pre16: (exchange A2 A1 i1 j1))
  (Pre15: `(access A2 i1) <= r`)
  (Pre14: `r <= (access A2 j1)`)
  (i2: Z)
  (Post11: i2 = `i1 + 1`)
  (j2: Z)
  (Post12: j2 = `j1 - 1`)
  (i_invariant m0 n0 i2 r A2) /\ (j_invariant m0 n0 j2 r A2) /\
  (m_invariant m0 A2) /\ (n_invariant n0 A2) /\ `0 <= j2` /\ `i2 <= N + 1` /\
  (termination i2 j2 m0 n0 r A2) /\ (permut A2 A) /\
  (Zwf `0` `N + 2 + j2 - i2` `N + 2 + j0 - i0`).
Proof.
Intuition.
Save.

Lemma find_po_26 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (i1: Z)
  (Inv_i: (i_invariant m0 n0 i1 r A1) /\ `i0 <= i1` /\ `i1 <= n0` /\
          (termination i1 j0 m0 n0 r A1) /\ `(access A1 i1) >= r`)
  (j1: Z)
  (Inv_j: (j_invariant m0 n0 j1 r A1) /\ `j1 <= j0` /\ `m0 <= j1` /\
          (termination i1 j1 m0 n0 r A1) /\ `r >= (access A1 j1)`)
  (Pre17: `(access A1 j1) <= r` /\ `r <= (access A1 i1)`)
  (Test7: `i1 > j1`)
  (i_invariant m0 n0 i1 r A1) /\ (j_invariant m0 n0 j1 r A1) /\
  (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j1` /\ `i1 <= N + 1` /\
  (termination i1 j1 m0 n0 r A1) /\ (permut A1 A) /\
  (Zwf `0` `N + 2 + j1 - i1` `N + 2 + j0 - i0`).
Proof.
Intuition.
Unfold Zwf; Omega.
Save.

Lemma find_po_27 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (A2: (array `N + 1` Z))
  (i1: Z)
  (j1: Z)
  (Inv_ij0: (i_invariant m0 n0 i1 r A2) /\ (j_invariant m0 n0 j1 r A2) /\
            (m_invariant m0 A2) /\ (n_invariant n0 A2) /\ `0 <= j1` /\
            `i1 <= N + 1` /\ (termination i1 j1 m0 n0 r A2) /\
            (permut A2 A) /\ (Zwf `0` `N + 2 + j1 - i1` `N + 2 + j0 - i0`))
  (Zwf `0` `N + 2 + j1 - i1` Variant3).
Proof.
Intros; Rewrite Pre18; Tauto.
Save.

Lemma find_po_28 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test9: `i0 <= j0`)
  (A2: (array `N + 1` Z))
  (i1: Z)
  (j1: Z)
  (Inv_ij0: (i_invariant m0 n0 i1 r A2) /\ (j_invariant m0 n0 j1 r A2) /\
            (m_invariant m0 A2) /\ (n_invariant n0 A2) /\ `0 <= j1` /\
            `i1 <= N + 1` /\ (termination i1 j1 m0 n0 r A2) /\
            (permut A2 A) /\ (Zwf `0` `N + 2 + j1 - i1` `N + 2 + j0 - i0`))
  (i_invariant m0 n0 i1 r A2) /\ (j_invariant m0 n0 j1 r A2) /\
  (m_invariant m0 A2) /\ (n_invariant n0 A2) /\ `0 <= j1` /\ `i1 <= N + 1` /\
  (termination i1 j1 m0 n0 r A2) /\ (permut A2 A).
Proof.
Intuition.
Save.

Lemma find_po_29 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (Variant3: Z)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Pre18: Variant3 = `N + 2 + j0 - i0`)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\ (permut A1 A))
  (Test2: `i0 > j0`)
  (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
  (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\ `i0 <= N + 1` /\
  (termination i0 j0 m0 n0 r A1) /\ (permut A1 A) /\ `i0 > j0`.
Proof.
Intuition.
Save.

Lemma find_po_30 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (i_invariant m0 n0 result2 r A0) /\ (j_invariant m0 n0 result3 r A0) /\
  (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ `0 <= result3` /\
  `result2 <= N + 1` /\ (termination result2 result3 m0 n0 r A0) /\
  (permut A0 A).
Proof.
Intros; Subst r; Subst result2; Subst result3; Intuition.
Apply Lemma_4_14; Auto.
Elim H; Elim H3; Omega.
Apply Lemma_5_14'; Auto.
Elim H; Elim H3; Omega.
Unfold termination; Right; Elim H; Elim H3; Intros; Split.
Omega.
Auto.
Save.

Lemma find_po_31 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\
           (permut A1 A) /\ `i0 > j0`)
  `m0 < i0` /\ `j0 < n0`.
Proof.
Intuition (Elim H12; Omega).
Save.

Lemma find_po_32 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\
           (permut A1 A) /\ `i0 > j0`)
  (Pre19: `m0 < i0` /\ `j0 < n0`)
  (Test13: `f <= j0`)
  (n1: Z)
  (Post16: n1 = j0)
  (m_invariant m0 A1) /\ (n_invariant n1 A1) /\ (permut A1 A) /\ `1 <= m0` /\
  `n1 <= N` /\ (Zwf `0` `n1 - m0` `n0 - m0`).
Proof.
Intros; Subst n1; Subst r.
Generalize (subgoal_5 m0 n0 i0 j0 A A0 A1 
                 Inv_mn Test14 Pre2 Inv_ij Pre19 Test13).
Intuition.
Save.

Lemma find_po_33 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\
           (permut A1 A) /\ `i0 > j0`)
  (Pre19: `m0 < i0` /\ `j0 < n0`)
  (Test12: `f > j0`)
  (Test11: `i0 <= f`)
  (m1: Z)
  (Post15: m1 = i0)
  (m_invariant m1 A1) /\ (n_invariant n0 A1) /\ (permut A1 A) /\ `1 <= m1` /\
  `n0 <= N` /\ (Zwf `0` `n0 - m1` `n0 - m0`).
Proof.
Intros; Subst m1; Subst r.
Generalize (subgoal_6 m0 n0 i0 j0 A A0 A1
                 Inv_mn Test14 Pre2 Inv_ij Pre19 Test12 Test11).
Intuition.
Save.

Lemma find_po_34 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (Pre2: `0 <= f` /\ `f < N + 1`)
  (r: Z)
  (Post3: r = (access A0 f))
  (result2: Z)
  (Post4: result2 = m0)
  (result3: Z)
  (Post5: result3 = n0)
  (A1: (array `N + 1` Z))
  (i0: Z)
  (j0: Z)
  (Inv_ij: (i_invariant m0 n0 i0 r A1) /\ (j_invariant m0 n0 j0 r A1) /\
           (m_invariant m0 A1) /\ (n_invariant n0 A1) /\ `0 <= j0` /\
           `i0 <= N + 1` /\ (termination i0 j0 m0 n0 r A1) /\
           (permut A1 A) /\ `i0 > j0`)
  (Pre19: `m0 < i0` /\ `j0 < n0`)
  (Test12: `f > j0`)
  (Test10: `i0 > f`)
  (n1: Z)
  (Post13: n1 = f)
  (m1: Z)
  (Post14: m1 = f)
  (m_invariant m1 A1) /\ (n_invariant n1 A1) /\ (permut A1 A) /\ `1 <= m1` /\
  `n1 <= N` /\ (Zwf `0` `n1 - m1` `n0 - m0`).
Proof.
Intros; Subst n1; Subst m1; Subst r.
Generalize (subgoal_7 m0 n0 i0 j0 A A0 A1
                 Inv_mn Test14 Pre2 Inv_ij Pre19 Test12 Test10).
Intuition.
Save.

Lemma find_po_35 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (A1: (array `N + 1` Z))
  (m1: Z)
  (n1: Z)
  (Inv_mn0: (m_invariant m1 A1) /\ (n_invariant n1 A1) /\ (permut A1 A) /\
            `1 <= m1` /\ `n1 <= N` /\ (Zwf `0` `n1 - m1` `n0 - m0`))
  (Zwf `0` `n1 - m1` Variant1).
Proof.
Intros; Rewrite Pre20; Tauto.
Save.

Lemma find_po_36 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test14: `m0 < n0`)
  (A1: (array `N + 1` Z))
  (m1: Z)
  (n1: Z)
  (Inv_mn0: (m_invariant m1 A1) /\ (n_invariant n1 A1) /\ (permut A1 A) /\
            `1 <= m1` /\ `n1 <= N` /\ (Zwf `0` `n1 - m1` `n0 - m0`))
  (m_invariant m1 A1) /\ (n_invariant n1 A1) /\ (permut A1 A) /\ `1 <= m1` /\
  `n1 <= N`.
Proof.
Intuition.
Save.

Lemma find_po_37 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (Variant1: Z)
  (A0: (array `N + 1` Z))
  (m0: Z)
  (n0: Z)
  (Pre20: Variant1 = `n0 - m0`)
  (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\ (permut A0 A) /\
           `1 <= m0` /\ `n0 <= N`)
  (Test1: `m0 >= n0`)
  (found A0) /\ (permut A0 A).
Proof.
Intuition.
Apply Lemma_3 with m:=m0 n:=n0; Auto.
Save.

Lemma find_po_38 : 
  (A: (array `N + 1` Z))
  (result: Z)
  (Post1: result = `1`)
  (result0: Z)
  (Post2: result0 = N)
  (m_invariant result A) /\ (n_invariant result0 A) /\ (permut A A) /\
  `1 <= result` /\ `result0 <= N`.
Proof.
Intuition.
Subst result; Exact (Lemma_1 A).
Subst result0; Exact (Lemma_2 A).
Save.

Definition find := (* validation *)
  [A: (array `N + 1` Z)]
    let (result, Post1) = (exist_1 [result: Z]result = `1` `1`
      (refl_equal ? `1`)) in
    let (A0, m0, result0) =
      let (result0, Post2) = (exist_1 [result0: Z]result0 = N N
        (refl_equal ? N)) in
      let (A0, m0, n0, result1, Post20) =
        (well_founded_induction Z (Zwf ZERO)
          (find_po_1 result Post1 result0 Post2) [Variant1: Z]
          (A0: (array `N + 1` Z))(m0: Z)(n0: Z)(_: Variant1 = `n0 - m0`)
          (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\
          (permut A0 A) /\ `1 <= m0` /\ `n0 <= N`)
          (sig_4 (array `N + 1` Z) Z Z unit [A1: (array `N + 1` Z)][m1: Z]
           [n1: Z][result1: unit]((found A1) /\ (permut A1 A)))
          [Variant1: Z; wf1: (Variant2: Z)(Pre1: (Zwf `0` Variant2 Variant1))
           (A0: (array `N + 1` Z))(m0: Z)(n0: Z)(_: Variant2 = `n0 - m0`)
           (Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\
           (permut A0 A) /\ `1 <= m0` /\ `n0 <= N`)
           (sig_4 (array `N + 1` Z) Z Z unit [A1: (array `N + 1` Z)][m1: Z]
            [n1: Z][result1: unit]((found A1) /\ (permut A1 A)));
           A0: (array `N + 1` Z); m0: Z; n0: Z; Pre20: Variant1 = `n0 - m0`;
           Inv_mn: (m_invariant m0 A0) /\ (n_invariant n0 A0) /\
           (permut A0 A) /\ `1 <= m0` /\ `n0 <= N`]
            let (result1, Bool1) =
              let (result3, Post21) = (Z_lt_ge_bool m0 n0) in
              (exist_1 [result4: bool]
              (if result4 then `m0 < n0` else `m0 >= n0`) result3 Post21) in
            (Cases (btest
                    [result1:bool](if result1 then `m0 < n0` else `m0 >= n0`)
                    result1 Bool1) of
            | (left Test14) =>
                let (A1, m1, n1, result2, Post23) =
                  let (A1, m1, n1, result2, Inv_mn0) =
                    let (A1, m1, n1, result2, Inv_mn0) =
                      let Pre2 =
                        (find_po_2 A result Post1 result0 Post2 Variant1 A0
                        m0 n0 Pre20 Inv_mn Test14) in
                      let (r, Post3) = (exist_1 [result2: Z]
                        result2 = (access A0 f) (access A0 f)
                        (refl_equal ? (access A0 f))) in
                      let (A1, m1, n1, result2, Inv_mn0) =
                        let (result2, Post4) = (exist_1 [result2: Z]
                          result2 = m0 m0 (refl_equal ? m0)) in
                        let (A1, i0, m1, n1, result3, Inv_mn0) =
                          let (result3, Post5) = (exist_1 [result3: Z]
                            result3 = n0 n0 (refl_equal ? n0)) in
                          let (A1, i0, j0, m1, n1, result4, Inv_mn0) =
                            let (A1, i0, j0, result4, Inv_ij) =
                              (well_founded_induction Z (Zwf ZERO)
                                (find_po_3 A result Post1 result0 Post2
                                Variant1 A0 m0 n0 Pre20 Inv_mn Test14 Pre2 r
                                Post3 result2 Post4 result3 Post5)
                                [Variant3: Z](A1: (array `N + 1` Z))(i0: Z)
                                (j0: Z)(_: Variant3 = `N + 2 + j0 - i0`)
                                (Inv_ij: (i_invariant m0 n0 i0 r A1) /\
                                (j_invariant m0 n0 j0 r A1) /\
                                (m_invariant m0 A1) /\ (n_invariant n0 A1) /\
                                `0 <= j0` /\ `i0 <= N + 1` /\
                                (termination i0 j0 m0 n0 r A1) /\
                                (permut A1 A))
                                (sig_4 (array `N + 1` Z) Z Z unit
                                 [A2: (array `N + 1` Z)][i1: Z][j1: Z]
                                 [result4: unit]
                                 ((i_invariant m0 n0 i1 r A2) /\
                                 (j_invariant m0 n0 j1 r A2) /\
                                 (m_invariant m0 A2) /\
                                 (n_invariant n0 A2) /\ `0 <= j1` /\
                                 `i1 <= N + 1` /\
                                 (termination i1 j1 m0 n0 r A2) /\
                                 (permut A2 A) /\ `i1 > j1`))
                                [Variant3: Z; wf2: (Variant4: Z)
                                 (Pre3: (Zwf `0` Variant4 Variant3))
                                 (A1: (array `N + 1` Z))(i0: Z)(j0: Z)
                                 (_: Variant4 = `N + 2 + j0 - i0`)
                                 (Inv_ij: (i_invariant m0 n0 i0 r A1) /\
                                 (j_invariant m0 n0 j0 r A1) /\
                                 (m_invariant m0 A1) /\
                                 (n_invariant n0 A1) /\ `0 <= j0` /\
                                 `i0 <= N + 1` /\
                                 (termination i0 j0 m0 n0 r A1) /\
                                 (permut A1 A))
                                 (sig_4 (array `N + 1` Z) Z Z unit
                                  [A2: (array `N + 1` Z)][i1: Z][j1: Z]
                                  [result4: unit]
                                  ((i_invariant m0 n0 i1 r A2) /\
                                  (j_invariant m0 n0 j1 r A2) /\
                                  (m_invariant m0 A2) /\
                                  (n_invariant n0 A2) /\ `0 <= j1` /\
                                  `i1 <= N + 1` /\
                                  (termination i1 j1 m0 n0 r A2) /\
                                  (permut A2 A) /\ `i1 > j1`));
                                 A1: (array `N + 1` Z); i0: Z; j0: Z;
                                 Pre18: Variant3 = `N + 2 + j0 - i0`;
                                 Inv_ij: (i_invariant m0 n0 i0 r A1) /\
                                 (j_invariant m0 n0 j0 r A1) /\
                                 (m_invariant m0 A1) /\
                                 (n_invariant n0 A1) /\ `0 <= j0` /\
                                 `i0 <= N + 1` /\
                                 (termination i0 j0 m0 n0 r A1) /\
                                 (permut A1 A)]
                                  let (result4, Bool2) =
                                    let (result6, Post24) =
                                      (Z_le_gt_bool i0 j0) in
                                    (exist_1 [result7: bool]
                                    (if result7 then `i0 <= j0`
                                     else `i0 > j0`) result6
                                    Post24) in
                                  (Cases (btest
                                          [result4:bool](if result4
                                                         then `i0 <= j0`
                                                         else `i0 > j0`)
                                          result4 Bool2) of
                                  | (left Test9) =>
                                      let (A2, i1, j1, result5, Inv_ij0) =
                                        let (A2, i1, j1, result5, Inv_ij0) =
                                          let (i1, result5, Inv_i) =
                                            (well_founded_induction Z
                                              (Zwf ZERO)
                                              (find_po_4 A result Post1
                                              result0 Post2 Variant1 A0 m0 n0
                                              Pre20 Inv_mn Test14 Pre2 r
                                              Post3 result2 Post4 result3
                                              Post5 Variant3 A1 i0 j0 Pre18
                                              Inv_ij Test9) [Variant5: Z]
                                              (i1: Z)
                                              (_: Variant5 = `N + 1 - i1`)
                                              (Inv_i: (i_invariant m0 n0 i1 r
                                                       A1) /\ `i0 <= i1` /\
                                              `i1 <= n0` /\
                                              (termination i1 j0 m0 n0 r A1))
                                              (sig_2 Z unit [i2: Z]
                                               [result5: unit]
                                               ((i_invariant m0 n0 i2 r A1) /\
                                               `i0 <= i2` /\ `i2 <= n0` /\
                                               (termination i2 j0 m0 n0 r A1) /\
                                               `(access A1 i2) >= r`))
                                              [Variant5: Z;
                                               wf3: (Variant6: Z)
                                               (Pre4: (Zwf `0` Variant6 Variant5))
                                               (i1: Z)
                                               (_: Variant6 = `N + 1 - i1`)
                                               (Inv_i: (i_invariant m0 n0 i1
                                                        r A1) /\
                                               `i0 <= i1` /\ `i1 <= n0` /\
                                               (termination i1 j0 m0 n0 r A1))
                                               (sig_2 Z unit [i2: Z]
                                                [result5: unit]
                                                ((i_invariant m0 n0 i2 r A1) /\
                                                `i0 <= i2` /\ `i2 <= n0` /\
                                                (termination i2 j0 m0 n0 r A1) /\
                                                `(access A1 i2) >= r`));
                                               i1: Z;
                                               Pre6: Variant5 = `N + 1 - i1`;
                                               Inv_i: (i_invariant m0 n0 i1 r
                                                       A1) /\
                                               `i0 <= i1` /\ `i1 <= n0` /\
                                               (termination i1 j0 m0 n0 r A1)]
                                                let (result5, Bool3) =
                                                  let result6 =
                                                    let Pre5 =
                                                      (find_po_5 A result
                                                      Post1 result0 Post2
                                                      Variant1 A0 m0 n0 Pre20
                                                      Inv_mn Test14 Pre2 r
                                                      Post3 result2 Post4
                                                      result3 Post5 Variant3
                                                      A1 i0 j0 Pre18 Inv_ij
                                                      Test9 Variant5 i1 Pre6
                                                      Inv_i) in
                                                    (Z_lt_ge_bool (access A1
                                                                   i1)) in
                                                  let (result7, Post25) =
                                                    (result6 r) in
                                                  (exist_1 [result8: bool]
                                                  (if result8
                                                   then `(access A1 i1) < r`
                                                   else `(access A1 i1) >= r`) 
                                                  result7 Post25) in
                                                (Cases (btest
                                                        [result5:bool](
                                                        if result5
                                                        then `(access A1 i1) <
                                                              r`
                                                        else `(access A1 i1) >=
                                                              r`)
                                                        result5 Bool3) of
                                                | (left Test4) =>
                                                    let (i2, result6,
                                                      Inv_i0) =
                                                      let (i2, result6,
                                                        Inv_i0) =
                                                        let (i2, result6,
                                                          Post6) =
                                                          let (result6,
                                                            Post6) =
                                                            (exist_1 [result6: Z]
                                                            result6 =
                                                            `i1 + 1` 
                                                            `i1 + 1`
                                                            (refl_equal ? `
                                                            i1 + 1`)) in
                                                          (exist_2 [i3: Z]
                                                          [result7: unit]
                                                          i3 = `i1 + 1` 
                                                          result6 tt Post6) in
                                                        (exist_2 [i3: Z]
                                                        [result7: unit]
                                                        (i_invariant m0 n0 i3
                                                         r A1) /\
                                                        `i0 <= i3` /\
                                                        `i3 <= n0` /\
                                                        (termination i3 j0 m0
                                                         n0 r A1) /\
                                                        (Zwf `0` `N + 1 - i3` `
                                                        N + 1 - i1`) 
                                                        i2 result6
                                                        (find_po_6 A result
                                                        Post1 result0 Post2
                                                        Variant1 A0 m0 n0
                                                        Pre20 Inv_mn Test14
                                                        Pre2 r Post3 result2
                                                        Post4 result3 Post5
                                                        Variant3 A1 i0 j0
                                                        Pre18 Inv_ij Test9
                                                        Variant5 i1 Pre6
                                                        Inv_i Test4 i2 Post6)) in
                                                      ((wf3 `N + 1 - i2`)
                                                        (find_po_7 A result
                                                        Post1 result0 Post2
                                                        Variant1 A0 m0 n0
                                                        Pre20 Inv_mn Test14
                                                        Pre2 r Post3 result2
                                                        Post4 result3 Post5
                                                        Variant3 A1 i0 j0
                                                        Pre18 Inv_ij Test9
                                                        Variant5 i1 Pre6
                                                        Inv_i Test4 i2
                                                        Inv_i0) i2
                                                        (refl_equal ? `
                                                        N + 1 - i2`)
                                                        (find_po_8 A result
                                                        Post1 result0 Post2
                                                        Variant1 A0 m0 n0
                                                        Pre20 Inv_mn Test14
                                                        Pre2 r Post3 result2
                                                        Post4 result3 Post5
                                                        Variant3 A1 i0 j0
                                                        Pre18 Inv_ij Test9
                                                        Variant5 i1 Pre6
                                                        Inv_i Test4 i2
                                                        Inv_i0)) in
                                                    (exist_2 [i3: Z]
                                                    [result7: unit]
                                                    (i_invariant m0 n0 i3 r
                                                     A1) /\
                                                    `i0 <= i3` /\
                                                    `i3 <= n0` /\
                                                    (termination i3 j0 m0 n0
                                                     r A1) /\
                                                    `(access A1 i3) >= r` 
                                                    i2 result6 Inv_i0)
                                                | (right Test3) =>
                                                    let (i2, result6,
                                                      Inv_i0) =
                                                      (exist_2 [i2: Z]
                                                      [result6: unit]
                                                      (i_invariant m0 n0 i2 r
                                                       A1) /\ `i0 <= i2` /\
                                                      `i2 <= n0` /\
                                                      (termination i2 j0 m0
                                                       n0 r A1) /\
                                                      `(access A1 i2) >= r` 
                                                      i1 tt
                                                      (find_po_9 A result
                                                      Post1 result0 Post2
                                                      Variant1 A0 m0 n0 Pre20
                                                      Inv_mn Test14 Pre2 r
                                                      Post3 result2 Post4
                                                      result3 Post5 Variant3
                                                      A1 i0 j0 Pre18 Inv_ij
                                                      Test9 Variant5 i1 Pre6
                                                      Inv_i Test3)) in
                                                    (exist_2 [i3: Z]
                                                    [result7: unit]
                                                    (i_invariant m0 n0 i3 r
                                                     A1) /\
                                                    `i0 <= i3` /\
                                                    `i3 <= n0` /\
                                                    (termination i3 j0 m0 n0
                                                     r A1) /\
                                                    `(access A1 i3) >= r` 
                                                    i2 result6 Inv_i0) end)
                                              `N + 1 - i0` i0
                                              (refl_equal ? `N + 1 - i0`)
                                              (find_po_10 A result Post1
                                              result0 Post2 Variant1 A0 m0 n0
                                              Pre20 Inv_mn Test14 Pre2 r
                                              Post3 result2 Post4 result3
                                              Post5 Variant3 A1 i0 j0 Pre18
                                              Inv_ij Test9)) in
                                          let (j1, result6, Inv_j) =
                                            (well_founded_induction Z
                                              (Zwf ZERO)
                                              (find_po_11 A result Post1
                                              result0 Post2 Variant1 A0 m0 n0
                                              Pre20 Inv_mn Test14 Pre2 r
                                              Post3 result2 Post4 result3
                                              Post5 Variant3 A1 i0 j0 Pre18
                                              Inv_ij Test9 i1 Inv_i)
                                              [Variant7: Z](j1: Z)
                                              (_: Variant7 = j1)
                                              (Inv_j: (j_invariant m0 n0 j1 r
                                                       A1) /\ `j1 <= j0` /\
                                              `m0 <= j1` /\
                                              (termination i1 j1 m0 n0 r A1))
                                              (sig_2 Z unit [j2: Z]
                                               [result6: unit]
                                               ((j_invariant m0 n0 j2 r A1) /\
                                               `j2 <= j0` /\ `m0 <= j2` /\
                                               (termination i1 j2 m0 n0 r A1) /\
                                               `r >= (access A1 j2)`))
                                              [Variant7: Z;
                                               wf4: (Variant8: Z)
                                               (Pre7: (Zwf `0` Variant8 Variant7))
                                               (j1: Z)(_: Variant8 = j1)
                                               (Inv_j: (j_invariant m0 n0 j1
                                                        r A1) /\
                                               `j1 <= j0` /\ `m0 <= j1` /\
                                               (termination i1 j1 m0 n0 r A1))
                                               (sig_2 Z unit [j2: Z]
                                                [result6: unit]
                                                ((j_invariant m0 n0 j2 r A1) /\
                                                `j2 <= j0` /\ `m0 <= j2` /\
                                                (termination i1 j2 m0 n0 r A1) /\
                                                `r >= (access A1 j2)`));
                                               j1: Z; Pre9: Variant7 = j1;
                                               Inv_j: (j_invariant m0 n0 j1 r
                                                       A1) /\
                                               `j1 <= j0` /\ `m0 <= j1` /\
                                               (termination i1 j1 m0 n0 r A1)]
                                                let (result6, Bool4) =
                                                  let Pre8 =
                                                    (find_po_12 A result
                                                    Post1 result0 Post2
                                                    Variant1 A0 m0 n0 Pre20
                                                    Inv_mn Test14 Pre2 r
                                                    Post3 result2 Post4
                                                    result3 Post5 Variant3 A1
                                                    i0 j0 Pre18 Inv_ij Test9
                                                    i1 Inv_i Variant7 j1 Pre9
                                                    Inv_j) in
                                                  let (result8, Post26) =
                                                    (Z_lt_ge_bool r
                                                       (access A1 j1)) in
                                                  (exist_1 [result9: bool]
                                                  (if result9
                                                   then `r < (access A1 j1)`
                                                   else `r >= (access A1 j1)`) 
                                                  result8 Post26) in
                                                (Cases (btest
                                                        [result6:bool](
                                                        if result6
                                                        then `r <
                                                              (access A1 j1)`
                                                        else `r >=
                                                              (access A1 j1)`)
                                                        result6 Bool4) of
                                                | (left Test6) =>
                                                    let (j2, result7,
                                                      Inv_j0) =
                                                      let (j2, result7,
                                                        Inv_j0) =
                                                        let (j2, result7,
                                                          Post7) =
                                                          let (result7,
                                                            Post7) =
                                                            (exist_1 [result7: Z]
                                                            result7 =
                                                            `j1 - 1` 
                                                            `j1 - 1`
                                                            (refl_equal ? `
                                                            j1 - 1`)) in
                                                          (exist_2 [j3: Z]
                                                          [result8: unit]
                                                          j3 = `j1 - 1` 
                                                          result7 tt Post7) in
                                                        (exist_2 [j3: Z]
                                                        [result8: unit]
                                                        (j_invariant m0 n0 j3
                                                         r A1) /\
                                                        `j3 <= j0` /\
                                                        `m0 <= j3` /\
                                                        (termination i1 j3 m0
                                                         n0 r A1) /\
                                                        (Zwf `0` j3 j1) 
                                                        j2 result7
                                                        (find_po_13 A result
                                                        Post1 result0 Post2
                                                        Variant1 A0 m0 n0
                                                        Pre20 Inv_mn Test14
                                                        Pre2 r Post3 result2
                                                        Post4 result3 Post5
                                                        Variant3 A1 i0 j0
                                                        Pre18 Inv_ij Test9 i1
                                                        Inv_i Variant7 j1
                                                        Pre9 Inv_j Test6 j2
                                                        Post7)) in
                                                      ((wf4 j2)
                                                        (find_po_14 A result
                                                        Post1 result0 Post2
                                                        Variant1 A0 m0 n0
                                                        Pre20 Inv_mn Test14
                                                        Pre2 r Post3 result2
                                                        Post4 result3 Post5
                                                        Variant3 A1 i0 j0
                                                        Pre18 Inv_ij Test9 i1
                                                        Inv_i Variant7 j1
                                                        Pre9 Inv_j Test6 j2
                                                        Inv_j0) j2
                                                        (refl_equal ? j2)
                                                        (find_po_15 A result
                                                        Post1 result0 Post2
                                                        Variant1 A0 m0 n0
                                                        Pre20 Inv_mn Test14
                                                        Pre2 r Post3 result2
                                                        Post4 result3 Post5
                                                        Variant3 A1 i0 j0
                                                        Pre18 Inv_ij Test9 i1
                                                        Inv_i Variant7 j1
                                                        Pre9 Inv_j Test6 j2
                                                        Inv_j0)) in
                                                    (exist_2 [j3: Z]
                                                    [result8: unit]
                                                    (j_invariant m0 n0 j3 r
                                                     A1) /\
                                                    `j3 <= j0` /\
                                                    `m0 <= j3` /\
                                                    (termination i1 j3 m0 n0
                                                     r A1) /\
                                                    `r >= (access A1 j3)` 
                                                    j2 result7 Inv_j0)
                                                | (right Test5) =>
                                                    let (j2, result7,
                                                      Inv_j0) =
                                                      (exist_2 [j2: Z]
                                                      [result7: unit]
                                                      (j_invariant m0 n0 j2 r
                                                       A1) /\ `j2 <= j0` /\
                                                      `m0 <= j2` /\
                                                      (termination i1 j2 m0
                                                       n0 r A1) /\
                                                      `r >= (access A1 j2)` 
                                                      j1 tt
                                                      (find_po_16 A result
                                                      Post1 result0 Post2
                                                      Variant1 A0 m0 n0 Pre20
                                                      Inv_mn Test14 Pre2 r
                                                      Post3 result2 Post4
                                                      result3 Post5 Variant3
                                                      A1 i0 j0 Pre18 Inv_ij
                                                      Test9 i1 Inv_i Variant7
                                                      j1 Pre9 Inv_j Test5)) in
                                                    (exist_2 [j3: Z]
                                                    [result8: unit]
                                                    (j_invariant m0 n0 j3 r
                                                     A1) /\
                                                    `j3 <= j0` /\
                                                    `m0 <= j3` /\
                                                    (termination i1 j3 m0 n0
                                                     r A1) /\
                                                    `r >= (access A1 j3)` 
                                                    j2 result7 Inv_j0) end)
                                              j0 j0 (refl_equal ? j0)
                                              (find_po_17 A result Post1
                                              result0 Post2 Variant1 A0 m0 n0
                                              Pre20 Inv_mn Test14 Pre2 r
                                              Post3 result2 Post4 result3
                                              Post5 Variant3 A1 i0 j0 Pre18
                                              Inv_ij Test9 i1 Inv_i)) in
                                          let Pre17 =
                                            (find_po_18 A result Post1
                                            result0 Post2 Variant1 A0 m0 n0
                                            Pre20 Inv_mn Test14 Pre2 r Post3
                                            result2 Post4 result3 Post5
                                            Variant3 A1 i0 j0 Pre18 Inv_ij
                                            Test9 i1 Inv_i j1 Inv_j) in
                                          let (A2, i2, j2, result7,
                                            Inv_ij0) =
                                            let (result7, Bool5) =
                                              let (result9, Post27) =
                                                (Z_le_gt_bool i1 j1) in
                                              (exist_1 [result10: bool]
                                              (if result10 then `i1 <= j1`
                                               else `i1 > j1`) result9
                                              Post27) in
                                            (Cases (btest
                                                    [result7:bool](if result7
                                                                   then `
                                                                   i1 <= j1`
                                                                   else `
                                                                   i1 > j1`)
                                                    result7 Bool5) of
                                            | (left Test8) =>
                                                let (A2, i2, j2, result8,
                                                  Inv_ij0) =
                                                  let (A2, result8, Post28) =
                                                    let Pre10 =
                                                      (find_po_19 A result
                                                      Post1 result0 Post2
                                                      Variant1 A0 m0 n0 Pre20
                                                      Inv_mn Test14 Pre2 r
                                                      Post3 result2 Post4
                                                      result3 Post5 Variant3
                                                      A1 i0 j0 Pre18 Inv_ij
                                                      Test9 i1 Inv_i j1 Inv_j
                                                      Pre17 Test8) in
                                                    let (w, Post8) =
                                                      (exist_1 [result8: Z]
                                                      result8 =
                                                      (access A1 i1) 
                                                      (access A1 i1)
                                                      (refl_equal ? (
                                                      access A1 i1))) in
                                                    let (A2, result8,
                                                      Post29) =
                                                      let Pre11 =
                                                        (find_po_20 A result
                                                        Post1 result0 Post2
                                                        Variant1 A0 m0 n0
                                                        Pre20 Inv_mn Test14
                                                        Pre2 r Post3 result2
                                                        Post4 result3 Post5
                                                        Variant3 A1 i0 j0
                                                        Pre18 Inv_ij Test9 i1
                                                        Inv_i j1 Inv_j Pre17
                                                        Test8 Pre10 w Post8) in
                                                      let (A2, result8,
                                                        Post9) =
                                                        let (result8,
                                                          Post9) =
                                                          (exist_1 [result8: Z]
                                                          (store A1 i1
                                                           result8) =
                                                          (store A1 i1
                                                           (access A1 j1)) 
                                                          (access A1 j1)
                                                          (refl_equal ? (
                                                          store A1 i1
                                                          (access A1 j1)))) in
                                                        let Pre12 = Pre10 in
                                                        (exist_2 [A3: (
                                                        array `N + 1` Z)]
                                                        [result10: unit]
                                                        A3 =
                                                        (store A1 i1
                                                         (access A1 j1)) 
                                                        (store A1 i1 result8)
                                                        tt Post9) in
                                                      let (A3, result9,
                                                        Post10) =
                                                        let (result9,
                                                          Post10) =
                                                          (exist_1 [result9: Z]
                                                          (store A2 j1
                                                           result9) =
                                                          (store A2 j1 w) 
                                                          w
                                                          (refl_equal ? (
                                                          store A2 j1 w))) in
                                                        let Pre13 = Pre11 in
                                                        (exist_2 [A4: (
                                                        array `N + 1` Z)]
                                                        [result11: unit]
                                                        A4 = (store A2 j1 w) 
                                                        (store A2 j1 result9)
                                                        tt Post10) in
                                                      (exist_2 [A4: (
                                                      array `N + 1` Z)]
                                                      [result10: unit]
                                                      (exchange A4 A1 i1 j1) /\
                                                      (`(access A4 i1) <= r` /\
                                                      (`r <= (access A4 j1)` /\
                                                      ((i:Z)
                                                       (i = `i1 + 1` ->
                                                        ((j:Z)
                                                         (j = `j1 - 1` ->
                                                          (i_invariant m0 n0
                                                           i r A4) /\
                                                          (j_invariant m0 n0
                                                           j r A4) /\
                                                          (m_invariant m0 A4) /\
                                                          (n_invariant n0 A4) /\
                                                          `0 <= j` /\
                                                          `i <= N + 1` /\
                                                          (termination i j m0
                                                           n0 r A4) /\
                                                          (permut A4 A) /\
                                                          (Zwf `0` `N + 2 +
                                                                    j - i` `
                                                          N + 2 + j0 - i0`))))))) 
                                                      A3 result9
                                                      (find_po_21 A result
                                                      Post1 result0 Post2
                                                      Variant1 A0 m0 n0 Pre20
                                                      Inv_mn Test14 Pre2 r
                                                      Post3 result2 Post4
                                                      result3 Post5 Variant3
                                                      A1 i0 j0 Pre18 Inv_ij
                                                      Test9 i1 Inv_i j1 Inv_j
                                                      Pre17 Test8 Pre10 w
                                                      Post8 Pre11 A2 Post9 A3
                                                      Post10)) in
                                                    (exist_2 [A3: (array
                                                                   `N + 1` Z)]
                                                    [result9: unit]
                                                    (exchange A3 A1 i1 j1) /\
                                                    (`(access A3 i1) <= r` /\
                                                    (`r <= (access A3 j1)` /\
                                                    ((i:Z)
                                                     (i = `i1 + 1` ->
                                                      ((j:Z)
                                                       (j = `j1 - 1` ->
                                                        (i_invariant m0 n0 i
                                                         r A3) /\
                                                        (j_invariant m0 n0 j
                                                         r A3) /\
                                                        (m_invariant m0 A3) /\
                                                        (n_invariant n0 A3) /\
                                                        `0 <= j` /\
                                                        `i <= N + 1` /\
                                                        (termination i j m0
                                                         n0 r A3) /\
                                                        (permut A3 A) /\
                                                        (Zwf `0` `N + 2 + j -
                                                                  i` `
                                                        N + 2 + j0 - i0`))))))) 
                                                    A2 result8 Post29) in
                                                  let Pre16 =
                                                    (find_po_22 A result
                                                    Post1 result0 Post2
                                                    Variant1 A0 m0 n0 Pre20
                                                    Inv_mn Test14 Pre2 r
                                                    Post3 result2 Post4
                                                    result3 Post5 Variant3 A1
                                                    i0 j0 Pre18 Inv_ij Test9
                                                    i1 Inv_i j1 Inv_j Pre17
                                                    Test8 A2 Post28) in
                                                  let Pre15 =
                                                    (find_po_23 A result
                                                    Post1 result0 Post2
                                                    Variant1 A0 m0 n0 Pre20
                                                    Inv_mn Test14 Pre2 r
                                                    Post3 result2 Post4
                                                    result3 Post5 Variant3 A1
                                                    i0 j0 Pre18 Inv_ij Test9
                                                    i1 Inv_i j1 Inv_j Pre17
                                                    Test8 A2 Post28 Pre16) in
                                                  let Pre14 =
                                                    (find_po_24 A result
                                                    Post1 result0 Post2
                                                    Variant1 A0 m0 n0 Pre20
                                                    Inv_mn Test14 Pre2 r
                                                    Post3 result2 Post4
                                                    result3 Post5 Variant3 A1
                                                    i0 j0 Pre18 Inv_ij Test9
                                                    i1 Inv_i j1 Inv_j Pre17
                                                    Test8 A2 Post28 Pre16
                                                    Pre15) in
                                                  let (i2, result9, Post11) =
                                                    let (result9, Post11) =
                                                      (exist_1 [result9: Z]
                                                      result9 = `i1 + 1` 
                                                      `i1 + 1`
                                                      (refl_equal ? `i1 + 1`)) in
                                                    (exist_2 [i3: Z]
                                                    [result10: unit]
                                                    i3 = `i1 + 1` result9 
                                                    tt Post11) in
                                                  let (j2, result10,
                                                    Post12) =
                                                    let (result10, Post12) =
                                                      (exist_1 [result10: Z]
                                                      result10 = `j1 - 1` 
                                                      `j1 - 1`
                                                      (refl_equal ? `j1 - 1`)) in
                                                    (exist_2 [j3: Z]
                                                    [result11: unit]
                                                    j3 = `j1 - 1` result10 
                                                    tt Post12) in
                                                  (exist_4 [A3: (array
                                                                 `N + 1` Z)]
                                                  [i3: Z][j3: Z]
                                                  [result11: unit]
                                                  (i_invariant m0 n0 i3 r A3) /\
                                                  (j_invariant m0 n0 j3 r A3) /\
                                                  (m_invariant m0 A3) /\
                                                  (n_invariant n0 A3) /\
                                                  `0 <= j3` /\
                                                  `i3 <= N + 1` /\
                                                  (termination i3 j3 m0 n0 r
                                                   A3) /\
                                                  (permut A3 A) /\
                                                  (Zwf `0` `N + 2 + j3 - i3` `
                                                  N + 2 + j0 - i0`) A2 
                                                  i2 j2 result10
                                                  (find_po_25 A result Post1
                                                  result0 Post2 Variant1 A0
                                                  m0 n0 Pre20 Inv_mn Test14
                                                  Pre2 r Post3 result2 Post4
                                                  result3 Post5 Variant3 A1
                                                  i0 j0 Pre18 Inv_ij Test9 i1
                                                  Inv_i j1 Inv_j Pre17 Test8
                                                  A2 Post28 Pre16 Pre15 Pre14
                                                  i2 Post11 j2 Post12)) in
                                                (exist_4 [A3: (array `
                                                               N + 1` Z)]
                                                [i3: Z][j3: Z][result9: unit]
                                                (i_invariant m0 n0 i3 r A3) /\
                                                (j_invariant m0 n0 j3 r A3) /\
                                                (m_invariant m0 A3) /\
                                                (n_invariant n0 A3) /\
                                                `0 <= j3` /\ `i3 <= N + 1` /\
                                                (termination i3 j3 m0 n0 r A3) /\
                                                (permut A3 A) /\
                                                (Zwf `0` `N + 2 + j3 - i3` `
                                                N + 2 + j0 - i0`) A2 
                                                i2 j2 result8 Inv_ij0)
                                            | (right Test7) =>
                                                let (result8, Inv_ij0) =
                                                  (exist_1 [result8: unit]
                                                  (i_invariant m0 n0 i1 r A1) /\
                                                  (j_invariant m0 n0 j1 r A1) /\
                                                  (m_invariant m0 A1) /\
                                                  (n_invariant n0 A1) /\
                                                  `0 <= j1` /\
                                                  `i1 <= N + 1` /\
                                                  (termination i1 j1 m0 n0 r
                                                   A1) /\ (permut A1 A) /\
                                                  (Zwf `0` `N + 2 + j1 - i1` `
                                                  N + 2 + j0 - i0`) tt
                                                  (find_po_26 A result Post1
                                                  result0 Post2 Variant1 A0
                                                  m0 n0 Pre20 Inv_mn Test14
                                                  Pre2 r Post3 result2 Post4
                                                  result3 Post5 Variant3 A1
                                                  i0 j0 Pre18 Inv_ij Test9 i1
                                                  Inv_i j1 Inv_j Pre17 Test7)) in
                                                (exist_4 [A2: (array `
                                                               N + 1` Z)]
                                                [i2: Z][j2: Z][result9: unit]
                                                (i_invariant m0 n0 i2 r A2) /\
                                                (j_invariant m0 n0 j2 r A2) /\
                                                (m_invariant m0 A2) /\
                                                (n_invariant n0 A2) /\
                                                `0 <= j2` /\ `i2 <= N + 1` /\
                                                (termination i2 j2 m0 n0 r A2) /\
                                                (permut A2 A) /\
                                                (Zwf `0` `N + 2 + j2 - i2` `
                                                N + 2 + j0 - i0`) A1 
                                                i1 j1 result8 Inv_ij0) end) in
                                          (exist_4 [A3: (array `N + 1` Z)]
                                          [i3: Z][j3: Z][result8: unit]
                                          (i_invariant m0 n0 i3 r A3) /\
                                          (j_invariant m0 n0 j3 r A3) /\
                                          (m_invariant m0 A3) /\
                                          (n_invariant n0 A3) /\ `0 <= j3` /\
                                          `i3 <= N + 1` /\
                                          (termination i3 j3 m0 n0 r A3) /\
                                          (permut A3 A) /\
                                          (Zwf `0` `N + 2 + j3 - i3` `
                                          N + 2 + j0 - i0`) A2 i2 j2 
                                          result7 Inv_ij0) in
                                        ((wf2 `N + 2 + j1 - i1`)
                                          (find_po_27 A result Post1 result0
                                          Post2 Variant1 A0 m0 n0 Pre20
                                          Inv_mn Test14 Pre2 r Post3 result2
                                          Post4 result3 Post5 Variant3 A1 i0
                                          j0 Pre18 Inv_ij Test9 A2 i1 j1
                                          Inv_ij0) A2 i1 j1
                                          (refl_equal ? `N + 2 + j1 - i1`)
                                          (find_po_28 A result Post1 result0
                                          Post2 Variant1 A0 m0 n0 Pre20
                                          Inv_mn Test14 Pre2 r Post3 result2
                                          Post4 result3 Post5 Variant3 A1 i0
                                          j0 Pre18 Inv_ij Test9 A2 i1 j1
                                          Inv_ij0)) in
                                      (exist_4 [A3: (array `N + 1` Z)][i2: Z]
                                      [j2: Z][result6: unit]
                                      (i_invariant m0 n0 i2 r A3) /\
                                      (j_invariant m0 n0 j2 r A3) /\
                                      (m_invariant m0 A3) /\
                                      (n_invariant n0 A3) /\ `0 <= j2` /\
                                      `i2 <= N + 1` /\
                                      (termination i2 j2 m0 n0 r A3) /\
                                      (permut A3 A) /\ `i2 > j2` A2 i1 
                                      j1 result5 Inv_ij0)
                                  | (right Test2) =>
                                      let (A2, i1, j1, result5, Inv_ij0) =
                                        (exist_4 [A2: (array `N + 1` Z)]
                                        [i1: Z][j1: Z][result5: unit]
                                        (i_invariant m0 n0 i1 r A2) /\
                                        (j_invariant m0 n0 j1 r A2) /\
                                        (m_invariant m0 A2) /\
                                        (n_invariant n0 A2) /\ `0 <= j1` /\
                                        `i1 <= N + 1` /\
                                        (termination i1 j1 m0 n0 r A2) /\
                                        (permut A2 A) /\ `i1 > j1` A1 
                                        i0 j0 tt
                                        (find_po_29 A result Post1 result0
                                        Post2 Variant1 A0 m0 n0 Pre20 Inv_mn
                                        Test14 Pre2 r Post3 result2 Post4
                                        result3 Post5 Variant3 A1 i0 j0 Pre18
                                        Inv_ij Test2)) in
                                      (exist_4 [A3: (array `N + 1` Z)][i2: Z]
                                      [j2: Z][result6: unit]
                                      (i_invariant m0 n0 i2 r A3) /\
                                      (j_invariant m0 n0 j2 r A3) /\
                                      (m_invariant m0 A3) /\
                                      (n_invariant n0 A3) /\ `0 <= j2` /\
                                      `i2 <= N + 1` /\
                                      (termination i2 j2 m0 n0 r A3) /\
                                      (permut A3 A) /\ `i2 > j2` A2 i1 
                                      j1 result5 Inv_ij0) end)
                                `N + 2 + result3 - result2` A0 result2
                                result3
                                (refl_equal ? `N + 2 + result3 - result2`)
                                (find_po_30 A result Post1 result0 Post2
                                Variant1 A0 m0 n0 Pre20 Inv_mn Test14 Pre2 r
                                Post3 result2 Post4 result3 Post5)) in
                            let Pre19 =
                              (find_po_31 A result Post1 result0 Post2
                              Variant1 A0 m0 n0 Pre20 Inv_mn Test14 Pre2 r
                              Post3 result2 Post4 result3 Post5 A1 i0 j0
                              Inv_ij) in
                            let (m1, n1, result5, Inv_mn0) =
                              let (result5, Bool7) =
                                let (result7, Post30) =
                                  (Z_le_gt_bool f j0) in
                                (exist_1 [result8: bool]
                                (if result8 then `f <= j0` else `f > j0`) 
                                result7 Post30) in
                              (Cases (btest
                                      [result5:bool](if result5
                                                     then `f <= j0`
                                                     else `f > j0`)
                                      result5 Bool7) of
                              | (left Test13) =>
                                  let (n1, result6, Post16) =
                                    let (result6, Post16) =
                                      (exist_1 [result6: Z]result6 = j0 
                                      j0 (refl_equal ? j0)) in
                                    (exist_2 [n2: Z][result7: unit]
                                    n2 = j0 result6 tt Post16) in
                                  (exist_3 [m1: Z][n2: Z][result7: unit]
                                  (m_invariant m1 A1) /\
                                  (n_invariant n2 A1) /\ (permut A1 A) /\
                                  `1 <= m1` /\ `n2 <= N` /\
                                  (Zwf `0` `n2 - m1` `n0 - m0`) m0 n1 
                                  result6
                                  (find_po_32 A result Post1 result0 Post2
                                  Variant1 A0 m0 n0 Pre20 Inv_mn Test14 Pre2
                                  r Post3 result2 Post4 result3 Post5 A1 i0
                                  j0 Inv_ij Pre19 Test13 n1 Post16))
                              | (right Test12) =>
                                  let (m1, n1, result6, Inv_mn0) =
                                    let (result6, Bool6) =
                                      let (result8, Post31) =
                                        (Z_le_gt_bool i0 f) in
                                      (exist_1 [result9: bool]
                                      (if result9 then `i0 <= f`
                                       else `i0 > f`) result8
                                      Post31) in
                                    (Cases (btest
                                            [result6:bool](if result6
                                                           then `i0 <= f`
                                                           else `i0 > f`)
                                            result6 Bool6) of
                                    | (left Test11) =>
                                        let (m1, result7, Post15) =
                                          let (result7, Post15) =
                                            (exist_1 [result7: Z]
                                            result7 = i0 i0
                                            (refl_equal ? i0)) in
                                          (exist_2 [m2: Z][result8: unit]
                                          m2 = i0 result7 tt Post15) in
                                        (exist_3 [m2: Z][n1: Z]
                                        [result8: unit](m_invariant m2 A1) /\
                                        (n_invariant n1 A1) /\
                                        (permut A1 A) /\ `1 <= m2` /\
                                        `n1 <= N` /\
                                        (Zwf `0` `n1 - m2` `n0 - m0`) 
                                        m1 n0 result7
                                        (find_po_33 A result Post1 result0
                                        Post2 Variant1 A0 m0 n0 Pre20 Inv_mn
                                        Test14 Pre2 r Post3 result2 Post4
                                        result3 Post5 A1 i0 j0 Inv_ij Pre19
                                        Test12 Test11 m1 Post15))
                                    | (right Test10) =>
                                        let (m1, n1, result7, Inv_mn0) =
                                          let (n1, result7, Post13) =
                                            let (result7, Post13) =
                                              (exist_1 [result7: Z]
                                              result7 = f f
                                              (refl_equal ? f)) in
                                            (exist_2 [n2: Z][result8: unit]
                                            n2 = f result7 tt Post13) in
                                          let (m1, result8, Post14) =
                                            let (result8, Post14) =
                                              (exist_1 [result8: Z]
                                              result8 = f f
                                              (refl_equal ? f)) in
                                            (exist_2 [m2: Z][result9: unit]
                                            m2 = f result8 tt Post14) in
                                          (exist_3 [m2: Z][n2: Z]
                                          [result9: unit]
                                          (m_invariant m2 A1) /\
                                          (n_invariant n2 A1) /\
                                          (permut A1 A) /\ `1 <= m2` /\
                                          `n2 <= N` /\
                                          (Zwf `0` `n2 - m2` `n0 - m0`) 
                                          m1 n1 result8
                                          (find_po_34 A result Post1 result0
                                          Post2 Variant1 A0 m0 n0 Pre20
                                          Inv_mn Test14 Pre2 r Post3 result2
                                          Post4 result3 Post5 A1 i0 j0 Inv_ij
                                          Pre19 Test12 Test10 n1 Post13 m1
                                          Post14)) in
                                        (exist_3 [m2: Z][n2: Z]
                                        [result8: unit](m_invariant m2 A1) /\
                                        (n_invariant n2 A1) /\
                                        (permut A1 A) /\ `1 <= m2` /\
                                        `n2 <= N` /\
                                        (Zwf `0` `n2 - m2` `n0 - m0`) 
                                        m1 n1 result7 Inv_mn0) end) in
                                  (exist_3 [m2: Z][n2: Z][result7: unit]
                                  (m_invariant m2 A1) /\
                                  (n_invariant n2 A1) /\ (permut A1 A) /\
                                  `1 <= m2` /\ `n2 <= N` /\
                                  (Zwf `0` `n2 - m2` `n0 - m0`) m1 n1 
                                  result6 Inv_mn0) end) in
                            (exist_6 [A2: (array `N + 1` Z)][i1: Z][j1: Z]
                            [m2: Z][n2: Z][result6: unit]
                            (m_invariant m2 A2) /\ (n_invariant n2 A2) /\
                            (permut A2 A) /\ `1 <= m2` /\ `n2 <= N` /\
                            (Zwf `0` `n2 - m2` `n0 - m0`) A1 i0 j0 m1 
                            n1 result5 Inv_mn0) in
                          (exist_5 [A2: (array `N + 1` Z)][i1: Z][m2: Z]
                          [n2: Z][result5: unit](m_invariant m2 A2) /\
                          (n_invariant n2 A2) /\ (permut A2 A) /\
                          `1 <= m2` /\ `n2 <= N` /\
                          (Zwf `0` `n2 - m2` `n0 - m0`) A1 i0 m1 n1 result4
                          Inv_mn0) in
                        (exist_4 [A2: (array `N + 1` Z)][m2: Z][n2: Z]
                        [result4: unit](m_invariant m2 A2) /\
                        (n_invariant n2 A2) /\ (permut A2 A) /\ `1 <= m2` /\
                        `n2 <= N` /\ (Zwf `0` `n2 - m2` `n0 - m0`) A1 
                        m1 n1 result3 Inv_mn0) in
                      (exist_4 [A2: (array `N + 1` Z)][m2: Z][n2: Z]
                      [result3: unit](m_invariant m2 A2) /\
                      (n_invariant n2 A2) /\ (permut A2 A) /\ `1 <= m2` /\
                      `n2 <= N` /\ (Zwf `0` `n2 - m2` `n0 - m0`) A1 m1 
                      n1 result2 Inv_mn0) in
                    (exist_4 [A2: (array `N + 1` Z)][m2: Z][n2: Z]
                    [result3: unit](m_invariant m2 A2) /\
                    (n_invariant n2 A2) /\ (permut A2 A) /\ `1 <= m2` /\
                    `n2 <= N` /\ (Zwf `0` `n2 - m2` `n0 - m0`) A1 m1 
                    n1 result2 Inv_mn0) in
                  ((wf1 `n1 - m1`)
                    (find_po_35 A result Post1 result0 Post2 Variant1 A0 m0
                    n0 Pre20 Inv_mn Test14 A1 m1 n1 Inv_mn0) A1 m1 n1
                    (refl_equal ? `n1 - m1`)
                    (find_po_36 A result Post1 result0 Post2 Variant1 A0 m0
                    n0 Pre20 Inv_mn Test14 A1 m1 n1 Inv_mn0)) in
                (exist_4 [A2: (array `N + 1` Z)][m2: Z][n2: Z][result3: unit]
                (found A2) /\ (permut A2 A) A1 m1 n1 result2 Post23)
            | (right Test1) =>
                let (A1, m1, n1, result2, Post22) =
                  (exist_4 [A1: (array `N + 1` Z)][m1: Z][n1: Z]
                  [result2: unit](found A1) /\ (permut A1 A) A0 m0 n0 
                  tt
                  (find_po_37 A result Post1 result0 Post2 Variant1 A0 m0 n0
                  Pre20 Inv_mn Test1)) in
                (exist_4 [A2: (array `N + 1` Z)][m2: Z][n2: Z][result3: unit]
                (found A2) /\ (permut A2 A) A1 m1 n1 result2 Post22) end)
          `result0 - result` A result result0
          (refl_equal ? `result0 - result`)
          (find_po_38 A result Post1 result0 Post2)) in
      (Build_tuple_3 A0 m0 result1) in
    (Build_tuple_2 A0 result0).

