#
# sample Makefile for Objective Caml
# Copyright (C) 2001 Jean-Christophe FILLIATRE
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License version 2, as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# See the GNU Library General Public License version 2 for more details
# (enclosed in the file LGPL).

# where to install the binaries
prefix=@prefix@
exec_prefix=@exec_prefix@
BINDIR=@bindir@

# where to install the man page
MANDIR=@mandir@

# other variables
OCAMLC   = @OCAMLC@
OCAMLOPT = @OCAMLOPT@
OCAMLDEP = @OCAMLDEP@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLLIB = @OCAMLLIB@
OCAMLBEST= @OCAMLBEST@
OCAMLVERSION = @OCAMLVERSION@

INCLUDES = -I src
BFLAGS   = -g $(INCLUDES) -I @CAMLP4LIB@
OFLAGS   = $(INCLUDES) -I @CAMLP4LIB@

CMO      = src/options.cmo src/loc.cmo src/ident.cmo src/misc.cmo 	\
	   src/effect.cmo src/error.cmo					\
           src/env.cmo src/rename.cmo src/util.cmo src/parser.cmo	\
           src/db.cmo src/typing.cmo src/wp.cmo src/monad.cmo		\
	   src/mlize.cmo src/red.cmo src/vcg.cmo src/pvs.cmo            \
	   src/coq.cmo src/main.cmo
CMX      = $(CMO:.cmo=.cmx)

# main targets
##############

PROG=bin/why.$(OCAMLBEST)

all: $(PROG)

opt: bin/why.opt

byte : bin/why.byte

bin/why.opt: $(CMX)
	$(OCAMLOPT) $(OFLAGS) -o $@ gramlib.cmxa $^

bin/why.byte: $(CMO)
	$(OCAMLC) $(BFLAGS) -o $@ gramlib.cma $^

top: $(CMO)
	ocamlmktop $(BFLAGS) -o $@ gramlib.cma $^

doc::
	cd doc; make

# bench

.PHONY: bench

bench:: $(PROG)
	cd bench; ./bench ../$(PROG)

# installation
##############

install: $(PROG)
	mkdir -p $(BINDIR)
	cp -f $(PROG) $(BINDIR)/why
#	mkdir -p $(MANDIR)/man1
#	cp -f $(PROG).1 $(MANDIR)/man1

local: $(PROG)
	cp -f $(PROG) $$HOME/bin/$$OSTYPE/why

# special rules
###############

CAMLP4=camlp4o pa_extend.cmo

src/parser.cmo: src/parser.ml4
	$(OCAMLC) -c $(BFLAGS) -pp "$(CAMLP4) -impl" -impl $<
src/parser.cmx: src/parser.ml4
	$(OCAMLOPT) -c $(OFLAGS) -pp "$(CAMLP4) -impl" -impl $<

# generic rules
###############

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly

.mli.cmi:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.cmo:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.o:
	$(OCAMLOPT) -c $(OFLAGS) $<

.ml.cmx:
	$(OCAMLOPT) -c $(OFLAGS) $<

.mll.ml:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) -v $<

.mly.mli:
	$(OCAMLYACC) -v $<

# Emacs tags
############

tags:
	find . -name "*.ml*" | sort -r | xargs \
	etags "--regex=/let[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/and[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/exception[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/val[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/module[ \t]+\([^ \t]+\)/\1/"

# myself
########

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf 

# backup, clean and depend
##########################

clean::
	rm -f src/*.cm[iox] src/*.o src/*~
	rm -f bin/why.opt bin/why.byte
	cd doc; make clean

.depend depend::
	rm -f .depend
	$(OCAMLDEP) $(INCLUDES) src/*.ml src/*.mli > .depend
	$(CAMLP4) pr_depend.cmo -- $(INCLUDES) -impl src/parser.ml4 >> .depend

include .depend
