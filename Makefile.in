##########################################################################
#                                                                        #
#  The Why platform for program certification                            #
#                                                                        #
#  Copyright (C) 2002-2014                                               #
#                                                                        #
#    Jean-Christophe FILLIATRE, CNRS & Univ. Paris-sud                   #
#    Claude MARCHE, INRIA & Univ. Paris-sud                              #
#    Yannick MOY, Univ. Paris-sud                                        #
#    Romain BARDOU, Univ. Paris-sud                                      #
#                                                                        #
#  Secondary contributors:                                               #
#                                                                        #
#    Thierry HUBERT, Univ. Paris-sud  (former Caduceus front-end)        #
#    Nicolas ROUSSET, Univ. Paris-sud (on Jessie & Krakatoa)             #
#    Ali AYAD, CNRS & CEA Saclay      (floating-point support)           #
#    Sylvie BOLDO, INRIA              (floating-point support)           #
#    Jean-Francois COUCHOT, INRIA     (sort encodings, hyps pruning)     #
#    Mehdi DOGGUY, Univ. Paris-sud    (Why GUI)                          #
#                                                                        #
#  This software is free software; you can redistribute it and/or        #
#  modify it under the terms of the GNU Lesser General Public            #
#  License version 2.1, with the special exception on linking            #
#  described in file LICENSE.                                            #
#                                                                        #
#  This software is distributed in the hope that it will be useful,      #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  #
#                                                                        #
##########################################################################

VERBOSEMAKE ?= @VERBOSEMAKE@

ifeq ($(VERBOSEMAKE),yes)
 QUIET =
else
 QUIET = yes
endif

# where to install the binaries
DESTDIR =

prefix      = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@

BINDIR= $(DESTDIR)@bindir@
LIBDIR= $(DESTDIR)@libdir@

# other variables
OCAMLBEST= @OCAMLBEST@
OCAMLBUILD = @OCAMLBUILD@

export FRAMAC = @FRAMAC@

JESSIE_PLUGIN_BYTE= jessie_plugin.byte
JESSIE_PLUGIN_OPT= jessie_plugin.opt
JESSIE_PLUGIN_BEST= jessie_plugin.$(OCAMLBEST)
.PHONY: $(JESSIE_PLUGIN_BYTE) $(JESSIE_PLUGIN_OPT)

COQLIB = $(DESTDIR)"@COQLIB@"
COQVER = @COQVER@

V8 = $(wildcard lib/coq/*.v)
VO8 = $(patsubst %.v,%.vo, $(V8))

PVSFILES =
PVSLIB = $(DESTDIR)@PVSLIB@

GENERATED = src/why/why_version.ml \
	    src/jc/jc_version.ml \
            lib/why3/why3.conf \
            lib/why3/z3.drv \
            lib/why3/cvc4.drv \
            lib/why3/alt-ergo.drv

# main targets
##############

JESSIE=bin/jessie.$(OCAMLBEST)

OCAMLBUILD += -use-ocamlfind -j 0

JC_SOURCES=$(wildcard src/why/*.ml src/why/*.mli src/why/*.mll src/why/*.mly src/jc/*.ml src/jc/*.mli src/jc/*.mll src/jc/*.mly)

BUILDSRC=_build/src

ifeq ($(OCAMLBEST),opt)
JCLIB=$(BUILDSRC)/jc/jc.cmxa
else
JCLIB=$(BUILDSRC)/jc/jc.cma
endif

all: all-without-frama-c-plugin $(JESSIE_PLUGIN_BEST)

all-without-frama-c-plugin: $(JESSIE) coq-@COQ@ $(JCLIB)

opt:  bin/jessie.opt $(JESSIE_PLUGIN_OPT)
byte: bin/jessie.byte $(JESSIE_PLUGIN_BYTE)

$(BUILDSRC)/jc/jc.cmxa: $(JC_SOURCES) $(GENERATED)
	$(OCAMLBUILD) jc.otarget
	rm -f jc.cm*
	touch $@

$(BUILDSRC)/jc/jc.%: $(JC_SOURCES) $(GENERATED) $(BUILDSRC)/jc/jc.cmxa
	touch $@

bin/jessie.opt: $(JC_SOURCES) bin $(BUILDSRC)/jc/jc.cmxa
	if [ -f jc_main.native ]; then mv jc_main.native $@; fi
	touch $@

bin/jessie.byte: $(JC_SOURCES) bin $(BUILDSRC)/jc/jc.cma
	$(OCAMLBUILD) jc_main.d.byte
	if [ -f jc_main.d.byte ]; then mv jc_main.d.byte $@; fi
	touch $@

bin:
	mkdir -p bin

# Frama-C plugin for Jessie
JESSIE_PLUGIN_PATH=src/frama-c-plugin
$(JESSIE_PLUGIN_BYTE): $(addprefix $(BUILDSRC)/jc/,jc.cmi jc.cma)
	$(MAKE) -C $(JESSIE_PLUGIN_PATH) depend
	$(MAKE) -C $(JESSIE_PLUGIN_PATH) Jessie.cma

$(JESSIE_PLUGIN_OPT): $(addprefix $(BUILDSRC)/jc/,jc.cmi jc.cma jc.cmxa)
	$(MAKE) -C $(JESSIE_PLUGIN_PATH) depend
	$(MAKE) -C $(JESSIE_PLUGIN_PATH)

install:
	$(MAKE) -C $(JESSIE_PLUGIN_PATH) install
clean::
	$(MAKE) -C $(JESSIE_PLUGIN_PATH) clean

LIBWHY3=@libdir@/jessie

WHY3_DATADIR=$(shell why3 --print-datadir)

lib/why3/%_enum.gen: lib/why3/%_enum.tmpl
	./generate.ml $<

lib/why3/%.drv: lib/why3/%_enum.gen
	@DRIVER=smt-libv2.drv; \
	if [ $(@F) = alt-ergo.drv -o $(@F) = alt-ergo_remove_triggers.drv ]; then \
	  DRIVER=alt_ergo.drv; \
	elif [ $(@F) = cvc4.drv ]; then \
	  DRIVER=cvc4_14.drv; \
	elif [ $(@F) = z3.drv ]; then \
	  DRIVER=z3_432.drv; \
	fi; \
	cp $< $@; \
	printf "import \"$(WHY3_DATADIR)/drivers/$${DRIVER}\"" >> $@

lib/why3/why3.conf:  lib/why3/cvc4.drv lib/why3/z3.drv lib/why3/alt-ergo.drv lib/why3/alt-ergo_remove_triggers.drv Makefile
	@printf "[main]\n" > $@
	@printf "loadpath=\"$(LIBWHY3)/why3\"\n" >> $@
	@printf "\n" >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"Coq\"\n" >> $@
	@printf "option=\"-R $(LIBWHY3)/coq Jessie\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/coq.drv\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"CVC4\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/cvc4_enum.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"Z3\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/z3_enum.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"Alt-Ergo\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/alt-ergo_enum.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"Vampire\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/alt-ergo_enum.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"Eprover\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/alt-ergo_enum.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover]\n" >> $@
	@printf "alternative = \"-trigs\"\n" >> $@
	@printf "command = \"%%l/why3-cpulimit %%t %%m -s z3 -smt2 parser.ignore_user_patterns=true %%f\"\n" >> $@
	@printf "driver = \"$(LIBWHY3)/why3/z3.drv\"\n" >> $@
	@printf "editor = \"\"\n" >> $@
	@printf "in_place = false\n" >> $@
	@printf "interactive = false\n" >> $@
	@printf "name = \"Z3\"\n" >> $@
	@printf "version = \"4.4.0\"\n" >> $@
	@printf "\n" >> $@

	@printf "[prover]\n" >> $@
	@printf "alternative = \"'14\"\n" >> $@
	@printf "command = \"%%l/why3-cpulimit %%t %%m -s cvc4 --lang=smt2 --simplification=none\
		--quant-cf --qcf-tconstraint --mbqi=gen-ev --full-saturate-quant --uf-ss-fair %%f\"\n" >> $@
	@printf "driver = \"$(LIBWHY3)/why3/cvc4.drv\"\n" >> $@
	@printf "editor = \"\"\n" >> $@
	@printf "in_place = false\n" >> $@
	@printf "interactive = false\n" >> $@
	@printf "name = \"CVC4\"\n" >> $@
	@printf "version = \">=1.4\"\n" >> $@
	@printf "\n" >> $@

	@printf "[prover]\n" >> $@
	@printf "alternative = \"-Em\"\n" >> $@
	@printf "command = \"%%l/why3-cpulimit %%T %%m -s alt-ergo -timelimit %%t %%f -no-Ematching\"\n" >> $@
	@printf "command_steps = \"%%l/why3-cpulimit %%U %%m -s alt-ergo -steps-bound %%S %%f -no-Ematching\"\n" >> $@
	@printf "driver = \"$(LIBWHY3)/why3/alt-ergo.drv\"\n" >> $@
	@printf "editor = \"altgr-ergo\"\n" >> $@
	@printf "in_place = false\n" >> $@
	@printf "interactive = false\n" >> $@
	@printf "name = \"Alt-Ergo\"\n" >> $@
	@printf "version = \"1.01\"\n" >> $@
	@printf "\n" >> $@

	@printf "[prover]\n" >> $@
	@printf "alternative = \"-trigs\"\n" >> $@
	@printf "command = \"%%l/why3-cpulimit %%T %%m -s alt-ergo -timelimit %%t %%f\"\n" >> $@
	@printf "command_steps = \"%%l/why3-cpulimit %%U %%m -s alt-ergo -steps-bound %%S %%f\"\n" >> $@
	@printf "driver = \"$(LIBWHY3)/why3/alt-ergo_remove_triggers.drv\"\n" >> $@
	@printf "editor = \"altgr-ergo\"\n" >> $@
	@printf "in_place = false\n" >> $@
	@printf "interactive = false\n" >> $@
	@printf "name = \"Alt-Ergo\"\n" >> $@
	@printf "version = \"1.01\"\n" >> $@
	@printf "\n" >> $@

	@printf "[editor_modifiers coqide]\n" >> $@
	@printf "option=\"-R $(LIBWHY3)/coq Jessie\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[editor_modifiers proofgeneral-coq]\n" >> $@
	@printf "option=\"--eval \\\\\"(setq coq-load-path (cons '(\\\\\\\\\\\\\"$(LIBWHY3)/coq\\\\\\\\\\\\\" \\\\\\\\\\\\\"Jessie\\\\\\\\\\\\\") coq-load-path))\\\\\"\"\n"  >> $@

########
# COQ
########

coq-no:
coq-yes: coq-@COQVER@
coq-v8: $(VO8)
coq-v8.1: $(VO8)

########
# PVS
########

pvs-no:
pvs-yes: $(PVSFILES)

include Version

doc/version.tex src/why/why_version.ml src/jc/jc_version.ml: Version version.sh config.status
	BINDIR=@bindir@ LIBDIR=@libdir@ COQVER=$(COQVER) ./version.sh

# installation
##############

install: install-binary install-lib install-man install-coq-@COQ@ install-pvs-@PVS@

BINARYFILES = $(JESSIE)

# install-binary should not depend on $(BINARYFILES); otherwise it
# enforces the compilation of gwhy, even when lablgtk2 is not installed
install-binary:
	mkdir -p $(BINDIR)
	cp -f $(JESSIE) $(BINDIR)/jessie$(EXE)

install-lib: $(JCLIB) lib/why3/why3.conf
	rm -rf $(LIBDIR)/jessie/why3
	mkdir -p $(LIBDIR)/jessie/why3
	cp -f lib/why3/why3.conf lib/why3/coq.drv lib/why3/core.mlw lib/why3/enum.mlw $(LIBDIR)/jessie/why3
	cp -f lib/why3/cvc4_enum.gen lib/why3/alt-ergo_enum.gen lib/why3/alt-ergo_remove_triggers_enum.gen lib/why3/z3_enum.gen $(LIBDIR)/jessie/why3
	cp -f lib/why3/cvc4.drv lib/why3/alt-ergo.drv lib/why3/alt-ergo_remove_triggers.drv lib/why3/z3.drv $(LIBDIR)/jessie/why3
	mkdir -p $(LIBDIR)/jessie
	cp -f $(JCLIB) $(JCCMI_EXPORT) $(LIBDIR)/jessie

install-man:

install-coq-no:
install-coq-yes: install-coq-@COQVER@
install-coq-v8 install-coq-v8.1:
	if test -w $(COQLIB) ; then \
	  rm -rf $(COQLIB)/user-contrib/Jessie ; \
	  mkdir -p $(COQLIB)/user-contrib/Jessie ; \
	  cp -f $(VO8) $(COQLIB)/user-contrib/Jessie ; \
	else \
	  echo "Cannot copy to Coq standard library. Add \"-R $(LIBDIR)/jessie/coq Jessie\" to Coq options." ;\
	fi
	mkdir -p $(LIBDIR)/jessie/coq
	cp -f $(VO8) $(LIBDIR)/jessie/coq

install-pvs-no:
install-pvs-yes: $(PVSFILES)
#	mkdir -p $(PVSLIB)/jessie
#	cp $(PVSFILES) $(PVSFILES:.pvs=.prf) $(PVSLIB)/jessie
#	cp lib/pvs/top.pvs lib/pvs/pvscontext.el $(PVSLIB)/jessie
#	@echo "======  Compiling PVS theories, this may take some time ======"
#	(cd $(PVSLIB)/jessie ; @PVSC@ -batch -l pvscontext.el -q -v 2 > top.out)
#	@echo "======  Done compiling PVS theories ======"

# doc

DOC=doc/jessie.pdf doc/jessie.html

doc:: $(DOC)

doc/manual.ps: doc/manual.tex doc/version.tex
	$(MAKE) -C doc manual.ps

doc/jessie.pdf: doc/jessie.tex doc/version.tex
	$(MAKE) -C doc jessie.pdf

doc/jessie.html: doc/jessie.tex doc/version.tex
	$(MAKE) -C doc jessie.html

@JESSIEWHY3LIBCOQ@: COQEXTRAR += -R @WHY3COQPATH@ Why3

lib/coq/%.vo: $(V8) lib/coq/Jessie_pointer.vo
	touch $@

lib/coq/Jessie_pointer.vo: $(V8)
	$(MAKE) -C lib/coq

# myself
########

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf

# clean and depend
##################

clean::
	rm -f .depend.coq
	rm -rf bin
	rm -rf _build
	rm -f lib/coq*/*.vo lib/coq*/*.glob lib/coq*/*~
	rm -f $(GENERATED)
	$(MAKE) -C doc clean
	if test -d examples-v7; then \
		$(MAKE) -C examples-v7 clean ; \
	fi

dist-clean:: clean
	rm -f Makefile config.status config.cache config.log

coq-clean::
	rm .depend.coq

.PHONY: depend
depend:
	$(MAKE) -C $(JESSIE_PLUGIN_PATH) depend
