##########################################################################
#                                                                        #
#  The Why platform for program certification                            #
#                                                                        #
#  Copyright (C) 2002-2014                                               #
#                                                                        #
#    Jean-Christophe FILLIATRE, CNRS & Univ. Paris-sud                   #
#    Claude MARCHE, INRIA & Univ. Paris-sud                              #
#    Yannick MOY, Univ. Paris-sud                                        #
#    Romain BARDOU, Univ. Paris-sud                                      #
#                                                                        #
#  Secondary contributors:                                               #
#                                                                        #
#    Thierry HUBERT, Univ. Paris-sud  (former Caduceus front-end)        #
#    Nicolas ROUSSET, Univ. Paris-sud (on Jessie & Krakatoa)             #
#    Ali AYAD, CNRS & CEA Saclay      (floating-point support)           #
#    Sylvie BOLDO, INRIA              (floating-point support)           #
#    Jean-Francois COUCHOT, INRIA     (sort encodings, hyps pruning)     #
#    Mehdi DOGGUY, Univ. Paris-sud    (Why GUI)                          #
#                                                                        #
#  This software is free software; you can redistribute it and/or        #
#  modify it under the terms of the GNU Lesser General Public            #
#  License version 2.1, with the special exception on linking            #
#  described in file LICENSE.                                            #
#                                                                        #
#  This software is distributed in the hope that it will be useful,      #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  #
#                                                                        #
##########################################################################

VERBOSEMAKE ?= @VERBOSEMAKE@

ifeq ($(VERBOSEMAKE),yes)
 QUIET =
else
 QUIET = yes
endif

# where to install the binaries
DESTDIR =

prefix      = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@

BINDIR= $(DESTDIR)@bindir@
LIBDIR= $(DESTDIR)@libdir@

# other variables
OCAMLBEST= @OCAMLBEST@

export FRAMAC = @FRAMAC@

ASTRAVER_PLUGIN_BYTE= astraver_plugin.byte
ASTRAVER_PLUGIN_OPT= astraver_plugin.opt
ASTRAVER_PLUGIN_BEST= astraver_plugin.$(OCAMLBEST)
.PHONY: $(ASTRAVER_PLUGIN_BYTE) $(ASTRAVER_PLUGIN_OPT)

COQLIB = $(DESTDIR)"@COQLIB@"
COQVER = @COQVER@

V8 = $(wildcard lib/coq/*.v)
VO8 = $(patsubst %.v,%.vo, $(V8))

GENERATED = src/av/version.ml \
            lib/why3/why3.conf \
            lib/why3/z3_enum.drv \
            lib/why3/z3_enum_nobv.drv \
            lib/why3/cvc4_enum.drv \
            lib/why3/cvc4_enum_nobv.drv \
            lib/why3/alt-ergo_enum.drv \
            lib/why3/alt-ergo_remove_triggers_enum.drv \

MORE_GENERATED = lib/why3/z3_enum.gen \
                 lib/why3/z3_enum_nobv.gen \
                 lib/why3/cvc4_enum.gen \
                 lib/why3/cvc4_enum_nobv.gen \
                 lib/why3/alt-ergo_enum.gen \
                 lib/why3/alt-ergo_remove_triggers_enum.gen

# main targets
##############

ASTRAVER=bin/astraver.$(OCAMLBEST)

AV_SOURCES=$(wildcard src/av/*.ml src/av/*.mli src/av/*.mll src/av/*.mly)

BUILDSRC=_build/default/src

ifeq ($(OCAMLBEST),opt)
AVLIB=$(BUILDSRC)/av/astraver.cmxa
else
AVLIB=$(BUILDSRC)/av/astraver.cma
endif

all: all-without-frama-c-plugin $(ASTRAVER_PLUGIN_BEST)

all-without-frama-c-plugin: $(ASTRAVER) coq-@COQ@ $(AVLIB)

opt:  bin/astraver.opt $(ASTRAVER_PLUGIN_OPT)
byte: bin/astraver.byte $(ASTRAVER_PLUGIN_BYTE)

$(BUILDSRC)/av/astraver.cmxa: $(AV_SOURCES) $(GENERATED)
	dune build @install
	dune install astraver

bin/astraver.opt: $(AV_SOURCES) bin $(BUILDSRC)/av/astraver.cmxa
	dune build src/av/main.exe
	if [ -f $(BUILDSRC)/av/main.exe ]; then mv $(BUILDSRC)/av/main.exe $@; fi
	touch $@

bin/astraver.byte: $(AV_SOURCES) bin $(BUILDSRC)/av/astraver.cma
	dune build src/av/main.bc
	if [ -f $(BUILDSRC)/av/main.bc ]; then mv $(BUILDSRC)/av/main.bc $@; fi
	touch $@

bin:
	mkdir -p bin

# Frama-C plugin for AstraVer
ASTRAVER_PLUGIN_PATH=src/frama-c-plugin
$(AASTRAVER_PLUGIN_BYTE): $(addprefix $(BUILDSRC)/av/ astraver.cma)
	$(MAKE) -C $(ASTRAVER_PLUGIN_PATH) depend
	$(MAKE) -C $(ASTRAVER_PLUGIN_PATH) AstraVer.cma

$(ASTRAVER_PLUGIN_OPT): $(addprefix $(BUILDSRC)/av/,astraver.cma astraver.cmxa)
	$(MAKE) -C $(ASTRAVER_PLUGIN_PATH) depend
	$(MAKE) -C $(ASTRAVER_PLUGIN_PATH)

install:
	$(MAKE) -C $(ASTRAVER_PLUGIN_PATH) install
clean::
	$(MAKE) -C $(ASTRAVER_PLUGIN_PATH) clean

LIBWHY3=@libdir@/astraver

WHY3_DATADIR=$(shell why3 --print-datadir)

lib/why3/%.gen: lib/why3/%.tmpl
	./generate.ml $<

lib/why3/%.drv: $(MORE_GENERATED)
	@DRIVER=smt-libv2.drv; \
	if [ $(@F) = alt-ergo_enum.drv -o $(@F) = alt-ergo_remove_triggers_enum.drv ]; then \
	  DRIVER=alt_ergo.drv; \
	elif [ $(@F) = cvc4_enum.drv ]; then \
	  DRIVER=cvc4_15.drv; \
	elif [ $(@F) = z3_enum.drv ]; then \
	  DRIVER=z3_400.drv; \
	fi; \
	cp $< $@; \
	printf "import \"$(WHY3_DATADIR)/drivers/$${DRIVER}\"" >> $@

.PRECIOUS: $(MORE_GENERATED)

lib/why3/why3.conf:  lib/why3/cvc4_enum.drv lib/why3/cvc4_enum_nobv.drv lib/why3/z3_enum.drv lib/why3/z3_enum_nobv.drv lib/why3/alt-ergo_enum.drv lib/why3/alt-ergo_remove_triggers_enum.drv Makefile
	@printf "[main]\n" > $@
	@printf "loadpath=\"$(LIBWHY3)/why3\"\n" >> $@
	@printf "\n" >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"Coq\"\n" >> $@
	@printf "option=\"-R $(LIBWHY3)/coq Astraver\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/coq.drv\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"CVC4\"\n" >> $@
	@printf "alternative = \"\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/cvc4_enum.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"Z3\"\n" >> $@
	@printf "alternative = \"\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/z3_enum.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"Alt-Ergo\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/alt-ergo_enum.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"Alt-Ergo\"\n" >> $@
	@printf "alternative = \"-Em\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/alt-ergo_enum.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"Vampire\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/alt-ergo_enum.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"Spass\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/alt-ergo_enum.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"Eprover\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/alt-ergo_enum.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"CVC4\"\n" >> $@
	@printf "alternative = \"noBV\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/cvc4_enum_nobv.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[prover_modifiers]\n" >> $@
	@printf "name=\"Z3\"\n" >> $@
	@printf "alternative = \"noBV\"\n" >> $@
	@printf "driver=\"$(LIBWHY3)/why3/z3_enum_nobv.gen\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[strategy]\n" >> $@
	@printf "code = \"start:\\\\nc Z3,,noBV 1 2000\\\\nc Alt-Ergo,, 1 2000\\\\nc CVC4,1.4,noBV 1 2000\\\\nt split_goal_wp start\\\\nt introduce_premises next1\\\\nnext1:\\\\nt inline_goal_nometa start\\\\nt inline_all_nometa start\\\\nt eliminate_if next2\\\\nnext2:\\\\nt remove_triggers start\\\\nc Z3,,noBV 5 4000\\\\nc Alt-Ergo,, 5 4000\\\\nc CVC4,1.4,noBV 5 4000\\\\n\"\n" >> $@
	@printf "desc = \"Automatic@ run@ of@ main@ provers@ with@ bitvector@ theory@ abstracted@ out\"\n" >> $@
	@printf	"name = \"Auto level 1 noBV\"\n" >> $@
	@printf "shortcut = \"2\"\n" >> $@
	@printf "\n" >> $@

	@printf "[editor_modifiers coqide]\n" >> $@
	@printf "option=\"-R $(LIBWHY3)/coq Astraver\"\n" >> $@
	@printf "\n"  >> $@

	@printf "[editor_modifiers proofgeneral-coq]\n" >> $@
	@printf "option=\"--eval \\\\\"(setq coq-load-path (cons '(\\\\\\\\\\\\\"$(LIBWHY3)/coq\\\\\\\\\\\\\" \\\\\\\\\\\\\"Astraver\\\\\\\\\\\\\") coq-load-path))\\\\\"\"\n"  >> $@

########
# COQ
########

coq-no:
coq-yes: coq-@COQVER@
coq-v8: $(VO8)
coq-v8.1: $(VO8)

include Version

doc/version.tex src/why/why_version.ml src/av/version.ml: Version version.sh config.status
	BINDIR=@bindir@ LIBDIR=@libdir@ COQVER=$(COQVER) ./version.sh

# installation
##############

install: install-binary install-lib install-man install-coq-@COQ@

BINARYFILES = $(ASTRAVER)

# install-binary should not depend on $(BINARYFILES); otherwise it
# enforces the compilation of gwhy, even when lablgtk2 is not installed
install-binary:
	mkdir -p $(BINDIR)
	cp -f $(ASTRAVER) $(BINDIR)/astraver$(EXE)

install-lib: $(AVLIB) lib/why3/why3.conf
	rm -rf $(LIBDIR)/astraver/why3
	mkdir -p $(LIBDIR)/astraver/why3
	cp -f lib/why3/why3.conf lib/why3/coq.drv lib/why3/core.mlw lib/why3/enum.mlw $(LIBDIR)/astraver/why3
	cp -f $(MORE_GENERATED) $(LIBDIR)/astraver/why3
	cp -f lib/why3/cvc4_enum.drv lib/why3/alt-ergo_enum.drv lib/why3/alt-ergo_remove_triggers_enum.drv lib/why3/z3_enum.drv $(LIBDIR)/astraver/why3
	mkdir -p $(LIBDIR)/astraver
	cp -f $(AVLIB) $(LIBDIR)/astraver

install-man:

install-coq-no:
install-coq-yes: install-coq-@COQVER@
install-coq-v8 install-coq-v8.1:
	if test -w $(COQLIB) ; then \
	  rm -rf $(COQLIB)/user-contrib/Astraver ; \
	  mkdir -p $(COQLIB)/user-contrib/Astraver ; \
	  cp -f $(VO8) $(COQLIB)/user-contrib/Astraver ; \
	else \
	  echo "Cannot copy to Coq standard library. Add \"-R $(LIBDIR)/astraver/coq Astraver\" to Coq options." ;\
	fi
	mkdir -p $(LIBDIR)/astraver/coq
	cp -f $(VO8) $(LIBDIR)/astraver/coq

# doc

DOC=doc/jessie.pdf doc/jessie.html

doc:: $(DOC)

doc/manual.ps: doc/manual.tex doc/version.tex
	$(MAKE) -C doc manual.ps

@ASTRAVERWHY3LIBCOQ@: COQEXTRAR += -R @WHY3COQPATH@ Why3

lib/coq/%.vo: $(V8) lib/coq/Pointer.vo
	touch $@

lib/coq/Pointer.vo: $(V8)
	$(MAKE) -C lib/coq

# myself
########

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf

# clean and depend
##################

clean::
	rm -f .depend.coq
	rm -rf bin
	rm -rf _build
	rm -f lib/coq*/*.vo lib/coq*/*.glob lib/coq*/*~
	rm -f $(GENERATED)
	$(MAKE) -C doc clean
	if test -d examples-v7; then \
		$(MAKE) -C examples-v7 clean ; \
	fi

dist-clean:: clean
	rm -f $(MORE_GENERATED)
	rm -f Makefile config.status config.cache config.log

coq-clean::
	rm .depend.coq

.PHONY: depend
depend:
	$(MAKE) -C $(ASTRAVER_PLUGIN_PATH) depend
