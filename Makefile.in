#
# sample Makefile for Objective Caml
# Copyright (C) 2001 Jean-Christophe FILLIATRE
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License version 2, as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# See the GNU Library General Public License version 2 for more details
# (enclosed in the file LGPL).

# where to install the binaries
prefix=@prefix@
exec_prefix=@exec_prefix@
BINDIR=@bindir@

# where to install the man page
MANDIR=@mandir@

# other variables
OCAMLC   = @OCAMLC@
OCAMLOPT = @OCAMLOPT@
OCAMLDEP = @OCAMLDEP@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLLIB = @OCAMLLIB@
OCAMLBEST= @OCAMLBEST@
OCAMLVERSION = @OCAMLVERSION@

INCLUDES = -I src
BFLAGS   = -g $(INCLUDES) -I +camlp4
OFLAGS   = $(INCLUDES) -I +camlp4

CMO = src/version.cmo src/options.cmo src/loc.cmo src/ident.cmo \
	   src/effect.cmo src/misc.cmo src/report.cmo		\
           src/env.cmo src/rename.cmo src/util.cmo src/parser.cmo	\
           src/ltyping.cmo src/annot.cmo src/typing.cmo src/wp.cmo \
           src/monad.cmo      \
	   src/mlize.cmo src/red.cmo src/vcg.cmo src/pvs.cmo            \
	   src/coq.cmo src/cparser.cmo src/clexer.cmo src/cinterp.cmo \
           src/ocaml.cmo src/main.cmo

CMX      = $(CMO:.cmo=.cmx)

COQC   = @COQC@
COQDEP = @COQDEP@
COQLIB = @COQLIB@
COQINCLUDES = -R lib/coq Coq.why

VO = lib/coq/WhyArrays.vo  lib/coq/WhyBool.vo  lib/coq/WhyInt.vo   \
     lib/coq/WhyTuples.vo  lib/coq/WhyPermut.vo \
     lib/coq/WhySorted.vo  lib/coq/Why.vo      lib/coq/WhyFloat.vo \
     lib/coq/WhyExn.vo lib/coq/WhyCoqCompat.vo lib/coq/WhyLemmas.vo
VFILES=$(VO:.vo=.v)
WHYVO=lib/coq/Why.vo

GENERATED = src/version.ml src/parser.ml \
	    src/clexer.ml src/cparser.ml src/cparser.mli

# main targets
##############

BINARY=bin/why.$(OCAMLBEST)
STATICBINARY=bin/why.static

all: $(BINARY) $(VO)

opt: bin/why.opt

byte : bin/why.byte

bin/why.opt: $(CMX)
	$(OCAMLOPT) $(OFLAGS) -o $@ gramlib.cmxa str.cmxa $^

bin/why.byte: $(CMO)
	$(OCAMLC) $(BFLAGS) -o $@ gramlib.cma str.cma $^

bin/why.static: $(CMX)
	$(OCAMLOPT) -cclib -static $(OFLAGS) -o $@ gramlib.cmxa str.cmxa $^

bin/top: $(CMO)
	ocamlmktop $(BFLAGS) -o $@ gramlib.cma str.cma $^

static:: $(STATICBINARY)

coq:: $(VO)

VERSION=0.72

src/version.ml: Makefile
	echo "let version = \""$(VERSION)"\"" > $@
	echo "let date = \""`date`"\"" >> $@
# 	echo "let sources = \""`pwd`"\"" >> $@
# 	echo "let coqlib = \""$(COQLIB)"\"" >> $@

doc:: doc/version.tex
	cd doc; make

# bench

.PHONY: bench test

bench:: $(BINARY) $(WHYVO)
	cd bench; ./bench "../$(BINARY) --valid"

bench-tc:: $(BINARY) $(WHYVO)
	cd bench; ./bench "../$(BINARY) -tc"

test:: $(BINARY) $(WHYVO)
	$(BINARY) -d -V -coq bench/test.ml

examples:: $(STATICBINARY) $(WHYVO)
	make -C examples

# debugging

db debug: bin/why.byte src/logic.cmo

src/logic.ml: src/logic.mli
	cp -f $^ $@

# installation
##############

install: $(BINARY) $(VO)
	mkdir -p $(BINDIR)
	cp -f $(BINARY) $(BINDIR)/why
	mkdir -p $(MANDIR)/man1
	cp -f doc/why.1 $(MANDIR)/man1
	mkdir -p $(COQLIB)/contrib/why
	cp -f $(VO) $(VFILES) $(COQLIB)/contrib/why

local: $(STATICBINARY) $(VO)
	cp -f $(STATICBINARY) $$HOME/bin/$$OSTYPE/why
	mkdir -p $(COQLIB)/contrib/why
	cp -f $(VO) $(VFILES) $(COQLIB)/contrib/why

demons: $(STATICBINARY) doc/manual.ps
	cp -f $(STATICBINARY) /users/demons/demons/bin/$$OSTYPE/why
	cp doc/manual.ps /users/demons/demons/docs/why.ps

# doc

doc/manual.ps: doc/manual.tex doc/version.tex
	make -C doc manual.ps

doc/version.tex:
	echo "\newcommand{\whyversion}{$(VERSION)}" > $@

doc/manual.html: doc/manual.tex
	make -C doc manual.html

# special rules
###############

CAMLP4=@CAMLP4O@ pa_extend.cmo

src/parser.cmo: src/parser.ml4
	$(OCAMLC) -c $(BFLAGS) -pp "$(CAMLP4) -impl" -impl $<

src/parser.cmx: src/parser.ml4
	$(OCAMLOPT) -c $(OFLAGS) -pp "$(CAMLP4) -impl" -impl $<

src/parser.ml: src/parser.ml4
	$(CAMLP4) pr_o.cmo -impl $< > $@

# generic rules
###############

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly .v .vo

.mli.cmi:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.cmo:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.o:
	$(OCAMLOPT) -c $(OFLAGS) $<

.ml.cmx:
	$(OCAMLOPT) -c $(OFLAGS) $<

.mll.ml:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) -v $<

.mly.mli:
	$(OCAMLYACC) -v $<

.v.vo:
	$(COQC) $(COQINCLUDES) $<

%_why.v: %.mlw $(BINARY)
	$(BINARY) -coq $*.mlw

%_why.pvs: %.mlw $(BINARY)
	$(BINARY) -pvs $*.mlw

# Emacs tags
############

tags:
	find . -name "*.ml*" | sort -r | xargs \
	etags "--regex=/let[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/and[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/exception[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/val[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/module[ \t]+\([^ \t]+\)/\1/"

otags:
	otags src/*.mli src/*.ml

# distrib
#########

NAME=why-$(VERSION)
EXPORT=export/$(NAME)

FTP = $(HOME)/ftp/why
WWW = $(HOME)/WWW/why

FILES =src/*.ml* Makefile.in configure.in configure .depend \
       README INSTALL COPYING GPL CHANGES doc/manual.ps doc/why.1 \
	examples/Makefile* examples/*/*.mlw examples/*/*.v \
	examples/*/.depend examples/*/Makefile \
	lib/coq/*.v lib/pvs/why.*

distrib export: source export-doc export-examples linux

source: doc/manual.ps
	mkdir -p $(EXPORT)/bin
	cp --parents $(FILES) $(EXPORT)
	cd export; tar cf $(NAME).tar $(NAME); gzip -f --best $(NAME).tar
	cp CHANGES export/$(NAME).tar.gz $(FTP)
	echo "<#def version>$(VERSION)</#def>" > $(HOME)/www/why/version.prehtml

EXFILES = lib/coq/*.v examples/*/*.v examples/*/*.mlw

export-examples:
	cp --parents $(EXFILES) $(WWW)
	make -C $(WWW)/examples clean depend
	echo "*** faire make all dans $(WWW)/examples ***"

export-doc: doc/manual.ps doc/manual.html
	cp $^ $(WWW)

BINARYNAME = $(NAME)-$(OSTYPE)

linux: binary

BINARYFILES = README INSTALL COPYING GPL $(STATICBINARY) $(VO) \
	doc/why.1 doc/manual.ps \
	lib/coq/*.v lib/pvs/why.*

binary: $(BINARYFILES)
	mkdir -p export/$(BINARYNAME)
	cp --parents $(BINARYFILES) export/$(BINARYNAME)
	(cd export; tar czf $(BINARYNAME).tar.gz $(BINARYNAME))
	cp export/$(BINARYNAME).tar.gz $(FTP)

# myself
########

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf 

# clean and depend
##################

clean::
	rm -f src/*.cm[iox] src/*.o src/*~
	rm -f bin/why.opt bin/why.byte bin/why.static bin/top
	rm -f lib/coq/*.vo lib/coq/*~
	rm -f $(GENERATED)
	make -C doc clean
	make -C examples clean

dist-clean:: clean
	rm -f Makefile config.status config.cache config.log

coq-clean::
	rm -f lib/coq/*.vo examples/*/*.vo

.depend depend:: $(GENERATED)
	rm -f .depend
	$(OCAMLDEP) $(INCLUDES) src/*.ml src/*.mli > .depend
	$(COQDEP) $(COQINCLUDES) lib/coq/*.v >> .depend

alldepend:
	make -C examples depend

include .depend
