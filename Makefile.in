#
# sample Makefile for Objective Caml
# Copyright (C) 2001 Jean-Christophe FILLIATRE
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License version 2, as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# See the GNU Library General Public License version 2 for more details
# (enclosed in the file LGPL).

# where to install the binaries
prefix=@prefix@
exec_prefix=@exec_prefix@
BINDIR=@bindir@

# where to install the man page
MANDIR=@mandir@

# other variables
OCAMLC   = @OCAMLC@
OCAMLOPT = @OCAMLOPT@
OCAMLDEP = @OCAMLDEP@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLLIB = @OCAMLLIB@
OCAMLBEST= @OCAMLBEST@
OCAMLVERSION = @OCAMLVERSION@

INCLUDES = -I src -I c -I intf
BFLAGS   = -g $(INCLUDES) -I +camlp4 -I +lablgtk2
OFLAGS   = $(INCLUDES) -I +camlp4 -I +lablgtk2

COQC7  = @COQC7@
COQC8  = @COQC8@
COQDEP = @COQDEP@
COQLIB = @COQLIB@

VO7= lib/coq-v7/WhyArrays.vo  lib/coq-v7/WhyBool.vo  lib/coq-v7/WhyInt.vo \
     lib/coq-v7/WhyTuples.vo  lib/coq-v7/WhyPermut.vo \
     lib/coq-v7/WhySorted.vo  lib/coq-v7/Why.vo     lib/coq-v7/WhyFloat.vo \
     lib/coq-v7/WhyExn.vo lib/coq-v7/WhyCoqCompat.vo \
     lib/coq-v7/WhyLemmas.vo  lib/coq-v7/WhyTactics.vo lib/coq-v7/WhyCM.vo
V7FILES=$(VO7:.vo=.v)

VO8= lib/coq/WhyArrays.vo  lib/coq/WhyBool.vo  lib/coq/WhyInt.vo \
     lib/coq/WhyTuples.vo  lib/coq/WhyPermut.vo \
     lib/coq/WhySorted.vo  lib/coq/Why.vo     lib/coq/WhyFloat.vo \
     lib/coq/WhyExn.vo lib/coq/WhyCoqCompat.vo \
     lib/coq/WhyLemmas.vo  lib/coq/WhyTactics.vo lib/coq/WhyCM.vo
V8FILES=$(VO8:.vo=.v)

PVSFILES = lib/pvs/why.pvs
PVSLIB = @PVSLIB@

GENERATED = src/version.ml src/parser.ml src/linenum.ml \
	    c/clexer.ml c/cparser.ml c/cparser.mli \
	    c/cllexer.ml c/clparser.ml c/clparser.mli \
	    intf/hilight.ml tools/why2html.ml

# main targets
##############

BINARY=bin/why.$(OCAMLBEST)
CADUCEUS=bin/caduceus.$(OCAMLBEST)
STATICBINARY=bin/why.static
WHY2HTML=bin/why2html.$(OCAMLBEST)

all: $(BINARY) $(CADUCEUS) coq-@COQ@ $(WHY2HTML)

opt: bin/why.opt bin/caduceus.opt

byte : bin/why.byte bin/caduceus.byte

# why
CMO = src/version.cmo src/options.cmo src/linenum.cmo src/loc.cmo \
	   src/ident.cmo \
	   src/effect.cmo src/misc.cmo src/report.cmo		\
           src/env.cmo src/rename.cmo src/util.cmo src/parser.cmo	\
           src/ltyping.cmo src/annot.cmo src/typing.cmo src/wp.cmo \
           src/monad.cmo      \
	   src/mlize.cmo src/red.cmo src/vcg.cmo src/pvs.cmo \
	   src/holl.cmo src/harvey.cmo src/simplify.cmo \
           src/regen.cmo src/mizar.cmo src/coq.cmo \
           src/ocaml.cmo src/main.cmo
CMX      = $(CMO:.cmo=.cmx)

bin/why.opt: $(CMX) src/why.cmx 
	$(OCAMLOPT) $(OFLAGS) -o $@ gramlib.cmxa str.cmxa $^
	strip $@

bin/why.byte: $(CMO) src/why.cmo
	$(OCAMLC) $(BFLAGS) -o $@ gramlib.cma str.cma $^

bin/why.static: $(CMX) src/why.cmx 
	$(OCAMLOPT) -cclib -static $(OFLAGS) -o $@ gramlib.cmxa str.cmxa $^
	strip $@

bin/top: $(CMO)
	ocamlmktop $(BFLAGS) -o $@ gramlib.cma str.cma $^

# caduceus
CCMO = src/linenum.cmo src/loc.cmo c/coptions.cmo \
       c/ctypes.cmo c/cparser.cmo c/clexer.cmo \
       c/clparser.cmo c/cllexer.cmo \
       c/creport.cmo c/ctyping.cmo c/cinterp.cmo c/cmain.cmo
CCMX = $(CCMO:.cmo=.cmx)

bin/caduceus.opt: $(CCMX)
	$(OCAMLOPT) $(OFLAGS) -o $@ gramlib.cmxa str.cmxa $^
	strip $@

bin/caduceus.byte: $(CCMO)
	$(OCAMLC) $(BFLAGS) -o $@ gramlib.cma str.cma $^

# graphical interface
GCMO = $(CMO) intf/navig.cmo intf/hilight.cmo intf/viewer.cmo
GCMX = $(GCMO:.cmo=.cmx)

bin/gwhy.opt: $(GCMX)
	$(OCAMLOPT) $(OFLAGS) -o $@ unix.cmxa gramlib.cmxa str.cmxa lablgtk.cmxa $^
	strip $@

bin/gwhy.byte: $(GCMO)
	$(OCAMLC) $(BFLAGS) -o $@ unix.cma gramlib.cma str.cma lablgtk.cma $^

# tools
bin/why2html.byte: tools/why2html.ml
	$(OCAMLC) $(BFLAGS) -o $@ $^

bin/why2html.opt: tools/why2html.ml
	$(OCAMLOPT) $(OFLAGS) -o $@ $^

static:: $(STATICBINARY)

coq-no:
coq-yes: coq-@COQVER@
coq-v7: $(VO7)
coq-v8: $(VO7) $(VO8)

# Why version
VERSION=1.40
# Caduceus version
CVERSION=0.1

src/version.ml: Makefile
	echo "let version = \""$(VERSION)"\"" > $@
	echo "let cversion = \""$(CVERSION)"\"" >> $@
	echo "let date = \""`date`"\"" >> $@
# 	echo "let sources = \""`pwd`"\"" >> $@
# 	echo "let coqlib = \""$(COQLIB)"\"" >> $@

doc:: doc/version.tex
	cd doc; make

# bench

.PHONY: bench test

WHYVO=lib/coq/Why.vo

bench:: $(BINARY) $(WHYVO)
	cd bench; sh ./bench "../$(BINARY) --valid"

bench-c:: $(CADUCEUS) $(WHYVO)
	cd bench/c; sh ./bench

bench-pvs:: $(BINARY) $(WHYVO)
	cd bench; sh ./bench "../$(BINARY) --valid" pvs

bench-tc:: $(BINARY) $(WHYVO)
	cd bench; sh ./bench "../$(BINARY) -tc"

test:: $(BINARY) $(WHYVO)
	$(BINARY) -d -V -coq bench/test.ml

examples:: $(BINARY) $(WHYVO)
	make -C examples

# debugging

db debug: bin/why.byte src/logic.cmo

src/logic.ml: src/logic.mli
	cp -f $^ $@

# installation
##############

install: install-binary install-man install-coq-@COQ@ install-pvs-@PVS@ 

install-binary: $(BINARY) $(WHY2HTML)
	mkdir -p $(BINDIR)
	cp -f $(BINARY) $(BINDIR)/why
	cp -f $(WHY2HTML) $(BINDIR)/why2html

install-man:
	mkdir -p $(MANDIR)/man1
	cp -f doc/*.1 $(MANDIR)/man1

install-coq-no:
install-coq-yes: install-coq-@COQVER@
install-coq-v7:
	mkdir -p $(COQLIB)/contrib7/why
	cp -f $(VO7) $(V7FILES) $(COQLIB)/contrib7/why
install-coq-v8: install-coq-v7
	mkdir -p $(COQLIB)/contrib/why
	cp -f $(VO8) $(V8FILES) $(COQLIB)/contrib/why

install-pvs-no:
install-pvs-yes:
	mkdir -p $(PVSLIB)/why
	cp $(PVSFILES) $(PVSLIB)/why

install-mizar-no:
install-mizar-yes:
	mkdir -p @MIZARLIB@/mml/dict
	cp lib/mizar/why.miz @MIZARLIB@/mml
	cp lib/mizar/dict/why.voc @MIZARLIB@/mml/dict

local: $(STATICBINARY) $(WHY2HTML) $(VO)
	cp -f $(STATICBINARY) $$HOME/bin/$$OSTYPE/why
	cp -f $(WHY2HTML) $$HOME/bin/$$OSTYPE/why2html
	mkdir -p $(COQLIB)/contrib7/why
	cp -f $(VO7) $(VFILES) $(COQLIB)/contrib7/why
	mkdir -p $(COQLIB)/contrib/why
	cp -f $(VO8) $(VFILES) $(COQLIB)/contrib/why
	mkdir -p $(PVSLIB)/why
	cp $(PVSFILES) $(PVSLIB)/why
	mkdir -p $(MIZFILES)/mml/dict
	cp lib/mizar/why.miz $(MIZFILES)/mml
	cp lib/mizar/dict/why.voc $(MIZFILES)/mml/dict
	mkdir -p $$HOME/man/man1
	cp -f doc/*.1 $$HOME/man/man1

demons: $(STATICBINARY) doc/manual.ps
	cp -f $(STATICBINARY) /users/demons/demons/bin/$$OSTYPE/why
	cp doc/manual.ps /users/demons/demons/docs/why.ps

# doc

doc/manual.ps: doc/manual.tex doc/version.tex
	make -C doc manual.ps

doc/version.tex: Makefile.in
	echo "\newcommand{\whyversion}{$(VERSION)}" > $@
	echo "\newcommand{\caduceusversion}{$(CVERSION)}" > $@

doc/manual.html: doc/manual.tex doc/version.tex
	make -C doc manual.html

# special rules
###############

CAMLP4=@CAMLP4O@ pa_extend.cmo

src/parser.cmo: src/parser.ml4
	$(OCAMLC) -c $(BFLAGS) -pp "$(CAMLP4) -impl" -impl $<

src/parser.cmx: src/parser.ml4
	$(OCAMLOPT) -c $(OFLAGS) -pp "$(CAMLP4) -impl" -impl $<

src/parser.ml: src/parser.ml4
	$(CAMLP4) pr_o.cmo -impl $< > $@

# generic rules
###############

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly .v .vo

.mli.cmi:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.cmo:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.o:
	$(OCAMLOPT) -c $(OFLAGS) $<

.ml.cmx:
	$(OCAMLOPT) -c $(OFLAGS) $<

.mll.ml:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) -v $<

.mly.mli:
	$(OCAMLYACC) -v $<

lib/coq/%.vo: lib/coq/%.v
	$(COQC8) -R lib/coq Coq.why $<

lib/coq-v7/%.vo: lib/coq-v7/%.v
	$(COQC7) -R lib/coq-v7 Coq.why $<

%_why.v: %.mlw $(BINARY)
	$(BINARY) -coq $*.mlw

%_why.pvs: %.mlw $(BINARY)
	$(BINARY) -pvs $*.mlw

# Emacs tags
############

tags:
	find src -name "*.ml*" | sort -r | xargs \
	etags "--regex=/let[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/and[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/exception[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/val[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/module[ \t]+\([^ \t]+\)/\1/"

otags:
	otags src/*.mli src/*.ml c/*.mli c/*.ml intf/*.mli intf/*.ml

wc:
	ocamlwc -p src/*.ml* c/*.ml* intf/*.ml*

# distrib
#########

NAME=why-$(VERSION)
EXPORT=export/$(NAME)

FTP = $(HOME)/ftp/why
WWW = $(HOME)/WWW/why

FILES =src/*.ml* c/*.ml* intf/*.ml* tools/*.ml* \
       Makefile.in configure.in configure .depend \
       README INSTALL COPYING GPL CHANGES \
       doc/Makefile doc/manual.ps doc/why.1 \
	examples/Makefile* \
	examples/*/*.c examples/*/*.mlw examples/*/*.v examples/*/*.sx \
	examples/*/.depend examples/*/Makefile \
	bench/bench.in bench/good*/*.mlw bench/good*/*.v \
        bench/c/bench bench/c/*/*.c bench/c/*/*/*.c \
	lib/coq*/*.v lib/pvs/why.* lib/mizar/why.miz lib/mizar/dict/why.voc

distrib export: source export-doc export-examples linux
	make -C $(HOME)/www/why install

source: doc/manual.ps export/$(NAME).tar.gz
	cp CHANGES export/$(NAME).tar.gz $(FTP)
	echo "<#def version>$(VERSION)</#def>" > $(HOME)/www/why/version.prehtml

export/$(NAME).tar.gz:
	mkdir -p $(EXPORT)/bin
	cp --parents $(FILES) $(EXPORT)
	cd export; tar cf $(NAME).tar $(NAME); gzip -f --best $(NAME).tar

tarball: export/$(NAME).tar.gz

EXFILES = lib/coq*/*.v examples/*/*.v examples/*/*.mlw

export-examples:
	cp --parents $(EXFILES) $(WWW)
	make -C $(WWW)/examples clean depend
	echo "*** faire make all dans $(WWW)/examples ***"

export-doc: doc/manual.ps doc/manual.html
	cp $^ $(WWW)/manual
	(cd $(WWW)/manual; hacha manual.html)

BINARYNAME = $(NAME)-$(OSTYPE)

linux: binary

BINARYFILES = README INSTALL COPYING GPL $(STATICBINARY) $(VO7) $(VO8) \
	doc/why.1 doc/manual.ps \
	lib/coq*/*.v lib/pvs/why.* lib/mizar/why.* lib/mizar/dict/why.*

binary: $(BINARYFILES)
	mkdir -p export/$(BINARYNAME)
	cp --parents $(BINARYFILES) export/$(BINARYNAME)
	(cd export; tar czf $(BINARYNAME).tar.gz $(BINARYNAME))
	cp export/$(BINARYNAME).tar.gz $(FTP)

# myself
########

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf 

# clean and depend
##################

clean::
	rm -f src/*.cm[iox] src/*.o src/*~
	rm -f c/*.cm[iox] c/*.o c/*~
	rm -f intf/*.cm[iox] intf/*.o intf/*~
	rm -f bin/why.opt bin/why.byte bin/why.static bin/top
	rm -f lib/coq*/*.vo lib/coq*/*~
	rm -f $(GENERATED)
	make -C doc clean
	make -C examples-v7 clean
	make -C examples clean

dist-clean:: clean
	rm -f Makefile config.status config.cache config.log

coq-clean::
	rm -f lib/coq*/*.vo examples/*/*.vo

.depend depend:: $(GENERATED)
	rm -f .depend
	$(OCAMLDEP) $(INCLUDES) src/*.ml src/*.mli c/*.mli c/*.ml intf/*.ml intf/*.mli > .depend

.depend.coq: lib/coq*/*.v
	if test @COQ@ == yes; then \
	  rm -f .depend.coq; \
	  $(COQDEP) -R lib/coq Coq.why lib/coq/*.v > .depend.coq; \
	  $(COQDEP) -R lib/coq-v7 Coq.why lib/coq-v7/*.v >> .depend.coq; \
	fi

alldepend:
	make -C examples-v7 depend
	make -C examples depend

include .depend
include .depend.coq
