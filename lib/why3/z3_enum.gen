theory core.Jessie_pointer
  meta "select_inst" "none"
  meta "select_lskept" "none"
  meta "select_lsinst" "all"
end

theory enum.Bit_int8

  syntax type t "(_ BitVec 8)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvsdiv %1 %2)"
  syntax function (%%) "(bvsrem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 8) %1)"
  syntax converter of_int_const "(_ bv%1 8)"

  remove prop Lsr_unsigned
  syntax type tt "(_ BitVec 16)"

  syntax function  extend  "((_ sign_extend 8) %1)"
  syntax predicate is_safe "(= ((_ extract 15 8) %1) ((_ repeat 8) ((_ extract 7 7) %1)))"
  syntax function (+%~)  "(bvadd %1 %2)"
  syntax function (-%~)  "(bvsub %1 %2)"
  syntax function (-%~_) "(bvneg %1)"
  syntax function ( *%~) "(bvmul %1 %2)"
  syntax function (/%~)  "(bvsdiv %1 %2)"
  syntax function (%%~)  "(bvsrem %1 %2)"

  syntax function lsl_modulo_ "(bvshl %1 %2)"

  remove prop Nth
  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvslt %1 %2)"
  syntax predicate le "(bvsle %1 %2)"
  syntax predicate gt "(bvsgt %1 %2)"
  syntax predicate ge "(bvsge %1 %2)"

  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
  remove prop To_int_def
end

theory enum.Bit_uint8

  syntax type t "(_ BitVec 8)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvudiv %1 %2)"
  syntax function (%%) "(bvurem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 8) %1)"
  syntax converter of_int_const "(_ bv%1 8)"

  remove prop Asr_signed
  syntax type tt "(_ BitVec 16)"

  syntax function  extend  "((_ zero_extend 8) %1)"
  syntax predicate is_safe "(= ((_ extract 15 8) %1) (_ bv0 8))"
  syntax function (+%~)  "(bvadd %1 %2)"
  syntax function (-%~)  "(bvsub %1 %2)"
  syntax function (-%~_) "(bvneg %1)"
  syntax function ( *%~) "(bvmul %1 %2)"
  syntax function (/%~)  "(bvudiv %1 %2)"
  syntax function (%%~)  "(bvurem %1 %2)"

  syntax function lsl_modulo_ "(bvshl %1 %2)"

  remove prop Nth
  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvult %1 %2)"
  syntax predicate le "(bvule %1 %2)"
  syntax predicate gt "(bvugt %1 %2)"
  syntax predicate ge "(bvuge %1 %2)"

  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
  remove prop To_int_def
end

theory enum.Bit_int16

  syntax type t "(_ BitVec 16)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvsdiv %1 %2)"
  syntax function (%%) "(bvsrem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 16) %1)"
  syntax converter of_int_const "(_ bv%1 16)"

  remove prop Lsr_unsigned
  syntax type tt "(_ BitVec 32)"

  syntax function  extend  "((_ sign_extend 16) %1)"
  syntax predicate is_safe "(= ((_ extract 31 16) %1) ((_ repeat 16) ((_ extract 15 15) %1)))"
  syntax function (+%~)  "(bvadd %1 %2)"
  syntax function (-%~)  "(bvsub %1 %2)"
  syntax function (-%~_) "(bvneg %1)"
  syntax function ( *%~) "(bvmul %1 %2)"
  syntax function (/%~)  "(bvsdiv %1 %2)"
  syntax function (%%~)  "(bvsrem %1 %2)"

  syntax function lsl_modulo_ "(bvshl %1 %2)"

  remove prop Nth
  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvslt %1 %2)"
  syntax predicate le "(bvsle %1 %2)"
  syntax predicate gt "(bvsgt %1 %2)"
  syntax predicate ge "(bvsge %1 %2)"

  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
  remove prop To_int_def
end

theory enum.Bit_uint16

  syntax type t "(_ BitVec 16)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvudiv %1 %2)"
  syntax function (%%) "(bvurem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 16) %1)"
  syntax converter of_int_const "(_ bv%1 16)"

  remove prop Asr_signed
  syntax type tt "(_ BitVec 32)"

  syntax function  extend  "((_ zero_extend 16) %1)"
  syntax predicate is_safe "(= ((_ extract 31 16) %1) (_ bv0 16))"
  syntax function (+%~)  "(bvadd %1 %2)"
  syntax function (-%~)  "(bvsub %1 %2)"
  syntax function (-%~_) "(bvneg %1)"
  syntax function ( *%~) "(bvmul %1 %2)"
  syntax function (/%~)  "(bvudiv %1 %2)"
  syntax function (%%~)  "(bvurem %1 %2)"

  syntax function lsl_modulo_ "(bvshl %1 %2)"

  remove prop Nth
  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvult %1 %2)"
  syntax predicate le "(bvule %1 %2)"
  syntax predicate gt "(bvugt %1 %2)"
  syntax predicate ge "(bvuge %1 %2)"

  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
  remove prop To_int_def
end

theory enum.Bit_int32

  syntax type t "(_ BitVec 32)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvsdiv %1 %2)"
  syntax function (%%) "(bvsrem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 32) %1)"
  syntax converter of_int_const "(_ bv%1 32)"

  remove prop Lsr_unsigned
  syntax type tt "(_ BitVec 64)"

  syntax function  extend  "((_ sign_extend 32) %1)"
  syntax predicate is_safe "(= ((_ extract 63 32) %1) ((_ repeat 32) ((_ extract 31 31) %1)))"
  syntax function (+%~)  "(bvadd %1 %2)"
  syntax function (-%~)  "(bvsub %1 %2)"
  syntax function (-%~_) "(bvneg %1)"
  syntax function ( *%~) "(bvmul %1 %2)"
  syntax function (/%~)  "(bvsdiv %1 %2)"
  syntax function (%%~)  "(bvsrem %1 %2)"

  syntax function lsl_modulo_ "(bvshl %1 %2)"

  remove prop Nth
  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvslt %1 %2)"
  syntax predicate le "(bvsle %1 %2)"
  syntax predicate gt "(bvsgt %1 %2)"
  syntax predicate ge "(bvsge %1 %2)"

  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
  remove prop To_int_def
end

theory enum.Bit_uint32

  syntax type t "(_ BitVec 32)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvudiv %1 %2)"
  syntax function (%%) "(bvurem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 32) %1)"
  syntax converter of_int_const "(_ bv%1 32)"

  remove prop Asr_signed
  syntax type tt "(_ BitVec 64)"

  syntax function  extend  "((_ zero_extend 32) %1)"
  syntax predicate is_safe "(= ((_ extract 63 32) %1) (_ bv0 32))"
  syntax function (+%~)  "(bvadd %1 %2)"
  syntax function (-%~)  "(bvsub %1 %2)"
  syntax function (-%~_) "(bvneg %1)"
  syntax function ( *%~) "(bvmul %1 %2)"
  syntax function (/%~)  "(bvudiv %1 %2)"
  syntax function (%%~)  "(bvurem %1 %2)"

  syntax function lsl_modulo_ "(bvshl %1 %2)"

  remove prop Nth
  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvult %1 %2)"
  syntax predicate le "(bvule %1 %2)"
  syntax predicate gt "(bvugt %1 %2)"
  syntax predicate ge "(bvuge %1 %2)"

  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
  remove prop To_int_def
end

theory enum.Bit_int64

  syntax type t "(_ BitVec 64)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvsdiv %1 %2)"
  syntax function (%%) "(bvsrem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 64) %1)"
  syntax converter of_int_const "(_ bv%1 64)"

  remove prop Lsr_unsigned
  syntax type tt "(_ BitVec 128)"

  syntax function  extend  "((_ sign_extend 64) %1)"
  syntax predicate is_safe "(= ((_ extract 127 64) %1) ((_ repeat 64) ((_ extract 63 63) %1)))"
  syntax function (+%~)  "(bvadd %1 %2)"
  syntax function (-%~)  "(bvsub %1 %2)"
  syntax function (-%~_) "(bvneg %1)"
  syntax function ( *%~) "(bvmul %1 %2)"
  syntax function (/%~)  "(bvsdiv %1 %2)"
  syntax function (%%~)  "(bvsrem %1 %2)"

  syntax function lsl_modulo_ "(bvshl %1 %2)"

  remove prop Nth
  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvslt %1 %2)"
  syntax predicate le "(bvsle %1 %2)"
  syntax predicate gt "(bvsgt %1 %2)"
  syntax predicate ge "(bvsge %1 %2)"

  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
end

theory enum.Bit_uint64

  syntax type t "(_ BitVec 64)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvudiv %1 %2)"
  syntax function (%%) "(bvurem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 64) %1)"
  syntax converter of_int_const "(_ bv%1 64)"

  remove prop Asr_signed
  syntax type tt "(_ BitVec 128)"

  syntax function  extend  "((_ zero_extend 64) %1)"
  syntax predicate is_safe "(= ((_ extract 127 64) %1) (_ bv0 64))"
  syntax function (+%~)  "(bvadd %1 %2)"
  syntax function (-%~)  "(bvsub %1 %2)"
  syntax function (-%~_) "(bvneg %1)"
  syntax function ( *%~) "(bvmul %1 %2)"
  syntax function (/%~)  "(bvudiv %1 %2)"
  syntax function (%%~)  "(bvurem %1 %2)"

  syntax function lsl_modulo_ "(bvshl %1 %2)"

  remove prop Nth
  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvult %1 %2)"
  syntax predicate le "(bvule %1 %2)"
  syntax predicate gt "(bvugt %1 %2)"
  syntax predicate ge "(bvuge %1 %2)"

  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
end

theory enum.Bit_uint8_of_bit_int8
  syntax function cast_modulo "%1"
  syntax predicate is_safe "(= ((_ extract 7 7) %1) (_ bv0 1))"
  syntax predicate bit_int8_as_bit_uint8 "(= %1 %2)"
end

theory enum.Bit_int16_of_bit_int8
  syntax function cast_modulo "((_ sign_extend 8) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_int8_as_bit_int16 "(= %1 (concat  %3 %2))"
end

theory enum.Bit_uint16_of_bit_int8
  syntax function cast_modulo "((_ sign_extend 8) %1)"
  syntax predicate is_safe "(= ((_ extract 7 7) %1) (_ bv0 1))"
  syntax predicate bit_int8_as_bit_uint16 "(= %1 (concat  %3 %2))"
end

theory enum.Bit_int32_of_bit_int8
  syntax function cast_modulo "((_ sign_extend 24) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_int8_as_bit_int32 "(= %1 (concat (concat (concat  %5 %4) %3) %2))"
end

theory enum.Bit_uint32_of_bit_int8
  syntax function cast_modulo "((_ sign_extend 24) %1)"
  syntax predicate is_safe "(= ((_ extract 7 7) %1) (_ bv0 1))"
  syntax predicate bit_int8_as_bit_uint32 "(= %1 (concat (concat (concat  %5 %4) %3) %2))"
end

theory enum.Bit_int64_of_bit_int8
  syntax function cast_modulo "((_ sign_extend 56) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_int8_as_bit_int64 "(= %1 (concat (concat (concat (concat (concat (concat (concat  %9 %8) %7) %6) %5) %4) %3) %2))"
end

theory enum.Bit_uint64_of_bit_int8
  syntax function cast_modulo "((_ sign_extend 56) %1)"
  syntax predicate is_safe "(= ((_ extract 7 7) %1) (_ bv0 1))"
  syntax predicate bit_int8_as_bit_uint64 "(= %1 (concat (concat (concat (concat (concat (concat (concat  %9 %8) %7) %6) %5) %4) %3) %2))"
end

theory enum.Bit_int8_of_bit_uint8
  syntax function cast_modulo "%1"
  syntax predicate is_safe "(= ((_ extract 7 7) %1) (_ bv0 1))"
  syntax predicate bit_uint8_as_bit_int8 "(= %1 %2)"
end

theory enum.Bit_int16_of_bit_uint8
  syntax function cast_modulo "((_ zero_extend 8) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_uint8_as_bit_int16 "(= %1 (concat  %3 %2))"
end

theory enum.Bit_uint16_of_bit_uint8
  syntax function cast_modulo "((_ zero_extend 8) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_uint8_as_bit_uint16 "(= %1 (concat  %3 %2))"
end

theory enum.Bit_int32_of_bit_uint8
  syntax function cast_modulo "((_ zero_extend 24) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_uint8_as_bit_int32 "(= %1 (concat (concat (concat  %5 %4) %3) %2))"
end

theory enum.Bit_uint32_of_bit_uint8
  syntax function cast_modulo "((_ zero_extend 24) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_uint8_as_bit_uint32 "(= %1 (concat (concat (concat  %5 %4) %3) %2))"
end

theory enum.Bit_int64_of_bit_uint8
  syntax function cast_modulo "((_ zero_extend 56) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_uint8_as_bit_int64 "(= %1 (concat (concat (concat (concat (concat (concat (concat  %9 %8) %7) %6) %5) %4) %3) %2))"
end

theory enum.Bit_uint64_of_bit_uint8
  syntax function cast_modulo "((_ zero_extend 56) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_uint8_as_bit_uint64 "(= %1 (concat (concat (concat (concat (concat (concat (concat  %9 %8) %7) %6) %5) %4) %3) %2))"
end

theory enum.Bit_int8_of_bit_int16
  syntax function cast_modulo "((_ extract 7 0) %1)"
  syntax predicate is_safe "(= ((_ extract 15 8) %1) ((_ repeat 8) ((_ extract 7 7) %1)))"
  syntax predicate bit_int16_as_bit_int8 "(and (= %2 ((_ extract 7 0) %1)) (= %3 ((_ extract 15 8) %1)))"
end

theory enum.Bit_uint8_of_bit_int16
  syntax function cast_modulo "((_ extract 7 0) %1)"
  syntax predicate is_safe "(= ((_ extract 15 8) %1) (_ bv0 8))"
  syntax predicate bit_int16_as_bit_uint8 "(and (= %2 ((_ extract 7 0) %1)) (= %3 ((_ extract 15 8) %1)))"
end

theory enum.Bit_uint16_of_bit_int16
  syntax function cast_modulo "%1"
  syntax predicate is_safe "(= ((_ extract 15 15) %1) (_ bv0 1))"
  syntax predicate bit_int16_as_bit_uint16 "(= %1 %2)"
end

theory enum.Bit_int32_of_bit_int16
  syntax function cast_modulo "((_ sign_extend 16) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_int16_as_bit_int32 "(= %1 (concat  %3 %2))"
end

theory enum.Bit_uint32_of_bit_int16
  syntax function cast_modulo "((_ sign_extend 16) %1)"
  syntax predicate is_safe "(= ((_ extract 15 15) %1) (_ bv0 1))"
  syntax predicate bit_int16_as_bit_uint32 "(= %1 (concat  %3 %2))"
end

theory enum.Bit_int64_of_bit_int16
  syntax function cast_modulo "((_ sign_extend 48) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_int16_as_bit_int64 "(= %1 (concat (concat (concat  %5 %4) %3) %2))"
end

theory enum.Bit_uint64_of_bit_int16
  syntax function cast_modulo "((_ sign_extend 48) %1)"
  syntax predicate is_safe "(= ((_ extract 15 15) %1) (_ bv0 1))"
  syntax predicate bit_int16_as_bit_uint64 "(= %1 (concat (concat (concat  %5 %4) %3) %2))"
end

theory enum.Bit_int8_of_bit_uint16
  syntax function cast_modulo "((_ extract 7 0) %1)"
  syntax predicate is_safe "(= ((_ extract 15 8) %1) ((_ repeat 8) ((_ extract 7 7) %1)))"
  syntax predicate bit_uint16_as_bit_int8 "(and (= %2 ((_ extract 7 0) %1)) (= %3 ((_ extract 15 8) %1)))"
end

theory enum.Bit_uint8_of_bit_uint16
  syntax function cast_modulo "((_ extract 7 0) %1)"
  syntax predicate is_safe "(= ((_ extract 15 8) %1) (_ bv0 8))"
  syntax predicate bit_uint16_as_bit_uint8 "(and (= %2 ((_ extract 7 0) %1)) (= %3 ((_ extract 15 8) %1)))"
end

theory enum.Bit_int16_of_bit_uint16
  syntax function cast_modulo "%1"
  syntax predicate is_safe "(= ((_ extract 15 15) %1) (_ bv0 1))"
  syntax predicate bit_uint16_as_bit_int16 "(= %1 %2)"
end

theory enum.Bit_int32_of_bit_uint16
  syntax function cast_modulo "((_ zero_extend 16) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_uint16_as_bit_int32 "(= %1 (concat  %3 %2))"
end

theory enum.Bit_uint32_of_bit_uint16
  syntax function cast_modulo "((_ zero_extend 16) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_uint16_as_bit_uint32 "(= %1 (concat  %3 %2))"
end

theory enum.Bit_int64_of_bit_uint16
  syntax function cast_modulo "((_ zero_extend 48) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_uint16_as_bit_int64 "(= %1 (concat (concat (concat  %5 %4) %3) %2))"
end

theory enum.Bit_uint64_of_bit_uint16
  syntax function cast_modulo "((_ zero_extend 48) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_uint16_as_bit_uint64 "(= %1 (concat (concat (concat  %5 %4) %3) %2))"
end

theory enum.Bit_int8_of_bit_int32
  syntax function cast_modulo "((_ extract 7 0) %1)"
  syntax predicate is_safe "(= ((_ extract 31 8) %1) ((_ repeat 24) ((_ extract 7 7) %1)))"
  syntax predicate bit_int32_as_bit_int8 "(and (= %2 ((_ extract 7 0) %1)) (= %3 ((_ extract 15 8) %1)) (= %4 ((_ extract 23 16) %1)) (= %5 ((_ extract 31 24) %1)))"
end

theory enum.Bit_uint8_of_bit_int32
  syntax function cast_modulo "((_ extract 7 0) %1)"
  syntax predicate is_safe "(= ((_ extract 31 8) %1) (_ bv0 24))"
  syntax predicate bit_int32_as_bit_uint8 "(and (= %2 ((_ extract 7 0) %1)) (= %3 ((_ extract 15 8) %1)) (= %4 ((_ extract 23 16) %1)) (= %5 ((_ extract 31 24) %1)))"
end

theory enum.Bit_int16_of_bit_int32
  syntax function cast_modulo "((_ extract 15 0) %1)"
  syntax predicate is_safe "(= ((_ extract 31 16) %1) ((_ repeat 16) ((_ extract 15 15) %1)))"
  syntax predicate bit_int32_as_bit_int16 "(and (= %2 ((_ extract 15 0) %1)) (= %3 ((_ extract 31 16) %1)))"
end

theory enum.Bit_uint16_of_bit_int32
  syntax function cast_modulo "((_ extract 15 0) %1)"
  syntax predicate is_safe "(= ((_ extract 31 16) %1) (_ bv0 16))"
  syntax predicate bit_int32_as_bit_uint16 "(and (= %2 ((_ extract 15 0) %1)) (= %3 ((_ extract 31 16) %1)))"
end

theory enum.Bit_uint32_of_bit_int32
  syntax function cast_modulo "%1"
  syntax predicate is_safe "(= ((_ extract 31 31) %1) (_ bv0 1))"
  syntax predicate bit_int32_as_bit_uint32 "(= %1 %2)"
end

theory enum.Bit_int64_of_bit_int32
  syntax function cast_modulo "((_ sign_extend 32) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_int32_as_bit_int64 "(= %1 (concat  %3 %2))"
end

theory enum.Bit_uint64_of_bit_int32
  syntax function cast_modulo "((_ sign_extend 32) %1)"
  syntax predicate is_safe "(= ((_ extract 31 31) %1) (_ bv0 1))"
  syntax predicate bit_int32_as_bit_uint64 "(= %1 (concat  %3 %2))"
end

theory enum.Bit_int8_of_bit_uint32
  syntax function cast_modulo "((_ extract 7 0) %1)"
  syntax predicate is_safe "(= ((_ extract 31 8) %1) ((_ repeat 24) ((_ extract 7 7) %1)))"
  syntax predicate bit_uint32_as_bit_int8 "(and (= %2 ((_ extract 7 0) %1)) (= %3 ((_ extract 15 8) %1)) (= %4 ((_ extract 23 16) %1)) (= %5 ((_ extract 31 24) %1)))"
end

theory enum.Bit_uint8_of_bit_uint32
  syntax function cast_modulo "((_ extract 7 0) %1)"
  syntax predicate is_safe "(= ((_ extract 31 8) %1) (_ bv0 24))"
  syntax predicate bit_uint32_as_bit_uint8 "(and (= %2 ((_ extract 7 0) %1)) (= %3 ((_ extract 15 8) %1)) (= %4 ((_ extract 23 16) %1)) (= %5 ((_ extract 31 24) %1)))"
end

theory enum.Bit_int16_of_bit_uint32
  syntax function cast_modulo "((_ extract 15 0) %1)"
  syntax predicate is_safe "(= ((_ extract 31 16) %1) ((_ repeat 16) ((_ extract 15 15) %1)))"
  syntax predicate bit_uint32_as_bit_int16 "(and (= %2 ((_ extract 15 0) %1)) (= %3 ((_ extract 31 16) %1)))"
end

theory enum.Bit_uint16_of_bit_uint32
  syntax function cast_modulo "((_ extract 15 0) %1)"
  syntax predicate is_safe "(= ((_ extract 31 16) %1) (_ bv0 16))"
  syntax predicate bit_uint32_as_bit_uint16 "(and (= %2 ((_ extract 15 0) %1)) (= %3 ((_ extract 31 16) %1)))"
end

theory enum.Bit_int32_of_bit_uint32
  syntax function cast_modulo "%1"
  syntax predicate is_safe "(= ((_ extract 31 31) %1) (_ bv0 1))"
  syntax predicate bit_uint32_as_bit_int32 "(= %1 %2)"
end

theory enum.Bit_int64_of_bit_uint32
  syntax function cast_modulo "((_ zero_extend 32) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_uint32_as_bit_int64 "(= %1 (concat  %3 %2))"
end

theory enum.Bit_uint64_of_bit_uint32
  syntax function cast_modulo "((_ zero_extend 32) %1)"
  syntax predicate is_safe "true"
  syntax predicate bit_uint32_as_bit_uint64 "(= %1 (concat  %3 %2))"
end

theory enum.Bit_int8_of_bit_int64
  syntax function cast_modulo "((_ extract 7 0) %1)"
  syntax predicate is_safe "(= ((_ extract 63 8) %1) ((_ repeat 56) ((_ extract 7 7) %1)))"
  syntax predicate bit_int64_as_bit_int8 "(and (= %2 ((_ extract 7 0) %1)) (= %3 ((_ extract 15 8) %1)) (= %4 ((_ extract 23 16) %1)) (= %5 ((_ extract 31 24) %1)) (= %6 ((_ extract 39 32) %1)) (= %7 ((_ extract 47 40) %1)) (= %8 ((_ extract 55 48) %1)) (= %9 ((_ extract 63 56) %1)))"
end

theory enum.Bit_uint8_of_bit_int64
  syntax function cast_modulo "((_ extract 7 0) %1)"
  syntax predicate is_safe "(= ((_ extract 63 8) %1) (_ bv0 56))"
  syntax predicate bit_int64_as_bit_uint8 "(and (= %2 ((_ extract 7 0) %1)) (= %3 ((_ extract 15 8) %1)) (= %4 ((_ extract 23 16) %1)) (= %5 ((_ extract 31 24) %1)) (= %6 ((_ extract 39 32) %1)) (= %7 ((_ extract 47 40) %1)) (= %8 ((_ extract 55 48) %1)) (= %9 ((_ extract 63 56) %1)))"
end

theory enum.Bit_int16_of_bit_int64
  syntax function cast_modulo "((_ extract 15 0) %1)"
  syntax predicate is_safe "(= ((_ extract 63 16) %1) ((_ repeat 48) ((_ extract 15 15) %1)))"
  syntax predicate bit_int64_as_bit_int16 "(and (= %2 ((_ extract 15 0) %1)) (= %3 ((_ extract 31 16) %1)) (= %4 ((_ extract 47 32) %1)) (= %5 ((_ extract 63 48) %1)))"
end

theory enum.Bit_uint16_of_bit_int64
  syntax function cast_modulo "((_ extract 15 0) %1)"
  syntax predicate is_safe "(= ((_ extract 63 16) %1) (_ bv0 48))"
  syntax predicate bit_int64_as_bit_uint16 "(and (= %2 ((_ extract 15 0) %1)) (= %3 ((_ extract 31 16) %1)) (= %4 ((_ extract 47 32) %1)) (= %5 ((_ extract 63 48) %1)))"
end

theory enum.Bit_int32_of_bit_int64
  syntax function cast_modulo "((_ extract 31 0) %1)"
  syntax predicate is_safe "(= ((_ extract 63 32) %1) ((_ repeat 32) ((_ extract 31 31) %1)))"
  syntax predicate bit_int64_as_bit_int32 "(and (= %2 ((_ extract 31 0) %1)) (= %3 ((_ extract 63 32) %1)))"
end

theory enum.Bit_uint32_of_bit_int64
  syntax function cast_modulo "((_ extract 31 0) %1)"
  syntax predicate is_safe "(= ((_ extract 63 32) %1) (_ bv0 32))"
  syntax predicate bit_int64_as_bit_uint32 "(and (= %2 ((_ extract 31 0) %1)) (= %3 ((_ extract 63 32) %1)))"
end

theory enum.Bit_uint64_of_bit_int64
  syntax function cast_modulo "%1"
  syntax predicate is_safe "(= ((_ extract 63 63) %1) (_ bv0 1))"
  syntax predicate bit_int64_as_bit_uint64 "(= %1 %2)"
end

theory enum.Bit_int8_of_bit_uint64
  syntax function cast_modulo "((_ extract 7 0) %1)"
  syntax predicate is_safe "(= ((_ extract 63 8) %1) ((_ repeat 56) ((_ extract 7 7) %1)))"
  syntax predicate bit_uint64_as_bit_int8 "(and (= %2 ((_ extract 7 0) %1)) (= %3 ((_ extract 15 8) %1)) (= %4 ((_ extract 23 16) %1)) (= %5 ((_ extract 31 24) %1)) (= %6 ((_ extract 39 32) %1)) (= %7 ((_ extract 47 40) %1)) (= %8 ((_ extract 55 48) %1)) (= %9 ((_ extract 63 56) %1)))"
end

theory enum.Bit_uint8_of_bit_uint64
  syntax function cast_modulo "((_ extract 7 0) %1)"
  syntax predicate is_safe "(= ((_ extract 63 8) %1) (_ bv0 56))"
  syntax predicate bit_uint64_as_bit_uint8 "(and (= %2 ((_ extract 7 0) %1)) (= %3 ((_ extract 15 8) %1)) (= %4 ((_ extract 23 16) %1)) (= %5 ((_ extract 31 24) %1)) (= %6 ((_ extract 39 32) %1)) (= %7 ((_ extract 47 40) %1)) (= %8 ((_ extract 55 48) %1)) (= %9 ((_ extract 63 56) %1)))"
end

theory enum.Bit_int16_of_bit_uint64
  syntax function cast_modulo "((_ extract 15 0) %1)"
  syntax predicate is_safe "(= ((_ extract 63 16) %1) ((_ repeat 48) ((_ extract 15 15) %1)))"
  syntax predicate bit_uint64_as_bit_int16 "(and (= %2 ((_ extract 15 0) %1)) (= %3 ((_ extract 31 16) %1)) (= %4 ((_ extract 47 32) %1)) (= %5 ((_ extract 63 48) %1)))"
end

theory enum.Bit_uint16_of_bit_uint64
  syntax function cast_modulo "((_ extract 15 0) %1)"
  syntax predicate is_safe "(= ((_ extract 63 16) %1) (_ bv0 48))"
  syntax predicate bit_uint64_as_bit_uint16 "(and (= %2 ((_ extract 15 0) %1)) (= %3 ((_ extract 31 16) %1)) (= %4 ((_ extract 47 32) %1)) (= %5 ((_ extract 63 48) %1)))"
end

theory enum.Bit_int32_of_bit_uint64
  syntax function cast_modulo "((_ extract 31 0) %1)"
  syntax predicate is_safe "(= ((_ extract 63 32) %1) ((_ repeat 32) ((_ extract 31 31) %1)))"
  syntax predicate bit_uint64_as_bit_int32 "(and (= %2 ((_ extract 31 0) %1)) (= %3 ((_ extract 63 32) %1)))"
end

theory enum.Bit_uint32_of_bit_uint64
  syntax function cast_modulo "((_ extract 31 0) %1)"
  syntax predicate is_safe "(= ((_ extract 63 32) %1) (_ bv0 32))"
  syntax predicate bit_uint64_as_bit_uint32 "(and (= %2 ((_ extract 31 0) %1)) (= %3 ((_ extract 63 32) %1)))"
end

theory enum.Bit_int64_of_bit_uint64
  syntax function cast_modulo "%1"
  syntax predicate is_safe "(= ((_ extract 63 63) %1) (_ bv0 1))"
  syntax predicate bit_uint64_as_bit_int64 "(= %1 %2)"
end

