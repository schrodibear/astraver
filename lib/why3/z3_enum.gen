theory enum.Bit_int8

  syntax type t "(_ BitVec 8)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvsdiv %1 %2)"
  syntax function (%%) "(bvsrem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 8) %1)"
  syntax converter of_int_const "(_ bv%1 8)"
  
  syntax function to_uint "(bv2int %1)"
  

  remove prop To_uint_lsr
  remove prop To_uint_lsl_modulo

  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvslt %1 %2)"
  syntax predicate le "(bvsle %1 %2)"
  syntax predicate gt "(bvsgt %1 %2)"
  syntax predicate ge "(bvsge %1 %2)"

  remove prop Nth
  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
  remove prop To_int_def
end

theory enum.Bit_uint8

  syntax type t "(_ BitVec 8)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvudiv %1 %2)"
  syntax function (%%) "(bvurem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 8) %1)"
  syntax converter of_int_const "(_ bv%1 8)"
  
  syntax function to_int "(bv2int %1)"
  remove prop To_uint
  

  remove prop To_uint_lsr
  remove prop To_uint_lsl_modulo

  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvult %1 %2)"
  syntax predicate le "(bvule %1 %2)"
  syntax predicate gt "(bvugt %1 %2)"
  syntax predicate ge "(bvuge %1 %2)"

  remove prop Nth
  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
  remove prop To_int_def
end

theory enum.Bit_int16

  syntax type t "(_ BitVec 16)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvsdiv %1 %2)"
  syntax function (%%) "(bvsrem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 16) %1)"
  syntax converter of_int_const "(_ bv%1 16)"
  
  syntax function to_uint "(bv2int %1)"
  

  remove prop To_uint_lsr
  remove prop To_uint_lsl_modulo

  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvslt %1 %2)"
  syntax predicate le "(bvsle %1 %2)"
  syntax predicate gt "(bvsgt %1 %2)"
  syntax predicate ge "(bvsge %1 %2)"

  remove prop Nth
  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
  remove prop To_int_def
end

theory enum.Bit_uint16

  syntax type t "(_ BitVec 16)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvudiv %1 %2)"
  syntax function (%%) "(bvurem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 16) %1)"
  syntax converter of_int_const "(_ bv%1 16)"
  
  syntax function to_int "(bv2int %1)"
  remove prop To_uint
  

  remove prop To_uint_lsr
  remove prop To_uint_lsl_modulo

  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvult %1 %2)"
  syntax predicate le "(bvule %1 %2)"
  syntax predicate gt "(bvugt %1 %2)"
  syntax predicate ge "(bvuge %1 %2)"

  remove prop Nth
  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
  remove prop To_int_def
end

theory enum.Bit_int32

  syntax type t "(_ BitVec 32)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvsdiv %1 %2)"
  syntax function (%%) "(bvsrem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 32) %1)"
  syntax converter of_int_const "(_ bv%1 32)"
  
  syntax function to_uint "(bv2int %1)"
  

  remove prop To_uint_lsr
  remove prop To_uint_lsl_modulo

  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvslt %1 %2)"
  syntax predicate le "(bvsle %1 %2)"
  syntax predicate gt "(bvsgt %1 %2)"
  syntax predicate ge "(bvsge %1 %2)"

  remove prop Nth
  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
  remove prop To_int_def
end

theory enum.Bit_uint32

  syntax type t "(_ BitVec 32)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvudiv %1 %2)"
  syntax function (%%) "(bvurem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 32) %1)"
  syntax converter of_int_const "(_ bv%1 32)"
  
  syntax function to_int "(bv2int %1)"
  remove prop To_uint
  

  remove prop To_uint_lsr
  remove prop To_uint_lsl_modulo

  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvult %1 %2)"
  syntax predicate le "(bvule %1 %2)"
  syntax predicate gt "(bvugt %1 %2)"
  syntax predicate ge "(bvuge %1 %2)"

  remove prop Nth
  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
  remove prop To_int_def
end

theory enum.Bit_int64

  syntax type t "(_ BitVec 64)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvsdiv %1 %2)"
  syntax function (%%) "(bvsrem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 64) %1)"
  syntax converter of_int_const "(_ bv%1 64)"
  
  syntax function to_uint "(bv2int %1)"
  

  remove prop To_uint_lsr
  remove prop To_uint_lsl_modulo

  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvslt %1 %2)"
  syntax predicate le "(bvsle %1 %2)"
  syntax predicate gt "(bvsgt %1 %2)"
  syntax predicate ge "(bvsge %1 %2)"

  remove prop Nth
  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
end

theory enum.Bit_uint64

  syntax type t "(_ BitVec 64)"

  syntax function (&) "(bvand %1 %2)"
  syntax function (|^) "(bvor %1 %2)"
  syntax function (^) "(bvxor %1 %2)"
  syntax function (~_) "(bvnot %1)"

  syntax function lsl_modulo "(bvshl %1 %2)"
  syntax function lsr "(bvlshr %1 %2)"
  syntax function asr "(bvashr %1 %2)"

  syntax function (+%) "(bvadd %1 %2)"
  syntax function (-%) "(bvsub %1 %2)"
  syntax function (-%_) "(bvneg %1)"
  syntax function ( *%) "(bvmul %1 %2)"
  syntax function (/%) "(bvudiv %1 %2)"
  syntax function (%%) "(bvurem %1 %2)"

  syntax function of_int_modulo "((_ int2bv 64) %1)"
  syntax converter of_int_const "(_ bv%1 64)"
  
  syntax function to_int "(bv2int %1)"
  remove prop To_uint
  

  remove prop To_uint_lsr
  remove prop To_uint_lsl_modulo

  remove prop Nth_bw_or
  remove prop Nth_bw_and
  remove prop Nth_bw_xor
  remove prop Nth_bw_not
  remove prop Lsr_nth_low
  remove prop Lsr_nth_high
  remove prop Asr_nth_low
  remove prop Asr_nth_high
  remove prop Lsl_modulo_nth_low
  remove prop Lsl_modulo_nth_high

  syntax predicate lt "(bvult %1 %2)"
  syntax predicate le "(bvule %1 %2)"
  syntax predicate gt "(bvugt %1 %2)"
  syntax predicate ge "(bvuge %1 %2)"

  remove prop Nth
  syntax predicate nth "(= ((_ extract %2 %2) %1) (_ bv1 1))"
end

theory enum.Bit_uint8_of_bit_int8
  
  syntax function cast_modulo "%1"
  
end

theory enum.Bit_int16_of_bit_int8
  
  syntax function cast_modulo "((_ sign_extend 8) %1)"
  
end

theory enum.Bit_uint16_of_bit_int8
  
  syntax function cast_modulo "((_ sign_extend 8) %1)"
  
end

theory enum.Bit_int32_of_bit_int8
  
  syntax function cast_modulo "((_ sign_extend 24) %1)"
  
end

theory enum.Bit_uint32_of_bit_int8
  
  syntax function cast_modulo "((_ sign_extend 24) %1)"
  
end

theory enum.Bit_int64_of_bit_int8
  
  syntax function cast_modulo "((_ sign_extend 56) %1)"
  
end

theory enum.Bit_uint64_of_bit_int8
  
  syntax function cast_modulo "((_ sign_extend 56) %1)"
  
end

theory enum.Bit_int8_of_bit_uint8
  
  syntax function cast_modulo "%1"
  
end

theory enum.Bit_int16_of_bit_uint8
  
  syntax function cast_modulo "((_ zero_extend 8) %1)"
  
end

theory enum.Bit_uint16_of_bit_uint8
  
  syntax function cast_modulo "((_ zero_extend 8) %1)"
  
end

theory enum.Bit_int32_of_bit_uint8
  
  syntax function cast_modulo "((_ zero_extend 24) %1)"
  
end

theory enum.Bit_uint32_of_bit_uint8
  
  syntax function cast_modulo "((_ zero_extend 24) %1)"
  
end

theory enum.Bit_int64_of_bit_uint8
  
  syntax function cast_modulo "((_ zero_extend 56) %1)"
  
end

theory enum.Bit_uint64_of_bit_uint8
  
  syntax function cast_modulo "((_ zero_extend 56) %1)"
  
end

theory enum.Bit_int8_of_bit_int16
  
  syntax function cast_modulo "((_ extract 7 0) %1)"
  
end

theory enum.Bit_uint8_of_bit_int16
  
  syntax function cast_modulo "((_ extract 7 0) %1)"
  
end

theory enum.Bit_uint16_of_bit_int16
  
  syntax function cast_modulo "%1"
  
end

theory enum.Bit_int32_of_bit_int16
  
  syntax function cast_modulo "((_ sign_extend 16) %1)"
  
end

theory enum.Bit_uint32_of_bit_int16
  
  syntax function cast_modulo "((_ sign_extend 16) %1)"
  
end

theory enum.Bit_int64_of_bit_int16
  
  syntax function cast_modulo "((_ sign_extend 48) %1)"
  
end

theory enum.Bit_uint64_of_bit_int16
  
  syntax function cast_modulo "((_ sign_extend 48) %1)"
  
end

theory enum.Bit_int8_of_bit_uint16
  
  syntax function cast_modulo "((_ extract 7 0) %1)"
  
end

theory enum.Bit_uint8_of_bit_uint16
  
  syntax function cast_modulo "((_ extract 7 0) %1)"
  
end

theory enum.Bit_int16_of_bit_uint16
  
  syntax function cast_modulo "%1"
  
end

theory enum.Bit_int32_of_bit_uint16
  
  syntax function cast_modulo "((_ zero_extend 16) %1)"
  
end

theory enum.Bit_uint32_of_bit_uint16
  
  syntax function cast_modulo "((_ zero_extend 16) %1)"
  
end

theory enum.Bit_int64_of_bit_uint16
  
  syntax function cast_modulo "((_ zero_extend 48) %1)"
  
end

theory enum.Bit_uint64_of_bit_uint16
  
  syntax function cast_modulo "((_ zero_extend 48) %1)"
  
end

theory enum.Bit_int8_of_bit_int32
  
  syntax function cast_modulo "((_ extract 7 0) %1)"
  
end

theory enum.Bit_uint8_of_bit_int32
  
  syntax function cast_modulo "((_ extract 7 0) %1)"
  
end

theory enum.Bit_int16_of_bit_int32
  
  syntax function cast_modulo "((_ extract 15 0) %1)"
  
end

theory enum.Bit_uint16_of_bit_int32
  
  syntax function cast_modulo "((_ extract 15 0) %1)"
  
end

theory enum.Bit_uint32_of_bit_int32
  
  syntax function cast_modulo "%1"
  
end

theory enum.Bit_int64_of_bit_int32
  
  syntax function cast_modulo "((_ sign_extend 32) %1)"
  
end

theory enum.Bit_uint64_of_bit_int32
  
  syntax function cast_modulo "((_ sign_extend 32) %1)"
  
end

theory enum.Bit_int8_of_bit_uint32
  
  syntax function cast_modulo "((_ extract 7 0) %1)"
  
end

theory enum.Bit_uint8_of_bit_uint32
  
  syntax function cast_modulo "((_ extract 7 0) %1)"
  
end

theory enum.Bit_int16_of_bit_uint32
  
  syntax function cast_modulo "((_ extract 15 0) %1)"
  
end

theory enum.Bit_uint16_of_bit_uint32
  
  syntax function cast_modulo "((_ extract 15 0) %1)"
  
end

theory enum.Bit_int32_of_bit_uint32
  
  syntax function cast_modulo "%1"
  
end

theory enum.Bit_int64_of_bit_uint32
  
  syntax function cast_modulo "((_ zero_extend 32) %1)"
  
end

theory enum.Bit_uint64_of_bit_uint32
  
  syntax function cast_modulo "((_ zero_extend 32) %1)"
  
end

theory enum.Bit_int8_of_bit_int64
  
  syntax function cast_modulo "((_ extract 7 0) %1)"
  
end

theory enum.Bit_uint8_of_bit_int64
  
  syntax function cast_modulo "((_ extract 7 0) %1)"
  
end

theory enum.Bit_int16_of_bit_int64
  
  syntax function cast_modulo "((_ extract 15 0) %1)"
  
end

theory enum.Bit_uint16_of_bit_int64
  
  syntax function cast_modulo "((_ extract 15 0) %1)"
  
end

theory enum.Bit_int32_of_bit_int64
  
  syntax function cast_modulo "((_ extract 31 0) %1)"
  
end

theory enum.Bit_uint32_of_bit_int64
  
  syntax function cast_modulo "((_ extract 31 0) %1)"
  
end

theory enum.Bit_uint64_of_bit_int64
  
  syntax function cast_modulo "%1"
  
end

theory enum.Bit_int8_of_bit_uint64
  
  syntax function cast_modulo "((_ extract 7 0) %1)"
  
end

theory enum.Bit_uint8_of_bit_uint64
  
  syntax function cast_modulo "((_ extract 7 0) %1)"
  
end

theory enum.Bit_int16_of_bit_uint64
  
  syntax function cast_modulo "((_ extract 15 0) %1)"
  
end

theory enum.Bit_uint16_of_bit_uint64
  
  syntax function cast_modulo "((_ extract 15 0) %1)"
  
end

theory enum.Bit_int32_of_bit_uint64
  
  syntax function cast_modulo "((_ extract 31 0) %1)"
  
end

theory enum.Bit_uint32_of_bit_uint64
  
  syntax function cast_modulo "((_ extract 31 0) %1)"
  
end

theory enum.Bit_int64_of_bit_uint64
  
  syntax function cast_modulo "%1"
  
end

