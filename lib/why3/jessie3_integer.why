theory Integer
  use int.Int
  use int.Abs as AbsInt
  use bool.Bool

predicate eq_unit () ()

  predicate neq_unit () ()

  predicate eq_bool Bool.bool Bool.bool

  predicate neq_bool Bool.bool Bool.bool

  predicate lt_int int int

  predicate le_int int int

  predicate gt_int int int

  predicate ge_int int int

  predicate eq_int int int

  predicate neq_int int int

  function add_int int int : int

  function sub_int int int : int

  function mul_int int int : int

  function neg_int int : int

  predicate zwf_zero (a : int) (b : int) = ((Int.(<=) 0 b) /\ (Int.(<) a b))

  function lt_int_bool int int : Bool.bool

  function le_int_bool int int : Bool.bool

  function gt_int_bool int int : Bool.bool

  function ge_int_bool int int : Bool.bool

  function eq_int_bool int int : Bool.bool

  function neq_int_bool int int : Bool.bool

  axiom Lt_int_bool_axiom:
    (forall x:int.
      (forall y:int.
        (((lt_int_bool x y : Bool.bool) = Bool.True) <-> (Int.(<) x y))))

  axiom Le_int_bool_axiom:
    (forall x:int.
      (forall y:int.
        (((le_int_bool x y : Bool.bool) = Bool.True) <-> (Int.(<=) x y))))

  axiom Gt_int_bool_axiom:
    (forall x:int.
      (forall y:int.
        (((gt_int_bool x y : Bool.bool) = Bool.True) <-> (Int.(>) x y))))

  axiom Ge_int_bool_axiom:
    (forall x:int.
      (forall y:int.
        (((ge_int_bool x y : Bool.bool) = Bool.True) <-> (Int.(>=) x y))))

  axiom Eq_int_bool_axiom:
    (forall x:int.
      (forall y:int.
        (((eq_int_bool x y : Bool.bool) = Bool.True) <-> (x = y))))

  axiom Neq_int_bool_axiom:
    (forall x:int.
      (forall y:int.
        (((neq_int_bool x y : Bool.bool) = Bool.True) <-> (x <> y))))

  function abs_int int : int

  axiom Abs_int_pos:
    (forall x:int. ((Int.(>=) x 0) -> ((AbsInt.abs x : int) = x)))

  axiom Abs_int_neg:
    (forall x:int.
      ((Int.(<=) x 0) -> ((AbsInt.abs x : int) = (Int.(-_) x : int))))

  function int_max int int : int

  function int_min int int : int

  axiom Int_max_is_ge:
    (forall x:int.
      (forall y:int.
        ((Int.(>=) (int_max x y : int) x) /\ (Int.(>=) (int_max x y : int) y))))

  axiom Int_max_is_some:
    (forall x:int.
      (forall y:int.
        (((int_max x y : int) = x) \/ ((int_max x y : int) = y))))

  axiom Int_min_is_le:
    (forall x:int.
      (forall y:int.
        ((Int.(<=) (int_min x y : int) x) /\ (Int.(<=) (int_min x y : int) y))))

  axiom Int_min_is_some:
    (forall x:int.
      (forall y:int.
        (((int_min x y : int) = x) \/ ((int_min x y : int) = y))))


end
