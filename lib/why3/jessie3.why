
theory Jessie_memory_model

use import int.Int

predicate zwf_zero (a:int) (b:int) = 0 <= b /\ a < b

(*
use import real.Real
use import int.ComputerDivision
*)

(*****************************************************************************)
(* pointers, allocation, validity                                            *)
(*****************************************************************************)

type alloc_table 't
type pointer 't
type block 't

(* memory model *)

function base_block (pointer 't) : block 't
function offset_max (alloc_table 't) (pointer 't) : int
function offset_min (alloc_table 't) (pointer 't) : int

(* shortcuts *)

predicate valid (a:alloc_table 't) (p:pointer 't) =
  offset_min a p <= 0 /\ offset_max a p >= 0

predicate same_block (p: pointer 't) (q:pointer 't) =
  base_block(p) = base_block(q)

(* pointer arithmetic *)

function sub_pointer (pointer 't) (pointer 't) : int
function shift (pointer 't) int : (pointer 't)

(* null pointer*)

function null : (pointer 't)

(* address *)

function pointer_address (pointer 't) : (pointer ())
function absolute_address int : (pointer ())
function address (pointer 't) : int

axiom address_injective:
  forall p:pointer 't. forall q:pointer 't.
    p = q <-> address(p) = address(q)

(* Not allowed in Why3 (undefined type variable)
axiom address_null:
  address(null) = 0
*)

(* INCONSISTENT -> removed
axiom address_positive:
  forall p:pointer 't. 0 <= address(p)
*)

axiom address_shift_lt:
  forall p:pointer 't. forall i:int. forall j:int
  [address(shift p i), address(shift p j)].
    address(shift p i) < address(shift p j) <-> i < j

axiom address_shift_le:
  forall p:pointer 't. forall i:int. forall j:int
  [address(shift p i), address(shift p j)].
    address(shift p i) <= address(shift p j) <-> i <= j


(* shift *)

axiom shift_zero:
  forall p:pointer 't [shift p 0]. shift p 0 = p

axiom shift_shift:
  forall p:pointer 't. forall i:int. forall j:int [shift (shift p i) j].
    shift (shift p i) j = shift p (i+j)

axiom offset_max_shift:
  forall a:alloc_table 't. forall p: pointer 't. forall i:int.
    offset_max a (shift p i) = offset_max a p - i

axiom offset_min_shift:
  forall a:alloc_table 't. forall p: pointer 't. forall i:int.
    offset_min a (shift p i) = offset_min a p - i

axiom neq_shift:
  forall p:pointer 't. forall i:int. forall j:int [shift p i,shift p j].
    i <> j -> shift p i <> shift p j

(* null *)

axiom null_not_valid:
  forall a:alloc_table 't. not (valid a null)

axiom null_pointer:
  forall a:alloc_table 't.
    offset_min a null >= 0 /\ offset_max a null <= -2

use import bool.Bool

function eq_pointer_bool (pointer 't) (pointer 't) : bool
function neq_pointer_bool (pointer 't) (pointer 't) : bool

axiom eq_pointer_bool_def:
  forall p1: pointer 't. forall p2: pointer 't.
    eq_pointer_bool p1 p2 = True <-> p1 = p2

axiom neq_pointer_bool_def:
  forall p1: pointer 't. forall p2: pointer 't.
    neq_pointer_bool p1 p2 = True <-> p1 <> p2

(* make Simplify loop on bench/java/Arrays.java !!!
axiom same_block_shift:
  forall p: pointer 't. forall i:int.
    same_block(p,shift p i)
*)

axiom same_block_shift_right:
  forall p: pointer 't. forall q:pointer 't. forall i:int
  [same_block p (shift q i)].
    same_block p q -> same_block p (shift q i)

axiom same_block_shift_left:
  forall p: pointer 't. forall q:pointer 't. forall i:int
  [same_block (shift q i) p].
    same_block q p -> same_block (shift q i) p


(* make Simplify loop on Jessie test roux.c
axiom sub_pointer_same_block:
  forall p:pointer 't. forall q:pointer 't [sub_pointer(p,q),same_block(p,q)].
    sub_pointer(p,q) = 0 -> same_block(p,q)
*)

(* sub_pointer *)

axiom sub_pointer_shift:
  forall p:pointer 't. forall q:pointer 't [sub_pointer p q].
    same_block p q ->
      p = shift q (sub_pointer p q)

axiom sub_pointer_self:
  forall p:pointer 't [sub_pointer p p]. sub_pointer p p = 0

axiom sub_pointer_zero:
  forall p:pointer 't. forall q:pointer 't [sub_pointer p q].
    same_block p q ->
      sub_pointer p q = 0 -> p = q

axiom sub_pointer_shift_left:
  forall p:pointer 't. forall q:pointer 't.
    forall i:int [sub_pointer (shift p i) q].
      sub_pointer (shift p i) q = sub_pointer p q + i

axiom sub_pointer_shift_right:
  forall p:pointer 't. forall q:pointer 't.
    forall i:int [sub_pointer p (shift q i)].
      sub_pointer p (shift q i) = sub_pointer p q - i

(*****************************************************************************)
(* heap memories, select and store                                           *)
(*****************************************************************************)

type memory 't 'v

function select (memory 't 'v) (pointer 't) : 'v
function store (memory 't 'v) (pointer 't) 'v : (memory 't 'v)

axiom select_store_eq:
  forall m: (memory 't 'v).
  forall p1: pointer 't.
  forall p2: pointer 't.
  forall a: 'v [store m p1 a, p2].
    p1=p2 -> select (store m p1 a) p2 = a

(* redundant
axiom select_store:
  forall m: (memory 't 'v).
  forall p: pointer 't.
  forall a: 'v [select(store(m,p,a),p)].
    select(store(m,p,a),p) = a
*)

axiom select_store_neq:
  forall m: (memory 't 'v).
  forall p1: pointer 't.
  forall p2: pointer 't.
  forall a: 'v [store m p1 a,p2] .
    p1 <> p2 -> select (store m p1 a) p2 = select m p2



(*****************************************************************************)
(* memory locations, not_assigns predicate, separation                       *)
(*****************************************************************************)

type pset 't

function pset_empty : (pset 't)
function pset_singleton (pointer 't) : (pset 't)
function pset_deref (memory 't (pointer 'v)) (pset 't) : pset 'v
function pset_union (pset 't) (pset 't) : (pset 't)
function pset_all (pset 'z) : (pset 'z) (* l(..) *)
function pset_range (pset 't) int int : (pset 't) (* l(a..b) *)
function pset_range_left (pset 'z) int : (pset 'z) (* l(..b) *)
function pset_range_right (pset 'z) int : (pset 'z) (* l(a..) *)

predicate in_pset (pointer 't) (pset 't) 
predicate valid_pset (alloc_table 't) (pset 't) 

predicate pset_disjoint (ps1:(pset 't)) (ps2:(pset 't)) =
  forall p:pointer 't.
    not (in_pset p ps1 /\ in_pset p ps2)

predicate pset_included (ps1:(pset 't)) (ps2:(pset 't)) =
  forall p:pointer 't.
    in_pset p ps1 -> in_pset p ps2

axiom pset_included_self:
  forall ps:(pset 't). pset_included ps ps

axiom pset_included_range:
  forall ps:(pset 't). forall a:int. forall b:int. forall c:int. forall d:int
  [pset_included (pset_range ps a b) (pset_range ps c d)].
    c <= a /\ b <= d ->
      pset_included (pset_range ps a b) (pset_range ps c d)

axiom pset_included_range_all:
  forall ps:(pset 't). forall a:int. forall b:int. forall c:int. forall d:int
  [pset_included (pset_range ps a b) (pset_range ps c d)].
    pset_included (pset_range ps a b) (pset_all ps)

axiom in_pset_empty:
  forall p:pointer 't. not (in_pset p pset_empty)

axiom in_pset_singleton:
  forall p:pointer 't.
  forall q:pointer 't.
    in_pset p (pset_singleton q) <-> p=q

axiom in_pset_deref:
  forall p:pointer 'v.
  forall m:memory 't (pointer 'v).
  forall q:(pset 't).
    in_pset p (pset_deref m q) <->
	exists r:pointer 't. in_pset r q /\ p = select m r

axiom in_pset_all:
  forall p:pointer 't.
  forall q:(pset 't).
    in_pset p (pset_all q) <->
	exists i:int. exists r:pointer 't.
          in_pset r q /\ p = shift r i

axiom in_pset_range:
  forall p:pointer 't.
  forall q:(pset 't).
  forall a:int. forall b:int.
    in_pset p (pset_range q a b) <->
	exists i:int. exists r:pointer 't.
          a <= i /\ i <= b /\ in_pset r q /\ p=shift r i

axiom in_pset_range_left:
  forall p:pointer 't.
  forall q:(pset 't).
  forall b:int.
    in_pset p (pset_range_left q b) <->
	exists i:int. exists r:pointer 't.
          i <= b /\ in_pset r q /\ p = shift r i

axiom in_pset_range_right:
  forall p:pointer 't.
  forall q:(pset 't).
  forall a:int.
    in_pset p (pset_range_right q a) <->
	exists i:int. exists r:pointer 't.
          a <= i /\ in_pset r q /\ p = shift r i

axiom in_pset_union:
  forall p:pointer 't.
  forall s1:(pset 't).
  forall s2:(pset 't).
    in_pset p (pset_union s1 s2) <-> in_pset p s1 \/ in_pset p s2

axiom valid_pset_empty:
  forall a:alloc_table 't. valid_pset a pset_empty

axiom valid_pset_singleton:
  forall a:alloc_table 't.
  forall p:pointer 't.
    valid_pset a (pset_singleton p) <-> valid a p

axiom valid_pset_deref:
  forall a:alloc_table 'v .
  forall m:memory 't (pointer 'v).
  forall q:(pset 't).
    valid_pset a (pset_deref m q) <->
      forall r:pointer 't. forall p:pointer 'v.
        in_pset r q /\ p = select m r -> valid a p

axiom valid_pset_range:
  forall a:alloc_table 't.
  forall q:(pset 't).
  forall c:int. forall d:int.
    valid_pset a (pset_range q c d) <->
	forall i:int. forall r:pointer 't.
          in_pset r q /\ c <= i /\ i <= d -> valid a (shift r i)

axiom valid_pset_union:
  forall a:alloc_table 't.
  forall s1:(pset 't).
  forall s2:(pset 't).
    valid_pset a (pset_union s1 s2) <-> valid_pset a (s1) /\ valid_pset a (s2)

predicate not_assigns
  (a:alloc_table 't) (m1:(memory 't 'v)) (m2:(memory 't 'v)) (l:(pset 't)) =
    forall p:pointer 't.
      valid a p /\ not in_pset p l -> select m2 p = select m1 p

axiom not_assigns_refl:
  forall a: alloc_table 't.
  forall m: (memory 't 'v).
  forall l:(pset 't).
    not_assigns a m m l

axiom not_assigns_trans:
  forall a: alloc_table 't.
  forall m1: (memory 't 'v).
  forall m2: (memory 't 'v).
  forall m3: (memory 't 'v).
  forall l:(pset 't) [not_assigns a m1 m2 l, not_assigns a m1 m3 l] .
    not_assigns a m1 m2 l ->
    not_assigns a m2 m3 l ->
    not_assigns a m1 m3 l

predicate full_separated (pointer 't1) (pointer 't2)

axiom full_separated_shift1:
  forall p: (pointer 'z). forall q: (pointer 'z).
    forall i: int [full_separated p q,shift q i].
      full_separated p q -> full_separated p (shift q i)

axiom full_separated_shift2:
  forall p: (pointer 'z). forall q: (pointer 'z).
    forall i: int [full_separated p q,shift q i].
      full_separated p q -> full_separated (shift q i) p

axiom full_separated_shift3:
  forall p: (pointer 'z). forall q: (pointer 'z).
    forall i: int [full_separated(q) p,shift q i].
      full_separated(q) p -> full_separated(shift q i) p

axiom full_separated_shift4:
  forall p: (pointer 'z). forall q: (pointer 'z).
    forall i: int [full_separated(q) p,shift q i].
      full_separated(q) p -> full_separated p (shift q i)


(*****************************************************************************)
(* lattice of structures                                                     *)
(*****************************************************************************)

(*****
typeof gives the dynamic type of an object.

parenttag is defined by axioms in jc_interp, and defines the hierarchy.
  parenttag(t1, t2) <-> t2 is the immediate superclass of t1

subtag is axiomatized from parenttag, and is the reflexive, transitive
  closure of parenttag.

subtag_ is the same as subtag but for booleans.

instanceof is defined from typeof and subtag.

int_of_tag gives a different integer to each tags to differenciate them.
*****)

type tag_table 't

type tag_id 't

function int_of_tag (tag_id 't) : int

function typeof(tag_table 't) (pointer 't) : (tag_id 't)

predicate parenttag (tag_id 't)  (tag_id 't) 

predicate subtag (tag_id 't) (tag_id 't) 

function subtag_bool (tag_id 't) (tag_id 't) : bool

axiom subtag_bool_def:
  forall t1: (tag_id 't).
  forall t2: (tag_id 't).
    subtag_bool t1 t2 = True <-> subtag t1 t2

axiom subtag_refl:
  forall t: (tag_id 't).
    subtag t t

axiom subtag_parent:
  forall t1: (tag_id 't).
  forall t2: (tag_id 't).
  forall t3: (tag_id 't).
    subtag t1 t2 -> parenttag t2 t3 -> subtag t1 t3

predicate instanceof (a: (tag_table 't)) (p: pointer 't) (t: (tag_id 't)) =
  subtag (typeof a p) t

function downcast (tag_table 't) (pointer 't) (tag_id 't) : pointer 't

axiom downcast_instanceof:
  forall a:(tag_table 't).
  forall p:pointer 't.
  forall s:(tag_id 't).
   instanceof a  p (s) -> downcast a  p (s)=p

function bottom_tag: tag_id 'a

axiom bottom_tag_axiom:
  forall t: (tag_id 't).
    subtag t bottom_tag

predicate root_tag(t: (tag_id 't)) = parenttag t bottom_tag

axiom root_subtag:
  forall a: (tag_id 't).
  forall b: (tag_id 't).
  forall c: (tag_id 't).
    root_tag(a) -> root_tag(b) -> a <> b -> subtag c a -> not (subtag c b)

(*****************************************************************************)
(* structure invariants                                                      *)
(*****************************************************************************)

predicate fully_packed (tag_table: tag_table 'a)
  (_mutable: memory 'a (tag_id 'a))
  (this: pointer 'a) =
    select _mutable this = typeof tag_table this



(*****************************************************************************)
(* bitwise operations                                                        *)
(*****************************************************************************)
(* TODO: use bitvector.why instead *)

function bw_compl int : int

function bw_and int int : int

(* Yannick: added for CVE-2003-0161-min-ok *)
axiom bw_and_not_null:
  forall a:int. forall b:int. bw_and a (b) <> 0 -> a <> 0 /\ b <> 0

function bw_xor int int : int

function bw_or int int : int

(* logical left shift *)

function lsl int int : int

axiom lsl_left_positive_returns_positive:
  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> 0 <= lsl a (b)

axiom lsl_left_positive_monotone:
  forall a1:int. forall a2:int. forall b:int.
    0 <= a1 /\ a1 <= a2 /\ 0 <= b -> lsl a1 b <= lsl a2 b

(* logical right shift *)

function lsr int int : int

axiom lsr_left_positive_returns_positive:
  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> 0 <= lsr a (b)

axiom lsr_left_positive_decreases:
  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> lsr a (b) <= a

(* arithmetic right shift *)

function asr int int : int

axiom asr_positive_on_positive:
  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> 0 <= asr a (b)

axiom asr_decreases_on_positive:
  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> asr a (b) <= a

(* combining shifts *)

axiom asr_lsr_same_on_positive:
  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> asr a (b) = lsr a (b)

axiom lsl_of_lsr_decreases_on_positive:
  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> lsl (lsr a b) b <= a

axiom lsr_of_lsl_identity_on_positive:
  forall a:int. forall b:int. 0 <= a /\ 0 <= b -> lsr (lsl a b) b = a

(*****************************************************************************)
(* dynamic allocation/deallocation                                           *)
(*****************************************************************************)

predicate alloc_extends (alloc_table 't) (alloc_table 't)

predicate alloc_fresh (a:alloc_table 't) (p:pointer 't) (n:int) =
  forall i:int. 0 <= i < n -> not valid a (shift p i)

axiom alloc_extends_offset_min:
  forall a1:alloc_table 't. forall a2:alloc_table 't [alloc_extends a1 a2].
    alloc_extends a1 a2 ->
      forall p:pointer 't.
        valid(a1) p -> offset_min(a1) p = offset_min(a2) p

axiom alloc_extends_offset_max:
  forall a1:alloc_table 't. forall a2:alloc_table 't [alloc_extends a1 a2].
    alloc_extends a1 a2 ->
      forall p:pointer 't.
        valid(a1) p -> offset_max(a1) p = offset_max(a2) p

axiom alloc_extends_not_assigns_empty:
  forall a1:alloc_table 't. forall a2:alloc_table 't.
  forall m1: (memory 't 'v). forall m2: (memory 't 'v).
  forall l:(pset 't). forall p:pointer 't. forall n:int
  [alloc_extends a1 a2, alloc_fresh a1 p n, not_assigns a2 m1 m2 l].
    alloc_extends a1 a2 /\ alloc_fresh a1 p n /\ not_assigns a2 m1 m2 l
    /\ pset_included l (pset_all (pset_singleton p)) ->
      not_assigns a1 m1 m2 pset_empty

(*
axiom alloc_fresh_def:
  forall a:alloc_table 't. forall p:pointer 't [alloc_fresh a p].
    alloc_fresh a p ->
      forall q:(pset 't).
        valid_pset a (q) -> not in_pset p q
*)

predicate alloc_extends_except (alloc_table 't) (alloc_table 't) (pset 't)

axiom alloc_extends_except_offset_min:
 forall a1:alloc_table 't. forall a2:alloc_table 't. forall l:(pset 't)
 [alloc_extends_except a1 a2 l].
   alloc_extends_except a1 a2 l ->
     forall p:pointer 't.
       valid(a1) p /\ not in_pset p (l) -> offset_min(a1) p = offset_min(a2) p

axiom alloc_extends_except_offset_max:
 forall a1:alloc_table 't. forall a2:alloc_table 't. forall l:(pset 't)
 [alloc_extends_except a1 a2 l].
   alloc_extends_except a1 a2 l ->
     forall p:pointer 't.
       valid(a1) p /\ not in_pset p (l) -> offset_max(a1) p = offset_max(a2) p



(* Frame predicate *)
(* Logic definitions used for separation pragma *)
(* For in *)
type mybag 'a

predicate in_mybag 'a (mybag 'a) 

predicate disj_mybag (mybag 'a) (mybag 'a)

axiom disj_sym : forall s1 s2 : (mybag 'a) [disj_mybag s1 s2]. 
      disj_mybag s1 s2 -> disj_mybag s2 s1

predicate sub_mybag (mybag 'a) (mybag 'a) 

axiom sub_refl :
      forall sa : mybag (pointer 'a) [sub_mybag sa sa].
      sub_mybag sa sa

axiom sub_disj : forall s1 s2 s3 : (mybag 'a)
      [disj_mybag s1 s2, sub_mybag s2 s3 |
       disj_mybag s1 s3, sub_mybag s2 s3].
      disj_mybag s1 s3 -> sub_mybag s2 s3 -> disj_mybag s1 s2

axiom sub_in : forall s1 s2 : (mybag 'a). forall p : 'a
      [in_mybag p s1, sub_mybag s1 s2|
       in_mybag p s2, sub_mybag s1 s2].
      (not in_mybag p s2) -> sub_mybag s1 s2 -> not (in_mybag p s1)

axiom sub_sub : forall s1 s2 s3: (mybag 'a)
  [sub_mybag s1 s3, sub_mybag s2 s3 | sub_mybag s1 s3, sub_mybag s1 s2].
      sub_mybag s1 s2 -> sub_mybag s2 s3 -> sub_mybag s1 s3

(* for the frame_rule *)

(* footprint, memory after, memory before *)
predicate frame_between (mybag (pointer 'a)) (memory 'a 'b) (memory 'a 'b)
axiom frame_between_refl :
      forall sa : mybag (pointer 'a).
      forall m : memory 'a 'b [frame_between sa m m].
      frame_between sa m m

axiom frame_between_gen :
      forall sa : mybag (pointer 'a).
      forall m1 m2 : memory 'a 'b.
      forall p : pointer 'a.
      forall v : 'b [frame_between sa m1 (store m2 p v)].
      frame_between sa m1 m2 -> in_mybag p sa ->
      frame_between sa (store m1 p v) m2

axiom frame_between_gen2 :
      forall sa : mybag (pointer 'a).
      forall m1 m2 m3 : memory 'a 'b
      [frame_between sa m1 m2,frame_between sa m1 m3|
       frame_between sa m2 m3,frame_between sa m1 m3].
      frame_between sa m1 m2 -> frame_between sa m2 m3 ->
      frame_between sa m1 m3

axiom frame_between_gen_sub1 :
      forall s12 s23 s13 : mybag (pointer 'a).
      forall m1 m2 m3 : memory 'a 'b
      [frame_between s12 m1 m2,frame_between s13 m1 m3].
      sub_mybag s12 s13 -> frame_between s12 m1 m2 ->
      frame_between s23 m2 m3 ->
      frame_between s13 m1 m3

axiom frame_between_gen_sub2 :
      forall s12 s23 s13 : mybag (pointer 'a).
      forall m1 m2 m3 : memory 'a 'b
      [frame_between s23 m2 m3,frame_between s13 m1 m3].
      frame_between s12 m1 m2 ->
      sub_mybag s23 s13 -> frame_between s23 m2 m3 ->
      frame_between s13 m1 m3

axiom frame_between_pointer :
      forall sa : mybag (pointer 'a).
      forall m1 m2 : memory 'a 'b.
      forall p : pointer 'a.
      forall v : 'b[frame_between sa m1 m2,select(m1) p|
                    frame_between sa m1 m2,select(m2) p].
      frame_between sa m1 m2 -> not in_mybag p (sa) ->
      select(m1) p = select(m2) p

axiom frame_between_sub :
      forall sa : mybag (pointer 'a).
      forall sb : mybag (pointer 'a).
      forall m1 m2 : memory 'a 'b
      [frame_between sa m1 m2,sub_mybag sa sb].
      frame_between sa m1 m2 -> sub_mybag sa sb ->
      frame_between sb m1 m2


end

