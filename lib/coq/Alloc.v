(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require Pointer.
Require int.Int.
Require Alloc_table.
Require map.Map.
Require Pset.
Require Tag_id.
Require Tag.
Require Tag_table_type.
Require Tag_table.
Require Allocable.

(* Why3 assumption *)
Definition alloc_extends {t:Type} {t_WT:WhyType t}
  (a1:(Alloc_table.alloc_table t)) (a2:(Alloc_table.alloc_table t)): Prop :=
  forall (p:(Pointer.pointer t)), (Alloc_table.valid a1 p) ->
  (((Alloc_table.offset_min a1 p) = (Alloc_table.offset_min a2 p)) /\
  ((Alloc_table.offset_max a1 p) = (Alloc_table.offset_max a2 p))).

(* Why3 assumption *)
Definition free_extends {t:Type} {t_WT:WhyType t}
  (a1:(Alloc_table.alloc_table t)) (a2:(Alloc_table.alloc_table t)): Prop :=
  forall (p:(Pointer.pointer t)), (~ (Allocable.allocated a1 p)) ->
  (((Alloc_table.offset_min a1 p) = (Alloc_table.offset_min a2 p)) /\
  ((Alloc_table.offset_max a1 p) = (Alloc_table.offset_max a2 p))).

(* Why3 assumption *)
Definition alloc_block {t:Type} {t_WT:WhyType t} (a1:(Alloc_table.alloc_table
  t)) (a2:(Alloc_table.alloc_table t)) (p:(Pointer.pointer t))
  (n:Numbers.BinNums.Z): Prop := forall (q:(Pointer.pointer t)),
  ((~ (Pointer.same_block q p)) -> (((Alloc_table.offset_min a2
  q) = (Alloc_table.offset_min a1 q)) /\ ((Alloc_table.offset_max a2
  q) = (Alloc_table.offset_max a1 q)))) /\ ((Pointer.same_block q p) ->
  (((Alloc_table.offset_min a2 q) = (0%Z - (Pointer.sub_pointer q p))%Z) /\
  ((Alloc_table.offset_max a2 q) = ((n - 1%Z)%Z - (Pointer.sub_pointer q
  p))%Z))).

(* Why3 assumption *)
Definition free_block {t:Type} {t_WT:WhyType t} (a1:(Alloc_table.alloc_table
  t)) (a2:(Alloc_table.alloc_table t)) (p:(Pointer.pointer t)): Prop :=
  forall (q:(Pointer.pointer t)), ((~ (Pointer.same_block q p)) ->
  (((Alloc_table.offset_min a2 q) = (Alloc_table.offset_min a1 q)) /\
  ((Alloc_table.offset_max a2 q) = (Alloc_table.offset_max a1 q)))) /\
  ((Pointer.same_block q p) -> (((Alloc_table.offset_min a2
  q) = (0%Z - (Pointer.sub_pointer q p))%Z) /\ ((Alloc_table.offset_max a2
  q) = ((-3%Z)%Z - (Pointer.sub_pointer q p))%Z))).

(* Why3 assumption *)
Definition switch_blocks {t:Type} {t_WT:WhyType t}
  (a1:(Alloc_table.alloc_table t)) (a2:(Alloc_table.alloc_table t))
  (p:(Pointer.pointer t)) (q:(Pointer.pointer t))
  (n:Numbers.BinNums.Z): Prop := forall (r:(Pointer.pointer t)),
  (((~ (Pointer.same_block r p)) /\ ~ (Pointer.same_block r q)) ->
  (((Alloc_table.offset_min a2 r) = (Alloc_table.offset_min a1 r)) /\
  ((Alloc_table.offset_max a2 r) = (Alloc_table.offset_max a1 r)))) /\
  (((Pointer.same_block r p) -> (((Alloc_table.offset_min a2
  r) = (0%Z - (Pointer.sub_pointer r p))%Z) /\ ((Alloc_table.offset_max a2
  r) = ((-3%Z)%Z - (Pointer.sub_pointer r p))%Z))) /\ ((Pointer.same_block r
  q) -> (((Alloc_table.offset_min a2 r) = (0%Z - (Pointer.sub_pointer r
  q))%Z) /\ ((Alloc_table.offset_max a2
  r) = ((n - 1%Z)%Z - (Pointer.sub_pointer r q))%Z)))).

(* Why3 assumption *)
Definition alloc_blockset {t:Type} {t_WT:WhyType t}
  (a1:(Alloc_table.alloc_table t)) (a2:(Alloc_table.alloc_table t))
  (q:(Pset.pset t)): Prop := forall (p:(Pointer.pointer t)),
  (forall (r:(Pointer.pointer t)), (Pset.in_pset r q) ->
  ~ (Pointer.same_block p r)) -> (((Alloc_table.offset_min a1
  p) = (Alloc_table.offset_min a2 p)) /\ ((Alloc_table.offset_max a1
  p) = (Alloc_table.offset_max a2 p))).

(* Why3 assumption *)
Definition tag_extends {t:Type} {t_WT:WhyType t} (t1:(map.Map.map
  (Pointer.pointer t) (Tag_id.tag_id t))) (t2:(map.Map.map (Pointer.pointer
  t) (Tag_id.tag_id t))): Prop := forall (p:(Pointer.pointer t)),
  (~ ((map.Map.get t1 p) = (Tag.bottom_tag : (Tag_id.tag_id t)))) ->
  ((map.Map.get t2 p) = (map.Map.get t1 p)).

(* Why3 assumption *)
Definition alloc_tag_blockset {t:Type} {t_WT:WhyType t} (t1:(map.Map.map
  (Pointer.pointer t) (Tag_id.tag_id t))) (t2:(map.Map.map (Pointer.pointer
  t) (Tag_id.tag_id t))) (q:(Pset.pset t)): Prop :=
  forall (p:(Pointer.pointer t)), (~ ((map.Map.get t1
  p) = (Tag.bottom_tag : (Tag_id.tag_id t)))) -> ((map.Map.get t2
  p) = (map.Map.get t1 p)).

