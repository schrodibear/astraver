(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)
Require Export Why.

Require Export Reals.
Require Export Gappa_tactic.

(*Why logic*) Definition lt_real : R -> R -> Prop.
Admitted.

(*Why logic*) Definition le_real : R -> R -> Prop.
Admitted.

(*Why logic*) Definition gt_real : R -> R -> Prop.
Admitted.

(*Why logic*) Definition ge_real : R -> R -> Prop.
Admitted.

(*Why logic*) Definition eq_real : R -> R -> Prop.
Admitted.

(*Why logic*) Definition neq_real : R -> R -> Prop.
Admitted.

(*Why logic*) Definition add_real : R -> R -> R.
Admitted.

(*Why logic*) Definition sub_real : R -> R -> R.
Admitted.

(*Why logic*) Definition mul_real : R -> R -> R.
Admitted.

(*Why logic*) Definition div_real : R -> R -> R.
Admitted.

(*Why logic*) Definition neg_real : R -> R.
Admitted.

(*Why logic*) Definition real_of_int : Z -> R.
Admitted.

(*Why logic*) Definition int_of_real : R -> Z.
Admitted.

(*Why logic*) Definition lt_real_bool : R -> R -> bool.
Admitted.

(*Why logic*) Definition le_real_bool : R -> R -> bool.
Admitted.

(*Why logic*) Definition gt_real_bool : R -> R -> bool.
Admitted.

(*Why logic*) Definition ge_real_bool : R -> R -> bool.
Admitted.

(*Why logic*) Definition eq_real_bool : R -> R -> bool.
Admitted.

(*Why logic*) Definition neq_real_bool : R -> R -> bool.
Admitted.

(*Why axiom*) Lemma lt_real_bool_axiom :
  (forall (x:R), (forall (y:R), ((lt_real_bool x y) = true <-> (Rlt x y)))).
Admitted.

(*Why axiom*) Lemma le_real_bool_axiom :
  (forall (x:R), (forall (y:R), ((le_real_bool x y) = true <-> (Rle x y)))).
Admitted.

(*Why axiom*) Lemma gt_real_bool_axiom :
  (forall (x:R), (forall (y:R), ((gt_real_bool x y) = true <-> (Rgt x y)))).
Admitted.

(*Why axiom*) Lemma ge_real_bool_axiom :
  (forall (x:R), (forall (y:R), ((ge_real_bool x y) = true <-> (Rge x y)))).
Admitted.

(*Why axiom*) Lemma eq_real_bool_axiom :
  (forall (x:R), (forall (y:R), ((eq_real_bool x y) = true <-> (eq x y)))).
Admitted.

(*Why axiom*) Lemma neq_real_bool_axiom :
  (forall (x:R), (forall (y:R), ((neq_real_bool x y) = true <-> ~(eq x y)))).
Admitted.

(*Why logic*) Definition real_max : R -> R -> R.
exact Rmax.
Defined.

(*Why logic*) Definition real_min : R -> R -> R.
Admitted.

(*Why axiom*) Lemma real_max_is_ge :
  (forall (x:R),
   (forall (y:R), (Rge (real_max x y) x) /\ (Rge (real_max x y) y))).
unfold real_max.
intros; split.
apply Rle_ge; apply RmaxLess1.
apply Rle_ge; apply RmaxLess2.
Qed.

(*Why axiom*) Lemma real_max_is_some :
  (forall (x:R),
   (forall (y:R), (eq (real_max x y) x) \/ (eq (real_max x y) y))).
Admitted.

(*Why axiom*) Lemma real_min_is_le :
  (forall (x:R),
   (forall (y:R), (Rle (real_min x y) x) /\ (Rle (real_min x y) y))).
Admitted.

(*Why axiom*) Lemma real_min_is_some :
  (forall (x:R),
   (forall (y:R), (eq (real_min x y) x) \/ (eq (real_min x y) y))).
Admitted.

(*Why logic*) Definition sqrt_real : R -> R.
Admitted.

(*Why logic*) Definition pow_real : R -> R -> R.
Admitted.

(*Why logic*) Definition abs_real : R -> R.
Admitted.

(*Why axiom*) Lemma abs_real_pos :
  (forall (x:R), ((Rge x (0)%R) -> (eq (Rabs x) x))).
Admitted.

(*Why axiom*) Lemma abs_real_neg :
  (forall (x:R), ((Rle x (0)%R) -> (eq (Rabs x) (Ropp x)))).
Admitted.

(*Why logic*) Definition exp : R -> R.
Admitted.

(*Why logic*) Definition log : R -> R.
Admitted.

(*Why logic*) Definition log10 : R -> R.
Admitted.

(*Why axiom*) Lemma log_exp : (forall (x:R), (eq (log (exp x)) x)).
Admitted.

(*Why logic*) Definition cos : R -> R.
Admitted.

(*Why logic*) Definition sin : R -> R.
Admitted.

(*Why logic*) Definition tan : R -> R.
Admitted.

(*Why logic*) Definition cosh : R -> R.
Admitted.

(*Why logic*) Definition sinh : R -> R.
Admitted.

(*Why logic*) Definition tanh : R -> R.
Admitted.

(*Why logic*) Definition acos : R -> R.
Admitted.

(*Why logic*) Definition asin : R -> R.
Admitted.

(*Why logic*) Definition atan : R -> R.
Admitted.

(*Why logic*) Definition atan2 : R -> R -> R.
Admitted.

(*Why logic*) Definition hypot : R -> R -> R.
Admitted.

(*Why type*) Definition mode: Set.
Admitted.

(*Why logic*) Definition nearest_even : mode.
Admitted.

(*Why logic*) Definition to_zero : mode.
Admitted.

(*Why logic*) Definition up : mode.
Admitted.

(*Why logic*) Definition down : mode.
Admitted.

(*Why logic*) Definition nearest_away : mode.
Admitted.

(*Why axiom*) Lemma no_other_mode :
  (forall (m:mode), m = nearest_even \/ m = to_zero \/ m = up \/ m = down \/
   m = nearest_away).
Admitted.

(*Why axiom*) Lemma mode_distinct :
  ~(nearest_even = to_zero) /\ ~(nearest_even = up) /\
  ~(nearest_even = down) /\ ~(nearest_even = nearest_away) /\
  ~(to_zero = up) /\ ~(to_zero = down) /\ ~(to_zero = nearest_away) /\
  ~(up = down) /\ ~(up = nearest_away) /\ ~(down = nearest_away).
Admitted.

(*Why type*) Definition float_format: Set.
Admitted.

(*Why logic*) Definition Single : float_format.
Admitted.

(*Why logic*) Definition Double : float_format.
Admitted.

(*Why logic*) Definition Binary80 : float_format.
Admitted.

(*Why logic*) Definition Quad : float_format.
Admitted.

(*Why type*) Definition gen_float: Set.
Admitted.

(*Why logic*) Definition round_float : float_format -> mode -> R -> R.
Admitted.

(*Why logic*) Definition gen_float_of_real_logic :
  float_format -> mode -> R -> gen_float.
Admitted.

(*Why logic*) Definition float_value : gen_float -> R.
Admitted.

(*Why logic*) Definition exact_value : gen_float -> R.
Admitted.

(*Why logic*) Definition model_value : gen_float -> R.
Admitted.

(*Why logic*) Definition max_gen_float : float_format -> R.
Admitted.

(*Why logic*) Definition min_gen_float : float_format -> R.
Admitted.

(*Why axiom*) Lemma max_single :
  (eq (max_gen_float Single) (33554430 * 10141204801825835211973625643008)%R).
Admitted.

(*Why axiom*) Lemma max_double :
  (eq (max_gen_float Double) (9007199254740991 * 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848)%R).
Admitted.

(*Why axiom*) Lemma max_binary80 :
  (eq (max_gen_float Binary80) (36893488147419103230 * 32247736798518462797190682400943018516175543670762176328756482144039152568041578530784869838671865972235112113819199496038199562243910663703639216829515817160113666668284961240211417531345524616362428416330602972909073090642506869663645452596715605872599087734040646091573772820166659709055844941963407370586164567373226035331478682139323759030390169756949645512305687629336370321027572205368679114704513230126552642666038554179630426709583211834866442025402779192438955501011599402670474078315979195355085382566505714139685398132788514318516857572135124726246887683817431332595336004485663642818019898976640217306812561246935515065344079842840510097237727080984183495389368072338451606972939196031163096169199428295104133836032565137546925854725960037189363809577708269161078297604210091040361487260740249986383462509936056379514029238590893274747101383360270789838187035523056441182806100163231205084519320466554639512906620717463724499998301458223494983926579429691620482441269711367614363695303004564784940490808737282945526774911719814580226498373894496190363722344710426167299430387657571898023057486643921769603842100563739030336691645389445492926167601553616786810662018623358680430160062641831241724154676346446956483016401282337761290196283249206927902020112758851552032621043952751383985648183664483389113663697474518437837593333184771556767592207983004392544555790253882523577401634907110779490333277898545345116189557099744222039988799226930564811854616377334200980884800664165297389997964692737821895851412532797735108359203559095483310984658106121538922952889055685471125170175723317169593146664295809795623802089889643999415332745683386415868399386033192494319220974648757516356052320358879924313110310884292268260701379338994338108789478905916908161768521947880258489076565694006998844912795108503710046920084170185272761891078021513009632812076867050768977864194042678311369055206891516537021560300798059734220105917788064342240629479094309156746038941015397976356754789446933541512725013448273437547085806482191918607333986763432754828493535124047158138237637409295986872592429450114102485563352324125936266490688770968135131034136174587957527871860195705884826978646394753119840216174117299370924945153580348775272141051491679794666208271496285083069845671716424410676415869955363407007760984457820261218648462922790310801749176357827053037467349708500388630266544397409034371631091896035688733055939026767796894113267574863689692595743405212002418769330858650477320122610373855743251794447804031454470627265691044431863724394790157020749747541055050361466440339407757302440378131261742472589547459292823540674561003306548963849749082270981212995128117275025218442085292281511141515402115396401640539932607790670152400476588736655932035952713596437884630053601152144442487925678513707439322429603512863513937772419859052931939816470086355056926030022478683926998811371487429392139518642533641594848997510779898512138631152276001570189617571577117505003649765241953436949753578990662937482392034476147764320283391607594707828151932952800276998022501766325609849743945881184820529811657759571426179918970334290658333365861701775758750841107251261789710752326125748382152448064208818548133245897789022501048075101440658472328426420634576248281716861120935223755782204696386463154525203556339857062481846160548995002214961818560159651368345845120079053574246560180632466599839315290737648547666905885960618996553045213471557799885589510324494021059895586424571108214444983727593352510360659623694336871156982624856470568852865375380207522670830821369618815960216991366324223164204144978595243245271374275940010359033028897257400300896745451850608529102426268449369972727553520714138832750617641260586748778127838088604132276526159832635929297522815794276302150715627256492836149372994848554854698569272309146920737500425328133816423498307241515119828589935781842076654814684177765311659863765751080177655756714625693102613062094201622809620794125071255386708064848320764949530272433439273743375350030635762736423572793816319775637274418096041530332046157499910206330422447695636005413591515928110703929025624538022689370483285119600899835109936335014160851892197423917205143598214380079070972739838516200090223566115430366326479446523163497707352464003363812601636875414221683002445945525094887495651061394077679898700257734335650549937472988196339378468338812732120356422794395674496874734970810783457481759262704526738373673902304190312120953832926347769566045802798905863532547270355875796602597933585415990415455319622527795552163966597860161185787837154710170391266971001786784354270889004431725527269565131623614750206537270420868165375708343148079210039515648805899537033270890665024179796399141747260973138806486300213292018923538944420046243682707230360249726438817748989930350717709729915628184770113773134324454134693667450204984030027933986759393415283853749497928013737601928987148288)%R).
Admitted.

(*Why axiom*) Lemma min_single :
  (eq (min_gen_float Single) (1 / 713623846352979940529142984724747568191373312)%R).
Admitted.

(*Why axiom*) Lemma min_double :
  (eq (min_gen_float Double) (1 / 202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784)%R).
Admitted.

(*Why axiom*) Lemma min_Binary80 :
  (eq (min_gen_float Binary80) (1 / 2743334051410827248177484936422849315501035442156701911692353743125034835590542403165734966916902337712969659524636027115362409458082007879134660038522043383100837218743582031363566040446286313514102391566150019911607228406132228318009308982866027043373858962802958049943235956177208571500723525574962566882728438354418190459456445002024099361759818432484961078405112204483319627016731188233646703411898310402432825011277168715563659338568914906946365774221451835246390123504901964389640850870223255038570130491594353154118973408691742701880969453798737226098606788114329453848359127972225399154274942858234468808000792087342880310802676284607452353679990394087065986233166729381346238218257901213030038290745899277360066153699395755307707068073598746892768089602176802481153645199120687647398492455941060206326761138098481548711300136245963031297016272485413451058792302221586068056743031920546611607959967086406747799725623507896429669434289421777187577382481217601095608741329859230523941957852959994615945829580732104411971127194260547024500387944148372314244957693756975281530061016811249099554087093470413880124340877764654816555804513817786785307478700691460725995749195726568439821794436536553258074161801650653524003803937146681314562496587234426193728655292519607018572905146959536718355349446511272254694092504085952885977830289506126094446476857945407701721179534317673434420530251154303802097222720246900590983868027090940167701798089999151595269070288436477464776739458768651758865348750827959582779483831296338660482584302147553739967634061678071315232826355726142060549011084022156435968401930594480299590817610619400530032483122559298709925085307256658923383230405421695425840967168890037068035293388493149531616345004694380890391020082152120054522143141829416373290592433676452525246703683672580339774639617966661678985653671023022101162733578192754551011327638446071605924688410123584389154343278149348300062243051752181371163904281899108705164327449964700783177748212992500370257377522407593585086906090365356680588460698809058682406386129857299527969575511364650877492730078495543460034714359209285975601840486204440331870775593938124165933508442918205529875206539535851544741413708105981318096532124805943416088778728740100217641076270383259000489200465707879412578862322049996856124314111034067918345913864725979523313060250951836108453458785718470496588950285320330299760989453150059781354874411381187211134528848442121932157310168254259891493087558925336026462653020892164592503423841282649771990500894104912273854745032185655150238532284151364019242472570009033247114540136648814919670292510499374452612633201735313778919556703340373730466899591569025679373751207877924001606741792712130681260633113681725409591856536442556686481875185379971074029084171686998470286274858744437473788258421587885660584745243580660288204318803358157571170846517736473707331585019301482834686551049443894558108487181258440935853601420295703672452743443423647645562243100280498130478424555540997892297268128951566350967131319789144967631148744828745655334748986480050943665617021922632965952798163265385125785782284554795453511879397540395120148680457307125095221531555351987255617571284475202112536885724668821473671419597351057036447178922257282852914377006974834342569404352990809067354978094715541097615910064371058582190983303916146792148224834106352366607766930154058628743621610431811297774904498501021297368903376645561280371269935505876839569148694240791290440653331065506688647872600828913705879455290976098998749517944214129206573012414980801186998476390980731896805788000276626227368388692044463932113986094493133754702095193285110928890923786242455299068570879787331550051556819763561575891069611819211048710721888094036535730559517257912345434037402310548660492117254796571995781741930562651796643816349320481265951724968579797443673091308898723691273889110836525523844145951017378450978429798388058943542120005455780515065970947571129267884615733426142248181169730643963443993894167779284640232563894520645504420166422009428333511859849538182995239892729167052992259114920031134166142085856666264399983407054054380398625650942516863140613843088932758739014503972963035082316133489449526854983662350492656186622265618028173331031555201023016584915512748463681814486044790723675561213096759372924584190921338267999112744116240117441465595771861894191168693880611000630827884291732150910698224155933111002317035387344842219143207026986872804387949499704770456253316127550030675955166654960447875373092622306358201418632752331286783257557006283312979475021362010014296562044917555020794583727052446835617239265792940160642402267026351662580530436965370563900282077140410561110703308919654140820934256081544543320254145371169717719134377381650689981351098792856664538302228807655938929057126853897191180888056078274032609234070488317898098680286810868831846473672247110879935104984800734790428159369125157634996518143999838479903096832)%R).
Admitted.

(*Why predicate*) Definition no_overflow  (f:float_format) (m:mode) (x:R)
  := (Rle (Rabs (round_float f m x)) (max_gen_float f)).

(*Why axiom*) Lemma bounded_real_no_overflow :
  (forall (f:float_format),
   (forall (m:mode),
    (forall (x:R), ((Rle (Rabs x) (max_gen_float f)) -> (no_overflow f m x))))).
Admitted.

(*Why axiom*) Lemma round_down_le :
  (forall (f:float_format), (forall (x:R), (Rle (round_float f down x) x))).
Admitted.

(*Why axiom*) Lemma round_up_ge :
  (forall (f:float_format), (forall (x:R), (Rge (round_float f up x) x))).
Admitted.

(*Why axiom*) Lemma round_down_neg :
  (forall (f:float_format),
   (forall (x:R),
    (eq (round_float f down (Ropp x)) (Ropp (round_float f up x))))).
Admitted.

(*Why axiom*) Lemma round_up_neg :
  (forall (f:float_format),
   (forall (x:R),
    (eq (round_float f up (Ropp x)) (Ropp (round_float f down x))))).
Admitted.

(*Why axiom*) Lemma round_idempotent :
  (forall (f:float_format),
   (forall (m1:mode),
    (forall (m2:mode),
     (forall (x:R),
      (eq (round_float f m1 (round_float f m2 x)) (round_float f m2 x)))))).
Admitted.

(*Why axiom*) Lemma prod_pos :
  (forall (x:R),
   (forall (y:R),
    (((Rgt x (0)%R) /\ (Rgt y (0)%R) -> (Rgt (Rmult x y) (0)%R))) /\
    (((Rlt x (0)%R) /\ (Rlt y (0)%R) -> (Rgt (Rmult x y) (0)%R))))).
Admitted.

(*Why axiom*) Lemma abs_minus :
  (forall (x:R), (eq (Rabs (Ropp x)) (Rabs x))).
Admitted.

