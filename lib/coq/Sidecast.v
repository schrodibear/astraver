(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require Pointer.
Require int.Int.
Require map.Map.
Require Tag_id.
Require Tag.
Require Tag_table_type.
Require Tag_table.

Parameter sidecast: forall {t:Type} {t_WT:WhyType t}, (map.Map.map
  (Pointer.pointer t) (Tag_id.tag_id t)) -> (Pointer.pointer t) ->
  (Tag_id.tag_id t) -> (Pointer.pointer t).

Axiom Sidecast_refl : forall {t:Type} {t_WT:WhyType t},
  forall (t1:(map.Map.map (Pointer.pointer t) (Tag_id.tag_id t))),
  forall (p:(Pointer.pointer t)), forall (s2:(Tag_id.tag_id t)),
  ((map.Map.get t1 p) = s2) -> ((sidecast t1 p s2) = p).

Axiom Sidecast_extensionality : forall {t:Type} {t_WT:WhyType t},
  forall (p:(Pointer.pointer t)), forall (t1:(map.Map.map (Pointer.pointer t)
  (Tag_id.tag_id t))), forall (t2:(map.Map.map (Pointer.pointer t)
  (Tag_id.tag_id t))), forall (s:(Tag_id.tag_id t)), ((map.Map.get t1
  p) = (map.Map.get t2 p)) -> ((sidecast t1 p s) = (sidecast t2 p s)).

Axiom Sidecast_reduce : forall {t:Type} {t_WT:WhyType t},
  forall (t1:(map.Map.map (Pointer.pointer t) (Tag_id.tag_id t))),
  forall (p:(Pointer.pointer t)), forall (s1:(Tag_id.tag_id t)),
  forall (s2:(Tag_id.tag_id t)), ((sidecast t1 (sidecast t1 p s1)
  s2) = (sidecast t1 p s2)).

Axiom Typeof_sidecast : forall {t:Type} {t_WT:WhyType t},
  forall (t1:(map.Map.map (Pointer.pointer t) (Tag_id.tag_id t))),
  forall (p:(Pointer.pointer t)), forall (s2:(Tag_id.tag_id t)),
  (~ ((map.Map.get t1 p) = (Tag.bottom_tag : (Tag_id.tag_id t)))) ->
  ((~ (s2 = (Tag.bottom_tag : (Tag_id.tag_id t)))) -> ((map.Map.get t1
  (sidecast t1 p s2)) = s2)).

Axiom Sidecast_null : forall {t:Type} {t_WT:WhyType t},
  forall (t1:(map.Map.map (Pointer.pointer t) (Tag_id.tag_id t))),
  forall (s:(Tag_id.tag_id t)), ((sidecast t1
  (Pointer.null : (Pointer.pointer t)) s) = (Pointer.null : (Pointer.pointer
  t))).

Axiom Typeof_sidecast_fresh : forall {t:Type} {t_WT:WhyType t},
  forall (t1:(map.Map.map (Pointer.pointer t) (Tag_id.tag_id t))),
  forall (p:(Pointer.pointer t)), forall (s2:(Tag_id.tag_id t)),
  ((map.Map.get t1 p) = (Tag.bottom_tag : (Tag_id.tag_id t))) ->
  ((map.Map.get t1 (sidecast t1 p s2)) = (Tag.bottom_tag : (Tag_id.tag_id
  t))).

