(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require int.Int.
Require int.Abs.
Require int.EuclideanDivision.
Require int.ComputerDivision.
Require Enum_intf.
Require Enum.
Require Powers_of_2.
Require Bit_enum_intf.
Require Bit_enum.
Require Int64.

(* Why3 assumption *)
Definition normalize (x:Numbers.BinNums.Z): Numbers.BinNums.Z :=
  ((-9223372036854775808%Z)%Z + (int.EuclideanDivision.mod1 (x - (-9223372036854775808%Z)%Z)%Z
  ((9223372036854775807%Z - (-9223372036854775808%Z)%Z)%Z + 1%Z)%Z))%Z.

Parameter of_int_modulo: Numbers.BinNums.Z -> Int64.t.

Parameter of_int_const: Numbers.BinNums.Z -> Int64.t.

Parameter infix_plpc: Int64.t -> Int64.t -> Int64.t.

Parameter infix_mnpc: Int64.t -> Int64.t -> Int64.t.

Parameter prefix_mnpc: Int64.t -> Int64.t.

Parameter infix_aspc: Int64.t -> Int64.t -> Int64.t.

Parameter infix_slpc: Int64.t -> Int64.t -> Int64.t.

Parameter infix_pcpc: Int64.t -> Int64.t -> Int64.t.

Axiom tt : Type.
Parameter tt_WhyType : WhyType tt.
Existing Instance tt_WhyType.

Parameter extend: Int64.t -> tt.

Parameter is_safe: tt -> Prop.

Parameter infix_plpctl: tt -> tt -> tt.

Parameter infix_mnpctl: tt -> tt -> tt.

Parameter prefix_mnpctl: tt -> tt.

Parameter infix_aspctl: tt -> tt -> tt.

Parameter infix_slpctl: tt -> tt -> tt.

Parameter infix_pcpctl: tt -> tt -> tt.

Parameter infix_et: Int64.t -> Int64.t -> Int64.t.

Parameter infix_brcf: Int64.t -> Int64.t -> Int64.t.

Parameter prefix_tl: Int64.t -> Int64.t.

Parameter infix_cf: Int64.t -> Int64.t -> Int64.t.

Parameter lsl: Int64.t -> Int64.t -> Int64.t.

Parameter lsl_modulo: Int64.t -> Int64.t -> Int64.t.

Parameter lsr: Int64.t -> Int64.t -> Int64.t.

Parameter asr: Int64.t -> Int64.t -> Int64.t.

Parameter lsl_modulo_: tt -> tt -> tt.

Parameter lt: Int64.t -> Int64.t -> Prop.

Parameter le: Int64.t -> Int64.t -> Prop.

Parameter gt: Int64.t -> Int64.t -> Prop.

Parameter ge: Int64.t -> Int64.t -> Prop.

Axiom Of_int_modulo : forall (n:Numbers.BinNums.Z),
  ((Int64.to_int (of_int_modulo n)) = (normalize n)).

Axiom Add_modulo : forall (a:Int64.t) (b:Int64.t),
  ((Int64.to_int (infix_plpc a
  b)) = (normalize ((Int64.to_int a) + (Int64.to_int b))%Z)).

Axiom Neg_modulo : forall (a:Int64.t),
  ((Int64.to_int (prefix_mnpc a)) = (normalize (-(Int64.to_int a))%Z)).

Axiom Sub_modulo : forall (a:Int64.t) (b:Int64.t),
  ((Int64.to_int (infix_mnpc a
  b)) = (normalize ((Int64.to_int a) - (Int64.to_int b))%Z)).

Axiom Mult_modulo : forall (a:Int64.t) (b:Int64.t),
  ((Int64.to_int (infix_aspc a
  b)) = (normalize ((Int64.to_int a) * (Int64.to_int b))%Z)).

Axiom Div_modulo : forall (a:Int64.t) (b:Int64.t),
  ((Int64.to_int (infix_slpc a
  b)) = (normalize (ZArith.BinInt.Z.quot (Int64.to_int a) (Int64.to_int b)))).

Axiom Mod_modulo : forall (a:Int64.t) (b:Int64.t),
  ((Int64.to_int (infix_pcpc a
  b)) = (ZArith.BinInt.Z.rem (Int64.to_int a) (Int64.to_int b))).

Axiom Val_two_power_size : ((Powers_of_2.power2 64%Z) = ((9223372036854775807%Z - (-9223372036854775808%Z)%Z)%Z + 1%Z)%Z).

Axiom Of_int_const : forall (n:Numbers.BinNums.Z),
  ((of_int_const n) = (Int64.of_int n)).

Axiom Of_int_def : forall (n:Numbers.BinNums.Z), (Int64.in_bounds n) ->
  ((Int64.of_int n) = (of_int_modulo n)).

Axiom Lt_eq : forall (a:Int64.t) (b:Int64.t), (Int64.infix_ls a b) <-> (lt a
  b).

Axiom Le_eq : forall (a:Int64.t) (b:Int64.t), (Int64.infix_lseq a b) <-> (le
  a b).

Axiom Gt_eq : forall (a:Int64.t) (b:Int64.t), (Int64.infix_gt a b) <-> (gt a
  b).

Axiom Ge_eq : forall (a:Int64.t) (b:Int64.t), (Int64.infix_gteq a b) <-> (ge
  a b).

Parameter nth: Int64.t -> Numbers.BinNums.Z -> Prop.

Axiom Nth : forall (a:Int64.t), forall (n:Numbers.BinNums.Z),
  ((0%Z <= n)%Z /\ (n < 64%Z)%Z) -> ((nth a n) <->
  ((((Int64.to_int a) >= 0%Z)%Z /\
  ((ZArith.BinInt.Z.rem (Int64.to_int a) (Powers_of_2.power2 (n + 1%Z)%Z)) >= (Powers_of_2.power2 n))%Z) \/
  (((Int64.to_int a) < 0%Z)%Z /\
  ((ZArith.BinInt.Z.rem (((9223372036854775807%Z - (-9223372036854775808%Z)%Z)%Z + 1%Z)%Z + (Int64.to_int a))%Z (Powers_of_2.power2 (n + 1%Z)%Z)) >= (Powers_of_2.power2 n))%Z))).

Axiom Nth_bw_and : forall (a:Int64.t) (b:Int64.t),
  forall (n:Numbers.BinNums.Z), ((0%Z <= n)%Z /\ (n < 64%Z)%Z) -> ((nth
  (infix_et a b) n) <-> ((nth a n) /\ (nth b n))).

Axiom Nth_bw_or : forall (a:Int64.t) (b:Int64.t),
  forall (n:Numbers.BinNums.Z), ((0%Z <= n)%Z /\ (n < 64%Z)%Z) -> ((nth
  (infix_brcf a b) n) <-> ((nth a n) \/ (nth b n))).

Axiom Nth_bw_xor : forall (a:Int64.t) (b:Int64.t),
  forall (n:Numbers.BinNums.Z), ((0%Z <= n)%Z /\ (n < 64%Z)%Z) -> ((nth
  (infix_cf a b) n) <-> ~ ((nth a n) <-> (nth b n))).

Axiom Nth_bw_not : forall (a:Int64.t), forall (n:Numbers.BinNums.Z),
  ((0%Z <= n)%Z /\ (n < 64%Z)%Z) -> ((nth (prefix_tl a) n) <-> ~ (nth a n)).

Axiom Lsr_nth_low : forall (b:Int64.t), forall (s:Int64.t),
  forall (n:Numbers.BinNums.Z), ((0%Z <= (Int64.to_int s))%Z /\
  ((Int64.to_int s) < 64%Z)%Z) -> (((0%Z <= n)%Z /\ (n < 64%Z)%Z) ->
  (((n + (Int64.to_int s))%Z < 64%Z)%Z -> ((nth (lsr b s) n) <-> (nth b
  (n + (Int64.to_int s))%Z)))).

Axiom Lsr_nth_high : forall (b:Int64.t), forall (s:Int64.t),
  forall (n:Numbers.BinNums.Z), ((0%Z <= (Int64.to_int s))%Z /\
  ((Int64.to_int s) < 64%Z)%Z) -> (((0%Z <= n)%Z /\ (n < 64%Z)%Z) ->
  (((n + (Int64.to_int s))%Z >= 64%Z)%Z -> ~ (nth (lsr b s) n))).

Axiom Asr_nth_low : forall (b:Int64.t), forall (s:Int64.t),
  forall (n:Numbers.BinNums.Z), ((0%Z <= (Int64.to_int s))%Z /\
  ((Int64.to_int s) < 64%Z)%Z) -> (((0%Z <= n)%Z /\ (n < 64%Z)%Z) ->
  (((0%Z <= (n + (Int64.to_int s))%Z)%Z /\
  ((n + (Int64.to_int s))%Z < 64%Z)%Z) -> ((nth (asr b s) n) <-> (nth b
  (n + (Int64.to_int s))%Z)))).

Axiom Asr_nth_high : forall (b:Int64.t), forall (s:Int64.t),
  forall (n:Numbers.BinNums.Z), ((0%Z <= (Int64.to_int s))%Z /\
  ((Int64.to_int s) < 64%Z)%Z) -> (((0%Z <= n)%Z /\ (n < 64%Z)%Z) ->
  (((n + (Int64.to_int s))%Z >= 64%Z)%Z -> ((nth (asr b s) n) <-> (nth b
  (64%Z - 1%Z)%Z)))).

Axiom Lsl_modulo_nth_high : forall (b:Int64.t), forall (s:Int64.t),
  forall (n:Numbers.BinNums.Z), ((0%Z <= (Int64.to_int s))%Z /\
  ((Int64.to_int s) < 64%Z)%Z) -> (((0%Z <= n)%Z /\ (n < 64%Z)%Z) ->
  (((0%Z <= (n - (Int64.to_int s))%Z)%Z /\
  ((n - (Int64.to_int s))%Z < 64%Z)%Z) -> ((nth (lsl_modulo b s) n) <-> (nth
  b (n - (Int64.to_int s))%Z)))).

Axiom Lsl_modulo_nth_low : forall (b:Int64.t), forall (s:Int64.t),
  forall (n:Numbers.BinNums.Z), ((0%Z <= (Int64.to_int s))%Z /\
  ((Int64.to_int s) < 64%Z)%Z) -> (((0%Z <= n)%Z /\ (n < 64%Z)%Z) ->
  (((n - (Int64.to_int s))%Z < 0%Z)%Z -> ~ (nth (lsl_modulo b s) n))).

Axiom Lsl : forall (b:Int64.t), forall (s:Int64.t),
  ((0%Z <= (Int64.to_int s))%Z /\ ((Int64.to_int s) < 64%Z)%Z) ->
  (((lsr (lsl_modulo b s) s) = s) -> ((lsl b s) = (lsl_modulo b s))).

Axiom Lsr_unsigned : True.

Axiom Asr_signed : forall (a:Int64.t), forall (n:Int64.t),
  ((0%Z <= (Int64.to_int n))%Z /\ ((Int64.to_int n) < 64%Z)%Z) ->
  ((Int64.to_int (asr a n)) = (int.EuclideanDivision.div (Int64.to_int a)
  (Powers_of_2.power2 (Int64.to_int n)))).

Axiom Lsl_modulo : forall (a:Int64.t), forall (n:Int64.t),
  ((0%Z <= (Int64.to_int n))%Z /\ ((Int64.to_int n) < 64%Z)%Z) ->
  ((Int64.to_int (lsl_modulo a
  n)) = (normalize ((Int64.to_int a) * (Powers_of_2.power2 (Int64.to_int n)))%Z)).

