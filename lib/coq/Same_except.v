(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require Pointer.
Require int.Int.
Require Alloc_table.
Require map.Map.
Require Pset.
Require Tag_id.
Require Tag.
Require Tag_table_type.
Require Tag_table.

(* Why3 assumption *)
Definition alloc_same_except {t:Type} {t_WT:WhyType t}
  (a1:(Alloc_table.alloc_table t)) (a2:(Alloc_table.alloc_table t))
  (l:(Pset.pset t)): Prop := forall (p:(Pointer.pointer t)), (~ (Pset.in_pset
  p l)) -> (((Alloc_table.offset_min a1 p) = (Alloc_table.offset_min a2
  p)) /\ ((Alloc_table.offset_max a1 p) = (Alloc_table.offset_max a2 p))).

Axiom Alloc_same_except_trans : forall {t:Type} {t_WT:WhyType t},
  forall (l:(Pset.pset t)), forall (a1:(Alloc_table.alloc_table t)),
  forall (a2:(Alloc_table.alloc_table t)),
  forall (a3:(Alloc_table.alloc_table t)), ((alloc_same_except a1 a2 l) /\
  (alloc_same_except a2 a3 l)) -> (alloc_same_except a1 a3 l).

(* Why3 assumption *)
Definition tag_same_except {t:Type} {t_WT:WhyType t} (t1:(map.Map.map
  (Pointer.pointer t) (Tag_id.tag_id t))) (t2:(map.Map.map (Pointer.pointer
  t) (Tag_id.tag_id t))) (l:(Pset.pset t)): Prop :=
  forall (p:(Pointer.pointer t)), (~ ((map.Map.get t1
  p) = (Tag.bottom_tag : (Tag_id.tag_id t)))) -> ((map.Map.get t2
  p) = (map.Map.get t1 p)).

Axiom Tag_same_except_refl : forall {t:Type} {t_WT:WhyType t},
  forall (t1:(map.Map.map (Pointer.pointer t) (Tag_id.tag_id t))),
  forall (l:(Pset.pset t)), (tag_same_except t1 t1 l).

