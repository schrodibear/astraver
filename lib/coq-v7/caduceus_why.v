(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Why.
Require WhyFloat.

Parameter addr : Set.
Parameter pointer : Set.
Parameter alloc : Set.
Parameter memory : Set -> Set.
Parameter assign_loc : Set.

(*Why logic*) Definition bw_compl : Z -> Z.
Admitted.

(*Why logic*) Definition bw_and : Z -> Z -> Z.
Admitted.

(*Why logic*) Definition bw_xor : Z -> Z -> Z.
Admitted.

(*Why logic*) Definition bw_or : Z -> Z -> Z.
Admitted.

(*Why logic*) Definition lsl : Z -> Z -> Z.
Admitted.

(*Why logic*) Definition lsr : Z -> Z -> Z.
Admitted.





(*Why*) Parameter null : pointer.

(*Why logic*) Definition block_length : alloc_table -> pointer -> Z.
Admitted.

(*Why logic*) Definition base_addr : pointer -> addr.
Admitted.

(*Why logic*) Definition offset : pointer -> Z.
Admitted.

(*Why logic*) Definition shift : pointer -> Z -> pointer.
Admitted.

Admitted.

(*Why logic*) Definition sub_pointer : pointer -> pointer -> Z.
Admitted.

(*Why predicate*) Definition lt_pointer  [p1:pointer] [p2:pointer]
  := (base_addr p1) = (base_addr p2) /\ `(offset p1) < (offset p2)`.

(*Why predicate*) Definition le_pointer  [p1:pointer] [p2:pointer]
  := (base_addr p1) = (base_addr p2) /\ `(offset p1) <= (offset p2)`.

(*Why predicate*) Definition gt_pointer  [p1:pointer] [p2:pointer]
  := (base_addr p1) = (base_addr p2) /\ `(offset p1) > (offset p2)`.

(*Why predicate*) Definition ge_pointer  [p1:pointer] [p2:pointer]
  := (base_addr p1) = (base_addr p2) /\ `(offset p1) >= (offset p2)`.



(*Why predicate*) Definition valid  [a:alloc_table] [p:pointer]
  := ~(p = null) /\ `0 <= (offset p)` /\ `(offset p) < (block_length a p)`.

(*Why predicate*) Definition valid_index  [a:alloc_table] [p:pointer] [i:Z]
  := ~(p = null) /\ `0 <= (offset p) + i` /\
     `(offset p) + i < (block_length a p)`.

(*Why predicate*) Definition valid_range  [a:alloc_table] [p:pointer] [i:Z]
  [j:Z]
  := ~(p = null) /\ `0 <= (offset p) + i` /\ `i <= j` /\
     `(offset p) + j < (block_length a p)`.

Admitted.

(*Why axiom*) Lemma shift_zero : ((p:pointer) (shift p `0`) = p).
Admitted.

(*Why axiom*) Lemma shift_shift :
  ((p:pointer) ((i:Z) ((j:Z) (shift (shift p i) j) = (shift p `i + j`)))).
Admitted.

(*Why axiom*) Lemma base_addr_shift :
  ((p:pointer) ((i:Z) (base_addr (shift p i)) = (base_addr p))).
Admitted.

(*Why axiom*) Lemma block_length_shift :
  ((a:alloc_table)
   ((p:pointer) ((i:Z) `(block_length a (shift p i)) = (block_length a p)`))).
Admitted.

(*Why axiom*) Lemma shift_null :
  ((p:pointer) ((i:Z) (p = null -> (shift p i) = null))).
Admitted.

(*Why axiom*) Lemma shift_not_null :
  ((p:pointer) ((i:Z) (~(p = null) -> ~((shift p i) = null)))).
Admitted.

(*Why axiom*) Lemma base_addr_block_length :
  ((a:alloc_table)
   ((p1:pointer)
    ((p2:pointer)
     ((base_addr p1) = (base_addr p2) ->
      `(block_length a p1) = (block_length a p2)`)))).
Admitted.

(*Why axiom*) Lemma pointer_pair_1 :
  ((p1:pointer)
   ((p2:pointer)
    ((base_addr p1) = (base_addr p2) /\ `(offset p1) = (offset p2)` ->
     p1 = p2))).
Admitted.

(*Why axiom*) Lemma pointer_pair_2 :
  ((p1:pointer)
   ((p2:pointer)
    (p1 = p2 -> (base_addr p1) = (base_addr p2) /\
     `(offset p1) = (offset p2)`))).
Admitted.

(*Why axiom*) Lemma neq_base_addr_neq_shift :
  ((p1:pointer)
   ((p2:pointer)
    ((i:Z)
     ((j:Z)
      (~((base_addr p1) = (base_addr p2)) -> ~((shift p1 i) = (shift p2 j))))))).
Admitted.

(*Why axiom*) Lemma neq_offset_neq_shift :
  ((p1:pointer)
   ((p2:pointer)
    ((i:Z)
     ((j:Z)
      (`(offset p1) + i <> (offset p2) + j` -> ~((shift p1 i) = (shift p2 j))))))).
Admitted.

(*Why axiom*) Lemma eq_offset_eq_shift :
  ((p1:pointer)
   ((p2:pointer)
    ((i:Z)
     ((j:Z)
      ((base_addr p1) = (base_addr p2) ->
       (`(offset p1) + i = (offset p2) + j` -> (shift p1 i) = (shift p2 j))))))).
Admitted.

(*Why axiom*) Lemma valid_index_valid_shift :
  ((a:alloc_table)
   ((p:pointer) ((i:Z) ((valid_index a p i) -> (valid a (shift p i)))))).
Admitted.

Admitted.

Admitted.

(*Why axiom*) Lemma valid_range_valid_shift :
  ((a:alloc_table)
   ((p:pointer)
    ((i:Z)
     ((j:Z)
      ((k:Z)
       ((valid_range a p i j) ->
        (`i <= k` /\ `k <= j` -> (valid a (shift p k))))))))).
Admitted.

(*Why axiom*) Lemma valid_range_valid :
  ((a:alloc_table)
   ((p:pointer)
    ((i:Z)
     ((j:Z) ((valid_range a p i j) -> (`i <= 0` /\ `0 <= j` -> (valid a p))))))).
Admitted.

(*Why axiom*) Lemma valid_range_valid_index :
  ((a:alloc_table)
   ((p:pointer)
    ((i:Z)
     ((j:Z)
      ((k:Z)
       ((valid_range a p i j) ->
        (`i <= k` /\ `k <= j` -> (valid_index a p k)))))))).
Admitted.

(*Why axiom*) Lemma sub_pointer_def :
  ((p1:pointer)
   ((p2:pointer)
    ((base_addr p1) = (base_addr p2) ->
     `(sub_pointer p1 p2) = (offset p1) - (offset p2)`))).
Admitted.







(*Why logic*) Definition acc : (A21:Set) ((memory) A21) -> pointer -> A21.
Admitted.
Implicits acc [1].


(*Why logic*) Definition upd :
  (A22:Set) ((memory) A22) -> pointer -> A22 -> ((memory) A22).
Admitted.
Implicits upd [1].


(*Why axiom*) Lemma acc_upd :
  (A23:Set)
  ((m:((memory) A23)) ((p:pointer) ((a:A23) (acc (upd m p a) p) = a))).
Admitted.

(*Why axiom*) Lemma acc_upd_eq :
  (A24:Set)
  ((m:((memory) A24))
   ((p1:pointer)
    ((p2:pointer) ((a:A24) (p1 = p2 -> (acc (upd m p1 a) p2) = a))))).
Admitted.

(*Why axiom*) Lemma acc_upd_neq :
  (A25:Set)
  ((m:((memory) A25))
   ((p1:pointer)
    ((p2:pointer)
     ((a:A25) (~(p1 = p2) -> (acc (upd m p1 a) p2) = (acc m p2)))))).
Admitted.

(*Why axiom*) Lemma false_not_true : ~(false = true).
Admitted.

(*Why logic*) Definition nothing_loc : assign_loc.
Admitted.

(*Why logic*) Definition pointer_loc : pointer -> assign_loc.
Admitted.

(*Why logic*) Definition all_loc : pointer -> assign_loc.
Admitted.

(*Why logic*) Definition range_loc : pointer -> Z -> Z -> assign_loc.
Admitted.

(*Why logic*) Definition union_loc : assign_loc -> assign_loc -> assign_loc.
Admitted.

(*Why logic*) Definition unchanged : pointer -> assign_loc -> Prop.
Admitted.

(*Why predicate*) Definition assigns [A26:Set] [a:alloc_table]
  [m1:((memory) A26)] [m2:((memory) A26)] [l:assign_loc]
  := ((p:pointer)
      ((valid a p) -> ((unchanged p l) -> (acc m2 p) = (acc m1 p)))).

(*Why axiom*) Lemma unchanged_nothing_intro :
  ((p:pointer) (unchanged p nothing_loc)).
Admitted.

(*Why axiom*) Lemma unchanged_pointer_intro :
  ((p1:pointer)
   ((p2:pointer) (~(p1 = p2) -> (unchanged p1 (pointer_loc p2))))).
Admitted.

(*Why axiom*) Lemma unchanged_pointer_elim :
  ((p1:pointer)
   ((p2:pointer) ((unchanged p1 (pointer_loc p2)) -> ~(p1 = p2)))).
Admitted.

(*Why axiom*) Lemma unchanged_union_intro :
  ((l1:assign_loc)
   ((l2:assign_loc)
    ((p:pointer)
     ((unchanged p l1) /\ (unchanged p l2) -> (unchanged p (union_loc l1 l2)))))).
Admitted.

(*Why axiom*) Lemma unchanged_union_elim1 :
  ((l1:assign_loc)
   ((l2:assign_loc)
    ((p:pointer) ((unchanged p (union_loc l1 l2)) -> (unchanged p l1))))).
Admitted.

(*Why axiom*) Lemma unchanged_union_elim2 :
  ((l1:assign_loc)
   ((l2:assign_loc)
    ((p:pointer) ((unchanged p (union_loc l1 l2)) -> (unchanged p l2))))).
Admitted.

(*Why axiom*) Lemma unchanged_range_intro :
  ((p1:pointer)
   ((p2:pointer)
    ((a:Z)
     ((b:Z)
      (((i:Z) (`a <= i` /\ `i <= b` -> ~(p1 = (shift p2 i)))) ->
       (unchanged p1 (range_loc p2 a b))))))).
Admitted.

(*Why axiom*) Lemma unchanged_range_elim :
  ((p1:pointer)
   ((p2:pointer)
    ((a:Z)
     ((b:Z)
      ((unchanged p1 (range_loc p2 a b)) ->
       ((i:Z) (`a <= i` /\ `i <= b` -> ~(p1 = (shift p2 i))))))))).
Admitted.

(*Why axiom*) Lemma assigns_trans :
  (A27:Set)
  ((a:alloc_table)
   ((l:assign_loc)
    ((m1:((memory) A27))
     ((m2:((memory) A27))
      ((m3:((memory) A27))
       ((assigns a m1 m2 l) -> ((assigns a m2 m3 l) -> (assigns a m1 m3 l)))))))).
Admitted.

(*Why axiom*) Lemma assigns_refl :
  (A28:Set)
  ((a:alloc_table) ((l:assign_loc) ((m:((memory) A28)) (assigns a m m l)))).
Admitted.

(*Why logic*) Definition on_heap : alloc_table -> pointer -> Prop.
Admitted.

(*Why logic*) Definition on_stack : alloc_table -> pointer -> Prop.
Admitted.

(*Why logic*) Definition fresh : alloc_table -> pointer -> Prop.
Admitted.

(*Why axiom*) Lemma fresh_not_valid :
  ((a:alloc_table)
   ((p:pointer) ((fresh a p) -> ((i:Z) ~(valid a (shift p i)))))).
Admitted.


Admitted.

Admitted.

Admitted.

Admitted.

Admitted.

Admitted.

Admitted.

Admitted.


Admitted.

Implicits assigns [1].

Admitted.

Admitted.

Admitted.

Admitted.

Admitted.

Admitted.

Admitted.

Admitted.

Admitted.



Admitted.

Admitted.

Admitted.

Admitted.

Admitted.

Admitted.

Admitted.

(*Why logic*) Definition alloc_stack :
  pointer -> alloc_table -> alloc_table -> Prop.
Admitted.

(*Why axiom*) Lemma alloc_stack_p :
  ((p:pointer)
   ((a1:alloc_table)
    ((a2:alloc_table) ((alloc_stack p a1 a2) -> (valid a2 p))))).
Admitted.

(*Why axiom*) Lemma alloc_stack_valid :
  ((p:pointer)
   ((a1:alloc_table)
    ((a2:alloc_table)
     ((alloc_stack p a1 a2) -> ((q:pointer) ((valid a1 q) -> (valid a2 q))))))).
Admitted.

(*Why axiom*) Lemma alloc_stack_valid_range :
  ((p:pointer)
   ((a1:alloc_table)
    ((a2:alloc_table)
     ((alloc_stack p a1 a2) ->
      ((q:pointer)
       ((i:Z) ((j:Z) ((valid_range a1 q i j) -> (valid_range a2 q i j))))))))).
Admitted.

(*Why logic*) Definition free_heap :
  pointer -> alloc_table -> alloc_table -> Prop.
Admitted.

(*Why logic*) Definition free_stack :
  alloc_table -> alloc_table -> alloc_table -> Prop.
Admitted.

(*Why axiom*) Lemma free_stack_heap :
  ((a1:alloc_table)
   ((a2:alloc_table)
    ((a3:alloc_table)
     ((free_stack a1 a2 a3) ->
      ((p:pointer) ((valid a2 p) -> ((on_heap a2 p) -> (valid a3 p)))))))).
Admitted.

(*Why axiom*) Lemma free_stack_stack :
  ((a1:alloc_table)
   ((a2:alloc_table)
    ((a3:alloc_table)
     ((free_stack a1 a2 a3) ->
      ((p:pointer) ((valid a1 p) -> ((on_stack a1 p) -> (valid a3 p)))))))).
Admitted.

