
(***************************************************************************)
(***************************************************************************)
(*** Jessie prelude for floating-point arithmetic (Strict and Full mode) ***)
(***************************************************************************)
(***************************************************************************)


include "real.why"

type mode = nearest_even | to_zero | up | down | nearest_away

parameter current_rounding_mode : mode ref

(* About the double format *)
type double

logic round_double : mode, real -> real
logic round_double_logic : mode, real -> double

logic double_value : double -> real
logic double_exact : double -> real
logic double_model : double -> real

function double_round_error(x:double) : real = 
	 abs_real(double_value(x) - double_exact(x))
function double_total_error(x:double) : real = 
	 abs_real(double_value(x) - double_model(x))

parameter double_set_model : x:double ref -> y:real ->
  { } 
  unit writes x
  { double_value(x) = double_value(x@)
    and double_exact(x) = double_exact(x@)
    and double_model(x) = y }

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023
parameter any_double : unit -> { } double { }

predicate no_overflow_double(m:mode,x:real) = 
	  abs_real(round_double(m,x)) <= max_double

axiom bounded_real_no_overflow_double : forall m:mode. forall x:real. 
      abs_real(x) <= max_double -> no_overflow_double(m,x)


(* About the single format *)
type single

logic round_single : mode, real -> real
logic round_single_logic : mode, real -> single

logic single_value : single -> real
logic single_exact : single -> real
logic single_model : single -> real

function single_round_error(x:single) : real = 
	 abs_real(single_value(x) - single_exact(x))
function single_total_error(x:single) : real = 
	 abs_real(single_value(x) - single_model(x))

parameter single_set_model : x:single ref -> y:real ->
  { } 
  unit writes x
  { single_value(x) = single_value(x@)
    and single_exact(x) = single_exact(x@)
    and single_model(x) = y }

function max_single() : real = 0x1.FFFFFEp127
parameter any_single : unit -> { } single { }

predicate no_overflow_single(m:mode,x:real) = 
	  abs_real(round_single(m,x)) <= max_single

axiom bounded_real_no_overflow_single : forall m:mode. forall x:real. 
      abs_real(x) <= max_single -> no_overflow_single(m,x)

(* Casts *)

logic single_to_double: mode, single -> double
logic double_to_single: mode, double -> single


