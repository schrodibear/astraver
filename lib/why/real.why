(*********)
(* Reals *)
(*********)

(* real comparisons in logic... *)
logic lt_real : real,real -> prop
logic le_real : real,real -> prop
logic gt_real : real,real -> prop
logic ge_real : real,real -> prop
logic eq_real : real,real -> prop
logic neq_real : real,real -> prop

(* ... and in programs: *)
parameter lt_real_ : x:real -> y:real -> {} bool {if result then x<y else x>=y}
parameter le_real_ : x:real -> y:real -> {} bool {if result then x<=y else x>y}
parameter gt_real_ : x:real -> y:real -> {} bool {if result then x>y else x<=y}
parameter ge_real_ : x:real -> y:real -> {} bool {if result then x>=y else x<y}
parameter eq_real_ : x:real -> y:real -> {} bool {if result then x=y else x<>y}
parameter neq_real_: x:real -> y:real -> {} bool {if result then x<>y else x=y}

logic add_real : real,real -> real (* + *)
logic sub_real : real,real -> real (* - *)
logic mul_real : real,real -> real (* * *)
logic div_real : real,real -> real (* / *)
logic neg_real : real -> real      (* prefix - *)

(* / in programs: *)
parameter div_real_ : x:real -> y:real -> { y<>0.0 } real { result = x / y }


(* conversion from integers *)

logic real_of_int : int -> real

axiom real_of_int_zero: real_of_int(0) = 0.0
axiom real_of_int_one: real_of_int(1) = 1.0

axiom real_of_int_add: 
  forall x,y:int.
    real_of_int(x+y) = real_of_int(x) + real_of_int(y)

axiom real_of_int_sub: 
  forall x,y:int.
    real_of_int(x-y) = real_of_int(x) - real_of_int(y)

(* conversions to integers *)

(* truncate_real_to_int: rounds towards zero *)

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  forall x:real.
    x >= 0.0 -> 
       real_of_int(truncate_real_to_int(x)) <= x < real_of_int(truncate_real_to_int(x) + 1)

axiom truncate_up_neg:
  forall x:real.
    x <= 0.0 -> 
      real_of_int(truncate_real_to_int(x)-1) < x <= real_of_int(truncate_real_to_int(x))

(* roundings up and down *)

logic floor_real_to_int: real -> int
logic ceil_real_to_int: real -> int

(* todo: axiomatization *)

(* boolean versions of the comparisons and the corresponding axioms *)
logic lt_real_bool : real,real -> bool
logic le_real_bool : real,real -> bool
logic gt_real_bool : real,real -> bool
logic ge_real_bool : real,real -> bool
logic eq_real_bool : real,real -> bool
logic neq_real_bool : real,real -> bool

axiom lt_real_bool_axiom : 
  forall x:real. forall y:real. lt_real_bool(x,y)=true <-> x<y
axiom le_real_bool_axiom : 
  forall x:real. forall y:real. le_real_bool(x,y)=true <-> x<=y
axiom gt_real_bool_axiom : 
  forall x:real. forall y:real. gt_real_bool(x,y)=true <-> x>y
axiom ge_real_bool_axiom : 
  forall x:real. forall y:real. ge_real_bool(x,y)=true <-> x>=y
axiom eq_real_bool_axiom : 
  forall x:real. forall y:real. eq_real_bool(x,y)=true <-> x=y
axiom neq_real_bool_axiom : 
  forall x:real. forall y:real. neq_real_bool(x,y)=true <-> x<>y


(* min and max *)

logic real_max : real, real -> real
logic real_min : real, real -> real

axiom real_max_is_ge :  
  forall x:real. forall y:real. 
  real_max(x,y) >= x and real_max(x,y) >= y

axiom real_max_is_some :  
  forall x:real. forall y:real. 
  (real_max(x,y) = x or real_max(x,y) = y) 

axiom real_min_is_le :  
  forall x:real. forall y:real. 
  real_min(x,y) <= x and real_min(x,y) <= y

axiom real_min_is_some :  
  forall x:real. forall y:real. 
  (real_min(x,y) = x or real_min(x,y) = y) 


(* square root *)

function sqr_real(x:real):real = x * x

logic sqrt_real : real -> real

axiom sqrt_pos: 
  forall x:real. x >= 0.0 -> sqrt_real(x) >= 0.0

axiom sqrt_sqr: 
  forall x:real. x >= 0.0 -> sqr_real(sqrt_real(x)) = x

axiom sqr_sqrt: 
  forall x:real. x >= 0.0 -> sqrt_real(x*x) = x

parameter sqrt_real_ : 
	  x:real -> { x >= 0.0 } real { result = sqrt_real(x) }

logic pow_real : real,real -> real 
logic abs_real : real -> real

axiom abs_real_pos: forall x:real [abs_real(x)]. x >= 0.0 -> abs_real(x) = x
axiom abs_real_neg: forall x:real [abs_real(x)]. x <= 0.0 -> abs_real(x) = -x

(* exp and log *)

logic exp : real -> real
logic log : real -> real
logic log10 : real -> real

axiom log_exp: forall x:real. log(exp(x)) = x

axiom exp_log: forall x:real. x > 0.0 -> exp(log(x)) = x


(* trigonometric functions *)

logic cos : real -> real
logic sin : real -> real
logic tan : real -> real
logic cosh : real -> real
logic sinh : real -> real
logic tanh : real -> real
logic acos : real -> real
logic asin : real -> real
logic atan : real -> real
logic atan2 : real, real -> real
logic hypot : real, real -> real


parameter any_real : unit -> {} real { true }

(* helper axioms *)

axiom prod_pos: 
  forall x:real. forall y:real.
  (x > 0.0 and y > 0.0 -> x * y > 0.0) and (x < 0.0 and y < 0.0 -> x * y > 0.0)

axiom abs_minus: 
  forall x:real. abs_real(-x) = abs_real(x)
