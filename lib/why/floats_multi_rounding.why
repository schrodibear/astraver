

(************************************************************************)
(************************************************************************)
(****** Jessie prelude for floating-point arithmetic, multi-rounding mode *******) 

(************************************************************************)
(************************************************************************)


include "floats_common.why"


logic cond_sub_double: mode,double,double -> int

axiom cond_sub_double_axiom1: 
          forall m:mode. forall x:double.
	  forall y:double.
	  (abs_real(double_value(x) - double_value(y)) >= 0x1p-1022) -> cond_sub_double(m,x,y) = 1

axiom cond_sub_double_axiom2: 
          forall m:mode. forall x:double.
	  forall y:double.
	  (0x1p-1075 <=abs_real(double_value(x) - double_value(y)) <= 0x1p-1022
	  and
	  abs_real(double_value(x) - double_value(y)) <> 0x1p-1022
	  and
	  abs_real(double_value(x) - double_value(y)) <> 0x1p-1075) -> cond_sub_double(m,x,y) = 2

axiom cond_sub_double_axiom3: 
          forall m:mode. forall x:double.
	  forall y:double.
	  (0.0 <=abs_real(double_value(x) - double_value(y)) <= 0x1p-1075) -> cond_sub_double(m,x,y) = 3
      		       

logic post_cond_sub_double: mode,double,double,double -> int

axiom post_cond_sub_double_axiom1: 
          forall m:mode. forall x:double.
	  forall y:double. forall result:double.
	  post_cond_sub_double(m,x,y,result) = 1 -> (abs_real((double_value(result) -(double_value(x)-double_value(y)))/ (double_value(x)-double_value(y)))<=0x1p-53)    			    
axiom post_cond_sub_double_axiom2: 
          forall m:mode. forall x:double.
	  forall y:double. forall result:double.
	  post_cond_sub_double(m,x,y,result) = 2 -> (double_value(result) =(double_value(x)-double_value(y))) 

axiom post_cond_sub_double_axiom3: 
          forall m:mode. forall x:double.
	  forall y:double. forall result:double.
	  post_cond_sub_double(m,x,y,result) = 3 -> (double_value(result) = 0.0) 

(***************************************************)
(** specification of unary and binary operations ***)
(***************************************************)


predicate double_of_real_post(m:mode,x:real,res:double) =
    double_value(res) = round_double(m,x)
    and
    double_exact(res) = x
    and
    double_model(res) = x



parameter double_of_real : 
   m:mode -> x:real ->
  { no_overflow_double(m,x) }
  double
  { double_of_real_post(m,x,result) }



parameter double_of_real_safe : 
  m:mode -> x:real ->
  { }
  double
  { no_overflow_double(m,x) and
    double_of_real_post(m,x,result) }

(*
predicate add_gen_double_post(f:double_format,m:mode,
                             x:gen_double,y:gen_double,res:gen_double) =
    double_value(res) = round_double(m,double_value(x) + double_value(y))
    and 
    double_exact(res) = double_exact(x) + double_exact(y)
    and 
    double_model(res) = double_model(x) + double_model(y)

*)
(*********************************************************)

predicate add_double_post(m:mode,
	                  x:double,y:double,result:double) =

(*CASE 1:*)
(
    (abs_real(double_value(x)+double_value(y))>=0x1p-1022  ->

    (abs_real((double_value(result) -(double_value(x)+double_value(y)))/ (double_value(x)+double_value(y))) <= 0x1.004p-53  
     and 
     abs_real(double_value(result)) >= 0x1p-1022 
     and 
     abs_real(double_value(x)+double_value(y))>=0x1p-1022)) 

and

(*CASE 2: *)
     ((abs_real(double_value(x) + double_value(y)) <= 0x1p-1022) ->

     (abs_real(double_value(result)-(double_value(x) + double_value(y))) <=  0x1.002p-1075      
      and  
      abs_real(double_value(x) + double_value(y)) <= 0x1p-1022
      and
      abs_real(double_value(result)) <= 0x1p-1022 ))

and
    double_exact(result) = double_exact(x) + double_exact(y)
)

(*********************************************************)

parameter add_double : 
  m:mode -> x:double -> y:double -> 
  { no_overflow_double(m,double_value(x) + double_value(y)) }
  double
  { add_double_post(m,x,y,result) }



parameter add_double_safe : 
  m:mode -> x:double -> y:double -> 
  { }
  double
  { no_overflow_double(m,double_value(x) + double_value(y)) and
    add_double_post(m,x,y,result) }


(*
predicate sub_gen_double_post(f:double_format,m:mode,
	                     x:gen_double,y:gen_double,res:gen_double) =
    double_value(res) = round_double(m,double_value(x) - double_value(y))
    and 
    double_exact(res) = double_exact(x) - double_exact(y)
    and 
    double_model(res) = double_model(x) - double_model(y)
*)
(*********************************************************)

predicate sub_double_post(m:mode,
	                  x:double,y:double,result:double) =

(*CASE 1:*)
(
    (abs_real(double_value(x)-double_value(y))>=0x1p-1022  ->

    (abs_real((double_value(result) -(double_value(x)-double_value(y)))/ (double_value(x)-double_value(y))) <= 0x1.004p-53  
     and 
     abs_real(double_value(result)) >= 0x1p-1022 
     and 
     abs_real(double_value(x)-double_value(y))>=0x1p-1022))

and

(*CASE 2: *)
  ((0.0 <= abs_real(double_value(x) - double_value(y)) <= 0x1p-1022) ->

  (abs_real(double_value(result)-(double_value(x) - double_value(y))) <= 0x1.002p-1075 
   and  
   abs_real(double_value(x) - double_value(y)) <= 0x1p-1022
   and
   abs_real(double_value(result)) <= 0x1p-1022 ))
)
and
     double_exact(result) = double_exact(x) - double_exact(y)

(*********************************************************)
parameter sub_double : 
  m:mode -> x:double -> y:double -> 
  { no_overflow_double(m,double_value(x) - double_value(y)) }
  double
  {sub_double_post(m,x,y,result)}

parameter sub_double_safe : 
  m:mode -> x:double -> y:double -> 
  {}
  double
  { no_overflow_double(m,double_value(x) - double_value(y)) 
    and 
    sub_double_post(m,x,y,result)
  
  }

predicate neg_double_post(m:mode,
	                  x:double,result:double) =

(*CASE 1:*)
(
    (abs_real(-double_value(x))>=0x1p-1022  ->

    (abs_real((double_value(result) + double_value(x))/ double_value(x)) <= 0x1.004p-53  
     and 
     abs_real(double_value(result)) >= 0x1p-1022 
     and 
     abs_real(-double_value(x))>=0x1p-1022))

and

(*CASE 2: *)
  ((0.0 <= abs_real(-double_value(x)) <= 0x1p-1022) ->

  (abs_real(double_value(result)+double_value(x)) <= 0x1.002p-1075 
   and  
   abs_real(-double_value(x)) <= 0x1p-1022
   and
   abs_real(double_value(result)) <= 0x1p-1022 ))
)
and 
    double_exact(result) = -(double_exact(x))
and 
    double_model(result) = -(double_model(x))

parameter neg_double : 
  m:mode -> x:double -> 
  { no_overflow_double(m,-(double_value(x))) }
  double
  { neg_double_post(m,x,result) }



parameter neg_double_safe : 
  m:mode -> x:double -> 
  { }
  double
  { no_overflow_double(m,-(double_value(x))) and
    neg_double_post(m,x,result) }


(*
predicate mul_gen_double_post(m:mode,
                             x:double,y:double,res:double) =
    double_value(res) = round_double(m,double_value(x) * double_value(y))
    and 
    double_exact(res) = double_exact(x) * double_exact(y)
    and 
    double_model(res) = double_model(x) * double_model(y)
*)
(*********************************************************)

predicate mul_double_post(m:mode,
	                     x:double,y:double,result:double) =

(*CASE 1:*)

(   (abs_real(double_value(x)*double_value(y))>=0x1p-1022  ->

   (abs_real((double_value(result) -(double_value(x)*double_value(y)))/ (double_value(x)*double_value(y))) <= 0x1.004p-53 
     and 
     abs_real(double_value(result)) >= 0x1p-1022 
     and 
     abs_real(double_value(x)*double_value(y))>=0x1p-1022))

and

(*CASE 2: *)    

  ((abs_real(double_value(x) * double_value(y)) <= 0x1p-1022) ->

  (abs_real(double_value(result) -double_value(x)*double_value(y)) <= 0x1.002p-1075
    and
    abs_real(double_value(x) * double_value(y)) <= 0x1p-1022
    and
    abs_real(double_value(result)) <= 0x1p-1022 ))
)
and
   double_exact(result) = double_exact(x) * double_exact(y)
    and 
    double_model(result) = double_model(x) * double_model(y)

(*********************************************************)
parameter mul_double : 
  m:mode -> x:double -> y:double -> 
  { no_overflow_double(m,double_value(x)*double_value(y)) }
  double
 { mul_double_post(m,x,y,result)} 


parameter mul_double_safe : 
  m:mode -> x:double -> y:double -> 
  { }
  double
  { no_overflow_double(m,double_value(x)*double_value(y)) and
   mul_double_post(m,x,y,result)

}

(*
predicate div_double_post(m:mode,
                          x:double,y:double,res:double) =
    double_value(res) = round_double(m,double_value(x)/double_value(y))
    and 
    double_exact(res) = double_exact(x)/double_exact(y)
    and 
    double_model(res) = double_model(x)/double_model(y)
*)

predicate div_double_post(m:mode,
                          x:double,y:double,result:double) =

(*CASE 1: *)
(
    (abs_real(double_value(x)/double_value(y))>=0x1p-1022  -> 
 
    (abs_real((double_value(result) - double_value(x)/double_value(y))/ (double_value(x)/double_value(y))) <= 0x1.004p-53   
     and 
     abs_real(double_value(result)) >= 0x1p-1022 
     and 
     abs_real(double_value(x)/double_value(y))>=  0x1p-1022)) 

and

(*CASE 2: *)

     ((abs_real(double_value(x)/double_value(y)) <= 0x1p-1022) ->

     (abs_real(double_value(result)-(double_value(x)/double_value(y))) <= 0x1.002p-1075
      and  
      abs_real(double_value(x)/double_value(y)) <= 0x1p-1022
      and
      abs_real(double_value(result)) <= 0x1p-1022 ))
)
and

     double_exact(result) = double_exact(x) / double_exact(y)
and 
    double_model(result) = double_model(x)/double_model(y)

parameter div_double : 
  m:mode -> x:double -> y:double -> 
  { double_value(y) <> 0.0 
    and 
    no_overflow_double(m,double_value(x)/double_value(y)) }
  double
  { div_double_post(m,x,y,result) }



parameter div_double_safe : 
  m:mode -> x:double -> y:double -> 
  { }
  double
  { double_value(y) <> 0.0 
    and 
    no_overflow_double(m,double_value(x)/double_value(y))
    and div_double_post(m,x,y,result) }


predicate sqrt_double_post(m:mode,
                           x:double,result:double) =

(*CASE 1: *)

    (abs_real(sqrt_real(double_value(x)))>=0x1p-1022  -> 
 
    (abs_real(double_value(result) - sqrt_real(double_value(x))/ sqrt_real(double_value(x))) <= 0x1.004p-53    
     and 
     abs_real(double_value(result)) >= 0x1p-1022 
     and 
     abs_real(sqrt_real(double_value(x)))>=  0x1p-1022)) 

and

(*CASE 2: *)

     ((abs_real(sqrt_real(double_value(x))) <= 0x1p-1022) ->

     (abs_real(double_value(result)-sqrt_real(double_value(x))) <= 0x1.002p-1075
      and  
      abs_real(sqrt_real(double_value(x))) <= 0x1p-1022)
      and
      abs_real(double_value(result)) <= 0x1p-1022 ) 
and

     double_exact(result) = sqrt_real(double_exact(x))
and 
    double_model(result) = sqrt_real(double_model(x))	


parameter sqrt_double_requires : 
  m:mode -> x:double -> 
  { double_value(x) >= 0.0 
    and 
    no_overflow_double(m,sqrt_real(double_value(x))) }
  double
  { sqrt_double_post(m,x,result)
  }



parameter sqrt_double : 
  m:mode -> x:double -> 
   {  }
  double
  { 
    no_overflow_double(m,sqrt_real(double_value(x)))
    and
    sqrt_double_post(m,x,result)
   
  }


predicate abs_double_post(m:mode,
                             x:double,result:double) =

(*CASE 1: *)

    (abs_real(double_value(x))>=0x1p-1022  -> 
 
    (abs_real(double_value(result) - abs_real(double_value(x))/ abs_real(double_value(x))) <= 0x1.004p-53    
     and 
     abs_real(double_value(result)) >= 0x1p-1022 
     and 
     abs_real(abs_real(double_value(x)))>=  0x1p-1022)) 

and

(*CASE 2: *)

     ((abs_real(double_value(x)) <= 0x1p-1022) ->

     (abs_real(double_value(result)-abs_real(double_value(x))) <= 0x1.002p-1075
      and  
      abs_real(double_value(x)) <= 0x1p-1022)
      and
      abs_real(double_value(result)) <= 0x1p-1022 ) 
and
     double_exact(result) = abs_real(double_exact(x))
and
     double_model(result) = abs_real(double_model(x))

parameter abs_double_requires : 
  m:mode -> x:double -> 
  { no_overflow_double(m,abs_real(double_value(x))) }
  double
  { abs_double_post(m,x,result)
  }


parameter abs_double : 
  m:mode -> x:double -> 
  {  }
  double
  { 
    no_overflow_double(m,abs_real(double_value(x)))
    and
    abs_double_post(m,x,result)

  }


(***************************************************)
(******** comparisons of doubles in the code ********)
(***************************************************)

parameter lt_double :
  x:double -> y:double -> 
  {} bool { if result then double_value(x) < double_value(y) 
            else double_value(x) >= double_value(y) }

parameter le_double :
  x:double -> y:double -> 
  {} bool { if result then double_value(x) <= double_value(y) 
            else double_value(x) > double_value(y) }

parameter gt_double :
  x:double -> y:double -> 
  {} bool { if result then double_value(x) > double_value(y) 
            else double_value(x) <= double_value(y) }

parameter ge_double :
  x:double -> y:double -> 
  {} bool { if result then double_value(x) >= double_value(y) 
            else double_value(x) < double_value(y) }

parameter eq_double :
  x:double -> y:double -> 
  {} bool { if result then double_value(x) = double_value(y) 
            else double_value(x) <> double_value(y) }

parameter neq_double :
  x:double -> y:double -> 
  {} bool { if result then double_value(x) <> double_value(y) 
            else double_value(x) = double_value(y) }



(***************************************************)
(*********** conversions between formats ***********)
(***************************************************)
(* ??
predicate cast_double_post(f:double_format,m:mode,x:gen_double,res:gen_double) =
    double_value(res) = round_double(m,double_value(x))
    and
    double_exact(res) = double_exact(x)
    and
    double_model(res) = double_model(x)

parameter cast_double : f:double_format -> m:mode -> x:gen_double ->
  { no_overflow_double(m,double_value(x)) }
  gen_double
  { cast_double_post(m,x,result) }

parameter cast_double_safe : f:double_format -> m:mode -> x:gen_double ->
  { }
  gen_double
  { no_overflow_double(m,double_value(x)) and
    cast_double_post(m,x,result) }
*)


