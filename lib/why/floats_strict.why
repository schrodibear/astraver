(***************************************************************************)
(***************************************************************************)
(*** Jessie prelude for floating-point arithmetic: Strict mode *************)
(***************************************************************************)
(***************************************************************************)

include "floats_common.why"




(* Specification of operations in single precision *)
predicate single_of_real_post(m:mode,x:real,res:single) =
    single_value(res) = round_single(m,x)
    and
    single_exact(res) = x
    and
    single_model(res) = x

predicate add_single_post(m:mode,x:single,y:single,res:single) =
    single_value(res) = round_single(m,single_value(x) + single_value(y))
    and 
    single_exact(res) = single_exact(x) + single_exact(y)
    and 
    single_model(res) = single_model(x) + single_model(y)

predicate sub_single_post(m:mode,x:single,y:single,res:single) =
    single_value(res) = round_single(m,single_value(x) - single_value(y))
    and 
    single_exact(res) = single_exact(x) - single_exact(y)
    and 
    single_model(res) = single_model(x) - single_model(y)

predicate mul_single_post(m:mode,x:single,y:single,res:single) =
    single_value(res) = round_single(m,single_value(x) * single_value(y))
    and 
    single_exact(res) = single_exact(x) * single_exact(y)
    and 
    single_model(res) = single_model(x) * single_model(y)

predicate div_single_post(m:mode,x:single,y:single,res:single) =
    single_value(res) = round_single(m,single_value(x) / single_value(y))
    and 
    single_exact(res) = single_exact(x) / single_exact(y)
    and 
    single_model(res) = single_model(x) / single_model(y)

predicate sqrt_single_post(m:mode,x:single,res:single) =
    single_value(res) = round_single(m,sqrt_real(single_value(x)))
    and 
    single_exact(res) = sqrt_real(single_exact(x))
    and 
    single_model(res) = sqrt_real(single_model(x))

predicate neg_single_post(x:single,res:single) =
    single_value(res) = -single_value(x)
    and 
    single_exact(res) = -single_exact(x)
    and 
    single_model(res) = -single_model(x)

predicate abs_single_post(x:single,res:single) =
    single_value(res) = abs_real(single_value(x))
    and 
    single_exact(res) = abs_real(single_exact(x))
    and 
    single_model(res) = abs_real(single_model(x))


(* Specification of operations in double precision *)
predicate double_of_real_post(m:mode,x:real,res:double) =
    double_value(res) = round_double(m,x)
    and
    double_exact(res) = x
    and
    double_model(res) = x

predicate add_double_post(m:mode,x:double,y:double,res:double) =
    double_value(res) = round_double(m,double_value(x) + double_value(y))
    and 
    double_exact(res) = double_exact(x) + double_exact(y)
    and 
    double_model(res) = double_model(x) + double_model(y)

predicate sub_double_post(m:mode,x:double,y:double,res:double) =
    double_value(res) = round_double(m,double_value(x) - double_value(y))
    and 
    double_exact(res) = double_exact(x) - double_exact(y)
    and 
    double_model(res) = double_model(x) - double_model(y)

predicate mul_double_post(m:mode,x:double,y:double,res:double) =
    double_value(res) = round_double(m,double_value(x) * double_value(y))
    and 
    double_exact(res) = double_exact(x) * double_exact(y)
    and 
    double_model(res) = double_model(x) * double_model(y)

predicate div_double_post(m:mode,x:double,y:double,res:double) =
    double_value(res) = round_double(m,double_value(x) / double_value(y))
    and 
    double_exact(res) = double_exact(x) / double_exact(y)
    and 
    double_model(res) = double_model(x) / double_model(y)

predicate sqrt_double_post(m:mode,x:double,res:double) =
    double_value(res) = round_double(m,sqrt_real(double_value(x)))
    and 
    double_exact(res) = sqrt_real(double_exact(x))
    and 
    double_model(res) = sqrt_real(double_model(x))

predicate neg_double_post(x:double,res:double) =
    double_value(res) = -double_value(x)
    and 
    double_exact(res) = -double_exact(x)
    and 
    double_model(res) = -double_model(x)

predicate abs_double_post(x:double,res:double) =
    double_value(res) = abs_real(double_value(x))
    and 
    double_exact(res) = abs_real(double_exact(x))
    and 
    double_model(res) = abs_real(double_model(x))



(* Parameters in single precision *)
parameter single_of_real : m:mode -> x:real ->
  { no_overflow_single(m,x) }
  single
  { single_of_real_post(m,x,result) }
parameter single_of_real_safe : m:mode -> x:real ->
  { }
  single
  { no_overflow_single(m,x) and
    single_of_real_post(m,x,result) }
parameter single_of_real_exact : x:real ->
  { }
  single
  { single_value(result) = x and
    single_exact(result) = x and
    single_model(result) = x }

parameter add_single : m:mode -> x:single -> y:single -> 
  { no_overflow_single(m,single_value(x) + single_value(y)) }
  single
  { add_single_post(m,x,y,result) }
parameter add_single_safe : m:mode -> x:single -> y:single -> 
  { }
  single
  { no_overflow_single(m,single_value(x) + single_value(y)) and
    add_single_post(m,x,y,result) }

parameter sub_single : m:mode -> x:single -> y:single -> 
  { no_overflow_single(m,single_value(x) - single_value(y)) }
  single
  { sub_single_post(m,x,y,result) }
parameter sub_single_safe : m:mode -> x:single -> y:single -> 
  { }
  single
  { no_overflow_single(m,single_value(x) - single_value(y)) and
    sub_single_post(m,x,y,result) }

parameter mul_single : m:mode -> x:single -> y:single -> 
  { no_overflow_single(m,single_value(x) * single_value(y)) }
  single
  { mul_single_post(m,x,y,result) }
parameter mul_single_safe : m:mode -> x:single -> y:single -> 
  { }
  single
  { no_overflow_single(m,single_value(x) * single_value(y)) and
    mul_single_post(m,x,y,result) }

parameter div_single : m:mode -> x:single -> y:single -> 
  { single_value(y) <> 0.0 
    and
    no_overflow_single(m,single_value(x) / single_value(y)) }
  single
  { div_single_post(m,x,y,result) }
parameter div_single_safe : m:mode -> x:single -> y:single -> 
  { }
  single
  { single_value(y) <> 0.0  and
    no_overflow_single(m,single_value(x) / single_value(y)) and
    div_single_post(m,x,y,result) }

parameter sqrt_single : m:mode -> x:single -> 
  { single_value(x) >= 0.0 }
  single
  { sqrt_single_post(m,x,result) }
parameter sqrt_single_safe : m:mode -> x:single ->
  { }
  single
  { single_value(x) >= 0.0  and
    sqrt_single_post(m,x,result) }

parameter neg_single : x:single -> 
  { }
  single
  { neg_single_post(x,result) }
parameter abs_single : x:single -> 
  { }
  single
  { abs_single_post(x,result) }

(* Parameters in double precision *)
parameter double_of_real : m:mode -> x:real ->
  { no_overflow_double(m,x) }
  double
  { double_of_real_post(m,x,result) }
parameter double_of_real_safe : m:mode -> x:real ->
  { }
  double
  { no_overflow_double(m,x) and
    double_of_real_post(m,x,result) }
parameter double_of_real_exact : x:real ->
  { }
  double
  { double_value(result) = x and
    double_exact(result) = x and
    double_model(result) = x }

parameter add_double : m:mode -> x:double -> y:double -> 
  { no_overflow_double(m,double_value(x) + double_value(y)) }
  double
  { add_double_post(m,x,y,result) }
parameter add_double_safe : m:mode -> x:double -> y:double -> 
  { }
  double
  { no_overflow_double(m,double_value(x) + double_value(y)) and
    add_double_post(m,x,y,result) }

parameter sub_double : m:mode -> x:double -> y:double -> 
  { no_overflow_double(m,double_value(x) - double_value(y)) }
  double
  { sub_double_post(m,x,y,result) }
parameter sub_double_safe : m:mode -> x:double -> y:double -> 
  { }
  double
  { no_overflow_double(m,double_value(x) - double_value(y)) and
    sub_double_post(m,x,y,result) }

parameter mul_double : m:mode -> x:double -> y:double -> 
  { no_overflow_double(m,double_value(x) * double_value(y)) }
  double
  { mul_double_post(m,x,y,result) }
parameter mul_double_safe : m:mode -> x:double -> y:double -> 
  { }
  double
  { no_overflow_double(m,double_value(x) * double_value(y)) and
    mul_double_post(m,x,y,result) }

parameter div_double : m:mode -> x:double -> y:double -> 
  { double_value(y) <> 0.0 
    and
    no_overflow_double(m,double_value(x) / double_value(y)) }
  double
  { div_double_post(m,x,y,result) }
parameter div_double_safe : m:mode -> x:double -> y:double -> 
  { }
  double
  { double_value(y) <> 0.0  and
    no_overflow_double(m,double_value(x) / double_value(y)) and
    div_double_post(m,x,y,result) }

parameter sqrt_double : m:mode -> x:double -> 
  { double_value(x) >= 0.0 }
  double
  { sqrt_double_post(m,x,result) }
parameter sqrt_double_safe : m:mode -> x:double ->
  { }
  double
  { double_value(x) >= 0.0  and
    sqrt_double_post(m,x,result) }

parameter neg_double : x:double -> 
  { }
  double
  { neg_double_post(x,result) }
parameter abs_double : x:double -> 
  { }
  double
  { abs_double_post(x,result) }


(* Comparisons in single precision *)
parameter lt_single : x:single -> y:single -> 
  {} bool { if result then single_value(x) < single_value(y) 
            else single_value(x) >= single_value(y) }
parameter le_single : x:single -> y:single -> 
  {} bool { if result then single_value(x) <= single_value(y) 
            else single_value(x) > single_value(y) }
parameter gt_single : x:single -> y:single -> 
  {} bool { if result then single_value(x) > single_value(y) 
            else single_value(x) <= single_value(y) }
parameter ge_single : x:single -> y:single -> 
  {} bool { if result then single_value(x) >= single_value(y) 
            else single_value(x) < single_value(y) }
parameter eq_single : x:single -> y:single -> 
  {} bool { if result then single_value(x) = single_value(y) 
            else single_value(x) <> single_value(y) }
parameter ne_single : x:single -> y:single -> 
  {} bool { if result then single_value(x) <> single_value(y) 
            else single_value(x) = single_value(y) }


(* Comparisons in double precision *)
parameter lt_double : x:double -> y:double -> 
  {} bool { if result then double_value(x) < double_value(y) 
            else double_value(x) >= double_value(y) }
parameter le_double : x:double -> y:double -> 
  {} bool { if result then double_value(x) <= double_value(y) 
            else double_value(x) > double_value(y) }
parameter gt_double : x:double -> y:double -> 
  {} bool { if result then double_value(x) > double_value(y) 
            else double_value(x) <= double_value(y) }
parameter ge_double : x:double -> y:double -> 
  {} bool { if result then double_value(x) >= double_value(y) 
            else double_value(x) < double_value(y) }
parameter eq_double : x:double -> y:double -> 
  {} bool { if result then double_value(x) = double_value(y) 
            else double_value(x) <> double_value(y) }
parameter ne_double : x:double -> y:double -> 
  {} bool { if result then double_value(x) <> double_value(y) 
            else double_value(x) = double_value(y) }

