========== file tests/java/Sort.java ==========

//@+ CheckArithOverflow = no

/*@ predicate Sorted{L}(int a[], integer l, integer h) =
  @   \forall integer i; l <= i < h ==> a[i] <= a[i+1] ;
  @*/

/*@ predicate Swap{L1,L2}(int a[], integer i, integer j) =
  @   \at(a[i],L1) == \at(a[j],L2) &&
  @   \at(a[j],L1) == \at(a[i],L2) &&
  @   \forall integer k; k != i && k != j ==> \at(a[k],L1) == \at(a[k],L2);
  @*/

/*@ axiomatic Permut {
  @  predicate Permut{L1,L2}(int a[], integer l, integer h);
  @  axiom Permut_refl{L}: 
  @   \forall int a[], integer l h; Permut{L,L}(a, l, h) ;
  @  axiom Permut_sym{L1,L2}: 
  @    \forall int a[], integer l h; 
  @      Permut{L1,L2}(a, l, h) ==> Permut{L2,L1}(a, l, h) ;
  @  axiom Permut_trans{L1,L2,L3}: 
  @    \forall int a[], integer l h; 
  @      Permut{L1,L2}(a, l, h) && Permut{L2,L3}(a, l, h) ==> 
  @        Permut{L1,L3}(a, l, h) ;
  @  axiom Permut_swap{L1,L2}: 
  @    \forall int a[], integer l h i j; 
  @       l <= i <= h && l <= j <= h && Swap{L1,L2}(a, i, j) ==> 
  @     Permut{L1,L2}(a, l, h) ;
  @ }
  @*/

class Sort {

    /*@ requires t != null && 
      @    0 <= i < t.length && 0 <= j < t.length;
      @ assigns t[i],t[j];
      @ ensures Swap{Old,Here}(t,i,j);
      @*/
    void swap(int t[], int i, int j) {
	int tmp = t[i];
	t[i] = t[j];
	t[j] = tmp;
    }
    
    /*@ requires t != null;
      @ behavior sorted:
      @   ensures Sorted(t,0,t.length-1);
      @ behavior permutation:
      @   ensures Permut{Old,Here}(t,0,t.length-1);
      @*/
    void min_sort(int t[]) {
	int i,j;
	int mi,mv;
	/*@ loop_invariant 0 <= i;
	  @ for sorted: 
	  @  loop_invariant Sorted(t,0,i) && 
	  @   (\forall integer k1 k2 ; 
	  @      0 <= k1 < i <= k2 < t.length ==> t[k1] <= t[k2]) ;
	  @ for permutation:
	  @   loop_invariant Permut{Pre,Here}(t,0,t.length-1);
	  @*/
	for (i=0; i<t.length-1; i++) {
	    // look for minimum value among t[i..n-1]
	    mv = t[i]; mi = i;
	    /*@ loop_invariant i < j && i <= mi < t.length;
	      @ for sorted:
	      @  loop_invariant mv == t[mi] &&
	      @   (\forall integer k; i <= k < j ==> t[k] >= mv);
	      @ for permutation:
	      @  loop_invariant Permut{Pre,Here}(t,0,t.length-1);
	      @*/
	    for (j=i+1; j < t.length; j++) {
		if (t[j] < mv) { 
		    mi = j ; mv = t[j]; 
		}
	    }
	    swap(t,i,mi);
	}
    }

    
}
========== krakatoa execution ==========
Parsing OK.
Typing OK.
Generating JC function Sort_swap for method Sort.swap
Generating JC function Sort_min_sort for method Sort.min_sort
Generating JC function cons_Sort for constructor Sort
Generating JC function Object_registerNatives for method Object.registerNatives
Generating JC function Object_hashCode for method Object.hashCode
Generating JC function Object_equals for method Object.equals
Generating JC function Object_clone for method Object.clone
Generating JC function Object_toString for method Object.toString
Generating JC function Object_notify for method Object.notify
Generating JC function Object_notifyAll for method Object.notifyAll
Generating JC function Object_wait_long for method Object.wait
Generating JC function Object_wait_long_int for method Object.wait
Generating JC function Object_wait for method Object.wait
Generating JC function Object_finalize for method Object.finalize
Generating JC function cons_Object for constructor Object
Done.
========== file tests/java/Sort.jc ==========
# InvariantPolicy = Arguments
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = None

logic Sorted{L}(intM[0..] a, integer l, integer h) =
(\forall integer i;
  (((l <= i) && (i < h)) ==> ((a + i).intP <= (a + (i + 1)).intP)))

logic Swap{L1, L2}(intM[0..] a_0, integer i_0, integer j) =
(((\at((a_0 + i_0).intP,L1) == \at((a_0 + j).intP,L2)) &&
   (\at((a_0 + j).intP,L1) == \at((a_0 + i_0).intP,L2))) &&
  (\forall integer k;
    (((k != i_0) && (k != j)) ==>
      (\at((a_0 + k).intP,L1) == \at((a_0 + k).intP,L2)))))

axiomatic Permut {

  logic Permut{L1, L2}(intM[0..] a_1, integer l_0, integer h_0)
   
  axiom Permut_swap{L1, L2} :
  (\forall intM[0..] a_5;
    (\forall integer l_4;
      (\forall integer h_4;
        (\forall integer i_1;
          (\forall integer j_0;
            (((((l_4 <= i_1) && (i_1 <= h_4)) &&
                ((l_4 <= j_0) && (j_0 <= h_4))) &&
               Swap{L1,
               L2}(a_5, i_1, j_0)) ==>
              Permut{L1,
              L2}(a_5, l_4, h_4)))))))
   
  axiom Permut_trans{L1, L2, L3} :
  (\forall intM[0..] a_4;
    (\forall integer l_3;
      (\forall integer h_3;
        ((Permut{L1, L2}(a_4, l_3, h_3) && Permut{L2, L3}(a_4, l_3, h_3)) ==>
          Permut{L1,
          L3}(a_4, l_3, h_3)))))
   
  axiom Permut_sym{L1, L2} :
  (\forall intM[0..] a_3;
    (\forall integer l_2;
      (\forall integer h_2;
        (Permut{L1, L2}(a_3, l_2, h_2) ==> Permut{L2, L1}(a_3, l_2, h_2)))))
   
  axiom Permut_refl{L} :
  (\forall intM[0..] a_2;
    (\forall integer l_1;
      (\forall integer h_1;
        Permut{L, L}(a_2, l_1, h_1))))
  
}

logic Non_null_intM{Here}(intM[0..] x) =
(\offset_max(x) >= -1)

logic Non_null_Object{Here}(Object[0..] x) =
(\offset_max(x) == 0)

tag Object = {
}

tag String = Object with {
}

tag Throwable = Object with {
}

tag Sort = Object with {
}

type Object = [Object]

type interface = [interface]

tag interface = {
}

tag intM = Object with {
  integer intP;
}

boolean non_null_intM(intM[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) >= -1) else (x == null));
;

integer java_array_length_intM(intM[0..] x)
behavior non_null:
  assigns \nothing;
  ensures ((\result <= 2147483647) &&
            ((\result >= 0) && ((\result == (\offset_max(x) + 1)) && true)));
;

boolean non_null_Object(Object[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) == 0) else (x == null));
;

exception Throwable of Throwable[0..]

unit Sort_swap(Sort[0] this_2, intM[0..] t, integer i_2, integer j_1)
  requires (K_6 : ((Non_null_intM(t) &&
                     ((0 <= i_2) && (i_2 < (\offset_max(t) + 1)))) &&
                    ((0 <= j_1) && (j_1 < (\offset_max(t) + 1)))));
behavior default:
  assigns (t + [i_2..i_2]).intP,
  (t + [j_1..j_1]).intP;
  ensures (K_1 : Swap{Old, Here}(t, i_2, j_1));
{  
   {  
      (var integer tmp = (K_5 : (t + i_2).intP));
      
      {  (K_3 : ((t + i_2).intP = (K_2 : (t + j_1).intP)));
         (K_4 : ((t + j_1).intP = tmp))
      }
   }
}

unit Sort_min_sort(Sort[0] this_0, intM[0..] t_0)
  requires (K_28 : Non_null_intM(t_0));
behavior sorted:
  ensures (K_7 : Sorted{Here}(t_0, 0, ((\offset_max(t_0) + 1) - 1)));
behavior permutation:
  ensures (K_8 : Permut{Old, Here}(t_0, 0, ((\offset_max(t_0) + 1) - 1)));
{  
   {  
      (var integer i_3);
      
      {  
         (var integer j_2);
         
         {  
            (var integer mi);
            
            {  
               (var integer mv);
               
               invariant (K_9 : (0 <= i_3));
               invariant for sorted: (K_10 : (Sorted{Here}(t_0, 0, i_3) &&
                                               (\forall integer k1;
                                                 (\forall integer k2;
                                                   (((((0 <= k1) &&
                                                        (k1 < i_3)) &&
                                                       (i_3 <= k2)) &&
                                                      (k2 <
                                                        (\offset_max(t_0) +
                                                          1))) ==>
                                                     ((t_0 + k1).intP <=
                                                       (t_0 + k2).intP))))));
               invariant for permutation: (K_11 : Permut{Pre,
                                          Here}(t_0, 0,
                                                ((\offset_max(t_0) + 1) - 1)));
               for ((i_3 = 0) ; (K_27 : (i_3 <
                                          (K_26 : ((K_25 : java_array_length_intM(
                                                   t_0)) -
                                                    1)))) ; (K_24 : (i_3 ++)))
               {  
                  {  (mv = (K_12 : (t_0 + i_3).intP));
                     (mi = i_3);
                     
                     invariant (K_13 : ((i_3 < j_2) &&
                                         ((i_3 <= mi) &&
                                           (mi < (\offset_max(t_0) + 1)))));
                     invariant for sorted: (K_14 : ((mv == (t_0 + mi).intP) &&
                                                     (\forall integer k_0;
                                                       (((i_3 <= k_0) &&
                                                          (k_0 < j_2)) ==>
                                                         ((t_0 + k_0).intP >=
                                                           mv)))));
                     invariant for permutation: (K_15 : Permut{Pre,
                                                Here}(t_0, 0,
                                                      ((\offset_max(t_0) + 1) -
                                                        1)));
                     for ((j_2 = (K_22 : (i_3 + 1))) ; (K_21 : (j_2 <
                                                                 (K_20 : java_array_length_intM(
                                                                 t_0)))) ; 
                     (K_19 : (j_2 ++)))
                     {  (if (K_18 : ((K_17 : (t_0 + j_2).intP) < mv)) then 
                        {  (mi = j_2);
                           (mv = (K_16 : (t_0 + j_2).intP))
                        } else ())
                     };
                     (K_23 : Sort_swap(this_0, t_0, i_3, mi))
                  }
               }
            }
         }
      }
   }
}

unit cons_Sort(Sort[0] this_3)
;

unit Object_registerNatives()
;

integer Object_hashCode(Object[0] this_4)
;

boolean Object_equals(Object[0] this_5, Object[0..] obj)
;

Object[0..] Object_clone(Object[0] this_6)
;

String[0..] Object_toString(Object[0] this_7)
;

unit Object_notify(Object[0] this_8)
;

unit Object_notifyAll(Object[0] this_9)
;

unit Object_wait_long(Object[0] this_10, integer timeout)
;

unit Object_wait_long_int(Object[0] this_11, integer timeout_0, integer nanos)
;

unit Object_wait(Object[0] this_12)
;

unit Object_finalize(Object[0] this_13)
;

unit cons_Object(Object[0] this_14)
;

/*
Local Variables:
mode: java
compile-command: "jessie -why-opt -split-user-conj -locs tests/java/Sort.jloc tests/java/Sort.jc && make -f tests/java/Sort.makefile gui"
End:
*/
========== file tests/java/Sort.jloc ==========
[K_10]
file = "HOME/tests/java/Sort.java"
line = 56
begin = 21
end = 130

[K_11]
file = "HOME/tests/java/Sort.java"
line = 60
begin = 22
end = 54

[K_12]
file = "HOME/tests/java/Sort.java"
line = 64
begin = 10
end = 14

[K_13]
file = "HOME/tests/java/Sort.java"
line = 65
begin = 24
end = 51

[K_14]
file = "HOME/tests/java/Sort.java"
line = 67
begin = 25
end = 97

[K_15]
file = "HOME/tests/java/Sort.java"
line = 70
begin = 25
end = 57

[K_16]
file = "HOME/tests/java/Sort.java"
line = 74
begin = 20
end = 24

[K_17]
file = "HOME/tests/java/Sort.java"
line = 73
begin = 6
end = 10

[K_18]
file = "HOME/tests/java/Sort.java"
line = 73
begin = 6
end = 15

[K_19]
file = "HOME/tests/java/Sort.java"
line = 72
begin = 31
end = 34

[K_20]
file = "HOME/tests/java/Sort.java"
line = 72
begin = 21
end = 29

[K_21]
file = "HOME/tests/java/Sort.java"
line = 72
begin = 17
end = 29

[K_22]
file = "HOME/tests/java/Sort.java"
line = 72
begin = 12
end = 15

[K_23]
file = "HOME/tests/java/Sort.java"
line = 77
begin = 5
end = 17

[K_24]
file = "HOME/tests/java/Sort.java"
line = 62
begin = 25
end = 28

[K_1]
file = "HOME/tests/java/Sort.java"
line = 37
begin = 16
end = 37

[K_25]
file = "HOME/tests/java/Sort.java"
line = 62
begin = 13
end = 21

[K_2]
file = "HOME/tests/java/Sort.java"
line = 41
begin = 8
end = 12

[K_26]
file = "HOME/tests/java/Sort.java"
line = 62
begin = 13
end = 23

[K_3]
file = "HOME/tests/java/Sort.java"
line = 41
begin = 1
end = 12

[Object_equals]
name = "Method equals"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 122
begin = 19
end = 25

[K_27]
file = "HOME/tests/java/Sort.java"
line = 62
begin = 11
end = 23

[K_4]
file = "HOME/tests/java/Sort.java"
line = 42
begin = 1
end = 11

[K_28]
file = "HOME/tests/java/Sort.java"
line = 45
begin = 17
end = 26

[K_5]
file = "HOME/tests/java/Sort.java"
line = 40
begin = 11
end = 15

[K_6]
file = "HOME/tests/java/Sort.java"
line = 34
begin = 17
end = 80

[K_7]
file = "HOME/tests/java/Sort.java"
line = 47
begin = 18
end = 40

[K_8]
file = "HOME/tests/java/Sort.java"
line = 49
begin = 18
end = 50

[K_9]
file = "HOME/tests/java/Sort.java"
line = 54
begin = 20
end = 26

[Object_notify]
name = "Method notify"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 243
begin = 29
end = 35

[cons_Object]
name = "Constructor of class Object"
file = "HOME/"
line = 0
begin = -1
end = -1

[Object_wait_long_int]
name = "Method wait"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 386
begin = 22
end = 26

[Object_wait_long]
name = "Method wait"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 333
begin = 29
end = 33

[Object_hashCode]
name = "Method hashCode"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 74
begin = 22
end = 30

[Object_notifyAll]
name = "Method notifyAll"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 267
begin = 29
end = 38

[Object_toString]
name = "Method toString"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 207
begin = 18
end = 26

[Sort_swap]
name = "Method swap"
file = "HOME/tests/java/Sort.java"
line = 39
begin = 9
end = 13

[cons_Sort]
name = "Constructor of class Sort"
file = "HOME/"
line = 0
begin = -1
end = -1

[Object_registerNatives]
name = "Method registerNatives"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 22
begin = 31
end = 46

[Object_clone]
name = "Method clone"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 184
begin = 28
end = 33

[Object_wait]
name = "Method wait"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 430
begin = 22
end = 26

[Sort_min_sort]
name = "Method min_sort"
file = "HOME/tests/java/Sort.java"
line = 51
begin = 9
end = 17

[Object_finalize]
name = "Method finalize"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 481
begin = 19
end = 27

========== jessie execution ==========
Generating Why function Sort_swap
Generating Why function Sort_min_sort
========== file tests/java/Sort.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) --no-arrays  -split-user-conj -explain -locs Sort.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) --no-arrays  -split-user-conj -explain -locs Sort.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why

COQDEP = coqdep

.PHONY: all coq pvs simplify cvcl harvey smtlib zenon

all: simplify/Sort_why.sx

project: why/Sort.wpr

why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) --project -dir why $(JESSIELIBFILES) why/$*.why

goals: why/Sort_ctx.why

why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) --multi-why -dir why $(JESSIELIBFILES) why/$*.why

coq: coq/Sort_why.vo

coq/Sort_why.v: why/Sort.why
	@echo 'why -coq-v8 [...] why/Sort.why' &&$(WHY) -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" $(JESSIELIBFILES) why/Sort.why

coq-goals: goals coq/Sort_ctx_why.vo
	for f in why/Sort_po*.why; do make -f Sort.makefile coq/`basename $$f .why`_why.v ; done

coq/Sort_ctx_why.v: why/Sort_ctx.why
	@echo 'why -coq-v8 [...] why/Sort_ctx.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" why/Sort_ctx.why

coq/%_why.v: why/%.why
	@echo 'why -coq-v8 [...] why/$*.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export Sort_ctx_why." -coq-tactic "intuition" why/Sort_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<

pvs: pvs/Sort_why.pvs

pvs/%_why.pvs: why/%.why
	$(WHY) -pvs -dir pvs -pvs-preamble "IMPORTING why@jessie" $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:
	$(WHY) -pvs -dir pvs -pvs-preamble "IMPORTING why@why" $(JESSIELIBFILES)

isabelle: isabelle/Sort_why.thy

isabelle/%_why.thy: why/%.why
	$(WHY) -isabelle -dir isabelle -isabelle-base-theory jessie_why $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/Sort_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) -simplify -dir simplify $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/Sort_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) -alt-ergo -dir why $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/Sort_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) -cvcl -dir cvcl $(JESSIELIBFILES) why/$*.why

harvey: harvey/Sort_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) -harvey -dir harvey $(JESSIELIBFILES) why/$*.why

zenon: zenon/Sort_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) -zenon -dir zenon $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/Sort_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) -smtlib --encoding sstrat --exp goal -dir smtlib $(JESSIELIBFILES) why/$*.why

z3: smtlib/Sort_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/Sort_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/Sort_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

gui stat: Sort.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

-include Sort.depend

depend: coq/Sort_why.v
	-$(COQDEP) -I coq coq/Sort*_why.v > Sort.depend

clean:
	rm -f coq/*.vo

========== file tests/java/Sort.loc ==========
[JC_103]
kind = UserCall
file = "HOME/tests/java/Sort.java"
line = 77
begin = 5
end = 17

[JC_104]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_105]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_106]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_40]
file = "HOME/tests/java/Sort.java"
line = 37
begin = 16
end = 37

[JC_107]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_41]
file = "HOME/tests/java/Sort.java"
line = 39
begin = 9
end = 13

[JC_108]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_42]
file = "HOME/tests/java/Sort.jc"
line = 108
begin = 9
end = 16

[JC_109]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_43]
file = "HOME/"
line = 0
begin = -1
end = -1

[Sort_swap_safety]
name = "Method swap"
behavior = "Safety"
file = "HOME/tests/java/Sort.java"
line = 39
begin = 9
end = 13

[JC_44]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_45]
kind = PointerDeref
file = "HOME/tests/java/Sort.java"
line = 40
begin = 11
end = 15

[JC_46]
kind = PointerDeref
file = "HOME/tests/java/Sort.java"
line = 40
begin = 11
end = 15

[JC_47]
kind = PointerDeref
file = "HOME/tests/java/Sort.java"
line = 41
begin = 8
end = 12

[JC_48]
kind = PointerDeref
file = "HOME/tests/java/Sort.java"
line = 41
begin = 8
end = 12

[JC_49]
kind = PointerDeref
file = "HOME/tests/java/Sort.java"
line = 41
begin = 1
end = 12

[JC_110]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_111]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_112]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 22
begin = 31
end = 46

[JC_113]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_114]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 22
begin = 31
end = 46

[JC_115]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_116]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_50]
kind = PointerDeref
file = "HOME/tests/java/Sort.java"
line = 42
begin = 1
end = 11

[JC_117]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_51]
file = "HOME/tests/java/Sort.java"
line = 45
begin = 17
end = 26

[JC_118]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_52]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_119]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_53]
file = "HOME/tests/java/Sort.java"
line = 45
begin = 17
end = 26

[JC_54]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_55]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_56]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_57]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_58]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_59]
file = "HOME/tests/java/Sort.java"
line = 47
begin = 18
end = 40

[JC_120]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 74
begin = 22
end = 30

[JC_121]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_122]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 74
begin = 22
end = 30

[JC_123]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_124]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_125]
file = "HOME/"
line = 0
begin = -1
end = -1

[Permut_trans]
name = "Permut_trans"
behavior = "axiom"
file = "HOME/tests/java/Sort.jc"
line = 34
begin = 2
end = 246

[JC_126]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_60]
file = "HOME/tests/java/Sort.java"
line = 47
begin = 18
end = 40

[JC_127]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_61]
file = "HOME/tests/java/Sort.java"
line = 49
begin = 18
end = 50

[JC_128]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 122
begin = 19
end = 25

[JC_62]
file = "HOME/tests/java/Sort.java"
line = 49
begin = 18
end = 50

[JC_129]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_63]
file = "HOME/tests/java/Sort.java"
line = 54
begin = 20
end = 26

[JC_64]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_65]
kind = UserCall
file = "HOME/tests/java/Sort.java"
line = 62
begin = 13
end = 21

[JC_66]
kind = PointerDeref
file = "HOME/tests/java/Sort.java"
line = 64
begin = 10
end = 14

[JC_67]
kind = PointerDeref
file = "HOME/tests/java/Sort.java"
line = 64
begin = 10
end = 14

[JC_68]
file = "HOME/tests/java/Sort.java"
line = 65
begin = 24
end = 51

[JC_69]
file = "HOME/"
line = 0
begin = -1
end = -1

[Sort_min_sort_ensures_permutation]
name = "Method min_sort"
behavior = "Normal behavior `permutation'"
file = "HOME/tests/java/Sort.java"
line = 51
begin = 9
end = 17

[JC_130]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 122
begin = 19
end = 25

[JC_131]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_132]
file = "HOME/"
line = 0
begin = -1
end = -1

[Sort_min_sort_safety]
name = "Method min_sort"
behavior = "Safety"
file = "HOME/tests/java/Sort.java"
line = 51
begin = 9
end = 17

[JC_133]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_134]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_135]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_136]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 184
begin = 28
end = 33

[JC_70]
kind = UserCall
file = "HOME/tests/java/Sort.java"
line = 72
begin = 21
end = 29

[JC_137]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_71]
kind = PointerDeref
file = "HOME/tests/java/Sort.java"
line = 73
begin = 6
end = 10

[JC_138]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 184
begin = 28
end = 33

[JC_72]
kind = PointerDeref
file = "HOME/tests/java/Sort.java"
line = 74
begin = 20
end = 24

[JC_139]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_73]
kind = PointerDeref
file = "HOME/tests/java/Sort.java"
line = 74
begin = 20
end = 24

[JC_74]
kind = UserCall
file = "HOME/tests/java/Sort.java"
line = 77
begin = 5
end = 17

[JC_75]
file = "HOME/tests/java/Sort.java"
line = 54
begin = 20
end = 26

[JC_76]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_77]
kind = UserCall
file = "HOME/tests/java/Sort.java"
line = 62
begin = 13
end = 21

[JC_78]
file = "HOME/tests/java/Sort.java"
line = 65
begin = 24
end = 51

[JC_79]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_140]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_141]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_142]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_143]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_144]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 207
begin = 18
end = 26

[JC_145]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_146]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 207
begin = 18
end = 26

[JC_80]
kind = UserCall
file = "HOME/tests/java/Sort.java"
line = 72
begin = 21
end = 29

[JC_147]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_81]
kind = UserCall
file = "HOME/tests/java/Sort.java"
line = 77
begin = 5
end = 17

[JC_148]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_82]
file = "HOME/tests/java/Sort.java"
line = 56
begin = 21
end = 130

[JC_149]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_83]
file = "HOME/tests/java/Sort.java"
line = 54
begin = 20
end = 26

[JC_84]
file = "HOME/tests/java/Sort.java"
line = 56
begin = 21
end = 130

[JC_85]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_86]
kind = UserCall
file = "HOME/tests/java/Sort.java"
line = 62
begin = 13
end = 21

[JC_87]
file = "HOME/tests/java/Sort.java"
line = 67
begin = 25
end = 97

[JC_88]
file = "HOME/tests/java/Sort.java"
line = 65
begin = 24
end = 51

[JC_1]
file = "HOME/tests/java/Sort.jc"
line = 85
begin = 8
end = 21

[JC_89]
file = "HOME/tests/java/Sort.java"
line = 67
begin = 25
end = 97

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_3]
file = "HOME/tests/java/Sort.jc"
line = 85
begin = 8
end = 21

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_5]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_6]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_150]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_7]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_151]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_152]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 243
begin = 29
end = 35

[JC_9]
file = "HOME/tests/java/Sort.jc"
line = 87
begin = 11
end = 66

[JC_153]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_154]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 243
begin = 29
end = 35

[Permut_sym]
name = "Permut_sym"
behavior = "axiom"
file = "HOME/tests/java/Sort.jc"
line = 42
begin = 2
end = 185

[JC_155]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_156]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_90]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_157]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_91]
kind = UserCall
file = "HOME/tests/java/Sort.java"
line = 72
begin = 21
end = 29

[Permut_refl]
name = "Permut_refl"
behavior = "axiom"
file = "HOME/tests/java/Sort.jc"
line = 48
begin = 2
end = 143

[JC_158]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_92]
kind = UserCall
file = "HOME/tests/java/Sort.java"
line = 77
begin = 5
end = 17

[JC_159]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_93]
file = "HOME/tests/java/Sort.java"
line = 60
begin = 22
end = 54

[JC_94]
file = "HOME/tests/java/Sort.java"
line = 54
begin = 20
end = 26

[JC_95]
file = "HOME/tests/java/Sort.java"
line = 60
begin = 22
end = 54

[JC_96]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_97]
kind = UserCall
file = "HOME/tests/java/Sort.java"
line = 62
begin = 13
end = 21

[Permut_swap]
name = "Permut_swap"
behavior = "axiom"
file = "HOME/tests/java/Sort.jc"
line = 21
begin = 2
end = 398

[JC_98]
file = "HOME/tests/java/Sort.java"
line = 70
begin = 25
end = 57

[JC_99]
file = "HOME/tests/java/Sort.java"
line = 65
begin = 24
end = 51

[JC_160]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 267
begin = 29
end = 38

[JC_161]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_162]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 267
begin = 29
end = 38

[JC_163]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_164]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_165]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_166]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_167]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_168]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 333
begin = 29
end = 33

[JC_169]
file = "HOME/"
line = 0
begin = -1
end = -1

[Sort_swap_ensures_default]
name = "Method swap"
behavior = "Default behavior"
file = "HOME/tests/java/Sort.java"
line = 39
begin = 9
end = 13

[JC_170]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 333
begin = 29
end = 33

[JC_171]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_172]
file = "HOME/"
line = 0
begin = -1
end = -1

[Sort_min_sort_ensures_sorted]
name = "Method min_sort"
behavior = "Normal behavior `sorted'"
file = "HOME/tests/java/Sort.java"
line = 51
begin = 9
end = 17

[JC_173]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_174]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_175]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_176]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 386
begin = 22
end = 26

[JC_177]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_178]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 386
begin = 22
end = 26

[JC_179]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_10]
file = "HOME/tests/java/Sort.jc"
line = 87
begin = 11
end = 66

[JC_11]
file = "HOME/tests/java/Sort.jc"
line = 90
begin = 8
end = 30

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_13]
file = "HOME/tests/java/Sort.jc"
line = 90
begin = 8
end = 30

[JC_14]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_15]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_16]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_17]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_180]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_18]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_181]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_19]
file = "HOME/tests/java/Sort.jc"
line = 93
begin = 11
end = 113

[JC_182]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_183]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_184]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 430
begin = 22
end = 26

[JC_185]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_186]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 430
begin = 22
end = 26

[JC_187]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_188]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_189]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_20]
file = "HOME/tests/java/Sort.jc"
line = 92
begin = 10
end = 18

[JC_21]
file = "HOME/tests/java/Sort.jc"
line = 93
begin = 11
end = 113

[JC_22]
file = "HOME/tests/java/Sort.jc"
line = 92
begin = 10
end = 18

[JC_200]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_23]
file = "HOME/tests/java/Sort.jc"
line = 97
begin = 8
end = 23

[JC_201]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_24]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_202]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_25]
file = "HOME/tests/java/Sort.jc"
line = 97
begin = 8
end = 23

[JC_203]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_26]
file = "HOME/"
line = 0
begin = -1
end = -1

[Sort_min_sort_ensures_default]
name = "Method min_sort"
behavior = "Default behavior"
file = "HOME/tests/java/Sort.java"
line = 51
begin = 9
end = 17

[JC_204]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_27]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_205]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_190]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_28]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_206]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_191]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_29]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_207]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_192]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 481
begin = 19
end = 27

[JC_193]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_194]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 481
begin = 19
end = 27

[JC_195]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_196]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_197]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_198]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_199]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_30]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_31]
file = "HOME/tests/java/Sort.jc"
line = 99
begin = 11
end = 65

[JC_32]
file = "HOME/tests/java/Sort.jc"
line = 99
begin = 11
end = 65

[JC_33]
file = "HOME/tests/java/Sort.java"
line = 34
begin = 17
end = 80

[JC_34]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_35]
file = "HOME/tests/java/Sort.java"
line = 34
begin = 17
end = 80

[JC_36]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_37]
file = "HOME/tests/java/Sort.java"
line = 37
begin = 16
end = 37

[JC_38]
file = "HOME/tests/java/Sort.java"
line = 39
begin = 9
end = 13

[JC_39]
file = "HOME/tests/java/Sort.jc"
line = 108
begin = 9
end = 16

[JC_100]
file = "HOME/tests/java/Sort.java"
line = 70
begin = 25
end = 57

[JC_101]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_102]
kind = UserCall
file = "HOME/tests/java/Sort.java"
line = 72
begin = 21
end = 29

========== file tests/java/why/Sort.why ==========
type Object

type interface

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

predicate Non_null_Object(x_0:Object pointer,
 Object_alloc_table:Object alloc_table) =
 eq_int(offset_max(Object_alloc_table, x_0), (0))

predicate Non_null_intM(x:Object pointer,
 Object_alloc_table:Object alloc_table) =
 ge_int(offset_max(Object_alloc_table, x), neg_int((1)))

logic Object_tag:  -> Object tag_id

axiom Object_int : (int_of_tag(Object_tag) = (1))

logic Object_of_bitvector: bitvector -> Object pointer

logic bitvector_of_Object: Object pointer -> bitvector

axiom Object_of_bitvector_of_bitvector_of_Object :
 (forall x:Object pointer. (Object_of_bitvector(bitvector_of_Object(x)) = x))

logic Object_of_pointer_address: unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr :
 (forall p:Object pointer.
  (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom : parenttag(Object_tag, bottom_tag)

axiom Object_tags :
 (forall x:Object pointer.
  (forall Object_tag_table:Object tag_table.
   instanceof(Object_tag_table, x, Object_tag)))

logic Permut: Object pointer,
 int,
 int,
 (Object, int) memory,
 (Object, int) memory -> prop

axiom Permut_refl :
 (forall intM_intP_at_L:(Object, int) memory.
  (forall a_2:Object pointer.
   (forall l_1:int.
    (forall h_1:int. Permut(a_2, l_1, h_1, intM_intP_at_L, intM_intP_at_L)))))

predicate Swap(a_0:Object pointer,
 i_0:int,
 j:int,
 intM_intP_at_L2:(Object, int) memory,
 intM_intP_at_L1:(Object, int) memory) =
 (eq_int(select(intM_intP_at_L1, shift(a_0, i_0)),
  select(intM_intP_at_L2, shift(a_0, j)))
 and (eq_int(select(intM_intP_at_L1, shift(a_0, j)),
      select(intM_intP_at_L2, shift(a_0, i_0)))
     and (forall k:int.
          ((neq_int(k, i_0) and neq_int(k, j)) ->
           eq_int(select(intM_intP_at_L1, shift(a_0, k)),
           select(intM_intP_at_L2, shift(a_0, k)))))))

axiom Permut_swap :
 (forall intM_intP_at_L2:(Object, int) memory.
  (forall intM_intP_at_L1:(Object, int) memory.
   (forall a_5:Object pointer.
    (forall l_4:int.
     (forall h_4:int.
      (forall i_1:int.
       (forall j_0:int.
        ((le_int(l_4, i_1)
         and (le_int(i_1, h_4)
             and (le_int(l_4, j_0)
                 and (le_int(j_0, h_4)
                     and Swap(a_5, i_1, j_0, intM_intP_at_L2,
                         intM_intP_at_L1))))) ->
         Permut(a_5, l_4, h_4, intM_intP_at_L2, intM_intP_at_L1)))))))))

axiom Permut_sym :
 (forall intM_intP_at_L2:(Object, int) memory.
  (forall intM_intP_at_L1:(Object, int) memory.
   (forall a_3:Object pointer.
    (forall l_2:int.
     (forall h_2:int.
      (Permut(a_3, l_2, h_2, intM_intP_at_L2, intM_intP_at_L1) ->
       Permut(a_3, l_2, h_2, intM_intP_at_L1, intM_intP_at_L2)))))))

axiom Permut_trans :
 (forall intM_intP_at_L3:(Object, int) memory.
  (forall intM_intP_at_L2:(Object, int) memory.
   (forall intM_intP_at_L1:(Object, int) memory.
    (forall a_4:Object pointer.
     (forall l_3:int.
      (forall h_3:int.
       ((Permut(a_4, l_3, h_3, intM_intP_at_L2, intM_intP_at_L1)
        and Permut(a_4, l_3, h_3, intM_intP_at_L3, intM_intP_at_L2)) ->
        Permut(a_4, l_3, h_3, intM_intP_at_L3, intM_intP_at_L1))))))))

exception Return_label_exc of unit

logic Sort_tag:  -> Object tag_id

axiom Sort_parenttag_Object : parenttag(Sort_tag, Object_tag)

predicate Sorted(a:Object pointer,
 l:int,
 h:int,
 intM_intP_at_L:(Object, int) memory) =
 (forall i:int.
  ((le_int(l, i) and lt_int(i, h)) ->
   le_int(select(intM_intP_at_L, shift(a, i)),
   select(intM_intP_at_L, shift(a, add_int(i, (1)))))))

logic String_tag:  -> Object tag_id

axiom String_parenttag_Object : parenttag(String_tag, Object_tag)

exception Throwable_exc of Object pointer

logic Throwable_tag:  -> Object tag_id

axiom Throwable_parenttag_Object : parenttag(Throwable_tag, Object_tag)

axiom bitvector_of_Object_of_Object_of_bitvector :
 (forall x:bitvector. (bitvector_of_Object(Object_of_bitvector(x)) = x))

logic bitvector_of_interface: interface pointer -> bitvector

logic interface_of_bitvector: bitvector -> interface pointer

axiom bitvector_of_interface_of_interface_of_bitvector :
 (forall x:bitvector.
  (bitvector_of_interface(interface_of_bitvector(x)) = x))

logic intM_tag:  -> Object tag_id

axiom intM_parenttag_Object : parenttag(intM_tag, Object_tag)

logic interface_tag:  -> interface tag_id

axiom interface_int : (int_of_tag(interface_tag) = (1))

axiom interface_of_bitvector_of_bitvector_of_interface :
 (forall x:interface pointer.
  (interface_of_bitvector(bitvector_of_interface(x)) = x))

logic interface_of_pointer_address: unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr :
 (forall p:interface pointer.
  (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom : parenttag(interface_tag, bottom_tag)

axiom interface_tags :
 (forall x:interface pointer.
  (forall interface_tag_table:interface tag_table.
   instanceof(interface_tag_table, x, interface_tag)))

predicate left_valid_struct_Object(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 (offset_min(Object_alloc_table, p) <= a)

predicate left_valid_struct_Sort(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_String(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_Throwable(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_intM(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_interface(p:interface pointer,
 a:int,
 interface_alloc_table:interface alloc_table) =
 (offset_min(interface_alloc_table, p) <= a)

axiom pointer_addr_of_Object_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 (offset_max(Object_alloc_table, p) >= b)

predicate right_valid_struct_Sort(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_String(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_Throwable(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_intM(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_interface(p:interface pointer,
 b:int,
 interface_alloc_table:interface alloc_table) =
 (offset_max(interface_alloc_table, p) >= b)

predicate strict_valid_root_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Sort(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_String(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_intM(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Sort(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_intM(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) <= a)
 and (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) <= a)
 and (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) <= a)
 and (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Sort(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_String(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_Throwable(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_intM(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) <= a)
 and (offset_max(interface_alloc_table, p) >= b))

parameter Object_alloc_table : Object alloc_table ref

parameter Object_clone :
 this_6:Object pointer ->
  { } Object pointer reads Object_alloc_table { true }

parameter Object_clone_requires :
 this_6:Object pointer ->
  { } Object pointer reads Object_alloc_table { true }

parameter Object_equals :
 this_5:Object pointer ->
  obj:Object pointer -> { } bool reads Object_alloc_table { true }

parameter Object_equals_requires :
 this_5:Object pointer ->
  obj:Object pointer -> { } bool reads Object_alloc_table { true }

parameter Object_finalize :
 this_13:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_finalize_requires :
 this_13:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_hashCode :
 this_4:Object pointer -> { } int reads Object_alloc_table { true }

parameter Object_hashCode_requires :
 this_4:Object pointer -> { } int reads Object_alloc_table { true }

parameter Object_notify :
 this_8:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_notifyAll :
 this_9:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_notifyAll_requires :
 this_9:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_notify_requires :
 this_8:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_registerNatives : tt:unit -> { } unit { true }

parameter Object_registerNatives_requires : tt:unit -> { } unit { true }

parameter Object_tag_table : Object tag_table ref

parameter Object_toString :
 this_7:Object pointer ->
  { } Object pointer reads Object_alloc_table { true }

parameter Object_toString_requires :
 this_7:Object pointer ->
  { } Object pointer reads Object_alloc_table { true }

parameter Object_wait :
 this_12:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_wait_long :
 this_10:Object pointer ->
  timeout:int -> { } unit reads Object_alloc_table { true }

parameter Object_wait_long_int :
 this_11:Object pointer ->
  timeout_0:int -> nanos:int -> { } unit reads Object_alloc_table { true }

parameter Object_wait_long_int_requires :
 this_11:Object pointer ->
  timeout_0:int -> nanos:int -> { } unit reads Object_alloc_table { true }

parameter Object_wait_long_requires :
 this_10:Object pointer ->
  timeout:int -> { } unit reads Object_alloc_table { true }

parameter Object_wait_requires :
 this_12:Object pointer -> { } unit reads Object_alloc_table { true }

parameter intM_intP : (Object, int) memory ref

parameter Sort_min_sort :
 this_0:Object pointer ->
  t_0:Object pointer ->
   { } unit reads Object_alloc_table,intM_intP writes intM_intP
   { ((JC_62:
      Permut(t_0, (0),
      sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)), (1)),
      intM_intP, intM_intP@))
     and (JC_60:
         Sorted(t_0, (0),
         sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)), (1)),
         intM_intP))) }

parameter Sort_min_sort_requires :
 this_0:Object pointer ->
  t_0:Object pointer ->
   { (JC_51: Non_null_intM(t_0, Object_alloc_table))} unit
   reads Object_alloc_table,intM_intP writes intM_intP
   { ((JC_62:
      Permut(t_0, (0),
      sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)), (1)),
      intM_intP, intM_intP@))
     and (JC_60:
         Sorted(t_0, (0),
         sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)), (1)),
         intM_intP))) }

parameter Sort_swap :
 this_2:Object pointer ->
  t:Object pointer ->
   i_2:int ->
    j_1:int ->
     { } unit reads Object_alloc_table,intM_intP writes intM_intP
     { (JC_42:
       ((JC_40: Swap(t, i_2, j_1, intM_intP, intM_intP@))
       and (JC_41:
           not_assigns(Object_alloc_table@, intM_intP@, intM_intP,
           pset_union(pset_range(pset_singleton(t@), j_1@, j_1@),
           pset_range(pset_singleton(t@), i_2@, i_2@)))))) }

parameter Sort_swap_requires :
 this_2:Object pointer ->
  t:Object pointer ->
   i_2:int ->
    j_1:int ->
     { (JC_33:
       (Non_null_intM(t, Object_alloc_table)
       and (le_int((0), i_2)
           and (lt_int(i_2, add_int(offset_max(Object_alloc_table, t), (1)))
               and (le_int((0), j_1)
                   and lt_int(j_1,
                       add_int(offset_max(Object_alloc_table, t), (1))))))))}
     unit reads Object_alloc_table,intM_intP writes intM_intP
     { (JC_42:
       ((JC_40: Swap(t, i_2, j_1, intM_intP, intM_intP@))
       and (JC_41:
           not_assigns(Object_alloc_table@, intM_intP@, intM_intP,
           pset_union(pset_range(pset_singleton(t@), j_1@, j_1@),
           pset_range(pset_singleton(t@), i_2@, i_2@)))))) }

parameter alloc_bitvector_struct_Object :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Object(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Object_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Object(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Sort :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Sort(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Sort_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Sort(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_String :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_String(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_String_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_String(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Throwable :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Throwable(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Throwable_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Throwable(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_intM :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_intM(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_intM_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_intM(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_interface :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_interface(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_interface_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_interface(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_struct_Object :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Object(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_Object_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Object(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_Sort :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Sort(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Sort_tag)))) }

parameter alloc_struct_Sort_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Sort(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Sort_tag)))) }

parameter alloc_struct_String :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_String(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_String_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_String(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_Throwable :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter alloc_struct_Throwable_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter alloc_struct_intM :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_intM(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, intM_tag)))) }

parameter alloc_struct_intM_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_intM(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, intM_tag)))) }

parameter interface_alloc_table : interface alloc_table ref

parameter interface_tag_table : interface tag_table ref

parameter alloc_struct_interface :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { } interface pointer writes interface_alloc_table,interface_tag_table
    { (strict_valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter alloc_struct_interface_requires :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { ge_int(n, (0))} interface pointer
    writes interface_alloc_table,interface_tag_table
    { (strict_valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter cons_Object :
 this_14:Object pointer -> { } unit reads Object_alloc_table { true }

parameter cons_Object_requires :
 this_14:Object pointer -> { } unit reads Object_alloc_table { true }

parameter cons_Sort :
 this_3:Object pointer -> { } unit reads Object_alloc_table { true }

parameter cons_Sort_requires :
 this_3:Object pointer -> { } unit reads Object_alloc_table { true }

parameter java_array_length_intM :
 x_2:Object pointer ->
  { } int reads Object_alloc_table
  { (JC_21:
    (le_int(result, (2147483647))
    and (ge_int(result, (0))
        and (eq_int(result,
             add_int(offset_max(Object_alloc_table, x_2), (1)))
            and (true = true))))) }

parameter java_array_length_intM_requires :
 x_2:Object pointer ->
  { } int reads Object_alloc_table
  { (JC_21:
    (le_int(result, (2147483647))
    and (ge_int(result, (0))
        and (eq_int(result,
             add_int(offset_max(Object_alloc_table, x_2), (1)))
            and (true = true))))) }

parameter non_null_Object :
 x_3:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_32:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_3), (0))
     else (x_3 = null))) }

parameter non_null_Object_requires :
 x_3:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_32:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_3), (0))
     else (x_3 = null))) }

parameter non_null_intM :
 x_1:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_10:
    (if result
     then ge_int(offset_max(Object_alloc_table, x_1), neg_int((1)))
     else (x_1 = null))) }

parameter non_null_intM_requires :
 x_1:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_10:
    (if result
     then ge_int(offset_max(Object_alloc_table, x_1), neg_int((1)))
     else (x_1 = null))) }

let Sort_min_sort_ensures_default =
 fun (this_0 : Object pointer) (t_0 : Object pointer) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (valid_struct_Sort(this_0, (0), (0), Object_alloc_table)
        and (JC_53: Non_null_intM(t_0, Object_alloc_table)))) }
  (init:
  try
   begin
     (let i_3 = ref (any_int void) in
     (let j_2 = ref (any_int void) in
     (let mi = ref (any_int void) in
     (let mv = ref (any_int void) in
     begin
       (let jessie_45 = (i_3 := (0)) in void);
      try
       while true do
       { invariant (JC_75: le_int((0), i_3))  }
        begin
          [ { } unit { true } ];
         try
          (let jessie_60 = begin
                             (if (K_27:
                                 ((lt_int_ !i_3) (K_26:
                                                 ((sub_int (K_25:
                                                           (JC_77:
                                                           (java_array_length_intM_requires t_0)))) (1)))))
                             then
                              begin
                                (let jessie_47 = (mv := (K_12:
                                                        ((safe_acc_ !intM_intP) 
                                                         ((shift t_0) !i_3)))) in
                                void);
                               (let jessie_48 = (mi := !i_3) in void);
                               (let jessie_49 = (j_2 := (K_22:
                                                        ((add_int !i_3) (1)))) in
                               void);
                               try
                                while true do
                                { invariant
                                    (JC_78:
                                    (lt_int(i_3, j_2)
                                    and (le_int(i_3, mi)
                                        and lt_int(mi,
                                            add_int(offset_max(Object_alloc_table,
                                                    t_0),
                                            (1))))))
                                   }
                                 begin
                                   [ { } unit { true } ];
                                  try
                                   (let jessie_54 = begin
                                                      (if (K_21:
                                                          ((lt_int_ !j_2) 
                                                           (K_20:
                                                           (JC_80:
                                                           (java_array_length_intM_requires t_0)))))
                                                      then
                                                       (if (K_18:
                                                           ((lt_int_ 
                                                             (K_17:
                                                             ((safe_acc_ !intM_intP) 
                                                              ((shift t_0) !j_2)))) !mv))
                                                       then
                                                        (let jessie_52 = 
                                                        begin
                                                          (let jessie_51 = 
                                                          (mi := !j_2) in
                                                          void);
                                                         (mv := (K_16:
                                                                ((safe_acc_ !intM_intP) 
                                                                 ((shift t_0) !j_2))));
                                                         !mv
                                                        end in
                                                        void)
                                                       else void)
                                                      else
                                                       (let jessie_53 = 
                                                       (raise
                                                        (Loop_exit_exc
                                                        void)) in
                                                       void));
                                                     (raise
                                                      (Loop_continue_exc
                                                      void))
                                                    end in
                                   void)
                                   with
                                   Loop_continue_exc jessie_4 ->
                                   (let jessie_56 = (K_19:
                                                    (let jessie_2 = !j_2 in
                                                    begin
                                                      (let jessie_55 = 
                                                      (j_2 := ((add_int jessie_2) (1))) in
                                                      void);
                                                     jessie_2
                                                    end)) in
                                   void) end
                                 end
                                done
                                with
                                Loop_exit_exc jessie_3 ->
                                void end;
                               (K_23:
                               (JC_81:
                               ((((Sort_swap_requires this_0) t_0) !i_3) !mi)))
                              end
                             else
                              (let jessie_59 = (raise (Loop_exit_exc void)) in
                              void));
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_6 ->
          (let jessie_62 = (K_24:
                           (let jessie_1 = !i_3 in
                           begin
                             (let jessie_61 = (i_3 := ((add_int jessie_1) (1))) in
                             void);
                            jessie_1
                           end)) in
          void) end
        end
       done
       with
       Loop_exit_exc jessie_5 ->
       void end
     end))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_55: true) }

let Sort_min_sort_ensures_permutation =
 fun (this_0 : Object pointer) (t_0 : Object pointer) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (valid_struct_Sort(this_0, (0), (0), Object_alloc_table)
        and (JC_53: Non_null_intM(t_0, Object_alloc_table)))) }
  (init:
  try
   begin
     (let i_3 = ref (any_int void) in
     (let j_2 = ref (any_int void) in
     (let mi = ref (any_int void) in
     (let mv = ref (any_int void) in
     begin
       (let jessie_81 = (i_3 := (0)) in void);
      try
       while true do
       { invariant
           (JC_93:
           Permut(t_0, (0),
           sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)), (1)),
           intM_intP, intM_intP@init))
          }
        begin
          [ { } unit reads Object_alloc_table,i_3,intM_intP
            { ((JC_94: le_int((0), i_3))
              and (JC_95:
                  Permut(t_0, (0),
                  sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)),
                  (1)), intM_intP, intM_intP@init))) } ];
         try
          (let jessie_96 = begin
                             (if (K_27:
                                 ((lt_int_ !i_3) (K_26:
                                                 ((sub_int (K_25:
                                                           (JC_97:
                                                           (java_array_length_intM t_0)))) (1)))))
                             then
                              begin
                                (let jessie_83 = (mv := (K_12:
                                                        ((safe_acc_ !intM_intP) 
                                                         ((shift t_0) !i_3)))) in
                                void);
                               (let jessie_84 = (mi := !i_3) in void);
                               (let jessie_85 = (j_2 := (K_22:
                                                        ((add_int !i_3) (1)))) in
                               void);
                               try
                                while true do
                                { invariant
                                    (JC_98:
                                    Permut(t_0, (0),
                                    sub_int(add_int(offset_max(Object_alloc_table,
                                                    t_0),
                                            (1)),
                                    (1)), intM_intP, intM_intP@init))
                                   }
                                 begin
                                   [ { } unit
                                     reads Object_alloc_table,i_3,intM_intP,j_2,mi
                                     { ((JC_99:
                                        (lt_int(i_3, j_2)
                                        and (le_int(i_3, mi)
                                            and lt_int(mi,
                                                add_int(offset_max(Object_alloc_table,
                                                        t_0),
                                                (1))))))
                                       and (JC_100:
                                           Permut(t_0, (0),
                                           sub_int(add_int(offset_max(Object_alloc_table,
                                                           t_0),
                                                   (1)),
                                           (1)), intM_intP, intM_intP@init))) } ];
                                  try
                                   (let jessie_90 = begin
                                                      (if (K_21:
                                                          ((lt_int_ !j_2) 
                                                           (K_20:
                                                           (JC_102:
                                                           (java_array_length_intM t_0)))))
                                                      then
                                                       (if (K_18:
                                                           ((lt_int_ 
                                                             (K_17:
                                                             ((safe_acc_ !intM_intP) 
                                                              ((shift t_0) !j_2)))) !mv))
                                                       then
                                                        (let jessie_88 = 
                                                        begin
                                                          (let jessie_87 = 
                                                          (mi := !j_2) in
                                                          void);
                                                         (mv := (K_16:
                                                                ((safe_acc_ !intM_intP) 
                                                                 ((shift t_0) !j_2))));
                                                         !mv
                                                        end in
                                                        void)
                                                       else void)
                                                      else
                                                       (let jessie_89 = 
                                                       (raise
                                                        (Loop_exit_exc
                                                        void)) in
                                                       void));
                                                     (raise
                                                      (Loop_continue_exc
                                                      void))
                                                    end in
                                   void)
                                   with
                                   Loop_continue_exc jessie_4 ->
                                   (let jessie_92 = (K_19:
                                                    (let jessie_2 = !j_2 in
                                                    begin
                                                      (let jessie_91 = 
                                                      (j_2 := ((add_int jessie_2) (1))) in
                                                      void);
                                                     jessie_2
                                                    end)) in
                                   void) end
                                 end
                                done
                                with
                                Loop_exit_exc jessie_3 ->
                                void end;
                               (K_23:
                               (JC_103:
                               ((((Sort_swap this_0) t_0) !i_3) !mi)))
                              end
                             else
                              (let jessie_95 = (raise (Loop_exit_exc void)) in
                              void));
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_6 ->
          (let jessie_98 = (K_24:
                           (let jessie_1 = !i_3 in
                           begin
                             (let jessie_97 = (i_3 := ((add_int jessie_1) (1))) in
                             void);
                            jessie_1
                           end)) in
          void) end
        end
       done
       with
       Loop_exit_exc jessie_5 ->
       void end
     end))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_61:
    Permut(t_0, (0),
    sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)), (1)),
    intM_intP, intM_intP@)) }

let Sort_min_sort_ensures_sorted =
 fun (this_0 : Object pointer) (t_0 : Object pointer) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (valid_struct_Sort(this_0, (0), (0), Object_alloc_table)
        and (JC_53: Non_null_intM(t_0, Object_alloc_table)))) }
  (init:
  try
   begin
     (let i_3 = ref (any_int void) in
     (let j_2 = ref (any_int void) in
     (let mi = ref (any_int void) in
     (let mv = ref (any_int void) in
     begin
       (let jessie_63 = (i_3 := (0)) in void);
      try
       while true do
       { invariant
           (JC_82:
           (Sorted(t_0, (0), i_3, intM_intP)
           and (forall k1:int.
                (forall k2:int.
                 ((le_int((0), k1)
                  and (lt_int(k1, i_3)
                      and (le_int(i_3, k2)
                          and lt_int(k2,
                              add_int(offset_max(Object_alloc_table, t_0),
                              (1)))))) ->
                  le_int(select(intM_intP, shift(t_0, k1)),
                  select(intM_intP, shift(t_0, k2))))))))
          }
        begin
          [ { } unit reads Object_alloc_table,i_3,intM_intP
            { ((JC_83: le_int((0), i_3))
              and (JC_84:
                  (Sorted(t_0, (0), i_3, intM_intP)
                  and (forall k1:int.
                       (forall k2:int.
                        ((le_int((0), k1)
                         and (lt_int(k1, i_3)
                             and (le_int(i_3, k2)
                                 and lt_int(k2,
                                     add_int(offset_max(Object_alloc_table,
                                             t_0),
                                     (1)))))) ->
                         le_int(select(intM_intP, shift(t_0, k1)),
                         select(intM_intP, shift(t_0, k2))))))))) } ];
         try
          (let jessie_78 = begin
                             (if (K_27:
                                 ((lt_int_ !i_3) (K_26:
                                                 ((sub_int (K_25:
                                                           (JC_86:
                                                           (java_array_length_intM t_0)))) (1)))))
                             then
                              begin
                                (let jessie_65 = (mv := (K_12:
                                                        ((safe_acc_ !intM_intP) 
                                                         ((shift t_0) !i_3)))) in
                                void);
                               (let jessie_66 = (mi := !i_3) in void);
                               (let jessie_67 = (j_2 := (K_22:
                                                        ((add_int !i_3) (1)))) in
                               void);
                               try
                                while true do
                                { invariant
                                    (JC_87:
                                    (eq_int(mv,
                                     select(intM_intP, shift(t_0, mi)))
                                    and (forall k_0:int.
                                         ((le_int(i_3, k_0)
                                          and lt_int(k_0, j_2)) ->
                                          ge_int(select(intM_intP,
                                                 shift(t_0, k_0)),
                                          mv)))))
                                   }
                                 begin
                                   [ { } unit
                                     reads Object_alloc_table,i_3,intM_intP,j_2,mi,mv
                                     { ((JC_88:
                                        (lt_int(i_3, j_2)
                                        and (le_int(i_3, mi)
                                            and lt_int(mi,
                                                add_int(offset_max(Object_alloc_table,
                                                        t_0),
                                                (1))))))
                                       and (JC_89:
                                           (eq_int(mv,
                                            select(intM_intP, shift(t_0, mi)))
                                           and (forall k_0:int.
                                                ((le_int(i_3, k_0)
                                                 and lt_int(k_0, j_2)) ->
                                                 ge_int(select(intM_intP,
                                                        shift(t_0, k_0)),
                                                 mv)))))) } ];
                                  try
                                   (let jessie_72 = begin
                                                      (if (K_21:
                                                          ((lt_int_ !j_2) 
                                                           (K_20:
                                                           (JC_91:
                                                           (java_array_length_intM t_0)))))
                                                      then
                                                       (if (K_18:
                                                           ((lt_int_ 
                                                             (K_17:
                                                             ((safe_acc_ !intM_intP) 
                                                              ((shift t_0) !j_2)))) !mv))
                                                       then
                                                        (let jessie_70 = 
                                                        begin
                                                          (let jessie_69 = 
                                                          (mi := !j_2) in
                                                          void);
                                                         (mv := (K_16:
                                                                ((safe_acc_ !intM_intP) 
                                                                 ((shift t_0) !j_2))));
                                                         !mv
                                                        end in
                                                        void)
                                                       else void)
                                                      else
                                                       (let jessie_71 = 
                                                       (raise
                                                        (Loop_exit_exc
                                                        void)) in
                                                       void));
                                                     (raise
                                                      (Loop_continue_exc
                                                      void))
                                                    end in
                                   void)
                                   with
                                   Loop_continue_exc jessie_4 ->
                                   (let jessie_74 = (K_19:
                                                    (let jessie_2 = !j_2 in
                                                    begin
                                                      (let jessie_73 = 
                                                      (j_2 := ((add_int jessie_2) (1))) in
                                                      void);
                                                     jessie_2
                                                    end)) in
                                   void) end
                                 end
                                done
                                with
                                Loop_exit_exc jessie_3 ->
                                void end;
                               (K_23:
                               (JC_92: ((((Sort_swap this_0) t_0) !i_3) !mi)))
                              end
                             else
                              (let jessie_77 = (raise (Loop_exit_exc void)) in
                              void));
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_6 ->
          (let jessie_80 = (K_24:
                           (let jessie_1 = !i_3 in
                           begin
                             (let jessie_79 = (i_3 := ((add_int jessie_1) (1))) in
                             void);
                            jessie_1
                           end)) in
          void) end
        end
       done
       with
       Loop_exit_exc jessie_5 ->
       void end
     end))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_59:
    Sorted(t_0, (0),
    sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)), (1)),
    intM_intP)) }

let Sort_min_sort_safety =
 fun (this_0 : Object pointer) (t_0 : Object pointer) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (valid_struct_Sort(this_0, (0), (0), Object_alloc_table)
        and (JC_53: Non_null_intM(t_0, Object_alloc_table)))) }
  (init:
  try
   begin
     (let i_3 = ref (any_int void) in
     (let j_2 = ref (any_int void) in
     (let mi = ref (any_int void) in
     (let mv = ref (any_int void) in
     begin
       (let jessie_27 = (i_3 := (0)) in void);
      try
       while true do
       { invariant (JC_64: true)  }
        begin
          [ { } unit reads i_3 { (JC_63: le_int((0), i_3)) } ];
         try
          (let jessie_42 = begin
                             (if (K_27:
                                 ((lt_int_ !i_3) (K_26:
                                                 ((sub_int (K_25:
                                                           (JC_65:
                                                           (java_array_length_intM t_0)))) (1)))))
                             then
                              begin
                                (let jessie_29 = (mv := (K_12:
                                                        (JC_67:
                                                        ((((offset_acc_ !Object_alloc_table) !intM_intP) t_0) !i_3)))) in
                                void);
                               (let jessie_30 = (mi := !i_3) in void);
                               (let jessie_31 = (j_2 := (K_22:
                                                        ((add_int !i_3) (1)))) in
                               void);
                               try
                                while true do
                                { invariant (JC_69: true)  }
                                 begin
                                   [ { } unit
                                     reads Object_alloc_table,i_3,j_2,mi
                                     { (JC_68:
                                       (lt_int(i_3, j_2)
                                       and (le_int(i_3, mi)
                                           and lt_int(mi,
                                               add_int(offset_max(Object_alloc_table,
                                                       t_0),
                                               (1)))))) } ];
                                  try
                                   (let jessie_36 = begin
                                                      (if (K_21:
                                                          ((lt_int_ !j_2) 
                                                           (K_20:
                                                           (JC_70:
                                                           (java_array_length_intM t_0)))))
                                                      then
                                                       (if (K_18:
                                                           ((lt_int_ 
                                                             (K_17:
                                                             (JC_71:
                                                             ((((offset_acc_ !Object_alloc_table) !intM_intP) t_0) !j_2)))) !mv))
                                                       then
                                                        (let jessie_34 = 
                                                        begin
                                                          (let jessie_33 = 
                                                          (mi := !j_2) in
                                                          void);
                                                         (mv := (K_16:
                                                                (JC_73:
                                                                ((((offset_acc_ !Object_alloc_table) !intM_intP) t_0) !j_2))));
                                                         !mv
                                                        end in
                                                        void)
                                                       else void)
                                                      else
                                                       (let jessie_35 = 
                                                       (raise
                                                        (Loop_exit_exc
                                                        void)) in
                                                       void));
                                                     (raise
                                                      (Loop_continue_exc
                                                      void))
                                                    end in
                                   void)
                                   with
                                   Loop_continue_exc jessie_4 ->
                                   (let jessie_38 = (K_19:
                                                    (let jessie_2 = !j_2 in
                                                    begin
                                                      (let jessie_37 = 
                                                      (j_2 := ((add_int jessie_2) (1))) in
                                                      void);
                                                     jessie_2
                                                    end)) in
                                   void) end
                                 end
                                done
                                with
                                Loop_exit_exc jessie_3 ->
                                void end;
                               (K_23:
                               (JC_74: ((((Sort_swap this_0) t_0) !i_3) !mi)))
                              end
                             else
                              (let jessie_41 = (raise (Loop_exit_exc void)) in
                              void));
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_6 ->
          (let jessie_44 = (K_24:
                           (let jessie_1 = !i_3 in
                           begin
                             (let jessie_43 = (i_3 := ((add_int jessie_1) (1))) in
                             void);
                            jessie_1
                           end)) in
          void) end
        end
       done
       with
       Loop_exit_exc jessie_5 ->
       void end
     end))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let Sort_swap_ensures_default =
 fun (this_2 : Object pointer) (t : Object pointer) (i_2 : int) (j_1 : int) ->
  { (left_valid_struct_intM(t, (0), Object_alloc_table)
    and (valid_struct_Sort(this_2, (0), (0), Object_alloc_table)
        and (JC_35:
            (Non_null_intM(t, Object_alloc_table)
            and (le_int((0), i_2)
                and (lt_int(i_2,
                     add_int(offset_max(Object_alloc_table, t), (1)))
                    and (le_int((0), j_1)
                        and lt_int(j_1,
                            add_int(offset_max(Object_alloc_table, t), (1)))))))))) }
  (init:
  try
   begin
     (let jessie_26 = (let tmp = (K_5:
                                 ((safe_acc_ !intM_intP) ((shift t) i_2))) in
                      begin
                        (K_3:
                        (let jessie_21 = (let jessie_17 = (K_2:
                                                          ((safe_acc_ !intM_intP) 
                                                           ((shift t) j_1))) in
                                         (let jessie_20 = ((shift t) i_2) in
                                         (((safe_upd_ intM_intP) jessie_20) jessie_17))) in
                        void));
                       (K_4:
                       (let jessie_22 = tmp in
                       (let jessie_25 = ((shift t) j_1) in
                       begin
                         (((safe_upd_ intM_intP) jessie_25) jessie_22);
                        jessie_22
                       end)))
                      end) in
     void);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_39:
    ((JC_37: Swap(t, i_2, j_1, intM_intP, intM_intP@))
    and (JC_38:
        not_assigns(Object_alloc_table@, intM_intP@, intM_intP,
        pset_union(pset_range(pset_singleton(t@), j_1@, j_1@),
        pset_range(pset_singleton(t@), i_2@, i_2@)))))) }

let Sort_swap_safety =
 fun (this_2 : Object pointer) (t : Object pointer) (i_2 : int) (j_1 : int) ->
  { (left_valid_struct_intM(t, (0), Object_alloc_table)
    and (valid_struct_Sort(this_2, (0), (0), Object_alloc_table)
        and (JC_35:
            (Non_null_intM(t, Object_alloc_table)
            and (le_int((0), i_2)
                and (lt_int(i_2,
                     add_int(offset_max(Object_alloc_table, t), (1)))
                    and (le_int((0), j_1)
                        and lt_int(j_1,
                            add_int(offset_max(Object_alloc_table, t), (1)))))))))) }
  (init:
  try
   begin
     (let jessie_16 = (let tmp = (K_5:
                                 (JC_46:
                                 ((((offset_acc_ !Object_alloc_table) !intM_intP) t) i_2))) in
                      begin
                        (K_3:
                        (let jessie_11 = (let jessie_7 = (K_2:
                                                         (JC_48:
                                                         ((((offset_acc_ !Object_alloc_table) !intM_intP) t) j_1))) in
                                         (let jessie_8 = t in
                                         (let jessie_9 = i_2 in
                                         (let jessie_10 = ((shift jessie_8) jessie_9) in
                                         (JC_49:
                                         (((((offset_upd_ !Object_alloc_table) intM_intP) jessie_8) jessie_9) jessie_7)))))) in
                        void));
                       (K_4:
                       (let jessie_12 = tmp in
                       (let jessie_13 = t in
                       (let jessie_14 = j_1 in
                       (let jessie_15 = ((shift jessie_13) jessie_14) in
                       begin
                         (JC_50:
                         (((((offset_upd_ !Object_alloc_table) intM_intP) jessie_13) jessie_14) jessie_12));
                        jessie_12
                       end)))))
                      end) in
     void);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


========== make project execution ==========
why --project [...] why/Sort.why
========== file tests/java/why/Sort.wpr ==========
<project name="Sort" context="why/Sort_ctx.why">
  <function name="Method swap">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Sort_po34.why">
      <location file = "HOME/tests/java/Sort.java" line = "40" begin = "11" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/Sort_po35.why">
      <location file = "HOME/tests/java/Sort.java" line = "40" begin = "11" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/Sort_po36.why">
      <location file = "HOME/tests/java/Sort.java" line = "41" begin = "8" end = "12"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/Sort_po37.why">
      <location file = "HOME/tests/java/Sort.java" line = "41" begin = "8" end = "12"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/Sort_po32.why">
      <location file = "HOME/tests/java/Sort.java" line = "37" begin = "16" end = "37"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Sort_po33.why">
      <location file = "HOME/tests/java/Sort.java" line = "39" begin = "9" end = "13"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Method min_sort">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Sort_po28.why">
      <location file = "HOME/tests/java/Sort.java" line = "64" begin = "10" end = "14"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/Sort_po29.why">
      <location file = "HOME/tests/java/Sort.java" line = "64" begin = "10" end = "14"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/Sort_po30.why">
      <location file = "HOME/tests/java/Sort.java" line = "73" begin = "6" end = "10"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/Sort_po31.why">
      <location file = "HOME/tests/java/Sort.java" line = "73" begin = "6" end = "10"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `sorted'">
    <goal why_file="why/Sort_po18.why">
      <location file = "HOME/tests/java/Sort.java" line = "56" begin = "21" end = "130"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Sort_po19.why">
      <location file = "HOME/tests/java/Sort.java" line = "56" begin = "21" end = "130"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Sort_po20.why">
      <location file = "HOME/tests/java/Sort.java" line = "67" begin = "25" end = "97"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Sort_po21.why">
      <location file = "HOME/tests/java/Sort.java" line = "67" begin = "25" end = "97"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Sort_po22.why">
      <location file = "HOME/tests/java/Sort.java" line = "67" begin = "25" end = "97"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Sort_po23.why">
      <location file = "HOME/tests/java/Sort.java" line = "67" begin = "25" end = "97"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Sort_po24.why">
      <location file = "HOME/tests/java/Sort.java" line = "67" begin = "25" end = "97"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Sort_po25.why">
      <location file = "HOME/tests/java/Sort.java" line = "56" begin = "21" end = "130"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Sort_po26.why">
      <location file = "HOME/tests/java/Sort.java" line = "56" begin = "21" end = "130"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Sort_po27.why">
      <location file = "HOME/tests/java/Sort.java" line = "47" begin = "18" end = "40"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `permutation'">
    <goal why_file="why/Sort_po16.why">
      <location file = "HOME/tests/java/Sort.java" line = "60" begin = "22" end = "54"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Sort_po17.why">
      <location file = "HOME/tests/java/Sort.java" line = "60" begin = "22" end = "54"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/Sort_po1.why">
      <location file = "HOME/tests/java/Sort.java" line = "54" begin = "20" end = "26"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Sort_po2.why">
      <location file = "HOME/tests/java/Sort.java" line = "65" begin = "24" end = "51"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Sort_po3.why">
      <location file = "HOME/tests/java/Sort.java" line = "65" begin = "24" end = "51"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Sort_po4.why">
      <location file = "HOME/tests/java/Sort.java" line = "65" begin = "24" end = "51"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Sort_po5.why">
      <location file = "HOME/tests/java/Sort.java" line = "65" begin = "24" end = "51"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Sort_po6.why">
      <location file = "HOME/tests/java/Sort.java" line = "65" begin = "24" end = "51"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Sort_po7.why">
      <location file = "HOME/tests/java/Sort.java" line = "65" begin = "24" end = "51"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Sort_po8.why">
      <location file = "HOME/tests/java/Sort.java" line = "65" begin = "24" end = "51"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Sort_po9.why">
      <location file = "HOME/tests/java/Sort.java" line = "65" begin = "24" end = "51"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Sort_po10.why">
      <location file = "HOME/tests/java/Sort.java" line = "65" begin = "24" end = "51"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Sort_po11.why">
      <location file = "HOME/tests/java/Sort.java" line = "77" begin = "5" end = "17"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/Sort_po12.why">
      <location file = "HOME/tests/java/Sort.java" line = "77" begin = "5" end = "17"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/Sort_po13.why">
      <location file = "HOME/tests/java/Sort.java" line = "77" begin = "5" end = "17"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/Sort_po14.why">
      <location file = "HOME/tests/java/Sort.java" line = "77" begin = "5" end = "17"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/Sort_po15.why">
      <location file = "HOME/tests/java/Sort.java" line = "54" begin = "20" end = "26"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    </behavior>
  </function>
</project>
========== file tests/java/why/Sort_ctx.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic int_max : int, int -> int

logic int_min : int, int -> int

logic real_max : real, real -> real

logic real_min : real, real -> real

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null :  -> 'a1 pointer

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_positive: (forall p:'a1 pointer. (0 <= address(p)))

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

type Object

type interface

predicate Non_null_Object(x_0: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x_0) = 0)

predicate Non_null_intM(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) >= (-1))

logic Object_tag :  -> Object tag_id

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_bitvector : bitvector -> Object pointer

logic bitvector_of_Object : Object pointer -> bitvector

axiom Object_of_bitvector_of_bitvector_of_Object:
  (forall x:Object pointer.
    (Object_of_bitvector(bitvector_of_Object(x)) = x))

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic Permut : Object pointer, int, int, (Object, int) memory, (Object,
int) memory -> prop

axiom Permut_refl:
  (forall intM_intP_at_L:(Object, int) memory.
    (forall a_2:Object pointer.
      (forall l_1:int.
        (forall h_1:int. Permut(a_2, l_1, h_1, intM_intP_at_L,
          intM_intP_at_L)))))

predicate Swap(a_0: Object pointer, i_0: int, j: int,
  intM_intP_at_L2: (Object, int) memory, intM_intP_at_L1: (Object,
  int) memory) =
  ((select(intM_intP_at_L1, shift(a_0, i_0)) = select(intM_intP_at_L2,
   shift(a_0, j))) and
   ((select(intM_intP_at_L1, shift(a_0, j)) = select(intM_intP_at_L2,
    shift(a_0, i_0))) and
    (forall k:int.
      (((k <> i_0) and (k <> j)) -> (select(intM_intP_at_L1, shift(a_0,
       k)) = select(intM_intP_at_L2, shift(a_0, k)))))))

axiom Permut_swap:
  (forall intM_intP_at_L2:(Object, int) memory.
    (forall intM_intP_at_L1:(Object, int) memory.
      (forall a_5:Object pointer.
        (forall l_4:int.
          (forall h_4:int.
            (forall i_1:int.
              (forall j_0:int.
                (((l_4 <= i_1) and
                  ((i_1 <= h_4) and
                   ((l_4 <= j_0) and
                    ((j_0 <= h_4) and Swap(a_5, i_1, j_0, intM_intP_at_L2,
                     intM_intP_at_L1))))) ->
                 Permut(a_5, l_4, h_4, intM_intP_at_L2, intM_intP_at_L1)))))))))

axiom Permut_sym:
  (forall intM_intP_at_L2:(Object, int) memory.
    (forall intM_intP_at_L1:(Object, int) memory.
      (forall a_3:Object pointer.
        (forall l_2:int.
          (forall h_2:int.
            (Permut(a_3, l_2, h_2, intM_intP_at_L2, intM_intP_at_L1) ->
             Permut(a_3, l_2, h_2, intM_intP_at_L1, intM_intP_at_L2)))))))

axiom Permut_trans:
  (forall intM_intP_at_L3:(Object, int) memory.
    (forall intM_intP_at_L2:(Object, int) memory.
      (forall intM_intP_at_L1:(Object, int) memory.
        (forall a_4:Object pointer.
          (forall l_3:int.
            (forall h_3:int.
              ((Permut(a_4, l_3, h_3, intM_intP_at_L2, intM_intP_at_L1) and
                Permut(a_4, l_3, h_3, intM_intP_at_L3, intM_intP_at_L2)) ->
               Permut(a_4, l_3, h_3, intM_intP_at_L3, intM_intP_at_L1))))))))

logic Sort_tag :  -> Object tag_id

axiom Sort_parenttag_Object: parenttag(Sort_tag, Object_tag)

predicate Sorted(a: Object pointer, l: int, h: int, intM_intP_at_L: (Object,
  int) memory) =
  (forall i:int.
    (((l <= i) and (i < h)) -> (select(intM_intP_at_L, shift(a,
     i)) <= select(intM_intP_at_L, shift(a, (i + 1))))))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

axiom bitvector_of_Object_of_Object_of_bitvector:
  (forall x:bitvector. (bitvector_of_Object(Object_of_bitvector(x)) = x))

logic bitvector_of_interface : interface pointer -> bitvector

logic interface_of_bitvector : bitvector -> interface pointer

axiom bitvector_of_interface_of_interface_of_bitvector:
  (forall x:bitvector.
    (bitvector_of_interface(interface_of_bitvector(x)) = x))

logic intM_tag :  -> Object tag_id

axiom intM_parenttag_Object: parenttag(intM_tag, Object_tag)

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_of_bitvector_of_bitvector_of_interface:
  (forall x:interface pointer.
    (interface_of_bitvector(bitvector_of_interface(x)) = x))

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate left_valid_struct_Object(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = (offset_min(Object_alloc_table,
  p) <= a)

predicate left_valid_struct_Sort(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_String(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_Throwable(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_intM(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_interface(p: interface pointer, a: int,
  interface_alloc_table: interface alloc_table) =
  (offset_min(interface_alloc_table, p) <= a)

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  p) >= b)

predicate right_valid_struct_Sort(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_String(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_Throwable(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_intM(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_interface(p: interface pointer, b: int,
  interface_alloc_table: interface alloc_table) =
  (offset_max(interface_alloc_table, p) >= b)

predicate strict_valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Sort(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Sort(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_intM(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Sort(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

========== file tests/java/why/Sort_po1.why ==========
goal Sort_min_sort_ensures_default_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  ("JC_75": (0 <= i_3))

========== file tests/java/why/Sort_po10.why ==========
goal Sort_min_sort_ensures_default_po_10:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, j_2_0))) ->
  (result2 >= mv0) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_78": (mi0 < (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Sort_po11.why ==========
goal Sort_min_sort_ensures_default_po_11:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  ("JC_33": Non_null_intM(t_0, Object_alloc_table))

========== file tests/java/why/Sort_po12.why ==========
goal Sort_min_sort_ensures_default_po_12:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  ("JC_33": (i_3_0 < (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Sort_po13.why ==========
goal Sort_min_sort_ensures_default_po_13:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  ("JC_33": (0 <= mi0))

========== file tests/java/why/Sort_po14.why ==========
goal Sort_min_sort_ensures_default_po_14:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  ("JC_33": (mi0 < (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Sort_po15.why ==========
goal Sort_min_sort_ensures_default_po_15:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  ("JC_33":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((0 <= i_3_0) and
    ((i_3_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
     ((0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))))) ->
  forall intM_intP0:(Object,
  int) memory.
  ("JC_42":
  (("JC_40": Swap(t_0, i_3_0, mi0, intM_intP0, intM_intP)) and
   ("JC_41": not_assigns(Object_alloc_table, intM_intP, intM_intP0,
   pset_union(pset_range(pset_singleton(t_0), mi0, mi0),
   pset_range(pset_singleton(t_0), i_3_0, i_3_0)))))) ->
  forall i_3_1:int.
  (i_3_1 = (i_3_0 + 1)) ->
  ("JC_75": (0 <= i_3_1))

========== file tests/java/why/Sort_po16.why ==========
goal Sort_min_sort_ensures_permutation_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  ("JC_93": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP, intM_intP))

========== file tests/java/why/Sort_po17.why ==========
goal Sort_min_sort_ensures_permutation_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_93": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP0, intM_intP)) ->
  (("JC_94": (0 <= i_3_0)) and
   ("JC_95": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
   intM_intP0, intM_intP))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_98": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP0, intM_intP)) ->
  (("JC_99":
   ((i_3_0 < j_2_0) and
    ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) and
   ("JC_100": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
   intM_intP0, intM_intP))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_42":
  (("JC_40": Swap(t_0, i_3_0, mi0, intM_intP1, intM_intP0)) and
   ("JC_41": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), mi0, mi0),
   pset_range(pset_singleton(t_0), i_3_0, i_3_0)))))) ->
  forall i_3_1:int.
  (i_3_1 = (i_3_0 + 1)) ->
  ("JC_93": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP1, intM_intP))

========== file tests/java/why/Sort_po18.why ==========
goal Sort_min_sort_ensures_sorted_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  ("JC_82": Sorted(t_0, 0, i_3, intM_intP))

========== file tests/java/why/Sort_po19.why ==========
goal Sort_min_sort_ensures_sorted_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall k1:int.
  forall k2:int.
  ((0 <= k1) and
   ((k1 < i_3) and
    ((i_3 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  ("JC_82": (select(intM_intP, shift(t_0, k1)) <= select(intM_intP,
  shift(t_0, k2))))

========== file tests/java/why/Sort_po2.why ==========
goal Sort_min_sort_ensures_default_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  ("JC_78": (i_3_0 < j_2))

========== file tests/java/why/Sort_po20.why ==========
goal Sort_min_sort_ensures_sorted_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  ("JC_87": (mv = select(intM_intP0, shift(t_0, mi))))

========== file tests/java/why/Sort_po21.why ==========
goal Sort_min_sort_ensures_sorted_po_4:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall k_0:int.
  ((i_3_0 <= k_0) and (k_0 < j_2)) ->
  ("JC_87": (select(intM_intP0, shift(t_0, k_0)) >= mv))

========== file tests/java/why/Sort_po22.why ==========
goal Sort_min_sort_ensures_sorted_po_5:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_87":
  ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
   (forall k_0:int.
     (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
      k_0)) >= mv0))))) ->
  (("JC_88":
   ((i_3_0 < j_2_0) and
    ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) and
   ("JC_89":
   ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
    (forall k_0:int.
      (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
       k_0)) >= mv0)))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP0, shift(t_0, j_2_0))) ->
  (result2 < mv0) ->
  forall mi1:int.
  (mi1 = j_2_0) ->
  forall result3:int.
  (result3 = select(intM_intP0, shift(t_0, j_2_0))) ->
  forall mv1:int.
  (mv1 = result3) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_87": (mv1 = select(intM_intP0, shift(t_0, mi1))))

========== file tests/java/why/Sort_po23.why ==========
goal Sort_min_sort_ensures_sorted_po_6:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_87":
  ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
   (forall k_0:int.
     (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
      k_0)) >= mv0))))) ->
  (("JC_88":
   ((i_3_0 < j_2_0) and
    ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) and
   ("JC_89":
   ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
    (forall k_0:int.
      (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
       k_0)) >= mv0)))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP0, shift(t_0, j_2_0))) ->
  (result2 < mv0) ->
  forall mi1:int.
  (mi1 = j_2_0) ->
  forall result3:int.
  (result3 = select(intM_intP0, shift(t_0, j_2_0))) ->
  forall mv1:int.
  (mv1 = result3) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  forall k_0:int.
  ((i_3_0 <= k_0) and (k_0 < j_2_1)) ->
  ("JC_87": (select(intM_intP0, shift(t_0, k_0)) >= mv1))

========== file tests/java/why/Sort_po24.why ==========
goal Sort_min_sort_ensures_sorted_po_7:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_87":
  ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
   (forall k_0:int.
     (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
      k_0)) >= mv0))))) ->
  (("JC_88":
   ((i_3_0 < j_2_0) and
    ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) and
   ("JC_89":
   ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
    (forall k_0:int.
      (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
       k_0)) >= mv0)))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP0, shift(t_0, j_2_0))) ->
  (result2 >= mv0) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  forall k_0:int.
  ((i_3_0 <= k_0) and (k_0 < j_2_1)) ->
  ("JC_87": (select(intM_intP0, shift(t_0, k_0)) >= mv0))

========== file tests/java/why/Sort_po25.why ==========
goal Sort_min_sort_ensures_sorted_po_8:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_87":
  ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
   (forall k_0:int.
     (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
      k_0)) >= mv0))))) ->
  (("JC_88":
   ((i_3_0 < j_2_0) and
    ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) and
   ("JC_89":
   ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
    (forall k_0:int.
      (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
       k_0)) >= mv0)))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_42":
  (("JC_40": Swap(t_0, i_3_0, mi0, intM_intP1, intM_intP0)) and
   ("JC_41": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), mi0, mi0),
   pset_range(pset_singleton(t_0), i_3_0, i_3_0)))))) ->
  forall i_3_1:int.
  (i_3_1 = (i_3_0 + 1)) ->
  ("JC_82": Sorted(t_0, 0, i_3_1, intM_intP1))

========== file tests/java/why/Sort_po26.why ==========
goal Sort_min_sort_ensures_sorted_po_9:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_87":
  ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
   (forall k_0:int.
     (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
      k_0)) >= mv0))))) ->
  (("JC_88":
   ((i_3_0 < j_2_0) and
    ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) and
   ("JC_89":
   ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
    (forall k_0:int.
      (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
       k_0)) >= mv0)))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_42":
  (("JC_40": Swap(t_0, i_3_0, mi0, intM_intP1, intM_intP0)) and
   ("JC_41": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), mi0, mi0),
   pset_range(pset_singleton(t_0), i_3_0, i_3_0)))))) ->
  forall i_3_1:int.
  (i_3_1 = (i_3_0 + 1)) ->
  forall k1:int.
  forall k2:int.
  ((0 <= k1) and
   ((k1 < i_3_1) and
    ((i_3_1 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  ("JC_82": (select(intM_intP1, shift(t_0, k1)) <= select(intM_intP1,
  shift(t_0, k2))))

========== file tests/java/why/Sort_po27.why ==========
goal Sort_min_sort_ensures_sorted_po_10:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 >= (result - 1)) ->
  ("JC_59": Sorted(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP0))

========== file tests/java/why/Sort_po28.why ==========
goal Sort_min_sort_safety_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  ("JC_64": true) ->
  ("JC_63": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  (offset_min(Object_alloc_table, t_0) <= i_3_0)

========== file tests/java/why/Sort_po29.why ==========
goal Sort_min_sort_safety_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  ("JC_64": true) ->
  ("JC_63": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  (i_3_0 <= offset_max(Object_alloc_table, t_0))

========== file tests/java/why/Sort_po3.why ==========
goal Sort_min_sort_ensures_default_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  ("JC_78": (i_3_0 <= mi))

========== file tests/java/why/Sort_po30.why ==========
goal Sort_min_sort_safety_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_64": true) ->
  ("JC_63": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  ((offset_min(Object_alloc_table, t_0) <= i_3_0) and
   (i_3_0 <= offset_max(Object_alloc_table, t_0))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_69": true) ->
  ("JC_68":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  (offset_min(Object_alloc_table, t_0) <= j_2_0)

========== file tests/java/why/Sort_po31.why ==========
goal Sort_min_sort_safety_po_4:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_64": true) ->
  ("JC_63": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  ((offset_min(Object_alloc_table, t_0) <= i_3_0) and
   (i_3_0 <= offset_max(Object_alloc_table, t_0))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_69": true) ->
  ("JC_68":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  (j_2_0 <= offset_max(Object_alloc_table, t_0))

========== file tests/java/why/Sort_po32.why ==========
goal Sort_swap_ensures_default_po_1:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int.
  forall j_1:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_Sort(this_2, 0, 0, Object_alloc_table) and
    ("JC_35":
    (Non_null_intM(t, Object_alloc_table) and
     ((0 <= i_2) and
      ((i_2 < (offset_max(Object_alloc_table, t) + 1)) and
       ((0 <= j_1) and (j_1 < (offset_max(Object_alloc_table, t) + 1))))))))) ->
  forall result:int.
  (result = select(intM_intP, shift(t, i_2))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t, j_1))) ->
  forall intM_intP0:(Object,
  int) memory.
  (intM_intP0 = store(intM_intP, shift(t, i_2), result0)) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t, j_1), result)) ->
  ("JC_39": ("JC_37": ("JC_37": Swap(t, i_2, j_1, intM_intP1, intM_intP))))

========== file tests/java/why/Sort_po33.why ==========
goal Sort_swap_ensures_default_po_2:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int.
  forall j_1:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_Sort(this_2, 0, 0, Object_alloc_table) and
    ("JC_35":
    (Non_null_intM(t, Object_alloc_table) and
     ((0 <= i_2) and
      ((i_2 < (offset_max(Object_alloc_table, t) + 1)) and
       ((0 <= j_1) and (j_1 < (offset_max(Object_alloc_table, t) + 1))))))))) ->
  forall result:int.
  (result = select(intM_intP, shift(t, i_2))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t, j_1))) ->
  forall intM_intP0:(Object,
  int) memory.
  (intM_intP0 = store(intM_intP, shift(t, i_2), result0)) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t, j_1), result)) ->
  ("JC_39":
  ("JC_38":
  ("JC_38": not_assigns(Object_alloc_table, intM_intP, intM_intP1,
  pset_union(pset_range(pset_singleton(t), j_1, j_1),
  pset_range(pset_singleton(t), i_2, i_2))))))

========== file tests/java/why/Sort_po34.why ==========
goal Sort_swap_safety_po_1:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int.
  forall j_1:int.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_Sort(this_2, 0, 0, Object_alloc_table) and
    ("JC_35":
    (Non_null_intM(t, Object_alloc_table) and
     ((0 <= i_2) and
      ((i_2 < (offset_max(Object_alloc_table, t) + 1)) and
       ((0 <= j_1) and (j_1 < (offset_max(Object_alloc_table, t) + 1))))))))) ->
  (offset_min(Object_alloc_table, t) <= i_2)

========== file tests/java/why/Sort_po35.why ==========
goal Sort_swap_safety_po_2:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int.
  forall j_1:int.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_Sort(this_2, 0, 0, Object_alloc_table) and
    ("JC_35":
    (Non_null_intM(t, Object_alloc_table) and
     ((0 <= i_2) and
      ((i_2 < (offset_max(Object_alloc_table, t) + 1)) and
       ((0 <= j_1) and (j_1 < (offset_max(Object_alloc_table, t) + 1))))))))) ->
  (i_2 <= offset_max(Object_alloc_table, t))

========== file tests/java/why/Sort_po36.why ==========
goal Sort_swap_safety_po_3:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int.
  forall j_1:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_Sort(this_2, 0, 0, Object_alloc_table) and
    ("JC_35":
    (Non_null_intM(t, Object_alloc_table) and
     ((0 <= i_2) and
      ((i_2 < (offset_max(Object_alloc_table, t) + 1)) and
       ((0 <= j_1) and (j_1 < (offset_max(Object_alloc_table, t) + 1))))))))) ->
  ((offset_min(Object_alloc_table, t) <= i_2) and
   (i_2 <= offset_max(Object_alloc_table, t))) ->
  forall result:int.
  (result = select(intM_intP, shift(t, i_2))) ->
  (offset_min(Object_alloc_table, t) <= j_1)

========== file tests/java/why/Sort_po37.why ==========
goal Sort_swap_safety_po_4:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int.
  forall j_1:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_Sort(this_2, 0, 0, Object_alloc_table) and
    ("JC_35":
    (Non_null_intM(t, Object_alloc_table) and
     ((0 <= i_2) and
      ((i_2 < (offset_max(Object_alloc_table, t) + 1)) and
       ((0 <= j_1) and (j_1 < (offset_max(Object_alloc_table, t) + 1))))))))) ->
  ((offset_min(Object_alloc_table, t) <= i_2) and
   (i_2 <= offset_max(Object_alloc_table, t))) ->
  forall result:int.
  (result = select(intM_intP, shift(t, i_2))) ->
  (j_1 <= offset_max(Object_alloc_table, t))

========== file tests/java/why/Sort_po4.why ==========
goal Sort_min_sort_ensures_default_po_4:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  ("JC_78": (mi < (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Sort_po5.why ==========
goal Sort_min_sort_ensures_default_po_5:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, j_2_0))) ->
  (result2 < mv0) ->
  forall mi1:int.
  (mi1 = j_2_0) ->
  forall result3:int.
  (result3 = select(intM_intP, shift(t_0, j_2_0))) ->
  forall mv1:int.
  (mv1 = result3) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_78": (i_3_0 < j_2_1))

========== file tests/java/why/Sort_po6.why ==========
goal Sort_min_sort_ensures_default_po_6:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, j_2_0))) ->
  (result2 < mv0) ->
  forall mi1:int.
  (mi1 = j_2_0) ->
  forall result3:int.
  (result3 = select(intM_intP, shift(t_0, j_2_0))) ->
  forall mv1:int.
  (mv1 = result3) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_78": (i_3_0 <= mi1))

========== file tests/java/why/Sort_po7.why ==========
goal Sort_min_sort_ensures_default_po_7:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, j_2_0))) ->
  (result2 < mv0) ->
  forall mi1:int.
  (mi1 = j_2_0) ->
  forall result3:int.
  (result3 = select(intM_intP, shift(t_0, j_2_0))) ->
  forall mv1:int.
  (mv1 = result3) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_78": (mi1 < (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Sort_po8.why ==========
goal Sort_min_sort_ensures_default_po_8:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, j_2_0))) ->
  (result2 >= mv0) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_78": (i_3_0 < j_2_1))

========== file tests/java/why/Sort_po9.why ==========
goal Sort_min_sort_ensures_default_po_9:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, j_2_0))) ->
  (result2 >= mv0) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_78": (i_3_0 <= mi0))

========== generation of Simplify VC output ==========
why -simplify [...] why/Sort.why
========== file tests/java/simplify/Sort_why.sx ==========

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(DEFPRED (valid a p) (AND (<= (offset_min a p) 0) (>= (offset_max a p) 0)))

(DEFPRED (same_block p q) (EQ (base_block p) (base_block q)))

(BG_PUSH
 ;; Why axiom address_injective
 (FORALL (p q) (IFF (EQ p q) (EQ (address p) (address q)))))

(BG_PUSH
 ;; Why axiom address_null
 (EQ (address null) 0))

(BG_PUSH
 ;; Why axiom address_positive
 (FORALL (p) (<= 0 (address p))))

(BG_PUSH
 ;; Why axiom address_shift_lt
 (FORALL (p i j)
 (IFF (< (address (shift p i)) (address (shift p j))) (< i j))))

(BG_PUSH
 ;; Why axiom address_shift_le
 (FORALL (p i j)
 (IFF (<= (address (shift p i)) (address (shift p j))) (<= i j))))

(BG_PUSH
 ;; Why axiom shift_zero
 (FORALL (p) (EQ (shift p 0) p)))

(BG_PUSH
 ;; Why axiom shift_shift
 (FORALL (p i j) (EQ (shift (shift p i) j) (shift p (+ i j)))))

(BG_PUSH
 ;; Why axiom offset_max_shift
 (FORALL (a p i) (EQ (offset_max a (shift p i)) (- (offset_max a p) i))))

(BG_PUSH
 ;; Why axiom offset_min_shift
 (FORALL (a p i) (EQ (offset_min a (shift p i)) (- (offset_min a p) i))))

(BG_PUSH
 ;; Why axiom neq_shift
 (FORALL (p i j) (IMPLIES (NEQ i j) (NEQ (shift p i) (shift p j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j) (FORALL (p) (NEQ (shift p i) (shift p j))))))

(BG_PUSH
 ;; Why axiom null_not_valid
 (FORALL (a) (NOT (valid a null))))

(BG_PUSH
 ;; Why axiom null_pointer
 (FORALL (a)
 (AND (>= (offset_min a null) 0) (<= (offset_max a null) (- 0 2)))))

(BG_PUSH
 ;; Why axiom eq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (eq_pointer_bool p1 p2) |@true|) (EQ p1 p2))))

(BG_PUSH
 ;; Why axiom neq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (neq_pointer_bool p1 p2) |@true|) (NEQ p1 p2))))

(BG_PUSH
 ;; Why axiom same_block_shift_right
 (FORALL (p q i) (IMPLIES (same_block p q) (same_block p (shift q i))))

 (FORALL (p q)
 (IMPLIES (same_block p q) (FORALL (i) (same_block p (shift q i))))))

(BG_PUSH
 ;; Why axiom same_block_shift_left
 (FORALL (p q i) (IMPLIES (same_block q p) (same_block (shift q i) p)))

 (FORALL (p q)
 (IMPLIES (same_block q p) (FORALL (i) (same_block (shift q i) p)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift
 (FORALL (p q) (IMPLIES (same_block p q) (EQ p (shift q (sub_pointer p q))))))

(BG_PUSH
 ;; Why axiom sub_pointer_self
 (FORALL (p) (EQ (sub_pointer p p) 0)))

(BG_PUSH
 ;; Why axiom sub_pointer_zero
 (FORALL (p q)
 (IMPLIES (same_block p q) (IMPLIES (EQ (sub_pointer p q) 0) (EQ p q)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_left
 (FORALL (p q i) (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_right
 (FORALL (p q i) (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom select_store_eq
 (FORALL (m p1 p2 a)
 (IMPLIES (EQ p1 p2) (EQ (select (|why__store| m p1 a) p2) a)))

 (FORALL (p1 p2)
 (IMPLIES (EQ p1 p2) (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) a)))))

(BG_PUSH
 ;; Why axiom select_store_neq
 (FORALL (m p1 p2 a)
 (IMPLIES (NEQ p1 p2) (EQ (select (|why__store| m p1 a) p2) (select m p2))))

 (FORALL (p1 p2)
 (IMPLIES (NEQ p1 p2)
 (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) (select m p2))))))

(DEFPRED (pset_disjoint ps1 ps2)
  (FORALL (p)
  (NOT (AND (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|)))))

(DEFPRED (pset_included ps1 ps2)
  (FORALL (p)
  (IMPLIES (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|))))

(BG_PUSH
 ;; Why axiom pset_included_self
 (FORALL (ps) (pset_included ps ps)))

(BG_PUSH
 ;; Why axiom pset_included_range
 (FORALL (ps a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (pset_included (pset_range ps a b) (pset_range ps c d))))

 (FORALL (a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (FORALL (ps) (pset_included (pset_range ps a b) (pset_range ps c d))))))

(BG_PUSH
 ;; Why axiom pset_included_range_all
 (FORALL (ps a b c d) (pset_included (pset_range ps a b) (pset_all ps))))

(BG_PUSH
 ;; Why axiom in_pset_empty
 (FORALL (p) (NOT (EQ (in_pset p pset_empty) |@true|))))

(BG_PUSH
 ;; Why axiom in_pset_singleton
 (FORALL (p q) (IFF (EQ (in_pset p (pset_singleton q)) |@true|) (EQ p q))))

(BG_PUSH
 ;; Why axiom in_pset_deref
 (FORALL (p m q)
 (IFF (EQ (in_pset p (pset_deref m q)) |@true|)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (select m r)))))))

(BG_PUSH
 ;; Why axiom in_pset_all
 (FORALL (p q)
 (IFF (EQ (in_pset p (pset_all q)) |@true|)
 (EXISTS (i)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))

(BG_PUSH
 ;; Why axiom in_pset_range
 (FORALL (p q a b)
 (IFF (EQ (in_pset p (pset_range q a b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_left
 (FORALL (p q b)
 (IFF (EQ (in_pset p (pset_range_left q b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_right
 (FORALL (p q a)
 (IFF (EQ (in_pset p (pset_range_right q a)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_union
 (FORALL (p s1 s2)
 (IFF (EQ (in_pset p (pset_union s1 s2)) |@true|)
 (OR (EQ (in_pset p s1) |@true|) (EQ (in_pset p s2) |@true|)))))

(BG_PUSH
 ;; Why axiom valid_pset_empty
 (FORALL (a) (EQ (valid_pset a pset_empty) |@true|)))

(BG_PUSH
 ;; Why axiom valid_pset_singleton
 (FORALL (a p)
 (IFF (EQ (valid_pset a (pset_singleton p)) |@true|) (valid a p))))

(BG_PUSH
 ;; Why axiom valid_pset_deref
 (FORALL (a m q)
 (IFF (EQ (valid_pset a (pset_deref m q)) |@true|)
 (FORALL (r p)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (EQ p (select m r))) (valid a p))))))

(BG_PUSH
 ;; Why axiom valid_pset_range
 (FORALL (a q c d)
 (IFF (EQ (valid_pset a (pset_range q c d)) |@true|)
 (FORALL (i r)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (AND (<= c i) (<= i d)))
 (valid a (shift r i)))))))

(BG_PUSH
 ;; Why axiom valid_pset_union
 (FORALL (a s1 s2)
 (IFF (EQ (valid_pset a (pset_union s1 s2)) |@true|)
 (AND (EQ (valid_pset a s1) |@true|) (EQ (valid_pset a s2) |@true|)))))

(DEFPRED (not_assigns a m1 m2 l)
  (FORALL (p)
  (IMPLIES (AND (valid a p) (NOT (EQ (in_pset p l) |@true|)))
  (EQ (select m2 p) (select m1 p)))))

(BG_PUSH
 ;; Why axiom not_assigns_refl
 (FORALL (a m l) (not_assigns a m m l)))

(BG_PUSH
 ;; Why axiom not_assigns_trans
 (FORALL (a m1 m2 m3 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))

 (FORALL (a m1 m2 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (FORALL (m3) (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))))

(BG_PUSH
 ;; Why axiom full_separated_shift1
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift2
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift3
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift4
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom subtag_bool_def
 (FORALL (t1 t2)
 (IFF (EQ (subtag_bool t1 t2) |@true|) (EQ (subtag t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom subtag_refl
 (FORALL (t) (EQ (subtag t t) |@true|)))

(BG_PUSH
 ;; Why axiom subtag_parent
 (FORALL (t1 t2 t3)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))

 (FORALL (t1 t2)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))))

(DEFPRED (instanceof a p t) (EQ (subtag (typeof a p) t) |@true|))

(BG_PUSH
 ;; Why axiom downcast_instanceof
 (FORALL (a p s) (IMPLIES (instanceof a p s) (EQ (downcast a p s) p))))

(BG_PUSH
 ;; Why axiom bottom_tag_axiom
 (FORALL (t) (EQ (subtag t bottom_tag) |@true|)))

(DEFPRED (root_tag t) (EQ (parenttag t bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom root_subtag
 (FORALL (a b c)
 (IMPLIES (root_tag a)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|)))))))

 (FORALL (a)
 (IMPLIES (root_tag a)
 (FORALL (b)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (FORALL (c)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|))))))))))

(DEFPRED (fully_packed tag_table mutable this)
  (EQ (select mutable this) (typeof tag_table this)))

(BG_PUSH
 ;; Why axiom bw_and_not_null
 (FORALL (a b) (IMPLIES (NEQ (bw_and a b) 0) (AND (NEQ a 0) (NEQ b 0)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsl a b)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_monotone
 (FORALL (a1 a2 b)
 (IMPLIES (AND (<= 0 a1) (AND (<= a1 a2) (<= 0 b)))
 (<= (lsl a1 b) (lsl a2 b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_decreases
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsr a b) a))))

(BG_PUSH
 ;; Why axiom asr_positive_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (asr a b)))))

(BG_PUSH
 ;; Why axiom asr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (asr a b) a))))

(BG_PUSH
 ;; Why axiom asr_lsr_same_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (asr a b) (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsl_of_lsr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsl (lsr a b) b) a))))

(BG_PUSH
 ;; Why axiom lsr_of_lsl_identity_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (lsr (lsl a b) b) a))))

(DEFPRED (alloc_fresh a p n)
  (FORALL (i) (IMPLIES (AND (<= 0 i) (< i n)) (NOT (valid a (shift p i))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_min
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_max
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_not_assigns_empty
 (FORALL (a1 a2 m1 m2 l p n)
 (IMPLIES
 (AND (EQ (alloc_extends a1 a2) |@true|)
 (AND (alloc_fresh a1 p n)
 (AND (not_assigns a2 m1 m2 l)
 (pset_included l (pset_all (pset_singleton p))))))
 (not_assigns a1 m1 m2 pset_empty))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_min
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_max
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom offset_min_bytes_def
 (FORALL (a p s)
 (IMPLIES (< 0 s)
 (AND (<= (offset_min a p) (* s (offset_min_bytes a p s)))
 (< (- (* s (offset_min_bytes a p s)) s) (offset_min a p)))))

 (FORALL (s)
 (IMPLIES (< 0 s)
 (FORALL (a p)
 (AND (<= (offset_min a p) (* s (offset_min_bytes a p s)))
 (< (- (* s (offset_min_bytes a p s)) s) (offset_min a p)))))))

(BG_PUSH
 ;; Why axiom offset_max_bytes_def
 (FORALL (a p s)
 (IMPLIES (< 0 s)
 (AND (<= (- (+ (* s (offset_max_bytes a p s)) s) 1) (offset_max a p))
 (< (offset_max a p) (- (+ (+ (* s (offset_max_bytes a p s)) s) s) 1)))))

 (FORALL (s)
 (IMPLIES (< 0 s)
 (FORALL (a p)
 (AND (<= (- (+ (* s (offset_max_bytes a p s)) s) 1) (offset_max a p))
 (< (offset_max a p) (- (+ (+ (* s (offset_max_bytes a p s)) s) s) 1)))))))

(BG_PUSH
 ;; Why axiom select_store_eq_union
 (FORALL (o1 s1 o2 s2 v1 v2)
 (IMPLIES (AND (EQ o1 o2) (EQ s1 s2))
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2) v2)))

 (FORALL (o1 s1 o2 s2)
 (IMPLIES (AND (EQ o1 o2) (EQ s1 s2))
 (FORALL (v1 v2) (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2) v2)))))

(BG_PUSH
 ;; Why axiom select_store_neq_union
 (FORALL (o1 s1 o2 s2 v1 v2)
 (IMPLIES (OR (<= (+ o2 s2) o1) (<= (+ o1 s2) o2))
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2)
 (extract_bytes v1 o2 s2))))

 (FORALL (o1 o2 s2)
 (IMPLIES (OR (<= (+ o2 s2) o1) (<= (+ o1 s2) o2))
 (FORALL (s1 v1 v2)
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2)
 (extract_bytes v1 o2 s2))))))

(BG_PUSH
 ;; Why axiom concat_replace_bytes_up
 (FORALL (o1 s1 o2 s2 v1 v2 v3)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o1 (+ s1 s2) (concat_bitvector v2 v3)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (s2 v1 v2 v3)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o1 (+ s1 s2) (concat_bitvector v2 v3)))))))

(BG_PUSH
 ;; Why axiom concat_replace_bytes_down
 (FORALL (o1 s1 o2 s2 v1 v2 v3)
 (IMPLIES (EQ (+ o2 s2) o1)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o2 (+ s1 s2) (concat_bitvector v3 v2)))))

 (FORALL (o1 o2 s2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (FORALL (s1 v1 v2 v3)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o2 (+ s1 s2) (concat_bitvector v3 v2)))))))

(BG_PUSH
 ;; Why axiom concat_extract_bytes
 (FORALL (o1 s1 o2 s2 v)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (concat_bitvector (extract_bytes v o1 s1) (extract_bytes v o2 s2))
 (extract_bytes v o1 (+ s1 s2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (s2 v)
 (EQ (concat_bitvector (extract_bytes v o1 s1) (extract_bytes v o2 s2))
 (extract_bytes v o1 (+ s1 s2)))))))

(BG_PUSH
 ;; Why axiom select_store_eq_bytes
 (FORALL (m p1 p2 o1 s1 o2 s2 v)
 (IMPLIES (AND (EQ p1 p2) (AND (EQ o1 o2) (EQ s1 s2)))
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2) v)))

 (FORALL (p1 p2 o1 s1 o2 s2)
 (IMPLIES (AND (EQ p1 p2) (AND (EQ o1 o2) (EQ s1 s2)))
 (FORALL (m v) (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2) v)))))

(BG_PUSH
 ;; Why axiom select_store_neq_bytes
 (FORALL (m p1 p2 o1 s1 o2 s2 v)
 (IMPLIES
 (pset_disjoint
 (pset_range (pset_singleton p1) o1 (+ o1 s1)) (pset_range
                                               (pset_singleton p2) o2 
                                               (+ o2 s2)))
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2)
 (select_bytes m p2 o2 s2))))

 (FORALL (p1 p2 o1 s1 o2 s2)
 (IMPLIES
 (pset_disjoint
 (pset_range (pset_singleton p1) o1 (+ o1 s1)) (pset_range
                                               (pset_singleton p2) o2 
                                               (+ o2 s2)))
 (FORALL (m v)
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2)
 (select_bytes m p2 o2 s2))))))

(BG_PUSH
 ;; Why axiom shift_store_bytes
 (FORALL (m p i o s v)
 (EQ (store_bytes m (shift p i) o s v) (store_bytes m p (+ o i) s v))))

(BG_PUSH
 ;; Why axiom shift_select_bytes
 (FORALL (m p i o s v)
 (EQ (select_bytes m (shift p i) o s) (select_bytes m p (+ o i) s))))

(BG_PUSH
 ;; Why axiom concat_store_bytes_up
 (FORALL (m p o1 s1 o2 s2 v1 v2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o1 (+ s1 s2) (concat_bitvector v1 v2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (m p s2 v1 v2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o1 (+ s1 s2) (concat_bitvector v1 v2)))))))

(BG_PUSH
 ;; Why axiom concat_store_bytes_down
 (FORALL (m p o1 s1 o2 s2 v1 v2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o2 (+ s1 s2) (concat_bitvector v2 v1)))))

 (FORALL (o1 o2 s2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (FORALL (m p s1 v1 v2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o2 (+ s1 s2) (concat_bitvector v2 v1)))))))

(BG_PUSH
 ;; Why axiom concat_select_bytes
 (FORALL (m p o1 s1 o2 s2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (concat_bitvector (select_bytes m p o1 s1) (select_bytes m p o2 s2))
 (select_bytes m p o1 (+ s1 s2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (m p s2)
 (EQ (concat_bitvector (select_bytes m p o1 s1) (select_bytes m p o2 s2))
 (select_bytes m p o1 (+ s1 s2)))))))

(DEFPRED (Non_null_Object x_0 Object_alloc_table)
  (EQ (offset_max Object_alloc_table x_0) 0))

(DEFPRED (Non_null_intM x Object_alloc_table)
  (>= (offset_max Object_alloc_table x) (- 0 1)))

(BG_PUSH
 ;; Why axiom Object_int
 (EQ (int_of_tag Object_tag) 1))

(BG_PUSH
 ;; Why axiom Object_of_bitvector_of_bitvector_of_Object
 (FORALL (x) (EQ (Object_of_bitvector (bitvector_of_Object x)) x)))

(BG_PUSH
 ;; Why axiom Object_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (Object_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom Object_parenttag_bottom
 (EQ (parenttag Object_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom Object_tags
 (FORALL (x Object_tag_table) (instanceof Object_tag_table x Object_tag)))

(BG_PUSH
 ;; Why axiom Permut_refl
 (FORALL (intM_intP_at_L a_2 l_1 h_1)
 (EQ (Permut a_2 l_1 h_1 intM_intP_at_L intM_intP_at_L) |@true|)))

(DEFPRED (Swap a_0 i_0 j intM_intP_at_L2 intM_intP_at_L1)
  (AND
  (EQ (select intM_intP_at_L1 (shift a_0 i_0))
  (select intM_intP_at_L2 (shift a_0 j)))
  (AND
  (EQ (select intM_intP_at_L1 (shift a_0 j))
  (select intM_intP_at_L2 (shift a_0 i_0)))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i_0) (NEQ k j))
  (EQ (select intM_intP_at_L1 (shift a_0 k))
  (select intM_intP_at_L2 (shift a_0 k))))))))

(BG_PUSH
 ;; Why axiom Permut_swap
 (FORALL (intM_intP_at_L2 intM_intP_at_L1 a_5 l_4 h_4 i_1 j_0)
 (IMPLIES
 (AND (<= l_4 i_1)
 (AND (<= i_1 h_4)
 (AND (<= l_4 j_0)
 (AND (<= j_0 h_4) (Swap a_5 i_1 j_0 intM_intP_at_L2 intM_intP_at_L1)))))
 (EQ (Permut a_5 l_4 h_4 intM_intP_at_L2 intM_intP_at_L1) |@true|))))

(BG_PUSH
 ;; Why axiom Permut_sym
 (FORALL (intM_intP_at_L2 intM_intP_at_L1 a_3 l_2 h_2)
 (IMPLIES (EQ (Permut a_3 l_2 h_2 intM_intP_at_L2 intM_intP_at_L1) |@true|)
 (EQ (Permut a_3 l_2 h_2 intM_intP_at_L1 intM_intP_at_L2) |@true|))))

(BG_PUSH
 ;; Why axiom Permut_trans
 (FORALL (intM_intP_at_L3 intM_intP_at_L2 intM_intP_at_L1 a_4 l_3 h_3)
 (IMPLIES
 (AND (EQ (Permut a_4 l_3 h_3 intM_intP_at_L2 intM_intP_at_L1) |@true|)
 (EQ (Permut a_4 l_3 h_3 intM_intP_at_L3 intM_intP_at_L2) |@true|))
 (EQ (Permut a_4 l_3 h_3 intM_intP_at_L3 intM_intP_at_L1) |@true|))))

(BG_PUSH
 ;; Why axiom Sort_parenttag_Object
 (EQ (parenttag Sort_tag Object_tag) |@true|))

(DEFPRED (Sorted a l h intM_intP_at_L)
  (FORALL (i)
  (IMPLIES (AND (<= l i) (< i h))
  (<= (select intM_intP_at_L (shift a i)) (select
                                          intM_intP_at_L (shift a (+ i 1)))))))

(BG_PUSH
 ;; Why axiom String_parenttag_Object
 (EQ (parenttag String_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom Throwable_parenttag_Object
 (EQ (parenttag Throwable_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom bitvector_of_Object_of_Object_of_bitvector
 (FORALL (x) (EQ (bitvector_of_Object (Object_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom bitvector_of_interface_of_interface_of_bitvector
 (FORALL (x) (EQ (bitvector_of_interface (interface_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom intM_parenttag_Object
 (EQ (parenttag intM_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_int
 (EQ (int_of_tag interface_tag) 1))

(BG_PUSH
 ;; Why axiom interface_of_bitvector_of_bitvector_of_interface
 (FORALL (x) (EQ (interface_of_bitvector (bitvector_of_interface x)) x)))

(BG_PUSH
 ;; Why axiom interface_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (interface_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom interface_parenttag_bottom
 (EQ (parenttag interface_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_tags
 (FORALL (x interface_tag_table)
 (instanceof interface_tag_table x interface_tag)))

(DEFPRED (left_valid_struct_Object p a Object_alloc_table)
  (<= (offset_min Object_alloc_table p) a))

(DEFPRED (left_valid_struct_Sort p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_String p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_Throwable p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_intM p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_interface p a interface_alloc_table)
  (<= (offset_min interface_alloc_table p) a))

(BG_PUSH
 ;; Why axiom pointer_addr_of_Object_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (Object_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_interface_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (interface_of_pointer_address p)))))

(DEFPRED (right_valid_struct_Object p b Object_alloc_table)
  (>= (offset_max Object_alloc_table p) b))

(DEFPRED (right_valid_struct_Sort p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_String p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_Throwable p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_intM p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_interface p b interface_alloc_table)
  (>= (offset_max interface_alloc_table p) b))

(DEFPRED (strict_valid_root_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (strict_valid_root_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (strict_valid_struct_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (strict_valid_struct_Sort p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_String p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_Throwable p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_intM p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_bitvector_struct_Object p a b bitvector_alloc_table)
  (AND (EQ (offset_min bitvector_alloc_table p) a)
  (EQ (offset_max bitvector_alloc_table p) b)))

(DEFPRED (valid_bitvector_struct_Sort p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_String p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_Throwable p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_intM p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_interface p a b bitvector_alloc_table)
  (AND (EQ (offset_min bitvector_alloc_table p) a)
  (EQ (offset_max bitvector_alloc_table p) b)))

(DEFPRED (valid_root_Object p a b Object_alloc_table)
  (AND (<= (offset_min Object_alloc_table p) a)
  (>= (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_root_interface p a b interface_alloc_table)
  (AND (<= (offset_min interface_alloc_table p) a)
  (>= (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_struct_Object p a b Object_alloc_table)
  (AND (<= (offset_min Object_alloc_table p) a)
  (>= (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_struct_Sort p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_String p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_Throwable p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_intM p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_interface p a b interface_alloc_table)
  (AND (<= (offset_min interface_alloc_table p) a)
  (>= (offset_max interface_alloc_table p) b)))

;; Sort_min_sort_ensures_default_po_1, File "HOME/tests/java/Sort.java", line 54, characters 20-26
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3) (IMPLIES (EQ i_3 0) (<= 0 i_3)))))))

;; Sort_min_sort_ensures_default_po_2, File "HOME/tests/java/Sort.java", line 65, characters 24-51
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2) (IMPLIES (EQ j_2 (+ i_3_0 1)) (< i_3_0 j_2)))))))))))))))))))))

;; Sort_min_sort_ensures_default_po_3, File "HOME/tests/java/Sort.java", line 65, characters 24-51
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2) (IMPLIES (EQ j_2 (+ i_3_0 1)) (<= i_3_0 mi)))))))))))))))))))))

;; Sort_min_sort_ensures_default_po_4, File "HOME/tests/java/Sort.java", line 65, characters 24-51
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(< mi (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))))

;; Sort_min_sort_ensures_default_po_5, File "HOME/tests/java/Sort.java", line 65, characters 24-51
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< j_2_0 result1)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 j_2_0)))
(IMPLIES (< result2 mv0)
(FORALL (mi1)
(IMPLIES (EQ mi1 j_2_0)
(FORALL (result3)
(IMPLIES (EQ result3 (select intM_intP (shift t_0 j_2_0)))
(FORALL (mv1)
(IMPLIES (EQ mv1 result3)
(FORALL (j_2_1) (IMPLIES (EQ j_2_1 (+ j_2_0 1)) (< i_3_0 j_2_1)))))))))))))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_default_po_6, File "HOME/tests/java/Sort.java", line 65, characters 24-51
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< j_2_0 result1)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 j_2_0)))
(IMPLIES (< result2 mv0)
(FORALL (mi1)
(IMPLIES (EQ mi1 j_2_0)
(FORALL (result3)
(IMPLIES (EQ result3 (select intM_intP (shift t_0 j_2_0)))
(FORALL (mv1)
(IMPLIES (EQ mv1 result3)
(FORALL (j_2_1) (IMPLIES (EQ j_2_1 (+ j_2_0 1)) (<= i_3_0 mi1)))))))))))))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_default_po_7, File "HOME/tests/java/Sort.java", line 65, characters 24-51
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< j_2_0 result1)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 j_2_0)))
(IMPLIES (< result2 mv0)
(FORALL (mi1)
(IMPLIES (EQ mi1 j_2_0)
(FORALL (result3)
(IMPLIES (EQ result3 (select intM_intP (shift t_0 j_2_0)))
(FORALL (mv1)
(IMPLIES (EQ mv1 result3)
(FORALL (j_2_1)
(IMPLIES (EQ j_2_1 (+ j_2_0 1))
(< mi1 (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_default_po_8, File "HOME/tests/java/Sort.java", line 65, characters 24-51
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< j_2_0 result1)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 j_2_0)))
(IMPLIES (>= result2 mv0)
(FORALL (j_2_1) (IMPLIES (EQ j_2_1 (+ j_2_0 1)) (< i_3_0 j_2_1)))))))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_default_po_9, File "HOME/tests/java/Sort.java", line 65, characters 24-51
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< j_2_0 result1)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 j_2_0)))
(IMPLIES (>= result2 mv0)
(FORALL (j_2_1) (IMPLIES (EQ j_2_1 (+ j_2_0 1)) (<= i_3_0 mi0)))))))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_default_po_10, File "HOME/tests/java/Sort.java", line 65, characters 24-51
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< j_2_0 result1)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 j_2_0)))
(IMPLIES (>= result2 mv0)
(FORALL (j_2_1)
(IMPLIES (EQ j_2_1 (+ j_2_0 1))
(< mi0 (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_default_po_11, File "HOME/tests/java/Sort.java", line 77, characters 5-17
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(IMPLIES (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= j_2_0 result1) (Non_null_intM t_0 Object_alloc_table)))))))))))))))))))))))))))

;; Sort_min_sort_ensures_default_po_12, File "HOME/tests/java/Sort.java", line 77, characters 5-17
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(IMPLIES (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= j_2_0 result1)
(< i_3_0 (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_default_po_13, File "HOME/tests/java/Sort.java", line 77, characters 5-17
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(IMPLIES (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= j_2_0 result1) (<= 0 mi0)))))))))))))))))))))))))))

;; Sort_min_sort_ensures_default_po_14, File "HOME/tests/java/Sort.java", line 77, characters 5-17
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(IMPLIES (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= j_2_0 result1)
(< mi0 (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_default_po_15, File "HOME/tests/java/Sort.java", line 54, characters 20-26
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(IMPLIES (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= j_2_0 result1)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 0 i_3_0)
         (AND (< i_3_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 mi0) (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))))
(FORALL (intM_intP0)
(IMPLIES (AND (Swap t_0 i_3_0 mi0 intM_intP0 intM_intP)
         (not_assigns
         Object_alloc_table intM_intP intM_intP0 (pset_union
                                                 (pset_range
                                                 (pset_singleton t_0) mi0 mi0) 
                                                 (pset_range
                                                 (pset_singleton t_0) i_3_0 i_3_0))))
(FORALL (i_3_1) (IMPLIES (EQ i_3_1 (+ i_3_0 1)) (<= 0 i_3_1))))))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_permutation_po_1, File "HOME/tests/java/Sort.java", line 60, characters 22-54
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(EQ (Permut
t_0 0 (- (+ (offset_max Object_alloc_table t_0) 1) 1) intM_intP intM_intP) |@true|))))))))

;; Sort_min_sort_ensures_permutation_po_2, File "HOME/tests/java/Sort.java", line 60, characters 22-54
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (EQ (Permut
         t_0 0 (- (+ (offset_max Object_alloc_table t_0) 1) 1) intM_intP0 intM_intP) |@true|)
(IMPLIES (AND (<= 0 i_3_0)
         (EQ (Permut
         t_0 0 (- (+ (offset_max Object_alloc_table t_0) 1) 1) intM_intP0 intM_intP) |@true|))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(IMPLIES (EQ (Permut
         t_0 0 (- (+ (offset_max Object_alloc_table t_0) 1) 1) intM_intP0 intM_intP) |@true|)
(IMPLIES (AND
         (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
         (EQ (Permut
         t_0 0 (- (+ (offset_max Object_alloc_table t_0) 1) 1) intM_intP0 intM_intP) |@true|))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= j_2_0 result1)
(FORALL (intM_intP1)
(IMPLIES (AND (Swap t_0 i_3_0 mi0 intM_intP1 intM_intP0)
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_0) mi0 mi0) 
                                                  (pset_range
                                                  (pset_singleton t_0) i_3_0 i_3_0))))
(FORALL (i_3_1)
(IMPLIES (EQ i_3_1 (+ i_3_0 1))
(EQ (Permut
t_0 0 (- (+ (offset_max Object_alloc_table t_0) 1) 1) intM_intP1 intM_intP) |@true|))))))))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_sorted_po_1, File "HOME/tests/java/Sort.java", line 56, characters 21-130
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3) (IMPLIES (EQ i_3 0) (Sorted t_0 0 i_3 intM_intP))))))))

;; Sort_min_sort_ensures_sorted_po_2, File "HOME/tests/java/Sort.java", line 56, characters 21-130
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (k1)
(FORALL (k2)
(IMPLIES (AND (<= 0 k1)
         (AND (< k1 i_3)
         (AND (<= i_3 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
(<= (select intM_intP (shift t_0 k1)) (select intM_intP (shift t_0 k2)))))))))))))

;; Sort_min_sort_ensures_sorted_po_3, File "HOME/tests/java/Sort.java", line 67, characters 25-97
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2))))))
(IMPLIES (AND (<= 0 i_3_0)
         (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2)))))))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1)) (EQ mv (select intM_intP0 (shift t_0 mi))))))))))))))))))))))))

;; Sort_min_sort_ensures_sorted_po_4, File "HOME/tests/java/Sort.java", line 67, characters 25-97
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2))))))
(IMPLIES (AND (<= 0 i_3_0)
         (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2)))))))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (k_0)
(IMPLIES (AND (<= i_3_0 k_0) (< k_0 j_2))
(>= (select intM_intP0 (shift t_0 k_0)) mv))))))))))))))))))))))))

;; Sort_min_sort_ensures_sorted_po_5, File "HOME/tests/java/Sort.java", line 67, characters 25-97
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2))))))
(IMPLIES (AND (<= 0 i_3_0)
         (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2)))))))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (EQ mv0 (select intM_intP0 (shift t_0 mi0)))
         (FORALL (k_0)
         (IMPLIES (AND (<= i_3_0 k_0) (< k_0 j_2_0))
         (>= (select intM_intP0 (shift t_0 k_0)) mv0))))
(IMPLIES (AND
         (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
         (AND (EQ mv0 (select intM_intP0 (shift t_0 mi0)))
         (FORALL (k_0)
         (IMPLIES (AND (<= i_3_0 k_0) (< k_0 j_2_0))
         (>= (select intM_intP0 (shift t_0 k_0)) mv0)))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< j_2_0 result1)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP0 (shift t_0 j_2_0)))
(IMPLIES (< result2 mv0)
(FORALL (mi1)
(IMPLIES (EQ mi1 j_2_0)
(FORALL (result3)
(IMPLIES (EQ result3 (select intM_intP0 (shift t_0 j_2_0)))
(FORALL (mv1)
(IMPLIES (EQ mv1 result3)
(FORALL (j_2_1)
(IMPLIES (EQ j_2_1 (+ j_2_0 1)) (EQ mv1 (select intM_intP0 (shift t_0 mi1)))))))))))))))))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_sorted_po_6, File "HOME/tests/java/Sort.java", line 67, characters 25-97
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2))))))
(IMPLIES (AND (<= 0 i_3_0)
         (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2)))))))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (EQ mv0 (select intM_intP0 (shift t_0 mi0)))
         (FORALL (k_0)
         (IMPLIES (AND (<= i_3_0 k_0) (< k_0 j_2_0))
         (>= (select intM_intP0 (shift t_0 k_0)) mv0))))
(IMPLIES (AND
         (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
         (AND (EQ mv0 (select intM_intP0 (shift t_0 mi0)))
         (FORALL (k_0)
         (IMPLIES (AND (<= i_3_0 k_0) (< k_0 j_2_0))
         (>= (select intM_intP0 (shift t_0 k_0)) mv0)))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< j_2_0 result1)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP0 (shift t_0 j_2_0)))
(IMPLIES (< result2 mv0)
(FORALL (mi1)
(IMPLIES (EQ mi1 j_2_0)
(FORALL (result3)
(IMPLIES (EQ result3 (select intM_intP0 (shift t_0 j_2_0)))
(FORALL (mv1)
(IMPLIES (EQ mv1 result3)
(FORALL (j_2_1)
(IMPLIES (EQ j_2_1 (+ j_2_0 1))
(FORALL (k_0)
(IMPLIES (AND (<= i_3_0 k_0) (< k_0 j_2_1))
(>= (select intM_intP0 (shift t_0 k_0)) mv1)))))))))))))))))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_sorted_po_7, File "HOME/tests/java/Sort.java", line 67, characters 25-97
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2))))))
(IMPLIES (AND (<= 0 i_3_0)
         (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2)))))))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (EQ mv0 (select intM_intP0 (shift t_0 mi0)))
         (FORALL (k_0)
         (IMPLIES (AND (<= i_3_0 k_0) (< k_0 j_2_0))
         (>= (select intM_intP0 (shift t_0 k_0)) mv0))))
(IMPLIES (AND
         (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
         (AND (EQ mv0 (select intM_intP0 (shift t_0 mi0)))
         (FORALL (k_0)
         (IMPLIES (AND (<= i_3_0 k_0) (< k_0 j_2_0))
         (>= (select intM_intP0 (shift t_0 k_0)) mv0)))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< j_2_0 result1)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP0 (shift t_0 j_2_0)))
(IMPLIES (>= result2 mv0)
(FORALL (j_2_1)
(IMPLIES (EQ j_2_1 (+ j_2_0 1))
(FORALL (k_0)
(IMPLIES (AND (<= i_3_0 k_0) (< k_0 j_2_1))
(>= (select intM_intP0 (shift t_0 k_0)) mv0)))))))))))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_sorted_po_8, File "HOME/tests/java/Sort.java", line 56, characters 21-130
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2))))))
(IMPLIES (AND (<= 0 i_3_0)
         (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2)))))))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (EQ mv0 (select intM_intP0 (shift t_0 mi0)))
         (FORALL (k_0)
         (IMPLIES (AND (<= i_3_0 k_0) (< k_0 j_2_0))
         (>= (select intM_intP0 (shift t_0 k_0)) mv0))))
(IMPLIES (AND
         (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
         (AND (EQ mv0 (select intM_intP0 (shift t_0 mi0)))
         (FORALL (k_0)
         (IMPLIES (AND (<= i_3_0 k_0) (< k_0 j_2_0))
         (>= (select intM_intP0 (shift t_0 k_0)) mv0)))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= j_2_0 result1)
(FORALL (intM_intP1)
(IMPLIES (AND (Swap t_0 i_3_0 mi0 intM_intP1 intM_intP0)
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_0) mi0 mi0) 
                                                  (pset_range
                                                  (pset_singleton t_0) i_3_0 i_3_0))))
(FORALL (i_3_1)
(IMPLIES (EQ i_3_1 (+ i_3_0 1)) (Sorted t_0 0 i_3_1 intM_intP1))))))))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_sorted_po_9, File "HOME/tests/java/Sort.java", line 56, characters 21-130
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2))))))
(IMPLIES (AND (<= 0 i_3_0)
         (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2)))))))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (EQ mv0 (select intM_intP0 (shift t_0 mi0)))
         (FORALL (k_0)
         (IMPLIES (AND (<= i_3_0 k_0) (< k_0 j_2_0))
         (>= (select intM_intP0 (shift t_0 k_0)) mv0))))
(IMPLIES (AND
         (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
         (AND (EQ mv0 (select intM_intP0 (shift t_0 mi0)))
         (FORALL (k_0)
         (IMPLIES (AND (<= i_3_0 k_0) (< k_0 j_2_0))
         (>= (select intM_intP0 (shift t_0 k_0)) mv0)))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= j_2_0 result1)
(FORALL (intM_intP1)
(IMPLIES (AND (Swap t_0 i_3_0 mi0 intM_intP1 intM_intP0)
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_0) mi0 mi0) 
                                                  (pset_range
                                                  (pset_singleton t_0) i_3_0 i_3_0))))
(FORALL (i_3_1)
(IMPLIES (EQ i_3_1 (+ i_3_0 1))
(FORALL (k1)
(FORALL (k2)
(IMPLIES (AND (<= 0 k1)
         (AND (< k1 i_3_1)
         (AND (<= i_3_1 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
(<= (select intM_intP1 (shift t_0 k1)) (select intM_intP1 (shift t_0 k2)))))))))))))))))))))))))))))))))))))))

;; Sort_min_sort_ensures_sorted_po_10, File "HOME/tests/java/Sort.java", line 47, characters 18-40
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2))))))
(IMPLIES (AND (<= 0 i_3_0)
         (AND (Sorted t_0 0 i_3_0 intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 i_3_0)
         (AND (<= i_3_0 k2) (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (select intM_intP0 (shift t_0 k1)) (select
                                                intM_intP0 (shift t_0 k2)))))))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= i_3_0 (- result 1))
(Sorted t_0 0 (- (+ (offset_max Object_alloc_table t_0) 1) 1) intM_intP0))))))))))))))

;; Sort_min_sort_safety_po_1, File "HOME/tests/java/Sort.java", line 64, characters 10-14
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(IMPLIES TRUE
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(<= (offset_min Object_alloc_table t_0) i_3_0)))))))))))))

;; Sort_min_sort_safety_po_2, File "HOME/tests/java/Sort.java", line 64, characters 10-14
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(IMPLIES TRUE
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(<= i_3_0 (offset_max Object_alloc_table t_0))))))))))))))

;; Sort_min_sort_safety_po_3, File "HOME/tests/java/Sort.java", line 73, characters 6-10
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(IMPLIES (AND (<= (offset_min Object_alloc_table t_0) i_3_0)
         (<= i_3_0 (offset_max Object_alloc_table t_0)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(IMPLIES TRUE
(IMPLIES (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< j_2_0 result1) (<= (offset_min Object_alloc_table t_0) j_2_0))))))))))))))))))))))))))))))

;; Sort_min_sort_safety_po_4, File "HOME/tests/java/Sort.java", line 73, characters 6-10
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_Sort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (i_3)
(IMPLIES (EQ i_3 0)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 i_3_0)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3_0 (- result 1))
(IMPLIES (AND (<= (offset_min Object_alloc_table t_0) i_3_0)
         (<= i_3_0 (offset_max Object_alloc_table t_0)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 i_3_0)))
(FORALL (mv)
(IMPLIES (EQ mv result0)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (j_2)
(IMPLIES (EQ j_2 (+ i_3_0 1))
(FORALL (j_2_0)
(FORALL (mi0)
(IMPLIES TRUE
(IMPLIES (AND (< i_3_0 j_2_0)
         (AND (<= i_3_0 mi0)
         (< mi0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (AND (<= result1 constant_too_large_2147483647)
         (AND (>= result1 0)
         (AND (EQ result1 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< j_2_0 result1) (<= j_2_0 (offset_max Object_alloc_table t_0)))))))))))))))))))))))))))))))

;; Sort_swap_ensures_default_po_1, File "HOME/tests/java/Sort.java", line 37, characters 16-37
(FORALL (this_2)
(FORALL (t)
(FORALL (i_2)
(FORALL (j_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (valid_struct_Sort this_2 0 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i_2)
         (AND (< i_2 (+ (offset_max Object_alloc_table t) 1))
         (AND (<= 0 j_1) (< j_1 (+ (offset_max Object_alloc_table t) 1))))))))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t i_2)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t j_1)))
(FORALL (intM_intP0)
(IMPLIES (EQ intM_intP0 (|why__store| intM_intP (shift t i_2) result0))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t j_1) result))
(Swap t i_2 j_1 intM_intP1 intM_intP))))))))))))))))

;; Sort_swap_ensures_default_po_2, File "HOME/tests/java/Sort.java", line 39, characters 9-13
(FORALL (this_2)
(FORALL (t)
(FORALL (i_2)
(FORALL (j_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (valid_struct_Sort this_2 0 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i_2)
         (AND (< i_2 (+ (offset_max Object_alloc_table t) 1))
         (AND (<= 0 j_1) (< j_1 (+ (offset_max Object_alloc_table t) 1))))))))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t i_2)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t j_1)))
(FORALL (intM_intP0)
(IMPLIES (EQ intM_intP0 (|why__store| intM_intP (shift t i_2) result0))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t j_1) result))
(not_assigns
Object_alloc_table intM_intP intM_intP1 (pset_union
                                        (pset_range
                                        (pset_singleton t) j_1 j_1) (pset_range
                                                                    (pset_singleton
                                                                    t) i_2 i_2))))))))))))))))))

;; Sort_swap_safety_po_1, File "HOME/tests/java/Sort.java", line 40, characters 11-15
(FORALL (this_2)
(FORALL (t)
(FORALL (i_2)
(FORALL (j_1)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (valid_struct_Sort this_2 0 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i_2)
         (AND (< i_2 (+ (offset_max Object_alloc_table t) 1))
         (AND (<= 0 j_1) (< j_1 (+ (offset_max Object_alloc_table t) 1))))))))
(<= (offset_min Object_alloc_table t) i_2)))))))

;; Sort_swap_safety_po_2, File "HOME/tests/java/Sort.java", line 40, characters 11-15
(FORALL (this_2)
(FORALL (t)
(FORALL (i_2)
(FORALL (j_1)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (valid_struct_Sort this_2 0 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i_2)
         (AND (< i_2 (+ (offset_max Object_alloc_table t) 1))
         (AND (<= 0 j_1) (< j_1 (+ (offset_max Object_alloc_table t) 1))))))))
(<= i_2 (offset_max Object_alloc_table t))))))))

;; Sort_swap_safety_po_3, File "HOME/tests/java/Sort.java", line 41, characters 8-12
(FORALL (this_2)
(FORALL (t)
(FORALL (i_2)
(FORALL (j_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (valid_struct_Sort this_2 0 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i_2)
         (AND (< i_2 (+ (offset_max Object_alloc_table t) 1))
         (AND (<= 0 j_1) (< j_1 (+ (offset_max Object_alloc_table t) 1))))))))
(IMPLIES (AND (<= (offset_min Object_alloc_table t) i_2)
         (<= i_2 (offset_max Object_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t i_2)))
(<= (offset_min Object_alloc_table t) j_1)))))))))))

;; Sort_swap_safety_po_4, File "HOME/tests/java/Sort.java", line 41, characters 8-12
(FORALL (this_2)
(FORALL (t)
(FORALL (i_2)
(FORALL (j_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (valid_struct_Sort this_2 0 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i_2)
         (AND (< i_2 (+ (offset_max Object_alloc_table t) 1))
         (AND (<= 0 j_1) (< j_1 (+ (offset_max Object_alloc_table t) 1))))))))
(IMPLIES (AND (<= (offset_min Object_alloc_table t) i_2)
         (<= i_2 (offset_max Object_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t i_2)))
(<= j_1 (offset_max Object_alloc_table t))))))))))))

========== running Simplify ==========
Running Simplify on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/Sort_why.sx          : ................?.................... (36/0/1/0/0)
total   :  37
valid   :  36 ( 97%)
invalid :   0 (  0%)
unknown :   1 (  3%)
timeout :   0 (  0%)
failure :   0 (  0%)
========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/Sort.why
========== file tests/java/why/Sort_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic int_max : int, int -> int

logic int_min : int, int -> int

logic real_max : real, real -> real

logic real_min : real, real -> real

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null :  -> 'a1 pointer

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_positive: (forall p:'a1 pointer. (0 <= address(p)))

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

type Object

type interface

predicate Non_null_Object(x_0: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x_0) = 0)

predicate Non_null_intM(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) >= (-1))

logic Object_tag :  -> Object tag_id

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_bitvector : bitvector -> Object pointer

logic bitvector_of_Object : Object pointer -> bitvector

axiom Object_of_bitvector_of_bitvector_of_Object:
  (forall x:Object pointer.
    (Object_of_bitvector(bitvector_of_Object(x)) = x))

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic Permut : Object pointer, int, int, (Object, int) memory, (Object,
int) memory -> prop

axiom Permut_refl:
  (forall intM_intP_at_L:(Object, int) memory.
    (forall a_2:Object pointer.
      (forall l_1:int.
        (forall h_1:int. Permut(a_2, l_1, h_1, intM_intP_at_L,
          intM_intP_at_L)))))

predicate Swap(a_0: Object pointer, i_0: int, j: int,
  intM_intP_at_L2: (Object, int) memory, intM_intP_at_L1: (Object,
  int) memory) =
  ((select(intM_intP_at_L1, shift(a_0, i_0)) = select(intM_intP_at_L2,
   shift(a_0, j))) and
   ((select(intM_intP_at_L1, shift(a_0, j)) = select(intM_intP_at_L2,
    shift(a_0, i_0))) and
    (forall k:int.
      (((k <> i_0) and (k <> j)) -> (select(intM_intP_at_L1, shift(a_0,
       k)) = select(intM_intP_at_L2, shift(a_0, k)))))))

axiom Permut_swap:
  (forall intM_intP_at_L2:(Object, int) memory.
    (forall intM_intP_at_L1:(Object, int) memory.
      (forall a_5:Object pointer.
        (forall l_4:int.
          (forall h_4:int.
            (forall i_1:int.
              (forall j_0:int.
                (((l_4 <= i_1) and
                  ((i_1 <= h_4) and
                   ((l_4 <= j_0) and
                    ((j_0 <= h_4) and Swap(a_5, i_1, j_0, intM_intP_at_L2,
                     intM_intP_at_L1))))) ->
                 Permut(a_5, l_4, h_4, intM_intP_at_L2, intM_intP_at_L1)))))))))

axiom Permut_sym:
  (forall intM_intP_at_L2:(Object, int) memory.
    (forall intM_intP_at_L1:(Object, int) memory.
      (forall a_3:Object pointer.
        (forall l_2:int.
          (forall h_2:int.
            (Permut(a_3, l_2, h_2, intM_intP_at_L2, intM_intP_at_L1) ->
             Permut(a_3, l_2, h_2, intM_intP_at_L1, intM_intP_at_L2)))))))

axiom Permut_trans:
  (forall intM_intP_at_L3:(Object, int) memory.
    (forall intM_intP_at_L2:(Object, int) memory.
      (forall intM_intP_at_L1:(Object, int) memory.
        (forall a_4:Object pointer.
          (forall l_3:int.
            (forall h_3:int.
              ((Permut(a_4, l_3, h_3, intM_intP_at_L2, intM_intP_at_L1) and
                Permut(a_4, l_3, h_3, intM_intP_at_L3, intM_intP_at_L2)) ->
               Permut(a_4, l_3, h_3, intM_intP_at_L3, intM_intP_at_L1))))))))

logic Sort_tag :  -> Object tag_id

axiom Sort_parenttag_Object: parenttag(Sort_tag, Object_tag)

predicate Sorted(a: Object pointer, l: int, h: int, intM_intP_at_L: (Object,
  int) memory) =
  (forall i:int.
    (((l <= i) and (i < h)) -> (select(intM_intP_at_L, shift(a,
     i)) <= select(intM_intP_at_L, shift(a, (i + 1))))))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

axiom bitvector_of_Object_of_Object_of_bitvector:
  (forall x:bitvector. (bitvector_of_Object(Object_of_bitvector(x)) = x))

logic bitvector_of_interface : interface pointer -> bitvector

logic interface_of_bitvector : bitvector -> interface pointer

axiom bitvector_of_interface_of_interface_of_bitvector:
  (forall x:bitvector.
    (bitvector_of_interface(interface_of_bitvector(x)) = x))

logic intM_tag :  -> Object tag_id

axiom intM_parenttag_Object: parenttag(intM_tag, Object_tag)

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_of_bitvector_of_bitvector_of_interface:
  (forall x:interface pointer.
    (interface_of_bitvector(bitvector_of_interface(x)) = x))

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate left_valid_struct_Object(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = (offset_min(Object_alloc_table,
  p) <= a)

predicate left_valid_struct_Sort(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_String(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_Throwable(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_intM(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_interface(p: interface pointer, a: int,
  interface_alloc_table: interface alloc_table) =
  (offset_min(interface_alloc_table, p) <= a)

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  p) >= b)

predicate right_valid_struct_Sort(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_String(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_Throwable(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_intM(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_interface(p: interface pointer, b: int,
  interface_alloc_table: interface alloc_table) =
  (offset_max(interface_alloc_table, p) >= b)

predicate strict_valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Sort(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Sort(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_intM(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Sort(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

goal Sort_min_sort_ensures_default_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  ("JC_75": (0 <= i_3))

goal Sort_min_sort_ensures_default_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  ("JC_78": (i_3_0 < j_2))

goal Sort_min_sort_ensures_default_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  ("JC_78": (i_3_0 <= mi))

goal Sort_min_sort_ensures_default_po_4:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  ("JC_78": (mi < (offset_max(Object_alloc_table, t_0) + 1)))

goal Sort_min_sort_ensures_default_po_5:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, j_2_0))) ->
  (result2 < mv0) ->
  forall mi1:int.
  (mi1 = j_2_0) ->
  forall result3:int.
  (result3 = select(intM_intP, shift(t_0, j_2_0))) ->
  forall mv1:int.
  (mv1 = result3) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_78": (i_3_0 < j_2_1))

goal Sort_min_sort_ensures_default_po_6:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, j_2_0))) ->
  (result2 < mv0) ->
  forall mi1:int.
  (mi1 = j_2_0) ->
  forall result3:int.
  (result3 = select(intM_intP, shift(t_0, j_2_0))) ->
  forall mv1:int.
  (mv1 = result3) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_78": (i_3_0 <= mi1))

goal Sort_min_sort_ensures_default_po_7:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, j_2_0))) ->
  (result2 < mv0) ->
  forall mi1:int.
  (mi1 = j_2_0) ->
  forall result3:int.
  (result3 = select(intM_intP, shift(t_0, j_2_0))) ->
  forall mv1:int.
  (mv1 = result3) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_78": (mi1 < (offset_max(Object_alloc_table, t_0) + 1)))

goal Sort_min_sort_ensures_default_po_8:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, j_2_0))) ->
  (result2 >= mv0) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_78": (i_3_0 < j_2_1))

goal Sort_min_sort_ensures_default_po_9:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, j_2_0))) ->
  (result2 >= mv0) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_78": (i_3_0 <= mi0))

goal Sort_min_sort_ensures_default_po_10:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, j_2_0))) ->
  (result2 >= mv0) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_78": (mi0 < (offset_max(Object_alloc_table, t_0) + 1)))

goal Sort_min_sort_ensures_default_po_11:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  ("JC_33": Non_null_intM(t_0, Object_alloc_table))

goal Sort_min_sort_ensures_default_po_12:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  ("JC_33": (i_3_0 < (offset_max(Object_alloc_table, t_0) + 1)))

goal Sort_min_sort_ensures_default_po_13:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  ("JC_33": (0 <= mi0))

goal Sort_min_sort_ensures_default_po_14:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  ("JC_33": (mi0 < (offset_max(Object_alloc_table, t_0) + 1)))

goal Sort_min_sort_ensures_default_po_15:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_75": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_78":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  ("JC_33":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((0 <= i_3_0) and
    ((i_3_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
     ((0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))))) ->
  forall intM_intP0:(Object,
  int) memory.
  ("JC_42":
  (("JC_40": Swap(t_0, i_3_0, mi0, intM_intP0, intM_intP)) and
   ("JC_41": not_assigns(Object_alloc_table, intM_intP, intM_intP0,
   pset_union(pset_range(pset_singleton(t_0), mi0, mi0),
   pset_range(pset_singleton(t_0), i_3_0, i_3_0)))))) ->
  forall i_3_1:int.
  (i_3_1 = (i_3_0 + 1)) ->
  ("JC_75": (0 <= i_3_1))

goal Sort_min_sort_ensures_permutation_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  ("JC_93": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP, intM_intP))

goal Sort_min_sort_ensures_permutation_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_93": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP0, intM_intP)) ->
  (("JC_94": (0 <= i_3_0)) and
   ("JC_95": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
   intM_intP0, intM_intP))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_98": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP0, intM_intP)) ->
  (("JC_99":
   ((i_3_0 < j_2_0) and
    ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) and
   ("JC_100": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
   intM_intP0, intM_intP))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_42":
  (("JC_40": Swap(t_0, i_3_0, mi0, intM_intP1, intM_intP0)) and
   ("JC_41": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), mi0, mi0),
   pset_range(pset_singleton(t_0), i_3_0, i_3_0)))))) ->
  forall i_3_1:int.
  (i_3_1 = (i_3_0 + 1)) ->
  ("JC_93": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP1, intM_intP))

goal Sort_min_sort_ensures_sorted_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  ("JC_82": Sorted(t_0, 0, i_3, intM_intP))

goal Sort_min_sort_ensures_sorted_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall k1:int.
  forall k2:int.
  ((0 <= k1) and
   ((k1 < i_3) and
    ((i_3 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  ("JC_82": (select(intM_intP, shift(t_0, k1)) <= select(intM_intP,
  shift(t_0, k2))))

goal Sort_min_sort_ensures_sorted_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  ("JC_87": (mv = select(intM_intP0, shift(t_0, mi))))

goal Sort_min_sort_ensures_sorted_po_4:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall k_0:int.
  ((i_3_0 <= k_0) and (k_0 < j_2)) ->
  ("JC_87": (select(intM_intP0, shift(t_0, k_0)) >= mv))

goal Sort_min_sort_ensures_sorted_po_5:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_87":
  ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
   (forall k_0:int.
     (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
      k_0)) >= mv0))))) ->
  (("JC_88":
   ((i_3_0 < j_2_0) and
    ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) and
   ("JC_89":
   ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
    (forall k_0:int.
      (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
       k_0)) >= mv0)))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP0, shift(t_0, j_2_0))) ->
  (result2 < mv0) ->
  forall mi1:int.
  (mi1 = j_2_0) ->
  forall result3:int.
  (result3 = select(intM_intP0, shift(t_0, j_2_0))) ->
  forall mv1:int.
  (mv1 = result3) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  ("JC_87": (mv1 = select(intM_intP0, shift(t_0, mi1))))

goal Sort_min_sort_ensures_sorted_po_6:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_87":
  ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
   (forall k_0:int.
     (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
      k_0)) >= mv0))))) ->
  (("JC_88":
   ((i_3_0 < j_2_0) and
    ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) and
   ("JC_89":
   ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
    (forall k_0:int.
      (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
       k_0)) >= mv0)))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP0, shift(t_0, j_2_0))) ->
  (result2 < mv0) ->
  forall mi1:int.
  (mi1 = j_2_0) ->
  forall result3:int.
  (result3 = select(intM_intP0, shift(t_0, j_2_0))) ->
  forall mv1:int.
  (mv1 = result3) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  forall k_0:int.
  ((i_3_0 <= k_0) and (k_0 < j_2_1)) ->
  ("JC_87": (select(intM_intP0, shift(t_0, k_0)) >= mv1))

goal Sort_min_sort_ensures_sorted_po_7:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_87":
  ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
   (forall k_0:int.
     (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
      k_0)) >= mv0))))) ->
  (("JC_88":
   ((i_3_0 < j_2_0) and
    ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) and
   ("JC_89":
   ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
    (forall k_0:int.
      (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
       k_0)) >= mv0)))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  forall result2:int.
  (result2 = select(intM_intP0, shift(t_0, j_2_0))) ->
  (result2 >= mv0) ->
  forall j_2_1:int.
  (j_2_1 = (j_2_0 + 1)) ->
  forall k_0:int.
  ((i_3_0 <= k_0) and (k_0 < j_2_1)) ->
  ("JC_87": (select(intM_intP0, shift(t_0, k_0)) >= mv0))

goal Sort_min_sort_ensures_sorted_po_8:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_87":
  ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
   (forall k_0:int.
     (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
      k_0)) >= mv0))))) ->
  (("JC_88":
   ((i_3_0 < j_2_0) and
    ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) and
   ("JC_89":
   ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
    (forall k_0:int.
      (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
       k_0)) >= mv0)))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_42":
  (("JC_40": Swap(t_0, i_3_0, mi0, intM_intP1, intM_intP0)) and
   ("JC_41": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), mi0, mi0),
   pset_range(pset_singleton(t_0), i_3_0, i_3_0)))))) ->
  forall i_3_1:int.
  (i_3_1 = (i_3_0 + 1)) ->
  ("JC_82": Sorted(t_0, 0, i_3_1, intM_intP1))

goal Sort_min_sort_ensures_sorted_po_9:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  forall mv0:int.
  ("JC_87":
  ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
   (forall k_0:int.
     (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
      k_0)) >= mv0))))) ->
  (("JC_88":
   ((i_3_0 < j_2_0) and
    ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) and
   ("JC_89":
   ((mv0 = select(intM_intP0, shift(t_0, mi0))) and
    (forall k_0:int.
      (((i_3_0 <= k_0) and (k_0 < j_2_0)) -> (select(intM_intP0, shift(t_0,
       k_0)) >= mv0)))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 >= result1) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_42":
  (("JC_40": Swap(t_0, i_3_0, mi0, intM_intP1, intM_intP0)) and
   ("JC_41": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), mi0, mi0),
   pset_range(pset_singleton(t_0), i_3_0, i_3_0)))))) ->
  forall i_3_1:int.
  (i_3_1 = (i_3_0 + 1)) ->
  forall k1:int.
  forall k2:int.
  ((0 <= k1) and
   ((k1 < i_3_1) and
    ((i_3_1 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  ("JC_82": (select(intM_intP1, shift(t_0, k1)) <= select(intM_intP1,
  shift(t_0, k2))))

goal Sort_min_sort_ensures_sorted_po_10:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP0:(Object,
  int) memory.
  ("JC_82":
  (Sorted(t_0, 0, i_3_0, intM_intP0) and
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < i_3_0) and
          ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
        k2)))))))) ->
  (("JC_83": (0 <= i_3_0)) and
   ("JC_84":
   (Sorted(t_0, 0, i_3_0, intM_intP0) and
    (forall k1:int.
      (forall k2:int.
        (((0 <= k1) and
          ((k1 < i_3_0) and
           ((i_3_0 <= k2) and (k2 < (offset_max(Object_alloc_table,
            t_0) + 1))))) ->
         (select(intM_intP0, shift(t_0, k1)) <= select(intM_intP0, shift(t_0,
         k2))))))))) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 >= (result - 1)) ->
  ("JC_59": Sorted(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP0))

goal Sort_min_sort_safety_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  ("JC_64": true) ->
  ("JC_63": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  (offset_min(Object_alloc_table, t_0) <= i_3_0)

goal Sort_min_sort_safety_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  ("JC_64": true) ->
  ("JC_63": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  (i_3_0 <= offset_max(Object_alloc_table, t_0))

goal Sort_min_sort_safety_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_64": true) ->
  ("JC_63": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  ((offset_min(Object_alloc_table, t_0) <= i_3_0) and
   (i_3_0 <= offset_max(Object_alloc_table, t_0))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_69": true) ->
  ("JC_68":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  (offset_min(Object_alloc_table, t_0) <= j_2_0)

goal Sort_min_sort_safety_po_4:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_Sort(this_0, 0, 0, Object_alloc_table) and
    ("JC_53": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall i_3:int.
  (i_3 = 0) ->
  forall i_3_0:int.
  forall intM_intP:(Object,
  int) memory.
  ("JC_64": true) ->
  ("JC_63": (0 <= i_3_0)) ->
  forall result:int.
  ("JC_21":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_3_0 < (result - 1)) ->
  ((offset_min(Object_alloc_table, t_0) <= i_3_0) and
   (i_3_0 <= offset_max(Object_alloc_table, t_0))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, i_3_0))) ->
  forall mv:int.
  (mv = result0) ->
  forall mi:int.
  (mi = i_3_0) ->
  forall j_2:int.
  (j_2 = (i_3_0 + 1)) ->
  forall j_2_0:int.
  forall mi0:int.
  ("JC_69": true) ->
  ("JC_68":
  ((i_3_0 < j_2_0) and
   ((i_3_0 <= mi0) and (mi0 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int.
  ("JC_21":
  ((result1 <= 2147483647) and
   ((result1 >= 0) and
    ((result1 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (j_2_0 < result1) ->
  (j_2_0 <= offset_max(Object_alloc_table, t_0))

goal Sort_swap_ensures_default_po_1:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int.
  forall j_1:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_Sort(this_2, 0, 0, Object_alloc_table) and
    ("JC_35":
    (Non_null_intM(t, Object_alloc_table) and
     ((0 <= i_2) and
      ((i_2 < (offset_max(Object_alloc_table, t) + 1)) and
       ((0 <= j_1) and (j_1 < (offset_max(Object_alloc_table, t) + 1))))))))) ->
  forall result:int.
  (result = select(intM_intP, shift(t, i_2))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t, j_1))) ->
  forall intM_intP0:(Object,
  int) memory.
  (intM_intP0 = store(intM_intP, shift(t, i_2), result0)) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t, j_1), result)) ->
  ("JC_39": ("JC_37": ("JC_37": Swap(t, i_2, j_1, intM_intP1, intM_intP))))

goal Sort_swap_ensures_default_po_2:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int.
  forall j_1:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_Sort(this_2, 0, 0, Object_alloc_table) and
    ("JC_35":
    (Non_null_intM(t, Object_alloc_table) and
     ((0 <= i_2) and
      ((i_2 < (offset_max(Object_alloc_table, t) + 1)) and
       ((0 <= j_1) and (j_1 < (offset_max(Object_alloc_table, t) + 1))))))))) ->
  forall result:int.
  (result = select(intM_intP, shift(t, i_2))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t, j_1))) ->
  forall intM_intP0:(Object,
  int) memory.
  (intM_intP0 = store(intM_intP, shift(t, i_2), result0)) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t, j_1), result)) ->
  ("JC_39":
  ("JC_38":
  ("JC_38": not_assigns(Object_alloc_table, intM_intP, intM_intP1,
  pset_union(pset_range(pset_singleton(t), j_1, j_1),
  pset_range(pset_singleton(t), i_2, i_2))))))

goal Sort_swap_safety_po_1:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int.
  forall j_1:int.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_Sort(this_2, 0, 0, Object_alloc_table) and
    ("JC_35":
    (Non_null_intM(t, Object_alloc_table) and
     ((0 <= i_2) and
      ((i_2 < (offset_max(Object_alloc_table, t) + 1)) and
       ((0 <= j_1) and (j_1 < (offset_max(Object_alloc_table, t) + 1))))))))) ->
  (offset_min(Object_alloc_table, t) <= i_2)

goal Sort_swap_safety_po_2:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int.
  forall j_1:int.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_Sort(this_2, 0, 0, Object_alloc_table) and
    ("JC_35":
    (Non_null_intM(t, Object_alloc_table) and
     ((0 <= i_2) and
      ((i_2 < (offset_max(Object_alloc_table, t) + 1)) and
       ((0 <= j_1) and (j_1 < (offset_max(Object_alloc_table, t) + 1))))))))) ->
  (i_2 <= offset_max(Object_alloc_table, t))

goal Sort_swap_safety_po_3:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int.
  forall j_1:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_Sort(this_2, 0, 0, Object_alloc_table) and
    ("JC_35":
    (Non_null_intM(t, Object_alloc_table) and
     ((0 <= i_2) and
      ((i_2 < (offset_max(Object_alloc_table, t) + 1)) and
       ((0 <= j_1) and (j_1 < (offset_max(Object_alloc_table, t) + 1))))))))) ->
  ((offset_min(Object_alloc_table, t) <= i_2) and
   (i_2 <= offset_max(Object_alloc_table, t))) ->
  forall result:int.
  (result = select(intM_intP, shift(t, i_2))) ->
  (offset_min(Object_alloc_table, t) <= j_1)

goal Sort_swap_safety_po_4:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int.
  forall j_1:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_Sort(this_2, 0, 0, Object_alloc_table) and
    ("JC_35":
    (Non_null_intM(t, Object_alloc_table) and
     ((0 <= i_2) and
      ((i_2 < (offset_max(Object_alloc_table, t) + 1)) and
       ((0 <= j_1) and (j_1 < (offset_max(Object_alloc_table, t) + 1))))))))) ->
  ((offset_min(Object_alloc_table, t) <= i_2) and
   (i_2 <= offset_max(Object_alloc_table, t))) ->
  forall result:int.
  (result = select(intM_intP, shift(t, i_2))) ->
  (j_1 <= offset_max(Object_alloc_table, t))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/Sort_why.why              : .........................#......#.... (35/0/0/2/0)
total   :  37
valid   :  35 ( 95%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   2 (  5%)
failure :   0 (  0%)
