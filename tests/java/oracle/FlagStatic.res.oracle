========== file tests/java/FlagStatic.java ==========
/**************************************************************************/
/*                                                                        */
/*  The Why platform for program certification                            */
/*  Copyright (C) 2002-2008                                               */
/*    Romain BARDOU                                                       */
/*    Jean-François COUCHOT                                               */
/*    Mehdi DOGGUY                                                        */
/*    Jean-Christophe FILLIÂTRE                                           */
/*    Thierry HUBERT                                                      */
/*    Claude MARCHÉ                                                       */
/*    Yannick MOY                                                         */
/*    Christine PAULIN                                                    */
/*    Yann RÉGIS-GIANAS                                                   */
/*    Nicolas ROUSSET                                                     */
/*    Xavier URBAIN                                                       */
/*                                                                        */
/*  This software is free software; you can redistribute it and/or        */
/*  modify it under the terms of the GNU Library General Public           */
/*  License version 2, with the special exception on linking              */
/*  described in file LICENSE.                                            */
/*                                                                        */
/*  This software is distributed in the hope that it will be useful,      */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  */
/*                                                                        */
/**************************************************************************/

/* Dijkstra's dutch flag */

//@+ CheckArithOverflow = no

/*@ predicate is_color(integer c) =
  @   c == FlagStatic.BLUE || c == FlagStatic.WHITE || c == FlagStatic.RED ;
  @*/

/*@ predicate is_color_array{L}(int t[]) =
  @   t != null && 
  @   \forall integer i; 0 <= i < t.length ==> is_color(t[i]) ;
  @*/

/*@ predicate is_monochrome{L}(int t[],integer i, integer j, int c) =
  @   \forall integer k; i <= k < j ==> t[k] == c ;
  @*/


class FlagStatic {
    
    public static final int BLUE = 1, WHITE = 2, RED = 3;
    
    /*@ requires t != null && 0 <= i <= j <= t.length ;
      @ behavior decides_monochromatic:
      @   ensures \result <==> is_monochrome(t,i,j,c);
      @*/
    public static boolean isMonochrome(int t[], int i, int j, int c) {
    	/*@ loop_invariant i <= k && 
	  @   (\forall integer l; i <= l < k ==> t[l]==c);
    	  @ loop_variant j - k;
	  @*/
	for (int k = i; k < j; k++) if (t[k] != c) return false;
	return true;
    }

    /*@ requires 0 <= i < t.length && 0 <= j < t.length;
      @ behavior i_j_swapped:
      @   assigns t[i],t[j];
      @   ensures t[i] == \old(t[j]) && t[j] == \old(t[i]);
      @*/
    private static void swap(int t[], int i, int j) {
	int z = t[i];
	t[i] = t[j];
	t[j] = z;
    }

    /*@ requires
      @   is_color_array(t); 
      @ behavior sorts:
      @   ensures 
      @     (\exists integer b r;
      @        is_monochrome(t,0,b,BLUE) &&
      @        is_monochrome(t,b,r,WHITE) &&
      @        is_monochrome(t,r,t.length,RED));
      @*/
    public static void flag(int t[]) {
	int b = 0;
	int i = 0;
	int r = t.length;
	/*@ loop_invariant
	  @   is_color_array(t) &&
	  @   0 <= b <= i <= r <= t.length &&
	  @   is_monochrome(t,0,b,BLUE) &&
	  @   is_monochrome(t,b,i,WHITE) &&
          @   is_monochrome(t,r,t.length,RED);
	  @ loop_variant r - i; 
	  @*/
	while (i < r) {
	    switch (t[i]) {
	    case BLUE:  
		swap(t,b++, i++);
		break;	    
	    case WHITE: 
		i++; 
		break;
	    case RED: 
		swap(t,--r, i);
		break;
	    }
	}
    }
}



/*
Local Variables: 
compile-command: "make FlagStatic"
End: 
*/
========== krakatoa execution ==========
Parsing OK.
Typing OK.
Generating JC function FlagStatic_isMonochrome for method FlagStatic.isMonochrome
Generating JC function FlagStatic_swap for method FlagStatic.swap
Generating JC function FlagStatic_flag for method FlagStatic.flag
Generating JC function cons_FlagStatic for constructor FlagStatic
Generating JC function Object_registerNatives for method Object.registerNatives
Generating JC function Object_hashCode for method Object.hashCode
Generating JC function Object_equals for method Object.equals
Generating JC function Object_clone for method Object.clone
Generating JC function Object_toString for method Object.toString
Generating JC function Object_notify for method Object.notify
Generating JC function Object_notifyAll for method Object.notifyAll
Generating JC function Object_wait_long for method Object.wait
Generating JC function Object_wait_long_int for method Object.wait
Generating JC function Object_wait for method Object.wait
Generating JC function Object_finalize for method Object.finalize
Generating JC function cons_Object for constructor Object
Done.
========== file tests/java/FlagStatic.jc ==========
# InvariantPolicy = Arguments
# TerminationPolicy = always
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = None

predicate Non_null_intM{Here}(intM[0..] x) =
(\offset_max(x) >= -1)

predicate Non_null_Object{Here}(Object[0..] x) =
(\offset_max(x) == 0)

logic integer FlagStatic_BLUE =
1

logic integer FlagStatic_WHITE =
2

logic integer FlagStatic_RED =
3

tag Object = {
}

tag String = Object with {
}

tag Throwable = Object with {
}

tag Exception = Object with {
}

tag FlagStatic = Object with {
}

type Object = [Object]

type interface = [interface]

tag interface = {
}

tag intM = Object with {
  integer intP;
}

boolean non_null_intM(! intM[0..] x)
behavior default:
  assigns \nothing;
  ensures (if \result then (\offset_max(x) >= -1) else (x == null));
;

integer java_array_length_intM(! intM[0..-1] x)
behavior default:
  assigns \nothing;
  ensures ((\result <= 2147483647) &&
            ((\result >= 0) && (\result == (\offset_max(x) + 1))));
;

boolean non_null_Object(! Object[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) == 0) else (x == null));
;

predicate is_color(integer c) =
(((c == FlagStatic_BLUE) || (c == FlagStatic_WHITE)) ||
  (c == FlagStatic_RED))

predicate is_color_array{L}(intM[0..] t_2) =
(Non_null_intM(t_2) &&
  (\forall integer i_1;
    (((0 <= i_1) && (i_1 < (\offset_max(t_2) + 1))) ==>
      is_color((t_2 + i_1).intP))))

predicate is_monochrome{L}(intM[0..] t_3, integer i_2, integer j_1,
                           integer c_1) =
(\forall integer k;
  (((i_2 <= k) && (k < j_1)) ==> ((t_3 + k).intP == c_1)))

exception Throwable of Throwable[0..]

exception Exception of Exception[0..]

boolean FlagStatic_isMonochrome(intM[0..] t, integer i, integer j,
                                integer c_0)
  requires (K_8 : ((K_7 : Non_null_intM(t)) &&
                    (K_6 : ((K_5 : ((K_4 : (0 <= i)) && (K_3 : (i <= j)))) &&
                             (K_2 : (j <= (\offset_max(t) + 1)))))));
behavior decides_monochromatic:
  ensures (K_1 : (\result <==> is_monochrome{Here}(t, i, j, c_0)));
{  
   {  
      {  
         (var integer k_0 = (K_9 : i));
         
         loop 
         behavior default:
           invariant (K_12 : ((K_11 : (i <= k_0)) &&
                               (K_10 : (\forall integer l;
                                         (((i <= l) && (l < k_0)) ==>
                                           ((t + l).intP == c_0))))));
         
         variant (K_13 : (j - k_0));
         for ( ; (K_17 : (k_0 < j)) ; (K_16 : (k_0 ++)))
         {  (if (K_15 : ((K_14 : (t + k_0).intP) != c_0)) then 
            (return false) else ())
         }
      }
   };
   
   (return true)
}

unit FlagStatic_swap(intM[0..] t_0, integer i_0, integer j_0)
  requires (K_27 : ((K_26 : ((K_25 : (0 <= i_0)) &&
                              (K_24 : (i_0 < (\offset_max(t_0) + 1))))) &&
                     (K_23 : ((K_22 : (0 <= j_0)) &&
                               (K_21 : (j_0 < (\offset_max(t_0) + 1)))))));
behavior i_j_swapped:
  assigns (t_0 + [i_0..i_0]).intP,
  (t_0 + [j_0..j_0]).intP;
  ensures (K_20 : ((K_19 : ((t_0 + i_0).intP == \at((t_0 + j_0).intP,Old))) &&
                    (K_18 : ((t_0 + j_0).intP == \at((t_0 + i_0).intP,Old)))));
{  
   {  
      (var integer z = (K_31 : (t_0 + i_0).intP));
      
      {  (K_29 : ((t_0 + i_0).intP = (K_28 : (t_0 + j_0).intP)));
         (K_30 : ((t_0 + j_0).intP = z))
      }
   }
}

unit FlagStatic_flag(intM[0..] t_1)
  requires (K_33 : is_color_array{Here}(t_1));
behavior sorts:
  ensures (K_32 : (\exists integer b;
                    (\exists integer r;
                      ((is_monochrome{Here}(t_1, 0, b, FlagStatic_BLUE) &&
                         is_monochrome{Here}(t_1, b, r, FlagStatic_WHITE)) &&
                        is_monochrome{Here}(t_1, r, (\offset_max(t_1) + 1),
                                            FlagStatic_RED)))));
{  
   {  
      (var integer b_0 = (K_60 : 0));
      
      {  
         (var integer i_3 = (K_59 : 0));
         
         {  
            (var integer r_0 = (K_58 : java_array_length_intM(t_1)));
            
            loop 
            behavior default:
              invariant (K_48 : ((K_47 : ((K_46 : ((K_45 : ((K_44 : is_color_array{Here}(
                                                            t_1)) &&
                                                             (K_43 : 
                                                             ((K_42 : 
                                                              ((K_41 : 
                                                               ((K_40 : 
                                                                (0 <=
                                                                  b_0)) &&
                                                                 (K_39 : 
                                                                 (b_0 <=
                                                                   i_3)))) &&
                                                                (K_38 : 
                                                                (i_3 <=
                                                                  r_0)))) &&
                                                               (K_37 : 
                                                               (r_0 <=
                                                                 (\offset_max(t_1) +
                                                                   1))))))) &&
                                                    (K_36 : is_monochrome{Here}(
                                                    t_1, 0, b_0,
                                                    FlagStatic_BLUE)))) &&
                                           (K_35 : is_monochrome{Here}(
                                           t_1, b_0, i_3, FlagStatic_WHITE)))) &&
                                  (K_34 : is_monochrome{Here}(t_1, r_0,
                                                              (\offset_max(t_1) +
                                                                1),
                                                              FlagStatic_RED))));
            variant (K_49 : (r_0 - i_3));
            while ((K_57 : (i_3 < r_0)))
            {  
               switch ((K_56 : (t_1 + i_3).intP)) {
                 case FlagStatic_BLUE:
                 {  (K_52 : FlagStatic_swap(t_1, (K_50 : (b_0 ++)),
                                            (K_51 : (i_3 ++))));
                    
                    (break )
                 }
                 case FlagStatic_WHITE:
                 {  (K_53 : (i_3 ++));
                    
                    (break )
                 }
                 case FlagStatic_RED:
                 {  (K_55 : FlagStatic_swap(t_1, (K_54 : (-- r_0)), i_3));
                    
                    (break )
                 }
               }
            }
         }
      }
   }
}

unit cons_FlagStatic(! FlagStatic[0] this_1){()}

unit Object_registerNatives()
;

integer Object_hashCode(Object[0] this_2)
;

boolean Object_equals(Object[0] this_3, Object[0..] obj)
;

Object[0..] Object_clone(Object[0] this_4)
;

String[0..] Object_toString(Object[0] this_5)
;

unit Object_notify(Object[0] this_6)
;

unit Object_notifyAll(Object[0] this_7)
;

unit Object_wait_long(Object[0] this_8, integer timeout)
;

unit Object_wait_long_int(Object[0] this_9, integer timeout_0, integer nanos)
;

unit Object_wait(Object[0] this_10)
;

unit Object_finalize(Object[0] this_11)
;

unit cons_Object(! Object[0] this_12){()}

/*
Local Variables:
mode: java
compile-command: "jessie -why-opt -split-user-conj -locs tests/java/FlagStatic.jloc tests/java/FlagStatic.jc && make -f tests/java/FlagStatic.makefile gui"
End:
*/
========== file tests/java/FlagStatic.jloc ==========
[K_10]
file = "HOME/tests/java/FlagStatic.java"
line = 56
begin = 8
end = 49

[K_11]
file = "HOME/tests/java/FlagStatic.java"
line = 55
begin = 24
end = 30

[K_12]
file = "HOME/tests/java/FlagStatic.java"
line = 55
begin = 24
end = 85

[K_13]
file = "HOME/tests/java/FlagStatic.java"
line = 57
begin = 22
end = 27

[K_14]
file = "HOME/tests/java/FlagStatic.java"
line = 59
begin = 33
end = 37

[K_15]
file = "HOME/tests/java/FlagStatic.java"
line = 59
begin = 33
end = 42

[K_16]
file = "HOME/tests/java/FlagStatic.java"
line = 59
begin = 24
end = 27

[K_17]
file = "HOME/tests/java/FlagStatic.java"
line = 59
begin = 17
end = 22

[K_18]
file = "HOME/tests/java/FlagStatic.java"
line = 66
begin = 40
end = 58

[K_19]
file = "HOME/tests/java/FlagStatic.java"
line = 66
begin = 18
end = 36

[FlagStatic_flag]
name = "Method flag"
file = "HOME/tests/java/FlagStatic.java"
line = 83
begin = 23
end = 27

[K_20]
file = "HOME/tests/java/FlagStatic.java"
line = 66
begin = 18
end = 58

[K_21]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 43
end = 55

[K_22]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 38
end = 44

[K_23]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 38
end = 55

[K_24]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 22
end = 34

[K_1]
file = "HOME/tests/java/FlagStatic.java"
line = 52
begin = 18
end = 53

[K_25]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 17
end = 23

[K_2]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 40
end = 53

[K_26]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 17
end = 34

[K_3]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 35
end = 41

[Object_equals]
name = "Method equals"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 122
begin = 19
end = 25

[K_27]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 17
end = 55

[K_4]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 30
end = 36

[K_28]
file = "HOME/tests/java/FlagStatic.java"
line = 70
begin = 8
end = 12

[K_5]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 30
end = 41

[K_29]
file = "HOME/tests/java/FlagStatic.java"
line = 70
begin = 1
end = 12

[K_6]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 30
end = 53

[K_7]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 17
end = 26

[K_8]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 17
end = 53

[K_9]
file = "HOME/tests/java/FlagStatic.java"
line = 59
begin = 14
end = 15

[Object_notify]
name = "Method notify"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 243
begin = 29
end = 35

[cons_FlagStatic]
name = "Constructor of class FlagStatic"
file = "HOME/"
line = 0
begin = -1
end = -1

[cons_Object]
name = "Constructor of class Object"
file = "HOME/"
line = 0
begin = -1
end = -1

[K_30]
file = "HOME/tests/java/FlagStatic.java"
line = 71
begin = 1
end = 9

[K_31]
file = "HOME/tests/java/FlagStatic.java"
line = 69
begin = 9
end = 13

[K_32]
file = "HOME/tests/java/FlagStatic.java"
line = 78
begin = 13
end = 169

[K_33]
file = "HOME/tests/java/FlagStatic.java"
line = 75
begin = 10
end = 27

[K_34]
file = "HOME/tests/java/FlagStatic.java"
line = 92
begin = 14
end = 45

[K_35]
file = "HOME/tests/java/FlagStatic.java"
line = 91
begin = 7
end = 33

[FlagStatic_swap]
name = "Method swap"
file = "HOME/tests/java/FlagStatic.java"
line = 68
begin = 24
end = 28

[K_36]
file = "HOME/tests/java/FlagStatic.java"
line = 90
begin = 7
end = 32

[K_37]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 22
end = 35

[K_38]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 17
end = 23

[Object_wait_long_int]
name = "Method wait"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 386
begin = 22
end = 26

[K_39]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 12
end = 18

[Object_wait_long]
name = "Method wait"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 333
begin = 29
end = 33

[Object_hashCode]
name = "Method hashCode"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 74
begin = 22
end = 30

[Object_notifyAll]
name = "Method notifyAll"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 267
begin = 29
end = 38

[K_40]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 7
end = 13

[K_41]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 7
end = 18

[K_42]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 7
end = 23

[K_43]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 7
end = 35

[K_44]
file = "HOME/tests/java/FlagStatic.java"
line = 88
begin = 7
end = 24

[Object_toString]
name = "Method toString"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 207
begin = 18
end = 26

[K_45]
file = "HOME/tests/java/FlagStatic.java"
line = 88
begin = 7
end = 63

[K_46]
file = "HOME/tests/java/FlagStatic.java"
line = 88
begin = 7
end = 99

[K_47]
file = "HOME/tests/java/FlagStatic.java"
line = 88
begin = 7
end = 136

[K_48]
file = "HOME/tests/java/FlagStatic.java"
line = 88
begin = 7
end = 185

[K_49]
file = "HOME/tests/java/FlagStatic.java"
line = 93
begin = 18
end = 23

[Object_registerNatives]
name = "Method registerNatives"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 22
begin = 31
end = 46

[FlagStatic_isMonochrome]
name = "Method isMonochrome"
file = "HOME/tests/java/FlagStatic.java"
line = 54
begin = 26
end = 38

[K_50]
file = "HOME/tests/java/FlagStatic.java"
line = 98
begin = 9
end = 12

[Object_clone]
name = "Method clone"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 184
begin = 28
end = 33

[K_51]
file = "HOME/tests/java/FlagStatic.java"
line = 98
begin = 14
end = 17

[K_52]
file = "HOME/tests/java/FlagStatic.java"
line = 98
begin = 2
end = 18

[K_53]
file = "HOME/tests/java/FlagStatic.java"
line = 101
begin = 2
end = 5

[K_54]
file = "HOME/tests/java/FlagStatic.java"
line = 104
begin = 9
end = 12

[Object_wait]
name = "Method wait"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 430
begin = 22
end = 26

[K_55]
file = "HOME/tests/java/FlagStatic.java"
line = 104
begin = 2
end = 16

[K_56]
file = "HOME/tests/java/FlagStatic.java"
line = 96
begin = 13
end = 17

[K_57]
file = "HOME/tests/java/FlagStatic.java"
line = 95
begin = 8
end = 13

[K_58]
file = "HOME/tests/java/FlagStatic.java"
line = 86
begin = 9
end = 17

[K_59]
file = "HOME/tests/java/FlagStatic.java"
line = 85
begin = 9
end = 10

[K_60]
file = "HOME/tests/java/FlagStatic.java"
line = 84
begin = 9
end = 10

[Object_finalize]
name = "Method finalize"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 481
begin = 19
end = 27

========== jessie execution ==========
Generating Why function FlagStatic_isMonochrome
Generating Why function FlagStatic_swap
Generating Why function FlagStatic_flag
Generating Why function cons_FlagStatic
Generating Why function cons_Object
========== file tests/java/FlagStatic.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs FlagStatic.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs FlagStatic.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why

COQDEP = coqdep

.PHONY: all coq pvs simplify cvcl harvey smtlib zenon

all: simplify/FlagStatic_why.sx

project: why/FlagStatic.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/FlagStatic_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/FlagStatic_why.vo

coq/FlagStatic_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/FlagStatic_why.v: why/FlagStatic.why
	@echo 'why -coq [...] why/FlagStatic.why' && $(WHY) $(JESSIELIBFILES) why/FlagStatic.why

coq-goals: goals coq/FlagStatic_ctx_why.vo
	for f in why/*_po*.why; do make -f FlagStatic.makefile coq/`basename $$f .why`_why.v ; done

coq/FlagStatic_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/FlagStatic_ctx_why.v: why/FlagStatic_ctx.why
	@echo 'why -coq [...] why/FlagStatic_ctx.why' && $(WHY) why/FlagStatic_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export FlagStatic_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/FlagStatic_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<

pvs: pvs/FlagStatic_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/FlagStatic_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/FlagStatic_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/FlagStatic_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/FlagStatic_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/FlagStatic_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/FlagStatic_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/FlagStatic_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/FlagStatic_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/FlagStatic_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/FlagStatic_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

gui stat: FlagStatic.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/FlagStatic_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
-include FlagStatic.depend

depend: coq/FlagStatic_why.v
	-$(COQDEP) -I coq coq/FlagStatic*_why.v > FlagStatic.depend

clean:
	rm -f coq/*.vo

========== file tests/java/FlagStatic.loc ==========
[JC_103]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_104]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_105]
file = "HOME/"
line = 0
begin = -1
end = -1

[cons_FlagStatic_safety]
name = "Constructor of class FlagStatic"
behavior = "Safety"
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_106]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_40]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 40
end = 53

[JC_107]
file = "HOME/tests/java/FlagStatic.java"
line = 78
begin = 13
end = 169

[JC_41]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 17
end = 53

[JC_108]
file = "HOME/tests/java/FlagStatic.java"
line = 78
begin = 13
end = 169

[JC_42]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_220]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_109]
kind = UserCall
file = "HOME/tests/java/FlagStatic.java"
line = 86
begin = 9
end = 17

[JC_43]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_221]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 333
begin = 29
end = 33

[JC_44]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_222]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_45]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_223]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 333
begin = 29
end = 33

[JC_46]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_224]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_47]
file = "HOME/tests/java/FlagStatic.java"
line = 52
begin = 18
end = 53

[JC_225]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_48]
file = "HOME/tests/java/FlagStatic.java"
line = 52
begin = 18
end = 53

[JC_226]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_49]
file = "HOME/tests/java/FlagStatic.java"
line = 55
begin = 24
end = 30

[JC_227]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_228]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_229]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 386
begin = 22
end = 26

[JC_110]
kind = IndexBounds
file = "HOME/tests/java/FlagStatic.java"
line = 86
begin = 9
end = 17

[JC_111]
file = "HOME/tests/java/FlagStatic.java"
line = 88
begin = 7
end = 24

[JC_112]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 7
end = 13

[JC_113]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 12
end = 18

[JC_114]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 17
end = 23

[JC_115]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 22
end = 35

[JC_116]
file = "HOME/tests/java/FlagStatic.java"
line = 90
begin = 7
end = 32

[JC_50]
file = "HOME/tests/java/FlagStatic.java"
line = 56
begin = 8
end = 49

[JC_117]
file = "HOME/tests/java/FlagStatic.java"
line = 91
begin = 7
end = 33

[JC_51]
file = "HOME/tests/java/FlagStatic.java"
line = 55
begin = 24
end = 85

[JC_118]
file = "HOME/tests/java/FlagStatic.java"
line = 92
begin = 14
end = 45

[JC_52]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_230]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_119]
file = "HOME/tests/java/FlagStatic.java"
line = 88
begin = 7
end = 185

[JC_53]
file = "HOME/tests/java/FlagStatic.jc"
line = 97
begin = 9
end = 509

[JC_231]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 386
begin = 22
end = 26

[JC_54]
file = "HOME/tests/java/FlagStatic.jc"
line = 97
begin = 9
end = 509

[JC_232]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_55]
kind = PointerDeref
file = "HOME/tests/java/FlagStatic.java"
line = 59
begin = 33
end = 37

[JC_233]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_56]
file = "HOME/tests/java/FlagStatic.java"
line = 57
begin = 22
end = 27

[JC_234]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_57]
file = "HOME/tests/java/FlagStatic.java"
line = 55
begin = 24
end = 30

[JC_235]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_58]
file = "HOME/tests/java/FlagStatic.java"
line = 56
begin = 8
end = 49

[JC_236]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_59]
file = "HOME/tests/java/FlagStatic.java"
line = 55
begin = 24
end = 85

[JC_237]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 430
begin = 22
end = 26

[FlagStatic_flag_ensures_sorts]
name = "Method flag"
behavior = "Normal behavior `sorts'"
file = "HOME/tests/java/FlagStatic.java"
line = 83
begin = 23
end = 27

[JC_238]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_239]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 430
begin = 22
end = 26

[JC_120]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_121]
file = "HOME/tests/java/FlagStatic.jc"
line = 154
begin = 12
end = 2823

[JC_122]
file = "HOME/tests/java/FlagStatic.jc"
line = 154
begin = 12
end = 2823

[JC_123]
kind = PointerDeref
file = "HOME/tests/java/FlagStatic.java"
line = 96
begin = 13
end = 17

[JC_124]
kind = UserCall
file = "HOME/tests/java/FlagStatic.jc"
line = 188
begin = 28
end = 130

[JC_125]
kind = UserCall
file = "HOME/tests/java/FlagStatic.jc"
line = 199
begin = 28
end = 72

[JC_126]
file = "HOME/tests/java/FlagStatic.java"
line = 93
begin = 18
end = 23

[JC_60]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_127]
kind = UserCall
file = "HOME/tests/java/FlagStatic.java"
line = 86
begin = 9
end = 17

[JC_61]
file = "HOME/tests/java/FlagStatic.jc"
line = 97
begin = 9
end = 509

[JC_128]
file = "HOME/tests/java/FlagStatic.java"
line = 88
begin = 7
end = 24

[JC_62]
file = "HOME/tests/java/FlagStatic.jc"
line = 97
begin = 9
end = 509

[JC_240]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_129]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 7
end = 13

[JC_63]
file = "HOME/tests/java/FlagStatic.java"
line = 55
begin = 24
end = 30

[JC_241]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_64]
file = "HOME/tests/java/FlagStatic.java"
line = 56
begin = 8
end = 49

[JC_242]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_65]
file = "HOME/tests/java/FlagStatic.java"
line = 55
begin = 24
end = 85

[JC_243]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_66]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_244]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_67]
file = "HOME/tests/java/FlagStatic.jc"
line = 97
begin = 9
end = 509

[JC_245]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 481
begin = 19
end = 27

[JC_68]
file = "HOME/tests/java/FlagStatic.jc"
line = 97
begin = 9
end = 509

[JC_246]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_69]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 17
end = 23

[JC_247]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 481
begin = 19
end = 27

[JC_248]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_249]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_130]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 12
end = 18

[JC_131]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 17
end = 23

[JC_132]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 22
end = 35

[JC_133]
file = "HOME/tests/java/FlagStatic.java"
line = 90
begin = 7
end = 32

[JC_134]
file = "HOME/tests/java/FlagStatic.java"
line = 91
begin = 7
end = 33

[JC_135]
file = "HOME/tests/java/FlagStatic.java"
line = 92
begin = 14
end = 45

[JC_136]
file = "HOME/tests/java/FlagStatic.java"
line = 88
begin = 7
end = 185

[JC_70]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 22
end = 34

[JC_137]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_71]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 38
end = 44

[JC_138]
file = "HOME/tests/java/FlagStatic.jc"
line = 154
begin = 12
end = 2823

[JC_72]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 43
end = 55

[JC_250]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_139]
file = "HOME/tests/java/FlagStatic.jc"
line = 154
begin = 12
end = 2823

[JC_73]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 17
end = 55

[JC_251]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_74]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_252]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_75]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 17
end = 23

[JC_253]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_76]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 22
end = 34

[JC_254]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_77]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 38
end = 44

[JC_255]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_78]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 43
end = 55

[JC_256]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_79]
file = "HOME/tests/java/FlagStatic.java"
line = 63
begin = 17
end = 55

[JC_257]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_258]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_259]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_140]
kind = UserCall
file = "HOME/tests/java/FlagStatic.jc"
line = 188
begin = 28
end = 130

[JC_141]
kind = UserCall
file = "HOME/tests/java/FlagStatic.jc"
line = 199
begin = 28
end = 72

[JC_142]
kind = UserCall
file = "HOME/tests/java/FlagStatic.java"
line = 86
begin = 9
end = 17

[JC_143]
file = "HOME/tests/java/FlagStatic.java"
line = 88
begin = 7
end = 24

[JC_144]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 7
end = 13

[JC_145]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 12
end = 18

[cons_Object_safety]
name = "Constructor of class Object"
behavior = "Safety"
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_146]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 17
end = 23

[JC_80]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_147]
file = "HOME/tests/java/FlagStatic.java"
line = 89
begin = 22
end = 35

[JC_81]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_148]
file = "HOME/tests/java/FlagStatic.java"
line = 90
begin = 7
end = 32

[JC_82]
file = "HOME/"
line = 0
begin = -1
end = -1

[FlagStatic_swap_ensures_default]
name = "Method swap"
behavior = "Default behavior"
file = "HOME/tests/java/FlagStatic.java"
line = 68
begin = 24
end = 28

[JC_260]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_149]
file = "HOME/tests/java/FlagStatic.java"
line = 91
begin = 7
end = 33

[JC_83]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_84]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_85]
file = "HOME/tests/java/FlagStatic.java"
line = 66
begin = 18
end = 36

[JC_86]
file = "HOME/tests/java/FlagStatic.java"
line = 66
begin = 40
end = 58

[JC_87]
file = "HOME/tests/java/FlagStatic.java"
line = 66
begin = 18
end = 58

[JC_88]
file = "HOME/tests/java/FlagStatic.java"
line = 68
begin = 24
end = 28

[JC_1]
file = "HOME/tests/java/FlagStatic.jc"
line = 48
begin = 8
end = 21

[JC_89]
file = "HOME/tests/java/FlagStatic.jc"
line = 120
begin = 9
end = 20

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_3]
file = "HOME/tests/java/FlagStatic.jc"
line = 48
begin = 8
end = 21

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_5]
file = "HOME/tests/java/FlagStatic.jc"
line = 51
begin = 11
end = 66

[JC_6]
file = "HOME/tests/java/FlagStatic.jc"
line = 50
begin = 10
end = 18

[JC_150]
file = "HOME/tests/java/FlagStatic.java"
line = 92
begin = 14
end = 45

[JC_7]
file = "HOME/tests/java/FlagStatic.jc"
line = 51
begin = 11
end = 66

[JC_151]
file = "HOME/tests/java/FlagStatic.java"
line = 88
begin = 7
end = 185

[JC_8]
file = "HOME/tests/java/FlagStatic.jc"
line = 50
begin = 10
end = 18

[JC_152]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_9]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_153]
file = "HOME/tests/java/FlagStatic.jc"
line = 154
begin = 12
end = 2823

[JC_154]
file = "HOME/tests/java/FlagStatic.jc"
line = 154
begin = 12
end = 2823

[JC_155]
kind = UserCall
file = "HOME/tests/java/FlagStatic.jc"
line = 188
begin = 28
end = 130

[FlagStatic_isMonochrome_ensures_default]
name = "Method isMonochrome"
behavior = "Default behavior"
file = "HOME/tests/java/FlagStatic.java"
line = 54
begin = 26
end = 38

[JC_156]
kind = UserCall
file = "HOME/tests/java/FlagStatic.jc"
line = 199
begin = 28
end = 72

[JC_90]
file = "HOME/tests/java/FlagStatic.java"
line = 66
begin = 18
end = 36

[JC_157]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_91]
file = "HOME/tests/java/FlagStatic.java"
line = 66
begin = 40
end = 58

[JC_158]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_92]
file = "HOME/tests/java/FlagStatic.java"
line = 66
begin = 18
end = 58

[JC_159]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_93]
file = "HOME/tests/java/FlagStatic.java"
line = 68
begin = 24
end = 28

[JC_94]
file = "HOME/tests/java/FlagStatic.jc"
line = 120
begin = 9
end = 20

[JC_95]
kind = PointerDeref
file = "HOME/tests/java/FlagStatic.java"
line = 69
begin = 9
end = 13

[JC_96]
kind = PointerDeref
file = "HOME/tests/java/FlagStatic.java"
line = 70
begin = 8
end = 12

[JC_97]
kind = PointerDeref
file = "HOME/tests/java/FlagStatic.jc"
line = 129
begin = 18
end = 62

[JC_98]
kind = PointerDeref
file = "HOME/tests/java/FlagStatic.jc"
line = 130
begin = 18
end = 38

[JC_99]
file = "HOME/tests/java/FlagStatic.java"
line = 75
begin = 10
end = 27

[JC_160]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_161]
file = "HOME/"
line = 0
begin = -1
end = -1

[FlagStatic_swap_ensures_i_j_swapped]
name = "Method swap"
behavior = "Normal behavior `i_j_swapped'"
file = "HOME/tests/java/FlagStatic.java"
line = 68
begin = 24
end = 28

[JC_162]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_163]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_164]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_165]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 22
begin = 31
end = 46

[JC_166]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_167]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 22
begin = 31
end = 46

[JC_168]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_169]
file = "HOME/"
line = 0
begin = -1
end = -1

[FlagStatic_isMonochrome_ensures_decides_monochromatic]
name = "Method isMonochrome"
behavior = "Normal behavior `decides_monochromatic'"
file = "HOME/tests/java/FlagStatic.java"
line = 54
begin = 26
end = 38

[FlagStatic_swap_safety]
name = "Method swap"
behavior = "Safety"
file = "HOME/tests/java/FlagStatic.java"
line = 68
begin = 24
end = 28

[FlagStatic_flag_ensures_default]
name = "Method flag"
behavior = "Default behavior"
file = "HOME/tests/java/FlagStatic.java"
line = 83
begin = 23
end = 27

[JC_170]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_171]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_172]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_173]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 74
begin = 22
end = 30

[JC_174]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_175]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 74
begin = 22
end = 30

[JC_176]
file = "HOME/"
line = 0
begin = -1
end = -1

[FlagStatic_flag_safety]
name = "Method flag"
behavior = "Safety"
file = "HOME/tests/java/FlagStatic.java"
line = 83
begin = 23
end = 27

[JC_177]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_178]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_179]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_10]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_11]
file = "HOME/tests/java/FlagStatic.jc"
line = 54
begin = 8
end = 30

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_13]
file = "HOME/tests/java/FlagStatic.jc"
line = 54
begin = 8
end = 30

[JC_14]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_15]
file = "HOME/tests/java/FlagStatic.jc"
line = 57
begin = 11
end = 103

[JC_16]
file = "HOME/tests/java/FlagStatic.jc"
line = 56
begin = 10
end = 18

[JC_17]
file = "HOME/tests/java/FlagStatic.jc"
line = 57
begin = 11
end = 103

[JC_180]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_18]
file = "HOME/tests/java/FlagStatic.jc"
line = 56
begin = 10
end = 18

[JC_181]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 122
begin = 19
end = 25

[JC_19]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_182]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_183]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 122
begin = 19
end = 25

[JC_184]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_185]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_186]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_187]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_188]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_189]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 184
begin = 28
end = 33

[JC_20]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_21]
file = "HOME/tests/java/FlagStatic.jc"
line = 61
begin = 8
end = 23

[JC_22]
file = "HOME/"
line = 0
begin = -1
end = -1

[cons_Object_ensures_default]
name = "Constructor of class Object"
behavior = "Default behavior"
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_200]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_23]
file = "HOME/tests/java/FlagStatic.jc"
line = 61
begin = 8
end = 23

[JC_201]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_24]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_202]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_25]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_203]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_26]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_204]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_27]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_205]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 243
begin = 29
end = 35

[JC_190]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_28]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_206]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_191]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 184
begin = 28
end = 33

[JC_29]
file = "HOME/tests/java/FlagStatic.jc"
line = 63
begin = 11
end = 65

[JC_207]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 243
begin = 29
end = 35

[JC_192]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_208]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_193]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_209]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_194]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_195]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_196]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_197]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 207
begin = 18
end = 26

[cons_FlagStatic_ensures_default]
name = "Constructor of class FlagStatic"
behavior = "Default behavior"
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_198]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_199]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 207
begin = 18
end = 26

[JC_30]
file = "HOME/tests/java/FlagStatic.jc"
line = 63
begin = 11
end = 65

[JC_31]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 17
end = 26

[JC_32]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 30
end = 36

[JC_210]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_33]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 35
end = 41

[JC_211]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_34]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 40
end = 53

[JC_212]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_35]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 17
end = 53

[JC_213]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 267
begin = 29
end = 38

[JC_36]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_214]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_37]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 17
end = 26

[JC_215]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 267
begin = 29
end = 38

[JC_38]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 30
end = 36

[JC_216]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_39]
file = "HOME/tests/java/FlagStatic.java"
line = 50
begin = 35
end = 41

[JC_217]
file = "HOME/"
line = 0
begin = -1
end = -1

[FlagStatic_isMonochrome_safety]
name = "Method isMonochrome"
behavior = "Safety"
file = "HOME/tests/java/FlagStatic.java"
line = 54
begin = 26
end = 38

[JC_218]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_219]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_100]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_101]
file = "HOME/tests/java/FlagStatic.java"
line = 75
begin = 10
end = 27

[JC_102]
file = "HOME/"
line = 0
begin = -1
end = -1

========== file tests/java/why/FlagStatic.why ==========
type Object

type interface

exception Exception_exc of Object pointer

logic Exception_tag:  -> Object tag_id

logic Object_tag:  -> Object tag_id

axiom Exception_parenttag_Object : parenttag(Exception_tag, Object_tag)

function FlagStatic_BLUE() : int = (1)

function FlagStatic_RED() : int = (3)

function FlagStatic_WHITE() : int = (2)

logic FlagStatic_tag:  -> Object tag_id

axiom FlagStatic_parenttag_Object : parenttag(FlagStatic_tag, Object_tag)

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

predicate Non_null_Object(x_0:Object pointer,
 Object_alloc_table:Object alloc_table) =
 eq_int(offset_max(Object_alloc_table, x_0), (0))

predicate Non_null_intM(x:Object pointer,
 Object_alloc_table:Object alloc_table) =
 ge_int(offset_max(Object_alloc_table, x), neg_int((1)))

axiom Object_int : (int_of_tag(Object_tag) = (1))

logic Object_of_pointer_address: unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr :
 (forall p:Object pointer.
  (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom : parenttag(Object_tag, bottom_tag)

axiom Object_tags :
 (forall x:Object pointer.
  (forall Object_tag_table:Object tag_table.
   instanceof(Object_tag_table, x, Object_tag)))

exception Return_label_exc of unit

logic String_tag:  -> Object tag_id

axiom String_parenttag_Object : parenttag(String_tag, Object_tag)

exception Throwable_exc of Object pointer

logic Throwable_tag:  -> Object tag_id

axiom Throwable_parenttag_Object : parenttag(Throwable_tag, Object_tag)

logic intM_tag:  -> Object tag_id

axiom intM_parenttag_Object : parenttag(intM_tag, Object_tag)

logic interface_tag:  -> interface tag_id

axiom interface_int : (int_of_tag(interface_tag) = (1))

logic interface_of_pointer_address: unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr :
 (forall p:interface pointer.
  (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom : parenttag(interface_tag, bottom_tag)

axiom interface_tags :
 (forall x:interface pointer.
  (forall interface_tag_table:interface tag_table.
   instanceof(interface_tag_table, x, interface_tag)))

predicate is_color(c:int) =
 (eq_int(c, FlagStatic_BLUE)
 or (eq_int(c, FlagStatic_WHITE) or eq_int(c, FlagStatic_RED)))

predicate is_color_array(t_2:Object pointer,
 Object_alloc_table_at_L:Object alloc_table,
 intM_intP_at_L:(Object, int) memory) =
 (Non_null_intM(t_2, Object_alloc_table_at_L)
 and (forall i_1:int.
      ((le_int((0), i_1)
       and lt_int(i_1,
           add_int(offset_max(Object_alloc_table_at_L, t_2), (1)))) ->
       is_color(select(intM_intP_at_L, shift(t_2, i_1))))))

predicate is_monochrome(t_3:Object pointer, i_2:int, j_1:int, c_1:int,
 intM_intP_at_L:(Object, int) memory) =
 (forall k:int.
  ((le_int(i_2, k) and lt_int(k, j_1)) ->
   eq_int(select(intM_intP_at_L, shift(t_3, k)), c_1)))

predicate left_valid_struct_Object(p:Object pointer, a:int,
 Object_alloc_table:Object alloc_table) =
 (offset_min(Object_alloc_table, p) <= a)

predicate left_valid_struct_Exception(p:Object pointer, a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_FlagStatic(p:Object pointer, a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_String(p:Object pointer, a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_Throwable(p:Object pointer, a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_intM(p:Object pointer, a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_interface(p:interface pointer, a:int,
 interface_alloc_table:interface alloc_table) =
 (offset_min(interface_alloc_table, p) <= a)

axiom pointer_addr_of_Object_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p:Object pointer, b:int,
 Object_alloc_table:Object alloc_table) =
 (offset_max(Object_alloc_table, p) >= b)

predicate right_valid_struct_Exception(p:Object pointer, b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_FlagStatic(p:Object pointer, b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_String(p:Object pointer, b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_Throwable(p:Object pointer, b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_intM(p:Object pointer, b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_interface(p:interface pointer, b:int,
 interface_alloc_table:interface alloc_table) =
 (offset_max(interface_alloc_table, p) >= b)

predicate strict_valid_root_Object(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p:interface pointer, a:int, b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Exception(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_FlagStatic(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_String(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_intM(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_interface(p:interface pointer, a:int, b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Exception(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_FlagStatic(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_intM(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p:unit pointer, a:int, b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) <= a)
 and (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p:interface pointer, a:int, b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) <= a)
 and (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) <= a)
 and (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Exception(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_FlagStatic(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_String(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_Throwable(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_intM(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_interface(p:interface pointer, a:int, b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) <= a)
 and (offset_max(interface_alloc_table, p) >= b))

parameter Object_alloc_table : Object alloc_table ref

parameter intM_intP : (Object, int) memory ref

parameter FlagStatic_flag :
 t_1:Object pointer ->
  { } unit reads Object_alloc_table,intM_intP writes intM_intP
  { (JC_108:
    (exists b:int.
     (exists r:int.
      (is_monochrome(t_1, (0), b, FlagStatic_BLUE, intM_intP)
      and (is_monochrome(t_1, b, r, FlagStatic_WHITE, intM_intP)
          and is_monochrome(t_1, r,
              add_int(offset_max(Object_alloc_table, t_1), (1)),
              FlagStatic_RED, intM_intP)))))) }

parameter FlagStatic_flag_requires :
 t_1:Object pointer ->
  { (JC_99: is_color_array(t_1, Object_alloc_table, intM_intP))} unit
  reads Object_alloc_table,intM_intP writes intM_intP
  { (JC_108:
    (exists b:int.
     (exists r:int.
      (is_monochrome(t_1, (0), b, FlagStatic_BLUE, intM_intP)
      and (is_monochrome(t_1, b, r, FlagStatic_WHITE, intM_intP)
          and is_monochrome(t_1, r,
              add_int(offset_max(Object_alloc_table, t_1), (1)),
              FlagStatic_RED, intM_intP)))))) }

parameter FlagStatic_isMonochrome :
 t:Object pointer ->
  i:int ->
   j:int ->
    c_0:int ->
     { } bool reads Object_alloc_table,intM_intP
     { (JC_48: ((result = true) <-> is_monochrome(t, i, j, c_0, intM_intP))) }

parameter FlagStatic_isMonochrome_requires :
 t:Object pointer ->
  i:int ->
   j:int ->
    c_0:int ->
     { (JC_35:
       ((JC_31: Non_null_intM(t, Object_alloc_table))
       and ((JC_32: le_int((0), i))
           and ((JC_33: le_int(i, j))
               and (JC_34:
                   le_int(j, add_int(offset_max(Object_alloc_table, t), (1))))))))}
     bool reads Object_alloc_table,intM_intP
     { (JC_48: ((result = true) <-> is_monochrome(t, i, j, c_0, intM_intP))) }

parameter FlagStatic_swap :
 t_0:Object pointer ->
  i_0:int ->
   j_0:int ->
    { } unit reads Object_alloc_table,intM_intP writes intM_intP
    { (JC_94:
      ((JC_92:
       ((JC_90:
        eq_int(select(intM_intP, shift(t_0, i_0)),
        select(intM_intP@, shift(t_0@, j_0@))))
       and (JC_91:
           eq_int(select(intM_intP, shift(t_0, j_0)),
           select(intM_intP@, shift(t_0@, i_0@))))))
      and (JC_93:
          not_assigns(Object_alloc_table@, intM_intP@, intM_intP,
          pset_union(pset_range(pset_singleton(t_0@), j_0@, j_0@),
          pset_range(pset_singleton(t_0@), i_0@, i_0@)))))) }

parameter FlagStatic_swap_requires :
 t_0:Object pointer ->
  i_0:int ->
   j_0:int ->
    { (JC_73:
      ((JC_69: le_int((0), i_0))
      and ((JC_70:
           lt_int(i_0, add_int(offset_max(Object_alloc_table, t_0), (1))))
          and ((JC_71: le_int((0), j_0))
              and (JC_72:
                  lt_int(j_0,
                  add_int(offset_max(Object_alloc_table, t_0), (1))))))))}
    unit reads Object_alloc_table,intM_intP writes intM_intP
    { (JC_94:
      ((JC_92:
       ((JC_90:
        eq_int(select(intM_intP, shift(t_0, i_0)),
        select(intM_intP@, shift(t_0@, j_0@))))
       and (JC_91:
           eq_int(select(intM_intP, shift(t_0, j_0)),
           select(intM_intP@, shift(t_0@, i_0@))))))
      and (JC_93:
          not_assigns(Object_alloc_table@, intM_intP@, intM_intP,
          pset_union(pset_range(pset_singleton(t_0@), j_0@, j_0@),
          pset_range(pset_singleton(t_0@), i_0@, i_0@)))))) }

parameter Object_clone :
 this_4:Object pointer ->
  { } Object pointer reads Object_alloc_table { true }

parameter Object_clone_requires :
 this_4:Object pointer ->
  { } Object pointer reads Object_alloc_table { true }

parameter Object_equals :
 this_3:Object pointer ->
  obj:Object pointer -> { } bool reads Object_alloc_table { true }

parameter Object_equals_requires :
 this_3:Object pointer ->
  obj:Object pointer -> { } bool reads Object_alloc_table { true }

parameter Object_finalize :
 this_11:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_finalize_requires :
 this_11:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_hashCode :
 this_2:Object pointer -> { } int reads Object_alloc_table { true }

parameter Object_hashCode_requires :
 this_2:Object pointer -> { } int reads Object_alloc_table { true }

parameter Object_notify :
 this_6:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_notifyAll :
 this_7:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_notifyAll_requires :
 this_7:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_notify_requires :
 this_6:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_registerNatives : tt:unit -> { } unit { true }

parameter Object_registerNatives_requires : tt:unit -> { } unit { true }

parameter Object_tag_table : Object tag_table ref

parameter Object_toString :
 this_5:Object pointer ->
  { } Object pointer reads Object_alloc_table { true }

parameter Object_toString_requires :
 this_5:Object pointer ->
  { } Object pointer reads Object_alloc_table { true }

parameter Object_wait :
 this_10:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_wait_long :
 this_8:Object pointer ->
  timeout:int -> { } unit reads Object_alloc_table { true }

parameter Object_wait_long_int :
 this_9:Object pointer ->
  timeout_0:int -> nanos:int -> { } unit reads Object_alloc_table { true }

parameter Object_wait_long_int_requires :
 this_9:Object pointer ->
  timeout_0:int -> nanos:int -> { } unit reads Object_alloc_table { true }

parameter Object_wait_long_requires :
 this_8:Object pointer ->
  timeout:int -> { } unit reads Object_alloc_table { true }

parameter Object_wait_requires :
 this_10:Object pointer -> { } unit reads Object_alloc_table { true }

parameter alloc_bitvector_struct_Exception :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Exception(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Exception_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Exception(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_FlagStatic :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_FlagStatic(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_FlagStatic_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_FlagStatic(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Object :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Object(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Object_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Object(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_String :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_String(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_String_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_String(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Throwable :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Throwable(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Throwable_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Throwable(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_intM :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_intM(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_intM_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_intM(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_interface :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_interface(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_interface_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_interface(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_struct_Exception :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Exception(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Exception_tag)))) }

parameter alloc_struct_Exception_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Exception(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Exception_tag)))) }

parameter alloc_struct_FlagStatic :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_FlagStatic(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, FlagStatic_tag)))) }

parameter alloc_struct_FlagStatic_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_FlagStatic(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, FlagStatic_tag)))) }

parameter alloc_struct_Object :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Object(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_Object_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Object(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_String :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_String(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_String_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_String(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_Throwable :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter alloc_struct_Throwable_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter alloc_struct_intM :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_intM(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, intM_tag)))) }

parameter alloc_struct_intM_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_intM(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, intM_tag)))) }

parameter interface_alloc_table : interface alloc_table ref

parameter interface_tag_table : interface tag_table ref

parameter alloc_struct_interface :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { } interface pointer writes interface_alloc_table,interface_tag_table
    { (strict_valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter alloc_struct_interface_requires :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { ge_int(n, (0))} interface pointer
    writes interface_alloc_table,interface_tag_table
    { (strict_valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter cons_FlagStatic :
 this_1:Object pointer -> { } unit reads Object_alloc_table { true }

parameter cons_FlagStatic_requires :
 this_1:Object pointer -> { } unit reads Object_alloc_table { true }

parameter cons_Object :
 this_12:Object pointer -> { } unit reads Object_alloc_table { true }

parameter cons_Object_requires :
 this_12:Object pointer -> { } unit reads Object_alloc_table { true }

parameter java_array_length_intM :
 x_2:Object pointer ->
  { } int reads Object_alloc_table
  { (JC_17:
    (le_int(result, (2147483647))
    and (ge_int(result, (0))
        and eq_int(result, add_int(offset_max(Object_alloc_table, x_2), (1)))))) }

parameter java_array_length_intM_requires :
 x_2:Object pointer ->
  { } int reads Object_alloc_table
  { (JC_17:
    (le_int(result, (2147483647))
    and (ge_int(result, (0))
        and eq_int(result, add_int(offset_max(Object_alloc_table, x_2), (1)))))) }

parameter non_null_Object :
 x_3:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_30:
    (if result then eq_int(offset_max(Object_alloc_table, x_3), (0))
     else (x_3 = null))) }

parameter non_null_Object_requires :
 x_3:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_30:
    (if result then eq_int(offset_max(Object_alloc_table, x_3), (0))
     else (x_3 = null))) }

parameter non_null_intM :
 x_1:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_7:
    (if result then ge_int(offset_max(Object_alloc_table, x_1), neg_int((1)))
     else (x_1 = null))) }

parameter non_null_intM_requires :
 x_1:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_7:
    (if result then ge_int(offset_max(Object_alloc_table, x_1), neg_int((1)))
     else (x_1 = null))) }

let FlagStatic_flag_ensures_default =
 fun (t_1 : Object pointer) ->
  { (left_valid_struct_intM(t_1, (0), Object_alloc_table)
    and (JC_101: is_color_array(t_1, Object_alloc_table, intM_intP))) }
  (init:
  try
   begin
     (let b_0 = ref (K_60: (0)) in
     (let i_3 = ref (K_59: (0)) in
     (let r_0 =
     ref (K_58:
         (let jessie_107 = t_1 in
         (JC_127: (java_array_length_intM jessie_107)))) in
     try
      (loop_5:
      while true do
      { invariant
          (JC_136:
          ((JC_128: is_color_array(t_1, Object_alloc_table, intM_intP))
          and ((JC_129: le_int((0), b_0))
              and ((JC_130: le_int(b_0, i_3))
                  and ((JC_131: le_int(i_3, r_0))
                      and ((JC_132:
                           le_int(r_0,
                           add_int(offset_max(Object_alloc_table, t_1), (1))))
                          and ((JC_133:
                               is_monochrome(t_1, (0), b_0, FlagStatic_BLUE,
                               intM_intP))
                              and ((JC_134:
                                   is_monochrome(t_1, b_0, i_3,
                                   FlagStatic_WHITE, intM_intP))
                                  and (JC_135:
                                      is_monochrome(t_1, r_0,
                                      add_int(offset_max(Object_alloc_table,
                                              t_1),
                                      (1)), FlagStatic_RED, intM_intP))))))))))
         }
       begin
         [ { } unit { true } ];
        try
         (let jessie_130 =
         begin
           (if (K_57: ((lt_int_ !i_3) !r_0))
           then
            (let jessie_7 =
            (K_56: ((safe_acc_ !intM_intP) ((shift t_1) !i_3))) in
            try
             begin
               (if ((eq_int_ jessie_7) FlagStatic_BLUE)
               then
                (let jessie_118 =
                (K_52:
                begin
                  (let jessie_117 = t_1 in
                  (let jessie_113 =
                  (K_50:
                  (let jessie_4 = !b_0 in
                  begin
                    (let jessie_116 = (b_0 := ((add_int jessie_4) (1))) in
                    void); jessie_4 end)) in
                  (let jessie_109 =
                  (K_51:
                  (let jessie_5 = !i_3 in
                  begin
                    (let jessie_112 = (i_3 := ((add_int jessie_5) (1))) in
                    void); jessie_5 end)) in
                  (JC_140:
                  (((FlagStatic_swap jessie_117) jessie_113) jessie_109)))));
                 (raise (Loop_exit_exc void)) end) in void) else void);
              (if (((eq_int_ jessie_7) FlagStatic_WHITE) || ((eq_int_ jessie_7) FlagStatic_BLUE))
              then
               (let jessie_123 =
               (K_53:
               begin
                 (let jessie_122 =
                 (let jessie_6 = !i_3 in
                 begin
                   (let jessie_121 = (i_3 := ((add_int jessie_6) (1))) in
                   void); jessie_6 end) in void);
                (raise (Loop_exit_exc void)) end) in void) else void);
              (if (((eq_int_ jessie_7) FlagStatic_RED) || (((eq_int_ jessie_7) FlagStatic_WHITE) || 
                                                          ((eq_int_ jessie_7) FlagStatic_BLUE)))
              then
               (let jessie_128 =
               (K_55:
               begin
                 (let jessie_127 = t_1 in
                 (let jessie_125 =
                 (K_54: begin   (r_0 := ((sub_int !r_0) (1))); !r_0 end) in
                 (let jessie_124 = !i_3 in
                 (JC_141:
                 (((FlagStatic_swap jessie_127) jessie_125) jessie_124)))));
                (raise (Loop_exit_exc void)) end) in void) else void) end
             with Loop_exit_exc jessie_8 -> void end)
           else (let jessie_129 = (raise (Loop_exit_exc void)) in void));
          (raise (Loop_continue_exc void)) end in void) with
         Loop_continue_exc jessie_10 -> void end end done) with
      Loop_exit_exc jessie_9 -> void end))); (raise Return) end with
   Return -> void end) { (JC_103: true) }

let FlagStatic_flag_ensures_sorts =
 fun (t_1 : Object pointer) ->
  { (left_valid_struct_intM(t_1, (0), Object_alloc_table)
    and (JC_101: is_color_array(t_1, Object_alloc_table, intM_intP))) }
  (init:
  try
   begin
     (let b_0 = ref (K_60: (0)) in
     (let i_3 = ref (K_59: (0)) in
     (let r_0 =
     ref (K_58:
         (let jessie_134 = t_1 in
         (JC_142: (java_array_length_intM jessie_134)))) in
     try
      (loop_6:
      while true do
      { invariant (JC_153: true)  }
       begin
         [ { } unit reads Object_alloc_table,b_0,i_3,intM_intP,r_0
           { (JC_151:
             ((JC_143: is_color_array(t_1, Object_alloc_table, intM_intP))
             and ((JC_144: le_int((0), b_0))
                 and ((JC_145: le_int(b_0, i_3))
                     and ((JC_146: le_int(i_3, r_0))
                         and ((JC_147:
                              le_int(r_0,
                              add_int(offset_max(Object_alloc_table, t_1),
                              (1))))
                             and ((JC_148:
                                  is_monochrome(t_1, (0), b_0,
                                  FlagStatic_BLUE, intM_intP))
                                 and ((JC_149:
                                      is_monochrome(t_1, b_0, i_3,
                                      FlagStatic_WHITE, intM_intP))
                                     and (JC_150:
                                         is_monochrome(t_1, r_0,
                                         add_int(offset_max(Object_alloc_table,
                                                 t_1),
                                         (1)), FlagStatic_RED, intM_intP)))))))))) } ];
        try
         (let jessie_157 =
         begin
           (if (K_57: ((lt_int_ !i_3) !r_0))
           then
            (let jessie_7 =
            (K_56: ((safe_acc_ !intM_intP) ((shift t_1) !i_3))) in
            try
             begin
               (if ((eq_int_ jessie_7) FlagStatic_BLUE)
               then
                (let jessie_145 =
                (K_52:
                begin
                  (let jessie_144 = t_1 in
                  (let jessie_140 =
                  (K_50:
                  (let jessie_4 = !b_0 in
                  begin
                    (let jessie_143 = (b_0 := ((add_int jessie_4) (1))) in
                    void); jessie_4 end)) in
                  (let jessie_136 =
                  (K_51:
                  (let jessie_5 = !i_3 in
                  begin
                    (let jessie_139 = (i_3 := ((add_int jessie_5) (1))) in
                    void); jessie_5 end)) in
                  (JC_155:
                  (((FlagStatic_swap jessie_144) jessie_140) jessie_136)))));
                 (raise (Loop_exit_exc void)) end) in void) else void);
              (if (((eq_int_ jessie_7) FlagStatic_WHITE) || ((eq_int_ jessie_7) FlagStatic_BLUE))
              then
               (let jessie_150 =
               (K_53:
               begin
                 (let jessie_149 =
                 (let jessie_6 = !i_3 in
                 begin
                   (let jessie_148 = (i_3 := ((add_int jessie_6) (1))) in
                   void); jessie_6 end) in void);
                (raise (Loop_exit_exc void)) end) in void) else void);
              (if (((eq_int_ jessie_7) FlagStatic_RED) || (((eq_int_ jessie_7) FlagStatic_WHITE) || 
                                                          ((eq_int_ jessie_7) FlagStatic_BLUE)))
              then
               (let jessie_155 =
               (K_55:
               begin
                 (let jessie_154 = t_1 in
                 (let jessie_152 =
                 (K_54: begin   (r_0 := ((sub_int !r_0) (1))); !r_0 end) in
                 (let jessie_151 = !i_3 in
                 (JC_156:
                 (((FlagStatic_swap jessie_154) jessie_152) jessie_151)))));
                (raise (Loop_exit_exc void)) end) in void) else void) end
             with Loop_exit_exc jessie_8 -> void end)
           else (let jessie_156 = (raise (Loop_exit_exc void)) in void));
          (raise (Loop_continue_exc void)) end in void) with
         Loop_continue_exc jessie_10 -> void end end done) with
      Loop_exit_exc jessie_9 -> void end))); (raise Return) end with
   Return -> void end)
  { (JC_107:
    (exists b:int.
     (exists r:int.
      (is_monochrome(t_1, (0), b, FlagStatic_BLUE, intM_intP)
      and (is_monochrome(t_1, b, r, FlagStatic_WHITE, intM_intP)
          and is_monochrome(t_1, r,
              add_int(offset_max(Object_alloc_table, t_1), (1)),
              FlagStatic_RED, intM_intP)))))) }

let FlagStatic_flag_safety =
 fun (t_1 : Object pointer) ->
  { (left_valid_struct_intM(t_1, (0), Object_alloc_table)
    and (JC_101: is_color_array(t_1, Object_alloc_table, intM_intP))) }
  (init:
  try
   begin
     (let b_0 = ref (K_60: (0)) in
     (let i_3 = ref (K_59: (0)) in
     (let r_0 =
     ref (K_58:
         (let jessie_80 = t_1 in
         (JC_110:
         (assert { ge_int(offset_max(Object_alloc_table, jessie_80), (-1)) };
         (JC_109: (java_array_length_intM_requires jessie_80)))))) in
     try
      (loop_4:
      while true do
      { invariant (JC_121: true) variant (JC_126 : sub_int(r_0, i_3)) }
       begin
         [ { } unit reads Object_alloc_table,b_0,i_3,intM_intP,r_0
           { (JC_119:
             ((JC_111: is_color_array(t_1, Object_alloc_table, intM_intP))
             and ((JC_112: le_int((0), b_0))
                 and ((JC_113: le_int(b_0, i_3))
                     and ((JC_114: le_int(i_3, r_0))
                         and ((JC_115:
                              le_int(r_0,
                              add_int(offset_max(Object_alloc_table, t_1),
                              (1))))
                             and ((JC_116:
                                  is_monochrome(t_1, (0), b_0,
                                  FlagStatic_BLUE, intM_intP))
                                 and ((JC_117:
                                      is_monochrome(t_1, b_0, i_3,
                                      FlagStatic_WHITE, intM_intP))
                                     and (JC_118:
                                         is_monochrome(t_1, r_0,
                                         add_int(offset_max(Object_alloc_table,
                                                 t_1),
                                         (1)), FlagStatic_RED, intM_intP)))))))))) } ];
        try
         (let jessie_103 =
         begin
           (if (K_57: ((lt_int_ !i_3) !r_0))
           then
            (let jessie_7 =
            (K_56:
            (JC_123:
            ((((offset_acc_ !Object_alloc_table) !intM_intP) t_1) !i_3))) in
            try
             begin
               (if ((eq_int_ jessie_7) FlagStatic_BLUE)
               then
                (let jessie_91 =
                (K_52:
                begin
                  (let jessie_90 = t_1 in
                  (let jessie_86 =
                  (K_50:
                  (let jessie_4 = !b_0 in
                  begin
                    (let jessie_89 = (b_0 := ((add_int jessie_4) (1))) in
                    void); jessie_4 end)) in
                  (let jessie_82 =
                  (K_51:
                  (let jessie_5 = !i_3 in
                  begin
                    (let jessie_85 = (i_3 := ((add_int jessie_5) (1))) in
                    void); jessie_5 end)) in
                  (JC_124:
                  (((FlagStatic_swap_requires jessie_90) jessie_86) jessie_82)))));
                 (raise (Loop_exit_exc void)) end) in void) else void);
              (if (((eq_int_ jessie_7) FlagStatic_WHITE) || ((eq_int_ jessie_7) FlagStatic_BLUE))
              then
               (let jessie_96 =
               (K_53:
               begin
                 (let jessie_95 =
                 (let jessie_6 = !i_3 in
                 begin
                   (let jessie_94 = (i_3 := ((add_int jessie_6) (1))) in
                   void); jessie_6 end) in void);
                (raise (Loop_exit_exc void)) end) in void) else void);
              (if (((eq_int_ jessie_7) FlagStatic_RED) || (((eq_int_ jessie_7) FlagStatic_WHITE) || 
                                                          ((eq_int_ jessie_7) FlagStatic_BLUE)))
              then
               (let jessie_101 =
               (K_55:
               begin
                 (let jessie_100 = t_1 in
                 (let jessie_98 =
                 (K_54: begin   (r_0 := ((sub_int !r_0) (1))); !r_0 end) in
                 (let jessie_97 = !i_3 in
                 (JC_125:
                 (((FlagStatic_swap_requires jessie_100) jessie_98) jessie_97)))));
                (raise (Loop_exit_exc void)) end) in void) else void) end
             with Loop_exit_exc jessie_8 -> void end)
           else (let jessie_102 = (raise (Loop_exit_exc void)) in void));
          (raise (Loop_continue_exc void)) end in void) with
         Loop_continue_exc jessie_10 -> void end end done) with
      Loop_exit_exc jessie_9 -> void end))); (raise Return) end with
   Return -> void end) { true }

let FlagStatic_isMonochrome_ensures_decides_monochromatic =
 fun (t : Object pointer) (i : int) (j : int) (c_0 : int) ->
  { (left_valid_struct_intM(t, (0), Object_alloc_table)
    and (JC_41:
        ((JC_37: Non_null_intM(t, Object_alloc_table))
        and ((JC_38: le_int((0), i))
            and ((JC_39: le_int(i, j))
                and (JC_40:
                    le_int(j,
                    add_int(offset_max(Object_alloc_table, t), (1))))))))) }
  (init:
  (let return = ref (any_bool void) in
  try
   begin
     (let k_0 = ref (K_9: i) in
     try
      (loop_3:
      while true do
      { invariant (JC_67: true)  }
       begin
         [ { } unit reads intM_intP,k_0
           { (JC_65:
             ((JC_63: le_int(i, k_0))
             and (JC_64:
                 (forall l:int.
                  ((le_int(i, l) and lt_int(l, k_0)) ->
                   eq_int(select(intM_intP, shift(t, l)), c_0)))))) } ];
        try
         (let jessie_32 =
         begin
           (if (K_17: ((lt_int_ !k_0) j))
           then
            (if (K_15:
                ((neq_int_ (K_14: ((safe_acc_ !intM_intP) ((shift t) !k_0)))) c_0))
            then begin   (return := false); (raise Return) end else void)
           else (let jessie_31 = (raise (Loop_exit_exc void)) in void));
          (raise (Loop_continue_exc void)) end in void) with
         Loop_continue_exc jessie_3 ->
         (let jessie_36 =
         (K_16:
         (let jessie_1 = !k_0 in
         begin
           (let jessie_35 = (k_0 := ((add_int jessie_1) (1))) in void);
          jessie_1 end)) in void) end end done) with
      Loop_exit_exc jessie_2 -> void end); (return := true); (raise Return);
    absurd  end with Return -> !return end))
  { (JC_47: ((result = true) <-> is_monochrome(t, i, j, c_0, intM_intP))) }

let FlagStatic_isMonochrome_ensures_default =
 fun (t : Object pointer) (i : int) (j : int) (c_0 : int) ->
  { (left_valid_struct_intM(t, (0), Object_alloc_table)
    and (JC_41:
        ((JC_37: Non_null_intM(t, Object_alloc_table))
        and ((JC_38: le_int((0), i))
            and ((JC_39: le_int(i, j))
                and (JC_40:
                    le_int(j,
                    add_int(offset_max(Object_alloc_table, t), (1))))))))) }
  (init:
  (let return = ref (any_bool void) in
  try
   begin
     (let k_0 = ref (K_9: i) in
     try
      (loop_2:
      while true do
      { invariant
          (JC_59:
          ((JC_57: le_int(i, k_0))
          and (JC_58:
              (forall l:int.
               ((le_int(i, l) and lt_int(l, k_0)) ->
                eq_int(select(intM_intP, shift(t, l)), c_0))))))  }
       begin
         [ { } unit { true } ];
        try
         (let jessie_23 =
         begin
           (if (K_17: ((lt_int_ !k_0) j))
           then
            (if (K_15:
                ((neq_int_ (K_14: ((safe_acc_ !intM_intP) ((shift t) !k_0)))) c_0))
            then begin   (return := false); (raise Return) end else void)
           else (let jessie_22 = (raise (Loop_exit_exc void)) in void));
          (raise (Loop_continue_exc void)) end in void) with
         Loop_continue_exc jessie_3 ->
         (let jessie_27 =
         (K_16:
         (let jessie_1 = !k_0 in
         begin
           (let jessie_26 = (k_0 := ((add_int jessie_1) (1))) in void);
          jessie_1 end)) in void) end end done) with
      Loop_exit_exc jessie_2 -> void end); (return := true); (raise Return);
    absurd  end with Return -> !return end)) { (JC_43: true) }

let FlagStatic_isMonochrome_safety =
 fun (t : Object pointer) (i : int) (j : int) (c_0 : int) ->
  { (left_valid_struct_intM(t, (0), Object_alloc_table)
    and (JC_41:
        ((JC_37: Non_null_intM(t, Object_alloc_table))
        and ((JC_38: le_int((0), i))
            and ((JC_39: le_int(i, j))
                and (JC_40:
                    le_int(j,
                    add_int(offset_max(Object_alloc_table, t), (1))))))))) }
  (init:
  (let return = ref (any_bool void) in
  try
   begin
     (let k_0 = ref (K_9: i) in
     try
      (loop_1:
      while true do
      { invariant (JC_53: true) variant (JC_56 : sub_int(j, k_0)) }
       begin
         [ { } unit reads intM_intP,k_0
           { (JC_51:
             ((JC_49: le_int(i, k_0))
             and (JC_50:
                 (forall l:int.
                  ((le_int(i, l) and lt_int(l, k_0)) ->
                   eq_int(select(intM_intP, shift(t, l)), c_0)))))) } ];
        try
         (let jessie_14 =
         begin
           (if (K_17: ((lt_int_ !k_0) j))
           then
            (if (K_15:
                ((neq_int_ (K_14:
                           (JC_55:
                           ((((offset_acc_ !Object_alloc_table) !intM_intP) t) !k_0)))) c_0))
            then begin   (return := false); (raise Return) end else void)
           else (let jessie_13 = (raise (Loop_exit_exc void)) in void));
          (raise (Loop_continue_exc void)) end in void) with
         Loop_continue_exc jessie_3 ->
         (let jessie_18 =
         (K_16:
         (let jessie_1 = !k_0 in
         begin
           (let jessie_17 = (k_0 := ((add_int jessie_1) (1))) in void);
          jessie_1 end)) in void) end end done) with
      Loop_exit_exc jessie_2 -> void end); (return := true); (raise Return);
    absurd  end with Return -> !return end)) { true }

let FlagStatic_swap_ensures_default =
 fun (t_0 : Object pointer) (i_0 : int) (j_0 : int) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (JC_79:
        ((JC_75: le_int((0), i_0))
        and ((JC_76:
             lt_int(i_0, add_int(offset_max(Object_alloc_table, t_0), (1))))
            and ((JC_77: le_int((0), j_0))
                and (JC_78:
                    lt_int(j_0,
                    add_int(offset_max(Object_alloc_table, t_0), (1))))))))) }
  (init:
  try
   begin
     (let jessie_63 =
     (let z = (K_31: ((safe_acc_ !intM_intP) ((shift t_0) i_0))) in
     (K_29:
     begin
       (let jessie_57 =
       (let jessie_53 = (K_28: ((safe_acc_ !intM_intP) ((shift t_0) j_0))) in
       (let jessie_56 = ((shift t_0) i_0) in
       (((safe_upd_ intM_intP) jessie_56) jessie_53))) in void);
      (K_30:
      (let jessie_59 = z in
      (let jessie_62 = ((shift t_0) j_0) in
      begin   (((safe_upd_ intM_intP) jessie_62) jessie_59); jessie_59 end)))
     end)) in void); (raise Return) end with Return -> void end)
  { (JC_81: true) }

let FlagStatic_swap_ensures_i_j_swapped =
 fun (t_0 : Object pointer) (i_0 : int) (j_0 : int) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (JC_79:
        ((JC_75: le_int((0), i_0))
        and ((JC_76:
             lt_int(i_0, add_int(offset_max(Object_alloc_table, t_0), (1))))
            and ((JC_77: le_int((0), j_0))
                and (JC_78:
                    lt_int(j_0,
                    add_int(offset_max(Object_alloc_table, t_0), (1))))))))) }
  (init:
  try
   begin
     (let jessie_76 =
     (let z = (K_31: ((safe_acc_ !intM_intP) ((shift t_0) i_0))) in
     (K_29:
     begin
       (let jessie_70 =
       (let jessie_66 = (K_28: ((safe_acc_ !intM_intP) ((shift t_0) j_0))) in
       (let jessie_69 = ((shift t_0) i_0) in
       (((safe_upd_ intM_intP) jessie_69) jessie_66))) in void);
      (K_30:
      (let jessie_72 = z in
      (let jessie_75 = ((shift t_0) j_0) in
      begin   (((safe_upd_ intM_intP) jessie_75) jessie_72); jessie_72 end)))
     end)) in void); (raise Return) end with Return -> void end)
  { (JC_89:
    ((JC_87:
     ((JC_85:
      eq_int(select(intM_intP, shift(t_0, i_0)),
      select(intM_intP@, shift(t_0@, j_0@))))
     and (JC_86:
         eq_int(select(intM_intP, shift(t_0, j_0)),
         select(intM_intP@, shift(t_0@, i_0@))))))
    and (JC_88:
        not_assigns(Object_alloc_table@, intM_intP@, intM_intP,
        pset_union(pset_range(pset_singleton(t_0@), j_0@, j_0@),
        pset_range(pset_singleton(t_0@), i_0@, i_0@)))))) }

let FlagStatic_swap_safety =
 fun (t_0 : Object pointer) (i_0 : int) (j_0 : int) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (JC_79:
        ((JC_75: le_int((0), i_0))
        and ((JC_76:
             lt_int(i_0, add_int(offset_max(Object_alloc_table, t_0), (1))))
            and ((JC_77: le_int((0), j_0))
                and (JC_78:
                    lt_int(j_0,
                    add_int(offset_max(Object_alloc_table, t_0), (1))))))))) }
  (init:
  try
   begin
     (let jessie_50 =
     (let z =
     (K_31:
     (JC_95: ((((offset_acc_ !Object_alloc_table) !intM_intP) t_0) i_0))) in
     (K_29:
     begin
       (let jessie_44 =
       (let jessie_40 =
       (K_28:
       (JC_96: ((((offset_acc_ !Object_alloc_table) !intM_intP) t_0) j_0))) in
       (let jessie_41 = t_0 in
       (let jessie_42 = i_0 in
       (let jessie_43 = ((shift jessie_41) jessie_42) in
       (JC_97:
       (((((offset_upd_ !Object_alloc_table) intM_intP) jessie_41) jessie_42) jessie_40)))))) in
       void);
      (K_30:
      (let jessie_46 = z in
      (let jessie_47 = t_0 in
      (let jessie_48 = j_0 in
      (let jessie_49 = ((shift jessie_47) jessie_48) in
      begin
        (JC_98:
        (((((offset_upd_ !Object_alloc_table) intM_intP) jessie_47) jessie_48) jessie_46));
       jessie_46 end))))) end)) in void); (raise Return) end with Return ->
   void end) { true }

let cons_FlagStatic_ensures_default =
 fun (this_1 : Object pointer) ->
  { valid_struct_FlagStatic(this_1, (0), (0), Object_alloc_table) }
  (init: try begin   void; (raise Return) end with Return -> void end)
  { (JC_161: true) }

let cons_FlagStatic_safety =
 fun (this_1 : Object pointer) ->
  { valid_struct_FlagStatic(this_1, (0), (0), Object_alloc_table) }
  (init: try begin   void; (raise Return) end with Return -> void end)
  { true }

let cons_Object_ensures_default =
 fun (this_12 : Object pointer) ->
  { valid_struct_Object(this_12, (0), (0), Object_alloc_table) }
  (init: try begin   void; (raise Return) end with Return -> void end)
  { (JC_257: true) }

let cons_Object_safety =
 fun (this_12 : Object pointer) ->
  { valid_struct_Object(this_12, (0), (0), Object_alloc_table) }
  (init: try begin   void; (raise Return) end with Return -> void end)
  { true }


========== make project execution ==========
why --project [...] why/FlagStatic.why
========== file tests/java/why/FlagStatic.wpr ==========
<project name="FlagStatic" context="why/FlagStatic_ctx.why">
  <function name="Method swap">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/FlagStatic_po73.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "69" begin = "9" end = "13"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/FlagStatic_po74.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "69" begin = "9" end = "13"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/FlagStatic_po75.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "70" begin = "8" end = "12"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/FlagStatic_po76.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "70" begin = "8" end = "12"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `i_j_swapped'">
    <goal why_file="why/FlagStatic_po70.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "66" begin = "18" end = "36"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/FlagStatic_po71.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "66" begin = "40" end = "58"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/FlagStatic_po72.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "68" begin = "24" end = "28"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Method isMonochrome">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/FlagStatic_po66.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "59" begin = "33" end = "37"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/FlagStatic_po67.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "59" begin = "33" end = "37"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/FlagStatic_po68.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "57" begin = "22" end = "27"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/FlagStatic_po69.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "57" begin = "22" end = "27"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `decides_monochromatic'">
    <goal why_file="why/FlagStatic_po58.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "52" begin = "18" end = "53"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/FlagStatic_po59.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "52" begin = "18" end = "53"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/FlagStatic_po60.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "52" begin = "18" end = "53"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/FlagStatic_po61.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "52" begin = "18" end = "53"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/FlagStatic_po62.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "55" begin = "24" end = "30"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/FlagStatic_po63.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "56" begin = "8" end = "49"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/FlagStatic_po64.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "55" begin = "24" end = "30"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po65.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "56" begin = "8" end = "49"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    </behavior>
  </function>
  <function name="Method flag">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/FlagStatic_po39.why">
      <location file = "why/FlagStatic.why" line = "1015" begin = "19" end = "74"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/FlagStatic_po40.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "96" begin = "13" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/FlagStatic_po41.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "96" begin = "13" end = "17"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/FlagStatic_po42.why">
      <location file = "HOME/tests/java/FlagStatic.jc" line = "188" begin = "28" end = "130"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/FlagStatic_po43.why">
      <location file = "HOME/tests/java/FlagStatic.jc" line = "188" begin = "28" end = "130"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/FlagStatic_po44.why">
      <location file = "HOME/tests/java/FlagStatic.jc" line = "188" begin = "28" end = "130"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/FlagStatic_po45.why">
      <location file = "HOME/tests/java/FlagStatic.jc" line = "188" begin = "28" end = "130"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/FlagStatic_po46.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "93" begin = "18" end = "23"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/FlagStatic_po47.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "93" begin = "18" end = "23"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/FlagStatic_po48.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "93" begin = "18" end = "23"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/FlagStatic_po49.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "93" begin = "18" end = "23"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/FlagStatic_po50.why">
      <location file = "HOME/tests/java/FlagStatic.jc" line = "199" begin = "28" end = "72"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/FlagStatic_po51.why">
      <location file = "HOME/tests/java/FlagStatic.jc" line = "199" begin = "28" end = "72"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/FlagStatic_po52.why">
      <location file = "HOME/tests/java/FlagStatic.jc" line = "199" begin = "28" end = "72"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/FlagStatic_po53.why">
      <location file = "HOME/tests/java/FlagStatic.jc" line = "199" begin = "28" end = "72"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/FlagStatic_po54.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "93" begin = "18" end = "23"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/FlagStatic_po55.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "93" begin = "18" end = "23"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/FlagStatic_po56.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "93" begin = "18" end = "23"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/FlagStatic_po57.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "93" begin = "18" end = "23"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `sorts'">
    <goal why_file="why/FlagStatic_po38.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "78" begin = "13" end = "169"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/FlagStatic_po1.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "7" end = "13"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/FlagStatic_po2.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "12" end = "18"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/FlagStatic_po3.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "17" end = "23"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/FlagStatic_po4.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "22" end = "35"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/FlagStatic_po5.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "90" begin = "7" end = "32"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/FlagStatic_po6.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "91" begin = "7" end = "33"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/FlagStatic_po7.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "92" begin = "14" end = "45"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/FlagStatic_po8.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "88" begin = "7" end = "24"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po9.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "7" end = "13"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po10.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "12" end = "18"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po11.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "17" end = "23"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po12.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "22" end = "35"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po13.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "90" begin = "7" end = "32"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po14.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "91" begin = "7" end = "33"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po15.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "92" begin = "14" end = "45"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po16.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "7" end = "13"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po17.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "12" end = "18"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po18.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "17" end = "23"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po19.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "22" end = "35"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po20.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "90" begin = "7" end = "32"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po21.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "91" begin = "7" end = "33"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po22.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "92" begin = "14" end = "45"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po23.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "88" begin = "7" end = "24"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po24.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "7" end = "13"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po25.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "12" end = "18"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po26.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "17" end = "23"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po27.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "22" end = "35"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po28.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "90" begin = "7" end = "32"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po29.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "91" begin = "7" end = "33"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po30.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "92" begin = "14" end = "45"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po31.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "7" end = "13"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po32.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "12" end = "18"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po33.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "17" end = "23"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po34.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "89" begin = "22" end = "35"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po35.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "90" begin = "7" end = "32"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po36.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "91" begin = "7" end = "33"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/FlagStatic_po37.why">
      <location file = "HOME/tests/java/FlagStatic.java" line = "92" begin = "14" end = "45"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    </behavior>
  </function>
  <function name="Constructor of class Object">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Constructor of class FlagStatic">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
</project>
========== file tests/java/why/FlagStatic_ctx.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type Object

type interface

logic Exception_tag : Object tag_id

logic Object_tag : Object tag_id

axiom Exception_parenttag_Object: parenttag(Exception_tag, Object_tag)

function FlagStatic_BLUE() : int = 1

function FlagStatic_RED() : int = 3

function FlagStatic_WHITE() : int = 2

logic FlagStatic_tag : Object tag_id

axiom FlagStatic_parenttag_Object: parenttag(FlagStatic_tag, Object_tag)

predicate Non_null_Object(x_0: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x_0) = 0)

predicate Non_null_intM(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) >= (-1))

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag : Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag : Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

logic intM_tag : Object tag_id

axiom intM_parenttag_Object: parenttag(intM_tag, Object_tag)

logic interface_tag : interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate is_color(c: int) =
  ((c = FlagStatic_BLUE) or ((c = FlagStatic_WHITE) or (c = FlagStatic_RED)))

predicate is_color_array(t_2: Object pointer,
  Object_alloc_table_at_L: Object alloc_table, intM_intP_at_L: (Object,
  int) memory) =
  (Non_null_intM(t_2, Object_alloc_table_at_L) and
   (forall i_1:int.
     (((0 <= i_1) and (i_1 < (offset_max(Object_alloc_table_at_L, t_2) + 1))) ->
      is_color(select(intM_intP_at_L, shift(t_2, i_1))))))

predicate is_monochrome(t_3: Object pointer, i_2: int, j_1: int, c_1: int,
  intM_intP_at_L: (Object, int) memory) =
  (forall k:int.
    (((i_2 <= k) and (k < j_1)) -> (select(intM_intP_at_L, shift(t_3,
     k)) = c_1)))

predicate left_valid_struct_Object(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = (offset_min(Object_alloc_table,
  p) <= a)

predicate left_valid_struct_Exception(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_FlagStatic(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_String(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_Throwable(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_intM(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_interface(p: interface pointer, a: int,
  interface_alloc_table: interface alloc_table) =
  (offset_min(interface_alloc_table, p) <= a)

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  p) >= b)

predicate right_valid_struct_Exception(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_FlagStatic(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_String(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_Throwable(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_intM(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_interface(p: interface pointer, b: int,
  interface_alloc_table: interface alloc_table) =
  (offset_max(interface_alloc_table, p) >= b)

predicate strict_valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Exception(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_FlagStatic(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Exception(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_FlagStatic(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_intM(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Exception(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_FlagStatic(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

========== file tests/java/why/FlagStatic_po10.why ==========
goal FlagStatic_flag_ensures_default_po_10:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136": ("JC_130": ("JC_130": (b_0_0 <= i_3_0))))

========== file tests/java/why/FlagStatic_po11.why ==========
goal FlagStatic_flag_ensures_default_po_11:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136": ("JC_131": ("JC_131": (i_3_0 <= r_0))))

========== file tests/java/why/FlagStatic_po12.why ==========
goal FlagStatic_flag_ensures_default_po_12:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136":
  ("JC_132": ("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1)))))

========== file tests/java/why/FlagStatic_po13.why ==========
goal FlagStatic_flag_ensures_default_po_13:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136":
  ("JC_133":
  ("JC_133": is_monochrome(t_1, 0, b_0_0, FlagStatic_BLUE, intM_intP1))))

========== file tests/java/why/FlagStatic_po14.why ==========
goal FlagStatic_flag_ensures_default_po_14:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136":
  ("JC_134":
  ("JC_134": is_monochrome(t_1, b_0_0, i_3_0, FlagStatic_WHITE, intM_intP1))))

========== file tests/java/why/FlagStatic_po15.why ==========
goal FlagStatic_flag_ensures_default_po_15:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136":
  ("JC_135":
  ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
  t_1) + 1), FlagStatic_RED, intM_intP1))))

========== file tests/java/why/FlagStatic_po16.why ==========
goal FlagStatic_flag_ensures_default_po_16:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136": ("JC_129": ("JC_129": (0 <= b_0))))

========== file tests/java/why/FlagStatic_po17.why ==========
goal FlagStatic_flag_ensures_default_po_17:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136": ("JC_130": ("JC_130": (b_0 <= i_3_0))))

========== file tests/java/why/FlagStatic_po18.why ==========
goal FlagStatic_flag_ensures_default_po_18:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136": ("JC_131": ("JC_131": (i_3_0 <= r_0))))

========== file tests/java/why/FlagStatic_po19.why ==========
goal FlagStatic_flag_ensures_default_po_19:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136":
  ("JC_132": ("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1)))))

========== file tests/java/why/FlagStatic_po1.why ==========
goal FlagStatic_flag_ensures_default_po_1:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136": ("JC_129": ("JC_129": (0 <= 0))))

========== file tests/java/why/FlagStatic_po20.why ==========
goal FlagStatic_flag_ensures_default_po_20:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136":
  ("JC_133":
  ("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0))))

========== file tests/java/why/FlagStatic_po21.why ==========
goal FlagStatic_flag_ensures_default_po_21:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136":
  ("JC_134":
  ("JC_134": is_monochrome(t_1, b_0, i_3_0, FlagStatic_WHITE, intM_intP0))))

========== file tests/java/why/FlagStatic_po22.why ==========
goal FlagStatic_flag_ensures_default_po_22:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136":
  ("JC_135":
  ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
  t_1) + 1), FlagStatic_RED, intM_intP0))))

========== file tests/java/why/FlagStatic_po23.why ==========
goal FlagStatic_flag_ensures_default_po_23:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136":
  ("JC_128": ("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP1))))

========== file tests/java/why/FlagStatic_po24.why ==========
goal FlagStatic_flag_ensures_default_po_24:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136": ("JC_129": ("JC_129": (0 <= b_0))))

========== file tests/java/why/FlagStatic_po25.why ==========
goal FlagStatic_flag_ensures_default_po_25:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136": ("JC_130": ("JC_130": (b_0 <= i_3))))

========== file tests/java/why/FlagStatic_po26.why ==========
goal FlagStatic_flag_ensures_default_po_26:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136": ("JC_131": ("JC_131": (i_3 <= r_0_0))))

========== file tests/java/why/FlagStatic_po27.why ==========
goal FlagStatic_flag_ensures_default_po_27:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136":
  ("JC_132":
  ("JC_132": (r_0_0 <= (offset_max(Object_alloc_table, t_1) + 1)))))

========== file tests/java/why/FlagStatic_po28.why ==========
goal FlagStatic_flag_ensures_default_po_28:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136":
  ("JC_133":
  ("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP1))))

========== file tests/java/why/FlagStatic_po29.why ==========
goal FlagStatic_flag_ensures_default_po_29:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136":
  ("JC_134":
  ("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE, intM_intP1))))

========== file tests/java/why/FlagStatic_po2.why ==========
goal FlagStatic_flag_ensures_default_po_2:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136": ("JC_130": ("JC_130": (0 <= 0))))

========== file tests/java/why/FlagStatic_po30.why ==========
goal FlagStatic_flag_ensures_default_po_30:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136":
  ("JC_135":
  ("JC_135": is_monochrome(t_1, r_0_0, (offset_max(Object_alloc_table,
  t_1) + 1), FlagStatic_RED, intM_intP1))))

========== file tests/java/why/FlagStatic_po31.why ==========
goal FlagStatic_flag_ensures_default_po_31:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136": ("JC_129": ("JC_129": (0 <= b_0))))

========== file tests/java/why/FlagStatic_po32.why ==========
goal FlagStatic_flag_ensures_default_po_32:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136": ("JC_130": ("JC_130": (b_0 <= i_3))))

========== file tests/java/why/FlagStatic_po33.why ==========
goal FlagStatic_flag_ensures_default_po_33:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136": ("JC_131": ("JC_131": (i_3 <= r_0))))

========== file tests/java/why/FlagStatic_po34.why ==========
goal FlagStatic_flag_ensures_default_po_34:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136":
  ("JC_132": ("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1)))))

========== file tests/java/why/FlagStatic_po35.why ==========
goal FlagStatic_flag_ensures_default_po_35:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136":
  ("JC_133":
  ("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0))))

========== file tests/java/why/FlagStatic_po36.why ==========
goal FlagStatic_flag_ensures_default_po_36:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136":
  ("JC_134":
  ("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE, intM_intP0))))

========== file tests/java/why/FlagStatic_po37.why ==========
goal FlagStatic_flag_ensures_default_po_37:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136":
  ("JC_135":
  ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
  t_1) + 1), FlagStatic_RED, intM_intP0))))

========== file tests/java/why/FlagStatic_po38.why ==========
goal FlagStatic_flag_ensures_sorts_po_1:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_153": true) ->
  ("JC_151":
  (("JC_143": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_144": (0 <= b_0)) and
    (("JC_145": (b_0 <= i_3)) and
     (("JC_146": (i_3 <= r_0)) and
      (("JC_147": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_148": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_149": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_150": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 >= r_0) ->
  ("JC_107":
  (exists b:int.
    (exists r:int.
      (is_monochrome(t_1, 0, b, FlagStatic_BLUE, intM_intP0) and
       (is_monochrome(t_1, b, r, FlagStatic_WHITE, intM_intP0) and
        is_monochrome(t_1, r, (offset_max(Object_alloc_table, t_1) + 1),
        FlagStatic_RED, intM_intP0))))))

========== file tests/java/why/FlagStatic_po39.why ==========
goal FlagStatic_flag_safety_po_1:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1))

========== file tests/java/why/FlagStatic_po3.why ==========
goal FlagStatic_flag_ensures_default_po_3:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136": ("JC_131": ("JC_131": (0 <= result))))

========== file tests/java/why/FlagStatic_po40.why ==========
goal FlagStatic_flag_safety_po_2:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  (offset_min(Object_alloc_table, t_1) <= i_3)

========== file tests/java/why/FlagStatic_po41.why ==========
goal FlagStatic_flag_safety_po_3:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  (i_3 <= offset_max(Object_alloc_table, t_1))

========== file tests/java/why/FlagStatic_po42.why ==========
goal FlagStatic_flag_safety_po_4:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_73": ("JC_69": ("JC_69": (0 <= b_0))))

========== file tests/java/why/FlagStatic_po43.why ==========
goal FlagStatic_flag_safety_po_5:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_73":
  ("JC_70": ("JC_70": (b_0 < (offset_max(Object_alloc_table, t_1) + 1)))))

========== file tests/java/why/FlagStatic_po44.why ==========
goal FlagStatic_flag_safety_po_6:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_73": ("JC_71": ("JC_71": (0 <= i_3))))

========== file tests/java/why/FlagStatic_po45.why ==========
goal FlagStatic_flag_safety_po_7:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_73":
  ("JC_72": ("JC_72": (i_3 < (offset_max(Object_alloc_table, t_1) + 1)))))

========== file tests/java/why/FlagStatic_po46.why ==========
goal FlagStatic_flag_safety_po_8:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_73":
  (("JC_69": (0 <= b_0)) and
   (("JC_70": (b_0 < (offset_max(Object_alloc_table, t_1) + 1))) and
    (("JC_71": (0 <= i_3)) and
     ("JC_72": (i_3 < (offset_max(Object_alloc_table, t_1) + 1))))))) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  (0 <= ("JC_126": (r_0 - i_3)))

========== file tests/java/why/FlagStatic_po47.why ==========
goal FlagStatic_flag_safety_po_9:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_73":
  (("JC_69": (0 <= b_0)) and
   (("JC_70": (b_0 < (offset_max(Object_alloc_table, t_1) + 1))) and
    (("JC_71": (0 <= i_3)) and
     ("JC_72": (i_3 < (offset_max(Object_alloc_table, t_1) + 1))))))) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  (("JC_126": (r_0 - i_3_0)) < ("JC_126": (r_0 - i_3)))

========== file tests/java/why/FlagStatic_po48.why ==========
goal FlagStatic_flag_safety_po_10:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  (0 <= ("JC_126": (r_0 - i_3)))

========== file tests/java/why/FlagStatic_po49.why ==========
goal FlagStatic_flag_safety_po_11:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  (("JC_126": (r_0 - i_3_0)) < ("JC_126": (r_0 - i_3)))

========== file tests/java/why/FlagStatic_po4.why ==========
goal FlagStatic_flag_ensures_default_po_4:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136":
  ("JC_132":
  ("JC_132": (result <= (offset_max(Object_alloc_table, t_1) + 1)))))

========== file tests/java/why/FlagStatic_po50.why ==========
goal FlagStatic_flag_safety_po_12:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  ("JC_73": ("JC_69": ("JC_69": (0 <= r_0_0))))

========== file tests/java/why/FlagStatic_po51.why ==========
goal FlagStatic_flag_safety_po_13:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  ("JC_73":
  ("JC_70": ("JC_70": (r_0_0 < (offset_max(Object_alloc_table, t_1) + 1)))))

========== file tests/java/why/FlagStatic_po52.why ==========
goal FlagStatic_flag_safety_po_14:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  ("JC_73": ("JC_71": ("JC_71": (0 <= i_3))))

========== file tests/java/why/FlagStatic_po53.why ==========
goal FlagStatic_flag_safety_po_15:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  ("JC_73":
  ("JC_72": ("JC_72": (i_3 < (offset_max(Object_alloc_table, t_1) + 1)))))

========== file tests/java/why/FlagStatic_po54.why ==========
goal FlagStatic_flag_safety_po_16:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  ("JC_73":
  (("JC_69": (0 <= r_0_0)) and
   (("JC_70": (r_0_0 < (offset_max(Object_alloc_table, t_1) + 1))) and
    (("JC_71": (0 <= i_3)) and
     ("JC_72": (i_3 < (offset_max(Object_alloc_table, t_1) + 1))))))) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  (0 <= ("JC_126": (r_0 - i_3)))

========== file tests/java/why/FlagStatic_po55.why ==========
goal FlagStatic_flag_safety_po_17:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  ("JC_73":
  (("JC_69": (0 <= r_0_0)) and
   (("JC_70": (r_0_0 < (offset_max(Object_alloc_table, t_1) + 1))) and
    (("JC_71": (0 <= i_3)) and
     ("JC_72": (i_3 < (offset_max(Object_alloc_table, t_1) + 1))))))) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  (("JC_126": (r_0_0 - i_3)) < ("JC_126": (r_0 - i_3)))

========== file tests/java/why/FlagStatic_po56.why ==========
goal FlagStatic_flag_safety_po_18:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  (0 <= ("JC_126": (r_0 - i_3)))

========== file tests/java/why/FlagStatic_po57.why ==========
goal FlagStatic_flag_safety_po_19:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  (("JC_126": (r_0 - i_3)) < ("JC_126": (r_0 - i_3)))

========== file tests/java/why/FlagStatic_po58.why ==========
goal FlagStatic_isMonochrome_ensures_decides_monochromatic_po_1:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_67": true) ->
  ("JC_65":
  (("JC_63": (i <= k_0)) and
   ("JC_64":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  forall result:int.
  (result = select(intM_intP, shift(t, k_0))) ->
  (result <> c_0) ->
  forall return:bool.
  (return = false) ->
  (return = true) ->
  ("JC_47": is_monochrome(t, i, j, c_0, intM_intP))

========== file tests/java/why/FlagStatic_po59.why ==========
goal FlagStatic_isMonochrome_ensures_decides_monochromatic_po_2:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_67": true) ->
  ("JC_65":
  (("JC_63": (i <= k_0)) and
   ("JC_64":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  forall result:int.
  (result = select(intM_intP, shift(t, k_0))) ->
  (result <> c_0) ->
  forall return:bool.
  (return = false) ->
  is_monochrome(t, i, j, c_0, intM_intP) ->
  ("JC_47": (return = true))

========== file tests/java/why/FlagStatic_po5.why ==========
goal FlagStatic_flag_ensures_default_po_5:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136":
  ("JC_133":
  ("JC_133": is_monochrome(t_1, 0, 0, FlagStatic_BLUE, intM_intP))))

========== file tests/java/why/FlagStatic_po60.why ==========
goal FlagStatic_isMonochrome_ensures_decides_monochromatic_po_3:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_67": true) ->
  ("JC_65":
  (("JC_63": (i <= k_0)) and
   ("JC_64":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 >= j) ->
  forall return:bool.
  (return = true) ->
  (return = true) ->
  ("JC_47": is_monochrome(t, i, j, c_0, intM_intP))

========== file tests/java/why/FlagStatic_po61.why ==========
goal FlagStatic_isMonochrome_ensures_decides_monochromatic_po_4:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_67": true) ->
  ("JC_65":
  (("JC_63": (i <= k_0)) and
   ("JC_64":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 >= j) ->
  forall return:bool.
  (return = true) ->
  is_monochrome(t, i, j, c_0, intM_intP) ->
  ("JC_47": (return = true))

========== file tests/java/why/FlagStatic_po62.why ==========
goal FlagStatic_isMonochrome_ensures_default_po_1:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  ("JC_59": ("JC_57": ("JC_57": (i <= i))))

========== file tests/java/why/FlagStatic_po63.why ==========
goal FlagStatic_isMonochrome_ensures_default_po_2:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  ("JC_59":
  ("JC_58":
  ("JC_58":
  (forall l:int.
    (((i <= l) and (l < i)) -> (select(intM_intP, shift(t, l)) = c_0))))))

========== file tests/java/why/FlagStatic_po64.why ==========
goal FlagStatic_isMonochrome_ensures_default_po_3:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_59":
  (("JC_57": (i <= k_0)) and
   ("JC_58":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  forall result:int.
  (result = select(intM_intP, shift(t, k_0))) ->
  (result = c_0) ->
  forall k_0_0:int.
  (k_0_0 = (k_0 + 1)) ->
  ("JC_59": ("JC_57": ("JC_57": (i <= k_0_0))))

========== file tests/java/why/FlagStatic_po65.why ==========
goal FlagStatic_isMonochrome_ensures_default_po_4:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_59":
  (("JC_57": (i <= k_0)) and
   ("JC_58":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  forall result:int.
  (result = select(intM_intP, shift(t, k_0))) ->
  (result = c_0) ->
  forall k_0_0:int.
  (k_0_0 = (k_0 + 1)) ->
  ("JC_59":
  ("JC_58":
  ("JC_58":
  (forall l:int.
    (((i <= l) and (l < k_0_0)) -> (select(intM_intP, shift(t, l)) = c_0))))))

========== file tests/java/why/FlagStatic_po66.why ==========
goal FlagStatic_isMonochrome_safety_po_1:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_53": true) ->
  ("JC_51":
  (("JC_49": (i <= k_0)) and
   ("JC_50":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  (offset_min(Object_alloc_table, t) <= k_0)

========== file tests/java/why/FlagStatic_po67.why ==========
goal FlagStatic_isMonochrome_safety_po_2:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_53": true) ->
  ("JC_51":
  (("JC_49": (i <= k_0)) and
   ("JC_50":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  (k_0 <= offset_max(Object_alloc_table, t))

========== file tests/java/why/FlagStatic_po68.why ==========
goal FlagStatic_isMonochrome_safety_po_3:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_53": true) ->
  ("JC_51":
  (("JC_49": (i <= k_0)) and
   ("JC_50":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  ((offset_min(Object_alloc_table, t) <= k_0) and
   (k_0 <= offset_max(Object_alloc_table, t))) ->
  forall result:int.
  (result = select(intM_intP, shift(t, k_0))) ->
  (result = c_0) ->
  forall k_0_0:int.
  (k_0_0 = (k_0 + 1)) ->
  (0 <= ("JC_56": (j - k_0)))

========== file tests/java/why/FlagStatic_po69.why ==========
goal FlagStatic_isMonochrome_safety_po_4:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_53": true) ->
  ("JC_51":
  (("JC_49": (i <= k_0)) and
   ("JC_50":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  ((offset_min(Object_alloc_table, t) <= k_0) and
   (k_0 <= offset_max(Object_alloc_table, t))) ->
  forall result:int.
  (result = select(intM_intP, shift(t, k_0))) ->
  (result = c_0) ->
  forall k_0_0:int.
  (k_0_0 = (k_0 + 1)) ->
  (("JC_56": (j - k_0_0)) < ("JC_56": (j - k_0)))

========== file tests/java/why/FlagStatic_po6.why ==========
goal FlagStatic_flag_ensures_default_po_6:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136":
  ("JC_134":
  ("JC_134": is_monochrome(t_1, 0, 0, FlagStatic_WHITE, intM_intP))))

========== file tests/java/why/FlagStatic_po70.why ==========
goal FlagStatic_swap_ensures_i_j_swapped_po_1:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, i_0))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, j_0))) ->
  forall intM_intP0:(Object,
  int) memory.
  (intM_intP0 = store(intM_intP, shift(t_0, i_0), result0)) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_0, j_0), result)) ->
  ("JC_89":
  ("JC_87":
  ("JC_85":
  ("JC_85": (select(intM_intP1, shift(t_0, i_0)) = select(intM_intP,
  shift(t_0, j_0)))))))

========== file tests/java/why/FlagStatic_po71.why ==========
goal FlagStatic_swap_ensures_i_j_swapped_po_2:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, i_0))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, j_0))) ->
  forall intM_intP0:(Object,
  int) memory.
  (intM_intP0 = store(intM_intP, shift(t_0, i_0), result0)) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_0, j_0), result)) ->
  ("JC_89":
  ("JC_87":
  ("JC_86":
  ("JC_86": (select(intM_intP1, shift(t_0, j_0)) = select(intM_intP,
  shift(t_0, i_0)))))))

========== file tests/java/why/FlagStatic_po72.why ==========
goal FlagStatic_swap_ensures_i_j_swapped_po_3:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, i_0))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, j_0))) ->
  forall intM_intP0:(Object,
  int) memory.
  (intM_intP0 = store(intM_intP, shift(t_0, i_0), result0)) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_0, j_0), result)) ->
  ("JC_89":
  ("JC_88":
  ("JC_88": not_assigns(Object_alloc_table, intM_intP, intM_intP1,
  pset_union(pset_range(pset_singleton(t_0), j_0, j_0),
  pset_range(pset_singleton(t_0), i_0, i_0))))))

========== file tests/java/why/FlagStatic_po73.why ==========
goal FlagStatic_swap_safety_po_1:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  (offset_min(Object_alloc_table, t_0) <= i_0)

========== file tests/java/why/FlagStatic_po74.why ==========
goal FlagStatic_swap_safety_po_2:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  (i_0 <= offset_max(Object_alloc_table, t_0))

========== file tests/java/why/FlagStatic_po75.why ==========
goal FlagStatic_swap_safety_po_3:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  ((offset_min(Object_alloc_table, t_0) <= i_0) and
   (i_0 <= offset_max(Object_alloc_table, t_0))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, i_0))) ->
  (offset_min(Object_alloc_table, t_0) <= j_0)

========== file tests/java/why/FlagStatic_po76.why ==========
goal FlagStatic_swap_safety_po_4:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  ((offset_min(Object_alloc_table, t_0) <= i_0) and
   (i_0 <= offset_max(Object_alloc_table, t_0))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, i_0))) ->
  (j_0 <= offset_max(Object_alloc_table, t_0))

========== file tests/java/why/FlagStatic_po7.why ==========
goal FlagStatic_flag_ensures_default_po_7:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136":
  ("JC_135":
  ("JC_135": is_monochrome(t_1, result, (offset_max(Object_alloc_table,
  t_1) + 1), FlagStatic_RED, intM_intP))))

========== file tests/java/why/FlagStatic_po8.why ==========
goal FlagStatic_flag_ensures_default_po_8:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136":
  ("JC_128": ("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP1))))

========== file tests/java/why/FlagStatic_po9.why ==========
goal FlagStatic_flag_ensures_default_po_9:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136": ("JC_129": ("JC_129": (0 <= b_0_0))))

========== generation of Simplify VC output ==========
why -simplify [...] why/FlagStatic.why
========== file tests/java/simplify/FlagStatic_why.sx ==========

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom abs_int_pos
 (FORALL (x) (IMPLIES (>= x 0) (EQ (abs_int x) x))))

(BG_PUSH
 ;; Why axiom abs_int_neg
 (FORALL (x) (IMPLIES (<= x 0) (EQ (abs_int x) (- 0 x)))))

(BG_PUSH
 ;; Why axiom int_max_is_ge
 (FORALL (x y) (AND (>= (int_max x y) x) (>= (int_max x y) y))))

(BG_PUSH
 ;; Why axiom int_max_is_some
 (FORALL (x y) (OR (EQ (int_max x y) x) (EQ (int_max x y) y))))

(BG_PUSH
 ;; Why axiom int_min_is_le
 (FORALL (x y) (AND (<= (int_min x y) x) (<= (int_min x y) y))))

(BG_PUSH
 ;; Why axiom int_min_is_some
 (FORALL (x y) (OR (EQ (int_min x y) x) (EQ (int_min x y) y))))

(BG_PUSH
 ;; Why axiom real_of_int_zero
 (EQ (real_of_int 0) real_constant_0_0e))

(BG_PUSH
 ;; Why axiom real_of_int_one
 (EQ (real_of_int 1) real_constant_1_0e))

(BG_PUSH
 ;; Why axiom real_of_int_add
 (FORALL (x y)
 (EQ (real_of_int (+ x y)) (real_add (real_of_int x) (real_of_int y)))))

(BG_PUSH
 ;; Why axiom real_of_int_sub
 (FORALL (x y)
 (EQ (real_of_int (- x y)) (real_sub (real_of_int x) (real_of_int y)))))

(BG_PUSH
 ;; Why axiom truncate_down_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (AND (EQ (le_real (real_of_int (truncate_real_to_int x)) x) |@true|)
 (EQ (lt_real x (real_of_int (+ (truncate_real_to_int x) 1))) |@true|)))))

(BG_PUSH
 ;; Why axiom truncate_up_neg
 (FORALL (x)
 (IMPLIES (EQ (le_real x real_constant_0_0e) |@true|)
 (AND (EQ (lt_real (real_of_int (- (truncate_real_to_int x) 1)) x) |@true|)
 (EQ (le_real x (real_of_int (truncate_real_to_int x))) |@true|)))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom real_max_is_ge
 (FORALL (x y)
 (AND (EQ (ge_real (real_max x y) x) |@true|)
 (EQ (ge_real (real_max x y) y) |@true|))))

(BG_PUSH
 ;; Why axiom real_max_is_some
 (FORALL (x y) (OR (EQ (real_max x y) x) (EQ (real_max x y) y))))

(BG_PUSH
 ;; Why axiom real_min_is_le
 (FORALL (x y)
 (AND (EQ (le_real (real_min x y) x) |@true|)
 (EQ (le_real (real_min x y) y) |@true|))))

(BG_PUSH
 ;; Why axiom real_min_is_some
 (FORALL (x y) (OR (EQ (real_min x y) x) (EQ (real_min x y) y))))

(BG_PUSH
 ;; Why axiom sqr_real_def
 (FORALL (x) (EQ (sqr_real x) (real_mul x x))))

(BG_PUSH
 ;; Why axiom sqrt_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (ge_real (real_sqrt x) real_constant_0_0e) |@true|))))

(BG_PUSH
 ;; Why axiom sqrt_sqr
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (sqr_real (real_sqrt x)) x))))

(BG_PUSH
 ;; Why axiom sqr_sqrt
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (real_sqrt (real_mul x x)) x))))

(BG_PUSH
 ;; Why axiom abs_real_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|) (EQ (real_abs x) x))))

(BG_PUSH
 ;; Why axiom abs_real_neg
 (FORALL (x)
 (IMPLIES (EQ (le_real x real_constant_0_0e) |@true|)
 (EQ (real_abs x) (real_neg x)))))

(BG_PUSH
 ;; Why axiom log_exp
 (FORALL (x) (EQ (log (exp x)) x)))

(BG_PUSH
 ;; Why axiom exp_log
 (FORALL (x)
 (IMPLIES (EQ (gt_real x real_constant_0_0e) |@true|) (EQ (exp (log x)) x))))

(BG_PUSH
 ;; Why axiom prod_pos
 (FORALL (x y)
 (AND
 (IMPLIES
 (AND (EQ (gt_real x real_constant_0_0e) |@true|)
 (EQ (gt_real y real_constant_0_0e) |@true|))
 (EQ (gt_real (real_mul x y) real_constant_0_0e) |@true|))
 (IMPLIES
 (AND (EQ (lt_real x real_constant_0_0e) |@true|)
 (EQ (lt_real y real_constant_0_0e) |@true|))
 (EQ (gt_real (real_mul x y) real_constant_0_0e) |@true|)))))

(BG_PUSH
 ;; Why axiom abs_minus
 (FORALL (x) (EQ (real_abs (real_neg x)) (real_abs x))))

(DEFPRED (valid a p) (AND (<= (offset_min a p) 0) (>= (offset_max a p) 0)))

(DEFPRED (same_block p q) (EQ (base_block p) (base_block q)))

(BG_PUSH
 ;; Why axiom address_injective
 (FORALL (p q) (IFF (EQ p q) (EQ (address p) (address q)))))

(BG_PUSH
 ;; Why axiom address_null
 (EQ (address null) 0))

(BG_PUSH
 ;; Why axiom address_shift_lt
 (FORALL (p i j)
 (IFF (< (address (shift p i)) (address (shift p j))) (< i j))))

(BG_PUSH
 ;; Why axiom address_shift_le
 (FORALL (p i j)
 (IFF (<= (address (shift p i)) (address (shift p j))) (<= i j))))

(BG_PUSH
 ;; Why axiom shift_zero
 (FORALL (p) (EQ (shift p 0) p)))

(BG_PUSH
 ;; Why axiom shift_shift
 (FORALL (p i j) (EQ (shift (shift p i) j) (shift p (+ i j)))))

(BG_PUSH
 ;; Why axiom offset_max_shift
 (FORALL (a p i) (EQ (offset_max a (shift p i)) (- (offset_max a p) i))))

(BG_PUSH
 ;; Why axiom offset_min_shift
 (FORALL (a p i) (EQ (offset_min a (shift p i)) (- (offset_min a p) i))))

(BG_PUSH
 ;; Why axiom neq_shift
 (FORALL (p i j) (IMPLIES (NEQ i j) (NEQ (shift p i) (shift p j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j) (FORALL (p) (NEQ (shift p i) (shift p j))))))

(BG_PUSH
 ;; Why axiom null_not_valid
 (FORALL (a) (NOT (valid a null))))

(BG_PUSH
 ;; Why axiom null_pointer
 (FORALL (a)
 (AND (>= (offset_min a null) 0) (<= (offset_max a null) (- 0 2)))))

(BG_PUSH
 ;; Why axiom eq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (eq_pointer_bool p1 p2) |@true|) (EQ p1 p2))))

(BG_PUSH
 ;; Why axiom neq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (neq_pointer_bool p1 p2) |@true|) (NEQ p1 p2))))

(BG_PUSH
 ;; Why axiom same_block_shift_right
 (FORALL (p q i) (IMPLIES (same_block p q) (same_block p (shift q i))))

 (FORALL (p q)
 (IMPLIES (same_block p q) (FORALL (i) (same_block p (shift q i))))))

(BG_PUSH
 ;; Why axiom same_block_shift_left
 (FORALL (p q i) (IMPLIES (same_block q p) (same_block (shift q i) p)))

 (FORALL (p q)
 (IMPLIES (same_block q p) (FORALL (i) (same_block (shift q i) p)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift
 (FORALL (p q) (IMPLIES (same_block p q) (EQ p (shift q (sub_pointer p q))))))

(BG_PUSH
 ;; Why axiom sub_pointer_self
 (FORALL (p) (EQ (sub_pointer p p) 0)))

(BG_PUSH
 ;; Why axiom sub_pointer_zero
 (FORALL (p q)
 (IMPLIES (same_block p q) (IMPLIES (EQ (sub_pointer p q) 0) (EQ p q)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_left
 (FORALL (p q i) (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_right
 (FORALL (p q i) (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom select_store_eq
 (FORALL (m p1 p2 a)
 (IMPLIES (EQ p1 p2) (EQ (select (|why__store| m p1 a) p2) a)))

 (FORALL (p1 p2)
 (IMPLIES (EQ p1 p2) (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) a)))))

(BG_PUSH
 ;; Why axiom select_store_neq
 (FORALL (m p1 p2 a)
 (IMPLIES (NEQ p1 p2) (EQ (select (|why__store| m p1 a) p2) (select m p2))))

 (FORALL (p1 p2)
 (IMPLIES (NEQ p1 p2)
 (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) (select m p2))))))

(DEFPRED (pset_disjoint ps1 ps2)
  (FORALL (p)
  (NOT (AND (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|)))))

(DEFPRED (pset_included ps1 ps2)
  (FORALL (p)
  (IMPLIES (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|))))

(BG_PUSH
 ;; Why axiom pset_included_self
 (FORALL (ps) (pset_included ps ps)))

(BG_PUSH
 ;; Why axiom pset_included_range
 (FORALL (ps a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (pset_included (pset_range ps a b) (pset_range ps c d))))

 (FORALL (a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (FORALL (ps) (pset_included (pset_range ps a b) (pset_range ps c d))))))

(BG_PUSH
 ;; Why axiom pset_included_range_all
 (FORALL (ps a b c d) (pset_included (pset_range ps a b) (pset_all ps))))

(BG_PUSH
 ;; Why axiom in_pset_empty
 (FORALL (p) (NOT (EQ (in_pset p pset_empty) |@true|))))

(BG_PUSH
 ;; Why axiom in_pset_singleton
 (FORALL (p q) (IFF (EQ (in_pset p (pset_singleton q)) |@true|) (EQ p q))))

(BG_PUSH
 ;; Why axiom in_pset_deref
 (FORALL (p m q)
 (IFF (EQ (in_pset p (pset_deref m q)) |@true|)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (select m r)))))))

(BG_PUSH
 ;; Why axiom in_pset_all
 (FORALL (p q)
 (IFF (EQ (in_pset p (pset_all q)) |@true|)
 (EXISTS (i)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))

(BG_PUSH
 ;; Why axiom in_pset_range
 (FORALL (p q a b)
 (IFF (EQ (in_pset p (pset_range q a b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_left
 (FORALL (p q b)
 (IFF (EQ (in_pset p (pset_range_left q b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_right
 (FORALL (p q a)
 (IFF (EQ (in_pset p (pset_range_right q a)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_union
 (FORALL (p s1 s2)
 (IFF (EQ (in_pset p (pset_union s1 s2)) |@true|)
 (OR (EQ (in_pset p s1) |@true|) (EQ (in_pset p s2) |@true|)))))

(BG_PUSH
 ;; Why axiom valid_pset_empty
 (FORALL (a) (EQ (valid_pset a pset_empty) |@true|)))

(BG_PUSH
 ;; Why axiom valid_pset_singleton
 (FORALL (a p)
 (IFF (EQ (valid_pset a (pset_singleton p)) |@true|) (valid a p))))

(BG_PUSH
 ;; Why axiom valid_pset_deref
 (FORALL (a m q)
 (IFF (EQ (valid_pset a (pset_deref m q)) |@true|)
 (FORALL (r p)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (EQ p (select m r))) (valid a p))))))

(BG_PUSH
 ;; Why axiom valid_pset_range
 (FORALL (a q c d)
 (IFF (EQ (valid_pset a (pset_range q c d)) |@true|)
 (FORALL (i r)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (AND (<= c i) (<= i d)))
 (valid a (shift r i)))))))

(BG_PUSH
 ;; Why axiom valid_pset_union
 (FORALL (a s1 s2)
 (IFF (EQ (valid_pset a (pset_union s1 s2)) |@true|)
 (AND (EQ (valid_pset a s1) |@true|) (EQ (valid_pset a s2) |@true|)))))

(DEFPRED (not_assigns a m1 m2 l)
  (FORALL (p)
  (IMPLIES (AND (valid a p) (NOT (EQ (in_pset p l) |@true|)))
  (EQ (select m2 p) (select m1 p)))))

(BG_PUSH
 ;; Why axiom not_assigns_refl
 (FORALL (a m l) (not_assigns a m m l)))

(BG_PUSH
 ;; Why axiom not_assigns_trans
 (FORALL (a m1 m2 m3 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))

 (FORALL (a m1 m2 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (FORALL (m3) (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))))

(BG_PUSH
 ;; Why axiom full_separated_shift1
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift2
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift3
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift4
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom subtag_bool_def
 (FORALL (t1 t2)
 (IFF (EQ (subtag_bool t1 t2) |@true|) (EQ (subtag t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom subtag_refl
 (FORALL (t) (EQ (subtag t t) |@true|)))

(BG_PUSH
 ;; Why axiom subtag_parent
 (FORALL (t1 t2 t3)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))

 (FORALL (t1 t2)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))))

(DEFPRED (instanceof a p t) (EQ (subtag (typeof a p) t) |@true|))

(BG_PUSH
 ;; Why axiom downcast_instanceof
 (FORALL (a p s) (IMPLIES (instanceof a p s) (EQ (downcast a p s) p))))

(BG_PUSH
 ;; Why axiom bottom_tag_axiom
 (FORALL (t) (EQ (subtag t bottom_tag) |@true|)))

(DEFPRED (root_tag t) (EQ (parenttag t bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom root_subtag
 (FORALL (a b c)
 (IMPLIES (root_tag a)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|)))))))

 (FORALL (a)
 (IMPLIES (root_tag a)
 (FORALL (b)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (FORALL (c)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|))))))))))

(DEFPRED (fully_packed tag_table mutable this)
  (EQ (select mutable this) (typeof tag_table this)))

(BG_PUSH
 ;; Why axiom bw_and_not_null
 (FORALL (a b) (IMPLIES (NEQ (bw_and a b) 0) (AND (NEQ a 0) (NEQ b 0)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsl a b)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_monotone
 (FORALL (a1 a2 b)
 (IMPLIES (AND (<= 0 a1) (AND (<= a1 a2) (<= 0 b)))
 (<= (lsl a1 b) (lsl a2 b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_decreases
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsr a b) a))))

(BG_PUSH
 ;; Why axiom asr_positive_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (asr a b)))))

(BG_PUSH
 ;; Why axiom asr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (asr a b) a))))

(BG_PUSH
 ;; Why axiom asr_lsr_same_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (asr a b) (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsl_of_lsr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsl (lsr a b) b) a))))

(BG_PUSH
 ;; Why axiom lsr_of_lsl_identity_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (lsr (lsl a b) b) a))))

(DEFPRED (alloc_fresh a p n)
  (FORALL (i) (IMPLIES (AND (<= 0 i) (< i n)) (NOT (valid a (shift p i))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_min
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_max
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_not_assigns_empty
 (FORALL (a1 a2 m1 m2 l p n)
 (IMPLIES
 (AND (EQ (alloc_extends a1 a2) |@true|)
 (AND (alloc_fresh a1 p n)
 (AND (not_assigns a2 m1 m2 l)
 (pset_included l (pset_all (pset_singleton p))))))
 (not_assigns a1 m1 m2 pset_empty))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_min
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_max
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom Exception_parenttag_Object
 (EQ (parenttag Exception_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom FlagStatic_BLUE_def
 (EQ FlagStatic_BLUE 1))

(BG_PUSH
 ;; Why axiom FlagStatic_RED_def
 (EQ FlagStatic_RED 3))

(BG_PUSH
 ;; Why axiom FlagStatic_WHITE_def
 (EQ FlagStatic_WHITE 2))

(BG_PUSH
 ;; Why axiom FlagStatic_parenttag_Object
 (EQ (parenttag FlagStatic_tag Object_tag) |@true|))

(DEFPRED (Non_null_Object x_0 Object_alloc_table)
  (EQ (offset_max Object_alloc_table x_0) 0))

(DEFPRED (Non_null_intM x Object_alloc_table)
  (>= (offset_max Object_alloc_table x) (- 0 1)))

(BG_PUSH
 ;; Why axiom Object_int
 (EQ (int_of_tag Object_tag) 1))

(BG_PUSH
 ;; Why axiom Object_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (Object_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom Object_parenttag_bottom
 (EQ (parenttag Object_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom Object_tags
 (FORALL (x Object_tag_table) (instanceof Object_tag_table x Object_tag)))

(BG_PUSH
 ;; Why axiom String_parenttag_Object
 (EQ (parenttag String_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom Throwable_parenttag_Object
 (EQ (parenttag Throwable_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom intM_parenttag_Object
 (EQ (parenttag intM_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_int
 (EQ (int_of_tag interface_tag) 1))

(BG_PUSH
 ;; Why axiom interface_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (interface_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom interface_parenttag_bottom
 (EQ (parenttag interface_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_tags
 (FORALL (x interface_tag_table)
 (instanceof interface_tag_table x interface_tag)))

(DEFPRED (is_color c)
  (OR (EQ c FlagStatic_BLUE)
  (OR (EQ c FlagStatic_WHITE) (EQ c FlagStatic_RED))))

(DEFPRED (is_color_array t_2 Object_alloc_table_at_L intM_intP_at_L)
  (AND (Non_null_intM t_2 Object_alloc_table_at_L)
  (FORALL (i_1)
  (IMPLIES
  (AND (<= 0 i_1) (< i_1 (+ (offset_max Object_alloc_table_at_L t_2) 1)))
  (is_color (select intM_intP_at_L (shift t_2 i_1)))))))

(DEFPRED (is_monochrome t_3 i_2 j_1 c_1 intM_intP_at_L)
  (FORALL (k)
  (IMPLIES (AND (<= i_2 k) (< k j_1))
  (EQ (select intM_intP_at_L (shift t_3 k)) c_1))))

(DEFPRED (left_valid_struct_Object p a Object_alloc_table)
  (<= (offset_min Object_alloc_table p) a))

(DEFPRED (left_valid_struct_Exception p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_FlagStatic p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_String p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_Throwable p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_intM p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_interface p a interface_alloc_table)
  (<= (offset_min interface_alloc_table p) a))

(BG_PUSH
 ;; Why axiom pointer_addr_of_Object_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (Object_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_interface_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (interface_of_pointer_address p)))))

(DEFPRED (right_valid_struct_Object p b Object_alloc_table)
  (>= (offset_max Object_alloc_table p) b))

(DEFPRED (right_valid_struct_Exception p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_FlagStatic p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_String p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_Throwable p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_intM p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_interface p b interface_alloc_table)
  (>= (offset_max interface_alloc_table p) b))

(DEFPRED (strict_valid_root_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (strict_valid_root_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (strict_valid_struct_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (strict_valid_struct_Exception p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_FlagStatic p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_String p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_Throwable p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_intM p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_bitvector_struct_Object p a b bitvector_alloc_table)
  (AND (EQ (offset_min bitvector_alloc_table p) a)
  (EQ (offset_max bitvector_alloc_table p) b)))

(DEFPRED (valid_bitvector_struct_Exception p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_FlagStatic p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_String p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_Throwable p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_intM p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_interface p a b bitvector_alloc_table)
  (AND (EQ (offset_min bitvector_alloc_table p) a)
  (EQ (offset_max bitvector_alloc_table p) b)))

(DEFPRED (valid_root_Object p a b Object_alloc_table)
  (AND (<= (offset_min Object_alloc_table p) a)
  (>= (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_root_interface p a b interface_alloc_table)
  (AND (<= (offset_min interface_alloc_table p) a)
  (>= (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_struct_Object p a b Object_alloc_table)
  (AND (<= (offset_min Object_alloc_table p) a)
  (>= (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_struct_Exception p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_FlagStatic p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_String p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_Throwable p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_intM p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_interface p a b interface_alloc_table)
  (AND (<= (offset_min interface_alloc_table p) a)
  (>= (offset_max interface_alloc_table p) b)))

;; FlagStatic_flag_ensures_default_po_1, File "HOME/tests/java/FlagStatic.java", line 89, characters 7-13
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(<= 0 0)))))))

;; FlagStatic_flag_ensures_default_po_2, File "HOME/tests/java/FlagStatic.java", line 89, characters 12-18
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(<= 0 0)))))))

;; FlagStatic_flag_ensures_default_po_3, File "HOME/tests/java/FlagStatic.java", line 89, characters 17-23
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(<= 0 result)))))))

;; FlagStatic_flag_ensures_default_po_4, File "HOME/tests/java/FlagStatic.java", line 89, characters 22-35
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(<= result (+ (offset_max Object_alloc_table t_1) 1))))))))

;; FlagStatic_flag_ensures_default_po_5, File "HOME/tests/java/FlagStatic.java", line 90, characters 7-32
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(is_monochrome t_1 0 0 FlagStatic_BLUE intM_intP)))))))

;; FlagStatic_flag_ensures_default_po_6, File "HOME/tests/java/FlagStatic.java", line 91, characters 7-33
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(is_monochrome t_1 0 0 FlagStatic_WHITE intM_intP)))))))

;; FlagStatic_flag_ensures_default_po_7, File "HOME/tests/java/FlagStatic.java", line 92, characters 14-45
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(is_monochrome
t_1 result (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP)))))))

;; FlagStatic_flag_ensures_default_po_8, File "HOME/tests/java/FlagStatic.java", line 88, characters 7-24
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 b_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 b_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) b_0 b_0))))
(is_color_array t_1 Object_alloc_table intM_intP1))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_9, File "HOME/tests/java/FlagStatic.java", line 89, characters 7-13
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 b_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 b_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) b_0 b_0))))
(<= 0 b_0_0))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_10, File "HOME/tests/java/FlagStatic.java", line 89, characters 12-18
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 b_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 b_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) b_0 b_0))))
(<= b_0_0 i_3_0))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_11, File "HOME/tests/java/FlagStatic.java", line 89, characters 17-23
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 b_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 b_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) b_0 b_0))))
(<= i_3_0 r_0))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_12, File "HOME/tests/java/FlagStatic.java", line 89, characters 22-35
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 b_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 b_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) b_0 b_0))))
(<= r_0 (+ (offset_max Object_alloc_table t_1) 1)))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_13, File "HOME/tests/java/FlagStatic.java", line 90, characters 7-32
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 b_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 b_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) b_0 b_0))))
(is_monochrome t_1 0 b_0_0 FlagStatic_BLUE intM_intP1))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_14, File "HOME/tests/java/FlagStatic.java", line 91, characters 7-33
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 b_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 b_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) b_0 b_0))))
(is_monochrome t_1 b_0_0 i_3_0 FlagStatic_WHITE intM_intP1))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_15, File "HOME/tests/java/FlagStatic.java", line 92, characters 14-45
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 b_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 b_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) b_0 b_0))))
(is_monochrome
t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP1))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_16, File "HOME/tests/java/FlagStatic.java", line 89, characters 7-13
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= 0 b_0)))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_17, File "HOME/tests/java/FlagStatic.java", line 89, characters 12-18
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= b_0 i_3_0)))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_18, File "HOME/tests/java/FlagStatic.java", line 89, characters 17-23
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= i_3_0 r_0)))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_19, File "HOME/tests/java/FlagStatic.java", line 89, characters 22-35
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(<= r_0 (+ (offset_max Object_alloc_table t_1) 1))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_20, File "HOME/tests/java/FlagStatic.java", line 90, characters 7-32
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_21, File "HOME/tests/java/FlagStatic.java", line 91, characters 7-33
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(is_monochrome t_1 b_0 i_3_0 FlagStatic_WHITE intM_intP0)))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_22, File "HOME/tests/java/FlagStatic.java", line 92, characters 14-45
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(is_monochrome
t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0)))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_23, File "HOME/tests/java/FlagStatic.java", line 88, characters 7-24
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 (- r_0 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 r_0_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 r_0_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) r_0_0 r_0_0))))
(is_color_array t_1 Object_alloc_table intM_intP1))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_24, File "HOME/tests/java/FlagStatic.java", line 89, characters 7-13
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 (- r_0 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 r_0_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 r_0_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) r_0_0 r_0_0))))
(<= 0 b_0))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_25, File "HOME/tests/java/FlagStatic.java", line 89, characters 12-18
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 (- r_0 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 r_0_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 r_0_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) r_0_0 r_0_0))))
(<= b_0 i_3))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_26, File "HOME/tests/java/FlagStatic.java", line 89, characters 17-23
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 (- r_0 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 r_0_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 r_0_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) r_0_0 r_0_0))))
(<= i_3 r_0_0))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_27, File "HOME/tests/java/FlagStatic.java", line 89, characters 22-35
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 (- r_0 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 r_0_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 r_0_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) r_0_0 r_0_0))))
(<= r_0_0 (+ (offset_max Object_alloc_table t_1) 1)))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_28, File "HOME/tests/java/FlagStatic.java", line 90, characters 7-32
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 (- r_0 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 r_0_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 r_0_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) r_0_0 r_0_0))))
(is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP1))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_29, File "HOME/tests/java/FlagStatic.java", line 91, characters 7-33
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 (- r_0 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 r_0_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 r_0_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) r_0_0 r_0_0))))
(is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP1))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_30, File "HOME/tests/java/FlagStatic.java", line 92, characters 14-45
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 (- r_0 1))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 r_0_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 r_0_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) r_0_0 r_0_0))))
(is_monochrome
t_1 r_0_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP1))))))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_31, File "HOME/tests/java/FlagStatic.java", line 89, characters 7-13
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (AND (NEQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE)))
(<= 0 b_0))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_32, File "HOME/tests/java/FlagStatic.java", line 89, characters 12-18
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (AND (NEQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE)))
(<= b_0 i_3))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_33, File "HOME/tests/java/FlagStatic.java", line 89, characters 17-23
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (AND (NEQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE)))
(<= i_3 r_0))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_34, File "HOME/tests/java/FlagStatic.java", line 89, characters 22-35
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (AND (NEQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE)))
(<= r_0 (+ (offset_max Object_alloc_table t_1) 1)))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_35, File "HOME/tests/java/FlagStatic.java", line 90, characters 7-32
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (AND (NEQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE)))
(is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_36, File "HOME/tests/java/FlagStatic.java", line 91, characters 7-33
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (AND (NEQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE)))
(is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0))))))))))))))))))

;; FlagStatic_flag_ensures_default_po_37, File "HOME/tests/java/FlagStatic.java", line 92, characters 14-45
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (AND (NEQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE)))
(is_monochrome
t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))))))))))))

;; FlagStatic_flag_ensures_sorts_po_1, File "HOME/tests/java/FlagStatic.java", line 78, characters 13-169
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (>= i_3 r_0)
(EXISTS (b)
(EXISTS (r)
(AND (is_monochrome t_1 0 b FlagStatic_BLUE intM_intP0)
(AND (is_monochrome t_1 b r FlagStatic_WHITE intM_intP0)
(is_monochrome
t_1 r (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))))))))))))

;; FlagStatic_flag_safety_po_1, File "why/FlagStatic.why", line 1015, characters 19-74
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(>= (offset_max Object_alloc_table t_1) (- 0 1))))))

;; FlagStatic_flag_safety_po_2, File "HOME/tests/java/FlagStatic.java", line 96, characters 13-17
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0) (<= (offset_min Object_alloc_table t_1) i_3)))))))))))))))

;; FlagStatic_flag_safety_po_3, File "HOME/tests/java/FlagStatic.java", line 96, characters 13-17
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0) (<= i_3 (offset_max Object_alloc_table t_1))))))))))))))))

;; FlagStatic_flag_safety_po_4, File "HOME/tests/java/FlagStatic.jc", line 188, characters 28-130
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= 0 b_0)))))))))))))))))))))))

;; FlagStatic_flag_safety_po_5, File "HOME/tests/java/FlagStatic.jc", line 188, characters 28-130
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(< b_0 (+ (offset_max Object_alloc_table t_1) 1))))))))))))))))))))))))

;; FlagStatic_flag_safety_po_6, File "HOME/tests/java/FlagStatic.jc", line 188, characters 28-130
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= 0 i_3)))))))))))))))))))))))

;; FlagStatic_flag_safety_po_7, File "HOME/tests/java/FlagStatic.jc", line 188, characters 28-130
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(< i_3 (+ (offset_max Object_alloc_table t_1) 1))))))))))))))))))))))))

;; FlagStatic_flag_safety_po_8, File "HOME/tests/java/FlagStatic.java", line 93, characters 18-23
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(IMPLIES (AND (<= 0 b_0)
         (AND (< b_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 i_3) (< i_3 (+ (offset_max Object_alloc_table t_1) 1)))))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 b_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 b_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) b_0 b_0))))
(<= 0 (- r_0 i_3)))))))))))))))))))))))))))

;; FlagStatic_flag_safety_po_9, File "HOME/tests/java/FlagStatic.java", line 93, characters 18-23
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (EQ result0 FlagStatic_BLUE)
(FORALL (b_0_0)
(IMPLIES (EQ b_0_0 (+ b_0 1))
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(IMPLIES (AND (<= 0 b_0)
         (AND (< b_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 i_3) (< i_3 (+ (offset_max Object_alloc_table t_1) 1)))))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 b_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 b_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) b_0 b_0))))
(< (- r_0 i_3_0) (- r_0 i_3)))))))))))))))))))))))))))

;; FlagStatic_flag_safety_po_10, File "HOME/tests/java/FlagStatic.java", line 93, characters 18-23
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= 0 (- r_0 i_3)))))))))))))))))))))))

;; FlagStatic_flag_safety_po_11, File "HOME/tests/java/FlagStatic.java", line 93, characters 18-23
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (< (- r_0 i_3_0) (- r_0 i_3)))))))))))))))))))))))

;; FlagStatic_flag_safety_po_12, File "HOME/tests/java/FlagStatic.jc", line 199, characters 28-72
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0) (IMPLIES (EQ r_0_0 (- r_0 1)) (<= 0 r_0_0)))))))))))))))))))))))

;; FlagStatic_flag_safety_po_13, File "HOME/tests/java/FlagStatic.jc", line 199, characters 28-72
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 (- r_0 1))
(< r_0_0 (+ (offset_max Object_alloc_table t_1) 1))))))))))))))))))))))))

;; FlagStatic_flag_safety_po_14, File "HOME/tests/java/FlagStatic.jc", line 199, characters 28-72
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0) (IMPLIES (EQ r_0_0 (- r_0 1)) (<= 0 i_3)))))))))))))))))))))))

;; FlagStatic_flag_safety_po_15, File "HOME/tests/java/FlagStatic.jc", line 199, characters 28-72
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 (- r_0 1))
(< i_3 (+ (offset_max Object_alloc_table t_1) 1))))))))))))))))))))))))

;; FlagStatic_flag_safety_po_16, File "HOME/tests/java/FlagStatic.java", line 93, characters 18-23
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 (- r_0 1))
(IMPLIES (AND (<= 0 r_0_0)
         (AND (< r_0_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 i_3) (< i_3 (+ (offset_max Object_alloc_table t_1) 1)))))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 r_0_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 r_0_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) r_0_0 r_0_0))))
(<= 0 (- r_0 i_3)))))))))))))))))))))))))))

;; FlagStatic_flag_safety_po_17, File "HOME/tests/java/FlagStatic.java", line 93, characters 18-23
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (OR (EQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_RED)
         (OR (EQ result0 FlagStatic_WHITE)
         (AND (NEQ result0 FlagStatic_WHITE) (EQ result0 FlagStatic_BLUE)))))
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 (- r_0 1))
(IMPLIES (AND (<= 0 r_0_0)
         (AND (< r_0_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 i_3) (< i_3 (+ (offset_max Object_alloc_table t_1) 1)))))
(FORALL (intM_intP1)
(IMPLIES (AND
         (AND
         (EQ (select intM_intP1 (shift t_1 r_0_0))
         (select intM_intP0 (shift t_1 i_3)))
         (EQ (select intM_intP1 (shift t_1 i_3))
         (select intM_intP0 (shift t_1 r_0_0))))
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_1) i_3 i_3) 
                                                  (pset_range
                                                  (pset_singleton t_1) r_0_0 r_0_0))))
(< (- r_0_0 i_3) (- r_0 i_3)))))))))))))))))))))))))))

;; FlagStatic_flag_safety_po_18, File "HOME/tests/java/FlagStatic.java", line 93, characters 18-23
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (AND (NEQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE)))
(<= 0 (- r_0 i_3))))))))))))))))))))))

;; FlagStatic_flag_safety_po_19, File "HOME/tests/java/FlagStatic.java", line 93, characters 18-23
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_1 0 Object_alloc_table)
         (is_color_array t_1 Object_alloc_table intM_intP))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (EQ result (+ (offset_max Object_alloc_table t_1) 1))))
(FORALL (b_0)
(FORALL (i_3)
(FORALL (intM_intP0)
(FORALL (r_0)
(IMPLIES TRUE
(IMPLIES (AND (is_color_array t_1 Object_alloc_table intM_intP0)
         (AND (<= 0 b_0)
         (AND (<= b_0 i_3)
         (AND (<= i_3 r_0)
         (AND (<= r_0 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (is_monochrome t_1 0 b_0 FlagStatic_BLUE intM_intP0)
         (AND (is_monochrome t_1 b_0 i_3 FlagStatic_WHITE intM_intP0)
         (is_monochrome
         t_1 r_0 (+ (offset_max Object_alloc_table t_1) 1) FlagStatic_RED intM_intP0))))))))
(IMPLIES (< i_3 r_0)
(IMPLIES (AND (<= (offset_min Object_alloc_table t_1) i_3)
         (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_1 i_3)))
(IMPLIES (NEQ result0 FlagStatic_BLUE)
(IMPLIES (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE))
(IMPLIES (AND (NEQ result0 FlagStatic_RED)
         (AND (NEQ result0 FlagStatic_WHITE) (NEQ result0 FlagStatic_BLUE)))
(< (- r_0 i_3) (- r_0 i_3))))))))))))))))))))))

;; FlagStatic_isMonochrome_ensures_decides_monochromatic_po_1, File "HOME/tests/java/FlagStatic.java", line 52, characters 18-53
(FORALL (t)
(FORALL (i)
(FORALL (j)
(FORALL (c_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i)
         (AND (<= i j) (<= j (+ (offset_max Object_alloc_table t) 1))))))
(FORALL (k_0)
(IMPLIES TRUE
(IMPLIES (AND (<= i k_0)
         (FORALL (l)
         (IMPLIES (AND (<= i l) (< l k_0))
         (EQ (select intM_intP (shift t l)) c_0))))
(IMPLIES (< k_0 j)
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t k_0)))
(IMPLIES (NEQ result c_0)
(FORALL (return)
(IMPLIES (EQ return |@false|)
(IMPLIES (EQ return |@true|) (is_monochrome t i j c_0 intM_intP))))))))))))))))))

;; FlagStatic_isMonochrome_ensures_decides_monochromatic_po_2, File "HOME/tests/java/FlagStatic.java", line 52, characters 18-53
(FORALL (t)
(FORALL (i)
(FORALL (j)
(FORALL (c_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i)
         (AND (<= i j) (<= j (+ (offset_max Object_alloc_table t) 1))))))
(FORALL (k_0)
(IMPLIES TRUE
(IMPLIES (AND (<= i k_0)
         (FORALL (l)
         (IMPLIES (AND (<= i l) (< l k_0))
         (EQ (select intM_intP (shift t l)) c_0))))
(IMPLIES (< k_0 j)
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t k_0)))
(IMPLIES (NEQ result c_0)
(FORALL (return)
(IMPLIES (EQ return |@false|)
(IMPLIES (is_monochrome t i j c_0 intM_intP) (EQ return |@true|))))))))))))))))))

;; FlagStatic_isMonochrome_ensures_decides_monochromatic_po_3, File "HOME/tests/java/FlagStatic.java", line 52, characters 18-53
(FORALL (t)
(FORALL (i)
(FORALL (j)
(FORALL (c_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i)
         (AND (<= i j) (<= j (+ (offset_max Object_alloc_table t) 1))))))
(FORALL (k_0)
(IMPLIES TRUE
(IMPLIES (AND (<= i k_0)
         (FORALL (l)
         (IMPLIES (AND (<= i l) (< l k_0))
         (EQ (select intM_intP (shift t l)) c_0))))
(IMPLIES (>= k_0 j)
(FORALL (return)
(IMPLIES (EQ return |@true|)
(IMPLIES (EQ return |@true|) (is_monochrome t i j c_0 intM_intP)))))))))))))))

;; FlagStatic_isMonochrome_ensures_decides_monochromatic_po_4, File "HOME/tests/java/FlagStatic.java", line 52, characters 18-53
(FORALL (t)
(FORALL (i)
(FORALL (j)
(FORALL (c_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i)
         (AND (<= i j) (<= j (+ (offset_max Object_alloc_table t) 1))))))
(FORALL (k_0)
(IMPLIES TRUE
(IMPLIES (AND (<= i k_0)
         (FORALL (l)
         (IMPLIES (AND (<= i l) (< l k_0))
         (EQ (select intM_intP (shift t l)) c_0))))
(IMPLIES (>= k_0 j)
(FORALL (return)
(IMPLIES (EQ return |@true|)
(IMPLIES (is_monochrome t i j c_0 intM_intP) (EQ return |@true|)))))))))))))))

;; FlagStatic_isMonochrome_ensures_default_po_1, File "HOME/tests/java/FlagStatic.java", line 55, characters 24-30
(FORALL (t)
(FORALL (i)
(FORALL (j)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i)
         (AND (<= i j) (<= j (+ (offset_max Object_alloc_table t) 1))))))
(<= i i))))))

;; FlagStatic_isMonochrome_ensures_default_po_2, File "HOME/tests/java/FlagStatic.java", line 56, characters 8-49
(FORALL (t)
(FORALL (i)
(FORALL (j)
(FORALL (c_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i)
         (AND (<= i j) (<= j (+ (offset_max Object_alloc_table t) 1))))))
(FORALL (l)
(IMPLIES (AND (<= i l) (< l i)) (EQ (select intM_intP (shift t l)) c_0))))))))))

;; FlagStatic_isMonochrome_ensures_default_po_3, File "HOME/tests/java/FlagStatic.java", line 55, characters 24-30
(FORALL (t)
(FORALL (i)
(FORALL (j)
(FORALL (c_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i)
         (AND (<= i j) (<= j (+ (offset_max Object_alloc_table t) 1))))))
(FORALL (k_0)
(IMPLIES (AND (<= i k_0)
         (FORALL (l)
         (IMPLIES (AND (<= i l) (< l k_0))
         (EQ (select intM_intP (shift t l)) c_0))))
(IMPLIES (< k_0 j)
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t k_0)))
(IMPLIES (EQ result c_0)
(FORALL (k_0_0) (IMPLIES (EQ k_0_0 (+ k_0 1)) (<= i k_0_0))))))))))))))))

;; FlagStatic_isMonochrome_ensures_default_po_4, File "HOME/tests/java/FlagStatic.java", line 56, characters 8-49
(FORALL (t)
(FORALL (i)
(FORALL (j)
(FORALL (c_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i)
         (AND (<= i j) (<= j (+ (offset_max Object_alloc_table t) 1))))))
(FORALL (k_0)
(IMPLIES (AND (<= i k_0)
         (FORALL (l)
         (IMPLIES (AND (<= i l) (< l k_0))
         (EQ (select intM_intP (shift t l)) c_0))))
(IMPLIES (< k_0 j)
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t k_0)))
(IMPLIES (EQ result c_0)
(FORALL (k_0_0)
(IMPLIES (EQ k_0_0 (+ k_0 1))
(FORALL (l)
(IMPLIES (AND (<= i l) (< l k_0_0)) (EQ (select intM_intP (shift t l)) c_0))))))))))))))))))

;; FlagStatic_isMonochrome_safety_po_1, File "HOME/tests/java/FlagStatic.java", line 59, characters 33-37
(FORALL (t)
(FORALL (i)
(FORALL (j)
(FORALL (c_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i)
         (AND (<= i j) (<= j (+ (offset_max Object_alloc_table t) 1))))))
(FORALL (k_0)
(IMPLIES TRUE
(IMPLIES (AND (<= i k_0)
         (FORALL (l)
         (IMPLIES (AND (<= i l) (< l k_0))
         (EQ (select intM_intP (shift t l)) c_0))))
(IMPLIES (< k_0 j) (<= (offset_min Object_alloc_table t) k_0))))))))))))

;; FlagStatic_isMonochrome_safety_po_2, File "HOME/tests/java/FlagStatic.java", line 59, characters 33-37
(FORALL (t)
(FORALL (i)
(FORALL (j)
(FORALL (c_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i)
         (AND (<= i j) (<= j (+ (offset_max Object_alloc_table t) 1))))))
(FORALL (k_0)
(IMPLIES TRUE
(IMPLIES (AND (<= i k_0)
         (FORALL (l)
         (IMPLIES (AND (<= i l) (< l k_0))
         (EQ (select intM_intP (shift t l)) c_0))))
(IMPLIES (< k_0 j) (<= k_0 (offset_max Object_alloc_table t)))))))))))))

;; FlagStatic_isMonochrome_safety_po_3, File "HOME/tests/java/FlagStatic.java", line 57, characters 22-27
(FORALL (t)
(FORALL (i)
(FORALL (j)
(FORALL (c_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i)
         (AND (<= i j) (<= j (+ (offset_max Object_alloc_table t) 1))))))
(FORALL (k_0)
(IMPLIES TRUE
(IMPLIES (AND (<= i k_0)
         (FORALL (l)
         (IMPLIES (AND (<= i l) (< l k_0))
         (EQ (select intM_intP (shift t l)) c_0))))
(IMPLIES (< k_0 j)
(IMPLIES (AND (<= (offset_min Object_alloc_table t) k_0)
         (<= k_0 (offset_max Object_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t k_0)))
(IMPLIES (EQ result c_0)
(FORALL (k_0_0) (IMPLIES (EQ k_0_0 (+ k_0 1)) (<= 0 (- j k_0)))))))))))))))))))

;; FlagStatic_isMonochrome_safety_po_4, File "HOME/tests/java/FlagStatic.java", line 57, characters 22-27
(FORALL (t)
(FORALL (i)
(FORALL (j)
(FORALL (c_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 i)
         (AND (<= i j) (<= j (+ (offset_max Object_alloc_table t) 1))))))
(FORALL (k_0)
(IMPLIES TRUE
(IMPLIES (AND (<= i k_0)
         (FORALL (l)
         (IMPLIES (AND (<= i l) (< l k_0))
         (EQ (select intM_intP (shift t l)) c_0))))
(IMPLIES (< k_0 j)
(IMPLIES (AND (<= (offset_min Object_alloc_table t) k_0)
         (<= k_0 (offset_max Object_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t k_0)))
(IMPLIES (EQ result c_0)
(FORALL (k_0_0) (IMPLIES (EQ k_0_0 (+ k_0 1)) (< (- j k_0_0) (- j k_0)))))))))))))))))))

;; FlagStatic_swap_ensures_i_j_swapped_po_1, File "HOME/tests/java/FlagStatic.java", line 66, characters 18-36
(FORALL (t_0)
(FORALL (i_0)
(FORALL (j_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (<= 0 i_0)
         (AND (< i_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 j_0) (< j_0 (+ (offset_max Object_alloc_table t_0) 1))))))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 i_0)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 j_0)))
(FORALL (intM_intP0)
(IMPLIES (EQ intM_intP0 (|why__store| intM_intP (shift t_0 i_0) result0))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t_0 j_0) result))
(EQ (select intM_intP1 (shift t_0 i_0)) (select intM_intP (shift t_0 j_0)))))))))))))))))

;; FlagStatic_swap_ensures_i_j_swapped_po_2, File "HOME/tests/java/FlagStatic.java", line 66, characters 40-58
(FORALL (t_0)
(FORALL (i_0)
(FORALL (j_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (<= 0 i_0)
         (AND (< i_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 j_0) (< j_0 (+ (offset_max Object_alloc_table t_0) 1))))))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 i_0)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 j_0)))
(FORALL (intM_intP0)
(IMPLIES (EQ intM_intP0 (|why__store| intM_intP (shift t_0 i_0) result0))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t_0 j_0) result))
(EQ (select intM_intP1 (shift t_0 j_0)) (select intM_intP (shift t_0 i_0)))))))))))))))))

;; FlagStatic_swap_ensures_i_j_swapped_po_3, File "HOME/tests/java/FlagStatic.java", line 68, characters 24-28
(FORALL (t_0)
(FORALL (i_0)
(FORALL (j_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (<= 0 i_0)
         (AND (< i_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 j_0) (< j_0 (+ (offset_max Object_alloc_table t_0) 1))))))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 i_0)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t_0 j_0)))
(FORALL (intM_intP0)
(IMPLIES (EQ intM_intP0 (|why__store| intM_intP (shift t_0 i_0) result0))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t_0 j_0) result))
(not_assigns
Object_alloc_table intM_intP intM_intP1 (pset_union
                                        (pset_range
                                        (pset_singleton t_0) j_0 j_0) 
                                        (pset_range
                                        (pset_singleton t_0) i_0 i_0)))))))))))))))))

;; FlagStatic_swap_safety_po_1, File "HOME/tests/java/FlagStatic.java", line 69, characters 9-13
(FORALL (t_0)
(FORALL (i_0)
(FORALL (j_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (<= 0 i_0)
         (AND (< i_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 j_0) (< j_0 (+ (offset_max Object_alloc_table t_0) 1))))))
(<= (offset_min Object_alloc_table t_0) i_0))))))

;; FlagStatic_swap_safety_po_2, File "HOME/tests/java/FlagStatic.java", line 69, characters 9-13
(FORALL (t_0)
(FORALL (i_0)
(FORALL (j_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (<= 0 i_0)
         (AND (< i_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 j_0) (< j_0 (+ (offset_max Object_alloc_table t_0) 1))))))
(<= i_0 (offset_max Object_alloc_table t_0)))))))

;; FlagStatic_swap_safety_po_3, File "HOME/tests/java/FlagStatic.java", line 70, characters 8-12
(FORALL (t_0)
(FORALL (i_0)
(FORALL (j_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (<= 0 i_0)
         (AND (< i_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 j_0) (< j_0 (+ (offset_max Object_alloc_table t_0) 1))))))
(IMPLIES (AND (<= (offset_min Object_alloc_table t_0) i_0)
         (<= i_0 (offset_max Object_alloc_table t_0)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 i_0)))
(<= (offset_min Object_alloc_table t_0) j_0))))))))))

;; FlagStatic_swap_safety_po_4, File "HOME/tests/java/FlagStatic.java", line 70, characters 8-12
(FORALL (t_0)
(FORALL (i_0)
(FORALL (j_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (<= 0 i_0)
         (AND (< i_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 j_0) (< j_0 (+ (offset_max Object_alloc_table t_0) 1))))))
(IMPLIES (AND (<= (offset_min Object_alloc_table t_0) i_0)
         (<= i_0 (offset_max Object_alloc_table t_0)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 i_0)))
(<= j_0 (offset_max Object_alloc_table t_0)))))))))))

========== running Simplify ==========
Running Simplify on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/FlagStatic_why.sx    : ............................................................................ (76/0/0/0/0)
total   :  76
valid   :  76 (100%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   0 (  0%)
failure :   0 (  0%)
========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/FlagStatic.why
========== file tests/java/why/FlagStatic_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type Object

type interface

logic Exception_tag : Object tag_id

logic Object_tag : Object tag_id

axiom Exception_parenttag_Object: parenttag(Exception_tag, Object_tag)

function FlagStatic_BLUE() : int = 1

function FlagStatic_RED() : int = 3

function FlagStatic_WHITE() : int = 2

logic FlagStatic_tag : Object tag_id

axiom FlagStatic_parenttag_Object: parenttag(FlagStatic_tag, Object_tag)

predicate Non_null_Object(x_0: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x_0) = 0)

predicate Non_null_intM(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) >= (-1))

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag : Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag : Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

logic intM_tag : Object tag_id

axiom intM_parenttag_Object: parenttag(intM_tag, Object_tag)

logic interface_tag : interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate is_color(c: int) =
  ((c = FlagStatic_BLUE) or ((c = FlagStatic_WHITE) or (c = FlagStatic_RED)))

predicate is_color_array(t_2: Object pointer,
  Object_alloc_table_at_L: Object alloc_table, intM_intP_at_L: (Object,
  int) memory) =
  (Non_null_intM(t_2, Object_alloc_table_at_L) and
   (forall i_1:int.
     (((0 <= i_1) and (i_1 < (offset_max(Object_alloc_table_at_L, t_2) + 1))) ->
      is_color(select(intM_intP_at_L, shift(t_2, i_1))))))

predicate is_monochrome(t_3: Object pointer, i_2: int, j_1: int, c_1: int,
  intM_intP_at_L: (Object, int) memory) =
  (forall k:int.
    (((i_2 <= k) and (k < j_1)) -> (select(intM_intP_at_L, shift(t_3,
     k)) = c_1)))

predicate left_valid_struct_Object(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = (offset_min(Object_alloc_table,
  p) <= a)

predicate left_valid_struct_Exception(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_FlagStatic(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_String(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_Throwable(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_intM(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_interface(p: interface pointer, a: int,
  interface_alloc_table: interface alloc_table) =
  (offset_min(interface_alloc_table, p) <= a)

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  p) >= b)

predicate right_valid_struct_Exception(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_FlagStatic(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_String(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_Throwable(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_intM(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_interface(p: interface pointer, b: int,
  interface_alloc_table: interface alloc_table) =
  (offset_max(interface_alloc_table, p) >= b)

predicate strict_valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Exception(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_FlagStatic(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Exception(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_FlagStatic(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_intM(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Exception(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_FlagStatic(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

goal FlagStatic_flag_ensures_default_po_1:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136": ("JC_129": ("JC_129": (0 <= 0))))

goal FlagStatic_flag_ensures_default_po_2:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136": ("JC_130": ("JC_130": (0 <= 0))))

goal FlagStatic_flag_ensures_default_po_3:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136": ("JC_131": ("JC_131": (0 <= result))))

goal FlagStatic_flag_ensures_default_po_4:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136":
  ("JC_132":
  ("JC_132": (result <= (offset_max(Object_alloc_table, t_1) + 1)))))

goal FlagStatic_flag_ensures_default_po_5:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136":
  ("JC_133":
  ("JC_133": is_monochrome(t_1, 0, 0, FlagStatic_BLUE, intM_intP))))

goal FlagStatic_flag_ensures_default_po_6:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136":
  ("JC_134":
  ("JC_134": is_monochrome(t_1, 0, 0, FlagStatic_WHITE, intM_intP))))

goal FlagStatic_flag_ensures_default_po_7:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  ("JC_136":
  ("JC_135":
  ("JC_135": is_monochrome(t_1, result, (offset_max(Object_alloc_table,
  t_1) + 1), FlagStatic_RED, intM_intP))))

goal FlagStatic_flag_ensures_default_po_8:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136":
  ("JC_128": ("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP1))))

goal FlagStatic_flag_ensures_default_po_9:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136": ("JC_129": ("JC_129": (0 <= b_0_0))))

goal FlagStatic_flag_ensures_default_po_10:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136": ("JC_130": ("JC_130": (b_0_0 <= i_3_0))))

goal FlagStatic_flag_ensures_default_po_11:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136": ("JC_131": ("JC_131": (i_3_0 <= r_0))))

goal FlagStatic_flag_ensures_default_po_12:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136":
  ("JC_132": ("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1)))))

goal FlagStatic_flag_ensures_default_po_13:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136":
  ("JC_133":
  ("JC_133": is_monochrome(t_1, 0, b_0_0, FlagStatic_BLUE, intM_intP1))))

goal FlagStatic_flag_ensures_default_po_14:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136":
  ("JC_134":
  ("JC_134": is_monochrome(t_1, b_0_0, i_3_0, FlagStatic_WHITE, intM_intP1))))

goal FlagStatic_flag_ensures_default_po_15:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  ("JC_136":
  ("JC_135":
  ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
  t_1) + 1), FlagStatic_RED, intM_intP1))))

goal FlagStatic_flag_ensures_default_po_16:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136": ("JC_129": ("JC_129": (0 <= b_0))))

goal FlagStatic_flag_ensures_default_po_17:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136": ("JC_130": ("JC_130": (b_0 <= i_3_0))))

goal FlagStatic_flag_ensures_default_po_18:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136": ("JC_131": ("JC_131": (i_3_0 <= r_0))))

goal FlagStatic_flag_ensures_default_po_19:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136":
  ("JC_132": ("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1)))))

goal FlagStatic_flag_ensures_default_po_20:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136":
  ("JC_133":
  ("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0))))

goal FlagStatic_flag_ensures_default_po_21:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136":
  ("JC_134":
  ("JC_134": is_monochrome(t_1, b_0, i_3_0, FlagStatic_WHITE, intM_intP0))))

goal FlagStatic_flag_ensures_default_po_22:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_136":
  ("JC_135":
  ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
  t_1) + 1), FlagStatic_RED, intM_intP0))))

goal FlagStatic_flag_ensures_default_po_23:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136":
  ("JC_128": ("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP1))))

goal FlagStatic_flag_ensures_default_po_24:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136": ("JC_129": ("JC_129": (0 <= b_0))))

goal FlagStatic_flag_ensures_default_po_25:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136": ("JC_130": ("JC_130": (b_0 <= i_3))))

goal FlagStatic_flag_ensures_default_po_26:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136": ("JC_131": ("JC_131": (i_3 <= r_0_0))))

goal FlagStatic_flag_ensures_default_po_27:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136":
  ("JC_132":
  ("JC_132": (r_0_0 <= (offset_max(Object_alloc_table, t_1) + 1)))))

goal FlagStatic_flag_ensures_default_po_28:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136":
  ("JC_133":
  ("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP1))))

goal FlagStatic_flag_ensures_default_po_29:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136":
  ("JC_134":
  ("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE, intM_intP1))))

goal FlagStatic_flag_ensures_default_po_30:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  ("JC_136":
  ("JC_135":
  ("JC_135": is_monochrome(t_1, r_0_0, (offset_max(Object_alloc_table,
  t_1) + 1), FlagStatic_RED, intM_intP1))))

goal FlagStatic_flag_ensures_default_po_31:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136": ("JC_129": ("JC_129": (0 <= b_0))))

goal FlagStatic_flag_ensures_default_po_32:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136": ("JC_130": ("JC_130": (b_0 <= i_3))))

goal FlagStatic_flag_ensures_default_po_33:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136": ("JC_131": ("JC_131": (i_3 <= r_0))))

goal FlagStatic_flag_ensures_default_po_34:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136":
  ("JC_132": ("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1)))))

goal FlagStatic_flag_ensures_default_po_35:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136":
  ("JC_133":
  ("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0))))

goal FlagStatic_flag_ensures_default_po_36:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136":
  ("JC_134":
  ("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE, intM_intP0))))

goal FlagStatic_flag_ensures_default_po_37:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_136":
  (("JC_128": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_129": (0 <= b_0)) and
    (("JC_130": (b_0 <= i_3)) and
     (("JC_131": (i_3 <= r_0)) and
      (("JC_132": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_133": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_134": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  ("JC_136":
  ("JC_135":
  ("JC_135": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
  t_1) + 1), FlagStatic_RED, intM_intP0))))

goal FlagStatic_flag_ensures_sorts_po_1:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_153": true) ->
  ("JC_151":
  (("JC_143": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_144": (0 <= b_0)) and
    (("JC_145": (b_0 <= i_3)) and
     (("JC_146": (i_3 <= r_0)) and
      (("JC_147": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_148": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_149": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_150": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 >= r_0) ->
  ("JC_107":
  (exists b:int.
    (exists r:int.
      (is_monochrome(t_1, 0, b, FlagStatic_BLUE, intM_intP0) and
       (is_monochrome(t_1, b, r, FlagStatic_WHITE, intM_intP0) and
        is_monochrome(t_1, r, (offset_max(Object_alloc_table, t_1) + 1),
        FlagStatic_RED, intM_intP0))))))

goal FlagStatic_flag_safety_po_1:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1))

goal FlagStatic_flag_safety_po_2:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  (offset_min(Object_alloc_table, t_1) <= i_3)

goal FlagStatic_flag_safety_po_3:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  (i_3 <= offset_max(Object_alloc_table, t_1))

goal FlagStatic_flag_safety_po_4:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_73": ("JC_69": ("JC_69": (0 <= b_0))))

goal FlagStatic_flag_safety_po_5:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_73":
  ("JC_70": ("JC_70": (b_0 < (offset_max(Object_alloc_table, t_1) + 1)))))

goal FlagStatic_flag_safety_po_6:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_73": ("JC_71": ("JC_71": (0 <= i_3))))

goal FlagStatic_flag_safety_po_7:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_73":
  ("JC_72": ("JC_72": (i_3 < (offset_max(Object_alloc_table, t_1) + 1)))))

goal FlagStatic_flag_safety_po_8:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_73":
  (("JC_69": (0 <= b_0)) and
   (("JC_70": (b_0 < (offset_max(Object_alloc_table, t_1) + 1))) and
    (("JC_71": (0 <= i_3)) and
     ("JC_72": (i_3 < (offset_max(Object_alloc_table, t_1) + 1))))))) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  (0 <= ("JC_126": (r_0 - i_3)))

goal FlagStatic_flag_safety_po_9:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 = FlagStatic_BLUE) ->
  forall b_0_0:int.
  (b_0_0 = (b_0 + 1)) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_73":
  (("JC_69": (0 <= b_0)) and
   (("JC_70": (b_0 < (offset_max(Object_alloc_table, t_1) + 1))) and
    (("JC_71": (0 <= i_3)) and
     ("JC_72": (i_3 < (offset_max(Object_alloc_table, t_1) + 1))))))) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, b_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, b_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), b_0, b_0)))))) ->
  (("JC_126": (r_0 - i_3_0)) < ("JC_126": (r_0 - i_3)))

goal FlagStatic_flag_safety_po_10:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  (0 <= ("JC_126": (r_0 - i_3)))

goal FlagStatic_flag_safety_po_11:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 = FlagStatic_WHITE) or
   ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  (("JC_126": (r_0 - i_3_0)) < ("JC_126": (r_0 - i_3)))

goal FlagStatic_flag_safety_po_12:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  ("JC_73": ("JC_69": ("JC_69": (0 <= r_0_0))))

goal FlagStatic_flag_safety_po_13:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  ("JC_73":
  ("JC_70": ("JC_70": (r_0_0 < (offset_max(Object_alloc_table, t_1) + 1)))))

goal FlagStatic_flag_safety_po_14:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  ("JC_73": ("JC_71": ("JC_71": (0 <= i_3))))

goal FlagStatic_flag_safety_po_15:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  ("JC_73":
  ("JC_72": ("JC_72": (i_3 < (offset_max(Object_alloc_table, t_1) + 1)))))

goal FlagStatic_flag_safety_po_16:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  ("JC_73":
  (("JC_69": (0 <= r_0_0)) and
   (("JC_70": (r_0_0 < (offset_max(Object_alloc_table, t_1) + 1))) and
    (("JC_71": (0 <= i_3)) and
     ("JC_72": (i_3 < (offset_max(Object_alloc_table, t_1) + 1))))))) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  (0 <= ("JC_126": (r_0 - i_3)))

goal FlagStatic_flag_safety_po_17:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 = FlagStatic_RED) or
   ((result0 <> FlagStatic_RED) and
    ((result0 = FlagStatic_WHITE) or
     ((result0 <> FlagStatic_WHITE) and (result0 = FlagStatic_BLUE))))) ->
  forall r_0_0:int.
  (r_0_0 = (r_0 - 1)) ->
  ("JC_73":
  (("JC_69": (0 <= r_0_0)) and
   (("JC_70": (r_0_0 < (offset_max(Object_alloc_table, t_1) + 1))) and
    (("JC_71": (0 <= i_3)) and
     ("JC_72": (i_3 < (offset_max(Object_alloc_table, t_1) + 1))))))) ->
  forall intM_intP1:(Object,
  int) memory.
  ("JC_94":
  (("JC_92":
   (("JC_90": (select(intM_intP1, shift(t_1, r_0_0)) = select(intM_intP0,
    shift(t_1, i_3)))) and
    ("JC_91": (select(intM_intP1, shift(t_1, i_3)) = select(intM_intP0,
    shift(t_1, r_0_0)))))) and
   ("JC_93": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_1), i_3, i_3),
   pset_range(pset_singleton(t_1), r_0_0, r_0_0)))))) ->
  (("JC_126": (r_0_0 - i_3)) < ("JC_126": (r_0 - i_3)))

goal FlagStatic_flag_safety_po_18:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  (0 <= ("JC_126": (r_0 - i_3)))

goal FlagStatic_flag_safety_po_19:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_1, 0, Object_alloc_table) and
   ("JC_101": is_color_array(t_1, Object_alloc_table, intM_intP))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result:int.
  ("JC_17":
  ((result <= 2147483647) and
   ((result >= 0) and (result = (offset_max(Object_alloc_table, t_1) + 1))))) ->
  forall b_0:int.
  forall i_3:int.
  forall intM_intP0:(Object,
  int) memory.
  forall r_0:int.
  ("JC_121": true) ->
  ("JC_119":
  (("JC_111": is_color_array(t_1, Object_alloc_table, intM_intP0)) and
   (("JC_112": (0 <= b_0)) and
    (("JC_113": (b_0 <= i_3)) and
     (("JC_114": (i_3 <= r_0)) and
      (("JC_115": (r_0 <= (offset_max(Object_alloc_table, t_1) + 1))) and
       (("JC_116": is_monochrome(t_1, 0, b_0, FlagStatic_BLUE, intM_intP0)) and
        (("JC_117": is_monochrome(t_1, b_0, i_3, FlagStatic_WHITE,
         intM_intP0)) and
         ("JC_118": is_monochrome(t_1, r_0, (offset_max(Object_alloc_table,
         t_1) + 1), FlagStatic_RED, intM_intP0)))))))))) ->
  (i_3 < r_0) ->
  ((offset_min(Object_alloc_table, t_1) <= i_3) and
   (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_1, i_3))) ->
  (result0 <> FlagStatic_BLUE) ->
  ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE)) ->
  ((result0 <> FlagStatic_RED) and
   ((result0 <> FlagStatic_WHITE) and (result0 <> FlagStatic_BLUE))) ->
  (("JC_126": (r_0 - i_3)) < ("JC_126": (r_0 - i_3)))

goal FlagStatic_isMonochrome_ensures_decides_monochromatic_po_1:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_67": true) ->
  ("JC_65":
  (("JC_63": (i <= k_0)) and
   ("JC_64":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  forall result:int.
  (result = select(intM_intP, shift(t, k_0))) ->
  (result <> c_0) ->
  forall return:bool.
  (return = false) ->
  (return = true) ->
  ("JC_47": is_monochrome(t, i, j, c_0, intM_intP))

goal FlagStatic_isMonochrome_ensures_decides_monochromatic_po_2:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_67": true) ->
  ("JC_65":
  (("JC_63": (i <= k_0)) and
   ("JC_64":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  forall result:int.
  (result = select(intM_intP, shift(t, k_0))) ->
  (result <> c_0) ->
  forall return:bool.
  (return = false) ->
  is_monochrome(t, i, j, c_0, intM_intP) ->
  ("JC_47": (return = true))

goal FlagStatic_isMonochrome_ensures_decides_monochromatic_po_3:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_67": true) ->
  ("JC_65":
  (("JC_63": (i <= k_0)) and
   ("JC_64":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 >= j) ->
  forall return:bool.
  (return = true) ->
  (return = true) ->
  ("JC_47": is_monochrome(t, i, j, c_0, intM_intP))

goal FlagStatic_isMonochrome_ensures_decides_monochromatic_po_4:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_67": true) ->
  ("JC_65":
  (("JC_63": (i <= k_0)) and
   ("JC_64":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 >= j) ->
  forall return:bool.
  (return = true) ->
  is_monochrome(t, i, j, c_0, intM_intP) ->
  ("JC_47": (return = true))

goal FlagStatic_isMonochrome_ensures_default_po_1:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  ("JC_59": ("JC_57": ("JC_57": (i <= i))))

goal FlagStatic_isMonochrome_ensures_default_po_2:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  ("JC_59":
  ("JC_58":
  ("JC_58":
  (forall l:int.
    (((i <= l) and (l < i)) -> (select(intM_intP, shift(t, l)) = c_0))))))

goal FlagStatic_isMonochrome_ensures_default_po_3:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_59":
  (("JC_57": (i <= k_0)) and
   ("JC_58":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  forall result:int.
  (result = select(intM_intP, shift(t, k_0))) ->
  (result = c_0) ->
  forall k_0_0:int.
  (k_0_0 = (k_0 + 1)) ->
  ("JC_59": ("JC_57": ("JC_57": (i <= k_0_0))))

goal FlagStatic_isMonochrome_ensures_default_po_4:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_59":
  (("JC_57": (i <= k_0)) and
   ("JC_58":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  forall result:int.
  (result = select(intM_intP, shift(t, k_0))) ->
  (result = c_0) ->
  forall k_0_0:int.
  (k_0_0 = (k_0 + 1)) ->
  ("JC_59":
  ("JC_58":
  ("JC_58":
  (forall l:int.
    (((i <= l) and (l < k_0_0)) -> (select(intM_intP, shift(t, l)) = c_0))))))

goal FlagStatic_isMonochrome_safety_po_1:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_53": true) ->
  ("JC_51":
  (("JC_49": (i <= k_0)) and
   ("JC_50":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  (offset_min(Object_alloc_table, t) <= k_0)

goal FlagStatic_isMonochrome_safety_po_2:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_53": true) ->
  ("JC_51":
  (("JC_49": (i <= k_0)) and
   ("JC_50":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  (k_0 <= offset_max(Object_alloc_table, t))

goal FlagStatic_isMonochrome_safety_po_3:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_53": true) ->
  ("JC_51":
  (("JC_49": (i <= k_0)) and
   ("JC_50":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  ((offset_min(Object_alloc_table, t) <= k_0) and
   (k_0 <= offset_max(Object_alloc_table, t))) ->
  forall result:int.
  (result = select(intM_intP, shift(t, k_0))) ->
  (result = c_0) ->
  forall k_0_0:int.
  (k_0_0 = (k_0 + 1)) ->
  (0 <= ("JC_56": (j - k_0)))

goal FlagStatic_isMonochrome_safety_po_4:
  forall t:Object pointer.
  forall i:int.
  forall j:int.
  forall c_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   ("JC_41":
   (("JC_37": Non_null_intM(t, Object_alloc_table)) and
    (("JC_38": (0 <= i)) and
     (("JC_39": (i <= j)) and
      ("JC_40": (j <= (offset_max(Object_alloc_table, t) + 1)))))))) ->
  forall k_0:int.
  ("JC_53": true) ->
  ("JC_51":
  (("JC_49": (i <= k_0)) and
   ("JC_50":
   (forall l:int.
     (((i <= l) and (l < k_0)) -> (select(intM_intP, shift(t, l)) = c_0)))))) ->
  (k_0 < j) ->
  ((offset_min(Object_alloc_table, t) <= k_0) and
   (k_0 <= offset_max(Object_alloc_table, t))) ->
  forall result:int.
  (result = select(intM_intP, shift(t, k_0))) ->
  (result = c_0) ->
  forall k_0_0:int.
  (k_0_0 = (k_0 + 1)) ->
  (("JC_56": (j - k_0_0)) < ("JC_56": (j - k_0)))

goal FlagStatic_swap_ensures_i_j_swapped_po_1:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, i_0))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, j_0))) ->
  forall intM_intP0:(Object,
  int) memory.
  (intM_intP0 = store(intM_intP, shift(t_0, i_0), result0)) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_0, j_0), result)) ->
  ("JC_89":
  ("JC_87":
  ("JC_85":
  ("JC_85": (select(intM_intP1, shift(t_0, i_0)) = select(intM_intP,
  shift(t_0, j_0)))))))

goal FlagStatic_swap_ensures_i_j_swapped_po_2:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, i_0))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, j_0))) ->
  forall intM_intP0:(Object,
  int) memory.
  (intM_intP0 = store(intM_intP, shift(t_0, i_0), result0)) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_0, j_0), result)) ->
  ("JC_89":
  ("JC_87":
  ("JC_86":
  ("JC_86": (select(intM_intP1, shift(t_0, j_0)) = select(intM_intP,
  shift(t_0, i_0)))))))

goal FlagStatic_swap_ensures_i_j_swapped_po_3:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, i_0))) ->
  forall result0:int.
  (result0 = select(intM_intP, shift(t_0, j_0))) ->
  forall intM_intP0:(Object,
  int) memory.
  (intM_intP0 = store(intM_intP, shift(t_0, i_0), result0)) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_0, j_0), result)) ->
  ("JC_89":
  ("JC_88":
  ("JC_88": not_assigns(Object_alloc_table, intM_intP, intM_intP1,
  pset_union(pset_range(pset_singleton(t_0), j_0, j_0),
  pset_range(pset_singleton(t_0), i_0, i_0))))))

goal FlagStatic_swap_safety_po_1:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  (offset_min(Object_alloc_table, t_0) <= i_0)

goal FlagStatic_swap_safety_po_2:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  (i_0 <= offset_max(Object_alloc_table, t_0))

goal FlagStatic_swap_safety_po_3:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  ((offset_min(Object_alloc_table, t_0) <= i_0) and
   (i_0 <= offset_max(Object_alloc_table, t_0))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, i_0))) ->
  (offset_min(Object_alloc_table, t_0) <= j_0)

goal FlagStatic_swap_safety_po_4:
  forall t_0:Object pointer.
  forall i_0:int.
  forall j_0:int.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_79":
   (("JC_75": (0 <= i_0)) and
    (("JC_76": (i_0 < (offset_max(Object_alloc_table, t_0) + 1))) and
     (("JC_77": (0 <= j_0)) and
      ("JC_78": (j_0 < (offset_max(Object_alloc_table, t_0) + 1)))))))) ->
  ((offset_min(Object_alloc_table, t_0) <= i_0) and
   (i_0 <= offset_max(Object_alloc_table, t_0))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, i_0))) ->
  (j_0 <= offset_max(Object_alloc_table, t_0))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/FlagStatic_why.why        : .......#......#............##..........................................#.... (71/0/0/5/0)
total   :  76
valid   :  71 ( 93%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   5 (  7%)
failure :   0 (  0%)
