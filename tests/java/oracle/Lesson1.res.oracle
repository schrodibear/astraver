========== krakatoa execution ==========
Parsing OK.
Typing OK.
Generating JC function Lesson1_max for method Lesson1.max
Generating JC function Lesson1_short_sqrt for method Lesson1.short_sqrt
Generating JC function Lesson1_sqrt for method Lesson1.sqrt
Generating JC function cons_Lesson1 for constructor Lesson1
Done.
========== file tests/java/Lesson1.jc ==========
# InvariantPolicy = Arguments
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = None

logic Non_null_Object{Here}(Object[0..] x) =
(\offset_max(x) == 0)

tag Object = {
}

tag String = Object with {
}

tag Throwable = Object with {
}

tag Lesson1 = Object with {
}

type Object = [Object]

type interface = [interface]

tag interface = {
}

type byte = -128..127

type short = -32768..32767

type int32 = -2147483648..2147483647

type long = -9223372036854775808..9223372036854775807

type char = 0..65535

boolean non_null_Object(Object[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) == 0) else (x == null));
;

exception Throwable of Throwable[0..]

lemma sqr_int_intro{Here} :
(\forall integer x_10;
  (((0 <= x_10) && (x_10 <= 46340)) ==> ((x_10 * x_10) <= 2147395600)))

lemma sqr_int_elim{Here} :
(\forall integer x_9;
  (((x_9 * x_9) <= 2147395599) ==> (x_9 <= 46339)))

lemma two_left{Here} :
(\forall integer x_4;
  ((2 * x_4) == (x_4 + x_4)))

lemma one_right{Here} :
(\forall integer x_1;
  ((x_1 * 1) == x_1))

lemma zero_right{Here} :
(\forall integer x;
  ((x * 0) == 0))

lemma two_right{Here} :
(\forall integer x_3;
  ((x_3 * 2) == (x_3 + x_3)))

lemma distr_left{Here} :
(\forall integer x_6;
  (\forall integer y_0;
    (\forall integer z_0;
      (((x_6 + y_0) * z_0) == ((x_6 * z_0) + (y_0 * z_0))))))

lemma one_left{Here} :
(\forall integer x_2;
  ((1 * x_2) == x_2))

lemma zero_left{Here} :
(\forall integer x_0;
  ((0 * x_0) == 0))

lemma distr_right{Here} :
(\forall integer x_5;
  (\forall integer y;
    (\forall integer z;
      ((x_5 * (y + z)) == ((x_5 * y) + (x_5 * z))))))

lemma sqr_short_intro{Here} :
(\forall integer x_8;
  (((0 <= x_8) && (x_8 <= 181)) ==> ((x_8 * x_8) <= 32761)))

lemma sqr_short_elim{Here} :
(\forall integer x_7;
  (((x_7 * x_7) <= 32760) ==> (x_7 <= 180)))

int32 Lesson1_max(int32 x_11, int32 y_1)
  requires true;
behavior result_ge_x:
  ensures (K_1 : (\result >= x_11));
behavior result_ge_y:
  ensures (K_2 : (\result >= y_1));
behavior result_is_lub:
  ensures (K_3 : (\forall integer z_1;
                   (((z_1 >= x_11) && (z_1 >= y_1)) ==> (z_1 >= \result))));
{  (if (K_4 : (x_11 > y_1)) then 
   (return x_11) else 
   (return y_1))
}

short Lesson1_short_sqrt(short x_12)
  requires (K_17 : ((x_12 >= 0) && (x_12 <= 32760)));
behavior default:
  ensures (K_5 : (((\result >= 0) && ((\result * \result) <= x_12)) &&
                   (x_12 < ((\result + 1) * (\result + 1)))));
{  
   {  
      (var short count_0 = (K_16 : 0));
      
      {  
         (var short sum_0 = (K_15 : 1));
         
         {  
            
            invariant (K_6 : (((((count_0 >= 0) &&
                                  (x_12 >= (count_0 * count_0))) &&
                                 (sum_0 == ((count_0 + 1) * (count_0 + 1)))) &&
                                (count_0 <= 180)) &&
                               (sum_0 <= 32761)));
            variant (K_7 : (x_12 - sum_0));
            while ((K_14 : (sum_0 <= x_12)))
            {  
               {  (K_8 : (count_0 ++));
                  (K_10 : 
                  (assert (K_9 : ((((count_0 * count_0) + (2 * count_0)) + 1) ==
                                   ((count_0 + 1) * (count_0 + 1))))));
                  (K_13 : sum_0 += (K_12 : (((K_11 : ((2 * count_0) :> int32)) +
                                              1) :> int32)))
               }
            };
            
            (return count_0)
         }
      }
   }
}

int32 Lesson1_sqrt(int32 x_13)
  requires (K_30 : ((x_13 >= 0) && (x_13 <= 2147395599)));
behavior result_is_sqrt:
  ensures (K_18 : (((\result >= 0) && ((\result * \result) <= x_13)) &&
                    (x_13 < ((\result + 1) * (\result + 1)))));
{  
   {  
      (var int32 count = (K_29 : 0));
      
      {  
         (var int32 sum = (K_28 : 1));
         
         {  
            
            invariant (K_19 : (((((count >= 0) && (x_13 >= (count * count))) &&
                                  (sum == ((count + 1) * (count + 1)))) &&
                                 (count <= 46339)) &&
                                (sum <= 2147395600)));
            variant (K_20 : (x_13 - sum));
            while ((K_27 : (sum <= x_13)))
            {  
               {  (K_21 : (count ++));
                  (K_23 : 
                  (assert (K_22 : ((((count * count) + (2 * count)) + 1) ==
                                    ((count + 1) * (count + 1))))));
                  (K_26 : sum += (K_25 : (((K_24 : ((2 * count) :> int32)) +
                                            1) :> int32)))
               }
            };
            
            (return count)
         }
      }
   }
}

unit cons_Lesson1(Lesson1[0] this_0)
  requires true;
;

/*
LocalVariables:
mode: java
compile-command: "jessie -why-opt -split-user-conj -locs tests/java/Lesson1.jloc tests/java/Lesson1.jc && make -f tests/java/Lesson1.makefile gui"
End:
*/
========== file tests/java/Lesson1.jloc ==========
[K_10]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 91
begin = 16
end = 62

[K_11]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 92
begin = 12
end = 19

[K_12]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 92
begin = 12
end = 21

[K_13]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 92
begin = 5
end = 21

[K_14]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 89
begin = 8
end = 16

[K_15]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 82
begin = 24
end = 25

[K_16]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 82
begin = 15
end = 16

[K_17]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 77
begin = 17
end = 37

[K_18]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 99
begin = 18
end = 107

[K_19]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 105
begin = 7
end = 127

[Lesson1_max]
name = "Method max"
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 73
begin = 22
end = 25

[K_20]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 108
begin = 15
end = 22

[K_21]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 111
begin = 5
end = 12

[K_22]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 112
begin = 16
end = 62

[K_23]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 112
begin = 16
end = 62

[K_24]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 113
begin = 12
end = 19

[K_1]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 67
begin = 18
end = 30

[cons_Lesson1]
name = "Constructor of class Lesson1"
file = "/home/cmarche/recherche/why/"
line = 0
begin = -1
end = -1

[K_25]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 113
begin = 12
end = 21

[K_2]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 69
begin = 18
end = 30

[K_26]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 113
begin = 5
end = 21

[K_3]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 71
begin = 18
end = 70

[K_27]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 110
begin = 8
end = 16

[K_4]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 74
begin = 5
end = 8

[K_28]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 103
begin = 22
end = 23

[K_5]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 78
begin = 16
end = 103

[K_29]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 103
begin = 13
end = 14

[K_6]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 84
begin = 7
end = 120

[K_7]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 87
begin = 15
end = 22

[K_8]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 90
begin = 5
end = 12

[K_9]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 91
begin = 16
end = 62

[K_30]
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 97
begin = 17
end = 42

[Lesson1_sqrt]
name = "Method sqrt"
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 102
begin = 22
end = 26

[Lesson1_short_sqrt]
name = "Method short_sqrt"
file = "/home/cmarche/recherche/why/tests/java/Lesson1.java"
line = 81
begin = 24
end = 34

========== jessie execution ==========
Generating Why function Lesson1_max
Generating Why function Lesson1_short_sqrt
Generating Why function Lesson1_sqrt
========== file tests/java/Lesson1.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP=dp $(DPOPT) -timeout $(TIMEOUT)

WHY=why --no-arrays  -split-user-conj -explain -locs Lesson1.loc

GWHY=gwhy-bin --no-arrays  -split-user-conj -explain -locs Lesson1.loc

JESSIELIBFILE=/usr/local/lib/jessie/why/jessie.why

.PHONY: all coq pvs simplify cvcl harvey smtlib zenon

all: simplify/Lesson1_why.sx

project: why/Lesson1.wpr

why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) --project -dir why $(JESSIELIBFILE) why/$*.why

goals: why/Lesson1_ctx.why

why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) --multi-why -dir why $(JESSIELIBFILE) why/$*.why

coq: coq/Lesson1_why.vo

coq/Lesson1_why.v: why/Lesson1.why
	@echo 'why -coq-v8 [...] why/Lesson1.why' &&$(WHY) -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" $(JESSIELIBFILE) why/Lesson1.why

coq-goals: goals coq/Lesson1_ctx_why.vo
	for f in why/Lesson1_po*.why; do make -f Lesson1.makefile coq/`basename $$f .why`_why.v ; done

coq/Lesson1_ctx_why.v: why/Lesson1_ctx.why
	@echo 'why -coq-v8 [...] why/Lesson1_ctx.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" why/Lesson1_ctx.why

coq/%_why.v: why/%.why
	@echo 'why -coq-v8 [...] why/$*.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export Lesson1_ctx_why." -coq-tactic "intuition" why/Lesson1_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<

pvs: pvs/Lesson1_why.pvs

pvs/%_why.pvs: why/%.why
	$(WHY) -pvs -dir pvs -pvs-preamble "importing jessie_why" $(JESSIELIBFILE) why/$*.why

pvs/caduceus_why.pvs:
	$(WHY) -pvs -dir pvs $(JESSIELIBFILE)

isabelle: isabelle/Lesson1_why.thy

isabelle/%_why.thy: why/%.why
	$(WHY) -isabelle -dir isabelle -isabelle-base-theory jessie_why $(JESSIELIBFILE) why/$*.why
	cp -f /usr/local/lib/jessie/isabelle/jessie_why.thy isabelle/

simplify: simplify/Lesson1_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) -simplify -no-simplify-prelude -dir simplify $(JESSIELIBFILE) why/$*.why

ergo: why/Lesson1_why.why
	@echo 'Running Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: why/%.why
	@echo 'why --why [...] why/$*.why' && $(WHY) --why -dir why $(JESSIELIBFILE) why/$*.why

cvcl: cvcl/Lesson1_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) -cvcl -dir cvcl $(JESSIELIBFILE) why/$*.why

harvey: harvey/Lesson1_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) -harvey -dir harvey $(JESSIELIBFILE) why/$*.why

zenon: zenon/Lesson1_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) -zenon -dir zenon $(JESSIELIBFILE) why/$*.why

smtlib: smtlib/Lesson1_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) $^)

smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) -smtlib --encoding sstrat --exp goal -dir smtlib $(JESSIELIBFILE) why/$*.why

gui stat: Lesson1.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILE) why/$*.why

-include Lesson1.depend

depend: coq/Lesson1_why.v
	-$(COQDEP) -I coq coq/Lesson1*_why.v > Lesson1.depend

clean:
	rm -f coq/*.vo

========== file tests/java/why/Lesson1.why ==========
type Object

type byte

type char

type int32

type interface

type long

type short

logic Lesson1_tag:  -> Object tag_id

logic Object_tag:  -> Object tag_id

axiom Lesson1_parenttag_Object : parenttag(Lesson1_tag, Object_tag)

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

predicate Non_null_Object(Object_alloc_table:Object alloc_table,
 x:Object pointer) =
 eq_int(offset_max(Object_alloc_table, x), (0))

axiom Object_int : (int_of_tag(Object_tag) = (1))

axiom Object_parenttag_bottom : parenttag(Object_tag, bottom_tag)

axiom Object_tags :
 (forall x:Object pointer.
  (forall Object_tag_table:Object tag_table.
   instanceof(Object_tag_table, x, Object_tag)))

logic String_tag:  -> Object tag_id

axiom String_parenttag_Object : parenttag(String_tag, Object_tag)

exception Throwable_exc of Object pointer

logic Throwable_tag:  -> Object tag_id

axiom Throwable_parenttag_Object : parenttag(Throwable_tag, Object_tag)

logic integer_of_byte: byte -> int

logic byte_of_integer: int -> byte

axiom byte_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_byte(byte_of_integer(x)), x)))

axiom byte_range :
 (forall x:byte.
  (le_int((-128), integer_of_byte(x)) and le_int(integer_of_byte(x), (127))))

logic integer_of_char: char -> int

logic char_of_integer: int -> char

axiom char_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_char(char_of_integer(x)), x)))

axiom char_range :
 (forall x:char.
  (le_int((0), integer_of_char(x)) and le_int(integer_of_char(x), (65535))))

goal distr_left :
 (forall x_6:int.
  (forall y_0:int.
   (forall z_0:int.
    eq_int(mul_int(add_int(x_6, y_0), z_0),
    add_int(mul_int(x_6, z_0), mul_int(y_0, z_0))))))

axiom distr_left_as_axiom :
 (forall x_6:int.
  (forall y_0:int.
   (forall z_0:int.
    eq_int(mul_int(add_int(x_6, y_0), z_0),
    add_int(mul_int(x_6, z_0), mul_int(y_0, z_0))))))

goal distr_right :
 (forall x_5:int.
  (forall y:int.
   (forall z:int.
    eq_int(mul_int(x_5, add_int(y, z)),
    add_int(mul_int(x_5, y), mul_int(x_5, z))))))

axiom distr_right_as_axiom :
 (forall x_5:int.
  (forall y:int.
   (forall z:int.
    eq_int(mul_int(x_5, add_int(y, z)),
    add_int(mul_int(x_5, y), mul_int(x_5, z))))))

predicate eq_byte(x:byte,
 y:byte) =
 eq_int(integer_of_byte(x), integer_of_byte(y))

predicate eq_char(x:char,
 y:char) =
 eq_int(integer_of_char(x), integer_of_char(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_long: long -> int

predicate eq_long(x:long,
 y:long) =
 eq_int(integer_of_long(x), integer_of_long(y))

logic integer_of_short: short -> int

predicate eq_short(x:short,
 y:short) =
 eq_int(integer_of_short(x), integer_of_short(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic interface_tag:  -> interface tag_id

axiom interface_int : (int_of_tag(interface_tag) = (1))

axiom interface_parenttag_bottom : parenttag(interface_tag, bottom_tag)

axiom interface_tags :
 (forall x:interface pointer.
  (forall interface_tag_table:interface tag_table.
   instanceof(interface_tag_table, x, interface_tag)))

logic long_of_integer: int -> long

axiom long_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_long(long_of_integer(x)), x)))

axiom long_range :
 (forall x:long.
  (le_int((-9223372036854775808), integer_of_long(x))
  and le_int(integer_of_long(x), (9223372036854775807))))

goal one_left : (forall x_2_0:int. eq_int(mul_int((1), x_2_0), x_2_0))

axiom one_left_as_axiom :
 (forall x_2_0:int. eq_int(mul_int((1), x_2_0), x_2_0))

goal one_right : (forall x_1:int. eq_int(mul_int(x_1, (1)), x_1))

axiom one_right_as_axiom : (forall x_1:int. eq_int(mul_int(x_1, (1)), x_1))

logic short_of_integer: int -> short

axiom short_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_short(short_of_integer(x)), x)))

axiom short_range :
 (forall x:short.
  (le_int((-32768), integer_of_short(x))
  and le_int(integer_of_short(x), (32767))))

goal sqr_int_elim :
 (forall x_9:int.
  (le_int(mul_int(x_9, x_9), (2147395599)) -> le_int(x_9, (46339))))

axiom sqr_int_elim_as_axiom :
 (forall x_9:int.
  (le_int(mul_int(x_9, x_9), (2147395599)) -> le_int(x_9, (46339))))

goal sqr_int_intro :
 (forall x_10:int.
  ((le_int((0), x_10) and le_int(x_10, (46340))) ->
   le_int(mul_int(x_10, x_10), (2147395600))))

axiom sqr_int_intro_as_axiom :
 (forall x_10:int.
  ((le_int((0), x_10) and le_int(x_10, (46340))) ->
   le_int(mul_int(x_10, x_10), (2147395600))))

goal sqr_short_elim :
 (forall x_7:int. (le_int(mul_int(x_7, x_7), (32760)) -> le_int(x_7, (180))))

axiom sqr_short_elim_as_axiom :
 (forall x_7:int. (le_int(mul_int(x_7, x_7), (32760)) -> le_int(x_7, (180))))

goal sqr_short_intro :
 (forall x_8:int.
  ((le_int((0), x_8) and le_int(x_8, (181))) ->
   le_int(mul_int(x_8, x_8), (32761))))

axiom sqr_short_intro_as_axiom :
 (forall x_8:int.
  ((le_int((0), x_8) and le_int(x_8, (181))) ->
   le_int(mul_int(x_8, x_8), (32761))))

goal two_left :
 (forall x_4:int. eq_int(mul_int((2), x_4), add_int(x_4, x_4)))

axiom two_left_as_axiom :
 (forall x_4:int. eq_int(mul_int((2), x_4), add_int(x_4, x_4)))

goal two_right :
 (forall x_3:int. eq_int(mul_int(x_3, (2)), add_int(x_3, x_3)))

axiom two_right_as_axiom :
 (forall x_3:int. eq_int(mul_int(x_3, (2)), add_int(x_3, x_3)))

predicate valid_struct_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate valid_struct_Lesson1(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_String(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_Throwable(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate valid_variant_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate valid_variant_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

goal zero_left : (forall x_0_0:int. eq_int(mul_int((0), x_0_0), (0)))

axiom zero_left_as_axiom :
 (forall x_0_0:int. eq_int(mul_int((0), x_0_0), (0)))

goal zero_right : (forall x_2:int. eq_int(mul_int(x_2, (0)), (0)))

axiom zero_right_as_axiom : (forall x_2:int. eq_int(mul_int(x_2, (0)), (0)))

parameter Lesson1_max :
 x_11:int32 ->
  y_1:int32 ->
   { (JC_5: (true = true))} int32
   { ((K_3:
      (forall z_1:int.
       ((ge_int(z_1, integer_of_int32(x_11))
        and ge_int(z_1, integer_of_int32(y_1))) ->
        ge_int(z_1, integer_of_int32(result)))))
     and ((K_2: ge_int(integer_of_int32(result), integer_of_int32(y_1)))
         and (K_1: ge_int(integer_of_int32(result), integer_of_int32(x_11))))) }

parameter Lesson1_short_sqrt :
 x_12:short ->
  { (K_17:
    (ge_int(integer_of_short(x_12), (0))
    and le_int(integer_of_short(x_12), (32760))))}
  short
  { (K_5:
    (ge_int(integer_of_short(result), (0))
    and (le_int(mul_int(integer_of_short(result), integer_of_short(result)),
         integer_of_short(x_12))
        and lt_int(integer_of_short(x_12),
            mul_int(add_int(integer_of_short(result), (1)),
            add_int(integer_of_short(result), (1))))))) }

parameter Lesson1_sqrt :
 x_13:int32 ->
  { (K_30:
    (ge_int(integer_of_int32(x_13), (0))
    and le_int(integer_of_int32(x_13), (2147395599))))}
  int32
  { (K_18:
    (ge_int(integer_of_int32(result), (0))
    and (le_int(mul_int(integer_of_int32(result), integer_of_int32(result)),
         integer_of_int32(x_13))
        and lt_int(integer_of_int32(x_13),
            mul_int(add_int(integer_of_int32(result), (1)),
            add_int(integer_of_int32(result), (1))))))) }

parameter Object_alloc_table : Object alloc_table ref

parameter Object_tag_table : Object tag_table ref

parameter alloc_Lesson1 :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { ge_int(n, (0))} Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Lesson1(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (instanceof(Object_tag_table, result, Lesson1_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_Object :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { ge_int(n, (0))} Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Object(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (instanceof(Object_tag_table, result, Object_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_String :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { ge_int(n, (0))} Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_String(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (instanceof(Object_tag_table, result, String_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_Throwable :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { ge_int(n, (0))} Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (instanceof(Object_tag_table, result, Throwable_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter interface_alloc_table : interface alloc_table ref

parameter interface_tag_table : interface tag_table ref

parameter alloc_interface :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_alloc_table:interface alloc_table ref ->
    { ge_int(n, (0))} interface pointer reads interface_alloc_table
    writes interface_alloc_table,interface_tag_table
    { (valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (instanceof(interface_tag_table, result, interface_tag)
          and (alloc_extends(interface_alloc_table@, interface_alloc_table)
              and alloc_extern(interface_alloc_table@, result)))) }

parameter alloc_one_Lesson1 :
 tt:unit ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { } Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Lesson1(result, (0), (0), Object_alloc_table)
      and (instanceof(Object_tag_table, result, Lesson1_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_one_Object :
 tt:unit ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { } Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Object(result, (0), (0), Object_alloc_table)
      and (instanceof(Object_tag_table, result, Object_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_one_String :
 tt:unit ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { } Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_String(result, (0), (0), Object_alloc_table)
      and (instanceof(Object_tag_table, result, String_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_one_Throwable :
 tt:unit ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { } Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Throwable(result, (0), (0), Object_alloc_table)
      and (instanceof(Object_tag_table, result, Throwable_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_one_interface :
 tt:unit ->
  interface_alloc_table:interface alloc_table ref ->
   interface_alloc_table:interface alloc_table ref ->
    { } interface pointer reads interface_alloc_table
    writes interface_alloc_table,interface_tag_table
    { (valid_struct_interface(result, (0), (0), interface_alloc_table)
      and (instanceof(interface_tag_table, result, interface_tag)
          and (alloc_extends(interface_alloc_table@, interface_alloc_table)
              and alloc_extern(interface_alloc_table@, result)))) }

parameter any_byte : unit -> { } byte { true }

parameter any_char : unit -> { } char { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_long : unit -> { } long { true }

parameter any_short : unit -> { } short { true }

parameter byte_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} byte
  { eq_int(integer_of_byte(result), x) }

parameter char_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} char
  { eq_int(integer_of_char(result), x) }

parameter cons_Lesson1 :
 this_0:Object pointer ->
  { (JC_24: (true = true))} unit reads Object_alloc_table,Object_tag_table
  { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter long_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  long { eq_int(integer_of_long(result), x) }

parameter non_null_Object :
 x_0:Object pointer ->
  { (JC_1: true)} bool reads Object_alloc_table,Object_tag_table
  { (JC_4:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_0), (0))
     else (x_0 = null))) }

parameter safe_byte_of_integer_ :
 x:int -> { } byte { eq_int(integer_of_byte(result), x) }

parameter safe_char_of_integer_ :
 x:int -> { } char { eq_int(integer_of_char(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_long_of_integer_ :
 x:int -> { } long { eq_int(integer_of_long(result), x) }

parameter safe_short_of_integer_ :
 x:int -> { } short { eq_int(integer_of_short(result), x) }

parameter short_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} short
  { eq_int(integer_of_short(result), x) }

let Lesson1_max_ensures_result_ge_x =
 fun (x_11 : int32) (y_1 : int32) ->
  { (JC_5: (true = true)) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (if (K_4: ((gt_int_ (integer_of_int32 x_11)) (integer_of_int32 y_1)))
     then begin   (jessie_returned_value := x_11); (raise Return) end
     else begin   (jessie_returned_value := y_1); (raise Return) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (K_1: ge_int(integer_of_int32(result), integer_of_int32(x_11))) }

let Lesson1_max_ensures_result_ge_y =
 fun (x_11 : int32) (y_1 : int32) ->
  { (JC_5: (true = true)) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (if (K_4: ((gt_int_ (integer_of_int32 x_11)) (integer_of_int32 y_1)))
     then begin   (jessie_returned_value := x_11); (raise Return) end
     else begin   (jessie_returned_value := y_1); (raise Return) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (K_2: ge_int(integer_of_int32(result), integer_of_int32(y_1))) }

let Lesson1_max_ensures_result_is_lub =
 fun (x_11 : int32) (y_1 : int32) ->
  { (JC_5: (true = true)) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (if (K_4: ((gt_int_ (integer_of_int32 x_11)) (integer_of_int32 y_1)))
     then begin   (jessie_returned_value := x_11); (raise Return) end
     else begin   (jessie_returned_value := y_1); (raise Return) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (K_3:
    (forall z_1:int.
     ((ge_int(z_1, integer_of_int32(x_11))
      and ge_int(z_1, integer_of_int32(y_1))) ->
      ge_int(z_1, integer_of_int32(result))))) }

let Lesson1_max_safety =
 fun (x_11 : int32) (y_1 : int32) ->
  { (JC_5: (true = true)) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (if (K_4: ((gt_int_ (integer_of_int32 x_11)) (integer_of_int32 y_1)))
     then begin   (jessie_returned_value := x_11); (raise Return) end
     else begin   (jessie_returned_value := y_1); (raise Return) end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let Lesson1_short_sqrt_ensures_default =
 fun (x_12 : short) ->
  { (K_17:
    (ge_int(integer_of_short(x_12), (0))
    and le_int(integer_of_short(x_12), (32760)))) }
  (init:
  (let jessie_returned_value = ref (any_short void) in
  try
   begin
     (let count_0 = ref (safe_short_of_integer_ (K_16: (0))) in
     (let sum_0 = ref (safe_short_of_integer_ (K_15: (1))) in
     begin
       try
        while true do
        { invariant
            (K_6:
            (ge_int(integer_of_short(count_0), (0))
            and (ge_int(integer_of_short(x_12),
                 mul_int(integer_of_short(count_0),
                 integer_of_short(count_0)))
                and (eq_int(integer_of_short(sum_0),
                     mul_int(add_int(integer_of_short(count_0), (1)),
                     add_int(integer_of_short(count_0), (1))))
                    and (le_int(integer_of_short(count_0), (180))
                        and le_int(integer_of_short(sum_0), (32761)))))))
           }
         try
          (let jessie_16 = begin
                             (if (K_14:
                                 ((le_int_ (integer_of_short !sum_0)) 
                                  (integer_of_short x_12)))
                             then
                              (let jessie_14 = begin
                                                 (let jessie_13 = (let jessie_1 = !count_0 in
                                                                  begin
                                                                    (let jessie_12 = 
                                                                    (count_0 := 
                                                                    (safe_short_of_integer_ 
                                                                    ((add_int 
                                                                    (integer_of_short jessie_1)) (1)))) in
                                                                    void);
                                                                   jessie_1
                                                                  end) in
                                                 void);
                                                (K_10:
                                                (assert
                                                { (K_9:
                                                  eq_int(add_int(add_int(
                                                                 mul_int(
                                                                 integer_of_short(count_0),
                                                                 integer_of_short(count_0)),
                                                                 mul_int((2),
                                                                 integer_of_short(count_0))),
                                                         (1)),
                                                  mul_int(add_int(integer_of_short(count_0),
                                                          (1)),
                                                  add_int(integer_of_short(count_0),
                                                  (1))))) };
                                                void));
                                                (K_13:
                                                begin
                                                  (sum_0 := (safe_short_of_integer_ 
                                                             ((add_int 
                                                               (integer_of_short !sum_0)) 
                                                              (integer_of_int32 
                                                               (safe_int32_of_integer_ 
                                                                ((add_int 
                                                                  (integer_of_int32 
                                                                   (safe_int32_of_integer_ 
                                                                    ((mul_int (2)) 
                                                                    (integer_of_short !count_0))))) (1)))))));
                                                 !sum_0
                                                end)
                                               end in
                              void)
                             else
                              (let jessie_15 = (raise (Loop_exit_exc void)) in
                              void));
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_3 ->
          void end
        done
        with
        Loop_exit_exc jessie_2 ->
        void end;
      (jessie_returned_value := !count_0);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (K_5:
    (ge_int(integer_of_short(result), (0))
    and (le_int(mul_int(integer_of_short(result), integer_of_short(result)),
         integer_of_short(x_12))
        and lt_int(integer_of_short(x_12),
            mul_int(add_int(integer_of_short(result), (1)),
            add_int(integer_of_short(result), (1))))))) }

let Lesson1_short_sqrt_safety =
 fun (x_12 : short) ->
  { (K_17:
    (ge_int(integer_of_short(x_12), (0))
    and le_int(integer_of_short(x_12), (32760)))) }
  (init:
  (let jessie_returned_value = ref (any_short void) in
  try
   begin
     (let count_0 = ref (safe_short_of_integer_ (K_16: (0))) in
     (let sum_0 = ref (safe_short_of_integer_ (K_15: (1))) in
     begin
       try
        while true do
        { invariant
            (K_6:
            (ge_int(integer_of_short(count_0), (0))
            and (ge_int(integer_of_short(x_12),
                 mul_int(integer_of_short(count_0),
                 integer_of_short(count_0)))
                and (eq_int(integer_of_short(sum_0),
                     mul_int(add_int(integer_of_short(count_0), (1)),
                     add_int(integer_of_short(count_0), (1))))
                    and (le_int(integer_of_short(count_0), (180))
                        and le_int(integer_of_short(sum_0), (32761)))))))
          variant (K_7 : sub_int(integer_of_short(x_12),
                         integer_of_short(sum_0))) }
         try
          (let jessie_11 = begin
                             (if (K_14:
                                 ((le_int_ (integer_of_short !sum_0)) 
                                  (integer_of_short x_12)))
                             then
                              (let jessie_9 = begin
                                                (let jessie_8 = (let jessie_1 = !count_0 in
                                                                begin
                                                                  (let jessie_7 = 
                                                                  (count_0 := 
                                                                   (JC_11:
                                                                   (short_of_integer_ 
                                                                    ((add_int 
                                                                    (integer_of_short jessie_1)) (1))))) in
                                                                  void);
                                                                 jessie_1
                                                                end) in
                                                void);
                                               (K_10:
                                               (assert
                                               { (K_9:
                                                 eq_int(add_int(add_int(
                                                                mul_int(
                                                                integer_of_short(count_0),
                                                                integer_of_short(count_0)),
                                                                mul_int((2),
                                                                integer_of_short(count_0))),
                                                        (1)),
                                                 mul_int(add_int(integer_of_short(count_0),
                                                         (1)),
                                                 add_int(integer_of_short(count_0),
                                                 (1))))) };
                                               void));
                                               (K_13:
                                               begin
                                                 (sum_0 := (JC_13:
                                                           (short_of_integer_ 
                                                            ((add_int 
                                                              (integer_of_short !sum_0)) 
                                                             (integer_of_int32 
                                                              (K_12:
                                                              (int32_of_integer_ 
                                                               ((add_int 
                                                                 (integer_of_int32 
                                                                  (K_11:
                                                                  (int32_of_integer_ 
                                                                   ((mul_int (2)) 
                                                                    (integer_of_short !count_0)))))) (1)))))))));
                                                !sum_0
                                               end)
                                              end in
                              void)
                             else
                              (let jessie_10 = (raise (Loop_exit_exc void)) in
                              void));
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_3 ->
          void end
        done
        with
        Loop_exit_exc jessie_2 ->
        void end;
      (jessie_returned_value := !count_0);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let Lesson1_sqrt_ensures_result_is_sqrt =
 fun (x_13 : int32) ->
  { (K_30:
    (ge_int(integer_of_int32(x_13), (0))
    and le_int(integer_of_int32(x_13), (2147395599)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let count = ref (safe_int32_of_integer_ (K_29: (0))) in
     (let sum = ref (safe_int32_of_integer_ (K_28: (1))) in
     begin
       try
        while true do
        { invariant
            (K_19:
            (ge_int(integer_of_int32(count), (0))
            and (ge_int(integer_of_int32(x_13),
                 mul_int(integer_of_int32(count), integer_of_int32(count)))
                and (eq_int(integer_of_int32(sum),
                     mul_int(add_int(integer_of_int32(count), (1)),
                     add_int(integer_of_int32(count), (1))))
                    and (le_int(integer_of_int32(count), (46339))
                        and le_int(integer_of_int32(sum), (2147395600)))))))
           }
         try
          (let jessie_26 = begin
                             (if (K_27:
                                 ((le_int_ (integer_of_int32 !sum)) (integer_of_int32 x_13)))
                             then
                              (let jessie_24 = begin
                                                 (let jessie_23 = (let jessie_4 = !count in
                                                                  begin
                                                                    (let jessie_22 = 
                                                                    (count := 
                                                                    (safe_int32_of_integer_ 
                                                                    ((add_int 
                                                                    (integer_of_int32 jessie_4)) (1)))) in
                                                                    void);
                                                                   jessie_4
                                                                  end) in
                                                 void);
                                                (K_23:
                                                (assert
                                                { (K_22:
                                                  eq_int(add_int(add_int(
                                                                 mul_int(
                                                                 integer_of_int32(count),
                                                                 integer_of_int32(count)),
                                                                 mul_int((2),
                                                                 integer_of_int32(count))),
                                                         (1)),
                                                  mul_int(add_int(integer_of_int32(count),
                                                          (1)),
                                                  add_int(integer_of_int32(count),
                                                  (1))))) };
                                                void));
                                                (K_26:
                                                begin
                                                  (sum := (safe_int32_of_integer_ 
                                                           ((add_int 
                                                             (integer_of_int32 !sum)) 
                                                            (integer_of_int32 
                                                             (safe_int32_of_integer_ 
                                                              ((add_int 
                                                                (integer_of_int32 
                                                                 (safe_int32_of_integer_ 
                                                                  ((mul_int (2)) 
                                                                   (integer_of_int32 !count))))) (1)))))));
                                                 !sum
                                                end)
                                               end in
                              void)
                             else
                              (let jessie_25 = (raise (Loop_exit_exc void)) in
                              void));
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_6 ->
          void end
        done
        with
        Loop_exit_exc jessie_5 ->
        void end;
      (jessie_returned_value := !count);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (K_18:
    (ge_int(integer_of_int32(result), (0))
    and (le_int(mul_int(integer_of_int32(result), integer_of_int32(result)),
         integer_of_int32(x_13))
        and lt_int(integer_of_int32(x_13),
            mul_int(add_int(integer_of_int32(result), (1)),
            add_int(integer_of_int32(result), (1))))))) }

let Lesson1_sqrt_safety =
 fun (x_13 : int32) ->
  { (K_30:
    (ge_int(integer_of_int32(x_13), (0))
    and le_int(integer_of_int32(x_13), (2147395599)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let count = ref (safe_int32_of_integer_ (K_29: (0))) in
     (let sum = ref (safe_int32_of_integer_ (K_28: (1))) in
     begin
       try
        while true do
        { invariant
            (K_19:
            (ge_int(integer_of_int32(count), (0))
            and (ge_int(integer_of_int32(x_13),
                 mul_int(integer_of_int32(count), integer_of_int32(count)))
                and (eq_int(integer_of_int32(sum),
                     mul_int(add_int(integer_of_int32(count), (1)),
                     add_int(integer_of_int32(count), (1))))
                    and (le_int(integer_of_int32(count), (46339))
                        and le_int(integer_of_int32(sum), (2147395600)))))))
          variant (K_20 : sub_int(integer_of_int32(x_13),
                          integer_of_int32(sum))) }
         try
          (let jessie_21 = begin
                             (if (K_27:
                                 ((le_int_ (integer_of_int32 !sum)) (integer_of_int32 x_13)))
                             then
                              (let jessie_19 = begin
                                                 (let jessie_18 = (let jessie_4 = !count in
                                                                  begin
                                                                    (let jessie_17 = 
                                                                    (count := 
                                                                    (JC_19:
                                                                    (int32_of_integer_ 
                                                                    ((add_int 
                                                                    (integer_of_int32 jessie_4)) (1))))) in
                                                                    void);
                                                                   jessie_4
                                                                  end) in
                                                 void);
                                                (K_23:
                                                (assert
                                                { (K_22:
                                                  eq_int(add_int(add_int(
                                                                 mul_int(
                                                                 integer_of_int32(count),
                                                                 integer_of_int32(count)),
                                                                 mul_int((2),
                                                                 integer_of_int32(count))),
                                                         (1)),
                                                  mul_int(add_int(integer_of_int32(count),
                                                          (1)),
                                                  add_int(integer_of_int32(count),
                                                  (1))))) };
                                                void));
                                                (K_26:
                                                begin
                                                  (sum := (JC_21:
                                                          (int32_of_integer_ 
                                                           ((add_int 
                                                             (integer_of_int32 !sum)) 
                                                            (integer_of_int32 
                                                             (K_25:
                                                             (int32_of_integer_ 
                                                              ((add_int 
                                                                (integer_of_int32 
                                                                 (K_24:
                                                                 (int32_of_integer_ 
                                                                  ((mul_int (2)) 
                                                                   (integer_of_int32 !count)))))) (1)))))))));
                                                 !sum
                                                end)
                                               end in
                              void)
                             else
                              (let jessie_20 = (raise (Loop_exit_exc void)) in
                              void));
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_6 ->
          void end
        done
        with
        Loop_exit_exc jessie_5 ->
        void end;
      (jessie_returned_value := !count);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }


========== make project execution ==========
make[1]: Entering directory `/home/cmarche/recherche/why/tests/java'
why --project [...] why/Lesson1.why
make[1]: Leaving directory `/home/cmarche/recherche/why/tests/java'
========== file tests/java/why/Lesson1.wpr ==========
<project name="Lesson1" context="why/Lesson1_ctx.why">
  <lemma name="distr_left">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Lesson1_po1.why">
      <location file = "why/Lesson1.why" line = "74" begin = "0" end = "172"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="distr_right">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Lesson1_po2.why">
      <location file = "why/Lesson1.why" line = "88" begin = "0" end = "161"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="one_left">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Lesson1_po3.why">
      <location file = "why/Lesson1.why" line = "163" begin = "0" end = "70"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="one_right">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Lesson1_po4.why">
      <location file = "why/Lesson1.why" line = "168" begin = "0" end = "65"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="sqr_int_elim">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Lesson1_po5.why">
      <location file = "why/Lesson1.why" line = "184" begin = "0" end = "106"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="sqr_int_intro">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Lesson1_po6.why">
      <location file = "why/Lesson1.why" line = "192" begin = "0" end = "138"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="sqr_short_elim">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Lesson1_po7.why">
      <location file = "why/Lesson1.why" line = "202" begin = "0" end = "99"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="sqr_short_intro">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Lesson1_po8.why">
      <location file = "why/Lesson1.why" line = "208" begin = "0" end = "128"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="two_left">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Lesson1_po9.why">
      <location file = "why/Lesson1.why" line = "218" begin = "0" end = "79"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="two_right">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Lesson1_po10.why">
      <location file = "why/Lesson1.why" line = "224" begin = "0" end = "80"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="zero_left">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Lesson1_po11.why">
      <location file = "why/Lesson1.why" line = "276" begin = "0" end = "69"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="zero_right">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Lesson1_po12.why">
      <location file = "why/Lesson1.why" line = "281" begin = "0" end = "66"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <function name="goal zero_right">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="goal zero_left">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="goal two_right">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="goal two_left">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="goal sqr_short_intro">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="goal sqr_short_elim">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="goal sqr_int_intro">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="goal sqr_int_elim">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="goal one_right">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="goal one_left">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="goal distr_right">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="goal distr_left">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Method sqrt">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Lesson1_po68.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po69.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po70.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po71.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po72.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po73.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.jc" line = "169" begin = "27" end = "35"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po74.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.jc" line = "169" begin = "27" end = "35"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po75.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "112" begin = "16" end = "62"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/Lesson1_po76.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "113" begin = "12" end = "19"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po77.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "113" begin = "12" end = "19"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po78.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "113" begin = "12" end = "21"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po79.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "113" begin = "12" end = "21"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po80.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.jc" line = "173" begin = "26" end = "134"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po81.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.jc" line = "173" begin = "26" end = "134"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po82.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po83.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po84.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po85.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po86.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po87.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "108" begin = "15" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/Lesson1_po88.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "108" begin = "15" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `result_is_sqrt'">
    <goal why_file="why/Lesson1_po54.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po55.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po56.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po57.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po58.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po59.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "112" begin = "16" end = "62"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/Lesson1_po60.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po61.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po62.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po63.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po64.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "105" begin = "7" end = "127"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po65.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "99" begin = "18" end = "107"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Lesson1_po66.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "99" begin = "18" end = "107"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Lesson1_po67.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "99" begin = "18" end = "107"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Method short_sqrt">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Lesson1_po33.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po34.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po35.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po36.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po37.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po38.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.jc" line = "133" begin = "26" end = "36"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po39.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.jc" line = "133" begin = "26" end = "36"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po40.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "91" begin = "16" end = "62"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/Lesson1_po41.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "92" begin = "12" end = "19"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po42.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "92" begin = "12" end = "19"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po43.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "92" begin = "12" end = "21"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po44.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "92" begin = "12" end = "21"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po45.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.jc" line = "137" begin = "26" end = "140"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po46.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.jc" line = "137" begin = "26" end = "140"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Lesson1_po47.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po48.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po49.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po50.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po51.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po52.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "87" begin = "15" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/Lesson1_po53.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "87" begin = "15" end = "22"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Behavior">
    <goal why_file="why/Lesson1_po19.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po20.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po21.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po22.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po23.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Lesson1_po24.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "91" begin = "16" end = "62"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/Lesson1_po25.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po26.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po27.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po28.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po29.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "84" begin = "7" end = "120"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Lesson1_po30.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "78" begin = "16" end = "103"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Lesson1_po31.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "78" begin = "16" end = "103"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Lesson1_po32.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "78" begin = "16" end = "103"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Method max">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Normal behavior `result_is_lub'">
    <goal why_file="why/Lesson1_po17.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "71" begin = "18" end = "70"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Lesson1_po18.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "71" begin = "18" end = "70"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `result_ge_y'">
    <goal why_file="why/Lesson1_po15.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "69" begin = "18" end = "30"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Lesson1_po16.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "69" begin = "18" end = "30"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `result_ge_x'">
    <goal why_file="why/Lesson1_po13.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "67" begin = "18" end = "30"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Lesson1_po14.why">
      <location file = "/home/cmarche/recherche/why/tests/java/Lesson1.java" line = "67" begin = "18" end = "30"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
========== file tests/java/why/Lesson1_ctx.why ==========
logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

axiom div_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a / b)) and ((a / b) <= a)))))

axiom div_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((a <= (a / b)) and ((a / b) <= 0)))))

axiom div_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-a) <= (a / b)) and ((a / b) <= 0)))))

axiom div_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> ((0 <= (a / b)) and ((a / b) <= (-a))))))

axiom mod_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

axiom mod_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

type 't alloc_table

type 't pointer

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

logic shift : 'a1 pointer, int -> 'a1 pointer

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

logic null :  -> 'a1 pointer

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) <= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, p)]. (p = shift(q, sub_pointer(p,
      q)))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      ((sub_pointer(p, q) = 0) -> (p = q))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

logic alloc_extern : 'a1 alloc_table, 'a1 pointer -> prop

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer. (offset_min(a1, p) = offset_min(a2, p))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer. (offset_max(a1, p) = offset_max(a2, p))))))

axiom alloc_extern_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer [alloc_extern(a, p)].
      (alloc_extern(a, p) ->
       (forall q:'a1 pointer.
         ((offset_min(a, q) <= offset_max(a, q)) -> full_separated(p, q))))))

type Object

type byte

type char

type int32

type interface

type long

type short

logic Lesson1_tag :  -> Object tag_id

logic Object_tag :  -> Object tag_id

axiom Lesson1_parenttag_Object: parenttag(Lesson1_tag, Object_tag)

predicate Non_null_Object(Object_alloc_table: Object alloc_table,
  x: Object pointer) = (offset_max(Object_alloc_table, x) = 0)

axiom Object_int: (int_of_tag(Object_tag) = 1)

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

logic integer_of_byte : byte -> int

logic byte_of_integer : int -> byte

axiom byte_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_byte(byte_of_integer(x)) = x)))

axiom byte_range:
  (forall x:byte.
    (((-128) <= integer_of_byte(x)) and (integer_of_byte(x) <= 127)))

logic integer_of_char : char -> int

logic char_of_integer : int -> char

axiom char_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 65535)) -> (integer_of_char(char_of_integer(x)) = x)))

axiom char_range:
  (forall x:char.
    ((0 <= integer_of_char(x)) and (integer_of_char(x) <= 65535)))

axiom distr_left_as_axiom:
  (forall x_6:int.
    (forall y_0:int.
      (forall z_0:int. (((x_6 + y_0) * z_0) = ((x_6 * z_0) + (y_0 * z_0))))))

axiom distr_right_as_axiom:
  (forall x_5:int.
    (forall y:int.
      (forall z:int. ((x_5 * (y + z)) = ((x_5 * y) + (x_5 * z))))))

predicate eq_byte(x: byte, y: byte) =
  (integer_of_byte(x) = integer_of_byte(y))

predicate eq_char(x: char, y: char) =
  (integer_of_char(x) = integer_of_char(y))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_long : long -> int

predicate eq_long(x: long, y: long) =
  (integer_of_long(x) = integer_of_long(y))

logic integer_of_short : short -> int

predicate eq_short(x: short, y: short) =
  (integer_of_short(x) = integer_of_short(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

logic long_of_integer : int -> long

axiom long_coerce:
  (forall x:int.
    ((((-9223372036854775808) <= x) and (x <= 9223372036854775807)) ->
     (integer_of_long(long_of_integer(x)) = x)))

axiom long_range:
  (forall x:long.
    (((-9223372036854775808) <= integer_of_long(x)) and
     (integer_of_long(x) <= 9223372036854775807)))

axiom one_left_as_axiom: (forall x_2_0:int. ((1 * x_2_0) = x_2_0))

axiom one_right_as_axiom: (forall x_1:int. ((x_1 * 1) = x_1))

logic short_of_integer : int -> short

axiom short_coerce:
  (forall x:int.
    ((((-32768) <= x) and (x <= 32767)) ->
     (integer_of_short(short_of_integer(x)) = x)))

axiom short_range:
  (forall x:short.
    (((-32768) <= integer_of_short(x)) and (integer_of_short(x) <= 32767)))

axiom sqr_int_elim_as_axiom:
  (forall x_9:int. (((x_9 * x_9) <= 2147395599) -> (x_9 <= 46339)))

axiom sqr_int_intro_as_axiom:
  (forall x_10:int.
    (((0 <= x_10) and (x_10 <= 46340)) -> ((x_10 * x_10) <= 2147395600)))

axiom sqr_short_elim_as_axiom:
  (forall x_7:int. (((x_7 * x_7) <= 32760) -> (x_7 <= 180)))

axiom sqr_short_intro_as_axiom:
  (forall x_8:int. (((0 <= x_8) and (x_8 <= 181)) -> ((x_8 * x_8) <= 32761)))

axiom two_left_as_axiom: (forall x_4:int. ((2 * x_4) = (x_4 + x_4)))

axiom two_right_as_axiom: (forall x_3:int. ((x_3 * 2) = (x_3 + x_3)))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_struct_Lesson1(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_variant_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_variant_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

axiom zero_left_as_axiom: (forall x_0_0:int. ((0 * x_0_0) = 0))

axiom zero_right_as_axiom: (forall x_2:int. ((x_2 * 0) = 0))

========== file tests/java/why/Lesson1_po1.why ==========
goal distr_left:
  (forall x_6:int.
    (forall y_0:int.
      (forall z_0:int. (((x_6 + y_0) * z_0) = ((x_6 * z_0) + (y_0 * z_0))))))

========== file tests/java/why/Lesson1_po10.why ==========
goal two_right:
  (forall x_3:int. ((x_3 * 2) = (x_3 + x_3)))

========== file tests/java/why/Lesson1_po11.why ==========
goal zero_left:
  (forall x_0_0:int. ((0 * x_0_0) = 0))

========== file tests/java/why/Lesson1_po12.why ==========
goal zero_right:
  (forall x_2:int. ((x_2 * 0) = 0))

========== file tests/java/why/Lesson1_po13.why ==========
goal Lesson1_max_ensures_result_ge_x_po_1:
  forall x_11:int32.
  forall y_1:int32.
  ("JC_5": (true = true)) ->
  (integer_of_int32(x_11) > integer_of_int32(y_1)) ->
  forall jessie_returned_value:int32.
  (jessie_returned_value = x_11) ->
  ("K_1":
  (integer_of_int32(jessie_returned_value) >= integer_of_int32(x_11)))

========== file tests/java/why/Lesson1_po14.why ==========
goal Lesson1_max_ensures_result_ge_x_po_2:
  forall x_11:int32.
  forall y_1:int32.
  ("JC_5": (true = true)) ->
  (integer_of_int32(x_11) <= integer_of_int32(y_1)) ->
  forall jessie_returned_value:int32.
  (jessie_returned_value = y_1) ->
  ("K_1":
  (integer_of_int32(jessie_returned_value) >= integer_of_int32(x_11)))

========== file tests/java/why/Lesson1_po15.why ==========
goal Lesson1_max_ensures_result_ge_y_po_1:
  forall x_11:int32.
  forall y_1:int32.
  ("JC_5": (true = true)) ->
  (integer_of_int32(x_11) > integer_of_int32(y_1)) ->
  forall jessie_returned_value:int32.
  (jessie_returned_value = x_11) ->
  ("K_2": (integer_of_int32(jessie_returned_value) >= integer_of_int32(y_1)))

========== file tests/java/why/Lesson1_po16.why ==========
goal Lesson1_max_ensures_result_ge_y_po_2:
  forall x_11:int32.
  forall y_1:int32.
  ("JC_5": (true = true)) ->
  (integer_of_int32(x_11) <= integer_of_int32(y_1)) ->
  forall jessie_returned_value:int32.
  (jessie_returned_value = y_1) ->
  ("K_2": (integer_of_int32(jessie_returned_value) >= integer_of_int32(y_1)))

========== file tests/java/why/Lesson1_po17.why ==========
goal Lesson1_max_ensures_result_is_lub_po_1:
  forall x_11:int32.
  forall y_1:int32.
  ("JC_5": (true = true)) ->
  (integer_of_int32(x_11) > integer_of_int32(y_1)) ->
  forall jessie_returned_value:int32.
  (jessie_returned_value = x_11) ->
  forall z_1:int.
  ((z_1 >= integer_of_int32(x_11)) and (z_1 >= integer_of_int32(y_1))) ->
  ("K_3": (z_1 >= integer_of_int32(jessie_returned_value)))

========== file tests/java/why/Lesson1_po18.why ==========
goal Lesson1_max_ensures_result_is_lub_po_2:
  forall x_11:int32.
  forall y_1:int32.
  ("JC_5": (true = true)) ->
  (integer_of_int32(x_11) <= integer_of_int32(y_1)) ->
  forall jessie_returned_value:int32.
  (jessie_returned_value = y_1) ->
  forall z_1:int.
  ((z_1 >= integer_of_int32(x_11)) and (z_1 >= integer_of_int32(y_1))) ->
  ("K_3": (z_1 >= integer_of_int32(jessie_returned_value)))

========== file tests/java/why/Lesson1_po19.why ==========
goal Lesson1_short_sqrt_ensures_default_po_1:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  ("K_6": (integer_of_short(result) >= 0))

========== file tests/java/why/Lesson1_po2.why ==========
goal distr_right:
  (forall x_5:int.
    (forall y:int.
      (forall z:int. ((x_5 * (y + z)) = ((x_5 * y) + (x_5 * z))))))

========== file tests/java/why/Lesson1_po20.why ==========
goal Lesson1_short_sqrt_ensures_default_po_2:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  ("K_6":
  (integer_of_short(x_12) >= (integer_of_short(result) * integer_of_short(result))))

========== file tests/java/why/Lesson1_po21.why ==========
goal Lesson1_short_sqrt_ensures_default_po_3:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  ("K_6":
  (integer_of_short(result0) = ((integer_of_short(result) + 1) * (integer_of_short(result) + 1))))

========== file tests/java/why/Lesson1_po22.why ==========
goal Lesson1_short_sqrt_ensures_default_po_4:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  ("K_6": (integer_of_short(result) <= 180))

========== file tests/java/why/Lesson1_po23.why ==========
goal Lesson1_short_sqrt_ensures_default_po_5:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  ("K_6": (integer_of_short(result0) <= 32761))

========== file tests/java/why/Lesson1_po24.why ==========
goal Lesson1_short_sqrt_ensures_default_po_6:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))))

========== file tests/java/why/Lesson1_po25.why ==========
goal Lesson1_short_sqrt_ensures_default_po_7:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  forall result4:short.
  (integer_of_short(result4) = (integer_of_short(sum_0) + integer_of_int32(result3))) ->
  forall sum_0_0:short.
  (sum_0_0 = result4) ->
  ("K_6": (integer_of_short(count_0_0) >= 0))

========== file tests/java/why/Lesson1_po26.why ==========
goal Lesson1_short_sqrt_ensures_default_po_8:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  forall result4:short.
  (integer_of_short(result4) = (integer_of_short(sum_0) + integer_of_int32(result3))) ->
  forall sum_0_0:short.
  (sum_0_0 = result4) ->
  ("K_6":
  (integer_of_short(x_12) >= (integer_of_short(count_0_0) * integer_of_short(count_0_0))))

========== file tests/java/why/Lesson1_po27.why ==========
goal Lesson1_short_sqrt_ensures_default_po_9:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  forall result4:short.
  (integer_of_short(result4) = (integer_of_short(sum_0) + integer_of_int32(result3))) ->
  forall sum_0_0:short.
  (sum_0_0 = result4) ->
  ("K_6":
  (integer_of_short(sum_0_0) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1))))

========== file tests/java/why/Lesson1_po28.why ==========
goal Lesson1_short_sqrt_ensures_default_po_10:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  forall result4:short.
  (integer_of_short(result4) = (integer_of_short(sum_0) + integer_of_int32(result3))) ->
  forall sum_0_0:short.
  (sum_0_0 = result4) ->
  ("K_6": (integer_of_short(count_0_0) <= 180))

========== file tests/java/why/Lesson1_po29.why ==========
goal Lesson1_short_sqrt_ensures_default_po_11:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  forall result4:short.
  (integer_of_short(result4) = (integer_of_short(sum_0) + integer_of_int32(result3))) ->
  forall sum_0_0:short.
  (sum_0_0 = result4) ->
  ("K_6": (integer_of_short(sum_0_0) <= 32761))

========== file tests/java/why/Lesson1_po3.why ==========
goal one_left:
  (forall x_2_0:int. ((1 * x_2_0) = x_2_0))

========== file tests/java/why/Lesson1_po30.why ==========
goal Lesson1_short_sqrt_ensures_default_po_12:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) > integer_of_short(x_12)) ->
  forall jessie_returned_value:short.
  (jessie_returned_value = count_0) ->
  ("K_5": (integer_of_short(jessie_returned_value) >= 0))

========== file tests/java/why/Lesson1_po31.why ==========
goal Lesson1_short_sqrt_ensures_default_po_13:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) > integer_of_short(x_12)) ->
  forall jessie_returned_value:short.
  (jessie_returned_value = count_0) ->
  ("K_5":
  ((integer_of_short(jessie_returned_value) * integer_of_short(jessie_returned_value)) <= integer_of_short(x_12)))

========== file tests/java/why/Lesson1_po32.why ==========
goal Lesson1_short_sqrt_ensures_default_po_14:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) > integer_of_short(x_12)) ->
  forall jessie_returned_value:short.
  (jessie_returned_value = count_0) ->
  ("K_5":
  (integer_of_short(x_12) < ((integer_of_short(jessie_returned_value) + 1) * (integer_of_short(jessie_returned_value) + 1))))

========== file tests/java/why/Lesson1_po33.why ==========
goal Lesson1_short_sqrt_safety_po_1:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  ("K_6": (integer_of_short(result) >= 0))

========== file tests/java/why/Lesson1_po34.why ==========
goal Lesson1_short_sqrt_safety_po_2:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  ("K_6":
  (integer_of_short(x_12) >= (integer_of_short(result) * integer_of_short(result))))

========== file tests/java/why/Lesson1_po35.why ==========
goal Lesson1_short_sqrt_safety_po_3:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  ("K_6":
  (integer_of_short(result0) = ((integer_of_short(result) + 1) * (integer_of_short(result) + 1))))

========== file tests/java/why/Lesson1_po36.why ==========
goal Lesson1_short_sqrt_safety_po_4:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  ("K_6": (integer_of_short(result) <= 180))

========== file tests/java/why/Lesson1_po37.why ==========
goal Lesson1_short_sqrt_safety_po_5:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  ("K_6": (integer_of_short(result0) <= 32761))

========== file tests/java/why/Lesson1_po38.why ==========
goal Lesson1_short_sqrt_safety_po_6:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  ((-32768) <= (integer_of_short(count_0) + 1))

========== file tests/java/why/Lesson1_po39.why ==========
goal Lesson1_short_sqrt_safety_po_7:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  ((integer_of_short(count_0) + 1) <= 32767)

========== file tests/java/why/Lesson1_po4.why ==========
goal one_right:
  (forall x_1:int. ((x_1 * 1) = x_1))

========== file tests/java/why/Lesson1_po40.why ==========
goal Lesson1_short_sqrt_safety_po_8:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))))

========== file tests/java/why/Lesson1_po41.why ==========
goal Lesson1_short_sqrt_safety_po_9:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  ((-2147483648) <= (2 * integer_of_short(count_0_0)))

========== file tests/java/why/Lesson1_po42.why ==========
goal Lesson1_short_sqrt_safety_po_10:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  ((2 * integer_of_short(count_0_0)) <= 2147483647)

========== file tests/java/why/Lesson1_po43.why ==========
goal Lesson1_short_sqrt_safety_po_11:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_short(count_0_0))) and
   ((2 * integer_of_short(count_0_0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  ((-2147483648) <= (integer_of_int32(result2) + 1))

========== file tests/java/why/Lesson1_po44.why ==========
goal Lesson1_short_sqrt_safety_po_12:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_short(count_0_0))) and
   ((2 * integer_of_short(count_0_0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  ((integer_of_int32(result2) + 1) <= 2147483647)

========== file tests/java/why/Lesson1_po45.why ==========
goal Lesson1_short_sqrt_safety_po_13:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_short(count_0_0))) and
   ((2 * integer_of_short(count_0_0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  ((-32768) <= (integer_of_short(sum_0) + integer_of_int32(result3)))

========== file tests/java/why/Lesson1_po46.why ==========
goal Lesson1_short_sqrt_safety_po_14:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_short(count_0_0))) and
   ((2 * integer_of_short(count_0_0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  ((integer_of_short(sum_0) + integer_of_int32(result3)) <= 32767)

========== file tests/java/why/Lesson1_po47.why ==========
goal Lesson1_short_sqrt_safety_po_15:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_short(count_0_0))) and
   ((2 * integer_of_short(count_0_0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-32768) <= (integer_of_short(sum_0) + integer_of_int32(result3))) and
   ((integer_of_short(sum_0) + integer_of_int32(result3)) <= 32767)) ->
  forall result4:short.
  (integer_of_short(result4) = (integer_of_short(sum_0) + integer_of_int32(result3))) ->
  forall sum_0_0:short.
  (sum_0_0 = result4) ->
  ("K_6": (integer_of_short(count_0_0) >= 0))

========== file tests/java/why/Lesson1_po48.why ==========
goal Lesson1_short_sqrt_safety_po_16:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_short(count_0_0))) and
   ((2 * integer_of_short(count_0_0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-32768) <= (integer_of_short(sum_0) + integer_of_int32(result3))) and
   ((integer_of_short(sum_0) + integer_of_int32(result3)) <= 32767)) ->
  forall result4:short.
  (integer_of_short(result4) = (integer_of_short(sum_0) + integer_of_int32(result3))) ->
  forall sum_0_0:short.
  (sum_0_0 = result4) ->
  ("K_6":
  (integer_of_short(x_12) >= (integer_of_short(count_0_0) * integer_of_short(count_0_0))))

========== file tests/java/why/Lesson1_po49.why ==========
goal Lesson1_short_sqrt_safety_po_17:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_short(count_0_0))) and
   ((2 * integer_of_short(count_0_0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-32768) <= (integer_of_short(sum_0) + integer_of_int32(result3))) and
   ((integer_of_short(sum_0) + integer_of_int32(result3)) <= 32767)) ->
  forall result4:short.
  (integer_of_short(result4) = (integer_of_short(sum_0) + integer_of_int32(result3))) ->
  forall sum_0_0:short.
  (sum_0_0 = result4) ->
  ("K_6":
  (integer_of_short(sum_0_0) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1))))

========== file tests/java/why/Lesson1_po5.why ==========
goal sqr_int_elim:
  (forall x_9:int. (((x_9 * x_9) <= 2147395599) -> (x_9 <= 46339)))

========== file tests/java/why/Lesson1_po50.why ==========
goal Lesson1_short_sqrt_safety_po_18:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_short(count_0_0))) and
   ((2 * integer_of_short(count_0_0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-32768) <= (integer_of_short(sum_0) + integer_of_int32(result3))) and
   ((integer_of_short(sum_0) + integer_of_int32(result3)) <= 32767)) ->
  forall result4:short.
  (integer_of_short(result4) = (integer_of_short(sum_0) + integer_of_int32(result3))) ->
  forall sum_0_0:short.
  (sum_0_0 = result4) ->
  ("K_6": (integer_of_short(count_0_0) <= 180))

========== file tests/java/why/Lesson1_po51.why ==========
goal Lesson1_short_sqrt_safety_po_19:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_short(count_0_0))) and
   ((2 * integer_of_short(count_0_0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-32768) <= (integer_of_short(sum_0) + integer_of_int32(result3))) and
   ((integer_of_short(sum_0) + integer_of_int32(result3)) <= 32767)) ->
  forall result4:short.
  (integer_of_short(result4) = (integer_of_short(sum_0) + integer_of_int32(result3))) ->
  forall sum_0_0:short.
  (sum_0_0 = result4) ->
  ("K_6": (integer_of_short(sum_0_0) <= 32761))

========== file tests/java/why/Lesson1_po52.why ==========
goal Lesson1_short_sqrt_safety_po_20:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_short(count_0_0))) and
   ((2 * integer_of_short(count_0_0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-32768) <= (integer_of_short(sum_0) + integer_of_int32(result3))) and
   ((integer_of_short(sum_0) + integer_of_int32(result3)) <= 32767)) ->
  forall result4:short.
  (integer_of_short(result4) = (integer_of_short(sum_0) + integer_of_int32(result3))) ->
  forall sum_0_0:short.
  (sum_0_0 = result4) ->
  (0 <= ("K_7": (integer_of_short(x_12) - integer_of_short(sum_0))))

========== file tests/java/why/Lesson1_po53.why ==========
goal Lesson1_short_sqrt_safety_po_21:
  forall x_12:short.
  ("K_17":
  ((integer_of_short(x_12) >= 0) and (integer_of_short(x_12) <= 32760))) ->
  forall result:short.
  (integer_of_short(result) = 0) ->
  forall result0:short.
  (integer_of_short(result0) = 1) ->
  forall count_0:short.
  forall sum_0:short.
  ("K_6":
  ((integer_of_short(count_0) >= 0) and
   ((integer_of_short(x_12) >= (integer_of_short(count_0) * integer_of_short(count_0))) and
    ((integer_of_short(sum_0) = ((integer_of_short(count_0) + 1) * (integer_of_short(count_0) + 1))) and
     ((integer_of_short(count_0) <= 180) and
      (integer_of_short(sum_0) <= 32761)))))) ->
  (integer_of_short(sum_0) <= integer_of_short(x_12)) ->
  (((-32768) <= (integer_of_short(count_0) + 1)) and
   ((integer_of_short(count_0) + 1) <= 32767)) ->
  forall result1:short.
  (integer_of_short(result1) = (integer_of_short(count_0) + 1)) ->
  forall count_0_0:short.
  (count_0_0 = result1) ->
  ("K_9":
  ((((integer_of_short(count_0_0) * integer_of_short(count_0_0)) + (2 * integer_of_short(count_0_0))) + 1) = ((integer_of_short(count_0_0) + 1) * (integer_of_short(count_0_0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_short(count_0_0))) and
   ((2 * integer_of_short(count_0_0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_short(count_0_0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-32768) <= (integer_of_short(sum_0) + integer_of_int32(result3))) and
   ((integer_of_short(sum_0) + integer_of_int32(result3)) <= 32767)) ->
  forall result4:short.
  (integer_of_short(result4) = (integer_of_short(sum_0) + integer_of_int32(result3))) ->
  forall sum_0_0:short.
  (sum_0_0 = result4) ->
  (("K_7": (integer_of_short(x_12) - integer_of_short(sum_0_0))) < ("K_7":
                                                                   (integer_of_short(x_12) - integer_of_short(sum_0))))

========== file tests/java/why/Lesson1_po54.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_1:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  ("K_19": (integer_of_int32(result) >= 0))

========== file tests/java/why/Lesson1_po55.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_2:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  ("K_19":
  (integer_of_int32(x_13) >= (integer_of_int32(result) * integer_of_int32(result))))

========== file tests/java/why/Lesson1_po56.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_3:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  ("K_19":
  (integer_of_int32(result0) = ((integer_of_int32(result) + 1) * (integer_of_int32(result) + 1))))

========== file tests/java/why/Lesson1_po57.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_4:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  ("K_19": (integer_of_int32(result) <= 46339))

========== file tests/java/why/Lesson1_po58.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_5:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  ("K_19": (integer_of_int32(result0) <= 2147395600))

========== file tests/java/why/Lesson1_po59.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_6:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))))

========== file tests/java/why/Lesson1_po6.why ==========
goal sqr_int_intro:
  (forall x_10:int.
    (((0 <= x_10) and (x_10 <= 46340)) -> ((x_10 * x_10) <= 2147395600)))

========== file tests/java/why/Lesson1_po60.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_7:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(sum) + integer_of_int32(result3))) ->
  forall sum0:int32.
  (sum0 = result4) ->
  ("K_19": (integer_of_int32(count0) >= 0))

========== file tests/java/why/Lesson1_po61.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_8:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(sum) + integer_of_int32(result3))) ->
  forall sum0:int32.
  (sum0 = result4) ->
  ("K_19":
  (integer_of_int32(x_13) >= (integer_of_int32(count0) * integer_of_int32(count0))))

========== file tests/java/why/Lesson1_po62.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_9:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(sum) + integer_of_int32(result3))) ->
  forall sum0:int32.
  (sum0 = result4) ->
  ("K_19":
  (integer_of_int32(sum0) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1))))

========== file tests/java/why/Lesson1_po63.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_10:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(sum) + integer_of_int32(result3))) ->
  forall sum0:int32.
  (sum0 = result4) ->
  ("K_19": (integer_of_int32(count0) <= 46339))

========== file tests/java/why/Lesson1_po64.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_11:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(sum) + integer_of_int32(result3))) ->
  forall sum0:int32.
  (sum0 = result4) ->
  ("K_19": (integer_of_int32(sum0) <= 2147395600))

========== file tests/java/why/Lesson1_po65.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_12:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) > integer_of_int32(x_13)) ->
  forall jessie_returned_value:int32.
  (jessie_returned_value = count) ->
  ("K_18": (integer_of_int32(jessie_returned_value) >= 0))

========== file tests/java/why/Lesson1_po66.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_13:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) > integer_of_int32(x_13)) ->
  forall jessie_returned_value:int32.
  (jessie_returned_value = count) ->
  ("K_18":
  ((integer_of_int32(jessie_returned_value) * integer_of_int32(jessie_returned_value)) <= integer_of_int32(x_13)))

========== file tests/java/why/Lesson1_po67.why ==========
goal Lesson1_sqrt_ensures_result_is_sqrt_po_14:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) > integer_of_int32(x_13)) ->
  forall jessie_returned_value:int32.
  (jessie_returned_value = count) ->
  ("K_18":
  (integer_of_int32(x_13) < ((integer_of_int32(jessie_returned_value) + 1) * (integer_of_int32(jessie_returned_value) + 1))))

========== file tests/java/why/Lesson1_po68.why ==========
goal Lesson1_sqrt_safety_po_1:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  ("K_19": (integer_of_int32(result) >= 0))

========== file tests/java/why/Lesson1_po69.why ==========
goal Lesson1_sqrt_safety_po_2:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  ("K_19":
  (integer_of_int32(x_13) >= (integer_of_int32(result) * integer_of_int32(result))))

========== file tests/java/why/Lesson1_po7.why ==========
goal sqr_short_elim:
  (forall x_7:int. (((x_7 * x_7) <= 32760) -> (x_7 <= 180)))

========== file tests/java/why/Lesson1_po70.why ==========
goal Lesson1_sqrt_safety_po_3:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  ("K_19":
  (integer_of_int32(result0) = ((integer_of_int32(result) + 1) * (integer_of_int32(result) + 1))))

========== file tests/java/why/Lesson1_po71.why ==========
goal Lesson1_sqrt_safety_po_4:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  ("K_19": (integer_of_int32(result) <= 46339))

========== file tests/java/why/Lesson1_po72.why ==========
goal Lesson1_sqrt_safety_po_5:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  ("K_19": (integer_of_int32(result0) <= 2147395600))

========== file tests/java/why/Lesson1_po73.why ==========
goal Lesson1_sqrt_safety_po_6:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  ((-2147483648) <= (integer_of_int32(count) + 1))

========== file tests/java/why/Lesson1_po74.why ==========
goal Lesson1_sqrt_safety_po_7:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  ((integer_of_int32(count) + 1) <= 2147483647)

========== file tests/java/why/Lesson1_po75.why ==========
goal Lesson1_sqrt_safety_po_8:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))))

========== file tests/java/why/Lesson1_po76.why ==========
goal Lesson1_sqrt_safety_po_9:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  ((-2147483648) <= (2 * integer_of_int32(count0)))

========== file tests/java/why/Lesson1_po77.why ==========
goal Lesson1_sqrt_safety_po_10:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  ((2 * integer_of_int32(count0)) <= 2147483647)

========== file tests/java/why/Lesson1_po78.why ==========
goal Lesson1_sqrt_safety_po_11:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_int32(count0))) and
   ((2 * integer_of_int32(count0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  ((-2147483648) <= (integer_of_int32(result2) + 1))

========== file tests/java/why/Lesson1_po79.why ==========
goal Lesson1_sqrt_safety_po_12:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_int32(count0))) and
   ((2 * integer_of_int32(count0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  ((integer_of_int32(result2) + 1) <= 2147483647)

========== file tests/java/why/Lesson1_po8.why ==========
goal sqr_short_intro:
  (forall x_8:int. (((0 <= x_8) and (x_8 <= 181)) -> ((x_8 * x_8) <= 32761)))

========== file tests/java/why/Lesson1_po80.why ==========
goal Lesson1_sqrt_safety_po_13:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_int32(count0))) and
   ((2 * integer_of_int32(count0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  ((-2147483648) <= (integer_of_int32(sum) + integer_of_int32(result3)))

========== file tests/java/why/Lesson1_po81.why ==========
goal Lesson1_sqrt_safety_po_14:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_int32(count0))) and
   ((2 * integer_of_int32(count0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  ((integer_of_int32(sum) + integer_of_int32(result3)) <= 2147483647)

========== file tests/java/why/Lesson1_po82.why ==========
goal Lesson1_sqrt_safety_po_15:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_int32(count0))) and
   ((2 * integer_of_int32(count0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-2147483648) <= (integer_of_int32(sum) + integer_of_int32(result3))) and
   ((integer_of_int32(sum) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(sum) + integer_of_int32(result3))) ->
  forall sum0:int32.
  (sum0 = result4) ->
  ("K_19": (integer_of_int32(count0) >= 0))

========== file tests/java/why/Lesson1_po83.why ==========
goal Lesson1_sqrt_safety_po_16:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_int32(count0))) and
   ((2 * integer_of_int32(count0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-2147483648) <= (integer_of_int32(sum) + integer_of_int32(result3))) and
   ((integer_of_int32(sum) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(sum) + integer_of_int32(result3))) ->
  forall sum0:int32.
  (sum0 = result4) ->
  ("K_19":
  (integer_of_int32(x_13) >= (integer_of_int32(count0) * integer_of_int32(count0))))

========== file tests/java/why/Lesson1_po84.why ==========
goal Lesson1_sqrt_safety_po_17:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_int32(count0))) and
   ((2 * integer_of_int32(count0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-2147483648) <= (integer_of_int32(sum) + integer_of_int32(result3))) and
   ((integer_of_int32(sum) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(sum) + integer_of_int32(result3))) ->
  forall sum0:int32.
  (sum0 = result4) ->
  ("K_19":
  (integer_of_int32(sum0) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1))))

========== file tests/java/why/Lesson1_po85.why ==========
goal Lesson1_sqrt_safety_po_18:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_int32(count0))) and
   ((2 * integer_of_int32(count0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-2147483648) <= (integer_of_int32(sum) + integer_of_int32(result3))) and
   ((integer_of_int32(sum) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(sum) + integer_of_int32(result3))) ->
  forall sum0:int32.
  (sum0 = result4) ->
  ("K_19": (integer_of_int32(count0) <= 46339))

========== file tests/java/why/Lesson1_po86.why ==========
goal Lesson1_sqrt_safety_po_19:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_int32(count0))) and
   ((2 * integer_of_int32(count0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-2147483648) <= (integer_of_int32(sum) + integer_of_int32(result3))) and
   ((integer_of_int32(sum) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(sum) + integer_of_int32(result3))) ->
  forall sum0:int32.
  (sum0 = result4) ->
  ("K_19": (integer_of_int32(sum0) <= 2147395600))

========== file tests/java/why/Lesson1_po87.why ==========
goal Lesson1_sqrt_safety_po_20:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_int32(count0))) and
   ((2 * integer_of_int32(count0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-2147483648) <= (integer_of_int32(sum) + integer_of_int32(result3))) and
   ((integer_of_int32(sum) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(sum) + integer_of_int32(result3))) ->
  forall sum0:int32.
  (sum0 = result4) ->
  (0 <= ("K_20": (integer_of_int32(x_13) - integer_of_int32(sum))))

========== file tests/java/why/Lesson1_po88.why ==========
goal Lesson1_sqrt_safety_po_21:
  forall x_13:int32.
  ("K_30":
  ((integer_of_int32(x_13) >= 0) and (integer_of_int32(x_13) <= 2147395599))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 1) ->
  forall count:int32.
  forall sum:int32.
  ("K_19":
  ((integer_of_int32(count) >= 0) and
   ((integer_of_int32(x_13) >= (integer_of_int32(count) * integer_of_int32(count))) and
    ((integer_of_int32(sum) = ((integer_of_int32(count) + 1) * (integer_of_int32(count) + 1))) and
     ((integer_of_int32(count) <= 46339) and
      (integer_of_int32(sum) <= 2147395600)))))) ->
  (integer_of_int32(sum) <= integer_of_int32(x_13)) ->
  (((-2147483648) <= (integer_of_int32(count) + 1)) and
   ((integer_of_int32(count) + 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(count) + 1)) ->
  forall count0:int32.
  (count0 = result1) ->
  ("K_22":
  ((((integer_of_int32(count0) * integer_of_int32(count0)) + (2 * integer_of_int32(count0))) + 1) = ((integer_of_int32(count0) + 1) * (integer_of_int32(count0) + 1)))) ->
  (((-2147483648) <= (2 * integer_of_int32(count0))) and
   ((2 * integer_of_int32(count0)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (2 * integer_of_int32(count0))) ->
  (((-2147483648) <= (integer_of_int32(result2) + 1)) and
   ((integer_of_int32(result2) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) + 1)) ->
  (((-2147483648) <= (integer_of_int32(sum) + integer_of_int32(result3))) and
   ((integer_of_int32(sum) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(sum) + integer_of_int32(result3))) ->
  forall sum0:int32.
  (sum0 = result4) ->
  (("K_20": (integer_of_int32(x_13) - integer_of_int32(sum0))) < ("K_20":
                                                                 (integer_of_int32(x_13) - integer_of_int32(sum))))

========== file tests/java/why/Lesson1_po9.why ==========
goal two_left:
  (forall x_4:int. ((2 * x_4) = (x_4 + x_4)))

========== simplify execution ==========
make[1]: Entering directory `/home/cmarche/recherche/why/tests/java'
why -simplify [...] why/Lesson1.why
Running Simplify on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/Lesson1_why.sx       : ??..????................................!!.!..............!....!.........?..!.!.!....!.. (72/0/7/0/9)
total   :  88
valid   :  72 ( 82%)
invalid :   0 (  0%)
unknown :   7 (  8%)
timeout :   0 (  0%)
failure :   9 ( 10%)
make[1]: Leaving directory `/home/cmarche/recherche/why/tests/java'
========== ergo execution ==========
make[1]: Entering directory `/home/cmarche/recherche/why/tests/java'
why --why [...] why/Lesson1.why
Running Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/Lesson1_why.why           : ??..????...............#...............#..................#...............#............. (78/0/6/4/0)
total   :  88
valid   :  78 ( 89%)
invalid :   0 (  0%)
unknown :   6 (  7%)
timeout :   4 (  5%)
failure :   0 (  0%)
make[1]: Leaving directory `/home/cmarche/recherche/why/tests/java'
