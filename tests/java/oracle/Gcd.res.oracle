========== file tests/java/Gcd.java ==========
/**************************************************************************/
/*                                                                        */
/*  The Why platform for program certification                            */
/*  Copyright (C) 2002-2008                                               */
/*    Romain BARDOU                                                       */
/*    Jean-François COUCHOT                                               */
/*    Mehdi DOGGUY                                                        */
/*    Jean-Christophe FILLIÂTRE                                           */
/*    Thierry HUBERT                                                      */
/*    Claude MARCHÉ                                                       */
/*    Yannick MOY                                                         */
/*    Christine PAULIN                                                    */
/*    Yann RÉGIS-GIANAS                                                   */
/*    Nicolas ROUSSET                                                     */
/*    Xavier URBAIN                                                       */
/*                                                                        */
/*  This software is free software; you can redistribute it and/or        */
/*  modify it under the terms of the GNU General Public                   */
/*  License version 2, as published by the Free Software Foundation.      */
/*                                                                        */
/*  This software is distributed in the hope that it will be useful,      */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  */
/*                                                                        */
/*  See the GNU General Public License version 2 for more details         */
/*  (enclosed in the file GPL).                                           */
/*                                                                        */
/**************************************************************************/

//@+ CheckArithOverflow = no

/* complements for non-linear integer arithmetic */

/*@ lemma distr_right: 
  @   \forall integer x y z; x*(y+z) == (x*y)+(x*z); 
  @*/

/*@ lemma distr_left: 
  @   \forall integer x y z; (x+y)*z == (x*z)+(y*z);
  @*/

/*@ lemma distr_right_minus: 
  @   \forall integer x y z; x*(y-z) == (x*y)-(x*z); 
  @*/

/*@ lemma distr_left_minus: 
  @   \forall integer x y z; (x-y)*z == (x*z)-(y*z);
  @*/

/*@ lemma mul_comm: 
  @   \forall integer x y; x*y == y*x; 
  @*/

/*@ lemma mul_assoc: 
  @   \forall integer x y z; x*(y*z) == (x*y)*z; 
  @*/

/*@ predicate divides(integer x, integer y) =
  @   \exists integer q; y == q*x ;
  @*/

/*@ lemma div_mod_property:
  @  \forall integer x y; 
  @    x >=0 && y > 0 ==> x%y  == x - y*(x/y);  
  @*/

/*@ lemma mod_property:
  @  \forall integer x y; 
  @    x >=0 && y > 0 ==> 0 <= x%y && x%y < y; 
  @*/

/*@ predicate isGcd(integer a, integer b, integer d) =
  @   divides(d,a) && divides(d,b) && 
  @     \forall integer z;
  @     divides(z,a) && divides(z,b) ==> divides(z,d) ;
  @*/

/*@ lemma gcd_zero :
  @   \forall integer a; isGcd(a,0,a) ;
  @*/

/*@ lemma gcd_property :
  @   \forall integer a b d q;
  @      b > 0 && isGcd(b,a % b,d) ==> isGcd(a,b,d) ;
  @*/

class Gcd {

    /*@ requires x >= 0 && y >= 0;
      @ behavior resultIsGcd: 
      @   ensures isGcd(x,y,\result) ;
      @ behavior bezoutProperty:
      @   ensures \exists integer a b; a*x+b*y == \result;
      @*/
    static int gcd(int x, int y) {
        //@ ghost integer a = 1, b = 0, c = 0, d = 1;
        /*@ loop_invariant 
          @    x >= 0 && y >= 0 &&  
	  @    (\forall integer d ;  isGcd(x,y,d) ==> 
	  @        \at(isGcd(x,y,d),Pre)) && 
          @    a*\at(x,Pre)+b*\at(y,Pre) == x && 
          @    c*\at(x,Pre)+d*\at(y,Pre) == y ;
          @ loop_variant y;
          @*/
        while (y > 0) {
            int r = x % y;
            //@ ghost integer q = x / y;
            x = y;
            y = r;
            //@ ghost integer ta = a, tb = b;
            //@ ghost a = c; 
	    //@ ghost b = d;
            //@ ghost c = ta - c * q;
            //@ ghost d = tb - d * q;
        }
        return x;
    }

}




/*
Local Variables: 
compile-command: "make Gcd"
End: 
*/

========== krakatoa execution ==========
Parsing OK.
Typing OK.
Generating JC function Gcd_gcd for method Gcd.gcd
Generating JC function cons_Gcd for constructor Gcd
Done.
========== file tests/java/Gcd.jc ==========
# InvariantPolicy = Arguments
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = None

logic divides(integer x_5, integer y_5) =
(\exists integer q;
  (y_5 == (q * x_5)))

logic isGcd(integer a, integer b, integer d) =
((divides(d, a) && divides(d, b)) &&
  (\forall integer z_4;
    ((divides(z_4, a) && divides(z_4, b)) ==> divides(z_4, d))))

lemma gcd_zero :
(\forall integer a_0;
  isGcd(a_0, 0, a_0))

lemma distr_left_minus :
(\forall integer x_2;
  (\forall integer y_2;
    (\forall integer z_2;
      (((x_2 - y_2) * z_2) == ((x_2 * z_2) - (y_2 * z_2))))))

lemma mul_comm :
(\forall integer x_3;
  (\forall integer y_3;
    ((x_3 * y_3) == (y_3 * x_3))))

lemma gcd_property :
(\forall integer a_1;
  (\forall integer b_0;
    (\forall integer d_0;
      (\forall integer q_0;
        (((b_0 > 0) && isGcd(b_0, (a_1 % b_0), d_0)) ==>
          isGcd(a_1, b_0, d_0))))))

lemma distr_left :
(\forall integer x_0;
  (\forall integer y_0;
    (\forall integer z_0;
      (((x_0 + y_0) * z_0) == ((x_0 * z_0) + (y_0 * z_0))))))

lemma distr_right_minus :
(\forall integer x_1;
  (\forall integer y_1;
    (\forall integer z_1;
      ((x_1 * (y_1 - z_1)) == ((x_1 * y_1) - (x_1 * z_1))))))

lemma distr_right :
(\forall integer x;
  (\forall integer y;
    (\forall integer z;
      ((x * (y + z)) == ((x * y) + (x * z))))))

lemma div_mod_property :
(\forall integer x_6;
  (\forall integer y_6;
    (((x_6 >= 0) && (y_6 > 0)) ==>
      ((x_6 % y_6) == (x_6 - (y_6 * (x_6 / y_6)))))))

lemma mul_assoc :
(\forall integer x_4;
  (\forall integer y_4;
    (\forall integer z_3;
      ((x_4 * (y_4 * z_3)) == ((x_4 * y_4) * z_3)))))

lemma mod_property :
(\forall integer x_7;
  (\forall integer y_7;
    (((x_7 >= 0) && (y_7 > 0)) ==>
      ((0 <= (x_7 % y_7)) && ((x_7 % y_7) < y_7)))))

logic Non_null_Object{Here}(Object[0..] x) =
(\offset_max(x) == 0)

tag Object = {
}

tag String = Object with {
}

tag Throwable = Object with {
}

tag Gcd = Object with {
}

type Object = [Object]

type interface = [interface]

tag interface = {
}

boolean non_null_Object(Object[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) == 0) else (x == null));
;

exception Throwable of Throwable[0..]

integer Gcd_gcd(integer x_8, integer y_8)
  requires (K_18 : ((x_8 >= 0) && (y_8 >= 0)));
behavior resultIsGcd:
  ensures (K_1 : isGcd(x_8, y_8, \result));
behavior bezoutProperty:
  ensures (K_2 : (\exists integer a_2;
                   (\exists integer b_1;
                     (((a_2 * x_8) + (b_1 * y_8)) == \result))));
{  
   {  
      (var integer a_3 = (K_17 : 1));
      
      {  
         (var integer b_2 = (K_16 : 0));
         
         {  
            (var integer c = (K_15 : 0));
            
            {  
               (var integer d_1 = (K_14 : 1));
               
               {  
                  
                  invariant (K_3 : (((((x_8 >= 0) && (y_8 >= 0)) &&
                                       (\forall integer d_2;
                                         (isGcd(x_8, y_8, d_2) ==>
                                           \at(isGcd(x_8, y_8, d_2),Pre)))) &&
                                      (((a_3 * \at(x_8,Pre)) +
                                         (b_2 * \at(y_8,Pre))) ==
                                        x_8)) &&
                                     (((c * \at(x_8,Pre)) +
                                        (d_1 * \at(y_8,Pre))) ==
                                       y_8)));
                  variant (K_4 : y_8);
                  while ((K_13 : (y_8 > 0)))
                  {  
                     {  
                        (var integer r = (K_12 : (x_8 % y_8)));
                        
                        {  
                           (var integer q_1 = (K_11 : (x_8 / y_8)));
                           
                           {  (x_8 = y_8);
                              (y_8 = r);
                              
                              {  
                                 (var integer ta = (K_10 : a_3));
                                 
                                 {  
                                    (var integer tb = (K_9 : b_2));
                                    
                                    {  (a_3 = c);
                                       (b_2 = d_1);
                                       (c = (K_6 : (ta - (K_5 : (c * q_1)))));
                                       (d_1 = (K_8 : (tb -
                                                       (K_7 : (d_1 * q_1)))))
                                    }
                                 }
                              }
                           }
                        }
                     }
                  };
                  
                  (return x_8)
               }
            }
         }
      }
   }
}

unit cons_Gcd(Gcd[0] this_0)
;

/*
Local Variables:
mode: java
compile-command: "jessie -why-opt -split-user-conj -locs tests/java/Gcd.jloc tests/java/Gcd.jc && make -f tests/java/Gcd.makefile gui"
End:
*/
========== file tests/java/Gcd.jloc ==========
[K_10]
file = "HOME/tests/java/Gcd.java"
line = 110
begin = 35
end = 36

[K_11]
file = "HOME/tests/java/Gcd.java"
line = 107
begin = 34
end = 39

[K_12]
file = "HOME/tests/java/Gcd.java"
line = 106
begin = 20
end = 25

[K_13]
file = "HOME/tests/java/Gcd.java"
line = 105
begin = 15
end = 20

[K_14]
file = "HOME/tests/java/Gcd.java"
line = 96
begin = 51
end = 52

[K_15]
file = "HOME/tests/java/Gcd.java"
line = 96
begin = 44
end = 45

[K_16]
file = "HOME/tests/java/Gcd.java"
line = 96
begin = 37
end = 38

[K_17]
file = "HOME/tests/java/Gcd.java"
line = 96
begin = 30
end = 31

[K_18]
file = "HOME/tests/java/Gcd.java"
line = 89
begin = 17
end = 33

[K_1]
file = "HOME/tests/java/Gcd.java"
line = 91
begin = 18
end = 36

[K_2]
file = "HOME/tests/java/Gcd.java"
line = 93
begin = 18
end = 57

[K_3]
file = "HOME/tests/java/Gcd.java"
line = 98
begin = 15
end = 219

[K_4]
file = "HOME/tests/java/Gcd.java"
line = 103
begin = 25
end = 26

[K_5]
file = "HOME/tests/java/Gcd.java"
line = 113
begin = 31
end = 36

[K_6]
file = "HOME/tests/java/Gcd.java"
line = 113
begin = 26
end = 36

[Gcd_gcd]
name = "Method gcd"
file = "HOME/tests/java/Gcd.java"
line = 95
begin = 15
end = 18

[K_7]
file = "HOME/tests/java/Gcd.java"
line = 114
begin = 31
end = 36

[K_8]
file = "HOME/tests/java/Gcd.java"
line = 114
begin = 26
end = 36

[K_9]
file = "HOME/tests/java/Gcd.java"
line = 110
begin = 43
end = 44

[cons_Gcd]
name = "Constructor of class Gcd"
file = "HOME/"
line = 0
begin = -1
end = -1

========== jessie execution ==========
Generating Why function Gcd_gcd
========== file tests/java/Gcd.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) --no-arrays  -split-user-conj -explain -locs Gcd.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) --no-arrays  -split-user-conj -explain -locs Gcd.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why

COQDEP = coqdep

.PHONY: all coq pvs simplify cvcl harvey smtlib zenon

all: simplify/Gcd_why.sx

project: why/Gcd.wpr

why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) --project -dir why $(JESSIELIBFILES) why/$*.why

goals: why/Gcd_ctx.why

why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) --multi-why -dir why $(JESSIELIBFILES) why/$*.why

coq: coq/Gcd_why.vo

coq/Gcd_why.v: why/Gcd.why
	@echo 'why -coq-v8 [...] why/Gcd.why' &&$(WHY) -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" $(JESSIELIBFILES) why/Gcd.why

coq-goals: goals coq/Gcd_ctx_why.vo
	for f in why/Gcd_po*.why; do make -f Gcd.makefile coq/`basename $$f .why`_why.v ; done

coq/Gcd_ctx_why.v: why/Gcd_ctx.why
	@echo 'why -coq-v8 [...] why/Gcd_ctx.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" why/Gcd_ctx.why

coq/%_why.v: why/%.why
	@echo 'why -coq-v8 [...] why/$*.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export Gcd_ctx_why." -coq-tactic "intuition" why/Gcd_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<

pvs: pvs/Gcd_why.pvs

pvs/%_why.pvs: why/%.why
	$(WHY) -pvs -dir pvs -pvs-preamble "IMPORTING why@jessie" $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:
	$(WHY) -pvs -dir pvs -pvs-preamble "IMPORTING why@why" $(JESSIELIBFILES)

isabelle: isabelle/Gcd_why.thy

isabelle/%_why.thy: why/%.why
	$(WHY) -isabelle -dir isabelle -isabelle-base-theory jessie_why $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/Gcd_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) -simplify -dir simplify $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/Gcd_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) -alt-ergo -dir why $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/Gcd_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) -cvcl -dir cvcl $(JESSIELIBFILES) why/$*.why

harvey: harvey/Gcd_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) -harvey -dir harvey $(JESSIELIBFILES) why/$*.why

zenon: zenon/Gcd_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) -zenon -dir zenon $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/Gcd_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) -smtlib --encoding sstrat --exp goal -dir smtlib $(JESSIELIBFILES) why/$*.why

z3: smtlib/Gcd_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/Gcd_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/Gcd_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

gui stat: Gcd.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

-include Gcd.depend

depend: coq/Gcd_why.v
	-$(COQDEP) -I coq coq/Gcd*_why.v > Gcd.depend

clean:
	rm -f coq/*.vo

========== file tests/java/Gcd.loc ==========
[Gcd_gcd_ensures_resultIsGcd]
name = "Method gcd"
behavior = "Normal behavior `resultIsGcd'"
file = "HOME/tests/java/Gcd.java"
line = 95
begin = 15
end = 18

[JC_40]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 107
begin = 34
end = 39

[JC_41]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 107
begin = 34
end = 39

[JC_42]
file = "HOME/tests/java/Gcd.java"
line = 98
begin = 15
end = 219

[distr_left]
name = "distr_left"
behavior = "lemma"
file = "HOME/tests/java/Gcd.jc"
line = 38
begin = 0
end = 152

[JC_43]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_44]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 106
begin = 20
end = 25

[JC_45]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 106
begin = 20
end = 25

[JC_46]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 107
begin = 34
end = 39

[JC_1]
file = "HOME/tests/java/Gcd.jc"
line = 96
begin = 8
end = 23

[JC_47]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 107
begin = 34
end = 39

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_48]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_3]
file = "HOME/tests/java/Gcd.jc"
line = 96
begin = 8
end = 23

[JC_49]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_5]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_6]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_7]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_9]
file = "HOME/tests/java/Gcd.jc"
line = 98
begin = 11
end = 65

[JC_50]
file = "HOME/"
line = 0
begin = -1
end = -1

[Gcd_gcd_ensures_default]
name = "Method gcd"
behavior = "Default behavior"
file = "HOME/tests/java/Gcd.java"
line = 95
begin = 15
end = 18

[JC_51]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_52]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_53]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_54]
file = "HOME/"
line = 0
begin = -1
end = -1

[mul_assoc]
name = "mul_assoc"
behavior = "lemma"
file = "HOME/tests/java/Gcd.jc"
line = 62
begin = 0
end = 143

[distr_right]
name = "distr_right"
behavior = "lemma"
file = "HOME/tests/java/Gcd.jc"
line = 50
begin = 0
end = 133

[JC_55]
file = "HOME/"
line = 0
begin = -1
end = -1

[Gcd_gcd_safety]
name = "Method gcd"
behavior = "Safety"
file = "HOME/tests/java/Gcd.java"
line = 95
begin = 15
end = 18

[gcd_zero]
name = "gcd_zero"
behavior = "lemma"
file = "HOME/tests/java/Gcd.jc"
line = 15
begin = 0
end = 60

[JC_10]
file = "HOME/tests/java/Gcd.jc"
line = 98
begin = 11
end = 65

[JC_11]
file = "HOME/tests/java/Gcd.java"
line = 89
begin = 17
end = 33

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_13]
file = "HOME/tests/java/Gcd.java"
line = 89
begin = 17
end = 33

[JC_14]
file = "HOME/"
line = 0
begin = -1
end = -1

[mul_comm]
name = "mul_comm"
behavior = "lemma"
file = "HOME/tests/java/Gcd.jc"
line = 25
begin = 0
end = 97

[Gcd_gcd_ensures_bezoutProperty]
name = "Method gcd"
behavior = "Normal behavior `bezoutProperty'"
file = "HOME/tests/java/Gcd.java"
line = 95
begin = 15
end = 18

[JC_15]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_16]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_17]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_18]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_19]
file = "HOME/tests/java/Gcd.java"
line = 91
begin = 18
end = 36

[distr_right_minus]
name = "distr_right_minus"
behavior = "lemma"
file = "HOME/tests/java/Gcd.jc"
line = 44
begin = 0
end = 159

[JC_20]
file = "HOME/tests/java/Gcd.java"
line = 91
begin = 18
end = 36

[JC_21]
file = "HOME/tests/java/Gcd.java"
line = 93
begin = 18
end = 57

[JC_22]
file = "HOME/tests/java/Gcd.java"
line = 93
begin = 18
end = 57

[JC_23]
file = "HOME/tests/java/Gcd.java"
line = 98
begin = 15
end = 219

[JC_24]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_25]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 106
begin = 20
end = 25

[mod_property]
name = "mod_property"
behavior = "lemma"
file = "HOME/tests/java/Gcd.jc"
line = 68
begin = 0
end = 154

[JC_26]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 106
begin = 20
end = 25

[JC_27]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 107
begin = 34
end = 39

[JC_28]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 107
begin = 34
end = 39

[JC_29]
file = "HOME/tests/java/Gcd.java"
line = 98
begin = 15
end = 219

[div_mod_property]
name = "div_mod_property"
behavior = "lemma"
file = "HOME/tests/java/Gcd.jc"
line = 56
begin = 0
end = 159

[distr_left_minus]
name = "distr_left_minus"
behavior = "lemma"
file = "HOME/tests/java/Gcd.jc"
line = 19
begin = 0
end = 158

[JC_30]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_31]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 106
begin = 20
end = 25

[gcd_property]
name = "gcd_property"
behavior = "lemma"
file = "HOME/tests/java/Gcd.jc"
line = 30
begin = 0
end = 213

[JC_32]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 106
begin = 20
end = 25

[JC_33]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 107
begin = 34
end = 39

[JC_34]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 107
begin = 34
end = 39

[JC_35]
file = "HOME/tests/java/Gcd.java"
line = 103
begin = 25
end = 26

[JC_36]
file = "HOME/tests/java/Gcd.java"
line = 98
begin = 15
end = 219

[JC_37]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_38]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 106
begin = 20
end = 25

[JC_39]
kind = DivByZero
file = "HOME/tests/java/Gcd.java"
line = 106
begin = 20
end = 25

========== file tests/java/why/Gcd.why ==========
type Object

type interface

logic Gcd_tag:  -> Object tag_id

logic Object_tag:  -> Object tag_id

axiom Gcd_parenttag_Object : parenttag(Gcd_tag, Object_tag)

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

predicate Non_null_Object(x:Object pointer,
 Object_alloc_table:Object alloc_table) =
 eq_int(offset_max(Object_alloc_table, x), (0))

axiom Object_int : (int_of_tag(Object_tag) = (1))

logic Object_of_bitvector: bitvector -> Object pointer

logic bitvector_of_Object: Object pointer -> bitvector

axiom Object_of_bitvector_of_bitvector_of_Object :
 (forall x:Object pointer. (Object_of_bitvector(bitvector_of_Object(x)) = x))

logic Object_of_pointer_address: unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr :
 (forall p:Object pointer.
  (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom : parenttag(Object_tag, bottom_tag)

axiom Object_tags :
 (forall x:Object pointer.
  (forall Object_tag_table:Object tag_table.
   instanceof(Object_tag_table, x, Object_tag)))

exception Return_label_exc of unit

logic String_tag:  -> Object tag_id

axiom String_parenttag_Object : parenttag(String_tag, Object_tag)

exception Throwable_exc of Object pointer

logic Throwable_tag:  -> Object tag_id

axiom Throwable_parenttag_Object : parenttag(Throwable_tag, Object_tag)

axiom bitvector_of_Object_of_Object_of_bitvector :
 (forall x:bitvector. (bitvector_of_Object(Object_of_bitvector(x)) = x))

logic bitvector_of_interface: interface pointer -> bitvector

logic interface_of_bitvector: bitvector -> interface pointer

axiom bitvector_of_interface_of_interface_of_bitvector :
 (forall x:bitvector.
  (bitvector_of_interface(interface_of_bitvector(x)) = x))

goal distr_left :
 (forall x_0_0:int.
  (forall y_0:int.
   (forall z_0:int.
    eq_int(mul_int(add_int(x_0_0, y_0), z_0),
    add_int(mul_int(x_0_0, z_0), mul_int(y_0, z_0))))))

axiom distr_left_as_axiom :
 (forall x_0_0:int.
  (forall y_0:int.
   (forall z_0:int.
    eq_int(mul_int(add_int(x_0_0, y_0), z_0),
    add_int(mul_int(x_0_0, z_0), mul_int(y_0, z_0))))))

goal distr_left_minus :
 (forall x_2:int.
  (forall y_2:int.
   (forall z_2:int.
    eq_int(mul_int(sub_int(x_2, y_2), z_2),
    sub_int(mul_int(x_2, z_2), mul_int(y_2, z_2))))))

axiom distr_left_minus_as_axiom :
 (forall x_2:int.
  (forall y_2:int.
   (forall z_2:int.
    eq_int(mul_int(sub_int(x_2, y_2), z_2),
    sub_int(mul_int(x_2, z_2), mul_int(y_2, z_2))))))

goal distr_right :
 (forall x_4:int.
  (forall y:int.
   (forall z:int.
    eq_int(mul_int(x_4, add_int(y, z)),
    add_int(mul_int(x_4, y), mul_int(x_4, z))))))

axiom distr_right_as_axiom :
 (forall x_4:int.
  (forall y:int.
   (forall z:int.
    eq_int(mul_int(x_4, add_int(y, z)),
    add_int(mul_int(x_4, y), mul_int(x_4, z))))))

goal distr_right_minus :
 (forall x_1:int.
  (forall y_1:int.
   (forall z_1:int.
    eq_int(mul_int(x_1, sub_int(y_1, z_1)),
    sub_int(mul_int(x_1, y_1), mul_int(x_1, z_1))))))

axiom distr_right_minus_as_axiom :
 (forall x_1:int.
  (forall y_1:int.
   (forall z_1:int.
    eq_int(mul_int(x_1, sub_int(y_1, z_1)),
    sub_int(mul_int(x_1, y_1), mul_int(x_1, z_1))))))

goal div_mod_property :
 (forall x_6:int.
  (forall y_6:int.
   ((ge_int(x_6, (0)) and gt_int(y_6, (0))) ->
    eq_int(mod_int(x_6, y_6), sub_int(x_6, mul_int(y_6, div_int(x_6, y_6)))))))

axiom div_mod_property_as_axiom :
 (forall x_6:int.
  (forall y_6:int.
   ((ge_int(x_6, (0)) and gt_int(y_6, (0))) ->
    eq_int(mod_int(x_6, y_6), sub_int(x_6, mul_int(y_6, div_int(x_6, y_6)))))))

predicate divides(x_5:int,
 y_5:int) =
 (exists q:int. eq_int(y_5, mul_int(q, x_5)))

predicate isGcd(a:int,
 b:int,
 d:int) =
 (divides(d, a)
 and (divides(d, b)
     and (forall z_4:int.
          ((divides(z_4, a) and divides(z_4, b)) -> divides(z_4, d)))))

goal gcd_property :
 (forall a_1:int.
  (forall b_0:int.
   (forall d_0:int.
    (forall q_0:int.
     ((gt_int(b_0, (0)) and isGcd(b_0, mod_int(a_1, b_0), d_0)) ->
      isGcd(a_1, b_0, d_0))))))

axiom gcd_property_as_axiom :
 (forall a_1:int.
  (forall b_0:int.
   (forall d_0:int.
    (forall q_0:int.
     ((gt_int(b_0, (0)) and isGcd(b_0, mod_int(a_1, b_0), d_0)) ->
      isGcd(a_1, b_0, d_0))))))

goal gcd_zero : (forall a_0:int. isGcd(a_0, (0), a_0))

axiom gcd_zero_as_axiom : (forall a_0:int. isGcd(a_0, (0), a_0))

logic interface_tag:  -> interface tag_id

axiom interface_int : (int_of_tag(interface_tag) = (1))

axiom interface_of_bitvector_of_bitvector_of_interface :
 (forall x:interface pointer.
  (interface_of_bitvector(bitvector_of_interface(x)) = x))

logic interface_of_pointer_address: unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr :
 (forall p:interface pointer.
  (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom : parenttag(interface_tag, bottom_tag)

axiom interface_tags :
 (forall x:interface pointer.
  (forall interface_tag_table:interface tag_table.
   instanceof(interface_tag_table, x, interface_tag)))

predicate left_valid_struct_Object(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 (offset_min(Object_alloc_table, p) <= a)

predicate left_valid_struct_Gcd(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_String(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_Throwable(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_interface(p:interface pointer,
 a:int,
 interface_alloc_table:interface alloc_table) =
 (offset_min(interface_alloc_table, p) <= a)

goal mod_property :
 (forall x_7:int.
  (forall y_7:int.
   ((ge_int(x_7, (0)) and gt_int(y_7, (0))) ->
    (le_int((0), mod_int(x_7, y_7)) and lt_int(mod_int(x_7, y_7), y_7)))))

axiom mod_property_as_axiom :
 (forall x_7:int.
  (forall y_7:int.
   ((ge_int(x_7, (0)) and gt_int(y_7, (0))) ->
    (le_int((0), mod_int(x_7, y_7)) and lt_int(mod_int(x_7, y_7), y_7)))))

goal mul_assoc :
 (forall x_4_0:int.
  (forall y_4:int.
   (forall z_3:int.
    eq_int(mul_int(x_4_0, mul_int(y_4, z_3)),
    mul_int(mul_int(x_4_0, y_4), z_3)))))

axiom mul_assoc_as_axiom :
 (forall x_4_0:int.
  (forall y_4:int.
   (forall z_3:int.
    eq_int(mul_int(x_4_0, mul_int(y_4, z_3)),
    mul_int(mul_int(x_4_0, y_4), z_3)))))

goal mul_comm :
 (forall x_3:int.
  (forall y_3:int. eq_int(mul_int(x_3, y_3), mul_int(y_3, x_3))))

axiom mul_comm_as_axiom :
 (forall x_3:int.
  (forall y_3:int. eq_int(mul_int(x_3, y_3), mul_int(y_3, x_3))))

axiom pointer_addr_of_Object_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 (offset_max(Object_alloc_table, p) >= b)

predicate right_valid_struct_Gcd(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_String(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_Throwable(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_interface(p:interface pointer,
 b:int,
 interface_alloc_table:interface alloc_table) =
 (offset_max(interface_alloc_table, p) >= b)

predicate strict_valid_root_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Gcd(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_String(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Gcd(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) <= a)
 and (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) <= a)
 and (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) <= a)
 and (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Gcd(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_String(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_Throwable(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) <= a)
 and (offset_max(interface_alloc_table, p) >= b))

parameter Gcd_gcd :
 x_8:int ->
  y_8:int ->
   { } int
   { ((JC_22:
      (exists a_2:int.
       (exists b_1:int.
        eq_int(add_int(mul_int(a_2, x_8), mul_int(b_1, y_8)), result))))
     and (JC_20: isGcd(x_8, y_8, result))) }

parameter Gcd_gcd_requires :
 x_8:int ->
  y_8:int ->
   { (JC_11: (ge_int(x_8, (0)) and ge_int(y_8, (0))))} int
   { ((JC_22:
      (exists a_2:int.
       (exists b_1:int.
        eq_int(add_int(mul_int(a_2, x_8), mul_int(b_1, y_8)), result))))
     and (JC_20: isGcd(x_8, y_8, result))) }

parameter Object_alloc_table : Object alloc_table ref

parameter Object_tag_table : Object tag_table ref

parameter alloc_bitvector_struct_Gcd :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Gcd(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Gcd_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Gcd(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Object :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Object(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Object_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Object(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_String :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_String(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_String_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_String(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Throwable :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Throwable(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Throwable_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Throwable(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_interface :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_interface(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_interface_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_interface(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_struct_Gcd :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Gcd(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Gcd_tag)))) }

parameter alloc_struct_Gcd_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Gcd(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Gcd_tag)))) }

parameter alloc_struct_Object :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Object(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_Object_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Object(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_String :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_String(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_String_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_String(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_Throwable :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter alloc_struct_Throwable_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter interface_alloc_table : interface alloc_table ref

parameter interface_tag_table : interface tag_table ref

parameter alloc_struct_interface :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { } interface pointer writes interface_alloc_table,interface_tag_table
    { (strict_valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter alloc_struct_interface_requires :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { ge_int(n, (0))} interface pointer
    writes interface_alloc_table,interface_tag_table
    { (strict_valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter cons_Gcd :
 this_0:Object pointer -> { } unit reads Object_alloc_table { true }

parameter cons_Gcd_requires :
 this_0:Object pointer -> { } unit reads Object_alloc_table { true }

parameter non_null_Object :
 x_0:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_10:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_0), (0))
     else (x_0 = null))) }

parameter non_null_Object_requires :
 x_0:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_10:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_0), (0))
     else (x_0 = null))) }

let Gcd_gcd_ensures_bezoutProperty =
 fun (x_8 : int) (y_8 : int) ->
  { (JC_13: (ge_int(x_8, (0)) and ge_int(y_8, (0)))) }
  (let mutable_x_8 = ref x_8 in
  (let mutable_y_8 = ref y_8 in
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let a_3 = ref (K_17: (1)) in
     (let b_2 = ref (K_16: (0)) in
     (let c = ref (K_15: (0)) in
     (let d_1 = ref (K_14: (1)) in
     begin
       try
        while true do
        { invariant (JC_43: true)  }
         begin
           [ { } unit reads a_3,b_2,c,d_1,mutable_x_8,mutable_y_8
             { (JC_42:
               (ge_int(mutable_x_8, (0))
               and (ge_int(mutable_y_8, (0))
                   and ((forall d_2:int.
                         (isGcd(mutable_x_8, mutable_y_8, d_2) ->
                          isGcd(mutable_x_8@init, mutable_y_8@init, d_2@init)))
                       and (eq_int(add_int(mul_int(a_3, mutable_x_8@init),
                                   mul_int(b_2, mutable_y_8@init)),
                            mutable_x_8)
                           and eq_int(add_int(mul_int(c, mutable_x_8@init),
                                      mul_int(d_1, mutable_y_8@init)),
                               mutable_y_8)))))) } ];
          try
           (let jessie_34 = begin
                              (if (K_13: ((gt_int_ !mutable_y_8) (0)))
                              then
                               (let jessie_32 = (let r = (K_12:
                                                         (JC_45:
                                                         ((mod_int !mutable_x_8) !mutable_y_8))) in
                                                (let q_1 = (K_11:
                                                           (JC_47:
                                                           ((div_int !mutable_x_8) !mutable_y_8))) in
                                                begin
                                                  (let jessie_27 = (mutable_x_8 := !mutable_y_8) in
                                                  void);
                                                 (let jessie_28 = (mutable_y_8 := r) in
                                                 void);
                                                 (let ta = (K_10: !a_3) in
                                                 (let tb = (K_9: !b_2) in
                                                 begin
                                                   (let jessie_29 = (a_3 := !c) in
                                                   void);
                                                  (let jessie_30 = (b_2 := !d_1) in
                                                  void);
                                                  (let jessie_31 = (c := 
                                                                    (K_6:
                                                                    ((sub_int ta) 
                                                                    (K_5:
                                                                    ((mul_int !c) q_1))))) in
                                                  void);
                                                  (d_1 := (K_8:
                                                          ((sub_int tb) 
                                                           (K_7:
                                                           ((mul_int !d_1) q_1)))));
                                                  !d_1
                                                 end))
                                                end)) in
                               void)
                              else
                               (let jessie_33 = (raise (Loop_exit_exc void)) in
                               void));
                             (raise (Loop_continue_exc void))
                            end in
           void)
           with
           Loop_continue_exc jessie_2 ->
           void end
         end
        done
        with
        Loop_exit_exc jessie_1 ->
        void end;
      (return := !mutable_x_8);
      (raise Return)
     end))));
    absurd 
   end
   with
   Return ->
   !return end))))
  { (JC_21:
    (exists a_2:int.
     (exists b_1:int.
      eq_int(add_int(mul_int(a_2, x_8), mul_int(b_1, y_8)), result)))) }

let Gcd_gcd_ensures_default =
 fun (x_8 : int) (y_8 : int) ->
  { (JC_13: (ge_int(x_8, (0)) and ge_int(y_8, (0)))) }
  (let mutable_x_8 = ref x_8 in
  (let mutable_y_8 = ref y_8 in
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let a_3 = ref (K_17: (1)) in
     (let b_2 = ref (K_16: (0)) in
     (let c = ref (K_15: (0)) in
     (let d_1 = ref (K_14: (1)) in
     begin
       try
        while true do
        { invariant
            (JC_29:
            (ge_int(mutable_x_8, (0))
            and (ge_int(mutable_y_8, (0))
                and ((forall d_2:int.
                      (isGcd(mutable_x_8, mutable_y_8, d_2) ->
                       isGcd(mutable_x_8@init, mutable_y_8@init, d_2@init)))
                    and (eq_int(add_int(mul_int(a_3, mutable_x_8@init),
                                mul_int(b_2, mutable_y_8@init)),
                         mutable_x_8)
                        and eq_int(add_int(mul_int(c, mutable_x_8@init),
                                   mul_int(d_1, mutable_y_8@init)),
                            mutable_y_8))))))
          variant (JC_35 : mutable_y_8) }
         begin
           [ { } unit { true } ];
          try
           (let jessie_18 = begin
                              (if (K_13: ((gt_int_ !mutable_y_8) (0)))
                              then
                               (let jessie_16 = (let r = (K_12:
                                                         (JC_32:
                                                         ((mod_int !mutable_x_8) !mutable_y_8))) in
                                                (let q_1 = (K_11:
                                                           (JC_34:
                                                           ((div_int !mutable_x_8) !mutable_y_8))) in
                                                begin
                                                  (let jessie_11 = (mutable_x_8 := !mutable_y_8) in
                                                  void);
                                                 (let jessie_12 = (mutable_y_8 := r) in
                                                 void);
                                                 (let ta = (K_10: !a_3) in
                                                 (let tb = (K_9: !b_2) in
                                                 begin
                                                   (let jessie_13 = (a_3 := !c) in
                                                   void);
                                                  (let jessie_14 = (b_2 := !d_1) in
                                                  void);
                                                  (let jessie_15 = (c := 
                                                                    (K_6:
                                                                    ((sub_int ta) 
                                                                    (K_5:
                                                                    ((mul_int !c) q_1))))) in
                                                  void);
                                                  (d_1 := (K_8:
                                                          ((sub_int tb) 
                                                           (K_7:
                                                           ((mul_int !d_1) q_1)))));
                                                  !d_1
                                                 end))
                                                end)) in
                               void)
                              else
                               (let jessie_17 = (raise (Loop_exit_exc void)) in
                               void));
                             (raise (Loop_continue_exc void))
                            end in
           void)
           with
           Loop_continue_exc jessie_2 ->
           void end
         end
        done
        with
        Loop_exit_exc jessie_1 ->
        void end;
      (return := !mutable_x_8);
      (raise Return)
     end))));
    absurd 
   end
   with
   Return ->
   !return end))))
  { (JC_15: true) }

let Gcd_gcd_ensures_resultIsGcd =
 fun (x_8 : int) (y_8 : int) ->
  { (JC_13: (ge_int(x_8, (0)) and ge_int(y_8, (0)))) }
  (let mutable_x_8 = ref x_8 in
  (let mutable_y_8 = ref y_8 in
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let a_3 = ref (K_17: (1)) in
     (let b_2 = ref (K_16: (0)) in
     (let c = ref (K_15: (0)) in
     (let d_1 = ref (K_14: (1)) in
     begin
       try
        while true do
        { invariant (JC_37: true)  }
         begin
           [ { } unit reads a_3,b_2,c,d_1,mutable_x_8,mutable_y_8
             { (JC_36:
               (ge_int(mutable_x_8, (0))
               and (ge_int(mutable_y_8, (0))
                   and ((forall d_2:int.
                         (isGcd(mutable_x_8, mutable_y_8, d_2) ->
                          isGcd(mutable_x_8@init, mutable_y_8@init, d_2@init)))
                       and (eq_int(add_int(mul_int(a_3, mutable_x_8@init),
                                   mul_int(b_2, mutable_y_8@init)),
                            mutable_x_8)
                           and eq_int(add_int(mul_int(c, mutable_x_8@init),
                                      mul_int(d_1, mutable_y_8@init)),
                               mutable_y_8)))))) } ];
          try
           (let jessie_26 = begin
                              (if (K_13: ((gt_int_ !mutable_y_8) (0)))
                              then
                               (let jessie_24 = (let r = (K_12:
                                                         (JC_39:
                                                         ((mod_int !mutable_x_8) !mutable_y_8))) in
                                                (let q_1 = (K_11:
                                                           (JC_41:
                                                           ((div_int !mutable_x_8) !mutable_y_8))) in
                                                begin
                                                  (let jessie_19 = (mutable_x_8 := !mutable_y_8) in
                                                  void);
                                                 (let jessie_20 = (mutable_y_8 := r) in
                                                 void);
                                                 (let ta = (K_10: !a_3) in
                                                 (let tb = (K_9: !b_2) in
                                                 begin
                                                   (let jessie_21 = (a_3 := !c) in
                                                   void);
                                                  (let jessie_22 = (b_2 := !d_1) in
                                                  void);
                                                  (let jessie_23 = (c := 
                                                                    (K_6:
                                                                    ((sub_int ta) 
                                                                    (K_5:
                                                                    ((mul_int !c) q_1))))) in
                                                  void);
                                                  (d_1 := (K_8:
                                                          ((sub_int tb) 
                                                           (K_7:
                                                           ((mul_int !d_1) q_1)))));
                                                  !d_1
                                                 end))
                                                end)) in
                               void)
                              else
                               (let jessie_25 = (raise (Loop_exit_exc void)) in
                               void));
                             (raise (Loop_continue_exc void))
                            end in
           void)
           with
           Loop_continue_exc jessie_2 ->
           void end
         end
        done
        with
        Loop_exit_exc jessie_1 ->
        void end;
      (return := !mutable_x_8);
      (raise Return)
     end))));
    absurd 
   end
   with
   Return ->
   !return end))))
  { (JC_19: isGcd(x_8, y_8, result)) }

let Gcd_gcd_safety =
 fun (x_8 : int) (y_8 : int) ->
  { (JC_13: (ge_int(x_8, (0)) and ge_int(y_8, (0)))) }
  (let mutable_x_8 = ref x_8 in
  (let mutable_y_8 = ref y_8 in
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let a_3 = ref (K_17: (1)) in
     (let b_2 = ref (K_16: (0)) in
     (let c = ref (K_15: (0)) in
     (let d_1 = ref (K_14: (1)) in
     begin
       try
        while true do
        { invariant (JC_24: true)  }
         begin
           [ { } unit reads a_3,b_2,c,d_1,mutable_x_8,mutable_y_8
             { (JC_23:
               (ge_int(mutable_x_8, (0))
               and (ge_int(mutable_y_8, (0))
                   and ((forall d_2:int.
                         (isGcd(mutable_x_8, mutable_y_8, d_2) ->
                          isGcd(mutable_x_8@init, mutable_y_8@init, d_2@init)))
                       and (eq_int(add_int(mul_int(a_3, mutable_x_8@init),
                                   mul_int(b_2, mutable_y_8@init)),
                            mutable_x_8)
                           and eq_int(add_int(mul_int(c, mutable_x_8@init),
                                      mul_int(d_1, mutable_y_8@init)),
                               mutable_y_8)))))) } ];
          try
           (let jessie_10 = begin
                              (if (K_13: ((gt_int_ !mutable_y_8) (0)))
                              then
                               (let jessie_8 = (let r = (K_12:
                                                        (JC_26:
                                                        ((mod_int_ !mutable_x_8) !mutable_y_8))) in
                                               (let q_1 = (K_11:
                                                          (JC_28:
                                                          ((div_int_ !mutable_x_8) !mutable_y_8))) in
                                               begin
                                                 (let jessie_3 = (mutable_x_8 := !mutable_y_8) in
                                                 void);
                                                (let jessie_4 = (mutable_y_8 := r) in
                                                void);
                                                (let ta = (K_10: !a_3) in
                                                (let tb = (K_9: !b_2) in
                                                begin
                                                  (let jessie_5 = (a_3 := !c) in
                                                  void);
                                                 (let jessie_6 = (b_2 := !d_1) in
                                                 void);
                                                 (let jessie_7 = (c := 
                                                                  (K_6:
                                                                  ((sub_int ta) 
                                                                   (K_5:
                                                                   ((mul_int !c) q_1))))) in
                                                 void);
                                                 (d_1 := (K_8:
                                                         ((sub_int tb) 
                                                          (K_7:
                                                          ((mul_int !d_1) q_1)))));
                                                 !d_1
                                                end))
                                               end)) in
                               void)
                              else
                               (let jessie_9 = (raise (Loop_exit_exc void)) in
                               void));
                             (raise (Loop_continue_exc void))
                            end in
           void)
           with
           Loop_continue_exc jessie_2 ->
           void end
         end
        done
        with
        Loop_exit_exc jessie_1 ->
        void end;
      (return := !mutable_x_8);
      (raise Return)
     end))));
    absurd 
   end
   with
   Return ->
   !return end))))
  { true }


========== make project execution ==========
why --project [...] why/Gcd.why
========== file tests/java/why/Gcd.wpr ==========
<project name="Gcd" context="why/Gcd_ctx.why">
  <lemma name="distr_left">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Gcd_po1.why">
      <location file = "HOME/tests/java/Gcd.jc" line = "38" begin = "0" end = "152"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="distr_left_minus">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Gcd_po2.why">
      <location file = "HOME/tests/java/Gcd.jc" line = "19" begin = "0" end = "158"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="distr_right">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Gcd_po3.why">
      <location file = "HOME/tests/java/Gcd.jc" line = "50" begin = "0" end = "133"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="distr_right_minus">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Gcd_po4.why">
      <location file = "HOME/tests/java/Gcd.jc" line = "44" begin = "0" end = "159"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="div_mod_property">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Gcd_po5.why">
      <location file = "HOME/tests/java/Gcd.jc" line = "56" begin = "0" end = "159"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="gcd_property">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Gcd_po6.why">
      <location file = "HOME/tests/java/Gcd.jc" line = "30" begin = "0" end = "213"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="gcd_zero">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Gcd_po7.why">
      <location file = "HOME/tests/java/Gcd.jc" line = "15" begin = "0" end = "60"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="mod_property">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Gcd_po8.why">
      <location file = "HOME/tests/java/Gcd.jc" line = "68" begin = "0" end = "154"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="mul_assoc">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Gcd_po9.why">
      <location file = "HOME/tests/java/Gcd.jc" line = "62" begin = "0" end = "143"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <lemma name="mul_comm">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/Gcd_po10.why">
      <location file = "HOME/tests/java/Gcd.jc" line = "25" begin = "0" end = "97"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <function name="mul_comm">
    <location file = "HOME/tests/java/Gcd.jc" line = "25" begin = "0" end = "97"/>
  </function>
  <function name="mul_assoc">
    <location file = "HOME/tests/java/Gcd.jc" line = "62" begin = "0" end = "143"/>
  </function>
  <function name="mod_property">
    <location file = "HOME/tests/java/Gcd.jc" line = "68" begin = "0" end = "154"/>
  </function>
  <function name="gcd_zero">
    <location file = "HOME/tests/java/Gcd.jc" line = "15" begin = "0" end = "60"/>
  </function>
  <function name="gcd_property">
    <location file = "HOME/tests/java/Gcd.jc" line = "30" begin = "0" end = "213"/>
  </function>
  <function name="div_mod_property">
    <location file = "HOME/tests/java/Gcd.jc" line = "56" begin = "0" end = "159"/>
  </function>
  <function name="distr_right_minus">
    <location file = "HOME/tests/java/Gcd.jc" line = "44" begin = "0" end = "159"/>
  </function>
  <function name="distr_right">
    <location file = "HOME/tests/java/Gcd.jc" line = "50" begin = "0" end = "133"/>
  </function>
  <function name="distr_left_minus">
    <location file = "HOME/tests/java/Gcd.jc" line = "19" begin = "0" end = "158"/>
  </function>
  <function name="distr_left">
    <location file = "HOME/tests/java/Gcd.jc" line = "38" begin = "0" end = "152"/>
  </function>
  <function name="Method gcd">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Gcd_po22.why">
      <location file = "HOME/tests/java/Gcd.java" line = "106" begin = "20" end = "25"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `resultIsGcd'">
    <goal why_file="why/Gcd_po21.why">
      <location file = "HOME/tests/java/Gcd.java" line = "91" begin = "18" end = "36"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `bezoutProperty'">
    <goal why_file="why/Gcd_po11.why">
      <location file = "HOME/tests/java/Gcd.java" line = "93" begin = "18" end = "57"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/Gcd_po12.why">
      <location file = "HOME/tests/java/Gcd.java" line = "98" begin = "15" end = "219"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Gcd_po13.why">
      <location file = "HOME/tests/java/Gcd.java" line = "98" begin = "15" end = "219"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Gcd_po14.why">
      <location file = "HOME/tests/java/Gcd.java" line = "98" begin = "15" end = "219"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Gcd_po15.why">
      <location file = "HOME/tests/java/Gcd.java" line = "98" begin = "15" end = "219"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Gcd_po16.why">
      <location file = "HOME/tests/java/Gcd.java" line = "98" begin = "15" end = "219"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Gcd_po17.why">
      <location file = "HOME/tests/java/Gcd.java" line = "98" begin = "15" end = "219"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Gcd_po18.why">
      <location file = "HOME/tests/java/Gcd.java" line = "98" begin = "15" end = "219"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Gcd_po19.why">
      <location file = "HOME/tests/java/Gcd.java" line = "103" begin = "25" end = "26"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/Gcd_po20.why">
      <location file = "HOME/tests/java/Gcd.java" line = "103" begin = "25" end = "26"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
  </function>
</project>
========== file tests/java/why/Gcd_ctx.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic int_max : int, int -> int

logic int_min : int, int -> int

logic real_max : real, real -> real

logic real_min : real, real -> real

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null :  -> 'a1 pointer

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_positive: (forall p:'a1 pointer. (0 <= address(p)))

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

type Object

type interface

logic Gcd_tag :  -> Object tag_id

logic Object_tag :  -> Object tag_id

axiom Gcd_parenttag_Object: parenttag(Gcd_tag, Object_tag)

predicate Non_null_Object(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) = 0)

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_bitvector : bitvector -> Object pointer

logic bitvector_of_Object : Object pointer -> bitvector

axiom Object_of_bitvector_of_bitvector_of_Object:
  (forall x:Object pointer.
    (Object_of_bitvector(bitvector_of_Object(x)) = x))

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

axiom bitvector_of_Object_of_Object_of_bitvector:
  (forall x:bitvector. (bitvector_of_Object(Object_of_bitvector(x)) = x))

logic bitvector_of_interface : interface pointer -> bitvector

logic interface_of_bitvector : bitvector -> interface pointer

axiom bitvector_of_interface_of_interface_of_bitvector:
  (forall x:bitvector.
    (bitvector_of_interface(interface_of_bitvector(x)) = x))

axiom distr_left_as_axiom:
  (forall x_0_0:int.
    (forall y_0:int.
      (forall z_0:int.
        (((x_0_0 + y_0) * z_0) = ((x_0_0 * z_0) + (y_0 * z_0))))))

axiom distr_left_minus_as_axiom:
  (forall x_2:int.
    (forall y_2:int.
      (forall z_2:int. (((x_2 - y_2) * z_2) = ((x_2 * z_2) - (y_2 * z_2))))))

axiom distr_right_as_axiom:
  (forall x_4:int.
    (forall y:int.
      (forall z:int. ((x_4 * (y + z)) = ((x_4 * y) + (x_4 * z))))))

axiom distr_right_minus_as_axiom:
  (forall x_1:int.
    (forall y_1:int.
      (forall z_1:int. ((x_1 * (y_1 - z_1)) = ((x_1 * y_1) - (x_1 * z_1))))))

axiom div_mod_property_as_axiom:
  (forall x_6:int.
    (forall y_6:int.
      (((x_6 >= 0) and (y_6 > 0)) ->
       ((x_6 % y_6) = (x_6 - (y_6 * (x_6 / y_6)))))))

predicate divides(x_5: int, y_5: int) = (exists q:int. (y_5 = (q * x_5)))

predicate isGcd(a: int, b: int, d: int) =
  (divides(d, a) and
   (divides(d, b) and
    (forall z_4:int.
      ((divides(z_4, a) and divides(z_4, b)) -> divides(z_4, d)))))

axiom gcd_property_as_axiom:
  (forall a_1:int.
    (forall b_0:int.
      (forall d_0:int.
        (forall q_0:int.
          (((b_0 > 0) and isGcd(b_0, (a_1 % b_0), d_0)) -> isGcd(a_1, b_0,
           d_0))))))

axiom gcd_zero_as_axiom: (forall a_0:int. isGcd(a_0, 0, a_0))

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_of_bitvector_of_bitvector_of_interface:
  (forall x:interface pointer.
    (interface_of_bitvector(bitvector_of_interface(x)) = x))

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate left_valid_struct_Object(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = (offset_min(Object_alloc_table,
  p) <= a)

predicate left_valid_struct_Gcd(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_String(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_Throwable(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_interface(p: interface pointer, a: int,
  interface_alloc_table: interface alloc_table) =
  (offset_min(interface_alloc_table, p) <= a)

axiom mod_property_as_axiom:
  (forall x_7:int.
    (forall y_7:int.
      (((x_7 >= 0) and (y_7 > 0)) ->
       ((0 <= (x_7 % y_7)) and ((x_7 % y_7) < y_7)))))

axiom mul_assoc_as_axiom:
  (forall x_4_0:int.
    (forall y_4:int.
      (forall z_3:int. ((x_4_0 * (y_4 * z_3)) = ((x_4_0 * y_4) * z_3)))))

axiom mul_comm_as_axiom:
  (forall x_3:int. (forall y_3:int. ((x_3 * y_3) = (y_3 * x_3))))

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  p) >= b)

predicate right_valid_struct_Gcd(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_String(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_Throwable(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_interface(p: interface pointer, b: int,
  interface_alloc_table: interface alloc_table) =
  (offset_max(interface_alloc_table, p) >= b)

predicate strict_valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Gcd(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Gcd(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Gcd(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

========== file tests/java/why/Gcd_po1.why ==========
goal distr_left:
  (forall x_0_0:int.
    (forall y_0:int.
      (forall z_0:int.
        (((x_0_0 + y_0) * z_0) = ((x_0_0 * z_0) + (y_0 * z_0))))))

========== file tests/java/why/Gcd_po10.why ==========
goal mul_comm:
  (forall x_3:int. (forall y_3:int. ((x_3 * y_3) = (y_3 * x_3))))

========== file tests/java/why/Gcd_po11.why ==========
goal Gcd_gcd_ensures_bezoutProperty_po_1:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_43": true) ->
  ("JC_42":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 <= 0) ->
  forall return:int.
  (return = mutable_x_8) ->
  ("JC_21":
  (exists a_2:int. (exists b_1:int. (((a_2 * x_8) + (b_1 * y_8)) = return))))

========== file tests/java/why/Gcd_po12.why ==========
goal Gcd_gcd_ensures_default_po_1:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  ("JC_29": (((1 * x_8) + (0 * y_8)) = x_8))

========== file tests/java/why/Gcd_po13.why ==========
goal Gcd_gcd_ensures_default_po_2:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  ("JC_29": (((0 * x_8) + (1 * y_8)) = y_8))

========== file tests/java/why/Gcd_po14.why ==========
goal Gcd_gcd_ensures_default_po_3:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  ("JC_29": (mutable_x_8_0 >= 0))

========== file tests/java/why/Gcd_po15.why ==========
goal Gcd_gcd_ensures_default_po_4:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  ("JC_29": (mutable_y_8_0 >= 0))

========== file tests/java/why/Gcd_po16.why ==========
goal Gcd_gcd_ensures_default_po_5:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  forall d_2:int.
  isGcd(mutable_x_8_0, mutable_y_8_0, d_2) ->
  ("JC_29": isGcd(x_8, y_8, d_2))

========== file tests/java/why/Gcd_po17.why ==========
goal Gcd_gcd_ensures_default_po_6:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  ("JC_29": (((a_3_0 * x_8) + (b_2_0 * y_8)) = mutable_x_8_0))

========== file tests/java/why/Gcd_po18.why ==========
goal Gcd_gcd_ensures_default_po_7:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  ("JC_29": (((c0 * x_8) + (d_1_0 * y_8)) = mutable_y_8_0))

========== file tests/java/why/Gcd_po19.why ==========
goal Gcd_gcd_ensures_default_po_8:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  (0 <= ("JC_35": mutable_y_8))

========== file tests/java/why/Gcd_po2.why ==========
goal distr_left_minus:
  (forall x_2:int.
    (forall y_2:int.
      (forall z_2:int. (((x_2 - y_2) * z_2) = ((x_2 * z_2) - (y_2 * z_2))))))

========== file tests/java/why/Gcd_po20.why ==========
goal Gcd_gcd_ensures_default_po_9:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  (("JC_35": mutable_y_8_0) < ("JC_35": mutable_y_8))

========== file tests/java/why/Gcd_po21.why ==========
goal Gcd_gcd_ensures_resultIsGcd_po_1:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_37": true) ->
  ("JC_36":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 <= 0) ->
  forall return:int.
  (return = mutable_x_8) ->
  ("JC_19": isGcd(x_8, y_8, return))

========== file tests/java/why/Gcd_po22.why ==========
goal Gcd_gcd_safety_po_1:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_24": true) ->
  ("JC_23":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  (mutable_y_8 <> 0)

========== file tests/java/why/Gcd_po3.why ==========
goal distr_right:
  (forall x_4:int.
    (forall y:int.
      (forall z:int. ((x_4 * (y + z)) = ((x_4 * y) + (x_4 * z))))))

========== file tests/java/why/Gcd_po4.why ==========
goal distr_right_minus:
  (forall x_1:int.
    (forall y_1:int.
      (forall z_1:int. ((x_1 * (y_1 - z_1)) = ((x_1 * y_1) - (x_1 * z_1))))))

========== file tests/java/why/Gcd_po5.why ==========
goal div_mod_property:
  (forall x_6:int.
    (forall y_6:int.
      (((x_6 >= 0) and (y_6 > 0)) ->
       ((x_6 % y_6) = (x_6 - (y_6 * (x_6 / y_6)))))))

========== file tests/java/why/Gcd_po6.why ==========
goal gcd_property:
  (forall a_1:int.
    (forall b_0:int.
      (forall d_0:int.
        (forall q_0:int.
          (((b_0 > 0) and isGcd(b_0, (a_1 % b_0), d_0)) -> isGcd(a_1, b_0,
           d_0))))))

========== file tests/java/why/Gcd_po7.why ==========
goal gcd_zero:
  (forall a_0:int. isGcd(a_0, 0, a_0))

========== file tests/java/why/Gcd_po8.why ==========
goal mod_property:
  (forall x_7:int.
    (forall y_7:int.
      (((x_7 >= 0) and (y_7 > 0)) ->
       ((0 <= (x_7 % y_7)) and ((x_7 % y_7) < y_7)))))

========== file tests/java/why/Gcd_po9.why ==========
goal mul_assoc:
  (forall x_4_0:int.
    (forall y_4:int.
      (forall z_3:int. ((x_4_0 * (y_4 * z_3)) = ((x_4_0 * y_4) * z_3)))))

========== generation of Simplify VC output ==========
why -simplify [...] why/Gcd.why
========== file tests/java/simplify/Gcd_why.sx ==========

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(DEFPRED (valid a p) (AND (<= (offset_min a p) 0) (>= (offset_max a p) 0)))

(DEFPRED (same_block p q) (EQ (base_block p) (base_block q)))

(BG_PUSH
 ;; Why axiom address_injective
 (FORALL (p q) (IFF (EQ p q) (EQ (address p) (address q)))))

(BG_PUSH
 ;; Why axiom address_null
 (EQ (address null) 0))

(BG_PUSH
 ;; Why axiom address_positive
 (FORALL (p) (<= 0 (address p))))

(BG_PUSH
 ;; Why axiom address_shift_lt
 (FORALL (p i j)
 (IFF (< (address (shift p i)) (address (shift p j))) (< i j))))

(BG_PUSH
 ;; Why axiom address_shift_le
 (FORALL (p i j)
 (IFF (<= (address (shift p i)) (address (shift p j))) (<= i j))))

(BG_PUSH
 ;; Why axiom shift_zero
 (FORALL (p) (EQ (shift p 0) p)))

(BG_PUSH
 ;; Why axiom shift_shift
 (FORALL (p i j) (EQ (shift (shift p i) j) (shift p (+ i j)))))

(BG_PUSH
 ;; Why axiom offset_max_shift
 (FORALL (a p i) (EQ (offset_max a (shift p i)) (- (offset_max a p) i))))

(BG_PUSH
 ;; Why axiom offset_min_shift
 (FORALL (a p i) (EQ (offset_min a (shift p i)) (- (offset_min a p) i))))

(BG_PUSH
 ;; Why axiom neq_shift
 (FORALL (p i j) (IMPLIES (NEQ i j) (NEQ (shift p i) (shift p j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j) (FORALL (p) (NEQ (shift p i) (shift p j))))))

(BG_PUSH
 ;; Why axiom null_not_valid
 (FORALL (a) (NOT (valid a null))))

(BG_PUSH
 ;; Why axiom null_pointer
 (FORALL (a)
 (AND (>= (offset_min a null) 0) (<= (offset_max a null) (- 0 2)))))

(BG_PUSH
 ;; Why axiom eq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (eq_pointer_bool p1 p2) |@true|) (EQ p1 p2))))

(BG_PUSH
 ;; Why axiom neq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (neq_pointer_bool p1 p2) |@true|) (NEQ p1 p2))))

(BG_PUSH
 ;; Why axiom same_block_shift_right
 (FORALL (p q i) (IMPLIES (same_block p q) (same_block p (shift q i))))

 (FORALL (p q)
 (IMPLIES (same_block p q) (FORALL (i) (same_block p (shift q i))))))

(BG_PUSH
 ;; Why axiom same_block_shift_left
 (FORALL (p q i) (IMPLIES (same_block q p) (same_block (shift q i) p)))

 (FORALL (p q)
 (IMPLIES (same_block q p) (FORALL (i) (same_block (shift q i) p)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift
 (FORALL (p q) (IMPLIES (same_block p q) (EQ p (shift q (sub_pointer p q))))))

(BG_PUSH
 ;; Why axiom sub_pointer_self
 (FORALL (p) (EQ (sub_pointer p p) 0)))

(BG_PUSH
 ;; Why axiom sub_pointer_zero
 (FORALL (p q)
 (IMPLIES (same_block p q) (IMPLIES (EQ (sub_pointer p q) 0) (EQ p q)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_left
 (FORALL (p q i) (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_right
 (FORALL (p q i) (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom select_store_eq
 (FORALL (m p1 p2 a)
 (IMPLIES (EQ p1 p2) (EQ (select (|why__store| m p1 a) p2) a)))

 (FORALL (p1 p2)
 (IMPLIES (EQ p1 p2) (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) a)))))

(BG_PUSH
 ;; Why axiom select_store_neq
 (FORALL (m p1 p2 a)
 (IMPLIES (NEQ p1 p2) (EQ (select (|why__store| m p1 a) p2) (select m p2))))

 (FORALL (p1 p2)
 (IMPLIES (NEQ p1 p2)
 (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) (select m p2))))))

(DEFPRED (pset_disjoint ps1 ps2)
  (FORALL (p)
  (NOT (AND (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|)))))

(DEFPRED (pset_included ps1 ps2)
  (FORALL (p)
  (IMPLIES (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|))))

(BG_PUSH
 ;; Why axiom pset_included_self
 (FORALL (ps) (pset_included ps ps)))

(BG_PUSH
 ;; Why axiom pset_included_range
 (FORALL (ps a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (pset_included (pset_range ps a b) (pset_range ps c d))))

 (FORALL (a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (FORALL (ps) (pset_included (pset_range ps a b) (pset_range ps c d))))))

(BG_PUSH
 ;; Why axiom pset_included_range_all
 (FORALL (ps a b c d) (pset_included (pset_range ps a b) (pset_all ps))))

(BG_PUSH
 ;; Why axiom in_pset_empty
 (FORALL (p) (NOT (EQ (in_pset p pset_empty) |@true|))))

(BG_PUSH
 ;; Why axiom in_pset_singleton
 (FORALL (p q) (IFF (EQ (in_pset p (pset_singleton q)) |@true|) (EQ p q))))

(BG_PUSH
 ;; Why axiom in_pset_deref
 (FORALL (p m q)
 (IFF (EQ (in_pset p (pset_deref m q)) |@true|)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (select m r)))))))

(BG_PUSH
 ;; Why axiom in_pset_all
 (FORALL (p q)
 (IFF (EQ (in_pset p (pset_all q)) |@true|)
 (EXISTS (i)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))

(BG_PUSH
 ;; Why axiom in_pset_range
 (FORALL (p q a b)
 (IFF (EQ (in_pset p (pset_range q a b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_left
 (FORALL (p q b)
 (IFF (EQ (in_pset p (pset_range_left q b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_right
 (FORALL (p q a)
 (IFF (EQ (in_pset p (pset_range_right q a)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_union
 (FORALL (p s1 s2)
 (IFF (EQ (in_pset p (pset_union s1 s2)) |@true|)
 (OR (EQ (in_pset p s1) |@true|) (EQ (in_pset p s2) |@true|)))))

(BG_PUSH
 ;; Why axiom valid_pset_empty
 (FORALL (a) (EQ (valid_pset a pset_empty) |@true|)))

(BG_PUSH
 ;; Why axiom valid_pset_singleton
 (FORALL (a p)
 (IFF (EQ (valid_pset a (pset_singleton p)) |@true|) (valid a p))))

(BG_PUSH
 ;; Why axiom valid_pset_deref
 (FORALL (a m q)
 (IFF (EQ (valid_pset a (pset_deref m q)) |@true|)
 (FORALL (r p)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (EQ p (select m r))) (valid a p))))))

(BG_PUSH
 ;; Why axiom valid_pset_range
 (FORALL (a q c d)
 (IFF (EQ (valid_pset a (pset_range q c d)) |@true|)
 (FORALL (i r)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (AND (<= c i) (<= i d)))
 (valid a (shift r i)))))))

(BG_PUSH
 ;; Why axiom valid_pset_union
 (FORALL (a s1 s2)
 (IFF (EQ (valid_pset a (pset_union s1 s2)) |@true|)
 (AND (EQ (valid_pset a s1) |@true|) (EQ (valid_pset a s2) |@true|)))))

(DEFPRED (not_assigns a m1 m2 l)
  (FORALL (p)
  (IMPLIES (AND (valid a p) (NOT (EQ (in_pset p l) |@true|)))
  (EQ (select m2 p) (select m1 p)))))

(BG_PUSH
 ;; Why axiom not_assigns_refl
 (FORALL (a m l) (not_assigns a m m l)))

(BG_PUSH
 ;; Why axiom not_assigns_trans
 (FORALL (a m1 m2 m3 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))

 (FORALL (a m1 m2 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (FORALL (m3) (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))))

(BG_PUSH
 ;; Why axiom full_separated_shift1
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift2
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift3
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift4
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom subtag_bool_def
 (FORALL (t1 t2)
 (IFF (EQ (subtag_bool t1 t2) |@true|) (EQ (subtag t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom subtag_refl
 (FORALL (t) (EQ (subtag t t) |@true|)))

(BG_PUSH
 ;; Why axiom subtag_parent
 (FORALL (t1 t2 t3)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))

 (FORALL (t1 t2)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))))

(DEFPRED (instanceof a p t) (EQ (subtag (typeof a p) t) |@true|))

(BG_PUSH
 ;; Why axiom downcast_instanceof
 (FORALL (a p s) (IMPLIES (instanceof a p s) (EQ (downcast a p s) p))))

(BG_PUSH
 ;; Why axiom bottom_tag_axiom
 (FORALL (t) (EQ (subtag t bottom_tag) |@true|)))

(DEFPRED (root_tag t) (EQ (parenttag t bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom root_subtag
 (FORALL (a b c)
 (IMPLIES (root_tag a)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|)))))))

 (FORALL (a)
 (IMPLIES (root_tag a)
 (FORALL (b)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (FORALL (c)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|))))))))))

(DEFPRED (fully_packed tag_table mutable this)
  (EQ (select mutable this) (typeof tag_table this)))

(BG_PUSH
 ;; Why axiom bw_and_not_null
 (FORALL (a b) (IMPLIES (NEQ (bw_and a b) 0) (AND (NEQ a 0) (NEQ b 0)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsl a b)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_monotone
 (FORALL (a1 a2 b)
 (IMPLIES (AND (<= 0 a1) (AND (<= a1 a2) (<= 0 b)))
 (<= (lsl a1 b) (lsl a2 b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_decreases
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsr a b) a))))

(BG_PUSH
 ;; Why axiom asr_positive_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (asr a b)))))

(BG_PUSH
 ;; Why axiom asr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (asr a b) a))))

(BG_PUSH
 ;; Why axiom asr_lsr_same_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (asr a b) (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsl_of_lsr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsl (lsr a b) b) a))))

(BG_PUSH
 ;; Why axiom lsr_of_lsl_identity_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (lsr (lsl a b) b) a))))

(DEFPRED (alloc_fresh a p n)
  (FORALL (i) (IMPLIES (AND (<= 0 i) (< i n)) (NOT (valid a (shift p i))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_min
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_max
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_not_assigns_empty
 (FORALL (a1 a2 m1 m2 l p n)
 (IMPLIES
 (AND (EQ (alloc_extends a1 a2) |@true|)
 (AND (alloc_fresh a1 p n)
 (AND (not_assigns a2 m1 m2 l)
 (pset_included l (pset_all (pset_singleton p))))))
 (not_assigns a1 m1 m2 pset_empty))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_min
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_max
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom offset_min_bytes_def
 (FORALL (a p s)
 (IMPLIES (< 0 s)
 (AND (<= (offset_min a p) (* s (offset_min_bytes a p s)))
 (< (- (* s (offset_min_bytes a p s)) s) (offset_min a p)))))

 (FORALL (s)
 (IMPLIES (< 0 s)
 (FORALL (a p)
 (AND (<= (offset_min a p) (* s (offset_min_bytes a p s)))
 (< (- (* s (offset_min_bytes a p s)) s) (offset_min a p)))))))

(BG_PUSH
 ;; Why axiom offset_max_bytes_def
 (FORALL (a p s)
 (IMPLIES (< 0 s)
 (AND (<= (- (+ (* s (offset_max_bytes a p s)) s) 1) (offset_max a p))
 (< (offset_max a p) (- (+ (+ (* s (offset_max_bytes a p s)) s) s) 1)))))

 (FORALL (s)
 (IMPLIES (< 0 s)
 (FORALL (a p)
 (AND (<= (- (+ (* s (offset_max_bytes a p s)) s) 1) (offset_max a p))
 (< (offset_max a p) (- (+ (+ (* s (offset_max_bytes a p s)) s) s) 1)))))))

(BG_PUSH
 ;; Why axiom select_store_eq_union
 (FORALL (o1 s1 o2 s2 v1 v2)
 (IMPLIES (AND (EQ o1 o2) (EQ s1 s2))
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2) v2)))

 (FORALL (o1 s1 o2 s2)
 (IMPLIES (AND (EQ o1 o2) (EQ s1 s2))
 (FORALL (v1 v2) (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2) v2)))))

(BG_PUSH
 ;; Why axiom select_store_neq_union
 (FORALL (o1 s1 o2 s2 v1 v2)
 (IMPLIES (OR (<= (+ o2 s2) o1) (<= (+ o1 s2) o2))
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2)
 (extract_bytes v1 o2 s2))))

 (FORALL (o1 o2 s2)
 (IMPLIES (OR (<= (+ o2 s2) o1) (<= (+ o1 s2) o2))
 (FORALL (s1 v1 v2)
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2)
 (extract_bytes v1 o2 s2))))))

(BG_PUSH
 ;; Why axiom concat_replace_bytes_up
 (FORALL (o1 s1 o2 s2 v1 v2 v3)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o1 (+ s1 s2) (concat_bitvector v2 v3)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (s2 v1 v2 v3)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o1 (+ s1 s2) (concat_bitvector v2 v3)))))))

(BG_PUSH
 ;; Why axiom concat_replace_bytes_down
 (FORALL (o1 s1 o2 s2 v1 v2 v3)
 (IMPLIES (EQ (+ o2 s2) o1)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o2 (+ s1 s2) (concat_bitvector v3 v2)))))

 (FORALL (o1 o2 s2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (FORALL (s1 v1 v2 v3)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o2 (+ s1 s2) (concat_bitvector v3 v2)))))))

(BG_PUSH
 ;; Why axiom concat_extract_bytes
 (FORALL (o1 s1 o2 s2 v)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (concat_bitvector (extract_bytes v o1 s1) (extract_bytes v o2 s2))
 (extract_bytes v o1 (+ s1 s2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (s2 v)
 (EQ (concat_bitvector (extract_bytes v o1 s1) (extract_bytes v o2 s2))
 (extract_bytes v o1 (+ s1 s2)))))))

(BG_PUSH
 ;; Why axiom select_store_eq_bytes
 (FORALL (m p1 p2 o1 s1 o2 s2 v)
 (IMPLIES (AND (EQ p1 p2) (AND (EQ o1 o2) (EQ s1 s2)))
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2) v)))

 (FORALL (p1 p2 o1 s1 o2 s2)
 (IMPLIES (AND (EQ p1 p2) (AND (EQ o1 o2) (EQ s1 s2)))
 (FORALL (m v) (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2) v)))))

(BG_PUSH
 ;; Why axiom select_store_neq_bytes
 (FORALL (m p1 p2 o1 s1 o2 s2 v)
 (IMPLIES
 (pset_disjoint
 (pset_range (pset_singleton p1) o1 (+ o1 s1)) (pset_range
                                               (pset_singleton p2) o2 
                                               (+ o2 s2)))
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2)
 (select_bytes m p2 o2 s2))))

 (FORALL (p1 p2 o1 s1 o2 s2)
 (IMPLIES
 (pset_disjoint
 (pset_range (pset_singleton p1) o1 (+ o1 s1)) (pset_range
                                               (pset_singleton p2) o2 
                                               (+ o2 s2)))
 (FORALL (m v)
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2)
 (select_bytes m p2 o2 s2))))))

(BG_PUSH
 ;; Why axiom shift_store_bytes
 (FORALL (m p i o s v)
 (EQ (store_bytes m (shift p i) o s v) (store_bytes m p (+ o i) s v))))

(BG_PUSH
 ;; Why axiom shift_select_bytes
 (FORALL (m p i o s v)
 (EQ (select_bytes m (shift p i) o s) (select_bytes m p (+ o i) s))))

(BG_PUSH
 ;; Why axiom concat_store_bytes_up
 (FORALL (m p o1 s1 o2 s2 v1 v2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o1 (+ s1 s2) (concat_bitvector v1 v2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (m p s2 v1 v2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o1 (+ s1 s2) (concat_bitvector v1 v2)))))))

(BG_PUSH
 ;; Why axiom concat_store_bytes_down
 (FORALL (m p o1 s1 o2 s2 v1 v2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o2 (+ s1 s2) (concat_bitvector v2 v1)))))

 (FORALL (o1 o2 s2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (FORALL (m p s1 v1 v2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o2 (+ s1 s2) (concat_bitvector v2 v1)))))))

(BG_PUSH
 ;; Why axiom concat_select_bytes
 (FORALL (m p o1 s1 o2 s2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (concat_bitvector (select_bytes m p o1 s1) (select_bytes m p o2 s2))
 (select_bytes m p o1 (+ s1 s2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (m p s2)
 (EQ (concat_bitvector (select_bytes m p o1 s1) (select_bytes m p o2 s2))
 (select_bytes m p o1 (+ s1 s2)))))))

(BG_PUSH
 ;; Why axiom Gcd_parenttag_Object
 (EQ (parenttag Gcd_tag Object_tag) |@true|))

(DEFPRED (Non_null_Object x Object_alloc_table)
  (EQ (offset_max Object_alloc_table x) 0))

(BG_PUSH
 ;; Why axiom Object_int
 (EQ (int_of_tag Object_tag) 1))

(BG_PUSH
 ;; Why axiom Object_of_bitvector_of_bitvector_of_Object
 (FORALL (x) (EQ (Object_of_bitvector (bitvector_of_Object x)) x)))

(BG_PUSH
 ;; Why axiom Object_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (Object_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom Object_parenttag_bottom
 (EQ (parenttag Object_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom Object_tags
 (FORALL (x Object_tag_table) (instanceof Object_tag_table x Object_tag)))

(BG_PUSH
 ;; Why axiom String_parenttag_Object
 (EQ (parenttag String_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom Throwable_parenttag_Object
 (EQ (parenttag Throwable_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom bitvector_of_Object_of_Object_of_bitvector
 (FORALL (x) (EQ (bitvector_of_Object (Object_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom bitvector_of_interface_of_interface_of_bitvector
 (FORALL (x) (EQ (bitvector_of_interface (interface_of_bitvector x)) x)))

;; distr_left, File "HOME/tests/java/Gcd.jc", line 38, characters 0-152
(FORALL (x_0_0 y_0 z_0)
(EQ (* (+ x_0_0 y_0) z_0) (+ (* x_0_0 z_0) (* y_0 z_0))))

(BG_PUSH
 ;; Why axiom distr_left_as_axiom
 (FORALL (x_0_0 y_0 z_0)
 (EQ (* (+ x_0_0 y_0) z_0) (+ (* x_0_0 z_0) (* y_0 z_0)))))

;; distr_left_minus, File "HOME/tests/java/Gcd.jc", line 19, characters 0-158
(FORALL (x_2 y_2 z_2) (EQ (* (- x_2 y_2) z_2) (- (* x_2 z_2) (* y_2 z_2))))

(BG_PUSH
 ;; Why axiom distr_left_minus_as_axiom
 (FORALL (x_2 y_2 z_2) (EQ (* (- x_2 y_2) z_2) (- (* x_2 z_2) (* y_2 z_2)))))

;; distr_right, File "HOME/tests/java/Gcd.jc", line 50, characters 0-133
(FORALL (x_4 y z) (EQ (* x_4 (+ y z)) (+ (* x_4 y) (* x_4 z))))

(BG_PUSH
 ;; Why axiom distr_right_as_axiom
 (FORALL (x_4 y z) (EQ (* x_4 (+ y z)) (+ (* x_4 y) (* x_4 z)))))

;; distr_right_minus, File "HOME/tests/java/Gcd.jc", line 44, characters 0-159
(FORALL (x_1 y_1 z_1) (EQ (* x_1 (- y_1 z_1)) (- (* x_1 y_1) (* x_1 z_1))))

(BG_PUSH
 ;; Why axiom distr_right_minus_as_axiom
 (FORALL (x_1 y_1 z_1) (EQ (* x_1 (- y_1 z_1)) (- (* x_1 y_1) (* x_1 z_1)))))

;; div_mod_property, File "HOME/tests/java/Gcd.jc", line 56, characters 0-159
(FORALL (x_6 y_6)
(IMPLIES (AND (>= x_6 0) (> y_6 0))
(EQ (int_mod x_6 y_6) (- x_6 (* y_6 (int_div x_6 y_6))))))

(BG_PUSH
 ;; Why axiom div_mod_property_as_axiom
 (FORALL (x_6 y_6)
 (IMPLIES (AND (>= x_6 0) (> y_6 0))
 (EQ (int_mod x_6 y_6) (- x_6 (* y_6 (int_div x_6 y_6)))))))

(DEFPRED (divides x_5 y_5) (EXISTS (q) (EQ y_5 (* q x_5))))

(DEFPRED (isGcd a b d)
  (AND (divides d a)
  (AND (divides d b)
  (FORALL (z_4)
  (IMPLIES (AND (divides z_4 a) (divides z_4 b)) (divides z_4 d))))))

;; gcd_property, File "HOME/tests/java/Gcd.jc", line 30, characters 0-213
(FORALL (a_1 b_0 d_0 q_0)
(IMPLIES (AND (> b_0 0) (isGcd b_0 (int_mod a_1 b_0) d_0))
(isGcd a_1 b_0 d_0)))

(BG_PUSH
 ;; Why axiom gcd_property_as_axiom
 (FORALL (a_1 b_0 d_0 q_0)
 (IMPLIES (AND (> b_0 0) (isGcd b_0 (int_mod a_1 b_0) d_0))
 (isGcd a_1 b_0 d_0)))

 (FORALL (a_1 b_0 d_0)
 (IMPLIES (AND (> b_0 0) (isGcd b_0 (int_mod a_1 b_0) d_0))
 (FORALL (q_0) (isGcd a_1 b_0 d_0)))))

;; gcd_zero, File "HOME/tests/java/Gcd.jc", line 15, characters 0-60
(FORALL (a_0) (isGcd a_0 0 a_0))

(BG_PUSH
 ;; Why axiom gcd_zero_as_axiom
 (FORALL (a_0) (isGcd a_0 0 a_0)))

(BG_PUSH
 ;; Why axiom interface_int
 (EQ (int_of_tag interface_tag) 1))

(BG_PUSH
 ;; Why axiom interface_of_bitvector_of_bitvector_of_interface
 (FORALL (x) (EQ (interface_of_bitvector (bitvector_of_interface x)) x)))

(BG_PUSH
 ;; Why axiom interface_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (interface_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom interface_parenttag_bottom
 (EQ (parenttag interface_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_tags
 (FORALL (x interface_tag_table)
 (instanceof interface_tag_table x interface_tag)))

(DEFPRED (left_valid_struct_Object p a Object_alloc_table)
  (<= (offset_min Object_alloc_table p) a))

(DEFPRED (left_valid_struct_Gcd p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_String p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_Throwable p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_interface p a interface_alloc_table)
  (<= (offset_min interface_alloc_table p) a))

;; mod_property, File "HOME/tests/java/Gcd.jc", line 68, characters 0-154
(FORALL (x_7 y_7)
(IMPLIES (AND (>= x_7 0) (> y_7 0))
(AND (<= 0 (int_mod x_7 y_7)) (< (int_mod x_7 y_7) y_7))))

(BG_PUSH
 ;; Why axiom mod_property_as_axiom
 (FORALL (x_7 y_7)
 (IMPLIES (AND (>= x_7 0) (> y_7 0))
 (AND (<= 0 (int_mod x_7 y_7)) (< (int_mod x_7 y_7) y_7)))))

;; mul_assoc, File "HOME/tests/java/Gcd.jc", line 62, characters 0-143
(FORALL (x_4_0 y_4 z_3) (EQ (* x_4_0 (* y_4 z_3)) (* (* x_4_0 y_4) z_3)))

(BG_PUSH
 ;; Why axiom mul_assoc_as_axiom
 (FORALL (x_4_0 y_4 z_3) (EQ (* x_4_0 (* y_4 z_3)) (* (* x_4_0 y_4) z_3))))

;; mul_comm, File "HOME/tests/java/Gcd.jc", line 25, characters 0-97
(FORALL (x_3 y_3) (EQ (* x_3 y_3) (* y_3 x_3)))

(BG_PUSH
 ;; Why axiom mul_comm_as_axiom
 (FORALL (x_3 y_3) (EQ (* x_3 y_3) (* y_3 x_3))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_Object_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (Object_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_interface_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (interface_of_pointer_address p)))))

(DEFPRED (right_valid_struct_Object p b Object_alloc_table)
  (>= (offset_max Object_alloc_table p) b))

(DEFPRED (right_valid_struct_Gcd p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_String p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_Throwable p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_interface p b interface_alloc_table)
  (>= (offset_max interface_alloc_table p) b))

(DEFPRED (strict_valid_root_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (strict_valid_root_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (strict_valid_struct_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (strict_valid_struct_Gcd p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_String p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_Throwable p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_bitvector_struct_Object p a b bitvector_alloc_table)
  (AND (EQ (offset_min bitvector_alloc_table p) a)
  (EQ (offset_max bitvector_alloc_table p) b)))

(DEFPRED (valid_bitvector_struct_Gcd p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_String p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_Throwable p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_interface p a b bitvector_alloc_table)
  (AND (EQ (offset_min bitvector_alloc_table p) a)
  (EQ (offset_max bitvector_alloc_table p) b)))

(DEFPRED (valid_root_Object p a b Object_alloc_table)
  (AND (<= (offset_min Object_alloc_table p) a)
  (>= (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_root_interface p a b interface_alloc_table)
  (AND (<= (offset_min interface_alloc_table p) a)
  (>= (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_struct_Object p a b Object_alloc_table)
  (AND (<= (offset_min Object_alloc_table p) a)
  (>= (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_struct_Gcd p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_String p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_Throwable p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_interface p a b interface_alloc_table)
  (AND (<= (offset_min interface_alloc_table p) a)
  (>= (offset_max interface_alloc_table p) b)))

;; Gcd_gcd_ensures_bezoutProperty_po_1, File "HOME/tests/java/Gcd.java", line 93, characters 18-57
(FORALL (x_8)
(FORALL (y_8)
(IMPLIES (AND (>= x_8 0) (>= y_8 0))
(FORALL (a_3)
(FORALL (b_2)
(FORALL (c)
(FORALL (d_1)
(FORALL (mutable_x_8)
(FORALL (mutable_y_8)
(IMPLIES TRUE
(IMPLIES (AND (>= mutable_x_8 0)
         (AND (>= mutable_y_8 0)
         (AND
         (FORALL (d_2)
         (IMPLIES (isGcd mutable_x_8 mutable_y_8 d_2) (isGcd x_8 y_8 d_2)))
         (AND (EQ (+ (* a_3 x_8) (* b_2 y_8)) mutable_x_8)
         (EQ (+ (* c x_8) (* d_1 y_8)) mutable_y_8)))))
(IMPLIES (<= mutable_y_8 0)
(FORALL (return)
(IMPLIES (EQ return mutable_x_8)
(EXISTS (a_2) (EXISTS (b_1) (EQ (+ (* a_2 x_8) (* b_1 y_8)) return)))))))))))))))))

;; Gcd_gcd_ensures_default_po_1, File "HOME/tests/java/Gcd.java", line 98, characters 15-219
(FORALL (x_8)
(FORALL (y_8)
(IMPLIES (AND (>= x_8 0) (>= y_8 0)) (EQ (+ (* 1 x_8) (* 0 y_8)) x_8))))

;; Gcd_gcd_ensures_default_po_2, File "HOME/tests/java/Gcd.java", line 98, characters 15-219
(FORALL (x_8)
(FORALL (y_8)
(IMPLIES (AND (>= x_8 0) (>= y_8 0)) (EQ (+ (* 0 x_8) (* 1 y_8)) y_8))))

;; Gcd_gcd_ensures_default_po_3, File "HOME/tests/java/Gcd.java", line 98, characters 15-219
(FORALL (x_8)
(FORALL (y_8)
(IMPLIES (AND (>= x_8 0) (>= y_8 0))
(FORALL (a_3)
(FORALL (b_2)
(FORALL (c)
(FORALL (d_1)
(FORALL (mutable_x_8)
(FORALL (mutable_y_8)
(IMPLIES (AND (>= mutable_x_8 0)
         (AND (>= mutable_y_8 0)
         (AND
         (FORALL (d_2)
         (IMPLIES (isGcd mutable_x_8 mutable_y_8 d_2) (isGcd x_8 y_8 d_2)))
         (AND (EQ (+ (* a_3 x_8) (* b_2 y_8)) mutable_x_8)
         (EQ (+ (* c x_8) (* d_1 y_8)) mutable_y_8)))))
(IMPLIES (> mutable_y_8 0)
(FORALL (mutable_x_8_0)
(IMPLIES (EQ mutable_x_8_0 mutable_y_8)
(FORALL (mutable_y_8_0)
(IMPLIES (EQ mutable_y_8_0 (int_mod mutable_x_8 mutable_y_8))
(FORALL (a_3_0)
(IMPLIES (EQ a_3_0 c)
(FORALL (b_2_0)
(IMPLIES (EQ b_2_0 d_1)
(FORALL (c0)
(IMPLIES (EQ c0 (- a_3 (* c (int_div mutable_x_8 mutable_y_8))))
(FORALL (d_1_0)
(IMPLIES (EQ d_1_0 (- b_2 (* d_1 (int_div mutable_x_8 mutable_y_8))))
(>= mutable_x_8_0 0))))))))))))))))))))))))

;; Gcd_gcd_ensures_default_po_4, File "HOME/tests/java/Gcd.java", line 98, characters 15-219
(FORALL (x_8)
(FORALL (y_8)
(IMPLIES (AND (>= x_8 0) (>= y_8 0))
(FORALL (a_3)
(FORALL (b_2)
(FORALL (c)
(FORALL (d_1)
(FORALL (mutable_x_8)
(FORALL (mutable_y_8)
(IMPLIES (AND (>= mutable_x_8 0)
         (AND (>= mutable_y_8 0)
         (AND
         (FORALL (d_2)
         (IMPLIES (isGcd mutable_x_8 mutable_y_8 d_2) (isGcd x_8 y_8 d_2)))
         (AND (EQ (+ (* a_3 x_8) (* b_2 y_8)) mutable_x_8)
         (EQ (+ (* c x_8) (* d_1 y_8)) mutable_y_8)))))
(IMPLIES (> mutable_y_8 0)
(FORALL (mutable_x_8_0)
(IMPLIES (EQ mutable_x_8_0 mutable_y_8)
(FORALL (mutable_y_8_0)
(IMPLIES (EQ mutable_y_8_0 (int_mod mutable_x_8 mutable_y_8))
(FORALL (a_3_0)
(IMPLIES (EQ a_3_0 c)
(FORALL (b_2_0)
(IMPLIES (EQ b_2_0 d_1)
(FORALL (c0)
(IMPLIES (EQ c0 (- a_3 (* c (int_div mutable_x_8 mutable_y_8))))
(FORALL (d_1_0)
(IMPLIES (EQ d_1_0 (- b_2 (* d_1 (int_div mutable_x_8 mutable_y_8))))
(>= mutable_y_8_0 0))))))))))))))))))))))))

;; Gcd_gcd_ensures_default_po_5, File "HOME/tests/java/Gcd.java", line 98, characters 15-219
(FORALL (x_8)
(FORALL (y_8)
(IMPLIES (AND (>= x_8 0) (>= y_8 0))
(FORALL (a_3)
(FORALL (b_2)
(FORALL (c)
(FORALL (d_1)
(FORALL (mutable_x_8)
(FORALL (mutable_y_8)
(IMPLIES (AND (>= mutable_x_8 0)
         (AND (>= mutable_y_8 0)
         (AND
         (FORALL (d_2)
         (IMPLIES (isGcd mutable_x_8 mutable_y_8 d_2) (isGcd x_8 y_8 d_2)))
         (AND (EQ (+ (* a_3 x_8) (* b_2 y_8)) mutable_x_8)
         (EQ (+ (* c x_8) (* d_1 y_8)) mutable_y_8)))))
(IMPLIES (> mutable_y_8 0)
(FORALL (mutable_x_8_0)
(IMPLIES (EQ mutable_x_8_0 mutable_y_8)
(FORALL (mutable_y_8_0)
(IMPLIES (EQ mutable_y_8_0 (int_mod mutable_x_8 mutable_y_8))
(FORALL (a_3_0)
(IMPLIES (EQ a_3_0 c)
(FORALL (b_2_0)
(IMPLIES (EQ b_2_0 d_1)
(FORALL (c0)
(IMPLIES (EQ c0 (- a_3 (* c (int_div mutable_x_8 mutable_y_8))))
(FORALL (d_1_0)
(IMPLIES (EQ d_1_0 (- b_2 (* d_1 (int_div mutable_x_8 mutable_y_8))))
(FORALL (d_2)
(IMPLIES (isGcd mutable_x_8_0 mutable_y_8_0 d_2) (isGcd x_8 y_8 d_2))))))))))))))))))))))))))

;; Gcd_gcd_ensures_default_po_6, File "HOME/tests/java/Gcd.java", line 98, characters 15-219
(FORALL (x_8)
(FORALL (y_8)
(IMPLIES (AND (>= x_8 0) (>= y_8 0))
(FORALL (a_3)
(FORALL (b_2)
(FORALL (c)
(FORALL (d_1)
(FORALL (mutable_x_8)
(FORALL (mutable_y_8)
(IMPLIES (AND (>= mutable_x_8 0)
         (AND (>= mutable_y_8 0)
         (AND
         (FORALL (d_2)
         (IMPLIES (isGcd mutable_x_8 mutable_y_8 d_2) (isGcd x_8 y_8 d_2)))
         (AND (EQ (+ (* a_3 x_8) (* b_2 y_8)) mutable_x_8)
         (EQ (+ (* c x_8) (* d_1 y_8)) mutable_y_8)))))
(IMPLIES (> mutable_y_8 0)
(FORALL (mutable_x_8_0)
(IMPLIES (EQ mutable_x_8_0 mutable_y_8)
(FORALL (mutable_y_8_0)
(IMPLIES (EQ mutable_y_8_0 (int_mod mutable_x_8 mutable_y_8))
(FORALL (a_3_0)
(IMPLIES (EQ a_3_0 c)
(FORALL (b_2_0)
(IMPLIES (EQ b_2_0 d_1)
(FORALL (c0)
(IMPLIES (EQ c0 (- a_3 (* c (int_div mutable_x_8 mutable_y_8))))
(FORALL (d_1_0)
(IMPLIES (EQ d_1_0 (- b_2 (* d_1 (int_div mutable_x_8 mutable_y_8))))
(EQ (+ (* a_3_0 x_8) (* b_2_0 y_8)) mutable_x_8_0))))))))))))))))))))))))

;; Gcd_gcd_ensures_default_po_7, File "HOME/tests/java/Gcd.java", line 98, characters 15-219
(FORALL (x_8)
(FORALL (y_8)
(IMPLIES (AND (>= x_8 0) (>= y_8 0))
(FORALL (a_3)
(FORALL (b_2)
(FORALL (c)
(FORALL (d_1)
(FORALL (mutable_x_8)
(FORALL (mutable_y_8)
(IMPLIES (AND (>= mutable_x_8 0)
         (AND (>= mutable_y_8 0)
         (AND
         (FORALL (d_2)
         (IMPLIES (isGcd mutable_x_8 mutable_y_8 d_2) (isGcd x_8 y_8 d_2)))
         (AND (EQ (+ (* a_3 x_8) (* b_2 y_8)) mutable_x_8)
         (EQ (+ (* c x_8) (* d_1 y_8)) mutable_y_8)))))
(IMPLIES (> mutable_y_8 0)
(FORALL (mutable_x_8_0)
(IMPLIES (EQ mutable_x_8_0 mutable_y_8)
(FORALL (mutable_y_8_0)
(IMPLIES (EQ mutable_y_8_0 (int_mod mutable_x_8 mutable_y_8))
(FORALL (a_3_0)
(IMPLIES (EQ a_3_0 c)
(FORALL (b_2_0)
(IMPLIES (EQ b_2_0 d_1)
(FORALL (c0)
(IMPLIES (EQ c0 (- a_3 (* c (int_div mutable_x_8 mutable_y_8))))
(FORALL (d_1_0)
(IMPLIES (EQ d_1_0 (- b_2 (* d_1 (int_div mutable_x_8 mutable_y_8))))
(EQ (+ (* c0 x_8) (* d_1_0 y_8)) mutable_y_8_0))))))))))))))))))))))))

;; Gcd_gcd_ensures_default_po_8, File "HOME/tests/java/Gcd.java", line 103, characters 25-26
(FORALL (x_8)
(FORALL (y_8)
(IMPLIES (AND (>= x_8 0) (>= y_8 0))
(FORALL (a_3)
(FORALL (b_2)
(FORALL (c)
(FORALL (d_1)
(FORALL (mutable_x_8)
(FORALL (mutable_y_8)
(IMPLIES (AND (>= mutable_x_8 0)
         (AND (>= mutable_y_8 0)
         (AND
         (FORALL (d_2)
         (IMPLIES (isGcd mutable_x_8 mutable_y_8 d_2) (isGcd x_8 y_8 d_2)))
         (AND (EQ (+ (* a_3 x_8) (* b_2 y_8)) mutable_x_8)
         (EQ (+ (* c x_8) (* d_1 y_8)) mutable_y_8)))))
(IMPLIES (> mutable_y_8 0)
(FORALL (mutable_x_8_0)
(IMPLIES (EQ mutable_x_8_0 mutable_y_8)
(FORALL (mutable_y_8_0)
(IMPLIES (EQ mutable_y_8_0 (int_mod mutable_x_8 mutable_y_8))
(FORALL (a_3_0)
(IMPLIES (EQ a_3_0 c)
(FORALL (b_2_0)
(IMPLIES (EQ b_2_0 d_1)
(FORALL (c0)
(IMPLIES (EQ c0 (- a_3 (* c (int_div mutable_x_8 mutable_y_8))))
(FORALL (d_1_0)
(IMPLIES (EQ d_1_0 (- b_2 (* d_1 (int_div mutable_x_8 mutable_y_8))))
(<= 0 mutable_y_8))))))))))))))))))))))))

;; Gcd_gcd_ensures_default_po_9, File "HOME/tests/java/Gcd.java", line 103, characters 25-26
(FORALL (x_8)
(FORALL (y_8)
(IMPLIES (AND (>= x_8 0) (>= y_8 0))
(FORALL (a_3)
(FORALL (b_2)
(FORALL (c)
(FORALL (d_1)
(FORALL (mutable_x_8)
(FORALL (mutable_y_8)
(IMPLIES (AND (>= mutable_x_8 0)
         (AND (>= mutable_y_8 0)
         (AND
         (FORALL (d_2)
         (IMPLIES (isGcd mutable_x_8 mutable_y_8 d_2) (isGcd x_8 y_8 d_2)))
         (AND (EQ (+ (* a_3 x_8) (* b_2 y_8)) mutable_x_8)
         (EQ (+ (* c x_8) (* d_1 y_8)) mutable_y_8)))))
(IMPLIES (> mutable_y_8 0)
(FORALL (mutable_x_8_0)
(IMPLIES (EQ mutable_x_8_0 mutable_y_8)
(FORALL (mutable_y_8_0)
(IMPLIES (EQ mutable_y_8_0 (int_mod mutable_x_8 mutable_y_8))
(FORALL (a_3_0)
(IMPLIES (EQ a_3_0 c)
(FORALL (b_2_0)
(IMPLIES (EQ b_2_0 d_1)
(FORALL (c0)
(IMPLIES (EQ c0 (- a_3 (* c (int_div mutable_x_8 mutable_y_8))))
(FORALL (d_1_0)
(IMPLIES (EQ d_1_0 (- b_2 (* d_1 (int_div mutable_x_8 mutable_y_8))))
(< mutable_y_8_0 mutable_y_8))))))))))))))))))))))))

;; Gcd_gcd_ensures_resultIsGcd_po_1, File "HOME/tests/java/Gcd.java", line 91, characters 18-36
(FORALL (x_8)
(FORALL (y_8)
(IMPLIES (AND (>= x_8 0) (>= y_8 0))
(FORALL (a_3)
(FORALL (b_2)
(FORALL (c)
(FORALL (d_1)
(FORALL (mutable_x_8)
(FORALL (mutable_y_8)
(IMPLIES TRUE
(IMPLIES (AND (>= mutable_x_8 0)
         (AND (>= mutable_y_8 0)
         (AND
         (FORALL (d_2)
         (IMPLIES (isGcd mutable_x_8 mutable_y_8 d_2) (isGcd x_8 y_8 d_2)))
         (AND (EQ (+ (* a_3 x_8) (* b_2 y_8)) mutable_x_8)
         (EQ (+ (* c x_8) (* d_1 y_8)) mutable_y_8)))))
(IMPLIES (<= mutable_y_8 0)
(FORALL (return) (IMPLIES (EQ return mutable_x_8) (isGcd x_8 y_8 return)))))))))))))))

;; Gcd_gcd_safety_po_1, File "HOME/tests/java/Gcd.java", line 106, characters 20-25
(FORALL (x_8)
(FORALL (y_8)
(IMPLIES (AND (>= x_8 0) (>= y_8 0))
(FORALL (a_3)
(FORALL (b_2)
(FORALL (c)
(FORALL (d_1)
(FORALL (mutable_x_8)
(FORALL (mutable_y_8)
(IMPLIES TRUE
(IMPLIES (AND (>= mutable_x_8 0)
         (AND (>= mutable_y_8 0)
         (AND
         (FORALL (d_2)
         (IMPLIES (isGcd mutable_x_8 mutable_y_8 d_2) (isGcd x_8 y_8 d_2)))
         (AND (EQ (+ (* a_3 x_8) (* b_2 y_8)) mutable_x_8)
         (EQ (+ (* c x_8) (* d_1 y_8)) mutable_y_8)))))
(IMPLIES (> mutable_y_8 0) (NEQ mutable_y_8 0)))))))))))))

========== running Simplify ==========
Running Simplify on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/Gcd_why.sx           : ??????????............ (12/0/10/0/0)
total   :  22
valid   :  12 ( 55%)
invalid :   0 (  0%)
unknown :  10 ( 45%)
timeout :   0 (  0%)
failure :   0 (  0%)
========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/Gcd.why
========== file tests/java/why/Gcd_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic int_max : int, int -> int

logic int_min : int, int -> int

logic real_max : real, real -> real

logic real_min : real, real -> real

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null :  -> 'a1 pointer

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_positive: (forall p:'a1 pointer. (0 <= address(p)))

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

type Object

type interface

logic Gcd_tag :  -> Object tag_id

logic Object_tag :  -> Object tag_id

axiom Gcd_parenttag_Object: parenttag(Gcd_tag, Object_tag)

predicate Non_null_Object(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) = 0)

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_bitvector : bitvector -> Object pointer

logic bitvector_of_Object : Object pointer -> bitvector

axiom Object_of_bitvector_of_bitvector_of_Object:
  (forall x:Object pointer.
    (Object_of_bitvector(bitvector_of_Object(x)) = x))

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

axiom bitvector_of_Object_of_Object_of_bitvector:
  (forall x:bitvector. (bitvector_of_Object(Object_of_bitvector(x)) = x))

logic bitvector_of_interface : interface pointer -> bitvector

logic interface_of_bitvector : bitvector -> interface pointer

axiom bitvector_of_interface_of_interface_of_bitvector:
  (forall x:bitvector.
    (bitvector_of_interface(interface_of_bitvector(x)) = x))

goal distr_left:
  (forall x_0_0:int.
    (forall y_0:int.
      (forall z_0:int.
        (((x_0_0 + y_0) * z_0) = ((x_0_0 * z_0) + (y_0 * z_0))))))

axiom distr_left_as_axiom:
  (forall x_0_0:int.
    (forall y_0:int.
      (forall z_0:int.
        (((x_0_0 + y_0) * z_0) = ((x_0_0 * z_0) + (y_0 * z_0))))))

goal distr_left_minus:
  (forall x_2:int.
    (forall y_2:int.
      (forall z_2:int. (((x_2 - y_2) * z_2) = ((x_2 * z_2) - (y_2 * z_2))))))

axiom distr_left_minus_as_axiom:
  (forall x_2:int.
    (forall y_2:int.
      (forall z_2:int. (((x_2 - y_2) * z_2) = ((x_2 * z_2) - (y_2 * z_2))))))

goal distr_right:
  (forall x_4:int.
    (forall y:int.
      (forall z:int. ((x_4 * (y + z)) = ((x_4 * y) + (x_4 * z))))))

axiom distr_right_as_axiom:
  (forall x_4:int.
    (forall y:int.
      (forall z:int. ((x_4 * (y + z)) = ((x_4 * y) + (x_4 * z))))))

goal distr_right_minus:
  (forall x_1:int.
    (forall y_1:int.
      (forall z_1:int. ((x_1 * (y_1 - z_1)) = ((x_1 * y_1) - (x_1 * z_1))))))

axiom distr_right_minus_as_axiom:
  (forall x_1:int.
    (forall y_1:int.
      (forall z_1:int. ((x_1 * (y_1 - z_1)) = ((x_1 * y_1) - (x_1 * z_1))))))

goal div_mod_property:
  (forall x_6:int.
    (forall y_6:int.
      (((x_6 >= 0) and (y_6 > 0)) ->
       ((x_6 % y_6) = (x_6 - (y_6 * (x_6 / y_6)))))))

axiom div_mod_property_as_axiom:
  (forall x_6:int.
    (forall y_6:int.
      (((x_6 >= 0) and (y_6 > 0)) ->
       ((x_6 % y_6) = (x_6 - (y_6 * (x_6 / y_6)))))))

predicate divides(x_5: int, y_5: int) = (exists q:int. (y_5 = (q * x_5)))

predicate isGcd(a: int, b: int, d: int) =
  (divides(d, a) and
   (divides(d, b) and
    (forall z_4:int.
      ((divides(z_4, a) and divides(z_4, b)) -> divides(z_4, d)))))

goal gcd_property:
  (forall a_1:int.
    (forall b_0:int.
      (forall d_0:int.
        (forall q_0:int.
          (((b_0 > 0) and isGcd(b_0, (a_1 % b_0), d_0)) -> isGcd(a_1, b_0,
           d_0))))))

axiom gcd_property_as_axiom:
  (forall a_1:int.
    (forall b_0:int.
      (forall d_0:int.
        (forall q_0:int.
          (((b_0 > 0) and isGcd(b_0, (a_1 % b_0), d_0)) -> isGcd(a_1, b_0,
           d_0))))))

goal gcd_zero:
  (forall a_0:int. isGcd(a_0, 0, a_0))

axiom gcd_zero_as_axiom: (forall a_0:int. isGcd(a_0, 0, a_0))

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_of_bitvector_of_bitvector_of_interface:
  (forall x:interface pointer.
    (interface_of_bitvector(bitvector_of_interface(x)) = x))

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate left_valid_struct_Object(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = (offset_min(Object_alloc_table,
  p) <= a)

predicate left_valid_struct_Gcd(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_String(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_Throwable(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_interface(p: interface pointer, a: int,
  interface_alloc_table: interface alloc_table) =
  (offset_min(interface_alloc_table, p) <= a)

goal mod_property:
  (forall x_7:int.
    (forall y_7:int.
      (((x_7 >= 0) and (y_7 > 0)) ->
       ((0 <= (x_7 % y_7)) and ((x_7 % y_7) < y_7)))))

axiom mod_property_as_axiom:
  (forall x_7:int.
    (forall y_7:int.
      (((x_7 >= 0) and (y_7 > 0)) ->
       ((0 <= (x_7 % y_7)) and ((x_7 % y_7) < y_7)))))

goal mul_assoc:
  (forall x_4_0:int.
    (forall y_4:int.
      (forall z_3:int. ((x_4_0 * (y_4 * z_3)) = ((x_4_0 * y_4) * z_3)))))

axiom mul_assoc_as_axiom:
  (forall x_4_0:int.
    (forall y_4:int.
      (forall z_3:int. ((x_4_0 * (y_4 * z_3)) = ((x_4_0 * y_4) * z_3)))))

goal mul_comm:
  (forall x_3:int. (forall y_3:int. ((x_3 * y_3) = (y_3 * x_3))))

axiom mul_comm_as_axiom:
  (forall x_3:int. (forall y_3:int. ((x_3 * y_3) = (y_3 * x_3))))

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  p) >= b)

predicate right_valid_struct_Gcd(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_String(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_Throwable(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_interface(p: interface pointer, b: int,
  interface_alloc_table: interface alloc_table) =
  (offset_max(interface_alloc_table, p) >= b)

predicate strict_valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Gcd(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Gcd(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Gcd(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

goal Gcd_gcd_ensures_bezoutProperty_po_1:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_43": true) ->
  ("JC_42":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 <= 0) ->
  forall return:int.
  (return = mutable_x_8) ->
  ("JC_21":
  (exists a_2:int. (exists b_1:int. (((a_2 * x_8) + (b_1 * y_8)) = return))))

goal Gcd_gcd_ensures_default_po_1:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  ("JC_29": (((1 * x_8) + (0 * y_8)) = x_8))

goal Gcd_gcd_ensures_default_po_2:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  ("JC_29": (((0 * x_8) + (1 * y_8)) = y_8))

goal Gcd_gcd_ensures_default_po_3:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  ("JC_29": (mutable_x_8_0 >= 0))

goal Gcd_gcd_ensures_default_po_4:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  ("JC_29": (mutable_y_8_0 >= 0))

goal Gcd_gcd_ensures_default_po_5:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  forall d_2:int.
  isGcd(mutable_x_8_0, mutable_y_8_0, d_2) ->
  ("JC_29": isGcd(x_8, y_8, d_2))

goal Gcd_gcd_ensures_default_po_6:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  ("JC_29": (((a_3_0 * x_8) + (b_2_0 * y_8)) = mutable_x_8_0))

goal Gcd_gcd_ensures_default_po_7:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  ("JC_29": (((c0 * x_8) + (d_1_0 * y_8)) = mutable_y_8_0))

goal Gcd_gcd_ensures_default_po_8:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  (0 <= ("JC_35": mutable_y_8))

goal Gcd_gcd_ensures_default_po_9:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_29":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  forall mutable_x_8_0:int.
  (mutable_x_8_0 = mutable_y_8) ->
  forall mutable_y_8_0:int.
  (mutable_y_8_0 = (mutable_x_8 % mutable_y_8)) ->
  forall a_3_0:int.
  (a_3_0 = c) ->
  forall b_2_0:int.
  (b_2_0 = d_1) ->
  forall c0:int.
  (c0 = (a_3 - (c * (mutable_x_8 / mutable_y_8)))) ->
  forall d_1_0:int.
  (d_1_0 = (b_2 - (d_1 * (mutable_x_8 / mutable_y_8)))) ->
  (("JC_35": mutable_y_8_0) < ("JC_35": mutable_y_8))

goal Gcd_gcd_ensures_resultIsGcd_po_1:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_37": true) ->
  ("JC_36":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 <= 0) ->
  forall return:int.
  (return = mutable_x_8) ->
  ("JC_19": isGcd(x_8, y_8, return))

goal Gcd_gcd_safety_po_1:
  forall x_8:int.
  forall y_8:int.
  ("JC_13": ((x_8 >= 0) and (y_8 >= 0))) ->
  forall a_3:int.
  forall b_2:int.
  forall c:int.
  forall d_1:int.
  forall mutable_x_8:int.
  forall mutable_y_8:int.
  ("JC_24": true) ->
  ("JC_23":
  ((mutable_x_8 >= 0) and
   ((mutable_y_8 >= 0) and
    ((forall d_2:int.
       (isGcd(mutable_x_8, mutable_y_8, d_2) -> isGcd(x_8, y_8, d_2))) and
     ((((a_3 * x_8) + (b_2 * y_8)) = mutable_x_8) and
      (((c * x_8) + (d_1 * y_8)) = mutable_y_8)))))) ->
  (mutable_y_8 > 0) ->
  (mutable_y_8 <> 0)

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/Gcd_why.why               : ??????????.......?.... (11/0/11/0/0)
total   :  22
valid   :  11 ( 50%)
invalid :   0 (  0%)
unknown :  11 ( 50%)
timeout :   0 (  0%)
failure :   0 (  0%)
