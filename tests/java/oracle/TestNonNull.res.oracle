========== file tests/java/TestNonNull.java ==========

//@+ NonNullByDefault = all


class TestNonNull {
    
    static final int N = 2;

    static int[] st;
    //@ static invariant st_length: st.length >= 4;

    int[] t;



    TestNonNull() {
	t = new int[3];
	//@ assert t.length == 3;
    }


    //@ requires t.length >= 4;
    void test(int[] t) {
	int i = t[3];
	t[2] = 1;
	int j = t[N];
	t[N + 1] = 1;
	st[3] == 1;
    }

}
========== krakatoa execution ==========
Parsing OK.
Typing OK.
Generating JC function cons_TestNonNull for constructor TestNonNull
Generating JC function TestNonNull_test for method TestNonNull.test
Done.
========== file tests/java/TestNonNull.jc ==========
# InvariantPolicy = Arguments
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = None

type byte = -128..127

type short = -32768..32767

type int32 = -2147483648..2147483647

type long = -9223372036854775808..9223372036854775807

type char = 0..65535

logic Non_null_intM{Here}(intM[0..] x) =
(\offset_max(x) >= -1)

logic Non_null_Object{Here}(Object[0..] x) =
(\offset_max(x) == 0)

logic int32 TestNonNull_N =
2

tag Object = {
}

tag String = Object with {
}

tag Throwable = Object with {
}

tag Exception = Object with {
}

tag TestNonNull = Object with {
  intM[0..-1] t;
}

type Object = [Object]

type interface = [interface]

tag interface = {
}

tag intM = Object with {
  int32 intP;
}

boolean non_null_intM(! intM[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) >= -1) else (x == null));
;

integer java_array_length_intM(! intM[0..] x)
behavior non_null:
  assigns \nothing;
  ensures ((\result <= 2147483647) &&
            ((\result >= 0) && ((\result == (\offset_max(x) + 1)) && true)));
;

boolean non_null_Object(! Object[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) == 0) else (x == null));
;

intM[0..-1] TestNonNull_st;

invariant st_length :
((\offset_max(TestNonNull_st) + 1) >= 4)

exception Throwable of Throwable[0..]

exception Exception of Exception[0..]

unit cons_TestNonNull(! TestNonNull[0] this_1)
{  (this_1.t = null);
   (K_1 : (this_1.t = (new intM[3])));
   (K_3 : 
   (assert (K_2 : ((\offset_max(this_1.t) + 1) == 3))))
}

unit TestNonNull_test(TestNonNull[0] this_0, intM[0..-1] t)
  requires (K_11 : ((\offset_max(t) + 1) >= 4));
{  
   {  
      (var int32 i = (K_10 : (t + 3).intP));
      
      {  (K_4 : ((t + 2).intP = 1));
         
         {  
            (var int32 j = (K_9 : (t + TestNonNull_N).intP));
            
            {  (K_6 : ((t + (K_5 : ((TestNonNull_N + 1) :> int32))).intP = 1));
               (K_8 : ((K_7 : (TestNonNull_st + 3).intP) == 1))
            }
         }
      }
   }
}

/*
Local Variables:
mode: java
compile-command: "jessie -why-opt -split-user-conj -locs tests/java/TestNonNull.jloc tests/java/TestNonNull.jc && make -f tests/java/TestNonNull.makefile gui"
End:
*/
========== file tests/java/TestNonNull.jloc ==========
[K_10]
file = "HOME/tests/java/TestNonNull.java"
line = 24
begin = 9
end = 13

[K_11]
file = "HOME/tests/java/TestNonNull.java"
line = 22
begin = 17
end = 30

[cons_TestNonNull]
name = "Constructor of class TestNonNull"
file = "HOME/tests/java/TestNonNull.java"
line = 16
begin = 4
end = 15

[K_1]
file = "HOME/tests/java/TestNonNull.java"
line = 17
begin = 1
end = 15

[K_2]
file = "HOME/tests/java/TestNonNull.java"
line = 18
begin = 12
end = 25

[K_3]
file = "HOME/tests/java/TestNonNull.java"
line = 18
begin = 12
end = 25

[K_4]
file = "HOME/tests/java/TestNonNull.java"
line = 25
begin = 1
end = 9

[K_5]
file = "HOME/tests/java/TestNonNull.java"
line = 27
begin = 3
end = 8

[K_6]
file = "HOME/tests/java/TestNonNull.java"
line = 27
begin = 1
end = 13

[K_7]
file = "HOME/tests/java/TestNonNull.java"
line = 28
begin = 1
end = 6

[K_8]
file = "HOME/tests/java/TestNonNull.java"
line = 28
begin = 1
end = 11

[K_9]
file = "HOME/tests/java/TestNonNull.java"
line = 26
begin = 9
end = 13

[TestNonNull_test]
name = "Method test"
file = "HOME/tests/java/TestNonNull.java"
line = 23
begin = 9
end = 13

========== jessie execution ==========
Generating Why function cons_TestNonNull
